\documentclass{article}
\usepackage{axiom}

\author{Gabriel Dos~Reis}

\begin{document}

\begin{abstract}
\end{abstract}

\tableofcontents
\eject

\section{The Byte domain}

<<domain BYTE Byte>>=
import NonNegativeInteger
import OutputForm
)abbrev domain BYTE Byte
++ Author: Gabriel Dos Reis
++ Date Created: April 19, 2008
++ Related Constructor:
++ Description:
++   Byte is the datatype of 8-bit sized unsigned integer values.
Byte(): Public == Private where
  Public ==> Join(OrderedSet, CoercibleTo NonNegativeInteger) with
    byte: NonNegativeInteger -> %
      ++ byte(x) injects the unsigned integer value `v' into
      ++ the Byte algebra.  `v' must be non-negative and less than 256.
    coerce: NonNegativeInteger -> %
      ++ coerce(x) has the same effect as byte(x).
    bitand: (%,%) -> %
      ++ bitand(x,y) returns the bitwise `and' of `x' and `y'.
    bitior: (%,%) -> %
      ++ bitor(x,y) returns the bitwise `inclusive or' of `x' and `y'.

  Private ==> add
    byte(x: NonNegativeInteger): % ==
      not (x < 256$Lisp) => 
        userError "integer value cannot be represented by a byte"
      x : %

    coerce(x: NonNegativeInteger): % ==
      byte x

    coerce(x: %): NonNegativeInteger ==
      x : NonNegativeInteger

    coerce(x: %): OutputForm ==
      x::NonNegativeInteger::OutputForm
    
    x = y ==
      byteEqual(x,y)$Lisp

    x < y ==
      byteLessThan(x,y)$Lisp

    bitand(x,y) ==
      bitand(x,y)$Lisp

    bitior(x,y) ==
      bitior(x,y)$Lisp
@


\section{The ByteArray domain}

<<domain BYTEARY ByteArray>>=
import PrimitiveArray
import Byte
)abbrev domain BYTEARY ByteArray
++ Author: Gabriel Dos Reis
++ Date Created: April 19, 2008
++ Related Constructor:
++ Description:
++   ByteArray provides datatype for fix-sized buffer of bytes.
ByteArray() == PrimitiveArray Byte
@


\section{The DataBuffer domain}

<<domain DATABUF DataBuffer>>=
)abbrev domain DATABUF DataBuffer
++ Author: Gabriel Dos Reis
++ Date Created: August 23, 2008
++ Description:
++   This domain provides for a fixed-sized homogeneous data buffer.
DataBuffer(N: PositiveInteger, T: SetCategory): Public == Private where
  Public == SetCategory with
    new: () -> %
      ++ new() returns a fresly allocated data buffer or length N.
    elt: (%,NonNegativeInteger) -> T
      ++ elt(b,i) returns the ith element in buffer `b'.  Indexing
      ++ is 0-based.
    setelt: (%,NonNegativeInteger,T) -> T
      ++ setelt(b,i,x) sets the ith entry of data buffer `b' to `x'.
      ++ Indexing is 0-based.
  Private == add
    new() == 
      makeSimpleArray(getVMType(T)$Lisp,N)$Lisp

    elt(b,i) == 
      getSimpleArrayEntry(b,i)$Lisp

    setelt(b,i,x) ==
      setSimpleArrayEntry(b,i,x)$Lisp

    x = y ==
      EQUAL(x,y)$Lisp

    coerce(b: %): OutputForm ==
      bracket([elt(b,i)::OutputForm for i in 0..(N-1)])
@


\section{License}
<<license>>=
--Copyright (C) 2007-2008, Gabriel Dos Reis.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical Algorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


<<*>>=
<<license>>
<<domain BYTE Byte>>
<<domain BYTEARY ByteArray>>
@

\end{document}
