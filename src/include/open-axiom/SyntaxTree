// -*- C++ -*-
// Copyright (C) 2017, Gabriel Dos Reis.
// All rights reserved.
// Written by Gabriel Dos Reis.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     - Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     - Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in
//       the documentation and/or other materials provided with the
//       distribution.
//
//     - Neither the name of OpenAxiom, nor the names of its contributors may
//       be used to endorse or promote products derived from this software
//       without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
// OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef OPENAXIOM_SYNTAX_TREE_included
#define OPENAXIOM_SYNTAX_TREE_included

#include <stdint.h>
#include <open-axiom/token>

namespace OpenAxiom {
   enum class SyntaxKind : uint8_t {
      Module, Namespce, Import, Definition, Unparsed
   };
   
   enum SyntaxTree : uint32_t { };

   constexpr SyntaxKind kind(SyntaxTree t) {
      return SyntaxKind((uint32_t(t) & 0xFF000000) >> 24);
   }

   constexpr uint32_t index(SyntaxTree t) {
      return uint32_t(t) & 0x00FFFFFF;
   }

   struct ModuleSyntax {
      TokenIndex keyword;
      TokenIndex name;
   };

   struct NamespaceSyntax {
      TokenIndex keyword;
      TokenIndex name;
   };

   struct ImportSyntax {
      TokenIndex keyword;
   };

   struct DefinitionSyntax {
      TokenIndex keyword;
   };

   struct UnparsedSyntax {
      TokenIndex first;
      TokenIndex last;
   };
}

#endif  // OPENAXIOM_SYNTAX_TREE_included

