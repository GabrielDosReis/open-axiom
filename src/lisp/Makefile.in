# Copyright (C) 2007-2008, Gabriel Dos Reis.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     - Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     - Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     - Neither the name of The Numerical Algorithms Group Ltd. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


OUT = $(axiom_build_bindir)

subdir = src/lisp/

pamphlets = Makefile.pamphlet

build_libdir = ./$(top_builddir)/src/lib

## Ideally, we would like to use Libtool for producing, and linking with,
## object files from C codes.  That means any C source code
## explicitly included in OpenAxiom, or produced internally by a Lisp
## compiler.  However, the SYSTEM calls by GCL on Windows is very tricky
## to convince to properly resolve path names to executables.
## Consequently we temporarily give up here, e.g., we don't
## instruct GCL to use Libtool on Windows.
GCL_LTCC = $(if $(findstring mingw, $(target)),"","$(LIBTOOL) --mode=compile ")
GCL_LTLD = $(if $(findstring mingw, $(target)),"","$(LIBTOOL) --mode=link ")

## Again, ideally, we would like GCL to link with the compiled Lisp
## code from core.lisp.  However, the general interface compiler::link
## that GCL provides for that task is unsupported on Windows platforms.
## So, we instruct GCL so load the source file instead.
fasl_ext = $(if $(findstring mingw, $(target)),.lisp,.$(FASLEXT))
FASLS = $(patsubst %,"%", $(addsuffix $(fasl_ext),core))

.PHONY: all all-lisp
all: all-ax all-lisp

all-ax all-lisp: stamp

stamp: $(OUT)/lisp$(EXEEXT)
	@rm -f stamp
	$(STAMP) $@

## Create a fresh image for building interpsys and AXIOMsys
## These objects files are the C runtime support
## and must be compiled into the Lisp image,
## as they must be present in the final interpreter
## and image.
lisp_c_objects = \
		$(build_libdir)/bsdsignal.$(OBJEXT) \
		$(build_libdir)/cfuns-c.$(OBJEXT) \
		$(build_libdir)/sockio-c.$(OBJEXT)

$(OUT)/lisp$(EXEEXT): base-lisp$(EXEEXT)
ifeq (@axiom_lisp_flavor@,gcl)
	@axiom_gcl_rsym_hack@
	echo '(let* ((sys-cc compiler::*cc*) ' \
	     '      (sys-ld compiler::*ld*) ' \
	     '      (compiler::*cc* (concatenate (quote string) ' \
	     '                                   $(GCL_LTCC)    ' \
	     '                                   sys-cc))       ' \
	     '      (compiler::*ld* (concatenate (quote string) ' \
	     '                                   $(GCL_LTLD)    ' \
	     '                                   sys-ld)))       ' \
             '(compiler::link (quote ($(FASLS))) "lisp$(EXEEXT)" ' \
             ' (format nil "(progn (let ((*load-path* (cons ~S *load-path*))'\
                                        ' (si::*load-types* ~S)))' \
                                  ' (when (fboundp (quote si::sgc-on))' \
                                        ' (si::sgc-on nil))' \
				  ' (setq si::*top-level-hook* (read-from-string \"|AxiomCore|::|topLevel|\")))"' \
                      ' si::*system-directory* (quote (list ".lsp")))' \
               '  "$(lisp_c_objects) @axiom_c_runtime_extra@"))' \
            | ./base-lisp$(EXEEXT)
	$(mkinstalldirs) $(OUT)
	$(INSTALL_PROGRAM) lisp$(EXEEXT) $(OUT)
else
	$(mkinstalldirs) $(OUT)
	$(INSTALL_PROGRAM) $< $@ && $(INSTALL_PROGRAM) $< lisp$(EXEEXT)
endif

ifeq (@axiom_lisp_flavor@,ecl)
base_lisp_objects = ("core.$(OBJEXT)")
else
base_lisp_objects = nil
endif


base-lisp$(EXEEXT): core.$(FASLEXT)
	$(AXIOM_LISP) \
		$(eval_flags) '(load "core")' \
		$(eval_flags) '(|AxiomCore|::|link| "$@" (quote $(base_lisp_objects)) (quote |AxiomCore|::|topLevel|))'


axiom_optimize_options = @axiom_optimize_options@

void_type = @void_type@
char_type = @char_type@
int_type = @int_type@
float_type = @float_type@
double_type = @double_type@
string_type = @string_type@
pointer_type = @pointer_type@

edit = sed \
	-e 's|@open_axiom_installdir[@]|$(open_axiom_installdir)|g' \
	-e 's|@axiom_optimize_options[@]|$(axiom_optimize_options)|g' \
	-e 's|@host[@]|$(host)|g' \
	-e 's|@build[@]|$(build)|g' \
	-e 's|@target[@]|$(target)|g' \
	-e 's|@SHREXT[@]|$(SHREXT)|g' \
	-e 's|@void_type[@]|$(void_type)|g' \
	-e 's|@char_type[@]|$(char_type)|g' \
	-e 's|@int_type[@]|$(int_type)|g' \
	-e 's|@float_type[@]|$(float_type)|g' \
	-e 's|@double_type[@]|$(double_type)|g' \
	-e 's|@string_type[@]|$(string_type)|g' \
	-e 's|@pointer_type[@]|$(pointer_type)|g'

core.lisp: $(srcdir)/core.lisp.in
	$(edit) $< > $@.tmp
	$(top_srcdir)/config/move-if-change $@.tmp $@

core.$(FASLEXT): core.lisp
ifeq (@axiom_lisp_flavor@,ecl)
	$(AXIOM_LISP) $(quiet_flags) \
		$(eval_flags) '(require (quote cmp))' \
		$(eval_flags) '(compile-file "$<" :system-p t)' \
		$(eval_flags) '(c::build-fasl "$@" :lisp-files (quote ("core.$(OBJEXT)")))' \
		$(eval_flags) '(quit)'
else
	$(AXIOM_LISP) $(quiet_flags) \
		$(eval_flags) '(progn (compile-file "$<") (quit))'
endif


mostlyclean-local:
	rm -f *.$(FASLEXT)
	@rm -f $(OUT)/lisp$(EXEEXT) lisp$(EXEEXT)
	@rm -f stamp

clean-local: mostlyclean

distclean-local: clean-local
	@rm -f Makefile
