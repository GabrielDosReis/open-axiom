\documentclass{article}
\usepackage{open-axiom}
\begin{document}
\title{src/algebra mkrecord.spad}
\author{The Axiom Team}
\maketitle

\begin{abstract}
\end{abstract}
\tableofcontents
\eject

\section{package MKRECORD MakeRecord}

<<package MKRECORD MakeRecord>>=
import Type
)abbrev package MKRECORD MakeRecord
++ Description:
++  MakeRecord is used internally by the interpreter to create record
++  types which are used for doing parallel iterations on streams.
MakeRecord(S: Type, T: Type): public == private where
  public == with
    makeRecord: (S,T) -> Record(part1: S, part2: T)
      ++ makeRecord(a,b) creates a record object with type 
      ++ Record(part1:S, part2:R), where part1 is \spad{a} and part2 is \spad{b}.
  private == add
    makeRecord(s: S, t: T)  ==
      [s,t]$Record(part1: S, part2: T)

@

\section{domain PAIR Pair}

<<domain PAIR Pair>>=
import Type
import CoercibleTo OutputForm
import SetCategory
)abbrev domain PAIR Pair
++ Author: Gabriel Dos Reis
++ Date Created: January 16, 2008
++ Date Last Modified: January 16, 2008
++ Description:  This domain provides a very simple representation
++ of the notion of `pair of objects'.  It does not try to achieve
++ all possible imaginable things.
Pair(S: Type, T: Type): Public == Private where
  Public ==> Type with

    if S has CoercibleTo OutputForm and T has CoercibleTo OutputForm then
      CoercibleTo OutputForm

    if S has SetCategory and T has SetCategory then SetCategory

    pair: (S,T) -> %
      ++ pair(s,t) returns a pair object composed of `s' and `t'.
    construct: (S,T) -> %
      ++ construct(s,t) is same as pair(s,t), with syntactic sugar.
    first: % -> S
      ++ first(p) extracts the first component of `p'.
    second: % -> T
      ++ second(p) extracts the second components of `p'.

  Private ==> add
    Rep := Record(fst: S, snd: T)

    pair(s,t) ==
      [s,t]$Rep

    construct(s,t) ==
      pair(s,t)

    first x ==
      x.fst

    second x ==
      x.snd

    if S has CoercibleTo OutputForm and T has CoercibleTo OutputForm then
      coerce x ==
        paren([first(x)::OutputForm, second(x)::OutputForm])$OutputForm

    if S has SetCategory and T has SetCategory then
      x = y ==
        first(x) = first(y) and second(x) = second(y)
@


\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical Algorithms Group Ltd.
--All rights reserved.
-- Copyright (C) 2007-2008, Gabriel Dos Reis.
-- All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<package MKRECORD MakeRecord>>
<<domain PAIR Pair>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
