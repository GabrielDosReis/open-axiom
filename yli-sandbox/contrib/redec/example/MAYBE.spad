import UnionType
import CoercibleTo OutputForm
import Boolean
)abbrev domain MAYBE Maybe
++ Author: Gabriel Dos Reis
++ Date Created: August 20, 2008
++ Also See: Union(T,"failed")
++ Description:
++   This domain implements the notion of optional vallue, where
++   a computation may fail to produce expected value.
++ Note: Ideally, this domain definition should be a one-liner.
++       That is currently impossible because of mismatch between
++       the `old representation' and `new representation' for domains.
Maybe(T: CoercibleTo OutputForm): Public == Private where
  Public == Join(UnionType,CoercibleTo OutputForm) with
    _case: (%,[| T |]) -> Boolean
      ++ x case T returns true if x is actually a data of type T.
    _case: (%,[| nothing |]) -> Boolean
      ++ x case nothing evaluates true if the value for x is missing.
    coerce: T -> % 
      ++ x::T injects the value x into %.
    coerce: % -> T
      ++ x::T tries to extract the value of T from the computation x.
      ++ Produces a runtime error when the computation fails.
    autoCoerce: % -> T
      ++ same as above but implicitly called by the compiler.
    nothing: %
      ++ represents failure.
  Private == add
    Rep == Union(T,"nothing")
    nothing == per("nothing"::Rep)
    coerce(x: T): % == per(x::Rep)
    coerce(x: %): T == rep(x)::T
    autoCoerce x == rep(x)::T
    x case T == rep x case T
    x case nothing == rep x case "nothing"
    coerce(x: %): OutputForm == 
      x case T => x::T::OutputForm
      paren(empty()$OutputForm)$OutputForm
