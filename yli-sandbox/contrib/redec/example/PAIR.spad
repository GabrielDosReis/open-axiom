import Type
import CoercibleTo OutputForm
import SetCategory
)abbrev domain PAIR Pair
++ Author: Gabriel Dos Reis
++ Date Created: January 16, 2008
++ Date Last Modified: January 16, 2008
++ Description:  This domain provides a very simple representation
++ of the notion of `pair of objects'.  It does not try to achieve
++ all possible imaginable things.
Pair(S: Type, T: Type): Public == Private where
  Public ==> Type with

    if S has CoercibleTo OutputForm and T has CoercibleTo OutputForm then
      CoercibleTo OutputForm

    if S has SetCategory and T has SetCategory then SetCategory

    pair: (S,T) -> %
      ++ pair(s,t) returns a pair object composed of `s' and `t'.
    construct: (S,T) -> %
      ++ construct(s,t) is same as pair(s,t), with syntactic sugar.
    first: % -> S
      ++ first(p) extracts the first component of `p'.
    second: % -> T
      ++ second(p) extracts the second components of `p'.

  Private ==> add
    Rep := Record(fst: S, snd: T)

    pair(s,t) ==
      [s,t]$Rep

    construct(s,t) ==
      pair(s,t)

    first x ==
      x.fst

    second x ==
      x.snd

    if S has CoercibleTo OutputForm and T has CoercibleTo OutputForm then
      coerce x ==
        paren([first(x)::OutputForm, second(x)::OutputForm])$OutputForm

    if S has SetCategory and T has SetCategory then
      x = y ==
        first(x) = first(y) and second(x) = second(y)
