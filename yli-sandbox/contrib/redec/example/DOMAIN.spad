import Void
import ConstructorCall
import DomainConstructor
)abbrev domain DOMAIN Domain
++ Author: Gabriel Dos Reis
++ Date Create: October 18, 2007.
++ Date Last Updated: December 20, 2008.
++ Basic Operations: coerce, reify
++ Related Constructors: Type, Syntax, OutputForm
++ Also See: Type, ConstructorCall
Domain(): Public == Private where
  Public == SetCategory with
    constructor: % -> DomainConstructor
      ++ constructor(d) returns the domain constructor that is
      ++ instantiated to the domain object `d'.
    reify: % -> ConstructorCall
      ++ reify(d) returns the abstract syntax for the domain `x'.

    reflect: ConstructorCall -> %
      ++ reflect cc returns the domain object designated by the
      ++ ConstructorCall syntax `cc'.  The constructor implied 
      ++ by `cc' must be known to the system since it is instantiated.
   
    showSummary: % -> Void
      ++ showSummary(d) prints out implementation detail information
      ++ of domain `d'.

  Private == add
    constructor x ==
      CAR(devaluate(x)$Lisp)$Lisp

    coerce x ==
      outputDomainConstructor(x)$Lisp

    reify x ==
      devaluate(x)$Lisp @ ConstructorCall

    reflect cc ==
      evalDomain(cc)$Lisp @ %

    x = y ==
      reify x = reify y

    showSummary x ==
      showSummary(x)$Lisp

