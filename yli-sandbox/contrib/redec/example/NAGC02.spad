)abbrev package NAGC02 NagPolynomialRootsPackage
++ Author: Godfrey Nolan and Mike Dewar
++ Date Created: Jan 1994
++ Date Last Updated: Thu May 12 17:44:27 1994
++Description:
++This package uses the NAG Library to compute the zeros of a
++polynomial with real or complex coefficients.
++See \downlink{Manual Page}{manpageXXc02}.

NagPolynomialRootsPackage(): Exports == Implementation where
  S ==> Symbol
  FOP ==> FortranOutputStackPackage

  Exports ==> with
    c02aff : (Matrix DoubleFloat,Integer,Boolean,Integer) -> Result 
     ++ c02aff(a,n,scale,ifail)
     ++ finds all the roots of a complex polynomial equation, 
     ++ using a variant of Laguerre's Method.
     ++ See \downlink{Manual Page}{manpageXXc02aff}.
    c02agf : (Matrix DoubleFloat,Integer,Boolean,Integer) -> Result 
     ++ c02agf(a,n,scale,ifail)
     ++ finds all the roots of a real polynomial equation, using a
     ++ variant of Laguerre's Method.
     ++ See \downlink{Manual Page}{manpageXXc02agf}.
  Implementation ==> add

    import Lisp
    import DoubleFloat
    import Matrix DoubleFloat
    import Any
    import Record
    import Integer
    import Boolean
    import NAGLinkSupportPackage
    import AnyFunctions1(Matrix DoubleFloat)
    import AnyFunctions1(Integer)
    import AnyFunctions1(Boolean)


    c02aff(aArg:Matrix DoubleFloat,nArg:Integer,scaleArg:Boolean,_
        ifailArg:Integer): Result == 
        [(invokeNagman(NIL$Lisp,_
        "c02aff",_
        ["n"::S,"scale"::S,"ifail"::S,"a"::S,"z"::S,"w"::S]$Lisp,_
        ["z"::S,"w"::S]$Lisp,_
        [["double"::S,["a"::S,2$Lisp,["+"::S,"n"::S,1$Lisp]$Lisp]$Lisp_
        ,["z"::S,2$Lisp,"n"::S]$Lisp,["w"::S,["*"::S,["+"::S,"n"::S,1$Lisp]$Lisp,4$Lisp]$Lisp]$Lisp]$Lisp_
        ,["integer"::S,"n"::S,"ifail"::S]$Lisp_
        ,["logical"::S,"scale"::S]$Lisp_
        ]$Lisp,_
        ["z"::S,"ifail"::S]$Lisp,_
        [([nArg::Any,scaleArg::Any,ifailArg::Any,aArg::Any ])_
        @List Any]$Lisp)$Lisp)_
        pretend List (Record(key:Symbol,entry:Any))]$Result



    c02agf(aArg:Matrix DoubleFloat,nArg:Integer,scaleArg:Boolean,_
        ifailArg:Integer): Result == 
        [(invokeNagman(NIL$Lisp,_
        "c02agf",_
        ["n"::S,"scale"::S,"ifail"::S,"a"::S,"z"::S,"w"::S]$Lisp,_
        ["z"::S,"w"::S]$Lisp,_
        [["double"::S,["a"::S,["+"::S,"n"::S,1$Lisp]$Lisp]$Lisp_
        ,["z"::S,2$Lisp,"n"::S]$Lisp,["w"::S,["*"::S,["+"::S,"n"::S,1$Lisp]$Lisp,2$Lisp]$Lisp]$Lisp]$Lisp_
        ,["integer"::S,"n"::S,"ifail"::S]$Lisp_
        ,["logical"::S,"scale"::S]$Lisp_
        ]$Lisp,_
        ["z"::S,"ifail"::S]$Lisp,_
        [([nArg::Any,scaleArg::Any,ifailArg::Any,aArg::Any ])_
        @List Any]$Lisp)$Lisp)_
        pretend List (Record(key:Symbol,entry:Any))]$Result

