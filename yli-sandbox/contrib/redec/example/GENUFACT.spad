)abbrev package GENUFACT GenUFactorize
++ Description
++ This package provides operations for the factorization of univariate polynomials with integer
++ coefficients. The factorization is done by "lifting" the
++ finite "berlekamp's" factorization
GenUFactorize(R) : public == private where
  R    :    EuclideanDomain
  PR   ==>  SparseUnivariatePolynomial R  -- with factor
            -- should be UnivariatePolynomialCategory
  NNI  ==>  NonNegativeInteger
  SUP  ==>  SparseUnivariatePolynomial
 
 
  public == with
     factor      :           PR  -> Factored PR
        ++ factor(p) returns the factorisation of p
 
  private == add

    -- Factorisation currently fails when algebraic extensions have multiple
    -- generators.
    factorWarning(f:OutputForm):Void ==
      import AnyFunctions1(String)
      import AnyFunctions1(OutputForm)
      outputList(["WARNING (genufact): No known algorithm to factor "::Any, _
              f::Any, _
              ", trying square-free."::Any])$OutputPackage
 
    factor(f:PR) : Factored PR ==
      R is Integer => (factor f)$GaloisGroupFactorizer(PR)
 
      R is Fraction Integer  =>
                                (factor f)$RationalFactorize(PR)
 
--      R has Field and R has Finite =>
      R has FiniteFieldCategory =>
                                (factor f)$DistinctDegreeFactorize(R,PR)
 
      R is (Complex Integer) => (factor f)$ComplexFactorization(Integer,PR)
 
      R is (Complex Fraction Integer) =>
                           (factor f)$ComplexFactorization(Fraction Integer,PR)
 
      R is AlgebraicNumber =>   (factor f)$AlgFactor(PR)
 
   -- following is to handle SAE
      R has generator : () -> R =>
        var := symbol(convert(generator()::OutputForm)@InputForm)
        up:=UnivariatePolynomial(var,Fraction Integer)
        R has MonogenicAlgebra(Fraction Integer, up) =>
           factor(f)$SimpleAlgebraicExtensionAlgFactor(up, R, PR)
        upp:=UnivariatePolynomial(var,Fraction Polynomial Integer)
        R has MonogenicAlgebra(Fraction Polynomial Integer, upp) =>
           factor(f)$SAERationalFunctionAlgFactor(upp, R, PR)
        factorWarning(f::OutputForm)
        squareFree f            
      factorWarning(f::OutputForm)
      squareFree f

