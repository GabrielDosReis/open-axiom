)abbrev package NAGF07 NagLapack
++ Author: Godfrey Nolan and Mike Dewar
++ Date Created: Jan 1994
++ Date Last Updated: Thu May 12 17:45:42 1994
++Description:
++This package uses the NAG Library to compute matrix
++factorizations, and to solve systems of linear equations
++following the matrix factorizations.
++See \downlink{Manual Page}{manpageXXf07}.
NagLapack(): Exports == Implementation where
  S ==> Symbol
  FOP ==> FortranOutputStackPackage

  Exports ==> with
    f07adf : (Integer,Integer,Integer,Matrix DoubleFloat) -> Result 
     ++ f07adf(m,n,lda,a)
     ++ (DGETRF) computes the LU factorization of a real m by n 
     ++ matrix.
     ++ See \downlink{Manual Page}{manpageXXf07adf}.
    f07aef : (String,Integer,Integer,Matrix DoubleFloat,_
        Integer,Matrix Integer,Integer,Matrix DoubleFloat) -> Result 
     ++ f07aef(trans,n,nrhs,a,lda,ipiv,ldb,b)
     ++ (DGETRS) solves a real system of linear equations with 
     ++                                     T                     
     ++ multiple right-hand sides, AX=B or A X=B, where A has been 
     ++ factorized by F07ADF (DGETRF).
     ++ See \downlink{Manual Page}{manpageXXf07aef}.
    f07fdf : (String,Integer,Integer,Matrix DoubleFloat) -> Result 
     ++ f07fdf(uplo,n,lda,a)
     ++ (DPOTRF) computes the Cholesky factorization of a real 
     ++ symmetric positive-definite matrix.
     ++ See \downlink{Manual Page}{manpageXXf07fdf}.
    f07fef : (String,Integer,Integer,Matrix DoubleFloat,_
        Integer,Integer,Matrix DoubleFloat) -> Result 
     ++ f07fef(uplo,n,nrhs,a,lda,ldb,b)
     ++ (DPOTRS) solves a real symmetric positive-definite system 
     ++ of linear equations with multiple right-hand sides, AX=B, where A
     ++ has been factorized by F07FDF (DPOTRF).
     ++ See \downlink{Manual Page}{manpageXXf07fef}.
  Implementation ==> add

    import Lisp
    import DoubleFloat
    import Any
    import Record
    import Integer
    import Matrix DoubleFloat
    import Boolean
    import NAGLinkSupportPackage
    import AnyFunctions1(Integer)
    import AnyFunctions1(Matrix DoubleFloat)
    import AnyFunctions1(String)
    import AnyFunctions1(Matrix Integer)


    f07adf(mArg:Integer,nArg:Integer,ldaArg:Integer,_
        aArg:Matrix DoubleFloat): Result == 
        [(invokeNagman(NIL$Lisp,_
        "f07adf",_
        ["m"::S,"n"::S,"lda"::S,"info"::S,"ipiv"::S,"a"::S]$Lisp,_
        ["ipiv"::S,"info"::S]$Lisp,_
        [["double"::S,["a"::S,"lda"::S,"n"::S]$Lisp_
        ]$Lisp_
        ,["integer"::S,"m"::S,"n"::S,"lda"::S,["ipiv"::S,"m"::S]$Lisp_
        ,"info"::S]$Lisp_
        ]$Lisp,_
        ["ipiv"::S,"info"::S,"a"::S]$Lisp,_
        [([mArg::Any,nArg::Any,ldaArg::Any,aArg::Any ])_
        @List Any]$Lisp)$Lisp)_
        pretend List (Record(key:Symbol,entry:Any))]$Result

    f07aef(transArg:String,nArg:Integer,nrhsArg:Integer,_
        aArg:Matrix DoubleFloat,ldaArg:Integer,ipivArg:Matrix Integer,_
        ldbArg:Integer,bArg:Matrix DoubleFloat): Result == 
        [(invokeNagman(NIL$Lisp,_
        "f07aef",_
        ["trans"::S,"n"::S,"nrhs"::S,"lda"::S,"ldb"::S_
        ,"info"::S,"a"::S,"ipiv"::S,"b"::S]$Lisp,_
        ["info"::S]$Lisp,_
        [["double"::S,["a"::S,"lda"::S,"n"::S]$Lisp_
        ,["b"::S,"ldb"::S,"nrhs"::S]$Lisp]$Lisp_
        ,["integer"::S,"n"::S,"nrhs"::S,"lda"::S,["ipiv"::S,"n"::S]$Lisp_
        ,"ldb"::S,"info"::S]$Lisp_
        ,["character"::S,"trans"::S]$Lisp_
        ]$Lisp,_
        ["info"::S,"b"::S]$Lisp,_
        [([transArg::Any,nArg::Any,nrhsArg::Any,ldaArg::Any,ldbArg::Any,aArg::Any,ipivArg::Any,bArg::Any ])_
        @List Any]$Lisp)$Lisp)_
        pretend List (Record(key:Symbol,entry:Any))]$Result

    f07fdf(uploArg:String,nArg:Integer,ldaArg:Integer,_
        aArg:Matrix DoubleFloat): Result == 
        [(invokeNagman(NIL$Lisp,_
        "f07fdf",_
        ["uplo"::S,"n"::S,"lda"::S,"info"::S,"a"::S]$Lisp,_
        ["info"::S]$Lisp,_
        [["double"::S,["a"::S,"lda"::S,"n"::S]$Lisp_
        ]$Lisp_
        ,["integer"::S,"n"::S,"lda"::S,"info"::S]$Lisp_
        ,["character"::S,"uplo"::S]$Lisp_
        ]$Lisp,_
        ["info"::S,"a"::S]$Lisp,_
        [([uploArg::Any,nArg::Any,ldaArg::Any,aArg::Any ])_
        @List Any]$Lisp)$Lisp)_
        pretend List (Record(key:Symbol,entry:Any))]$Result

    f07fef(uploArg:String,nArg:Integer,nrhsArg:Integer,_
        aArg:Matrix DoubleFloat,ldaArg:Integer,ldbArg:Integer,_
        bArg:Matrix DoubleFloat): Result == 
        [(invokeNagman(NIL$Lisp,_
        "f07fef",_
        ["uplo"::S,"n"::S,"nrhs"::S,"lda"::S,"ldb"::S_
        ,"info"::S,"a"::S,"b"::S]$Lisp,_
        ["info"::S]$Lisp,_
        [["double"::S,["a"::S,"lda"::S,"n"::S]$Lisp_
        ,["b"::S,"ldb"::S,"nrhs"::S]$Lisp]$Lisp_
        ,["integer"::S,"n"::S,"nrhs"::S,"lda"::S,"ldb"::S_
        ,"info"::S]$Lisp_
        ,["character"::S,"uplo"::S]$Lisp_
        ]$Lisp,_
        ["info"::S,"b"::S]$Lisp,_
        [([uploArg::Any,nArg::Any,nrhsArg::Any,ldaArg::Any,ldbArg::Any,aArg::Any,bArg::Any ])_
        @List Any]$Lisp)$Lisp)_
        pretend List (Record(key:Symbol,entry:Any))]$Result

