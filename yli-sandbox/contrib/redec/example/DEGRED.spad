)abbrev package DEGRED DegreeReductionPackage
++ This package \undocumented{}
DegreeReductionPackage(R1, R2): Cat == Capsule where
    R1: Ring
    R2: Join(IntegralDomain,OrderedSet)
 
    I    ==> Integer
    PI   ==> PositiveInteger
    UP   ==> SparseUnivariatePolynomial
    RE   ==> Expression R2
 
    Cat == with
        reduce:  UP R1    ->  Record(pol: UP R1, deg: PI)
                ++ reduce(p) \undocumented{}
        expand:  (RE, PI) ->  List RE
                ++ expand(f,n) \undocumented{}
 
    Capsule == add
 
 
        degrees(u: UP R1): List Integer ==
            l: List Integer := []
            while u ~= 0 repeat
              l := concat(degree u,l)
              u := reductum u
            l
        reduce(u: UP R1) ==
            g := "gcd"/[d for d in degrees u]
            u := divideExponents(u, g:PI)::(UP R1)
            [u, g:PI]
 
        import Fraction Integer
 
        rootOfUnity(j:I,n:I):RE ==
            j = 0 => 1
            arg:RE := 2*j*pi()/(n::RE)
            cos arg + (-1)**(1/2) * sin arg
 
        expand(s, g) ==
            g = 1 => [s]
            [rootOfUnity(i,g)*s**(1/g) for i in 0..g-1]

