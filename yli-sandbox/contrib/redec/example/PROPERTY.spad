import CoercibleTo OutputForm
import Symbol
import SExpression
)abbrev domain PROPERTY Property
++ Author: Gabriel Dos Reis
++ Date Created: October 24, 2007
++ Date Last Modified: January 18, 2008.
++ An `Property' is a pair of name and value.  
Property(): Public == Private where
  Public ==> CoercibleTo(OutputForm) with
    name: % -> Symbol         
      ++ name(p) returns the name of property p
    value: % -> SExpression   
      ++ value(p) returns value of property p
    property: (Symbol, SExpression) -> %
      ++ property(n,val) constructs a property with name `n' and
      ++ value `val'.
  
  Private ==> add
    rep(x: %): SExpression ==
      x pretend SExpression

    per(x: SExpression): % ==
      x pretend %

    name x == 
      -- Note: It is always well defined to take the `car' here
      -- because there is no way we could have type safely 
      -- constructed a null property.
      symbol car rep x

    value x ==
      cdr rep x

    property(n,val) ==
      per CONS(n,val)$Lisp
 
    coerce x ==
      v := value x
      val: OutputForm
      if null? v then val := false::OutputForm
      else if EQ(v, true)$Lisp : Boolean
           then val := true::OutputForm
           else val := v::OutputForm
      
      bracket(infix(outputForm '_=_>, outputForm name x, 
                val)$OutputForm)$OutputForm

