)abbrev domain SPADAST SpadAst
++ Author: Gabriel Dos Reis
++ Date Created: September 21, 2008
++ Date Last Modified: September 21, 2008
++ Description: This domain represents a kind of base domain
++   for Spad syntax domain.  It merely exists as a kind of
++   of abstract base in object-oriented programming language.
++   However, this is not an abstract class.  
SpadAst(): SpadAstExports() == add
  isAst(x: %, tag: Symbol): Boolean ==
    (op := getOperator(x::Syntax)) case Symbol and op = tag

  x case ImportAst == isAst(x,'import)
  autoCoerce(x: %): ImportAst == x : ImportAst

  x case DefinitionAst == isAst(x,'DEF)
  autoCoerce(x: %): DefinitionAst == x : DefinitionAst

  x case MacroAst == isAst(x,'MDEF)
  autoCoerce(x: %): MacroAst == x : MacroAst

  x case WhereAst == isAst(x,'where)
  autoCoerce(x: %): WhereAst == x : WhereAst

  x case CategoryAst == isAst(x,'CATEGORY)
  autoCoerce(x: %): CategoryAst == x : CategoryAst

  x case CapsuleAst == isAst(x,'CAPSULE)
  autoCoerce(x: %): CapsuleAst == x : CapsuleAst

  x case SignatureAst == isAst(x,'SIGNATURE)
  autoCoerce(x: %): SignatureAst == x : SignatureAst

  x case AttributeAst == isAst(x,'ATTRIBUTE)
  autoCoerce(x: %): AttributeAst == x : AttributeAst

  x case MappingAst == isAst(x,'Mapping)
  autoCoerce(x: %): MappingAst == x : MappingAst

  x case IfAst == isAst(x,'IF)
  autoCoerce(x: %): IfAst == x : IfAst

  x case RepeatAst == isAst(x,'REPEAT)
  autoCoerce(x: %): RepeatAst == x : RepeatAst

  x case WhileAst == isAst(x,'WHILE)
  autoCoerce(x: %): WhileAst == x : WhileAst

  x case InAst == isAst(x,'IN)
  autoCoerce(x: %): InAst == x : InAst

  x case CollectAst == isAst(x,'COLLECT)
  autoCoerce(x: %): CollectAst == x : CollectAst

  x case ConstructAst == isAst(x,'construct)
  autoCoerce(x: %): ConstructAst == x : ConstructAst

  x case ExitAst == isAst(x,'exit)
  autoCoerce(x: %): ExitAst == x : ExitAst

  x case ReturnAst == isAst(x,'RETURN)
  autoCoerce(x: %): ReturnAst == x : ReturnAst

  x case CoerceAst == isAst(x,'_:_:)
  autoCoerce(x: %): CoerceAst == x : CoerceAst

  x case PretendAst == isAst(x,'pretend)
  autoCoerce(x: %): PretendAst == x : PretendAst

  x case RestrictAst == isAst(x,'_@)
  autoCoerce(x: %): RestrictAst == x : RestrictAst

  x case SegmentAst == isAst(x,'SEGMENT)
  autoCoerce(x: %): SegmentAst == x : SegmentAst

  x case SequenceAst == isAst(x,'SEQ)
  autoCoerce(x: %): SequenceAst == x : SequenceAst

  x case LetAst == isAst(x,'_%LET)
  autoCoerce(x: %): LetAst == x : LetAst

  x case SuchThatAst == isAst(x,'_|)
  autoCoerce(x: %): SuchThatAst == x : SuchThatAst

  x case ColonAst == isAst(x,'_:)
  autoCoerce(x: %): ColonAst == x : ColonAst

  x case CaseAst == isAst(x,'_case)
  autoCoerce(x: %): CaseAst == x : CaseAst

  x case HasAst == isAst(x,'_has)
  autoCoerce(x: %): HasAst == x : HasAst

  x case IsAst == isAst(x,'_is)
  autoCoerce(x: %): IsAst == x : IsAst

  x case Identifier == (x::Syntax) case Symbol
  autoCoerce(x: %): Identifier == x:Identifier

  x case String == (x::Syntax) case String
  autoCoerce(x: %): String == x : String

  x case Integer == (x::Syntax) case Integer
  autoCoerce(x: %): Integer == x : Integer

  coerce(x: %): OutputForm ==
    x' := x : Syntax
    compound? x' and ((op := getOperator x') case Symbol) =>
      op = 'IF => x:IfAst::OutputForm
      op = 'REPEAT => x:RepeatAst::OutputForm
      op = 'WHILE => x:WhileAst::OutputForm
      op = 'IN => x:InAst::OutputForm
      op = 'COLLECT => x:CollectAst::OutputForm
      op = 'construct => x:ConstructAst::OutputForm
      op = 'exit => x:ExitAst::OutputForm
      op = 'return => x:ReturnAst::OutputForm
      op = 'SEQ => x:SequenceAst::OutputForm
      op = '_%LET => x:LetAst::OutputForm
      op = 'pretend => x:PretendAst::OutputForm
      op = '_:_: => x:CoerceAst::OutputForm
      op = '_@ => x:RestrictAst::OutputForm
      op = 'SEGMENT => x:SegmentAst::OutputForm
      op = '_| => x:SuchThatAst::OutputForm
      op = '_: => x:ColonAst::OutputForm
      op = 'add => x:AddAst::OutputForm
      op = '_case => x:CaseAst::OutputForm
      op = '_has => x:CaseAst::OutputForm
      op = '_is => x:CaseAst::OutputForm
      op = 'where => x:WhereAst::OutputForm
      op = '_%Comma => x:CommaAst::OutputForm
      op = 'Mapping => x:MappingAst::OutputForm
      op = 'DEF => x:DefinitionAst::OutputForm
      op = 'MDEF => x:MacroAst::OutputForm
      op = 'SIGNATURE => x:SignatureAst::OutputForm
      op = 'ATTRIBUTE => x:AttributeAst::OutputForm
      op = 'CATEGORY => x:CategoryAst::OutputForm
      op = 'CAPSULE => x:CapsuleAst::OutputForm
      op = 'import => x:ImportAst::OutputForm
      x'::OutputForm
    x'::OutputForm
  
