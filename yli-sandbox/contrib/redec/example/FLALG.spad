import OrderedSet
import CommutativeRing
import LieAlgebra
)abbrev category FLALG FreeLieAlgebra
++ Author: Michel Petitot (petitot@lifl.fr)
++ Date Created: 91
++ Date Last Updated: 7 Juillet 92
++ Fix History: compilation v 2.1 le 13 dec 98
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ The category of free Lie algebras.
++ It is used by domains of non-commutative algebra:
++ \spadtype{LiePolynomial} and 
++ \spadtype{XPBWPolynomial}. \newline Author: Michel Petitot (petitot@lifl.fr)

FreeLieAlgebra(VarSet:OrderedSet, R:CommutativeRing) :Category == CatDef where
   XRPOLY  ==> XRecursivePolynomial(VarSet,R)
   XDPOLY  ==> XDistributedPolynomial(VarSet,R)
   RN      ==> Fraction Integer
   LWORD   ==> LyndonWord(VarSet)

   CatDef ==  Join(LieAlgebra(R)) with
      coef      : (XRPOLY , $) -> R
         ++ \axiom{coef(x,y)} returns the scalar product of \axiom{x} by \axiom{y},
         ++ the set of words being regarded as an orthogonal basis.
      coerce    : VarSet -> $
         ++ \axiom{coerce(x)} returns \axiom{x} as a Lie polynomial.
      coerce    : $ -> XDPOLY
         ++ \axiom{coerce(x)} returns \axiom{x} as distributed polynomial.
      coerce    : $ -> XRPOLY 
         ++ \axiom{coerce(x)} returns \axiom{x} as a recursive polynomial.
      degree    : $ -> NonNegativeInteger
         ++ \axiom{degree(x)} returns the greatest length of a word in the support of \axiom{x}.
      --if R has Module(RN) then
      --  Hausdorff : ($,$,PositiveInteger) -> $
      lquo      : (XRPOLY , $) -> XRPOLY
         ++ \axiom{lquo(x,y)} returns the left simplification of \axiom{x} by \axiom{y}.
      rquo      : (XRPOLY , $) -> XRPOLY
         ++ \axiom{rquo(x,y)} returns the right simplification of \axiom{x} by \axiom{y}.
      LiePoly   : LWORD -> $
         ++ \axiom{LiePoly(l)} returns the bracketed form of \axiom{l} as a Lie polynomial.
      mirror    : $ -> $
         ++ \axiom{mirror(x)} returns \axiom{Sum(r_i mirror(w_i))}
         ++ if \axiom{x} is \axiom{Sum(r_i w_i)}.
      trunc     : ($, NonNegativeInteger) -> $
         ++ \axiom{trunc(p,n)} returns the polynomial \axiom{p} 
         ++ truncated at order \axiom{n}.
      varList   : $ -> List VarSet
         ++ \axiom{varList(x)} returns the list of distinct entries of \axiom{x}.
      eval      : ($, VarSet, $) -> $
         ++ \axiom{eval(p, x, v)} replaces \axiom{x} by \axiom{v}  in \axiom{p}.
      eval      : ($, List VarSet, List $) -> $
         ++ \axiom{eval(p, [x1,...,xn], [v1,...,vn])} replaces \axiom{xi} by \axiom{vi}
         ++ in \axiom{p}.

