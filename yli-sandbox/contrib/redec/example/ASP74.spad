)abbrev domain ASP74 Asp74
++ Author: Mike Dewar and Godfrey Nolan
++ Date Created: Oct 1993
++ Date Last Updated: 30 March 1994
++                     6 October 1994
++ Related Constructors: FortranScalarFunctionCategory, FortranProgramCategory.
++ Description:
++\spadtype{Asp74} produces Fortran for Type 74 ASPs, needed for NAG routine 
++\axiomOpFrom{d03eef}{d03Package}, for example:
++\begin{verbatim}
++      SUBROUTINE BNDY(X,Y,A,B,C,IBND)
++      DOUBLE PRECISION A,B,C,X,Y
++      INTEGER IBND
++      IF(IBND.EQ.0)THEN
++        A=0.0D0
++        B=1.0D0
++        C=-1.0D0*DSIN(X)
++      ELSEIF(IBND.EQ.1)THEN
++        A=1.0D0
++        B=0.0D0
++        C=DSIN(X)*DSIN(Y)
++      ELSEIF(IBND.EQ.2)THEN
++        A=1.0D0
++        B=0.0D0
++        C=DSIN(X)*DSIN(Y)
++      ELSEIF(IBND.EQ.3)THEN
++        A=0.0D0
++        B=1.0D0
++        C=-1.0D0*DSIN(Y)
++      ENDIF
++      END
++\end{verbatim}

Asp74(name): Exports == Implementation where
  name : Symbol

  FST    ==> FortranScalarType
  FSTU   ==> Union(fst:FST,void:"void")
  FT     ==> FortranType
  SYMTAB ==> SymbolTable
  FC     ==> FortranCode
  PI     ==> PositiveInteger
  RSFC   ==> Record(localSymbols:SymbolTable,code:List(FortranCode))
  FRAC   ==> Fraction
  POLY   ==> Polynomial
  EXPR   ==> Expression
  INT    ==> Integer
  FLOAT  ==> Float
  MFLOAT ==> MachineFloat
  FEXPR  ==> FortranExpression(['X,'Y],[],MFLOAT)
  U      ==> Union(I: Expression Integer,F: Expression Float,_
                   CF: Expression Complex Float,switch:Switch)
  VEC    ==> Vector
  MAT    ==> Matrix
  M2     ==> MatrixCategoryFunctions2
  MF2a   ==> M2(FRAC POLY INT,VEC FRAC POLY INT,VEC FRAC POLY INT,
                MAT FRAC POLY INT, FEXPR,VEC FEXPR,VEC FEXPR,MAT FEXPR)
  MF2b   ==> M2(FRAC POLY FLOAT,VEC FRAC POLY FLOAT,VEC FRAC POLY FLOAT,
                MAT FRAC POLY FLOAT, FEXPR,VEC FEXPR,VEC FEXPR,MAT FEXPR)
  MF2c   ==> M2(POLY INT,VEC POLY INT,VEC POLY INT,MAT POLY INT,
                FEXPR,VEC FEXPR,VEC FEXPR,MAT FEXPR)
  MF2d   ==> M2(POLY FLOAT,VEC POLY FLOAT,VEC POLY FLOAT,
                MAT POLY FLOAT, FEXPR,VEC FEXPR,VEC FEXPR,MAT FEXPR)
  MF2e   ==> M2(EXPR INT,VEC EXPR INT,VEC EXPR INT,MAT EXPR INT,
                FEXPR,VEC FEXPR,VEC FEXPR,MAT FEXPR)
  MF2f   ==> M2(EXPR FLOAT,VEC EXPR FLOAT,VEC EXPR FLOAT,
                MAT EXPR FLOAT, FEXPR,VEC FEXPR,VEC FEXPR,MAT FEXPR)

  Exports ==> FortranMatrixFunctionCategory with
    coerce : MAT FEXPR -> $
      ++coerce(f) takes objects from the appropriate instantiation of
      ++\spadtype{FortranExpression} and turns them into an ASP.

  Implementation ==> add

    syms : SYMTAB := empty()$SYMTAB
    declare!(X,fortranReal(),syms)$SYMTAB
    declare!(Y,fortranReal(),syms)$SYMTAB
    declare!(A,fortranReal(),syms)$SYMTAB
    declare!(B,fortranReal(),syms)$SYMTAB
    declare!(C,fortranReal(),syms)$SYMTAB
    declare!(IBND,fortranInteger(),syms)$SYMTAB
    Rep := FortranProgram(name,["void"]$FSTU,[X,Y,A,B,C,IBND],syms)

    -- To help the poor compiler!
    localAssign(u:Symbol,v:FEXPR):FC == assign(u,(v::EXPR MFLOAT)$FEXPR)$FC

    coerce(u:MAT FEXPR):$ == 
      (nrows(u) ~= 4 or ncols(u) ~= 3) => error "Not a 4X3 matrix"
      flag:U := [IBND@Symbol::EXPR INT]$U
      pt0:U  := [0::EXPR INT]$U
      pt1:U  := [1::EXPR INT]$U
      pt2:U  := [2::EXPR INT]$U
      pt3:U  := [3::EXPR INT]$U
      sw1: Switch := EQ(flag,pt0)$Switch
      sw2: Switch := EQ(flag,pt1)$Switch
      sw3: Switch := EQ(flag,pt2)$Switch
      sw4: Switch := EQ(flag,pt3)$Switch
      a11 : FC := localAssign(A,u(1,1))
      a12 : FC := localAssign(B,u(1,2))
      a13 : FC := localAssign(C,u(1,3))
      a21 : FC := localAssign(A,u(2,1))
      a22 : FC := localAssign(B,u(2,2))
      a23 : FC := localAssign(C,u(2,3))
      a31 : FC := localAssign(A,u(3,1))
      a32 : FC := localAssign(B,u(3,2))
      a33 : FC := localAssign(C,u(3,3))
      a41 : FC := localAssign(A,u(4,1))
      a42 : FC := localAssign(B,u(4,2))
      a43 : FC := localAssign(C,u(4,3))
      c : FC := cond(sw1,block([a11,a12,a13])$FC,
                     cond(sw2,block([a21,a22,a23])$FC,
                          cond(sw3,block([a31,a32,a33])$FC,
                               cond(sw4,block([a41,a42,a43])$FC)$FC)$FC)$FC)$FC
      c::$

    coerce(u:$):OutputForm == coerce(u)$Rep

    coerce(c:FortranCode):$ == coerce(c)$Rep

    coerce(r:RSFC):$ == coerce(r)$Rep

    coerce(c:List FortranCode):$ == coerce(c)$Rep

    outputAsFortran(u):Void ==
      p := checkPrecision()$NAGLinkSupportPackage
      outputAsFortran(u)$Rep
      p => restorePrecision()$NAGLinkSupportPackage

    retract(u:MAT FRAC POLY INT):$ ==
      v : MAT FEXPR := map(retract,u)$MF2a
      v::$

    retractIfCan(u:MAT FRAC POLY INT):Union($,"failed") ==
      v:Union(MAT FEXPR,"failed"):=map(retractIfCan,u)$MF2a
      v case "failed" => "failed"
      (v::MAT FEXPR)::$

    retract(u:MAT FRAC POLY FLOAT):$ ==
      v : MAT FEXPR := map(retract,u)$MF2b
      v::$

    retractIfCan(u:MAT FRAC POLY FLOAT):Union($,"failed") ==
      v:Union(MAT FEXPR,"failed"):=map(retractIfCan,u)$MF2b
      v case "failed" => "failed"
      (v::MAT FEXPR)::$

    retract(u:MAT EXPR INT):$ ==
      v : MAT FEXPR := map(retract,u)$MF2e
      v::$

    retractIfCan(u:MAT EXPR INT):Union($,"failed") ==
      v:Union(MAT FEXPR,"failed"):=map(retractIfCan,u)$MF2e
      v case "failed" => "failed"
      (v::MAT FEXPR)::$

    retract(u:MAT EXPR FLOAT):$ ==
      v : MAT FEXPR := map(retract,u)$MF2f
      v::$

    retractIfCan(u:MAT EXPR FLOAT):Union($,"failed") ==
      v:Union(MAT FEXPR,"failed"):=map(retractIfCan,u)$MF2f
      v case "failed" => "failed"
      (v::MAT FEXPR)::$

    retract(u:MAT POLY INT):$ ==
      v : MAT FEXPR := map(retract,u)$MF2c
      v::$

    retractIfCan(u:MAT POLY INT):Union($,"failed") ==
      v:Union(MAT FEXPR,"failed"):=map(retractIfCan,u)$MF2c
      v case "failed" => "failed"
      (v::MAT FEXPR)::$

    retract(u:MAT POLY FLOAT):$ ==
      v : MAT FEXPR := map(retract,u)$MF2d
      v::$

    retractIfCan(u:MAT POLY FLOAT):Union($,"failed") ==
      v:Union(MAT FEXPR,"failed"):=map(retractIfCan,u)$MF2d
      v case "failed" => "failed"
      (v::MAT FEXPR)::$

