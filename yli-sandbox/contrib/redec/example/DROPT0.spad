)abbrev package DROPT0 DrawOptionFunctions0
-- The functions here are not in DrawOptions since they are not
-- visible to the interpreter.
++ This package \undocumented{}
DrawOptionFunctions0(): Exports == Implementation where
 RANGE ==> List Segment Float
 UNIT  ==> List Float
 PAL   ==> Palette
 POINT ==> Point(DoubleFloat)
 SEG   ==> Segment Float
 SF     ==> DoubleFloat
 SPACE3 ==> ThreeSpace(DoubleFloat)
 VIEWPT ==> Record( theta:SF, phi:SF, scale:SF, scaleX:SF, scaleY:SF, scaleZ:SF, deltaX:SF, deltaY:SF )

 Exports ==> with
  adaptive: (List DrawOption, Boolean) -> Boolean
    ++ adaptive(l,b) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{adaptive}.
    ++ If the option does not exist the value, b is returned.
  clipBoolean: (List DrawOption, Boolean) -> Boolean
    ++ clipBoolean(l,b) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{clipBoolean}.
    ++ If the option does not exist the value, b is returned.
  viewpoint: (List DrawOption, VIEWPT) -> VIEWPT
    ++ viewpoint(l,ls) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{viewpoint}.
    ++ IF the option does not exist, the value ls is returned.
  title: (List DrawOption, String) -> String
    ++ title(l,s) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{title}.
    ++ If the option does not exist the value, s is returned.
  style: (List DrawOption, String) -> String
    ++ style(l,s) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{style}.
    ++ If the option does not exist the value, s is returned.
  toScale: (List DrawOption, Boolean) -> Boolean
    ++ toScale(l,b) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{toScale}.
    ++ If the option does not exist the value, b is returned.

  pointColorPalette: (List DrawOption,PAL) -> PAL
    ++ pointColorPalette(l,p) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{pointColorPalette}.
    ++ If the option does not exist the value, p is returned.
  curveColorPalette: (List DrawOption,PAL) -> PAL
    ++ curveColorPalette(l,p) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{curveColorPalette}.
    ++ If the option does not exist the value, p is returned.

  ranges: (List DrawOption, RANGE) -> RANGE
    ++ ranges(l,r) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{ranges}.
    ++ If the option does not exist the value, r is returned.
  var1Steps: (List DrawOption, PositiveInteger) -> PositiveInteger
    ++ var1Steps(l,n) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{var1Steps}.
    ++ If the option does not exist the value, n is returned.
  var2Steps: (List DrawOption, PositiveInteger) -> PositiveInteger
    ++ var2Steps(l,n) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{var2Steps}.
    ++ If the option does not exist the value, n is returned.
  space: (List DrawOption) -> SPACE3
    ++ space(l) takes a list of draw options, l, and checks to see
    ++ if it contains the option \spad{space}.  If the the option
    ++ doesn't exist, then an empty space is returned.
  tubePoints : (List DrawOption, PositiveInteger) -> PositiveInteger
    ++ tubePoints(l,n) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{tubePoints}.
    ++ If the option does not exist the value, n is returned.
  tubeRadius : (List DrawOption, Float) -> Float
    ++ tubeRadius(l,n) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{tubeRadius}.
    ++ If the option does not exist the value, n is returned.
  coord: (List DrawOption, (POINT->POINT)) -> (POINT->POINT)
    ++ coord(l,p) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{coord}.
    ++ If the option does not exist the value, p is returned.
  units: (List DrawOption, UNIT) -> UNIT
    ++ units(l,u) takes the list of draw options, l, and checks
    ++ the list to see if it contains the option \spad{unit}.
    ++ If the option does not exist the value, u is returned.

 Implementation ==> add
  adaptive(l,s) ==
    (u := option(l, "adaptive"::Symbol)$DrawOptionFunctions1(Boolean))
      case "failed" => s
    u::Boolean

  clipBoolean(l,s) ==
    (u := option(l, "clipBoolean"::Symbol)$DrawOptionFunctions1(Boolean))
      case "failed" => s
    u::Boolean

  title(l, s) ==
    (u := option(l, "title"::Symbol)$DrawOptionFunctions1(String))
      case "failed" => s
    u::String

  viewpoint(l, vp) ==
    (u := option(l, "viewpoint"::Symbol)$DrawOptionFunctions1(VIEWPT))
      case "failed" => vp
    u::VIEWPT

  style(l, s) ==
    (u := option(l, "style"::Symbol)$DrawOptionFunctions1(String))
      case "failed" => s
    u::String

  toScale(l,s) ==
    (u := option(l, "toScale"::Symbol)$DrawOptionFunctions1(Boolean))
      case "failed" => s
    u::Boolean

  pointColorPalette(l,s) ==
    (u := option(l, "pointColorPalette"::Symbol)$DrawOptionFunctions1(PAL))
      case "failed" => s
    u::PAL

  curveColorPalette(l,s) ==
    (u := option(l, "curveColorPalette"::Symbol)$DrawOptionFunctions1(PAL))
      case "failed" => s
    u::PAL



  ranges(l, s) ==
    (u := option(l, "ranges"::Symbol)$DrawOptionFunctions1(RANGE))
      case "failed" => s
    u::RANGE

  space(l) ==
    (u := option(l, "space"::Symbol)$DrawOptionFunctions1(SPACE3))
      case "failed" => create3Space()$SPACE3
    u::SPACE3

  var1Steps(l,s) ==
    (u := option(l, "var1Steps"::Symbol)$DrawOptionFunctions1(PositiveInteger))
      case "failed" => s
    u::PositiveInteger

  var2Steps(l,s) ==
    (u := option(l, "var2Steps"::Symbol)$DrawOptionFunctions1(PositiveInteger))
      case "failed" => s
    u::PositiveInteger

  tubePoints(l,s) ==
    (u := option(l, "tubePoints"::Symbol)$DrawOptionFunctions1(PositiveInteger))
      case "failed" => s
    u::PositiveInteger

  tubeRadius(l,s) ==
    (u := option(l, "tubeRadius"::Symbol)$DrawOptionFunctions1(Float))
      case "failed" => s
    u::Float

  coord(l,s) ==
    (u := option(l, "coord"::Symbol)$DrawOptionFunctions1(POINT->POINT))
      case "failed" => s
    u::(POINT->POINT)

  units(l,s) ==
    (u := option(l, "unit"::Symbol)$DrawOptionFunctions1(UNIT))
      case "failed" => s
    u::UNIT

