import CoercibleTo OutputForm
import Symbol
import List Scope
import List Property
)abbrev domain ENV Environment
++ Author: Gabriel Dos Reis
++ Date Created: October 24, 2007
++ Date Last Modified: January 19, 2008.
++ An `Environment' is a stack of scope.
Environment(): Public == Private where
  Public ==> CoercibleTo(OutputForm) with
    empty: () -> %
      ++ empty() constructs an empty environment
    scopes: % -> List Scope     
      ++ scopes(e) returns the stack of scopes in environment e.
    getProperty: (Symbol, Symbol, %) -> Union(SExpression, "failed")
      ++ getProperty(n,p,e) returns the value of property with name `p'
      ++ for the symbol `n' in environment `e'. Otherwise, `failed'.
    setProperty!: (Symbol, Symbol, SExpression, %) -> %
      ++ setProperty!(n,p,v,e) binds the property `(p,v)' to `n'
      ++ in the topmost scope of `e'.
    getProperties: (Symbol, %) -> Union(List Property, "failed")
      ++ getBinding(n,e) returns the list of properties of `n' in
      ++ e; otherwise `failed'.
    setProperties!: (Symbol, List Property, %) -> %
      ++ setBinding!(n,props,e) set the list of properties of `n' 
      ++ to `props' in `e'.
    currentEnv: () -> %        
      ++ the current normal environment in effect.
    categoryFrame: () -> %  
       ++ the current category environment in the interpreter.

  Private ==> add
    Rep == List Scope
    empty() ==
      per NIL$Lisp

    scopes e ==
      rep e

    getProperty(n,p,e) ==
      v := get(n,p,e)$Lisp
      null? v => "failed"
      v 

    setProperty!(n,p,v,e) ==
      put(n,p,v,e)$Lisp @ %

    getProperties(n,e) ==
      b: SExpression := getProplist(n,e)$Lisp
      null? b => "failed"
      b pretend List(Property)

    setProperties!(n,b,e) ==
      addBinding(n,b,e)$Lisp @ %

    currentEnv() ==
      _$e$Lisp @ %

    categoryFrame() ==
      _$CategoryFrame$Lisp @ %

    coerce e ==
      (scopes e)::OutputForm
