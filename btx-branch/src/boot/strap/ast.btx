(PROVIDE "ast")
(IMPORT-MODULE "includer")
(IN-PACKAGE "BOOTTRAN")
(EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  (PROGN
    (DECLAIM (TYPE |%Boolean| |$bfClamming|))
    (DEFPARAMETER |$bfClamming| NIL)
    (DEFUN |%Name| #0=(|bfVar#1|) (CONS '|%Name| (LIST . #0#)))
    (DEFUN |Command| #1=(|bfVar#2|) (CONS '|Command| (LIST . #1#)))
    (DEFUN |%Module| #2=(|bfVar#3| |bfVar#4|)
      (CONS '|%Module| (LIST . #2#)))
    (DEFUN |Import| #3=(|bfVar#5|) (CONS '|Import| (LIST . #3#)))
    (DEFUN |ImportSignature| #4=(|bfVar#6| |bfVar#7|)
      (CONS '|ImportSignature| (LIST . #4#)))
    (DEFUN |TypeAlias| #5=(|bfVar#8| |bfVar#9|)
      (CONS '|TypeAlias| (LIST . #5#)))
    (DEFUN |Signature| #6=(|bfVar#10| |bfVar#11|)
      (CONS '|Signature| (LIST . #6#)))
    (DEFUN |Mapping| #7=(|bfVar#12| |bfVar#13|)
      (CONS '|Mapping| (LIST . #7#)))
    (DEFUN |SuffixDot| #8=(|bfVar#14|)
      (CONS '|SuffixDot| (LIST . #8#)))
    (DEFUN |Quote| #9=(|bfVar#15|) (CONS '|Quote| (LIST . #9#)))
    (DEFUN |EqualName| #10=(|bfVar#16|)
      (CONS '|EqualName| (LIST . #10#)))
    (DEFUN |Colon| #11=(|bfVar#17|) (CONS '|Colon| (LIST . #11#)))
    (DEFUN |QualifiedName| #12=(|bfVar#18| |bfVar#19|)
      (CONS '|QualifiedName| (LIST . #12#)))
    (DEFUN |%DefaultValue| #13=(|bfVar#20| |bfVar#21|)
      (CONS '|%DefaultValue| (LIST . #13#)))
    (DEFUN |Bracket| #14=(|bfVar#22|) (CONS '|Bracket| (LIST . #14#)))
    (DEFUN |UnboundedSegment| #15=(|bfVar#23|)
      (CONS '|UnboundedSegment| (LIST . #15#)))
    (DEFUN |BoundedSgement| #16=(|bfVar#24| |bfVar#25|)
      (CONS '|BoundedSgement| (LIST . #16#)))
    (DEFUN |Tuple| #17=(|bfVar#26|) (CONS '|Tuple| (LIST . #17#)))
    (DEFUN |ColonAppend| #18=(|bfVar#27| |bfVar#28|)
      (CONS '|ColonAppend| (LIST . #18#)))
    (DEFUN |Is| #19=(|bfVar#29| |bfVar#30|)
      (CONS '|Is| (LIST . #19#)))
    (DEFUN |Isnt| #20=(|bfVar#31| |bfVar#32|)
      (CONS '|Isnt| (LIST . #20#)))
    (DEFUN |Reduce| #21=(|bfVar#33| |bfVar#34|)
      (CONS '|Reduce| (LIST . #21#)))
    (DEFUN |PrefixExpr| #22=(|bfVar#35| |bfVar#36|)
      (CONS '|PrefixExpr| (LIST . #22#)))
    (DEFUN |Call| #23=(|bfVar#37| |bfVar#38|)
      (CONS '|Call| (LIST . #23#)))
    (DEFUN |InfixExpr| #24=(|bfVar#39| |bfVar#40| |bfVar#41|)
      (CONS '|InfixExpr| (LIST . #24#)))
    (DEFUN |ConstantDefinition| #25=(|bfVar#42| |bfVar#43|)
      (CONS '|ConstantDefinition| (LIST . #25#)))
    (DEFUN |Definition|
           #26=(|bfVar#44| |bfVar#45| |bfVar#46| |bfVar#47|)
      (CONS '|Definition| (LIST . #26#)))
    (DEFUN |Macro| #27=(|bfVar#48| |bfVar#49| |bfVar#50|)
      (CONS '|Macro| (LIST . #27#)))
    (DEFUN |SuchThat| #28=(|bfVar#51|)
      (CONS '|SuchThat| (LIST . #28#)))
    (DEFUN |%Assignment| #29=(|bfVar#52| |bfVar#53|)
      (CONS '|%Assignment| (LIST . #29#)))
    (DEFUN |While| #30=(|bfVar#54|) (CONS '|While| (LIST . #30#)))
    (DEFUN |Until| #31=(|bfVar#55|) (CONS '|Until| (LIST . #31#)))
    (DEFUN |For| #32=(|bfVar#56| |bfVar#57| |bfVar#58|)
      (CONS '|For| (LIST . #32#)))
    (DEFUN |Exit| #33=(|bfVar#59| |bfVar#60|)
      (CONS '|Exit| (LIST . #33#)))
    (DEFUN |Iterators| #34=(|bfVar#61|)
      (CONS '|Iterators| (LIST . #34#)))
    (DEFUN |Cross| #35=(|bfVar#62|) (CONS '|Cross| (LIST . #35#)))
    (DEFUN |Repeat| #36=(|bfVar#63| |bfVar#64|)
      (CONS '|Repeat| (LIST . #36#)))
    (DEFUN |Pile| #37=(|bfVar#65|) (CONS '|Pile| (LIST . #37#)))
    (DEFUN |Append| #38=(|bfVar#66|) (CONS '|Append| (LIST . #38#)))
    (DEFUN |Case| #39=(|bfVar#67| |bfVar#68|)
      (CONS '|Case| (LIST . #39#)))
    (DEFUN |Return| #40=(|bfVar#69|) (CONS '|Return| (LIST . #40#)))
    (DEFUN |%Throw| #41=(|bfVar#70|) (CONS '|%Throw| (LIST . #41#)))
    (DEFUN |%Catch| #42=(|bfVar#71|) (CONS '|%Catch| (LIST . #42#)))
    (DEFUN |%Try| #43=(|bfVar#72| |bfVar#73|)
      (CONS '|%Try| (LIST . #43#)))
    (DEFUN |Where| #44=(|bfVar#74| |bfVar#75|)
      (CONS '|Where| (LIST . #44#)))
    (DEFUN |Structure| #45=(|bfVar#76| |bfVar#77|)
      (CONS '|Structure| (LIST . #45#)))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |bfAppend|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|)
                    |bfApplication|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|) |bfAssign|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Thing|) |bfBracket|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|) |bfCase|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|)
                    |bfCaseItem|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%List|) |%List|) |bfCollect|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfColon|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfConstruct|))
    (DECLAIM (FTYPE (FUNCTION (|%Symbol| |%Symbol|) |%Symbol|)
                    |bfColonColon|))
    (DECLAIM (FTYPE (FUNCTION (|%List| |%Thing|) |%List|)
                    |bfColonAppend|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing| |%Thing|) |%List|)
                    |bfDefinition|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfCompDef|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%List|) |%List|) |bfDCollect|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfDTuple|))
    (DECLAIM (FTYPE (FUNCTION NIL |%Symbol|) |bfDot|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing| |%Thing|) |%Thing|)
                    |bfInfApplication|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Thing|) |bfListOf|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Thing|) |bfSymbol|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfSuffixDot|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfEqual|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |bfPile|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing| |%Thing|) |%List|)
                    |bfMDefinition|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Boolean|) |bfBeginsDollar|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfNameOnly|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|)
                    |bfNameArgs|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |bfDefSequence|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|) |bfElt|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|) |bfExit|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing| |%Thing|) |%List|)
                    |bfForInBy|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|) |bfForin|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |bfIterators|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |bfCross|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing| |%Thing|) |%List|)
                    |bfIf|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|)
                    |bfIfThenOnly|))
    (DECLAIM (FTYPE (FUNCTION (|%Symbol| |%Thing| |%Thing|) |%List|)
                    |bfISApplication|))
    (DECLAIM (FTYPE (FUNCTION (|%Symbol| |%Symbol|) |%List|) |bfLocal|))
    (DECLAIM (FTYPE (FUNCTION (|%List| |%Thing|) |%List|) |bfLp|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |bfLoop1|))
    (DECLAIM (FTYPE (FUNCTION (|%Symbol|) |%Symbol|) |bfReName|))
    (DECLAIM (FTYPE (FUNCTION (|%String|) |%List|) |bfReadLisp|))
    (DECLAIM (FTYPE (FUNCTION (|%Symbol| |%Thing|) |%List|) |bfReduce|))
    (DECLAIM (FTYPE (FUNCTION (|%Symbol| |%Thing|) |%List|)
                    |bfReduceCollect|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfReturnNoName|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfSegment1|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|)
                    |bfSegment2|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%Thing|) |bfSequence|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%List|) |%List|) |bfStruct|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfSuchthat|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfUntil|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfWhile|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%Thing|) |bfTagged|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfThrow|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%List|) |%Thing|) |bfTry|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfTuple|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfTupleIf|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|) |bfTupleConstruct|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Thing|) |bfUntuple|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Boolean|) |bfTupleP|))
    (DECLAIM (FTYPE (FUNCTION (|%List| |%Thing|) |%List|) |bfWhere|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing| |%Thing|) |%List|)
                    |genTypeAlias|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%Thing|) |nativeType|))
    (DECLAIM (FTYPE (FUNCTION (|%List|) |%List|) |shoeCompTran|))
    (DECLAIM (FTYPE (FUNCTION (|%Thing|) |%List|)
                    |shoeEVALANDFILEACTQ|))
    (DECLAIM (TYPE (|%Maybe| |%Symbol|) |$op|))
    (DECLAIM (TYPE |%Boolean| |$translatingOldBoot|))
    (DECLAIM (TYPE |%List| |$typings|))
    (DECLAIM (TYPE |%List| |$wheredefs|))))
