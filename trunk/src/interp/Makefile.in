
subdir = src/interp/

IN=$(srcdir)
DOC=$(axiom_target_docdir)/src/interp
BOOK=$(axiom_target_docdir)
AUTO=$(axiom_targetdir)/autoload

autoload_objects =

# Build platform-dependent Lisp image, at the base of other
# derived Lisp images (interpsys, AXIOMsys)
LISPSYS= $(axiom_build_bindir)/lisp

BOOTSYS= $(axiom_build_bindir)/bootsys    

LOADSYS= $(axiom_build_bindir)/lisp$(EXEEXT)
SAVESYS= interpsys$(EXEEXT)
AXIOMSYS= $(axiom_target_bindir)/AXIOMsys$(EXEEXT)

OBJS=	vmlisp.$(FASLEXT)	hash.$(FASLEXT)	\
	diagnostics.$(FASLEXT)	sys-driver.$(FASLEXT) \
	macros.$(FASLEXT)	\
	unlisp.$(FASLEXT)	setq.$(FASLEXT)	\
	astr.$(FASLEXT)	bits.$(FASLEXT)	\
	alql.$(FASLEXT)	buildom.$(FASLEXT)	\
	cattable.$(FASLEXT)				\
	cformat.$(FASLEXT)	cfuns.$(FASLEXT)	\
	clam.$(FASLEXT)	clammed.$(FASLEXT)	\
	comp.$(FASLEXT)	        foam_l.$(FASLEXT) \
	compat.$(FASLEXT)	compress.$(FASLEXT)	\
	cparse.$(FASLEXT)	cstream.$(FASLEXT)	\
	database.$(FASLEXT)	\
	debug.$(FASLEXT)	dq.$(FASLEXT)		\
	fname.$(FASLEXT)	format.$(FASLEXT)	\
	g-boot.$(FASLEXT)	g-cndata.$(FASLEXT)	\
	g-error.$(FASLEXT)	g-opt.$(FASLEXT)	\
	g-timer.$(FASLEXT)	g-util.$(FASLEXT)	\
	ggreater.$(FASLEXT)				\
	hypertex.$(FASLEXT)	i-analy.$(FASLEXT)	\
	i-object.$(FASLEXT)				\
	i-code.$(FASLEXT)	i-coerce.$(FASLEXT)	\
	i-coerfn.$(FASLEXT)	i-eval.$(FASLEXT)	\
	i-funsel.$(FASLEXT)	bookvol5.$(FASLEXT)	\
	i-intern.$(FASLEXT)	i-map.$(FASLEXT)	\
	i-output.$(FASLEXT)	i-resolv.$(FASLEXT)	\
	i-spec1.$(FASLEXT)				\
	i-spec2.$(FASLEXT)	i-syscmd.$(FASLEXT)	\
	i-toplev.$(FASLEXT)	i-util.$(FASLEXT)	\
	incl.$(FASLEXT)	int-top.$(FASLEXT)	\
	intfile.$(FASLEXT)				\
	lisplib.$(FASLEXT)	macex.$(FASLEXT)	\
	match.$(FASLEXT)				\
	monitor.$(FASLEXT)	msg.$(FASLEXT)		\
	msgdb.$(FASLEXT)	\
	newaux.$(FASLEXT)	newfort.$(FASLEXT)	\
	nlib.$(FASLEXT)	nrunfast.$(FASLEXT)	\
	nrungo.$(FASLEXT)	nrunopt.$(FASLEXT)	\
	nruntime.$(FASLEXT)	osyscmd.$(FASLEXT)	\
	packtran.$(FASLEXT)	pathname.$(FASLEXT)	\
	pf2sex.$(FASLEXT)	pile.$(FASLEXT)	\
	posit.$(FASLEXT)	property.$(FASLEXT)	\
	ptrees.$(FASLEXT)	spad-parser.$(FASLEXT) \
	record.$(FASLEXT)				\
	rulesets.$(FASLEXT)	\
	scan.$(FASLEXT)	serror.$(FASLEXT)	\
	server.$(FASLEXT)				\
	setvars.$(FASLEXT)	\
	sfsfun-l.$(FASLEXT)	sfsfun.$(FASLEXT)	\
	simpbool.$(FASLEXT)	slam.$(FASLEXT)	\
	sockio.$(FASLEXT)	spad.$(FASLEXT)	\
	spaderror.$(FASLEXT)				\
	template.$(FASLEXT)	termrw.$(FASLEXT)	\
	trace.$(FASLEXT)	\
	union.$(FASLEXT)       daase.$(FASLEXT)  	\
	fortcall.$(FASLEXT) \
	$(OPOBJS) \
	$(OCOBJS) \
	$(BROBJS)

interpsys_modules = $(patsubst %.$(FASLEXT), "%", $(OBJS))
INOBJS=	varini.$(FASLEXT)	\
	setvart.$(FASLEXT)	intint.$(FASLEXT)	\
        interop.$(FASLEXT)     \
        patches.$(FASLEXT)

IN_modules = $(patsubst %.$(FASLEXT), "%", $(INOBJS))

# These are autloaded old parser files
OPOBJS=	parsing.$(FASLEXT)	bootlex.$(FASLEXT)	\
        def.$(FASLEXT)	\
	fnewmeta.$(FASLEXT)	metalex.$(FASLEXT)	\
	parse.$(FASLEXT)	postpar.$(FASLEXT)	\
	preparse.$(FASLEXT)

autoload_objects += $(OPBJS)
OCOBJS=	apply.$(FASLEXT)	c-doc.$(FASLEXT)	\
	c-util.$(FASLEXT)	profile.$(FASLEXT)	\
	category.$(FASLEXT)	compiler.$(FASLEXT)	\
	define.$(FASLEXT)	functor.$(FASLEXT)	\
	info.$(FASLEXT)	iterator.$(FASLEXT)	\
	modemap.$(FASLEXT)	nruncomp.$(FASLEXT)	\
	package.$(FASLEXT)	htcheck.$(FASLEXT)	\
        xruncomp.$(FASLEXT)   

autoload_objects += $(OCOBJS)

BROBJS=	bc-matrix.$(FASLEXT)				\
	bc-misc.$(FASLEXT)	bc-solve.$(FASLEXT)	\
	bc-util.$(FASLEXT)				\
	ht-util.$(FASLEXT)	htsetvar.$(FASLEXT)	\
	ht-root.$(FASLEXT)	\
	br-con.$(FASLEXT)	\
	br-data.$(FASLEXT)	showimp.$(FASLEXT)    \
	br-op1.$(FASLEXT)	br-op2.$(FASLEXT)	\
	br-search.$(FASLEXT)	br-util.$(FASLEXT)	\
	topics.$(FASLEXT)     br-prof.$(FASLEXT)    \
	br-saturn.$(FASLEXT)

autoload_objects += $(BFOBJS)

TRANOBJS= ${AUTO}/wi1.$(FASLEXT) ${AUTO}/wi2.$(FASLEXT) ${AUTO}/pspad1.$(FASLEXT) \
	  ${AUTO}/pspad2.$(FASLEXT) ${AUTO}/mark.$(FASLEXT) ${AUTO}/nspadaux.$(FASLEXT) \
	  ${AUTO}/def.$(FASLEXT)

autoload_objects += $(TRANOBJS)

NAGBROBJS= ${AUTO}/nag-c02.$(FASLEXT)   ${AUTO}/nag-c05.$(FASLEXT) \
           ${AUTO}/nag-c06.$(FASLEXT)   ${AUTO}/nag-d01.$(FASLEXT) \
           ${AUTO}/nag-d02.$(FASLEXT)   ${AUTO}/nag-d03.$(FASLEXT) \
           ${AUTO}/nag-e01.$(FASLEXT)   ${AUTO}/nag-e02.$(FASLEXT) \
           ${AUTO}/nag-e04.$(FASLEXT)   ${AUTO}/nag-f01.$(FASLEXT) \
           ${AUTO}/nag-f02.$(FASLEXT)   ${AUTO}/nag-f04.$(FASLEXT) \
           ${AUTO}/nag-f07.$(FASLEXT)   ${AUTO}/nag-s.$(FASLEXT) 

autoload_objects += $(NAGBROBJS)

ASCOMP= hashcode.$(FASLEXT) as.$(FASLEXT) \
	foam_l.$(FASLEXT) axext_l.$(FASLEXT)

AS_modules = $(patsubst %.$(FASLEXT), "%", $(ASCOMP))

ASAUTO= ${AUTO}/ax.$(FASLEXT)

autoload_objects += $(ASAUTO)
TIMESTAMP=$(axiom_targetdir)/timestamp
YEARWEEK=(progn (setq boot::timestamp "${TIMESTAMP}") \
                (setq boot::*build-version* "$(PACKAGE_STRING)") \
                (boot::yearweek))


.PRECIOUS:	${SAVESYS}
.PRECIOUS:	${AXIOMSYS}

UNUSED= ${DOC}/anna.boot.dvi ${DOC}/construc.lisp.dvi \
	${DOC}/domain.lisp.dvi 	${DOC}/guess.boot.dvi \
	${DOC}/interp-fix.boot.dvi \
	${DOC}/nhyper.boot.dvi ${DOC}/pf2atree.boot.dvi \
	${DOC}/redefs.boot.dvi 	${DOC}/word.boot.dvi 


.SUFFIXES:
.SUFFIXES: .boot .clisp .lisp .pamphlet

.PHONY: all all-ax all-interpsys all-axiomsys

all: all-ax

all-ax: stamp
	@echo finished $(srcdir)

stamp: $(AUTO) remove-stamp build-images
	$(STAMP) stamp

.PHONY: remove-stamp
remove-stamp:
	-rm -f stamp

.PHONY: build-images
build-images: remove-stamp all-interpsys

all-interpsys:
	$(mkinstalldirs) $(AUTO)
	$(MAKE) $(SAVESYS)

all-axiomsys: all-interpsys
	$(MAKE) $(AXIOMSYS)

.PRECIOUS: %.boot
%.boot: $(srcdir)/%.boot.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<
# Extract and compile the part of the interpreter written
# in Common Lisp
.PRECIOUS: %.lisp

%.lisp: $(srcdir)/%.lisp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

mostlyclean-local:
	@rm -f *.fn *.data *.$(FASLEXT) *.lib

clean-local: mostlyclean-local
	@rm -f *.clisp *.lsp

distclean-local: clean-local

makeint.lisp:	${OBJS} bookvol5.$(FASLEXT) util.$(FASLEXT) \
                nocompil.$(FASLEXT) \
		sys-driver.$(FASLEXT) \
	        ${OUTINTERP} obey.$(FASLEXT) \
		database.date ${INOBJS} ${ASCOMP} ${ASAUTO} \
		${NAGBROBJS} ${TRANOBJS} \
	        ${LOADSYS} \
		$(axiom_targetdir)/algebra/exposed.$(FASLEXT) \
		$(axiom_src_docdir)/msgs/s2-us.msgs \
	        ../algebra/warm.data
	@ echo 5 invoking make in `pwd` with parms:
	@rm -f makeint.lisp
	$(mkinstalldirs) $(axiom_target_datadir)/msgs
	$(INSTALL_DATA) $(axiom_src_docdir)/msgs/s2-us.msgs \
		 $(axiom_target_datadir)/msgs
	@ echo '(|importModule| "sys-driver")' >> makeint.lisp
	@ echo '(|importModule| "vmlisp")' >> makeint.lisp
	@ echo '(|importModule| "hash")' >> makeint.lisp
	@ echo '(gbc t)' >> makeint.lisp
	@ echo '(|importModule| "nocompil")' >> makeint.lisp
	@ echo '(|importModule| "bookvol5")' >> makeint.lisp
	@ echo '(|importModule| "util")' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ touch ${TIMESTAMP}
	@ echo '${YEARWEEK}' >> makeint.lisp
	@ echo '(boot::build-interpsys (append (quote ($(interpsys_modules))) (quote ($(AS_modules))) (quote ($(IN_modules))))  (quote ($(patsubst %, "%", ${TRANOBJS}))) (quote ($(patsubst %, "%", ${NAGBROBJS}))) (quote ($(patsubst %, "%", ${ASAUTO}))))' >> makeint.lisp
	@ echo '(boot::set-restart-hook)' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ echo '(load "../algebra/warm.data")' >> makeint.lisp
	@ echo '(boot::|clearClams|)' >> makeint.lisp
	@ echo '(load "obey")' >> makeint.lisp
	@ echo '#+:akcl (setq compiler::*suppress-compiler-notes* t)' >> makeint.lisp
	@ echo '#+:akcl (si::gbc-time 0)' >> makeint.lisp
	@ echo '(gbc t)' >> makeint.lisp

${SAVESYS}: makeint.lisp
	$(LOADSYS) -- --system="$(AXIOM)/" \
		--sysalg="$(axiom_src_datadir)/algebra/" \
		--make --output=$@ --main="BOOT::RESTART" \
		--load-directory=. makeint.lisp
	@ echo 6 ${SAVESYS} created
	$(mkinstalldirs) $(axiom_target_bindir)
.PHONY: all-axiomsys

all-axiomsys: ${AXIOMSYS}

${AXIOMSYS}: makeint.lisp
	$(LOADSYS) -- \
		--system="$(AXIOM)/" \
		--sysalg="$(axiom_targetdir)/algebra/" \
		--make --output=$@ --main="BOOT::RESTART" \
		--load-directory=. makeint.lisp
	@ echo 6a ${AXIOMSYS} created
exposed.lsp: $(axiom_src_algdir)/exposed.lsp.pamphlet
	@ echo 615 making exposed.lsp from $(axiom_src_algdir)/exposed.lsp.pamphlet
	$(axiom_build_document) --tangle --output=$@ $<

$(axiom_targetdir)/algebra/exposed.$(FASLEXT) : exposed.lsp ${LISPSYS}
	@ echo 616 making $@ from exposed.lsp
	$(mkinstalldirs) $(axiom_targetdir)/algebra
	@ echo '(progn  (compile-file "exposed.lsp" :output-file "$(axiom_targetdir)/algebra/exposed.$(FASLEXT)"))' | ${LISPSYS} 

database.date:
	@ echo 617 the database was updated...remaking interpsys
	@ touch database.date


## Copy FASLs that are autoloaded to the autoload directory.
.PREVIOUS: $(AUTO)/%.$(FASLEXT)

$(AUTO)/%.$(FASLEXT): %.$(FASLEXT)
	$(INSTALL) $< $@

## NAG Links and Friends

nag-s.$(FASLEXT): nag-s.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-f07.$(FASLEXT): nag-f07.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-f04.$(FASLEXT): nag-f04.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-f02.$(FASLEXT): nag-f02.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-f01.$(FASLEXT): nag-f01.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-e04.$(FASLEXT): nag-e04.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-e02.$(FASLEXT): nag-e02.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-e02b.$(FASLEXT): nag-e02b.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-e01.$(FASLEXT): nag-e01.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-d03.$(FASLEXT): nag-d03.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-d02.$(FASLEXT): nag-d02.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-d01.$(FASLEXT): nag-d01.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-c06.$(FASLEXT): nag-c06.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-c05.$(FASLEXT): nag-c05.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nag-c02.$(FASLEXT): nag-c02.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<


## Translation to Fortran
fortcall.$(FASLEXT): fortcall.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

## HyperDoc
topics.$(FASLEXT): topics.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

alql.$(FASLEXT): alql.boot br-search.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

br-search.$(FASLEXT): br-search.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

br-saturn.$(FASLEXT): br-saturn.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

br-op2.$(FASLEXT): br-op2.boot br-op1.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

br-op1.$(FASLEXT): br-op1.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

br-con.$(FASLEXT): br-con.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

br-prof.$(FASLEXT): br-prof.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

br-data.$(FASLEXT): br-data.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

br-util.$(FASLEXT): br-util.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

bc-solve.$(FASLEXT): bc-solve.boot bc-matrix.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

bc-matrix.$(FASLEXT): bc-matrix.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

bc-misc.$(FASLEXT): bc-misc.boot bc-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

bc-util.$(FASLEXT): bc-util.boot ht-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

ht-root.$(FASLEXT): ht-root.boot ht-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

htcheck.$(FASLEXT): htcheck.boot sys-driver.$(FASLEXT) macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

ht-util.$(FASLEXT): ht-util.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

htsetvar.$(FASLEXT): htsetvar.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

hypertex.$(FASLEXT): hypertex.boot boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

## OpenAxiom's interpreter.

patches.$(FASLEXT): patches.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

setvars.$(FASLEXT): setvars.boot macros.$(FASLEXT) debug.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

profile.$(FASLEXT): profile.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

rulesets.$(FASLEXT): rulesets.boot vmlisp.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

osyscmd.$(FASLEXT): osyscmd.boot int-top.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

intint.$(FASLEXT): intint.lisp i-toplev.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

int-top.$(FASLEXT): int-top.boot incl.$(FASLEXT) i-toplev.$(FASLEXT) \
			unlisp.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

i-toplev.$(FASLEXT): i-toplev.boot i-analy.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-syscmd.$(FASLEXT): i-syscmd.boot i-object.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-output.$(FASLEXT): i-output.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-spec2.$(FASLEXT): i-spec2.boot i-spec1.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-spec1.$(FASLEXT): i-spec1.boot i-analy.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-funsel.$(FASLEXT): i-funsel.boot i-coerfn.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-map.$(FASLEXT): i-map.boot i-object.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-eval.$(FASLEXT): i-eval.boot i-analy.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-coerfn.$(FASLEXT): i-coerfn.boot i-coerce.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-coerce.$(FASLEXT): i-coerce.boot i-analy.$(FASLEXT) i-resolv.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-resolv.$(FASLEXT): i-resolv.boot i-object.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-analy.$(FASLEXT): i-analy.boot i-object.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-intern.$(FASLEXT): i-intern.boot i-object.$(FASLEXT) ptrees.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-code.$(FASLEXT): i-code.boot i-object.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-object.$(FASLEXT): i-object.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

i-util.$(FASLEXT): i-util.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

format.$(FASLEXT): format.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

match.$(FASLEXT): match.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

record.$(FASLEXT): record.boot nlib.$(FASLEXT) pathname.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

setvart.$(FASLEXT): setvart.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

## OpenAxiom's compiler
wi2.$(FASLEXT): wi2.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

wi1.$(FASLEXT): wi1.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

apply.$(FASLEXT): apply.boot compiler.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

compiler.$(FASLEXT): compiler.boot c-util.$(FASLEXT) modemap.$(FASLEXT) \
		pathname.$(FASLEXT) define.$(FASLEXT) iterator.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nrunopt.$(FASLEXT): nrunopt.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nrunfast.$(FASLEXT): nrunfast.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nruncomp.$(FASLEXT): nruncomp.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nrungo.$(FASLEXT): nrungo.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

nruntime.$(FASLEXT): nruntime.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

template.$(FASLEXT): template.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile  --output=$@ --load-directory=. $<

iterator.$(FASLEXT): iterator.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

define.$(FASLEXT): define.boot cattable.$(FASLEXT) category.$(FASLEXT) \
			c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

package.$(FASLEXT): package.boot clam.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

database.$(FASLEXT): database.boot clam.$(FASLEXT) nlib.$(FASLEXT) \
		cattable.$(FASLEXT) compat.$(FASLEXT) g-cndata.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

functor.$(FASLEXT): functor.boot category.$(FASLEXT) c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

category.$(FASLEXT): category.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

cattable.$(FASLEXT): cattable.boot simpbool.$(FASLEXT) g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

compat.$(FASLEXT): compat.boot pathname.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

simpbool.$(FASLEXT): simpbool.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

newfort.$(FASLEXT): newfort.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

lisplib.$(FASLEXT): lisplib.boot nlib.$(FASLEXT) c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

xruncomp.$(FASLEXT): xruncomp.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

interop.$(FASLEXT): interop.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

c-doc.$(FASLEXT): c-doc.boot c-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

## Interface with the Aldor compiler.
ax.$(FASLEXT): ax.boot as.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

as.$(FASLEXT): as.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

server.$(FASLEXT): server.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

##
## OpenAxiom's front-end consists of two parts:
##    (a) the interprerter's parser -- also referred to as new parser
##    (b) the compiler parser -- also referred to as parser
##
## The new parser component is always included in a running OpenAxiom
## image.  However the old parser component is so called `autoloaded'.
## While in theory that should work, in practice it turns out that 
## people tend to override functions in the autoload part, correcting
## bugs only there.  The consequence is that the same function will
## bahave very differently based on the history of the seesion.  Ideal
## recipe for creating heisenbugs.
##

## The old parser component roughtly is:
##

spad-parser.$(FASLEXT): spad-parser.boot parse.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

mark.$(FASLEXT): mark.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

parse.$(FASLEXT): parse.boot metalex.$(FASLEXT) postpar.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

packtran.$(FASLEXT): packtran.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

postpar.$(FASLEXT): postpar.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

bootlex.$(FASLEXT): bootlex.lisp preparse.$(FASLEXT) def.$(FASLEXT) \
			nlib.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

newaux.$(FASLEXT): newaux.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

def.$(FASLEXT): def.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

comp.$(FASLEXT): comp.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

preparse.$(FASLEXT): preparse.lisp fnewmeta.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

fnewmeta.$(FASLEXT): fnewmeta.lisp parsing.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

parsing.$(FASLEXT): parsing.lisp metalex.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

metalex.$(FASLEXT): metalex.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

nlib.$(FASLEXT): nlib.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

macros.$(FASLEXT): macros.lisp sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

## The new parser component roughtly is:
##   astr.boot dq.boot incl.boot pile.boot ptrees.boot
##   posit.boot cparse.boot format.boot cstream.boot
##

pf2sex.$(FASLEXT): pf2sex.boot ptrees.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

cparse.$(FASLEXT): cparse.boot ptrees.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

macex.$(FASLEXT): macex.boot ptrees.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

ptrees.$(FASLEXT): ptrees.boot posit.$(FASLEXT) serror.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

pile.$(FASLEXT): pile.boot scan.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

scan.$(FASLEXT): scan.boot incl.$(FASLEXT) bits.$(FASLEXT) dq.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

incl.$(FASLEXT): incl.boot cstream.$(FASLEXT) cformat.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

cformat.$(FASLEXT): cformat.boot unlisp.$(FASLEXT) posit.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

serror.$(FASLEXT): serror.boot posit.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

unlisp.$(FASLEXT): unlisp.lisp sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

posit.$(FASLEXT): posit.boot sys-macros.$(FASLEXT) astr.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

intfile.$(FASLEXT): intfile.boot cstream.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

cstream.$(FASLEXT): cstream.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

astr.$(FASLEXT): astr.boot boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

bits.$(FASLEXT): bits.lisp boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

dq.$(FASLEXT): dq.boot boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

## General support and utilities.
cfuns.$(FASLEXT): cfuns.lisp boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

obey.$(FASLEXT): obey.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

daase.$(FASLEXT): daase.lisp macros.$(FASLEXT) foam_l.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

setq.$(FASLEXT): setq.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

spaderror.$(FASLEXT): spaderror.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

debug.$(FASLEXT): debug.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

spad.$(FASLEXT): spad.lisp bootlex.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

monitor.$(FASLEXT): monitor.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

property.$(FASLEXT): property.lisp sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

nspadaux.$(FASLEXT): nspadaux.lisp sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sockio.$(FASLEXT): sockio.lisp sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sfsfun-l.$(FASLEXT): sfsfun-l.lisp sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

varini.$(FASLEXT): varini.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

trace.$(FASLEXT): trace.boot debug.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

termrw.$(FASLEXT): termrw.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

showimp.$(FASLEXT): showimp.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sfsfun.$(FASLEXT): sfsfun.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

modemap.$(FASLEXT): modemap.boot c-util.$(FASLEXT) info.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

info.$(FASLEXT): info.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

slam.$(FASLEXT): slam.boot g-timer.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

clammed.$(FASLEXT): clammed.boot g-timer.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

clam.$(FASLEXT): clam.boot g-timer.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

g-opt.$(FASLEXT): g-opt.boot def.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

g-timer.$(FASLEXT): g-timer.boot macros.$(FASLEXT) g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

msgdb.$(FASLEXT): msgdb.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

g-boot.$(FASLEXT): g-boot.boot def.$(FASLEXT) g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

g-error.$(FASLEXT): g-error.boot diagnostics.$(FASLEXT) g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

c-util.$(FASLEXT): c-util.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

pathname.$(FASLEXT): pathname.boot nlib.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

hashcode.$(FASLEXT): hashcode.boot g-util.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

pspad2.$(FASLEXT): pspad2.boot pspad1.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

pspad1.$(FASLEXT): pspad1.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

g-util.$(FASLEXT): g-util.boot macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

g-cndata.$(FASLEXT): g-cndata.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<

compress.$(FASLEXT): compress.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

msg.$(FASLEXT): msg.boot sys-macros.$(FASLEXT) astr.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

nocompil.$(FASLEXT): nocompil.lisp boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

util.$(FASLEXT): util.lisp parsing.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

bookvol5.$(FASLEXT): bookvol5.lisp boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

fname.$(FASLEXT): fname.lisp macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sys-macros.$(FASLEXT): sys-macros.lisp diagnostics.$(FASLEXT) \
			union.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

diagnostics.$(FASLEXT): diagnostics.boot sys-constants.$(FASLEXT) \
				sys-globals.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sys-driver.$(FASLEXT): sys-driver.boot boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sys-globals.$(FASLEXT): sys-globals.boot sys-constants.$(FASLEXT) \
				hash.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

sys-constants.$(FASLEXT): sys-constants.boot boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

hash.$(FASLEXT): hash.lisp vmlisp.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

union.$(FASLEXT): union.lisp vmlisp.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

ggreater.$(FASLEXT): ggreater.lisp vmlisp.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

axext_l.$(FASLEXT): axext_l.lisp foam_l.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

foam_l.$(FASLEXT): foam_l.lisp vmlisp.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

vmlisp.$(FASLEXT): vmlisp.lisp boot-pkg.$(FASLEXT)
	$(BOOTSYS) -- --compile --output=$@ --load-directory=. $<

boot-pkg.$(FASLEXT): boot-pkg.lisp
	$(BOOTSYS) -- --compile --output=$@ $<

bookvol5.lisp: $(srcdir)/bookvol5.pamphlet
	@ echo 298 making $@ from $<
	$(axiom_build_document) --tangle=Interpreter --output=$@ $<
../algebra/warm.data: $(srcdir)/Makefile.pamphlet
	@ echo 2 building warm.data
	$(axiom_build_document) --tangle=warm.data --output=$@ $<


buildom.$(FASLEXT): buildom.boot sys-macros.$(FASLEXT)
	$(BOOTSYS) -- --compile --boot="old" --output=$@ --load-directory=. $<


$(axiom_build_texdir)/diagrams.tex: $(axiom_src_docdir)/diagrams.tex
	$(INSTALL_DATA) $< $@

