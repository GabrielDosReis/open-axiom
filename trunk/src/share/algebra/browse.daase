
(1961956 . 3577666331)       
(-18 A S) 
((|constructor| (NIL "One-dimensional-array aggregates serves as models for one-dimensional arrays. Categorically,{} these aggregates are finite linear aggregates with the \\spadatt{shallowlyMutable} property,{} that is,{} any component of the array may be changed without affecting the identity of the overall array. Array data structures are typically represented by a fixed area in storage and therefore cannot efficiently grow or shrink on demand as can list structures (see however \\spadtype{FlexibleArray} for a data structure which is a cross between a list and an array). Iteration over,{} and access to,{} elements of arrays is extremely fast (and often can be optimized to open-code). Insertion and deletion however is generally slow since an entirely new data structure must be created for the result."))) 
NIL 
NIL 
(-19 S) 
((|constructor| (NIL "One-dimensional-array aggregates serves as models for one-dimensional arrays. Categorically,{} these aggregates are finite linear aggregates with the \\spadatt{shallowlyMutable} property,{} that is,{} any component of the array may be changed without affecting the identity of the overall array. Array data structures are typically represented by a fixed area in storage and therefore cannot efficiently grow or shrink on demand as can list structures (see however \\spadtype{FlexibleArray} for a data structure which is a cross between a list and an array). Iteration over,{} and access to,{} elements of arrays is extremely fast (and often can be optimized to open-code). Insertion and deletion however is generally slow since an entirely new data structure must be created for the result."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-20 S) 
((|constructor| (NIL "The class of abelian groups,{} \\spadignore{i.e.} additive monoids where each element has an additive inverse. \\blankline")) (- (($ $ $) "\\spad{x-y} is the difference of \\spad{x} and \\spad{y} \\spadignore{i.e.} \\spad{x + (-y)}.") (($ $) "\\spad{-x} is the additive inverse of \\spad{x}"))) 
NIL 
NIL 
(-21) 
((|constructor| (NIL "The class of abelian groups,{} \\spadignore{i.e.} additive monoids where each element has an additive inverse. \\blankline")) (- (($ $ $) "\\spad{x-y} is the difference of \\spad{x} and \\spad{y} \\spadignore{i.e.} \\spad{x + (-y)}.") (($ $) "\\spad{-x} is the additive inverse of \\spad{x}"))) 
NIL 
NIL 
(-22 S) 
((|constructor| (NIL "The class of multiplicative monoids,{} \\spadignore{i.e.} semigroups with an additive identity element. \\blankline")) (|opposite?| (((|Boolean|) $ $) "\\spad{opposite?(x,y)} holds if the sum of \\spad{x} and \\spad{y} is \\spad{0}.")) (* (($ (|NonNegativeInteger|) $) "\\spad{n * x} is left-multiplication by a non negative integer")) (|zero?| (((|Boolean|) $) "\\spad{zero?(x)} tests if \\spad{x} is equal to 0.")) (|sample| (($) "\\spad{sample yields} a value of type \\%")) (|Zero| (($) "0 is the additive identity element."))) 
NIL 
NIL 
(-23) 
((|constructor| (NIL "The class of multiplicative monoids,{} \\spadignore{i.e.} semigroups with an additive identity element. \\blankline")) (|opposite?| (((|Boolean|) $ $) "\\spad{opposite?(x,y)} holds if the sum of \\spad{x} and \\spad{y} is \\spad{0}.")) (* (($ (|NonNegativeInteger|) $) "\\spad{n * x} is left-multiplication by a non negative integer")) (|zero?| (((|Boolean|) $) "\\spad{zero?(x)} tests if \\spad{x} is equal to 0.")) (|sample| (($) "\\spad{sample yields} a value of type \\%")) (|Zero| (($) "0 is the additive identity element."))) 
NIL 
NIL 
(-24 S) 
((|constructor| (NIL "the class of all additive (commutative) semigroups,{} \\spadignore{i.e.} a set with a commutative and associative operation \\spadop{+}. \\blankline")) (* (($ (|PositiveInteger|) $) "\\spad{n*x} computes the left-multiplication of \\spad{x} by the positive integer \\spad{n}. This is equivalent to adding \\spad{x} to itself \\spad{n} times.")) (+ (($ $ $) "\\spad{x+y} computes the sum of \\spad{x} and \\spad{y}."))) 
NIL 
NIL 
(-25) 
((|constructor| (NIL "the class of all additive (commutative) semigroups,{} \\spadignore{i.e.} a set with a commutative and associative operation \\spadop{+}. \\blankline")) (* (($ (|PositiveInteger|) $) "\\spad{n*x} computes the left-multiplication of \\spad{x} by the positive integer \\spad{n}. This is equivalent to adding \\spad{x} to itself \\spad{n} times.")) (+ (($ $ $) "\\spad{x+y} computes the sum of \\spad{x} and \\spad{y}."))) 
NIL 
NIL 
(-26 S) 
((|constructor| (NIL "Model for algebraically closed fields.")) (|zerosOf| (((|List| $) (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{zerosOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities which display as \\spad{'yi}. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|SparseUnivariatePolynomial| $)) "\\spad{zerosOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|Polynomial| $)) "\\spad{zerosOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible. Otherwise they are implicit algebraic quantities. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|zeroOf| (($ (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{zeroOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}; if possible,{} \\spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity which displays as \\spad{'y}.") (($ (|SparseUnivariatePolynomial| $)) "\\spad{zeroOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}; if possible,{} \\spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity.") (($ (|Polynomial| $)) "\\spad{zeroOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. If possible,{} \\spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|rootsOf| (((|List| $) (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{rootsOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}; The returned roots display as \\spad{'y1},{}...,{}\\spad{'yn}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|SparseUnivariatePolynomial| $)) "\\spad{rootsOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|Polynomial| $)) "\\spad{rootsOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|rootOf| (($ (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{rootOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}. The object returned displays as \\spad{'y}.") (($ (|SparseUnivariatePolynomial| $)) "\\spad{rootOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}.") (($ (|Polynomial| $)) "\\spad{rootOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. Error: if \\spad{p} has more than one variable \\spad{y}."))) 
NIL 
NIL 
(-27) 
((|constructor| (NIL "Model for algebraically closed fields.")) (|zerosOf| (((|List| $) (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{zerosOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities which display as \\spad{'yi}. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|SparseUnivariatePolynomial| $)) "\\spad{zerosOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|Polynomial| $)) "\\spad{zerosOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible. Otherwise they are implicit algebraic quantities. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|zeroOf| (($ (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{zeroOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}; if possible,{} \\spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity which displays as \\spad{'y}.") (($ (|SparseUnivariatePolynomial| $)) "\\spad{zeroOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}; if possible,{} \\spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity.") (($ (|Polynomial| $)) "\\spad{zeroOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. If possible,{} \\spad{y} is expressed in terms of radicals. Otherwise it is an implicit algebraic quantity. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|rootsOf| (((|List| $) (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{rootsOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}; The returned roots display as \\spad{'y1},{}...,{}\\spad{'yn}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|SparseUnivariatePolynomial| $)) "\\spad{rootsOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) (|Polynomial| $)) "\\spad{rootsOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|rootOf| (($ (|SparseUnivariatePolynomial| $) (|Symbol|)) "\\spad{rootOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}. The object returned displays as \\spad{'y}.") (($ (|SparseUnivariatePolynomial| $)) "\\spad{rootOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}.") (($ (|Polynomial| $)) "\\spad{rootOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. Error: if \\spad{p} has more than one variable \\spad{y}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-28 S R) 
((|constructor| (NIL "Model for algebraically closed function spaces.")) (|zerosOf| (((|List| $) $ (|Symbol|)) "\\spad{zerosOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities which display as \\spad{'yi}. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) $) "\\spad{zerosOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable.")) (|zeroOf| (($ $ (|Symbol|)) "\\spad{zeroOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}. The value \\spad{y} is expressed in terms of radicals if possible,{}and otherwise as an implicit algebraic quantity which displays as \\spad{'y}.") (($ $) "\\spad{zeroOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. The value \\spad{y} is expressed in terms of radicals if possible,{}and otherwise as an implicit algebraic quantity. Error: if \\spad{p} has more than one variable.")) (|rootsOf| (((|List| $) $ (|Symbol|)) "\\spad{rootsOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}; The returned roots display as \\spad{'y1},{}...,{}\\spad{'yn}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) $) "\\spad{rootsOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}; Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|rootOf| (($ $ (|Symbol|)) "\\spad{rootOf(p,y)} returns \\spad{y} such that \\spad{p(y) = 0}. The object returned displays as \\spad{'y}.") (($ $) "\\spad{rootOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. Error: if \\spad{p} has more than one variable \\spad{y}."))) 
NIL 
NIL 
(-29 R) 
((|constructor| (NIL "Model for algebraically closed function spaces.")) (|zerosOf| (((|List| $) $ (|Symbol|)) "\\spad{zerosOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible,{} and otherwise as implicit algebraic quantities which display as \\spad{'yi}. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) $) "\\spad{zerosOf(p)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}. The \\spad{yi}'s are expressed in radicals if possible. The returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable.")) (|zeroOf| (($ $ (|Symbol|)) "\\spad{zeroOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}. The value \\spad{y} is expressed in terms of radicals if possible,{}and otherwise as an implicit algebraic quantity which displays as \\spad{'y}.") (($ $) "\\spad{zeroOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. The value \\spad{y} is expressed in terms of radicals if possible,{}and otherwise as an implicit algebraic quantity. Error: if \\spad{p} has more than one variable.")) (|rootsOf| (((|List| $) $ (|Symbol|)) "\\spad{rootsOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}; The returned roots display as \\spad{'y1},{}...,{}\\spad{'yn}. Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values.") (((|List| $) $) "\\spad{rootsOf(p, y)} returns \\spad{[y1,...,yn]} such that \\spad{p(yi) = 0}; Note: the returned symbols \\spad{y1},{}...,{}yn are bound in the interpreter to respective root values. Error: if \\spad{p} has more than one variable \\spad{y}.")) (|rootOf| (($ $ (|Symbol|)) "\\spad{rootOf(p,y)} returns \\spad{y} such that \\spad{p(y) = 0}. The object returned displays as \\spad{'y}.") (($ $) "\\spad{rootOf(p)} returns \\spad{y} such that \\spad{p(y) = 0}. Error: if \\spad{p} has more than one variable \\spad{y}."))) 
((-3991 . T) (-3989 . T) (-3988 . T) ((-3996 "*") . T) (-3987 . T) (-3992 . T) (-3986 . T)) 
NIL 
(-30) 
((|refine| (($ $ (|DoubleFloat|)) "\\spad{refine(p,x)} \\undocumented{}")) (|makeSketch| (($ (|Polynomial| (|Integer|)) (|Symbol|) (|Symbol|) (|Segment| (|Fraction| (|Integer|))) (|Segment| (|Fraction| (|Integer|)))) "\\spad{makeSketch(p,x,y,a..b,c..d)} creates an ACPLOT of the curve \\spad{p = 0} in the region {\\em a <= x <= b, c <= y <= d}. More specifically,{} 'makeSketch' plots a non-singular algebraic curve \\spad{p = 0} in an rectangular region {\\em xMin <= x <= xMax},{} {\\em yMin <= y <= yMax}. The user inputs \\spad{makeSketch(p,x,y,xMin..xMax,yMin..yMax)}. Here \\spad{p} is a polynomial in the variables \\spad{x} and \\spad{y} with integer coefficients (\\spad{p} belongs to the domain \\spad{Polynomial Integer}). The case where \\spad{p} is a polynomial in only one of the variables is allowed. The variables \\spad{x} and \\spad{y} are input to specify the the coordinate axes. The horizontal axis is the \\spad{x}-axis and the vertical axis is the \\spad{y}-axis. The rational numbers xMin,{}...,{}yMax specify the boundaries of the region in which the curve is to be plotted."))) 
NIL 
NIL 
(-31) 
((|constructor| (NIL "This domain represents the syntax for an add-expression.")) (|body| (((|SpadAst|) $) "base(\\spad{d}) returns the actual body of the add-domain expression `d'.")) (|base| (((|SpadAst|) $) "\\spad{base(d)} returns the base domain(\\spad{s}) of the add-domain expression."))) 
NIL 
NIL 
(-32 R -3092) 
((|constructor| (NIL "This package provides algebraic functions over an integral domain.")) (|iroot| ((|#2| |#1| (|Integer|)) "\\spad{iroot(p, n)} should be a non-exported function.")) (|definingPolynomial| ((|#2| |#2|) "\\spad{definingPolynomial(f)} returns the defining polynomial of \\spad{f} as an element of \\spad{F}. Error: if \\spad{f} is not a kernel.")) (|minPoly| (((|SparseUnivariatePolynomial| |#2|) (|Kernel| |#2|)) "\\spad{minPoly(k)} returns the defining polynomial of \\spad{k}.")) (** ((|#2| |#2| (|Fraction| (|Integer|))) "\\spad{x ** q} is \\spad{x} raised to the rational power \\spad{q}.")) (|droot| (((|OutputForm|) (|List| |#2|)) "\\spad{droot(l)} should be a non-exported function.")) (|inrootof| ((|#2| (|SparseUnivariatePolynomial| |#2|) |#2|) "\\spad{inrootof(p, x)} should be a non-exported function.")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(op)} is \\spad{true} if \\spad{op} is an algebraic operator,{} that is,{} an \\spad{n}th root or implicit algebraic operator.")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(op)} returns a copy of \\spad{op} with the domain-dependent properties appropriate for \\spad{F}. Error: if \\spad{op} is not an algebraic operator,{} that is,{} an \\spad{n}th root or implicit algebraic operator.")) (|rootOf| ((|#2| (|SparseUnivariatePolynomial| |#2|) (|Symbol|)) "\\spad{rootOf(p, y)} returns \\spad{y} such that \\spad{p(y) = 0}. The object returned displays as \\spad{'y}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-950 (-484))))) 
(-33 S) 
((|constructor| (NIL "The notion of aggregate serves to model any data structure aggregate,{} designating any collection of objects,{} with heterogenous or homogeneous members,{} with a finite or infinite number of members,{} explicitly or implicitly represented. An aggregate can in principle represent everything from a string of characters to abstract sets such as \"the set of \\spad{x} satisfying relation {\\em r(x)}\" An attribute \\spadatt{finiteAggregate} is used to assert that a domain has a finite number of elements.")) (|#| (((|NonNegativeInteger|) $) "\\spad{\\# u} returns the number of items in \\spad{u}.")) (|sample| (($) "\\spad{sample yields} a value of type \\%")) (|empty?| (((|Boolean|) $) "\\spad{empty?(u)} tests if \\spad{u} has 0 elements.")) (|empty| (($) "\\spad{empty()}\\$\\spad{D} creates an aggregate of type \\spad{D} with 0 elements. Note: The {\\em \\$D} can be dropped if understood by context,{} \\spadignore{e.g.} \\axiom{u: \\spad{D} := empty()}.")) (|copy| (($ $) "\\spad{copy(u)} returns a top-level (non-recursive) copy of \\spad{u}. Note: for collections,{} \\axiom{copy(\\spad{u}) == [\\spad{x} for \\spad{x} in \\spad{u}]}.")) (|eq?| (((|Boolean|) $ $) "\\spad{eq?(u,v)} tests if \\spad{u} and \\spad{v} are same objects."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3994))) 
(-34) 
((|constructor| (NIL "The notion of aggregate serves to model any data structure aggregate,{} designating any collection of objects,{} with heterogenous or homogeneous members,{} with a finite or infinite number of members,{} explicitly or implicitly represented. An aggregate can in principle represent everything from a string of characters to abstract sets such as \"the set of \\spad{x} satisfying relation {\\em r(x)}\" An attribute \\spadatt{finiteAggregate} is used to assert that a domain has a finite number of elements.")) (|#| (((|NonNegativeInteger|) $) "\\spad{\\# u} returns the number of items in \\spad{u}.")) (|sample| (($) "\\spad{sample yields} a value of type \\%")) (|empty?| (((|Boolean|) $) "\\spad{empty?(u)} tests if \\spad{u} has 0 elements.")) (|empty| (($) "\\spad{empty()}\\$\\spad{D} creates an aggregate of type \\spad{D} with 0 elements. Note: The {\\em \\$D} can be dropped if understood by context,{} \\spadignore{e.g.} \\axiom{u: \\spad{D} := empty()}.")) (|copy| (($ $) "\\spad{copy(u)} returns a top-level (non-recursive) copy of \\spad{u}. Note: for collections,{} \\axiom{copy(\\spad{u}) == [\\spad{x} for \\spad{x} in \\spad{u}]}.")) (|eq?| (((|Boolean|) $ $) "\\spad{eq?(u,v)} tests if \\spad{u} and \\spad{v} are same objects."))) 
NIL 
NIL 
(-35) 
((|constructor| (NIL "Category for the inverse hyperbolic trigonometric functions.")) (|atanh| (($ $) "\\spad{atanh(x)} returns the hyperbolic arc-tangent of \\spad{x}.")) (|asinh| (($ $) "\\spad{asinh(x)} returns the hyperbolic arc-sine of \\spad{x}.")) (|asech| (($ $) "\\spad{asech(x)} returns the hyperbolic arc-secant of \\spad{x}.")) (|acsch| (($ $) "\\spad{acsch(x)} returns the hyperbolic arc-cosecant of \\spad{x}.")) (|acoth| (($ $) "\\spad{acoth(x)} returns the hyperbolic arc-cotangent of \\spad{x}.")) (|acosh| (($ $) "\\spad{acosh(x)} returns the hyperbolic arc-cosine of \\spad{x}."))) 
NIL 
NIL 
(-36 |Key| |Entry|) 
((|constructor| (NIL "An association list is a list of key entry pairs which may be viewed as a table.	It is a poor mans version of a table: searching for a key is a linear operation.")) (|assoc| (((|Union| (|Record| (|:| |key| |#1|) (|:| |entry| |#2|)) "failed") |#1| $) "\\spad{assoc(k,u)} returns the element \\spad{x} in association list \\spad{u} stored with key \\spad{k},{} or \"failed\" if \\spad{u} has no key \\spad{k}."))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-37 S R) 
((|constructor| (NIL "The category of associative algebras (modules which are themselves rings). \\blankline"))) 
NIL 
NIL 
(-38 R) 
((|constructor| (NIL "The category of associative algebras (modules which are themselves rings). \\blankline"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-39 UP) 
((|constructor| (NIL "Factorization of univariate polynomials with coefficients in \\spadtype{AlgebraicNumber}.")) (|doublyTransitive?| (((|Boolean|) |#1|) "\\spad{doublyTransitive?(p)} is \\spad{true} if \\spad{p} is irreducible over over the field \\spad{K} generated by its coefficients,{} and if \\spad{p(X) / (X - a)} is irreducible over \\spad{K(a)} where \\spad{p(a) = 0}.")) (|split| (((|Factored| |#1|) |#1|) "\\spad{split(p)} returns a prime factorisation of \\spad{p} over its splitting field.")) (|factor| (((|Factored| |#1|) |#1|) "\\spad{factor(p)} returns a prime factorisation of \\spad{p} over the field generated by its coefficients.") (((|Factored| |#1|) |#1| (|List| (|AlgebraicNumber|))) "\\spad{factor(p, [a1,...,an])} returns a prime factorisation of \\spad{p} over the field generated by its coefficients and \\spad{a1},{}...,{}an."))) 
NIL 
NIL 
(-40 -3092 UP UPUP -2614) 
((|constructor| (NIL "Function field defined by \\spad{f}(\\spad{x},{} \\spad{y}) = 0.")) (|knownInfBasis| (((|Void|) (|NonNegativeInteger|)) "\\spad{knownInfBasis(n)} \\undocumented{}"))) 
((-3987 |has| (-349 |#2|) (-312)) (-3992 |has| (-349 |#2|) (-312)) (-3986 |has| (-349 |#2|) (-312)) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-349 |#2|) (QUOTE (-118))) (|HasCategory| (-349 |#2|) (QUOTE (-120))) (|HasCategory| (-349 |#2|) (QUOTE (-299))) (OR (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-299)))) (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-319))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-190))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (|HasCategory| (-349 |#2|) (QUOTE (-299)))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-190))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-189))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (|HasCategory| (-349 |#2|) (QUOTE (-299)))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-299))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089)))))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-811 (-1089)))))) (|HasCategory| (-349 |#2|) (QUOTE (-580 (-484)))) (OR (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-950 (-349 (-484)))))) (|HasCategory| (-349 |#2|) (QUOTE (-950 (-349 (-484))))) (|HasCategory| (-349 |#2|) (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-319))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-189))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-811 (-1089))))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-190))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089)))))) 
(-41 R -3092) 
((|constructor| (NIL "AlgebraicManipulations provides functions to simplify and expand expressions involving algebraic operators.")) (|rootKerSimp| ((|#2| (|BasicOperator|) |#2| (|NonNegativeInteger|)) "\\spad{rootKerSimp(op,f,n)} should be local but conditional.")) (|rootSimp| ((|#2| |#2|) "\\spad{rootSimp(f)} transforms every radical of the form \\spad{(a * b**(q*n+r))**(1/n)} appearing in \\spad{f} into \\spad{b**q * (a * b**r)**(1/n)}. This transformation is not in general valid for all complex numbers \\spad{b}.")) (|rootProduct| ((|#2| |#2|) "\\spad{rootProduct(f)} combines every product of the form \\spad{(a**(1/n))**m * (a**(1/s))**t} into a single power of a root of \\spad{a},{} and transforms every radical power of the form \\spad{(a**(1/n))**m} into a simpler form.")) (|rootPower| ((|#2| |#2|) "\\spad{rootPower(f)} transforms every radical power of the form \\spad{(a**(1/n))**m} into a simpler form if \\spad{m} and \\spad{n} have a common factor.")) (|ratPoly| (((|SparseUnivariatePolynomial| |#2|) |#2|) "\\spad{ratPoly(f)} returns a polynomial \\spad{p} such that \\spad{p} has no algebraic coefficients,{} and \\spad{p(f) = 0}.")) (|ratDenom| ((|#2| |#2| (|List| (|Kernel| |#2|))) "\\spad{ratDenom(f, [a1,...,an])} removes the \\spad{ai}'s which are algebraic from the denominators in \\spad{f}.") ((|#2| |#2| (|List| |#2|)) "\\spad{ratDenom(f, [a1,...,an])} removes the \\spad{ai}'s which are algebraic kernels from the denominators in \\spad{f}.") ((|#2| |#2| |#2|) "\\spad{ratDenom(f, a)} removes \\spad{a} from the denominators in \\spad{f} if \\spad{a} is an algebraic kernel.") ((|#2| |#2|) "\\spad{ratDenom(f)} rationalizes the denominators appearing in \\spad{f} by moving all the algebraic quantities into the numerators.")) (|rootSplit| ((|#2| |#2|) "\\spad{rootSplit(f)} transforms every radical of the form \\spad{(a/b)**(1/n)} appearing in \\spad{f} into \\spad{a**(1/n) / b**(1/n)}. This transformation is not in general valid for all complex numbers \\spad{a} and \\spad{b}.")) (|coerce| (($ (|SparseMultivariatePolynomial| |#1| (|Kernel| $))) "\\spad{coerce(x)} \\undocumented")) (|denom| (((|SparseMultivariatePolynomial| |#1| (|Kernel| $)) $) "\\spad{denom(x)} \\undocumented")) (|numer| (((|SparseMultivariatePolynomial| |#1| (|Kernel| $)) $) "\\spad{numer(x)} \\undocumented"))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (|%list| (QUOTE -363) (|devaluate| |#1|))))) 
(-42 OV E P) 
((|constructor| (NIL "This package factors multivariate polynomials over the domain of \\spadtype{AlgebraicNumber} by allowing the user to specify a list of algebraic numbers generating the particular extension to factor over.")) (|factor| (((|Factored| (|SparseUnivariatePolynomial| |#3|)) (|SparseUnivariatePolynomial| |#3|) (|List| (|AlgebraicNumber|))) "\\spad{factor(p,lan)} factors the polynomial \\spad{p} over the extension generated by the algebraic numbers given by the list \\spad{lan}. \\spad{p} is presented as a univariate polynomial with multivariate coefficients.") (((|Factored| |#3|) |#3| (|List| (|AlgebraicNumber|))) "\\spad{factor(p,lan)} factors the polynomial \\spad{p} over the extension generated by the algebraic numbers given by the list \\spad{lan}."))) 
NIL 
NIL 
(-43 R A) 
((|constructor| (NIL "AlgebraPackage assembles a variety of useful functions for general algebras.")) (|basis| (((|Vector| |#2|) (|Vector| |#2|)) "\\spad{basis(va)} selects a basis from the elements of \\spad{va}.")) (|radicalOfLeftTraceForm| (((|List| |#2|)) "\\spad{radicalOfLeftTraceForm()} returns basis for null space of \\spad{leftTraceMatrix()},{} if the algebra is associative,{} alternative or a Jordan algebra,{} then this space equals the radical (maximal nil ideal) of the algebra.")) (|basisOfCentroid| (((|List| (|Matrix| |#1|))) "\\spad{basisOfCentroid()} returns a basis of the centroid,{} \\spadignore{i.e.} the endomorphism ring of \\spad{A} considered as \\spad{(A,A)}-bimodule.")) (|basisOfRightNucloid| (((|List| (|Matrix| |#1|))) "\\spad{basisOfRightNucloid()} returns a basis of the space of endomorphisms of \\spad{A} as left module. Note: right nucloid coincides with right nucleus if \\spad{A} has a unit.")) (|basisOfLeftNucloid| (((|List| (|Matrix| |#1|))) "\\spad{basisOfLeftNucloid()} returns a basis of the space of endomorphisms of \\spad{A} as right module. Note: left nucloid coincides with left nucleus if \\spad{A} has a unit.")) (|basisOfCenter| (((|List| |#2|)) "\\spad{basisOfCenter()} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{commutator(x,a) = 0} and \\spad{associator(x,a,b) = associator(a,x,b) = associator(a,b,x) = 0} for all \\spad{a},{}\\spad{b} in \\spad{A}.")) (|basisOfNucleus| (((|List| |#2|)) "\\spad{basisOfNucleus()} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{associator(x,a,b) = associator(a,x,b) = associator(a,b,x) = 0} for all \\spad{a},{}\\spad{b} in \\spad{A}.")) (|basisOfMiddleNucleus| (((|List| |#2|)) "\\spad{basisOfMiddleNucleus()} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{0 = associator(a,x,b)} for all \\spad{a},{}\\spad{b} in \\spad{A}.")) (|basisOfRightNucleus| (((|List| |#2|)) "\\spad{basisOfRightNucleus()} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{0 = associator(a,b,x)} for all \\spad{a},{}\\spad{b} in \\spad{A}.")) (|basisOfLeftNucleus| (((|List| |#2|)) "\\spad{basisOfLeftNucleus()} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{0 = associator(x,a,b)} for all \\spad{a},{}\\spad{b} in \\spad{A}.")) (|basisOfRightAnnihilator| (((|List| |#2|) |#2|) "\\spad{basisOfRightAnnihilator(a)} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{0 = a*x}.")) (|basisOfLeftAnnihilator| (((|List| |#2|) |#2|) "\\spad{basisOfLeftAnnihilator(a)} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{0 = x*a}.")) (|basisOfCommutingElements| (((|List| |#2|)) "\\spad{basisOfCommutingElements()} returns a basis of the space of all \\spad{x} of \\spad{A} satisfying \\spad{0 = commutator(x,a)} for all \\spad{a} in \\spad{A}.")) (|biRank| (((|NonNegativeInteger|) |#2|) "\\spad{biRank(x)} determines the number of linearly independent elements in \\spad{x},{} \\spad{x*bi},{} \\spad{bi*x},{} \\spad{bi*x*bj},{} \\spad{i,j=1,...,n},{} where \\spad{b=[b1,...,bn]} is a basis. Note: if \\spad{A} has a unit,{} then \\spadfunFrom{doubleRank}{AlgebraPackage},{} \\spadfunFrom{weakBiRank}{AlgebraPackage} and \\spadfunFrom{biRank}{AlgebraPackage} coincide.")) (|weakBiRank| (((|NonNegativeInteger|) |#2|) "\\spad{weakBiRank(x)} determines the number of linearly independent elements in the \\spad{bi*x*bj},{} \\spad{i,j=1,...,n},{} where \\spad{b=[b1,...,bn]} is a basis.")) (|doubleRank| (((|NonNegativeInteger|) |#2|) "\\spad{doubleRank(x)} determines the number of linearly independent elements in \\spad{b1*x},{}...,{}\\spad{x*bn},{} where \\spad{b=[b1,...,bn]} is a basis.")) (|rightRank| (((|NonNegativeInteger|) |#2|) "\\spad{rightRank(x)} determines the number of linearly independent elements in \\spad{b1*x},{}...,{}\\spad{bn*x},{} where \\spad{b=[b1,...,bn]} is a basis.")) (|leftRank| (((|NonNegativeInteger|) |#2|) "\\spad{leftRank(x)} determines the number of linearly independent elements in \\spad{x*b1},{}...,{}\\spad{x*bn},{} where \\spad{b=[b1,...,bn]} is a basis."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-258)))) 
(-44 R |n| |ls| |gamma|) 
((|constructor| (NIL "AlgebraGivenByStructuralConstants implements finite rank algebras over a commutative ring,{} given by the structural constants \\spad{gamma} with respect to a fixed basis \\spad{[a1,..,an]},{} where \\spad{gamma} is an \\spad{n}-vector of \\spad{n} by \\spad{n} matrices \\spad{[(gammaijk) for k in 1..rank()]} defined by \\spad{ai * aj = gammaij1 * a1 + ... + gammaijn * an}. The symbols for the fixed basis have to be given as a list of symbols.")) (|coerce| (($ (|Vector| |#1|)) "\\spad{coerce(v)} converts a vector to a member of the algebra by forming a linear combination with the basis element. Note: the vector is assumed to have length equal to the dimension of the algebra."))) 
((-3991 |has| |#1| (-495)) (-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) 
(-45 |Key| |Entry|) 
((|constructor| (NIL "\\spadtype{AssociationList} implements association lists. These may be viewed as lists of pairs where the first part is a key and the second is the stored value. For example,{} the key might be a string with a persons employee identification number and the value might be a record with personnel data."))) 
((-3994 . T) (-3995 . T)) 
((OR (-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-756)))) (-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-756))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-756))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-756))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))))) 
(-46 S R E) 
((|constructor| (NIL "Abelian monoid ring elements (not necessarily of finite support) of this ring are of the form formal SUM (r_i * e_i) where the r_i are coefficents and the e_i,{} elements of the ordered abelian monoid,{} are thought of as exponents or monomials. The monomials commute with each other,{} and with the coefficients (which themselves may or may not be commutative). See \\spadtype{FiniteAbelianMonoidRing} for the case of finite support a useful common model for polynomials and power series. Conceptually at least,{} only the non-zero terms are ever operated on.")) (/ (($ $ |#2|) "\\spad{p/c} divides \\spad{p} by the coefficient \\spad{c}.")) (|coefficient| ((|#2| $ |#3|) "\\spad{coefficient(p,e)} extracts the coefficient of the monomial with exponent \\spad{e} from polynomial \\spad{p},{} or returns zero if exponent is not present.")) (|reductum| (($ $) "\\spad{reductum(u)} returns \\spad{u} minus its leading monomial returns zero if handed the zero element.")) (|monomial| (($ |#2| |#3|) "\\spad{monomial(r,e)} makes a term from a coefficient \\spad{r} and an exponent \\spad{e}.")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(p)} tests if \\spad{p} is a single monomial.")) (|map| (($ (|Mapping| |#2| |#2|) $) "\\spad{map(fn,u)} maps function \\spad{fn} onto the coefficients of the non-zero monomials of \\spad{u}.")) (|degree| ((|#3| $) "\\spad{degree(p)} returns the maximum of the exponents of the terms of \\spad{p}.")) (|leadingMonomial| (($ $) "\\spad{leadingMonomial(p)} returns the monomial of \\spad{p} with the highest degree.")) (|leadingCoefficient| ((|#2| $) "\\spad{leadingCoefficient(p)} returns the coefficient highest degree term of \\spad{p}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312)))) 
(-47 R E) 
((|constructor| (NIL "Abelian monoid ring elements (not necessarily of finite support) of this ring are of the form formal SUM (r_i * e_i) where the r_i are coefficents and the e_i,{} elements of the ordered abelian monoid,{} are thought of as exponents or monomials. The monomials commute with each other,{} and with the coefficients (which themselves may or may not be commutative). See \\spadtype{FiniteAbelianMonoidRing} for the case of finite support a useful common model for polynomials and power series. Conceptually at least,{} only the non-zero terms are ever operated on.")) (/ (($ $ |#1|) "\\spad{p/c} divides \\spad{p} by the coefficient \\spad{c}.")) (|coefficient| ((|#1| $ |#2|) "\\spad{coefficient(p,e)} extracts the coefficient of the monomial with exponent \\spad{e} from polynomial \\spad{p},{} or returns zero if exponent is not present.")) (|reductum| (($ $) "\\spad{reductum(u)} returns \\spad{u} minus its leading monomial returns zero if handed the zero element.")) (|monomial| (($ |#1| |#2|) "\\spad{monomial(r,e)} makes a term from a coefficient \\spad{r} and an exponent \\spad{e}.")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(p)} tests if \\spad{p} is a single monomial.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(fn,u)} maps function \\spad{fn} onto the coefficients of the non-zero monomials of \\spad{u}.")) (|degree| ((|#2| $) "\\spad{degree(p)} returns the maximum of the exponents of the terms of \\spad{p}.")) (|leadingMonomial| (($ $) "\\spad{leadingMonomial(p)} returns the monomial of \\spad{p} with the highest degree.")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(p)} returns the coefficient highest degree term of \\spad{p}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-48) 
((|constructor| (NIL "Algebraic closure of the rational numbers,{} with mathematical =")) (|norm| (($ $ (|List| (|Kernel| $))) "\\spad{norm(f,l)} computes the norm of the algebraic number \\spad{f} with respect to the extension generated by kernels \\spad{l}") (($ $ (|Kernel| $)) "\\spad{norm(f,k)} computes the norm of the algebraic number \\spad{f} with respect to the extension generated by kernel \\spad{k}") (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|List| (|Kernel| $))) "\\spad{norm(p,l)} computes the norm of the polynomial \\spad{p} with respect to the extension generated by kernels \\spad{l}") (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|Kernel| $)) "\\spad{norm(p,k)} computes the norm of the polynomial \\spad{p} with respect to the extension generated by kernel \\spad{k}")) (|reduce| (($ $) "\\spad{reduce(f)} simplifies all the unreduced algebraic numbers present in \\spad{f} by applying their defining relations.")) (|denom| (((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $) "\\spad{denom(f)} returns the denominator of \\spad{f} viewed as a polynomial in the kernels over \\spad{Z}.")) (|numer| (((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $) "\\spad{numer(f)} returns the numerator of \\spad{f} viewed as a polynomial in the kernels over \\spad{Z}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| $ (QUOTE (-961))) (|HasCategory| $ (QUOTE (-950 (-484))))) 
(-49) 
((|constructor| (NIL "This domain implements anonymous functions")) (|body| (((|Syntax|) $) "\\spad{body(f)} returns the body of the unnamed function `f'.")) (|parameters| (((|List| (|Identifier|)) $) "\\spad{parameters(f)} returns the list of parameters bound by `f'."))) 
NIL 
NIL 
(-50 R |lVar|) 
((|constructor| (NIL "The domain of antisymmetric polynomials.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f,p)} changes each coefficient of \\spad{p} by the application of \\spad{f}.")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(p)} returns the homogeneous degree of \\spad{p}.")) (|retractable?| (((|Boolean|) $) "\\spad{retractable?(p)} tests if \\spad{p} is a 0-form,{} \\spadignore{i.e.} if degree(\\spad{p}) = 0.")) (|homogeneous?| (((|Boolean|) $) "\\spad{homogeneous?(p)} tests if all of the terms of \\spad{p} have the same degree.")) (|exp| (($ (|List| (|Integer|))) "\\spad{exp([i1,...in])} returns \\spad{u_1\\^{i_1} ... u_n\\^{i_n}}")) (|generator| (($ (|NonNegativeInteger|)) "\\spad{generator(n)} returns the \\spad{n}th multiplicative generator,{} a basis term.")) (|coefficient| ((|#1| $ $) "\\spad{coefficient(p,u)} returns the coefficient of the term in \\spad{p} containing the basis term \\spad{u} if such a term exists,{} and 0 otherwise. Error: if the second argument \\spad{u} is not a basis element.")) (|reductum| (($ $) "\\spad{reductum(p)},{} where \\spad{p} is an antisymmetric polynomial,{} returns \\spad{p} minus the leading term of \\spad{p} if \\spad{p} has at least two terms,{} and 0 otherwise.")) (|leadingBasisTerm| (($ $) "\\spad{leadingBasisTerm(p)} returns the leading basis term of antisymmetric polynomial \\spad{p}.")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(p)} returns the leading coefficient of antisymmetric polynomial \\spad{p}."))) 
((-3991 . T)) 
NIL 
(-51) 
((|constructor| (NIL "\\spadtype{Any} implements a type that packages up objects and their types in objects of \\spadtype{Any}. Roughly speaking that means that if \\spad{s : S} then when converted to \\spadtype{Any},{} the new object will include both the original object and its type. This is a way of converting arbitrary objects into a single type without losing any of the original information. Any object can be converted to one of \\spadtype{Any}. The original object can be recovered by `is-case' pattern matching as exemplified here and \\spad{AnyFunctions1}.")) (|obj| (((|None|) $) "\\spad{obj(a)} essentially returns the original object that was converted to \\spadtype{Any} except that the type is forced to be \\spadtype{None}.")) (|dom| (((|SExpression|) $) "\\spad{dom(a)} returns a \\spadgloss{LISP} form of the type of the original object that was converted to \\spadtype{Any}.")) (|any| (($ (|SExpression|) (|None|)) "\\spad{any(type,object)} is a technical function for creating an \\spad{object} of \\spadtype{Any}. Arugment \\spad{type} is a \\spadgloss{LISP} form for the \\spad{type} of \\spad{object}."))) 
NIL 
NIL 
(-52 S) 
((|constructor| (NIL "\\spadtype{AnyFunctions1} implements several utility functions for working with \\spadtype{Any}. These functions are used to go back and forth between objects of \\spadtype{Any} and objects of other types.")) (|retract| ((|#1| (|Any|)) "\\spad{retract(a)} tries to convert \\spad{a} into an object of type \\spad{S}. If possible,{} it returns the object. Error: if no such retraction is possible.")) (|retractable?| (((|Boolean|) (|Any|)) "\\spad{retractable?(a)} tests if \\spad{a} can be converted into an object of type \\spad{S}.")) (|retractIfCan| (((|Union| |#1| "failed") (|Any|)) "\\spad{retractIfCan(a)} tries change \\spad{a} into an object of type \\spad{S}. If it can,{} then such an object is returned. Otherwise,{} \"failed\" is returned.")) (|coerce| (((|Any|) |#1|) "\\spad{coerce(s)} creates an object of \\spadtype{Any} from the object \\spad{s} of type \\spad{S}."))) 
NIL 
NIL 
(-53 R M P) 
((|constructor| (NIL "\\spad{ApplyUnivariateSkewPolynomial} (internal) allows univariate skew polynomials to be applied to appropriate modules.")) (|apply| ((|#2| |#3| (|Mapping| |#2| |#2|) |#2|) "\\spad{apply(p, f, m)} returns \\spad{p(m)} where the action is given by \\spad{x m = f(m)}. \\spad{f} must be an \\spad{R}-pseudo linear map on \\spad{M}."))) 
NIL 
NIL 
(-54 |Base| R -3092) 
((|constructor| (NIL "This package apply rewrite rules to expressions,{} calling the pattern matcher.")) (|localUnquote| ((|#3| |#3| (|List| (|Symbol|))) "\\spad{localUnquote(f,ls)} is a local function.")) (|applyRules| ((|#3| (|List| (|RewriteRule| |#1| |#2| |#3|)) |#3| (|PositiveInteger|)) "\\spad{applyRules([r1,...,rn], expr, n)} applies the rules \\spad{r1},{}...,{}rn to \\spad{f} a most \\spad{n} times.") ((|#3| (|List| (|RewriteRule| |#1| |#2| |#3|)) |#3|) "\\spad{applyRules([r1,...,rn], expr)} applies the rules \\spad{r1},{}...,{}rn to \\spad{f} an unlimited number of times,{} \\spadignore{i.e.} until none of \\spad{r1},{}...,{}rn is applicable to the expression."))) 
NIL 
NIL 
(-55) 
((|constructor| (NIL "This domain implements the arity of a function or an operator,{} \\spadignore{e.g.} the number of arguments that an operator can take. An arity is either a definition nonnegative integer,{} and the special value `arbitrary',{} signifying that an operation can take any number of arguments.")) (|one?| (((|Boolean|) $) "\\spad{one? a} holds if \\spad{a} is the arity of nullary function.")) (|zero?| (((|Boolean|) $) "\\spad{zero? a} holds if \\spad{a} is the arity of niladic function.")) (|arbitrary| (($) "aribitrary is the arity of a function that accepts any number of arguments."))) 
NIL 
NIL 
(-56 S R |Row| |Col|) 
((|constructor| (NIL "\\indented{1}{TwoDimensionalArrayCategory is a general array category which} allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and columns returned as objects of type Col. The index of the 'first' row may be obtained by calling the function 'minRowIndex'. The index of the 'first' column may be obtained by calling the function 'minColIndex'. The index of the first element of a 'Row' is the same as the index of the first column in an array and vice versa.")) (|map!| (($ (|Mapping| |#2| |#2|) $) "\\spad{map!(f,a)} assign \\spad{a(i,j)} to \\spad{f(a(i,j))} for all \\spad{i, j}")) (|map| (($ (|Mapping| |#2| |#2| |#2|) $ $ |#2|) "\\spad{map(f,a,b,r)} returns \\spad{c},{} where \\spad{c(i,j) = f(a(i,j),b(i,j))} when both \\spad{a(i,j)} and \\spad{b(i,j)} exist; else \\spad{c(i,j) = f(r, b(i,j))} when \\spad{a(i,j)} does not exist; else \\spad{c(i,j) = f(a(i,j),r)} when \\spad{b(i,j)} does not exist; otherwise \\spad{c(i,j) = f(r,r)}.") (($ (|Mapping| |#2| |#2| |#2|) $ $) "\\spad{map(f,a,b)} returns \\spad{c},{} where \\spad{c(i,j) = f(a(i,j),b(i,j))} for all \\spad{i, j}") (($ (|Mapping| |#2| |#2|) $) "\\spad{map(f,a)} returns \\spad{b},{} where \\spad{b(i,j) = f(a(i,j))} for all \\spad{i, j}")) (|setColumn!| (($ $ (|Integer|) |#4|) "\\spad{setColumn!(m,j,v)} sets to \\spad{j}th column of \\spad{m} to \\spad{v}")) (|setRow!| (($ $ (|Integer|) |#3|) "\\spad{setRow!(m,i,v)} sets to \\spad{i}th row of \\spad{m} to \\spad{v}")) (|qsetelt!| ((|#2| $ (|Integer|) (|Integer|) |#2|) "\\spad{qsetelt!(m,i,j,r)} sets the element in the \\spad{i}th row and \\spad{j}th column of \\spad{m} to \\spad{r} NO error check to determine if indices are in proper ranges")) (|setelt| ((|#2| $ (|Integer|) (|Integer|) |#2|) "\\spad{setelt(m,i,j,r)} sets the element in the \\spad{i}th row and \\spad{j}th column of \\spad{m} to \\spad{r} error check to determine if indices are in proper ranges")) (|column| ((|#4| $ (|Integer|)) "\\spad{column(m,j)} returns the \\spad{j}th column of \\spad{m} error check to determine if index is in proper ranges")) (|row| ((|#3| $ (|Integer|)) "\\spad{row(m,i)} returns the \\spad{i}th row of \\spad{m} error check to determine if index is in proper ranges")) (|qelt| ((|#2| $ (|Integer|) (|Integer|)) "\\spad{qelt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the array \\spad{m} NO error check to determine if indices are in proper ranges")) (|elt| ((|#2| $ (|Integer|) (|Integer|) |#2|) "\\spad{elt(m,i,j,r)} returns the element in the \\spad{i}th row and \\spad{j}th column of the array \\spad{m},{} if \\spad{m} has an \\spad{i}th row and a \\spad{j}th column,{} and returns \\spad{r} otherwise") ((|#2| $ (|Integer|) (|Integer|)) "\\spad{elt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the array \\spad{m} error check to determine if indices are in proper ranges")) (|ncols| (((|NonNegativeInteger|) $) "\\spad{ncols(m)} returns the number of columns in the array \\spad{m}")) (|nrows| (((|NonNegativeInteger|) $) "\\spad{nrows(m)} returns the number of rows in the array \\spad{m}")) (|maxColIndex| (((|Integer|) $) "\\spad{maxColIndex(m)} returns the index of the 'last' column of the array \\spad{m}")) (|minColIndex| (((|Integer|) $) "\\spad{minColIndex(m)} returns the index of the 'first' column of the array \\spad{m}")) (|maxRowIndex| (((|Integer|) $) "\\spad{maxRowIndex(m)} returns the index of the 'last' row of the array \\spad{m}")) (|minRowIndex| (((|Integer|) $) "\\spad{minRowIndex(m)} returns the index of the 'first' row of the array \\spad{m}")) (|fill!| (($ $ |#2|) "\\spad{fill!(m,r)} fills \\spad{m} with \\spad{r}'s")) (|new| (($ (|NonNegativeInteger|) (|NonNegativeInteger|) |#2|) "\\spad{new(m,n,r)} is an \\spad{m}-by-\\spad{n} array all of whose entries are \\spad{r}")) (|finiteAggregate| ((|attribute|) "two-dimensional arrays are finite")) (|shallowlyMutable| ((|attribute|) "one may destructively alter arrays"))) 
NIL 
NIL 
(-57 R |Row| |Col|) 
((|constructor| (NIL "\\indented{1}{TwoDimensionalArrayCategory is a general array category which} allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and columns returned as objects of type Col. The index of the 'first' row may be obtained by calling the function 'minRowIndex'. The index of the 'first' column may be obtained by calling the function 'minColIndex'. The index of the first element of a 'Row' is the same as the index of the first column in an array and vice versa.")) (|map!| (($ (|Mapping| |#1| |#1|) $) "\\spad{map!(f,a)} assign \\spad{a(i,j)} to \\spad{f(a(i,j))} for all \\spad{i, j}")) (|map| (($ (|Mapping| |#1| |#1| |#1|) $ $ |#1|) "\\spad{map(f,a,b,r)} returns \\spad{c},{} where \\spad{c(i,j) = f(a(i,j),b(i,j))} when both \\spad{a(i,j)} and \\spad{b(i,j)} exist; else \\spad{c(i,j) = f(r, b(i,j))} when \\spad{a(i,j)} does not exist; else \\spad{c(i,j) = f(a(i,j),r)} when \\spad{b(i,j)} does not exist; otherwise \\spad{c(i,j) = f(r,r)}.") (($ (|Mapping| |#1| |#1| |#1|) $ $) "\\spad{map(f,a,b)} returns \\spad{c},{} where \\spad{c(i,j) = f(a(i,j),b(i,j))} for all \\spad{i, j}") (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f,a)} returns \\spad{b},{} where \\spad{b(i,j) = f(a(i,j))} for all \\spad{i, j}")) (|setColumn!| (($ $ (|Integer|) |#3|) "\\spad{setColumn!(m,j,v)} sets to \\spad{j}th column of \\spad{m} to \\spad{v}")) (|setRow!| (($ $ (|Integer|) |#2|) "\\spad{setRow!(m,i,v)} sets to \\spad{i}th row of \\spad{m} to \\spad{v}")) (|qsetelt!| ((|#1| $ (|Integer|) (|Integer|) |#1|) "\\spad{qsetelt!(m,i,j,r)} sets the element in the \\spad{i}th row and \\spad{j}th column of \\spad{m} to \\spad{r} NO error check to determine if indices are in proper ranges")) (|setelt| ((|#1| $ (|Integer|) (|Integer|) |#1|) "\\spad{setelt(m,i,j,r)} sets the element in the \\spad{i}th row and \\spad{j}th column of \\spad{m} to \\spad{r} error check to determine if indices are in proper ranges")) (|column| ((|#3| $ (|Integer|)) "\\spad{column(m,j)} returns the \\spad{j}th column of \\spad{m} error check to determine if index is in proper ranges")) (|row| ((|#2| $ (|Integer|)) "\\spad{row(m,i)} returns the \\spad{i}th row of \\spad{m} error check to determine if index is in proper ranges")) (|qelt| ((|#1| $ (|Integer|) (|Integer|)) "\\spad{qelt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the array \\spad{m} NO error check to determine if indices are in proper ranges")) (|elt| ((|#1| $ (|Integer|) (|Integer|) |#1|) "\\spad{elt(m,i,j,r)} returns the element in the \\spad{i}th row and \\spad{j}th column of the array \\spad{m},{} if \\spad{m} has an \\spad{i}th row and a \\spad{j}th column,{} and returns \\spad{r} otherwise") ((|#1| $ (|Integer|) (|Integer|)) "\\spad{elt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the array \\spad{m} error check to determine if indices are in proper ranges")) (|ncols| (((|NonNegativeInteger|) $) "\\spad{ncols(m)} returns the number of columns in the array \\spad{m}")) (|nrows| (((|NonNegativeInteger|) $) "\\spad{nrows(m)} returns the number of rows in the array \\spad{m}")) (|maxColIndex| (((|Integer|) $) "\\spad{maxColIndex(m)} returns the index of the 'last' column of the array \\spad{m}")) (|minColIndex| (((|Integer|) $) "\\spad{minColIndex(m)} returns the index of the 'first' column of the array \\spad{m}")) (|maxRowIndex| (((|Integer|) $) "\\spad{maxRowIndex(m)} returns the index of the 'last' row of the array \\spad{m}")) (|minRowIndex| (((|Integer|) $) "\\spad{minRowIndex(m)} returns the index of the 'first' row of the array \\spad{m}")) (|fill!| (($ $ |#1|) "\\spad{fill!(m,r)} fills \\spad{m} with \\spad{r}'s")) (|new| (($ (|NonNegativeInteger|) (|NonNegativeInteger|) |#1|) "\\spad{new(m,n,r)} is an \\spad{m}-by-\\spad{n} array all of whose entries are \\spad{r}")) (|finiteAggregate| ((|attribute|) "two-dimensional arrays are finite")) (|shallowlyMutable| ((|attribute|) "one may destructively alter arrays"))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-58 S) 
((|constructor| (NIL "This is the domain of 1-based one dimensional arrays")) (|oneDimensionalArray| (($ (|NonNegativeInteger|) |#1|) "\\spad{oneDimensionalArray(n,s)} creates an array from \\spad{n} copies of element \\spad{s}") (($ (|List| |#1|)) "\\spad{oneDimensionalArray(l)} creates an array from a list of elements \\spad{l}"))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-59 A B) 
((|constructor| (NIL "\\indented{1}{This package provides tools for operating on one-dimensional arrays} with unary and binary functions involving different underlying types")) (|map| (((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1|) (|OneDimensionalArray| |#1|)) "\\spad{map(f,a)} applies function \\spad{f} to each member of one-dimensional array \\spad{a} resulting in a new one-dimensional array over a possibly different underlying domain.")) (|reduce| ((|#2| (|Mapping| |#2| |#1| |#2|) (|OneDimensionalArray| |#1|) |#2|) "\\spad{reduce(f,a,r)} applies function \\spad{f} to each successive element of the one-dimensional array \\spad{a} and an accumulant initialized to \\spad{r}. For example,{} \\spad{reduce(_+\\$Integer,[1,2,3],0)} does \\spad{3+(2+(1+0))}. Note: third argument \\spad{r} may be regarded as the identity element for the function \\spad{f}.")) (|scan| (((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1| |#2|) (|OneDimensionalArray| |#1|) |#2|) "\\spad{scan(f,a,r)} successively applies \\spad{reduce(f,x,r)} to more and more leading sub-arrays \\spad{x} of one-dimensional array \\spad{a}. More precisely,{} if \\spad{a} is \\spad{[a1,a2,...]},{} then \\spad{scan(f,a,r)} returns \\spad{[reduce(f,[a1],r),reduce(f,[a1,a2],r),...]}."))) 
NIL 
NIL 
(-60 R) 
((|constructor| (NIL "\\indented{1}{A TwoDimensionalArray is a two dimensional array with} 1-based indexing for both rows and columns."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-61 R L) 
((|constructor| (NIL "\\spadtype{AssociatedEquations} provides functions to compute the associated equations needed for factoring operators")) (|associatedEquations| (((|Record| (|:| |minor| (|List| (|PositiveInteger|))) (|:| |eq| |#2|) (|:| |minors| (|List| (|List| (|PositiveInteger|)))) (|:| |ops| (|List| |#2|))) |#2| (|PositiveInteger|)) "\\spad{associatedEquations(op, m)} returns \\spad{[w, eq, lw, lop]} such that \\spad{eq(w) = 0} where \\spad{w} is the given minor,{} and \\spad{lw_i = lop_i(w)} for all the other minors.")) (|uncouplingMatrices| (((|Vector| (|Matrix| |#1|)) (|Matrix| |#1|)) "\\spad{uncouplingMatrices(M)} returns \\spad{[A_1,...,A_n]} such that if \\spad{y = [y_1,...,y_n]} is a solution of \\spad{y' = M y},{} then \\spad{[\\$y_j',y_j'',...,y_j^{(n)}\\$] = \\$A_j y\\$} for all \\spad{j}'s.")) (|associatedSystem| (((|Record| (|:| |mat| (|Matrix| |#1|)) (|:| |vec| (|Vector| (|List| (|PositiveInteger|))))) |#2| (|PositiveInteger|)) "\\spad{associatedSystem(op, m)} returns \\spad{[M,w]} such that the \\spad{m}-th associated equation system to \\spad{L} is \\spad{w' = M w}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312)))) 
(-62 S) 
((|constructor| (NIL "A stack represented as a flexible array.")) (|arrayStack| (($ (|List| |#1|)) "\\spad{arrayStack([x,y,...,z])} creates an array stack with first (top) element \\spad{x},{} second element \\spad{y},{}...,{}and last element \\spad{z}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-63 S) 
((|constructor| (NIL "This is the category of Spad abstract syntax trees."))) 
NIL 
NIL 
(-64) 
((|constructor| (NIL "This is the category of Spad abstract syntax trees."))) 
NIL 
NIL 
(-65 S) 
((|constructor| (NIL "Category for the inverse trigonometric functions.")) (|atan| (($ $) "\\spad{atan(x)} returns the arc-tangent of \\spad{x}.")) (|asin| (($ $) "\\spad{asin(x)} returns the arc-sine of \\spad{x}.")) (|asec| (($ $) "\\spad{asec(x)} returns the arc-secant of \\spad{x}.")) (|acsc| (($ $) "\\spad{acsc(x)} returns the arc-cosecant of \\spad{x}.")) (|acot| (($ $) "\\spad{acot(x)} returns the arc-cotangent of \\spad{x}.")) (|acos| (($ $) "\\spad{acos(x)} returns the arc-cosine of \\spad{x}."))) 
NIL 
NIL 
(-66) 
((|constructor| (NIL "Category for the inverse trigonometric functions.")) (|atan| (($ $) "\\spad{atan(x)} returns the arc-tangent of \\spad{x}.")) (|asin| (($ $) "\\spad{asin(x)} returns the arc-sine of \\spad{x}.")) (|asec| (($ $) "\\spad{asec(x)} returns the arc-secant of \\spad{x}.")) (|acsc| (($ $) "\\spad{acsc(x)} returns the arc-cosecant of \\spad{x}.")) (|acot| (($ $) "\\spad{acot(x)} returns the arc-cotangent of \\spad{x}.")) (|acos| (($ $) "\\spad{acos(x)} returns the arc-cosine of \\spad{x}."))) 
NIL 
NIL 
(-67) 
((|constructor| (NIL "This domain represents the syntax of an attribute in \\indented{2}{a category expression.}")) (|name| (((|SpadAst|) $) "\\spad{name(a)} returns the name of the attribute `a'. Note,{} this name may be domain name,{} not just an identifier."))) 
NIL 
NIL 
(-68) 
((|constructor| (NIL "This category exports the attributes in the AXIOM Library")) (|canonical| ((|attribute|) "\\spad{canonical} is \\spad{true} if and only if distinct elements have distinct data structures. For example,{} a domain of mathematical objects which has the \\spad{canonical} attribute means that two objects are mathematically equal if and only if their data structures are equal.")) (|multiplicativeValuation| ((|attribute|) "\\spad{multiplicativeValuation} implies \\spad{euclideanSize(a*b)=euclideanSize(a)*euclideanSize(b)}.")) (|additiveValuation| ((|attribute|) "\\spad{additiveValuation} implies \\spad{euclideanSize(a*b)=euclideanSize(a)+euclideanSize(b)}.")) (|noetherian| ((|attribute|) "\\spad{noetherian} is \\spad{true} if all of its ideals are finitely generated.")) (|central| ((|attribute|) "\\spad{central} is \\spad{true} if,{} given an algebra over a ring \\spad{R},{} the image of \\spad{R} is the center of the algebra,{} \\spadignore{i.e.} the set of members of the algebra which commute with all others is precisely the image of \\spad{R} in the algebra.")) (|partiallyOrderedSet| ((|attribute|) "\\spad{partiallyOrderedSet} is \\spad{true} if a set with \\spadop{<} which is transitive,{} but \\spad{not(a < b or a = b)} does not necessarily imply \\spad{b<a}.")) (|arbitraryPrecision| ((|attribute|) "\\spad{arbitraryPrecision} means the user can set the precision for subsequent calculations.")) (|canonicalsClosed| ((|attribute|) "\\spad{canonicalsClosed} is \\spad{true} if \\spad{unitCanonical(a)*unitCanonical(b) = unitCanonical(a*b)}.")) (|canonicalUnitNormal| ((|attribute|) "\\spad{canonicalUnitNormal} is \\spad{true} if we can choose a canonical representative for each class of associate elements,{} that is \\spad{associates?(a,b)} returns \\spad{true} if and only if \\spad{unitCanonical(a) = unitCanonical(b)}.")) (|noZeroDivisors| ((|attribute|) "\\spad{noZeroDivisors} is \\spad{true} if \\spad{x * y \\~~= 0} implies both \\spad{x} and \\spad{y} are non-zero.")) (|rightUnitary| ((|attribute|) "\\spad{rightUnitary} is \\spad{true} if \\spad{x * 1 = x} for all \\spad{x}.")) (|leftUnitary| ((|attribute|) "\\spad{leftUnitary} is \\spad{true} if \\spad{1 * x = x} for all \\spad{x}.")) (|unitsKnown| ((|attribute|) "\\spad{unitsKnown} is \\spad{true} if a monoid (a multiplicative semigroup with a 1) has \\spad{unitsKnown} means that the operation \\spadfun{recip} can only return \"failed\" if its argument is not a unit.")) (|shallowlyMutable| ((|attribute|) "\\spad{shallowlyMutable} is \\spad{true} if its values have immediate components that are updateable (mutable). Note: the properties of any component domain are irrevelant to the \\spad{shallowlyMutable} proper.")) (|commutative| ((|attribute| "*") "\\spad{commutative(\"*\")} is \\spad{true} if it has an operation \\spad{\"*\": (D,D) -> D} which is commutative.")) (|finiteAggregate| ((|attribute|) "\\spad{finiteAggregate} is \\spad{true} if it is an aggregate with a finite number of elements."))) 
((-3994 . T) ((-3996 "*") . T) (-3995 . T) (-3991 . T) (-3989 . T) (-3988 . T) (-3987 . T) (-3992 . T) (-3986 . T) (-3985 . T) (-3984 . T) (-3983 . T) (-3982 . T) (-3990 . T) (-3993 . T) (|NullSquare| . T) (|JacobiIdentity| . T) (-3981 . T)) 
NIL 
(-69 R) 
((|constructor| (NIL "Automorphism \\spad{R} is the multiplicative group of automorphisms of \\spad{R}.")) (|morphism| (($ (|Mapping| |#1| |#1| (|Integer|))) "\\spad{morphism(f)} returns the morphism given by \\spad{f^n(x) = f(x,n)}.") (($ (|Mapping| |#1| |#1|) (|Mapping| |#1| |#1|)) "\\spad{morphism(f, g)} returns the invertible morphism given by \\spad{f},{} where \\spad{g} is the inverse of \\spad{f}..") (($ (|Mapping| |#1| |#1|)) "\\spad{morphism(f)} returns the non-invertible morphism given by \\spad{f}."))) 
((-3991 . T)) 
NIL 
(-70 R UP) 
((|constructor| (NIL "This package provides balanced factorisations of polynomials.")) (|balancedFactorisation| (((|Factored| |#2|) |#2| (|List| |#2|)) "\\spad{balancedFactorisation(a, [b1,...,bn])} returns a factorisation \\spad{a = p1^e1 ... pm^em} such that each \\spad{pi} is balanced with respect to \\spad{[b1,...,bm]}.") (((|Factored| |#2|) |#2| |#2|) "\\spad{balancedFactorisation(a, b)} returns a factorisation \\spad{a = p1^e1 ... pm^em} such that each \\spad{pi} is balanced with respect to \\spad{b}."))) 
NIL 
NIL 
(-71 S) 
((|constructor| (NIL "\\spadtype{BasicType} is the basic category for describing a collection of elements with \\spadop{=} (equality).")) (|before?| (((|Boolean|) $ $) "\\spad{before?(x,y)} holds if the system representation of \\spad{x} comes before that of \\spad{y} in a an implementation defined manner.")) (~= (((|Boolean|) $ $) "\\spad{x~=y} tests if \\spad{x} and \\spad{y} are not equal.")) (= (((|Boolean|) $ $) "\\spad{x=y} tests if \\spad{x} and \\spad{y} are equal."))) 
NIL 
NIL 
(-72) 
((|constructor| (NIL "\\spadtype{BasicType} is the basic category for describing a collection of elements with \\spadop{=} (equality).")) (|before?| (((|Boolean|) $ $) "\\spad{before?(x,y)} holds if the system representation of \\spad{x} comes before that of \\spad{y} in a an implementation defined manner.")) (~= (((|Boolean|) $ $) "\\spad{x~=y} tests if \\spad{x} and \\spad{y} are not equal.")) (= (((|Boolean|) $ $) "\\spad{x=y} tests if \\spad{x} and \\spad{y} are equal."))) 
NIL 
NIL 
(-73 S) 
((|constructor| (NIL "\\spadtype{BalancedBinaryTree(S)} is the domain of balanced binary trees (bbtree). A balanced binary tree of \\spad{2**k} leaves,{} for some \\spad{k > 0},{} is symmetric,{} that is,{} the left and right subtree of each interior node have identical shape. In general,{} the left and right subtree of a given node can differ by at most leaf node.")) (|mapDown!| (($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|)) "\\spad{mapDown!(t,p,f)} returns \\spad{t} after traversing \\spad{t} in \"preorder\" (node then left then right) fashion replacing the successive interior nodes as follows. Let \\spad{l} and \\spad{r} denote the left and right subtrees of \\spad{t}. The root value \\spad{x} of \\spad{t} is replaced by \\spad{p}. Then \\spad{f}(value \\spad{l},{} value \\spad{r},{} \\spad{p}),{} where \\spad{l} and \\spad{r} denote the left and right subtrees of \\spad{t},{} is evaluated producing two values pl and pr. Then \\spad{mapDown!(l,pl,f)} and \\spad{mapDown!(l,pr,f)} are evaluated.") (($ $ |#1| (|Mapping| |#1| |#1| |#1|)) "\\spad{mapDown!(t,p,f)} returns \\spad{t} after traversing \\spad{t} in \"preorder\" (node then left then right) fashion replacing the successive interior nodes as follows. The root value \\spad{x} is replaced by \\spad{q} := \\spad{f}(\\spad{p},{}\\spad{x}). The mapDown!(\\spad{l},{}\\spad{q},{}\\spad{f}) and mapDown!(\\spad{r},{}\\spad{q},{}\\spad{f}) are evaluated for the left and right subtrees \\spad{l} and \\spad{r} of \\spad{t}.")) (|mapUp!| (($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|)) "\\spad{mapUp!(t,t1,f)} traverses \\spad{t} in an \"endorder\" (left then right then node) fashion returning \\spad{t} with the value at each successive interior node of \\spad{t} replaced by \\spad{f}(\\spad{l},{}\\spad{r},{}\\spad{l1},{}\\spad{r1}) where \\spad{l} and \\spad{r} are the values at the immediate left and right nodes. Values \\spad{l1} and \\spad{r1} are values at the corresponding nodes of a balanced binary tree \\spad{t1},{} of identical shape at \\spad{t}.") ((|#1| $ (|Mapping| |#1| |#1| |#1|)) "\\spad{mapUp!(t,f)} traverses balanced binary tree \\spad{t} in an \"endorder\" (left then right then node) fashion returning \\spad{t} with the value at each successive interior node of \\spad{t} replaced by \\spad{f}(\\spad{l},{}\\spad{r}) where \\spad{l} and \\spad{r} are the values at the immediate left and right nodes.")) (|setleaves!| (($ $ (|List| |#1|)) "\\spad{setleaves!(t, ls)} sets the leaves of \\spad{t} in left-to-right order to the elements of ls.")) (|balancedBinaryTree| (($ (|NonNegativeInteger|) |#1|) "\\spad{balancedBinaryTree(n, s)} creates a balanced binary tree with \\spad{n} nodes each with value \\spad{s}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-74 R UP M |Row| |Col|) 
((|constructor| (NIL "\\spadtype{BezoutMatrix} contains functions for computing resultants and discriminants using Bezout matrices.")) (|bezoutDiscriminant| ((|#1| |#2|) "\\spad{bezoutDiscriminant(p)} computes the discriminant of a polynomial \\spad{p} by computing the determinant of a Bezout matrix.")) (|bezoutResultant| ((|#1| |#2| |#2|) "\\spad{bezoutResultant(p,q)} computes the resultant of the two polynomials \\spad{p} and \\spad{q} by computing the determinant of a Bezout matrix.")) (|bezoutMatrix| ((|#3| |#2| |#2|) "\\spad{bezoutMatrix(p,q)} returns the Bezout matrix for the two polynomials \\spad{p} and \\spad{q}.")) (|sylvesterMatrix| ((|#3| |#2| |#2|) "\\spad{sylvesterMatrix(p,q)} returns the Sylvester matrix for the two polynomials \\spad{p} and \\spad{q}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE (-3996 "*")))) 
(-75 A S) 
((|constructor| (NIL "A bag aggregate is an aggregate for which one can insert and extract objects,{} and where the order in which objects are inserted determines the order of extraction. Examples of bags are stacks,{} queues,{} and dequeues.")) (|inspect| ((|#2| $) "\\spad{inspect(u)} returns an (random) element from a bag.")) (|insert!| (($ |#2| $) "\\spad{insert!(x,u)} inserts item \\spad{x} into bag \\spad{u}.")) (|extract!| ((|#2| $) "\\spad{extract!(u)} destructively removes a (random) item from bag \\spad{u}.")) (|bag| (($ (|List| |#2|)) "\\spad{bag([x,y,...,z])} creates a bag with elements \\spad{x},{}\\spad{y},{}...,{}\\spad{z}.")) (|shallowlyMutable| ((|attribute|) "shallowlyMutable means that elements of bags may be destructively changed."))) 
NIL 
NIL 
(-76 S) 
((|constructor| (NIL "A bag aggregate is an aggregate for which one can insert and extract objects,{} and where the order in which objects are inserted determines the order of extraction. Examples of bags are stacks,{} queues,{} and dequeues.")) (|inspect| ((|#1| $) "\\spad{inspect(u)} returns an (random) element from a bag.")) (|insert!| (($ |#1| $) "\\spad{insert!(x,u)} inserts item \\spad{x} into bag \\spad{u}.")) (|extract!| ((|#1| $) "\\spad{extract!(u)} destructively removes a (random) item from bag \\spad{u}.")) (|bag| (($ (|List| |#1|)) "\\spad{bag([x,y,...,z])} creates a bag with elements \\spad{x},{}\\spad{y},{}...,{}\\spad{z}.")) (|shallowlyMutable| ((|attribute|) "shallowlyMutable means that elements of bags may be destructively changed."))) 
((-3995 . T)) 
NIL 
(-77) 
((|constructor| (NIL "This domain allows rational numbers to be presented as repeating binary expansions.")) (|binary| (($ (|Fraction| (|Integer|))) "\\spad{binary(r)} converts a rational number to a binary expansion.")) (|fractionPart| (((|Fraction| (|Integer|)) $) "\\spad{fractionPart(b)} returns the fractional part of a binary expansion."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-484) (QUOTE (-821))) (|HasCategory| (-484) (QUOTE (-950 (-1089)))) (|HasCategory| (-484) (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-120))) (|HasCategory| (-484) (QUOTE (-553 (-473)))) (|HasCategory| (-484) (QUOTE (-933))) (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756))) (OR (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756)))) (|HasCategory| (-484) (QUOTE (-950 (-484)))) (|HasCategory| (-484) (QUOTE (-1065))) (|HasCategory| (-484) (QUOTE (-796 (-329)))) (|HasCategory| (-484) (QUOTE (-796 (-484)))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-484) (QUOTE (-189))) (|HasCategory| (-484) (QUOTE (-811 (-1089)))) (|HasCategory| (-484) (QUOTE (-190))) (|HasCategory| (-484) (QUOTE (-809 (-1089)))) (|HasCategory| (-484) (QUOTE (-455 (-1089) (-484)))) (|HasCategory| (-484) (QUOTE (-260 (-484)))) (|HasCategory| (-484) (QUOTE (-241 (-484) (-484)))) (|HasCategory| (-484) (QUOTE (-258))) (|HasCategory| (-484) (QUOTE (-483))) (|HasCategory| (-484) (QUOTE (-580 (-484)))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (|HasCategory| (-484) (QUOTE (-118))))) 
(-78) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: October 24,{} 2007 Date Last Modified: January 18,{} 2008. A `Binding' is a name asosciated with a collection of properties.")) (|binding| (($ (|Identifier|) (|List| (|Property|))) "\\spad{binding(n,props)} constructs a binding with name `n' and property list `props'.")) (|properties| (((|List| (|Property|)) $) "\\spad{properties(b)} returns the properties associated with binding \\spad{b}.")) (|name| (((|Identifier|) $) "\\spad{name(b)} returns the name of binding \\spad{b}"))) 
NIL 
NIL 
(-79 T$) 
((|constructor| (NIL "This domain implements binary operations.")) (|binaryOperation| (($ (|Mapping| |#1| |#1| |#1|)) "\\spad{binaryOperation f} constructs a binary operation value out of any homogeneous mapping of arity 2."))) 
NIL 
NIL 
(-80 T$) 
((|constructor| (NIL "This is the category of all domains that implement binary operations."))) 
NIL 
NIL 
(-81) 
((|constructor| (NIL "\\spadtype{Bits} provides logical functions for Indexed Bits.")) (|bits| (($ (|NonNegativeInteger|) (|Boolean|)) "\\spad{bits(n,b)} creates bits with \\spad{n} values of \\spad{b}"))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| (-85) (QUOTE (-260 (-85)))) (|HasCategory| (-85) (QUOTE (-1013)))) (|HasCategory| (-85) (QUOTE (-553 (-473)))) (|HasCategory| (-85) (QUOTE (-756))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| (-85) (QUOTE (-1013))) (|HasCategory| (-85) (QUOTE (-552 (-772)))) (|HasCategory| (-85) (QUOTE (-72)))) 
(-82 R S) 
((|constructor| (NIL "A \\spadtype{BiModule} is both a left and right module with respect to potentially different rings. \\blankline")) (|rightUnitary| ((|attribute|) "\\spad{x * 1 = x}")) (|leftUnitary| ((|attribute|) "\\spad{1 * x = x}"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-83 S) 
((|constructor| (NIL "This is the category of Boolean logic structures.")) (|or| (($ $ $) "\\spad{x or y} returns the disjunction of \\spad{x} and \\spad{y}.")) (|and| (($ $ $) "\\spad{x and y} returns the conjunction of \\spad{x} and \\spad{y}.")) (|not| (($ $) "\\spad{not x} returns the complement or negation of \\spad{x}."))) 
NIL 
NIL 
(-84) 
((|constructor| (NIL "This is the category of Boolean logic structures.")) (|or| (($ $ $) "\\spad{x or y} returns the disjunction of \\spad{x} and \\spad{y}.")) (|and| (($ $ $) "\\spad{x and y} returns the conjunction of \\spad{x} and \\spad{y}.")) (|not| (($ $) "\\spad{not x} returns the complement or negation of \\spad{x}."))) 
NIL 
NIL 
(-85) 
((|constructor| (NIL "\\indented{1}{\\spadtype{Boolean} is the elementary logic with 2 values:} \\spad{true} and \\spad{false}")) (|nor| (($ $ $) "\\spad{nor(a,b)} returns the logical negation of \\spad{a} or \\spad{b}.")) (|nand| (($ $ $) "\\spad{nand(a,b)} returns the logical negation of \\spad{a} and \\spad{b}.")) (|xor| (($ $ $) "\\spad{xor(a,b)} returns the logical exclusive {\\em or} of Boolean \\spad{a} and \\spad{b}."))) 
NIL 
NIL 
(-86) 
((|constructor| (NIL "A basic operator is an object that can be applied to a list of arguments from a set,{} the result being a kernel over that set.")) (|setProperties| (($ $ (|AssociationList| (|String|) (|None|))) "\\spad{setProperties(op, l)} sets the property list of \\spad{op} to \\spad{l}. Argument \\spad{op} is modified \"in place\",{} \\spadignore{i.e.} no copy is made.")) (|setProperty| (($ $ (|Identifier|) (|None|)) "\\spad{setProperty(op, p, v)} attaches property \\spad{p} to \\spad{op},{} and sets its value to \\spad{v}. Argument \\spad{op} is modified \"in place\",{} \\spadignore{i.e.} no copy is made.") (($ $ (|String|) (|None|)) "\\spad{setProperty(op, s, v)} attaches property \\spad{s} to \\spad{op},{} and sets its value to \\spad{v}. Argument \\spad{op} is modified \"in place\",{} \\spadignore{i.e.} no copy is made.")) (|property| (((|Maybe| (|None|)) $ (|Identifier|)) "\\spad{property(op, p)} returns the value of property \\spad{p} if it is attached to \\spad{op},{} otherwise \\spad{nothing}.") (((|Union| (|None|) "failed") $ (|String|)) "\\spad{property(op, s)} returns the value of property \\spad{s} if it is attached to \\spad{op},{} and \"failed\" otherwise.")) (|deleteProperty!| (($ $ (|Identifier|)) "\\spad{deleteProperty!(op, p)} unattaches property \\spad{p} from \\spad{op}. Argument \\spad{op} is modified \"in place\",{} \\spadignore{i.e.} no copy is made.") (($ $ (|String|)) "\\spad{deleteProperty!(op, s)} unattaches property \\spad{s} from \\spad{op}. Argument \\spad{op} is modified \"in place\",{} \\spadignore{i.e.} no copy is made.")) (|assert| (($ $ (|Identifier|)) "\\spad{assert(op, p)} attaches property \\spad{p} to \\spad{op}. Argument \\spad{op} is modified \"in place\",{} \\spadignore{i.e.} no copy is made.")) (|has?| (((|Boolean|) $ (|Identifier|)) "\\spad{has?(op,p)} tests if property \\spad{s} is attached to \\spad{op}.")) (|input| (((|Maybe| (|Mapping| (|InputForm|) (|List| (|InputForm|)))) $) "\\spad{input(op)} returns the \"\\%input\" property of \\spad{op} if it has one attached,{} \\spad{nothing} otherwise.") (($ $ (|Mapping| (|InputForm|) (|List| (|InputForm|)))) "\\spad{input(op, foo)} attaches foo as the \"\\%input\" property of \\spad{op}. If \\spad{op} has a \"\\%input\" property \\spad{f},{} then \\spad{op(a1,...,an)} gets converted to InputForm as \\spad{f(a1,...,an)}.")) (|display| (($ $ (|Mapping| (|OutputForm|) (|OutputForm|))) "\\spad{display(op, foo)} attaches foo as the \"\\%display\" property of \\spad{op}. If \\spad{op} has a \"\\%display\" property \\spad{f},{} then \\spad{op(a)} gets converted to OutputForm as \\spad{f(a)}. Argument \\spad{op} must be unary.") (($ $ (|Mapping| (|OutputForm|) (|List| (|OutputForm|)))) "\\spad{display(op, foo)} attaches foo as the \"\\%display\" property of \\spad{op}. If \\spad{op} has a \"\\%display\" property \\spad{f},{} then \\spad{op(a1,...,an)} gets converted to OutputForm as \\spad{f(a1,...,an)}.") (((|Maybe| (|Mapping| (|OutputForm|) (|List| (|OutputForm|)))) $) "\\spad{display(op)} returns the \"\\%display\" property of \\spad{op} if it has one attached,{} and \\spad{nothing} otherwise.")) (|comparison| (($ $ (|Mapping| (|Boolean|) $ $)) "\\spad{comparison(op, foo?)} attaches foo? as the \"\\%less?\" property to \\spad{op}. If \\spad{op1} and \\spad{op2} have the same name,{} and one of them has a \"\\%less?\" property \\spad{f},{} then \\spad{f(op1, op2)} is called to decide whether \\spad{op1 < op2}.")) (|equality| (($ $ (|Mapping| (|Boolean|) $ $)) "\\spad{equality(op, foo?)} attaches foo? as the \"\\%equal?\" property to \\spad{op}. If \\spad{op1} and \\spad{op2} have the same name,{} and one of them has an \"\\%equal?\" property \\spad{f},{} then \\spad{f(op1, op2)} is called to decide whether \\spad{op1} and \\spad{op2} should be considered equal.")) (|weight| (($ $ (|NonNegativeInteger|)) "\\spad{weight(op, n)} attaches the weight \\spad{n} to \\spad{op}.") (((|NonNegativeInteger|) $) "\\spad{weight(op)} returns the weight attached to \\spad{op}.")) (|nary?| (((|Boolean|) $) "\\spad{nary?(op)} tests if \\spad{op} has arbitrary arity.")) (|unary?| (((|Boolean|) $) "\\spad{unary?(op)} tests if \\spad{op} is unary.")) (|nullary?| (((|Boolean|) $) "\\spad{nullary?(op)} tests if \\spad{op} is nullary.")) (|operator| (($ (|Symbol|) (|Arity|)) "\\spad{operator(f, a)} makes \\spad{f} into an operator of arity \\spad{a}.") (($ (|Symbol|) (|NonNegativeInteger|)) "\\spad{operator(f, n)} makes \\spad{f} into an \\spad{n}-ary operator.") (($ (|Symbol|)) "\\spad{operator(f)} makes \\spad{f} into an operator with arbitrary arity.")) (|copy| (($ $) "\\spad{copy(op)} returns a copy of \\spad{op}.")) (|properties| (((|AssociationList| (|String|) (|None|)) $) "\\spad{properties(op)} returns the list of all the properties currently attached to \\spad{op}."))) 
NIL 
NIL 
(-87 A) 
((|constructor| (NIL "This package exports functions to set some commonly used properties of operators,{} including properties which contain functions.")) (|constantOpIfCan| (((|Union| |#1| "failed") (|BasicOperator|)) "\\spad{constantOpIfCan(op)} returns \\spad{a} if \\spad{op} is the constant nullary operator always returning \\spad{a},{} \"failed\" otherwise.")) (|constantOperator| (((|BasicOperator|) |#1|) "\\spad{constantOperator(a)} returns a nullary operator op such that \\spad{op()} always evaluate to \\spad{a}.")) (|derivative| (((|Union| (|List| (|Mapping| |#1| (|List| |#1|))) "failed") (|BasicOperator|)) "\\spad{derivative(op)} returns the value of the \"\\%diff\" property of \\spad{op} if it has one,{} and \"failed\" otherwise.") (((|BasicOperator|) (|BasicOperator|) (|Mapping| |#1| |#1|)) "\\spad{derivative(op, foo)} attaches foo as the \"\\%diff\" property of \\spad{op}. If \\spad{op} has an \"\\%diff\" property \\spad{f},{} then applying a derivation \\spad{D} to \\spad{op}(a) returns \\spad{f(a) * D(a)}. Argument \\spad{op} must be unary.") (((|BasicOperator|) (|BasicOperator|) (|List| (|Mapping| |#1| (|List| |#1|)))) "\\spad{derivative(op, [foo1,...,foon])} attaches [\\spad{foo1},{}...,{}foon] as the \"\\%diff\" property of \\spad{op}. If \\spad{op} has an \"\\%diff\" property \\spad{[f1,...,fn]} then applying a derivation \\spad{D} to \\spad{op(a1,...,an)} returns \\spad{f1(a1,...,an) * D(a1) + ... + fn(a1,...,an) * D(an)}.")) (|evaluate| (((|Union| (|Mapping| |#1| (|List| |#1|)) "failed") (|BasicOperator|)) "\\spad{evaluate(op)} returns the value of the \"\\%eval\" property of \\spad{op} if it has one,{} and \"failed\" otherwise.") (((|BasicOperator|) (|BasicOperator|) (|Mapping| |#1| |#1|)) "\\spad{evaluate(op, foo)} attaches foo as the \"\\%eval\" property of \\spad{op}. If \\spad{op} has an \"\\%eval\" property \\spad{f},{} then applying \\spad{op} to a returns the result of \\spad{f(a)}. Argument \\spad{op} must be unary.") (((|BasicOperator|) (|BasicOperator|) (|Mapping| |#1| (|List| |#1|))) "\\spad{evaluate(op, foo)} attaches foo as the \"\\%eval\" property of \\spad{op}. If \\spad{op} has an \"\\%eval\" property \\spad{f},{} then applying \\spad{op} to \\spad{(a1,...,an)} returns the result of \\spad{f(a1,...,an)}.") (((|Union| |#1| "failed") (|BasicOperator|) (|List| |#1|)) "\\spad{evaluate(op, [a1,...,an])} checks if \\spad{op} has an \"\\%eval\" property \\spad{f}. If it has,{} then \\spad{f(a1,...,an)} is returned,{} and \"failed\" otherwise."))) 
NIL 
NIL 
(-88 -3092 UP) 
((|constructor| (NIL "\\spadtype{BoundIntegerRoots} provides functions to find lower bounds on the integer roots of a polynomial.")) (|integerBound| (((|Integer|) |#2|) "\\spad{integerBound(p)} returns a lower bound on the negative integer roots of \\spad{p},{} and 0 if \\spad{p} has no negative integer roots."))) 
NIL 
NIL 
(-89 |p|) 
((|constructor| (NIL "Stream-based implementation of Zp: \\spad{p}-adic numbers are represented as sum(\\spad{i} = 0..,{} a[\\spad{i}] * p^i),{} where the a[\\spad{i}] lie in -(\\spad{p} - 1)\\spad{/2},{}...,{}(\\spad{p} - 1)\\spad{/2}."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-90 |p|) 
((|constructor| (NIL "Stream-based implementation of Qp: numbers are represented as sum(\\spad{i} = \\spad{k}..,{} a[\\spad{i}] * p^i),{} where the a[\\spad{i}] lie in -(\\spad{p} - 1)\\spad{/2},{}...,{}(\\spad{p} - 1)\\spad{/2}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-89 |#1|) (QUOTE (-821))) (|HasCategory| (-89 |#1|) (QUOTE (-950 (-1089)))) (|HasCategory| (-89 |#1|) (QUOTE (-118))) (|HasCategory| (-89 |#1|) (QUOTE (-120))) (|HasCategory| (-89 |#1|) (QUOTE (-553 (-473)))) (|HasCategory| (-89 |#1|) (QUOTE (-933))) (|HasCategory| (-89 |#1|) (QUOTE (-740))) (|HasCategory| (-89 |#1|) (QUOTE (-756))) (OR (|HasCategory| (-89 |#1|) (QUOTE (-740))) (|HasCategory| (-89 |#1|) (QUOTE (-756)))) (|HasCategory| (-89 |#1|) (QUOTE (-950 (-484)))) (|HasCategory| (-89 |#1|) (QUOTE (-1065))) (|HasCategory| (-89 |#1|) (QUOTE (-796 (-329)))) (|HasCategory| (-89 |#1|) (QUOTE (-796 (-484)))) (|HasCategory| (-89 |#1|) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-89 |#1|) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-89 |#1|) (QUOTE (-580 (-484)))) (|HasCategory| (-89 |#1|) (QUOTE (-189))) (|HasCategory| (-89 |#1|) (QUOTE (-811 (-1089)))) (|HasCategory| (-89 |#1|) (QUOTE (-190))) (|HasCategory| (-89 |#1|) (QUOTE (-809 (-1089)))) (|HasCategory| (-89 |#1|) (|%list| (QUOTE -455) (QUOTE (-1089)) (|%list| (QUOTE -89) (|devaluate| |#1|)))) (|HasCategory| (-89 |#1|) (|%list| (QUOTE -260) (|%list| (QUOTE -89) (|devaluate| |#1|)))) (|HasCategory| (-89 |#1|) (|%list| (QUOTE -241) (|%list| (QUOTE -89) (|devaluate| |#1|)) (|%list| (QUOTE -89) (|devaluate| |#1|)))) (|HasCategory| (-89 |#1|) (QUOTE (-258))) (|HasCategory| (-89 |#1|) (QUOTE (-483))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-89 |#1|) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-89 |#1|) (QUOTE (-821)))) (|HasCategory| (-89 |#1|) (QUOTE (-118))))) 
(-91 A S) 
((|constructor| (NIL "A binary-recursive aggregate has 0,{} 1 or 2 children and serves as a model for a binary tree or a doubly-linked aggregate structure")) (|setright!| (($ $ $) "\\spad{setright!(a,x)} sets the right child of \\spad{t} to be \\spad{x}.")) (|setleft!| (($ $ $) "\\spad{setleft!(a,b)} sets the left child of \\axiom{a} to be \\spad{b}.")) (|setelt| (($ $ "right" $) "\\spad{setelt(a,\"right\",b)} (also written \\axiom{\\spad{b} . right := \\spad{b}}) is equivalent to \\axiom{setright!(a,{}\\spad{b})}.") (($ $ "left" $) "\\spad{setelt(a,\"left\",b)} (also written \\axiom{a . left := \\spad{b}}) is equivalent to \\axiom{setleft!(a,{}\\spad{b})}.")) (|right| (($ $) "\\spad{right(a)} returns the right child.")) (|elt| (($ $ "right") "\\spad{elt(a,\"right\")} (also written: \\axiom{a . right}) is equivalent to \\axiom{right(a)}.") (($ $ "left") "\\spad{elt(u,\"left\")} (also written: \\axiom{a . left}) is equivalent to \\axiom{left(a)}.")) (|left| (($ $) "\\spad{left(u)} returns the left child."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995))) 
(-92 S) 
((|constructor| (NIL "A binary-recursive aggregate has 0,{} 1 or 2 children and serves as a model for a binary tree or a doubly-linked aggregate structure")) (|setright!| (($ $ $) "\\spad{setright!(a,x)} sets the right child of \\spad{t} to be \\spad{x}.")) (|setleft!| (($ $ $) "\\spad{setleft!(a,b)} sets the left child of \\axiom{a} to be \\spad{b}.")) (|setelt| (($ $ "right" $) "\\spad{setelt(a,\"right\",b)} (also written \\axiom{\\spad{b} . right := \\spad{b}}) is equivalent to \\axiom{setright!(a,{}\\spad{b})}.") (($ $ "left" $) "\\spad{setelt(a,\"left\",b)} (also written \\axiom{a . left := \\spad{b}}) is equivalent to \\axiom{setleft!(a,{}\\spad{b})}.")) (|right| (($ $) "\\spad{right(a)} returns the right child.")) (|elt| (($ $ "right") "\\spad{elt(a,\"right\")} (also written: \\axiom{a . right}) is equivalent to \\axiom{right(a)}.") (($ $ "left") "\\spad{elt(u,\"left\")} (also written: \\axiom{a . left}) is equivalent to \\axiom{left(a)}.")) (|left| (($ $) "\\spad{left(u)} returns the left child."))) 
NIL 
NIL 
(-93 UP) 
((|constructor| (NIL "\\indented{1}{Author: Frederic Lehobey,{} James \\spad{H}. Davenport} Date Created: 28 June 1994 Date Last Updated: 11 July 1997 Basic Operations: brillhartIrreducible? Related Domains: Also See: AMS Classifications: Keywords: factorization Examples: References: [1] John Brillhart,{} Note on Irreducibility Testing,{} Mathematics of Computation,{} vol. 35,{} num. 35,{} Oct. 1980,{} 1379-1381 [2] James Davenport,{} On Brillhart Irreducibility. To appear. [3] John Brillhart,{} On the Euler and Bernoulli polynomials,{} \\spad{J}. Reine Angew. Math.,{} \\spad{v}. 234,{} (1969),{} pp. 45-64")) (|noLinearFactor?| (((|Boolean|) |#1|) "\\spad{noLinearFactor?(p)} returns \\spad{true} if \\spad{p} can be shown to have no linear factor by a theorem of Lehmer,{} \\spad{false} else. \\spad{I} insist on the fact that \\spad{false} does not mean that \\spad{p} has a linear factor.")) (|brillhartTrials| (((|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{brillhartTrials(n)} sets to \\spad{n} the number of tests in \\spadfun{brillhartIrreducible?} and returns the previous value.") (((|NonNegativeInteger|)) "\\spad{brillhartTrials()} returns the number of tests in \\spadfun{brillhartIrreducible?}.")) (|brillhartIrreducible?| (((|Boolean|) |#1| (|Boolean|)) "\\spad{brillhartIrreducible?(p,noLinears)} returns \\spad{true} if \\spad{p} can be shown to be irreducible by a remark of Brillhart,{} \\spad{false} else. If \\spad{noLinears} is \\spad{true},{} we are being told \\spad{p} has no linear factors \\spad{false} does not mean that \\spad{p} is reducible.") (((|Boolean|) |#1|) "\\spad{brillhartIrreducible?(p)} returns \\spad{true} if \\spad{p} can be shown to be irreducible by a remark of Brillhart,{} \\spad{false} is inconclusive."))) 
NIL 
NIL 
(-94 S) 
((|constructor| (NIL "BinarySearchTree(\\spad{S}) is the domain of a binary trees where elements are ordered across the tree. A binary search tree is either empty or has a value which is an \\spad{S},{} and a right and left which are both BinaryTree(\\spad{S}) Elements are ordered across the tree.")) (|split| (((|Record| (|:| |less| $) (|:| |greater| $)) |#1| $) "\\spad{split(x,b)} splits binary tree \\spad{b} into two trees,{} one with elements greater than \\spad{x},{} the other with elements less than \\spad{x}.")) (|insertRoot!| (($ |#1| $) "\\spad{insertRoot!(x,b)} inserts element \\spad{x} as a root of binary search tree \\spad{b}.")) (|insert!| (($ |#1| $) "\\spad{insert!(x,b)} inserts element \\spad{x} as leaves into binary search tree \\spad{b}.")) (|binarySearchTree| (($ (|List| |#1|)) "\\spad{binarySearchTree(l)} \\undocumented"))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-95 S) 
((|constructor| (NIL "The bit aggregate category models aggregates representing large quantities of Boolean data.")) (|xor| (($ $ $) "\\spad{xor(a,b)} returns the logical {\\em exclusive-or} of bit aggregates \\axiom{a} and \\axiom{\\spad{b}}.")) (|nor| (($ $ $) "\\spad{nor(a,b)} returns the logical {\\em nor} of bit aggregates \\axiom{a} and \\axiom{\\spad{b}}.")) (|nand| (($ $ $) "\\spad{nand(a,b)} returns the logical {\\em nand} of bit aggregates \\axiom{a} and \\axiom{\\spad{b}}."))) 
NIL 
NIL 
(-96) 
((|constructor| (NIL "The bit aggregate category models aggregates representing large quantities of Boolean data.")) (|xor| (($ $ $) "\\spad{xor(a,b)} returns the logical {\\em exclusive-or} of bit aggregates \\axiom{a} and \\axiom{\\spad{b}}.")) (|nor| (($ $ $) "\\spad{nor(a,b)} returns the logical {\\em nor} of bit aggregates \\axiom{a} and \\axiom{\\spad{b}}.")) (|nand| (($ $ $) "\\spad{nand(a,b)} returns the logical {\\em nand} of bit aggregates \\axiom{a} and \\axiom{\\spad{b}}."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-97 A S) 
((|constructor| (NIL "\\spadtype{BinaryTreeCategory(S)} is the category of binary trees: a tree which is either empty or else is a \\spadfun{node} consisting of a value and a \\spadfun{left} and \\spadfun{right},{} both binary trees.")) (|node| (($ $ |#2| $) "\\spad{node(left,v,right)} creates a binary tree with value \\spad{v},{} a binary tree \\spad{left},{} and a binary tree \\spad{right}.")) (|finiteAggregate| ((|attribute|) "Binary trees have a finite number of components")) (|shallowlyMutable| ((|attribute|) "Binary trees have updateable components"))) 
NIL 
NIL 
(-98 S) 
((|constructor| (NIL "\\spadtype{BinaryTreeCategory(S)} is the category of binary trees: a tree which is either empty or else is a \\spadfun{node} consisting of a value and a \\spadfun{left} and \\spadfun{right},{} both binary trees.")) (|node| (($ $ |#1| $) "\\spad{node(left,v,right)} creates a binary tree with value \\spad{v},{} a binary tree \\spad{left},{} and a binary tree \\spad{right}.")) (|finiteAggregate| ((|attribute|) "Binary trees have a finite number of components")) (|shallowlyMutable| ((|attribute|) "Binary trees have updateable components"))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-99 S) 
((|constructor| (NIL "\\spadtype{BinaryTournament(S)} is the domain of binary trees where elements are ordered down the tree. A binary search tree is either empty or is a node containing a \\spadfun{value} of type \\spad{S},{} and a \\spadfun{right} and a \\spadfun{left} which are both \\spadtype{BinaryTree(S)}")) (|insert!| (($ |#1| $) "\\spad{insert!(x,b)} inserts element \\spad{x} as leaves into binary tournament \\spad{b}.")) (|binaryTournament| (($ (|List| |#1|)) "\\spad{binaryTournament(ls)} creates a binary tournament with the elements of \\spad{ls} as values at the nodes."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-100 S) 
((|constructor| (NIL "\\spadtype{BinaryTree(S)} is the domain of all binary trees. A binary tree over \\spad{S} is either empty or has a \\spadfun{value} which is an \\spad{S} and a \\spadfun{right} and \\spadfun{left} which are both binary trees.")) (|binaryTree| (($ $ |#1| $) "\\spad{binaryTree(l,v,r)} creates a binary tree with value \\spad{v} with left subtree \\spad{l} and right subtree \\spad{r}.") (($ |#1|) "\\spad{binaryTree(v)} is an non-empty binary tree with value \\spad{v},{} and left and right empty."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-101) 
((|constructor| (NIL "Byte is the datatype of 8-bit sized unsigned integer values.")) (|sample| (($) "\\spad{sample} gives a sample datum of type Byte.")) (|bitior| (($ $ $) "bitor(\\spad{x},{}\\spad{y}) returns the bitwise `inclusive or' of `x' and `y'.")) (|bitand| (($ $ $) "\\spad{bitand(x,y)} returns the bitwise `and' of `x' and `y'.")) (|byte| (($ (|NonNegativeInteger|)) "\\spad{byte(x)} injects the unsigned integer value `v' into the Byte algebra. `v' must be non-negative and less than 256."))) 
NIL 
NIL 
(-102) 
((|constructor| (NIL "ByteBuffer provides datatype for buffers of bytes. This domain differs from PrimitiveArray Byte in that it is not as rigid as PrimitiveArray Byte. That is,{} the typical use of ByteBuffer is to pre-allocate a vector of Byte of some capacity `n'. The array can then store up to `n' bytes. The actual interesting bytes count (the length of the buffer) is therefore different from the capacity. The length is no more than the capacity,{} but it can be set dynamically as needed. This functionality is used for example when reading bytes from input/output devices where we use buffers to transfer data in and out of the system. Note: a value of type ByteBuffer is 0-based indexed,{} as opposed \\indented{6}{Vector,{} but not unlike PrimitiveArray Byte.}")) (|finiteAggregate| ((|attribute|) "A ByteBuffer object is a finite aggregate")) (|setLength!| (((|NonNegativeInteger|) $ (|NonNegativeInteger|)) "\\spad{setLength!(buf,n)} sets the number of active bytes in the `buf'. Error if `n' is more than the capacity.")) (|capacity| (((|NonNegativeInteger|) $) "\\spad{capacity(buf)} returns the pre-allocated maximum size of `buf'.")) (|byteBuffer| (($ (|NonNegativeInteger|)) "\\spad{byteBuffer(n)} creates a buffer of capacity \\spad{n},{} and length 0."))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| (-101) (QUOTE (-260 (-101)))) (|HasCategory| (-101) (QUOTE (-756)))) (-12 (|HasCategory| (-101) (QUOTE (-260 (-101)))) (|HasCategory| (-101) (QUOTE (-1013))))) (|HasCategory| (-101) (QUOTE (-552 (-772)))) (|HasCategory| (-101) (QUOTE (-553 (-473)))) (OR (|HasCategory| (-101) (QUOTE (-756))) (|HasCategory| (-101) (QUOTE (-1013)))) (|HasCategory| (-101) (QUOTE (-756))) (OR (|HasCategory| (-101) (QUOTE (-72))) (|HasCategory| (-101) (QUOTE (-756))) (|HasCategory| (-101) (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| (-101) (QUOTE (-1013))) (|HasCategory| (-101) (QUOTE (-72))) (-12 (|HasCategory| (-101) (QUOTE (-260 (-101)))) (|HasCategory| (-101) (QUOTE (-1013))))) 
(-103) 
((|constructor| (NIL "This datatype describes byte order of machine values stored memory.")) (|unknownEndian| (($) "\\spad{unknownEndian} for none of the above.")) (|bigEndian| (($) "\\spad{bigEndian} describes big endian host")) (|littleEndian| (($) "\\spad{littleEndian} describes little endian host"))) 
NIL 
NIL 
(-104) 
((|constructor| (NIL "This is an \\spadtype{AbelianMonoid} with the cancellation property,{} \\spadignore{i.e.} \\spad{ a+b = a+c => b=c }. This is formalised by the partial subtraction operator,{} which satisfies the axioms listed below: \\blankline")) (|subtractIfCan| (((|Union| $ "failed") $ $) "\\spad{subtractIfCan(x, y)} returns an element \\spad{z} such that \\spad{z+y=x} or \"failed\" if no such element exists."))) 
NIL 
NIL 
(-105) 
((|constructor| (NIL "A cachable set is a set whose elements keep an integer as part of their structure.")) (|setPosition| (((|Void|) $ (|NonNegativeInteger|)) "\\spad{setPosition(x, n)} associates the integer \\spad{n} to \\spad{x}.")) (|position| (((|NonNegativeInteger|) $) "\\spad{position(x)} returns the integer \\spad{n} associated to \\spad{x}."))) 
NIL 
NIL 
(-106) 
((|constructor| (NIL "This domain represents the capsule of a domain definition.")) (|body| (((|List| (|SpadAst|)) $) "\\spad{body(c)} returns the list of top level expressions appearing in `c'."))) 
NIL 
NIL 
(-107) 
((|constructor| (NIL "Members of the domain CardinalNumber are values indicating the cardinality of sets,{} both finite and infinite. Arithmetic operations are defined on cardinal numbers as follows. \\blankline If \\spad{x = \\#X} and \\spad{y = \\#Y} then \\indented{2}{\\spad{x+y\\space{2}= \\#(X+Y)}\\space{3}\\tab{30}disjoint union} \\indented{2}{\\spad{x-y\\space{2}= \\#(X-Y)}\\space{3}\\tab{30}relative complement} \\indented{2}{\\spad{x*y\\space{2}= \\#(X*Y)}\\space{3}\\tab{30}cartesian product} \\indented{2}{\\spad{x**y = \\#(X**Y)}\\space{2}\\tab{30}\\spad{X**Y = \\{g| g:Y->X\\}}} \\blankline The non-negative integers have a natural construction as cardinals \\indented{2}{\\spad{0 = \\#\\{\\}},{} \\spad{1 = \\{0\\}},{} \\spad{2 = \\{0, 1\\}},{} ...,{} \\spad{n = \\{i| 0 <= i < n\\}}.} \\blankline That \\spad{0} acts as a zero for the multiplication of cardinals is equivalent to the axiom of choice. \\blankline The generalized continuum hypothesis asserts \\center{\\spad{2**Aleph i = Aleph(i+1)}} and is independent of the axioms of set theory [Goedel 1940]. \\blankline Three commonly encountered cardinal numbers are \\indented{3}{\\spad{a = \\#Z}\\space{7}\\tab{30}countable infinity} \\indented{3}{\\spad{c = \\#R}\\space{7}\\tab{30}the continuum} \\indented{3}{\\spad{f = \\#\\{g| g:[0,1]->R\\}}} \\blankline In this domain,{} these values are obtained using \\indented{3}{\\spad{a := Aleph 0},{} \\spad{c := 2**a},{} \\spad{f := 2**c}.} \\blankline")) (|generalizedContinuumHypothesisAssumed| (((|Boolean|) (|Boolean|)) "\\spad{generalizedContinuumHypothesisAssumed(bool)} is used to dictate whether the hypothesis is to be assumed.")) (|generalizedContinuumHypothesisAssumed?| (((|Boolean|)) "\\spad{generalizedContinuumHypothesisAssumed?()} tests if the hypothesis is currently assumed.")) (|countable?| (((|Boolean|) $) "\\spad{countable?(\\spad{a})} determines whether \\spad{a} is a countable cardinal,{} \\spadignore{i.e.} an integer or \\spad{Aleph 0}.")) (|finite?| (((|Boolean|) $) "\\spad{finite?(\\spad{a})} determines whether \\spad{a} is a finite cardinal,{} \\spadignore{i.e.} an integer.")) (|Aleph| (($ (|NonNegativeInteger|)) "\\spad{Aleph(n)} provides the named (infinite) cardinal number.")) (** (($ $ $) "\\spad{x**y} returns \\spad{\\#(X**Y)} where \\spad{X**Y} is defined \\indented{1}{as \\spad{\\{g| g:Y->X\\}}.}")) (- (((|Union| $ "failed") $ $) "\\spad{x - y} returns an element \\spad{z} such that \\spad{z+y=x} or \"failed\" if no such element exists.")) (|commutative| ((|attribute| "*") "a domain \\spad{D} has \\spad{commutative(\"*\")} if it has an operation \\spad{\"*\": (D,D) -> D} which is commutative."))) 
(((-3996 "*") . T)) 
NIL 
(-108 |minix| -2621 R) 
((|constructor| (NIL "CartesianTensor(minix,{}dim,{}\\spad{R}) provides Cartesian tensors with components belonging to a commutative ring \\spad{R}. These tensors can have any number of indices. Each index takes values from \\spad{minix} to \\spad{minix + dim - 1}.")) (|sample| (($) "\\spad{sample()} returns an object of type \\%.")) (|unravel| (($ (|List| |#3|)) "\\spad{unravel(t)} produces a tensor from a list of components such that \\indented{2}{\\spad{unravel(ravel(t)) = t}.}")) (|ravel| (((|List| |#3|) $) "\\spad{ravel(t)} produces a list of components from a tensor such that \\indented{2}{\\spad{unravel(ravel(t)) = t}.}")) (|leviCivitaSymbol| (($) "\\spad{leviCivitaSymbol()} is the rank \\spad{dim} tensor defined by \\spad{leviCivitaSymbol()(i1,...idim) = +1/0/-1} if \\spad{i1,...,idim} is an even/is nota /is an odd permutation of \\spad{minix,...,minix+dim-1}.")) (|kroneckerDelta| (($) "\\spad{kroneckerDelta()} is the rank 2 tensor defined by \\indented{3}{\\spad{kroneckerDelta()(i,j)}} \\indented{6}{\\spad{= 1\\space{2}if i = j}} \\indented{6}{\\spad{= 0 if\\space{2}i \\~= j}}")) (|reindex| (($ $ (|List| (|Integer|))) "\\spad{reindex(t,[i1,...,idim])} permutes the indices of \\spad{t}. For example,{} if \\spad{r = reindex(t, [4,1,2,3])} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank for tensor given by \\indented{4}{\\spad{r(i,j,k,l) = t(l,i,j,k)}.}")) (|transpose| (($ $ (|Integer|) (|Integer|)) "\\spad{transpose(t,i,j)} exchanges the \\spad{i}\\spad{-}th and \\spad{j}\\spad{-}th indices of \\spad{t}. For example,{} if \\spad{r = transpose(t,2,3)} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank 4 tensor given by \\indented{4}{\\spad{r(i,j,k,l) = t(i,k,j,l)}.}") (($ $) "\\spad{transpose(t)} exchanges the first and last indices of \\spad{t}. For example,{} if \\spad{r = transpose(t)} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank 4 tensor given by \\indented{4}{\\spad{r(i,j,k,l) = t(l,j,k,i)}.}")) (|contract| (($ $ (|Integer|) (|Integer|)) "\\spad{contract(t,i,j)} is the contraction of tensor \\spad{t} which sums along the \\spad{i}\\spad{-}th and \\spad{j}\\spad{-}th indices. For example,{} if \\spad{r = contract(t,1,3)} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank 2 \\spad{(= 4 - 2)} tensor given by \\indented{4}{\\spad{r(i,j) = sum(h=1..dim,t(h,i,h,j))}.}") (($ $ (|Integer|) $ (|Integer|)) "\\spad{contract(t,i,s,j)} is the inner product of tenors \\spad{s} and \\spad{t} which sums along the \\spad{k1}\\spad{-}th index of \\spad{t} and the \\spad{k2}\\spad{-}th index of \\spad{s}. For example,{} if \\spad{r = contract(s,2,t,1)} for rank 3 tensors rank 3 tensors \\spad{s} and \\spad{t},{} then \\spad{r} is the rank 4 \\spad{(= 3 + 3 - 2)} tensor given by \\indented{4}{\\spad{r(i,j,k,l) = sum(h=1..dim,s(i,h,j)*t(h,k,l))}.}")) (* (($ $ $) "\\spad{s*t} is the inner product of the tensors \\spad{s} and \\spad{t} which contracts the last index of \\spad{s} with the first index of \\spad{t},{} \\spadignore{i.e.} \\indented{4}{\\spad{t*s = contract(t,rank t, s, 1)}} \\indented{4}{\\spad{t*s = sum(k=1..N, t[i1,..,iN,k]*s[k,j1,..,jM])}} This is compatible with the use of \\spad{M*v} to denote the matrix-vector inner product.")) (|product| (($ $ $) "\\spad{product(s,t)} is the outer product of the tensors \\spad{s} and \\spad{t}. For example,{} if \\spad{r = product(s,t)} for rank 2 tensors \\spad{s} and \\spad{t},{} then \\spad{r} is a rank 4 tensor given by \\indented{4}{\\spad{r(i,j,k,l) = s(i,j)*t(k,l)}.}")) (|elt| ((|#3| $ (|List| (|Integer|))) "\\spad{elt(t,[i1,...,iN])} gives a component of a rank \\spad{N} tensor.") ((|#3| $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{elt(t,i,j,k,l)} gives a component of a rank 4 tensor.") ((|#3| $ (|Integer|) (|Integer|) (|Integer|)) "\\spad{elt(t,i,j,k)} gives a component of a rank 3 tensor.") ((|#3| $ (|Integer|) (|Integer|)) "\\spad{elt(t,i,j)} gives a component of a rank 2 tensor.") ((|#3| $) "\\spad{elt(t)} gives the component of a rank 0 tensor.")) (|rank| (((|NonNegativeInteger|) $) "\\spad{rank(t)} returns the tensorial rank of \\spad{t} (that is,{} the number of indices). This is the same as the graded module degree."))) 
NIL 
NIL 
(-109 |minix| -2621 S T$) 
((|constructor| (NIL "This package provides functions to enable conversion of tensors given conversion of the components.")) (|map| (((|CartesianTensor| |#1| |#2| |#4|) (|Mapping| |#4| |#3|) (|CartesianTensor| |#1| |#2| |#3|)) "\\spad{map(f,ts)} does a componentwise conversion of the tensor \\spad{ts} to a tensor with components of type \\spad{T}.")) (|reshape| (((|CartesianTensor| |#1| |#2| |#4|) (|List| |#4|) (|CartesianTensor| |#1| |#2| |#3|)) "\\spad{reshape(lt,ts)} organizes the list of components \\spad{lt} into a tensor with the same shape as \\spad{ts}."))) 
NIL 
NIL 
(-110) 
((|constructor| (NIL "This domain represents a `case' expression.")) (|rhs| (((|SpadAst|) $) "\\spad{rhs(e)} returns the right hand side of the case expression `e'.")) (|lhs| (((|SpadAst|) $) "\\spad{lhs(e)} returns the left hand side of the case expression `e'."))) 
NIL 
NIL 
(-111) 
((|constructor| (NIL "This domain represents the unnamed category defined \\indented{2}{by a list of exported signatures}")) (|body| (((|List| (|SpadAst|)) $) "\\spad{body(c)} returns the list of exports in category syntax `c'.")) (|kind| (((|ConstructorKind|) $) "\\spad{kind(c)} returns the kind of unnamed category,{} either 'domain' or 'package'."))) 
NIL 
NIL 
(-112) 
((|constructor| (NIL "This domain provides representations for category constructors."))) 
NIL 
NIL 
(-113) 
((|parents| (((|List| (|ConstructorCall| (|CategoryConstructor|))) $) "\\spad{parents(c)} returns the list of all category forms directly extended by the category `c'.")) (|principalAncestors| (((|List| (|ConstructorCall| (|CategoryConstructor|))) $) "\\spad{principalAncestors(c)} returns the list of all category forms that are principal ancestors of the the category `c'.")) (|exportedOperators| (((|List| (|OperatorSignature|)) $) "\\spad{exportedOperators(c)} returns the list of all operator signatures exported by the category `c',{} along with their predicates.")) (|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Create: December 20,{} 2008. Date Last Updated: February 16,{} 2008. Basic Operations: coerce Related Constructors: Also See: Type") (((|CategoryConstructor|) $) "\\spad{constructor(c)} returns the category constructor used to instantiate the category object `c'."))) 
NIL 
NIL 
(-114) 
((|constructor| (NIL "This domain allows classes of characters to be defined and manipulated efficiently.")) (|alphanumeric| (($) "\\spad{alphanumeric()} returns the class of all characters for which \\spadfunFrom{alphanumeric?}{Character} is \\spad{true}.")) (|alphabetic| (($) "\\spad{alphabetic()} returns the class of all characters for which \\spadfunFrom{alphabetic?}{Character} is \\spad{true}.")) (|lowerCase| (($) "\\spad{lowerCase()} returns the class of all characters for which \\spadfunFrom{lowerCase?}{Character} is \\spad{true}.")) (|upperCase| (($) "\\spad{upperCase()} returns the class of all characters for which \\spadfunFrom{upperCase?}{Character} is \\spad{true}.")) (|hexDigit| (($) "\\spad{hexDigit()} returns the class of all characters for which \\spadfunFrom{hexDigit?}{Character} is \\spad{true}.")) (|digit| (($) "\\spad{digit()} returns the class of all characters for which \\spadfunFrom{digit?}{Character} is \\spad{true}.")) (|charClass| (($ (|List| (|Character|))) "\\spad{charClass(l)} creates a character class which contains exactly the characters given in the list \\spad{l}.") (($ (|String|)) "\\spad{charClass(s)} creates a character class which contains exactly the characters given in the string \\spad{s}."))) 
((-3994 . T) (-3984 . T) (-3995 . T)) 
((OR (-12 (|HasCategory| (-117) (QUOTE (-260 (-117)))) (|HasCategory| (-117) (QUOTE (-319)))) (-12 (|HasCategory| (-117) (QUOTE (-260 (-117)))) (|HasCategory| (-117) (QUOTE (-1013))))) (|HasCategory| (-117) (QUOTE (-553 (-473)))) (|HasCategory| (-117) (QUOTE (-319))) (|HasCategory| (-117) (QUOTE (-756))) (|HasCategory| (-117) (QUOTE (-1013))) (|HasCategory| (-117) (QUOTE (-552 (-772)))) (|HasCategory| (-117) (QUOTE (-72))) (-12 (|HasCategory| (-117) (QUOTE (-260 (-117)))) (|HasCategory| (-117) (QUOTE (-1013))))) 
(-115 R Q A) 
((|constructor| (NIL "CommonDenominator provides functions to compute the common denominator of a finite linear aggregate of elements of the quotient field of an integral domain.")) (|splitDenominator| (((|Record| (|:| |num| |#3|) (|:| |den| |#1|)) |#3|) "\\spad{splitDenominator([q1,...,qn])} returns \\spad{[[p1,...,pn], d]} such that \\spad{qi = pi/d} and \\spad{d} is a common denominator for the \\spad{qi}'s.")) (|clearDenominator| ((|#3| |#3|) "\\spad{clearDenominator([q1,...,qn])} returns \\spad{[p1,...,pn]} such that \\spad{qi = pi/d} where \\spad{d} is a common denominator for the \\spad{qi}'s.")) (|commonDenominator| ((|#1| |#3|) "\\spad{commonDenominator([q1,...,qn])} returns a common denominator \\spad{d} for \\spad{q1},{}...,{}qn."))) 
NIL 
NIL 
(-116) 
((|constructor| (NIL "Category for the usual combinatorial functions.")) (|permutation| (($ $ $) "\\spad{permutation(n, m)} returns the number of permutations of \\spad{n} objects taken \\spad{m} at a time. Note: \\spad{permutation(n,m) = n!/(n-m)!}.")) (|factorial| (($ $) "\\spad{factorial(n)} computes the factorial of \\spad{n} (denoted in the literature by \\spad{n!}) Note: \\spad{n! = n (n-1)! when n > 0}; also,{} \\spad{0! = 1}.")) (|binomial| (($ $ $) "\\spad{binomial(n,r)} returns the \\spad{(n,r)} binomial coefficient (often denoted in the literature by \\spad{C(n,r)}). Note: \\spad{C(n,r) = n!/(r!(n-r)!)} where \\spad{n >= r >= 0}."))) 
NIL 
NIL 
(-117) 
((|constructor| (NIL "This domain provides the basic character data type.")) (|alphanumeric?| (((|Boolean|) $) "\\spad{alphanumeric?(c)} tests if \\spad{c} is either a letter or number,{} \\spadignore{i.e.} one of 0..9,{} a..\\spad{z} or A..\\spad{Z}.")) (|lowerCase?| (((|Boolean|) $) "\\spad{lowerCase?(c)} tests if \\spad{c} is an lower case letter,{} \\spadignore{i.e.} one of a..\\spad{z}.")) (|upperCase?| (((|Boolean|) $) "\\spad{upperCase?(c)} tests if \\spad{c} is an upper case letter,{} \\spadignore{i.e.} one of A..\\spad{Z}.")) (|alphabetic?| (((|Boolean|) $) "\\spad{alphabetic?(c)} tests if \\spad{c} is a letter,{} \\spadignore{i.e.} one of a..\\spad{z} or A..\\spad{Z}.")) (|hexDigit?| (((|Boolean|) $) "\\spad{hexDigit?(c)} tests if \\spad{c} is a hexadecimal numeral,{} \\spadignore{i.e.} one of 0..9,{} a..\\spad{f} or A..\\spad{F}.")) (|digit?| (((|Boolean|) $) "\\spad{digit?(c)} tests if \\spad{c} is a digit character,{} \\spadignore{i.e.} one of 0..9.")) (|lowerCase| (($ $) "\\spad{lowerCase(c)} converts an upper case letter to the corresponding lower case letter. If \\spad{c} is not an upper case letter,{} then it is returned unchanged.")) (|upperCase| (($ $) "\\spad{upperCase(c)} converts a lower case letter to the corresponding upper case letter. If \\spad{c} is not a lower case letter,{} then it is returned unchanged.")) (|escape| (($) "\\spad{escape} designate the escape character.")) (|verticalTab| (($) "\\spad{verticalTab} designates vertical tab.")) (|horizontalTab| (($) "\\spad{horizontalTab} designates horizontal tab.")) (|backspace| (($) "\\spad{backspace} designates the backspace character.")) (|formfeed| (($) "\\spad{formfeed} designates the form feed character.")) (|linefeed| (($) "\\spad{linefeed} designates the line feed character.")) (|carriageReturn| (($) "\\spad{carriageReturn} designates carriage return.")) (|newline| (($) "\\spad{newline} designates the new line character.")) (|underscore| (($) "\\spad{underscore} designates the underbar character.")) (|quote| (($) "\\spad{quote} provides the string quote character,{} \\spad{\"}.")) (|space| (($) "\\spad{space} provides the blank character.")) (|char| (($ (|String|)) "\\spad{char(s)} provides a character from a string \\spad{s} of length one.") (($ (|NonNegativeInteger|)) "\\spad{char(i)} provides a character corresponding to the integer code \\spad{i}.	It is always \\spad{true} that \\spad{ord char i = i}.")) (|ord| (((|NonNegativeInteger|) $) "\\spad{ord(c)} provides an integral code corresponding to the character \\spad{c}. It is always \\spad{true} that \\spad{char ord c = c}."))) 
NIL 
NIL 
(-118) 
((|constructor| (NIL "Rings of Characteristic Non Zero")) (|charthRoot| (((|Maybe| $) $) "\\spad{charthRoot(x)} returns the \\spad{p}th root of \\spad{x} where \\spad{p} is the characteristic of the ring."))) 
((-3991 . T)) 
NIL 
(-119 R) 
((|constructor| (NIL "This package provides a characteristicPolynomial function for any matrix over a commutative ring.")) (|characteristicPolynomial| ((|#1| (|Matrix| |#1|) |#1|) "\\spad{characteristicPolynomial(m,r)} computes the characteristic polynomial of the matrix \\spad{m} evaluated at the point \\spad{r}. In particular,{} if \\spad{r} is the polynomial 'x,{} then it returns the characteristic polynomial expressed as a polynomial in 'x."))) 
NIL 
NIL 
(-120) 
((|constructor| (NIL "Rings of Characteristic Zero."))) 
((-3991 . T)) 
NIL 
(-121 -3092 UP UPUP) 
((|constructor| (NIL "Tools to send a point to infinity on an algebraic curve.")) (|chvar| (((|Record| (|:| |func| |#3|) (|:| |poly| |#3|) (|:| |c1| (|Fraction| |#2|)) (|:| |c2| (|Fraction| |#2|)) (|:| |deg| (|NonNegativeInteger|))) |#3| |#3|) "\\spad{chvar(f(x,y), p(x,y))} returns \\spad{[g(z,t), q(z,t), c1(z), c2(z), n]} such that under the change of variable \\spad{x = c1(z)},{} \\spad{y = t * c2(z)},{} one gets \\spad{f(x,y) = g(z,t)}. The algebraic relation between \\spad{x} and \\spad{y} is \\spad{p(x, y) = 0}. The algebraic relation between \\spad{z} and \\spad{t} is \\spad{q(z, t) = 0}.")) (|eval| ((|#3| |#3| (|Fraction| |#2|) (|Fraction| |#2|)) "\\spad{eval(p(x,y), f(x), g(x))} returns \\spad{p(f(x), y * g(x))}.")) (|goodPoint| ((|#1| |#3| |#3|) "\\spad{goodPoint(p, q)} returns an integer a such that a is neither a pole of \\spad{p(x,y)} nor a branch point of \\spad{q(x,y) = 0}.")) (|rootPoly| (((|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |coef| (|Fraction| |#2|)) (|:| |radicand| |#2|)) (|Fraction| |#2|) (|NonNegativeInteger|)) "\\spad{rootPoly(g, n)} returns \\spad{[m, c, P]} such that \\spad{c * g ** (1/n) = P ** (1/m)} thus if \\spad{y**n = g},{} then \\spad{z**m = P} where \\spad{z = c * y}.")) (|radPoly| (((|Union| (|Record| (|:| |radicand| (|Fraction| |#2|)) (|:| |deg| (|NonNegativeInteger|))) "failed") |#3|) "\\spad{radPoly(p(x, y))} returns \\spad{[c(x), n]} if \\spad{p} is of the form \\spad{y**n - c(x)},{} \"failed\" otherwise.")) (|mkIntegral| (((|Record| (|:| |coef| (|Fraction| |#2|)) (|:| |poly| |#3|)) |#3|) "\\spad{mkIntegral(p(x,y))} returns \\spad{[c(x), q(x,z)]} such that \\spad{z = c * y} is integral. The algebraic relation between \\spad{x} and \\spad{y} is \\spad{p(x, y) = 0}. The algebraic relation between \\spad{x} and \\spad{z} is \\spad{q(x, z) = 0}."))) 
NIL 
NIL 
(-122 R CR) 
((|constructor| (NIL "This package provides the generalized euclidean algorithm which is needed as the basic step for factoring polynomials.")) (|solveLinearPolynomialEquation| (((|Union| (|List| (|SparseUnivariatePolynomial| |#2|)) "failed") (|List| (|SparseUnivariatePolynomial| |#2|)) (|SparseUnivariatePolynomial| |#2|)) "\\spad{solveLinearPolynomialEquation([f1, ..., fn], g)} where (\\spad{fi} relatively prime to each other) returns a list of \\spad{ai} such that \\spad{g} = sum \\spad{ai} prod fj (\\spad{j} \\= \\spad{i}) or equivalently g/prod fj = sum (ai/fi) or returns \"failed\" if no such list exists"))) 
NIL 
NIL 
(-123 A S) 
((|constructor| (NIL "A collection is a homogeneous aggregate which can built from list of members. The operation used to build the aggregate is generically named \\spadfun{construct}. However,{} each collection provides its own special function with the same name as the data type,{} except with an initial lower case letter,{} \\spadignore{e.g.} \\spadfun{list} for \\spadtype{List},{} \\spadfun{flexibleArray} for \\spadtype{FlexibleArray},{} and so on.")) (|removeDuplicates| (($ $) "\\spad{removeDuplicates(u)} returns a copy of \\spad{u} with all duplicates removed.")) (|select| (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{select(p,u)} returns a copy of \\spad{u} containing only those elements such \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}. Note: \\axiom{select(\\spad{p},{}\\spad{u}) == [\\spad{x} for \\spad{x} in \\spad{u} | \\spad{p}(\\spad{x})]}.")) (|remove| (($ |#2| $) "\\spad{remove(x,u)} returns a copy of \\spad{u} with all elements \\axiom{\\spad{y} = \\spad{x}} removed. Note: \\axiom{remove(\\spad{y},{}\\spad{c}) == [\\spad{x} for \\spad{x} in \\spad{c} | \\spad{x} ~= \\spad{y}]}.") (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{remove(p,u)} returns a copy of \\spad{u} removing all elements \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}. Note: \\axiom{remove(\\spad{p},{}\\spad{u}) == [\\spad{x} for \\spad{x} in \\spad{u} | not \\spad{p}(\\spad{x})]}.")) (|reduce| ((|#2| (|Mapping| |#2| |#2| |#2|) $ |#2| |#2|) "\\spad{reduce(f,u,x,z)} reduces the binary operation \\spad{f} across \\spad{u},{} stopping when an \"absorbing element\" \\spad{z} is encountered. As for \\axiom{reduce(\\spad{f},{}\\spad{u},{}\\spad{x})},{} \\spad{x} is the identity operation of \\spad{f}. Same as \\axiom{reduce(\\spad{f},{}\\spad{u},{}\\spad{x})} when \\spad{u} contains no element \\spad{z}. Thus the third argument \\spad{x} is returned when \\spad{u} is empty.") ((|#2| (|Mapping| |#2| |#2| |#2|) $ |#2|) "\\spad{reduce(f,u,x)} reduces the binary operation \\spad{f} across \\spad{u},{} where \\spad{x} is the identity operation of \\spad{f}. Same as \\axiom{reduce(\\spad{f},{}\\spad{u})} if \\spad{u} has 2 or more elements. Returns \\axiom{\\spad{f}(\\spad{x},{}\\spad{y})} if \\spad{u} has one element \\spad{y},{} \\spad{x} if \\spad{u} is empty. For example,{} \\axiom{reduce(+,{}\\spad{u},{}0)} returns the sum of the elements of \\spad{u}.") ((|#2| (|Mapping| |#2| |#2| |#2|) $) "\\spad{reduce(f,u)} reduces the binary operation \\spad{f} across \\spad{u}. For example,{} if \\spad{u} is \\axiom{[\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]} then \\axiom{reduce(\\spad{f},{}\\spad{u})} returns \\axiom{\\spad{f}(..\\spad{f}(\\spad{f}(\\spad{x},{}\\spad{y}),{}...),{}\\spad{z})}. Note: if \\spad{u} has one element \\spad{x},{} \\axiom{reduce(\\spad{f},{}\\spad{u})} returns \\spad{x}. Error: if \\spad{u} is empty.")) (|find| (((|Union| |#2| "failed") (|Mapping| (|Boolean|) |#2|) $) "\\spad{find(p,u)} returns the first \\spad{x} in \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true},{} and \"failed\" otherwise.")) (|construct| (($ (|List| |#2|)) "\\axiom{construct(\\spad{x},{}\\spad{y},{}...,{}\\spad{z})} returns the collection of elements \\axiom{\\spad{x},{}\\spad{y},{}...,{}\\spad{z}} ordered as given. Equivalently written as \\axiom{[\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]\\$\\spad{D}},{} where \\spad{D} is the domain. \\spad{D} may be omitted for those of type List."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasAttribute| |#1| (QUOTE -3994))) 
(-124 S) 
((|constructor| (NIL "A collection is a homogeneous aggregate which can built from list of members. The operation used to build the aggregate is generically named \\spadfun{construct}. However,{} each collection provides its own special function with the same name as the data type,{} except with an initial lower case letter,{} \\spadignore{e.g.} \\spadfun{list} for \\spadtype{List},{} \\spadfun{flexibleArray} for \\spadtype{FlexibleArray},{} and so on.")) (|removeDuplicates| (($ $) "\\spad{removeDuplicates(u)} returns a copy of \\spad{u} with all duplicates removed.")) (|select| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{select(p,u)} returns a copy of \\spad{u} containing only those elements such \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}. Note: \\axiom{select(\\spad{p},{}\\spad{u}) == [\\spad{x} for \\spad{x} in \\spad{u} | \\spad{p}(\\spad{x})]}.")) (|remove| (($ |#1| $) "\\spad{remove(x,u)} returns a copy of \\spad{u} with all elements \\axiom{\\spad{y} = \\spad{x}} removed. Note: \\axiom{remove(\\spad{y},{}\\spad{c}) == [\\spad{x} for \\spad{x} in \\spad{c} | \\spad{x} ~= \\spad{y}]}.") (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{remove(p,u)} returns a copy of \\spad{u} removing all elements \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}. Note: \\axiom{remove(\\spad{p},{}\\spad{u}) == [\\spad{x} for \\spad{x} in \\spad{u} | not \\spad{p}(\\spad{x})]}.")) (|reduce| ((|#1| (|Mapping| |#1| |#1| |#1|) $ |#1| |#1|) "\\spad{reduce(f,u,x,z)} reduces the binary operation \\spad{f} across \\spad{u},{} stopping when an \"absorbing element\" \\spad{z} is encountered. As for \\axiom{reduce(\\spad{f},{}\\spad{u},{}\\spad{x})},{} \\spad{x} is the identity operation of \\spad{f}. Same as \\axiom{reduce(\\spad{f},{}\\spad{u},{}\\spad{x})} when \\spad{u} contains no element \\spad{z}. Thus the third argument \\spad{x} is returned when \\spad{u} is empty.") ((|#1| (|Mapping| |#1| |#1| |#1|) $ |#1|) "\\spad{reduce(f,u,x)} reduces the binary operation \\spad{f} across \\spad{u},{} where \\spad{x} is the identity operation of \\spad{f}. Same as \\axiom{reduce(\\spad{f},{}\\spad{u})} if \\spad{u} has 2 or more elements. Returns \\axiom{\\spad{f}(\\spad{x},{}\\spad{y})} if \\spad{u} has one element \\spad{y},{} \\spad{x} if \\spad{u} is empty. For example,{} \\axiom{reduce(+,{}\\spad{u},{}0)} returns the sum of the elements of \\spad{u}.") ((|#1| (|Mapping| |#1| |#1| |#1|) $) "\\spad{reduce(f,u)} reduces the binary operation \\spad{f} across \\spad{u}. For example,{} if \\spad{u} is \\axiom{[\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]} then \\axiom{reduce(\\spad{f},{}\\spad{u})} returns \\axiom{\\spad{f}(..\\spad{f}(\\spad{f}(\\spad{x},{}\\spad{y}),{}...),{}\\spad{z})}. Note: if \\spad{u} has one element \\spad{x},{} \\axiom{reduce(\\spad{f},{}\\spad{u})} returns \\spad{x}. Error: if \\spad{u} is empty.")) (|find| (((|Union| |#1| "failed") (|Mapping| (|Boolean|) |#1|) $) "\\spad{find(p,u)} returns the first \\spad{x} in \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true},{} and \"failed\" otherwise.")) (|construct| (($ (|List| |#1|)) "\\axiom{construct(\\spad{x},{}\\spad{y},{}...,{}\\spad{z})} returns the collection of elements \\axiom{\\spad{x},{}\\spad{y},{}...,{}\\spad{z}} ordered as given. Equivalently written as \\axiom{[\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]\\$\\spad{D}},{} where \\spad{D} is the domain. \\spad{D} may be omitted for those of type List."))) 
NIL 
NIL 
(-125 |n| K Q) 
((|constructor| (NIL "CliffordAlgebra(\\spad{n},{} \\spad{K},{} \\spad{Q}) defines a vector space of dimension \\spad{2**n} over \\spad{K},{} given a quadratic form \\spad{Q} on \\spad{K**n}. \\blankline If \\spad{e[i]},{} \\spad{1<=i<=n} is a basis for \\spad{K**n} then \\indented{3}{1,{} \\spad{e[i]} (\\spad{1<=i<=n}),{} \\spad{e[i1]*e[i2]}} (\\spad{1<=i1<i2<=n}),{}...,{}\\spad{e[1]*e[2]*..*e[n]} is a basis for the Clifford Algebra. \\blankline The algebra is defined by the relations \\indented{3}{\\spad{e[i]*e[j] = -e[j]*e[i]}\\space{2}(\\spad{i \\~~= j}),{}} \\indented{3}{\\spad{e[i]*e[i] = Q(e[i])}} \\blankline Examples of Clifford Algebras are: gaussians,{} quaternions,{} exterior algebras and spin algebras.")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(x)} computes the multiplicative inverse of \\spad{x} or \"failed\" if \\spad{x} is not invertible.")) (|coefficient| ((|#2| $ (|List| (|PositiveInteger|))) "\\spad{coefficient(x,[i1,i2,...,iN])} extracts the coefficient of \\spad{e(i1)*e(i2)*...*e(iN)} in \\spad{x}.")) (|monomial| (($ |#2| (|List| (|PositiveInteger|))) "\\spad{monomial(c,[i1,i2,...,iN])} produces the value given by \\spad{c*e(i1)*e(i2)*...*e(iN)}.")) (|e| (($ (|PositiveInteger|)) "\\spad{e(n)} produces the appropriate unit element."))) 
((-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-126) 
((|constructor| (NIL "\\indented{1}{The purpose of this package is to provide reasonable plots of} functions with singularities.")) (|clipWithRanges| (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|List| (|List| (|Point| (|DoubleFloat|)))) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{clipWithRanges(pointLists,xMin,xMax,yMin,yMax)} performs clipping on a list of lists of points,{} \\spad{pointLists}. Clipping is done within the specified ranges of \\spad{xMin},{} \\spad{xMax} and \\spad{yMin},{} \\spad{yMax}. This function is used internally by the \\fakeAxiomFun{iClipParametric} subroutine in this package.")) (|clipParametric| (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|Plot|) (|Fraction| (|Integer|)) (|Fraction| (|Integer|))) "\\spad{clipParametric(p,frac,sc)} performs two-dimensional clipping on a plot,{} \\spad{p},{} from the domain \\spadtype{Plot} for the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)}; the fraction parameter is specified by \\spad{frac} and the scale parameter is specified by \\spad{sc} for use in the \\fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.") (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|Plot|)) "\\spad{clipParametric(p)} performs two-dimensional clipping on a plot,{} \\spad{p},{} from the domain \\spadtype{Plot} for the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)}; the default parameters \\spad{1/2} for the fraction and \\spad{5/1} for the scale are used in the \\fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.")) (|clip| (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|List| (|List| (|Point| (|DoubleFloat|))))) "\\spad{clip(ll)} performs two-dimensional clipping on a list of lists of points,{} \\spad{ll}; the default parameters \\spad{1/2} for the fraction and \\spad{5/1} for the scale are used in the \\fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.") (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|List| (|Point| (|DoubleFloat|)))) "\\spad{clip(l)} performs two-dimensional clipping on a curve \\spad{l},{} which is a list of points; the default parameters \\spad{1/2} for the fraction and \\spad{5/1} for the scale are used in the \\fakeAxiomFun{iClipParametric} subroutine,{} which is called by this function.") (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|Plot|) (|Fraction| (|Integer|)) (|Fraction| (|Integer|))) "\\spad{clip(p,frac,sc)} performs two-dimensional clipping on a plot,{} \\spad{p},{} from the domain \\spadtype{Plot} for the graph of one variable \\spad{y = f(x)}; the fraction parameter is specified by \\spad{frac} and the scale parameter is specified by \\spad{sc} for use in the \\spadfun{clip} function.") (((|Record| (|:| |brans| (|List| (|List| (|Point| (|DoubleFloat|))))) (|:| |xValues| (|Segment| (|DoubleFloat|))) (|:| |yValues| (|Segment| (|DoubleFloat|)))) (|Plot|)) "\\spad{clip(p)} performs two-dimensional clipping on a plot,{} \\spad{p},{} from the domain \\spadtype{Plot} for the graph of one variable,{} \\spad{y = f(x)}; the default parameters \\spad{1/4} for the fraction and \\spad{5/1} for the scale are used in the \\spadfun{clip} function."))) 
NIL 
NIL 
(-127) 
((|constructor| (NIL "This domain represents list comprehension syntax.")) (|body| (((|SpadAst|) $) "\\spad{body(e)} return the expression being collected by the list comprehension `e'.")) (|iterators| (((|List| (|SpadAst|)) $) "\\spad{iterators(e)} returns the list of the iterators of the list comprehension `e'."))) 
NIL 
NIL 
(-128 UP |Par|) 
((|complexZeros| (((|List| (|Complex| |#2|)) |#1| |#2|) "\\spad{complexZeros(poly, eps)} finds the complex zeros of the univariate polynomial \\spad{poly} to precision eps with solutions returned as complex floats or rationals depending on the type of eps."))) 
NIL 
NIL 
(-129) 
((|constructor| (NIL "This domain represents type specification \\indented{2}{for an identifier or expression.}")) (|rhs| (((|TypeAst|) $) "\\spad{rhs(e)} returns the right hand side of the colon expression `e'.")) (|lhs| (((|SpadAst|) $) "\\spad{lhs(e)} returns the left hand side of the colon expression `e'."))) 
NIL 
NIL 
(-130) 
((|constructor| (NIL "Color() specifies a domain of 27 colors provided in the \\Language{} system (the colors mix additively).")) (|color| (($ (|Integer|)) "\\spad{color(i)} returns a color of the indicated hue \\spad{i}.")) (|numberOfHues| (((|PositiveInteger|)) "\\spad{numberOfHues()} returns the number of total hues,{} set in totalHues.")) (|hue| (((|Integer|) $) "\\spad{hue(c)} returns the hue index of the indicated color \\spad{c}.")) (|blue| (($) "\\spad{blue()} returns the position of the blue hue from total hues.")) (|green| (($) "\\spad{green()} returns the position of the green hue from total hues.")) (|yellow| (($) "\\spad{yellow()} returns the position of the yellow hue from total hues.")) (|red| (($) "\\spad{red()} returns the position of the red hue from total hues.")) (+ (($ $ $) "\\spad{c1 + c2} additively mixes the two colors \\spad{c1} and \\spad{c2}.")) (* (($ (|DoubleFloat|) $) "\\spad{s * c},{} returns the color \\spad{c},{} whose weighted shade has been scaled by \\spad{s}.") (($ (|PositiveInteger|) $) "\\spad{s * c},{} returns the color \\spad{c},{} whose weighted shade has been scaled by \\spad{s}."))) 
NIL 
NIL 
(-131 R -3092) 
((|constructor| (NIL "Provides combinatorial functions over an integral domain.")) (|ipow| ((|#2| (|List| |#2|)) "\\spad{ipow(l)} should be local but conditional.")) (|iidprod| ((|#2| (|List| |#2|)) "\\spad{iidprod(l)} should be local but conditional.")) (|iidsum| ((|#2| (|List| |#2|)) "\\spad{iidsum(l)} should be local but conditional.")) (|iipow| ((|#2| (|List| |#2|)) "\\spad{iipow(l)} should be local but conditional.")) (|iiperm| ((|#2| (|List| |#2|)) "\\spad{iiperm(l)} should be local but conditional.")) (|iibinom| ((|#2| (|List| |#2|)) "\\spad{iibinom(l)} should be local but conditional.")) (|iifact| ((|#2| |#2|) "\\spad{iifact(x)} should be local but conditional.")) (|product| ((|#2| |#2| (|SegmentBinding| |#2|)) "\\spad{product(f(n), n = a..b)} returns \\spad{f}(a) * ... * \\spad{f}(\\spad{b}) as a formal product.") ((|#2| |#2| (|Symbol|)) "\\spad{product(f(n), n)} returns the formal product \\spad{P}(\\spad{n}) which verifies \\spad{P}(\\spad{n+1})/P(\\spad{n}) = \\spad{f}(\\spad{n}).")) (|summation| ((|#2| |#2| (|SegmentBinding| |#2|)) "\\spad{summation(f(n), n = a..b)} returns \\spad{f}(a) + ... + \\spad{f}(\\spad{b}) as a formal sum.") ((|#2| |#2| (|Symbol|)) "\\spad{summation(f(n), n)} returns the formal sum \\spad{S}(\\spad{n}) which verifies \\spad{S}(\\spad{n+1}) - \\spad{S}(\\spad{n}) = \\spad{f}(\\spad{n}).")) (|factorials| ((|#2| |#2| (|Symbol|)) "\\spad{factorials(f, x)} rewrites the permutations and binomials in \\spad{f} involving \\spad{x} in terms of factorials.") ((|#2| |#2|) "\\spad{factorials(f)} rewrites the permutations and binomials in \\spad{f} in terms of factorials.")) (|factorial| ((|#2| |#2|) "\\spad{factorial(n)} returns the factorial of \\spad{n},{} \\spadignore{i.e.} n!.")) (|permutation| ((|#2| |#2| |#2|) "\\spad{permutation(n, r)} returns the number of permutations of \\spad{n} objects taken \\spad{r} at a time,{} \\spadignore{i.e.} n!/(\\spad{n}-\\spad{r})!.")) (|binomial| ((|#2| |#2| |#2|) "\\spad{binomial(n, r)} returns the number of subsets of \\spad{r} objects taken among \\spad{n} objects,{} \\spadignore{i.e.} n!/(r! * (\\spad{n}-\\spad{r})!).")) (** ((|#2| |#2| |#2|) "\\spad{a ** b} is the formal exponential a**b.")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(op)} returns a copy of \\spad{op} with the domain-dependent properties appropriate for \\spad{F}; error if \\spad{op} is not a combinatorial operator.")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(op)} is \\spad{true} if \\spad{op} is a combinatorial operator."))) 
NIL 
NIL 
(-132 I) 
((|stirling2| ((|#1| |#1| |#1|) "\\spad{stirling2(n,m)} returns the Stirling number of the second kind denoted \\spad{SS[n,m]}.")) (|stirling1| ((|#1| |#1| |#1|) "\\spad{stirling1(n,m)} returns the Stirling number of the first kind denoted \\spad{S[n,m]}.")) (|permutation| ((|#1| |#1| |#1|) "\\spad{permutation(n)} returns \\spad{!P(n,r) = n!/(n-r)!}. This is the number of permutations of \\spad{n} objects taken \\spad{r} at a time.")) (|partition| ((|#1| |#1|) "\\spad{partition(n)} returns the number of partitions of the integer \\spad{n}. This is the number of distinct ways that \\spad{n} can be written as a sum of positive integers.")) (|multinomial| ((|#1| |#1| (|List| |#1|)) "\\spad{multinomial(n,[m1,m2,...,mk])} returns the multinomial coefficient \\spad{n!/(m1! m2! ... mk!)}.")) (|factorial| ((|#1| |#1|) "\\spad{factorial(n)} returns \\spad{n!}. this is the product of all integers between 1 and \\spad{n} (inclusive). Note: \\spad{0!} is defined to be 1.")) (|binomial| ((|#1| |#1| |#1|) "\\spad{binomial(n,r)} returns the binomial coefficient \\spad{C(n,r) = n!/(r! (n-r)!)},{} where \\spad{n >= r >= 0}. This is the number of combinations of \\spad{n} objects taken \\spad{r} at a time."))) 
NIL 
NIL 
(-133) 
((|constructor| (NIL "CombinatorialOpsCategory is the category obtaining by adjoining summations and products to the usual combinatorial operations.")) (|product| (($ $ (|SegmentBinding| $)) "\\spad{product(f(n), n = a..b)} returns \\spad{f}(a) * ... * \\spad{f}(\\spad{b}) as a formal product.") (($ $ (|Symbol|)) "\\spad{product(f(n), n)} returns the formal product \\spad{P}(\\spad{n}) which verifies \\spad{P}(\\spad{n+1})/P(\\spad{n}) = \\spad{f}(\\spad{n}).")) (|summation| (($ $ (|SegmentBinding| $)) "\\spad{summation(f(n), n = a..b)} returns \\spad{f}(a) + ... + \\spad{f}(\\spad{b}) as a formal sum.") (($ $ (|Symbol|)) "\\spad{summation(f(n), n)} returns the formal sum \\spad{S}(\\spad{n}) which verifies \\spad{S}(\\spad{n+1}) - \\spad{S}(\\spad{n}) = \\spad{f}(\\spad{n}).")) (|factorials| (($ $ (|Symbol|)) "\\spad{factorials(f, x)} rewrites the permutations and binomials in \\spad{f} involving \\spad{x} in terms of factorials.") (($ $) "\\spad{factorials(f)} rewrites the permutations and binomials in \\spad{f} in terms of factorials."))) 
NIL 
NIL 
(-134) 
((|constructor| (NIL "A type for basic commutators")) (|mkcomm| (($ $ $) "\\spad{mkcomm(i,j)} \\undocumented{}") (($ (|Integer|)) "\\spad{mkcomm(i)} \\undocumented{}"))) 
NIL 
NIL 
(-135) 
((|constructor| (NIL "This domain represents the syntax of a comma-separated \\indented{2}{list of expressions.}")) (|body| (((|List| (|SpadAst|)) $) "\\spad{body(e)} returns the list of expressions making up `e'."))) 
NIL 
NIL 
(-136) 
((|constructor| (NIL "This package exports the elementary operators,{} with some semantics already attached to them. The semantics that is attached here is not dependent on the set in which the operators will be applied.")) (|operator| (((|BasicOperator|) (|Symbol|)) "\\spad{operator(s)} returns an operator with name \\spad{s},{} with the appropriate semantics if \\spad{s} is known. If \\spad{s} is not known,{} the result has no semantics."))) 
NIL 
NIL 
(-137 R UP UPUP) 
((|constructor| (NIL "A package for swapping the order of two variables in a tower of two UnivariatePolynomialCategory extensions.")) (|swap| ((|#3| |#3|) "\\spad{swap(p(x,y))} returns \\spad{p}(\\spad{y},{}\\spad{x})."))) 
NIL 
NIL 
(-138 S R) 
((|constructor| (NIL "This category represents the extension of a ring by a square root of \\spad{-1}.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(x)} returns \\spad{x} as a rational number,{} or \"failed\" if \\spad{x} is not a rational number.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(x)} returns \\spad{x} as a rational number. Error: if \\spad{x} is not a rational number.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(x)} tests if \\spad{x} is a rational number.")) (|polarCoordinates| (((|Record| (|:| |r| |#2|) (|:| |phi| |#2|)) $) "\\spad{polarCoordinates(x)} returns (\\spad{r},{} phi) such that \\spad{x} = \\spad{r} * exp(\\%\\spad{i} * phi).")) (|argument| ((|#2| $) "\\spad{argument(x)} returns the angle made by (0,{}1) and (0,{}\\spad{x}).")) (|abs| (($ $) "\\spad{abs(x)} returns the absolute value of \\spad{x} = sqrt(norm(\\spad{x})).")) (|exquo| (((|Union| $ "failed") $ |#2|) "\\spad{exquo(x, r)} returns the exact quotient of \\spad{x} by \\spad{r},{} or \"failed\" if \\spad{r} does not divide \\spad{x} exactly.")) (|norm| ((|#2| $) "\\spad{norm(x)} returns \\spad{x} * conjugate(\\spad{x})")) (|real| ((|#2| $) "\\spad{real(x)} returns real part of \\spad{x}.")) (|imag| ((|#2| $) "\\spad{imag(x)} returns imaginary part of \\spad{x}.")) (|conjugate| (($ $) "\\spad{conjugate(x + \\%i y)} returns \\spad{x} - \\%\\spad{i} \\spad{y}.")) (|imaginary| (($) "\\spad{imaginary()} = sqrt(\\spad{-1}) = \\%\\spad{i}.")) (|complex| (($ |#2| |#2|) "\\spad{complex(x,y)} constructs \\spad{x} + \\%i*y.") ((|attribute|) "indicates that \\% has sqrt(\\spad{-1})"))) 
NIL 
((|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| |#2| (QUOTE (-483))) (|HasCategory| |#2| (QUOTE (-915))) (|HasCategory| |#2| (QUOTE (-1114))) (|HasCategory| |#2| (QUOTE (-973))) (|HasCategory| |#2| (QUOTE (-933))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-312))) (|HasAttribute| |#2| (QUOTE -3990)) (|HasAttribute| |#2| (QUOTE -3993)) (|HasCategory| |#2| (QUOTE (-258))) (|HasCategory| |#2| (QUOTE (-495)))) 
(-139 R) 
((|constructor| (NIL "This category represents the extension of a ring by a square root of \\spad{-1}.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(x)} returns \\spad{x} as a rational number,{} or \"failed\" if \\spad{x} is not a rational number.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(x)} returns \\spad{x} as a rational number. Error: if \\spad{x} is not a rational number.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(x)} tests if \\spad{x} is a rational number.")) (|polarCoordinates| (((|Record| (|:| |r| |#1|) (|:| |phi| |#1|)) $) "\\spad{polarCoordinates(x)} returns (\\spad{r},{} phi) such that \\spad{x} = \\spad{r} * exp(\\%\\spad{i} * phi).")) (|argument| ((|#1| $) "\\spad{argument(x)} returns the angle made by (0,{}1) and (0,{}\\spad{x}).")) (|abs| (($ $) "\\spad{abs(x)} returns the absolute value of \\spad{x} = sqrt(norm(\\spad{x})).")) (|exquo| (((|Union| $ "failed") $ |#1|) "\\spad{exquo(x, r)} returns the exact quotient of \\spad{x} by \\spad{r},{} or \"failed\" if \\spad{r} does not divide \\spad{x} exactly.")) (|norm| ((|#1| $) "\\spad{norm(x)} returns \\spad{x} * conjugate(\\spad{x})")) (|real| ((|#1| $) "\\spad{real(x)} returns real part of \\spad{x}.")) (|imag| ((|#1| $) "\\spad{imag(x)} returns imaginary part of \\spad{x}.")) (|conjugate| (($ $) "\\spad{conjugate(x + \\%i y)} returns \\spad{x} - \\%\\spad{i} \\spad{y}.")) (|imaginary| (($) "\\spad{imaginary()} = sqrt(\\spad{-1}) = \\%\\spad{i}.")) (|complex| (($ |#1| |#1|) "\\spad{complex(x,y)} constructs \\spad{x} + \\%i*y.") ((|attribute|) "indicates that \\% has sqrt(\\spad{-1})"))) 
((-3987 OR (|has| |#1| (-495)) (-12 (|has| |#1| (-258)) (|has| |#1| (-821)))) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3990 |has| |#1| (-6 -3990)) (-3993 |has| |#1| (-6 -3993)) (-1375 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-140 RR PR) 
((|constructor| (NIL "\\indented{1}{Author:} Date Created: Date Last Updated: Basic Functions: Related Constructors: Complex,{} UnivariatePolynomial Also See: AMS Classifications: Keywords: complex,{} polynomial factorization,{} factor References:")) (|factor| (((|Factored| |#2|) |#2|) "\\spad{factor(p)} factorizes the polynomial \\spad{p} with complex coefficients."))) 
NIL 
NIL 
(-141) 
((|constructor| (NIL "This package implements a Spad compiler.")) (|elaborate| (((|Maybe| (|Elaboration|)) (|SpadAst|)) "\\spad{elaborate(s)} returns the elaboration of the syntax object \\spad{s} in the empty environement.")) (|macroExpand| (((|SpadAst|) (|SpadAst|) (|Environment|)) "\\spad{macroExpand(s,e)} traverses the syntax object \\spad{s} replacing all (niladic) macro invokations with the corresponding substitution."))) 
NIL 
NIL 
(-142 R) 
((|constructor| (NIL "\\spadtype {Complex(R)} creates the domain of elements of the form \\spad{a + b * i} where \\spad{a} and \\spad{b} come from the ring \\spad{R},{} and \\spad{i} is a new element such that \\spad{i**2 = -1}."))) 
((-3987 OR (|has| |#1| (-495)) (-12 (|has| |#1| (-258)) (|has| |#1| (-821)))) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3990 |has| |#1| (-6 -3990)) (-3993 |has| |#1| (-6 -3993)) (-1375 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-299))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-299)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-319))) (OR (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-299)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-299)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089))))) (|HasCategory| |#1| (QUOTE (-811 (-1089))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-299))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-312)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-299))) (|HasCategory| |#1| (QUOTE (-821))))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-915))) (|HasCategory| |#1| (QUOTE (-1114)))) (|HasCategory| |#1| (QUOTE (-1114))) (|HasCategory| |#1| (QUOTE (-933))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-299))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-299)))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#1| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -241) (|devaluate| |#1|) (|devaluate| |#1|))) (|HasCategory| |#1| (QUOTE (-973))) (-12 (|HasCategory| |#1| (QUOTE (-973))) (|HasCategory| |#1| (QUOTE (-1114)))) (|HasCategory| |#1| (QUOTE (-483))) (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821))) (OR (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-312)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-189)))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-190))) (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasAttribute| |#1| (QUOTE -3990)) (|HasAttribute| |#1| (QUOTE -3993)) (-12 (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-312)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-312)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-299)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-143 R S) 
((|constructor| (NIL "This package extends maps from underlying rings to maps between complex over those rings.")) (|map| (((|Complex| |#2|) (|Mapping| |#2| |#1|) (|Complex| |#1|)) "\\spad{map(f,u)} maps \\spad{f} onto real and imaginary parts of \\spad{u}."))) 
NIL 
NIL 
(-144 R S CS) 
((|constructor| (NIL "This package supports converting complex expressions to patterns")) (|convert| (((|Pattern| |#1|) |#3|) "\\spad{convert(cs)} converts the complex expression \\spad{cs} to a pattern"))) 
NIL 
NIL 
(-145) 
((|constructor| (NIL "This domain implements some global properties of subspaces.")) (|copy| (($ $) "\\spad{copy(x)} \\undocumented")) (|solid| (((|Boolean|) $ (|Boolean|)) "\\spad{solid(x,b)} \\undocumented")) (|close| (((|Boolean|) $ (|Boolean|)) "\\spad{close(x,b)} \\undocumented")) (|solid?| (((|Boolean|) $) "\\spad{solid?(x)} \\undocumented")) (|closed?| (((|Boolean|) $) "\\spad{closed?(x)} \\undocumented")) (|new| (($) "\\spad{new()} \\undocumented"))) 
NIL 
NIL 
(-146) 
((|constructor| (NIL "The category of commutative rings with unity,{} \\spadignore{i.e.} rings where \\spadop{*} is commutative,{} and which have a multiplicative identity. element.")) (|commutative| ((|attribute| "*") "multiplication is commutative."))) 
(((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-147) 
((|constructor| (NIL "This category is the root of the I/O conduits.")) (|close!| (($ $) "\\spad{close!(c)} closes the conduit \\spad{c},{} changing its state to one that is invalid for future read or write operations."))) 
NIL 
NIL 
(-148 R) 
((|constructor| (NIL "\\spadtype{ContinuedFraction} implements general \\indented{1}{continued fractions.\\space{2}This version is not restricted to simple,{}} \\indented{1}{finite fractions and uses the \\spadtype{Stream} as a} \\indented{1}{representation.\\space{2}The arithmetic functions assume that the} \\indented{1}{approximants alternate below/above the convergence point.} \\indented{1}{This is enforced by ensuring the partial numerators and partial} \\indented{1}{denominators are greater than 0 in the Euclidean domain view of \\spad{R}} \\indented{1}{(\\spadignore{i.e.} \\spad{sizeLess?(0, x)}).}")) (|complete| (($ $) "\\spad{complete(x)} causes all entries in \\spadvar{\\spad{x}} to be computed. Normally entries are only computed as needed. If \\spadvar{\\spad{x}} is an infinite continued fraction,{} a user-initiated interrupt is necessary to stop the computation.")) (|extend| (($ $ (|Integer|)) "\\spad{extend(x,n)} causes the first \\spadvar{\\spad{n}} entries in the continued fraction \\spadvar{\\spad{x}} to be computed. Normally entries are only computed as needed.")) (|denominators| (((|Stream| |#1|) $) "\\spad{denominators(x)} returns the stream of denominators of the approximants of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be finite.")) (|numerators| (((|Stream| |#1|) $) "\\spad{numerators(x)} returns the stream of numerators of the approximants of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be finite.")) (|convergents| (((|Stream| (|Fraction| |#1|)) $) "\\spad{convergents(x)} returns the stream of the convergents of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be finite.")) (|approximants| (((|Stream| (|Fraction| |#1|)) $) "\\spad{approximants(x)} returns the stream of approximants of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be infinite and periodic with period 1.")) (|reducedForm| (($ $) "\\spad{reducedForm(x)} puts the continued fraction \\spadvar{\\spad{x}} in reduced form,{} \\spadignore{i.e.} the function returns an equivalent continued fraction of the form \\spad{continuedFraction(b0,[1,1,1,...],[b1,b2,b3,...])}.")) (|wholePart| ((|#1| $) "\\spad{wholePart(x)} extracts the whole part of \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0, [a1,a2,a3,...], [b1,b2,b3,...])},{} then \\spad{wholePart(x) = b0}.")) (|partialQuotients| (((|Stream| |#1|) $) "\\spad{partialQuotients(x)} extracts the partial quotients in \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0, [a1,a2,a3,...], [b1,b2,b3,...])},{} then \\spad{partialQuotients(x) = [b0,b1,b2,b3,...]}.")) (|partialDenominators| (((|Stream| |#1|) $) "\\spad{partialDenominators(x)} extracts the denominators in \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0, [a1,a2,a3,...], [b1,b2,b3,...])},{} then \\spad{partialDenominators(x) = [b1,b2,b3,...]}.")) (|partialNumerators| (((|Stream| |#1|) $) "\\spad{partialNumerators(x)} extracts the numerators in \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0, [a1,a2,a3,...], [b1,b2,b3,...])},{} then \\spad{partialNumerators(x) = [a1,a2,a3,...]}.")) (|reducedContinuedFraction| (($ |#1| (|Stream| |#1|)) "\\spad{reducedContinuedFraction(b0,b)} constructs a continued fraction in the following way: if \\spad{b = [b1,b2,...]} then the result is the continued fraction \\spad{b0 + 1/(b1 + 1/(b2 + ...))}. That is,{} the result is the same as \\spad{continuedFraction(b0,[1,1,1,...],[b1,b2,b3,...])}.")) (|continuedFraction| (($ |#1| (|Stream| |#1|) (|Stream| |#1|)) "\\spad{continuedFraction(b0,a,b)} constructs a continued fraction in the following way: if \\spad{a = [a1,a2,...]} and \\spad{b = [b1,b2,...]} then the result is the continued fraction \\spad{b0 + a1/(b1 + a2/(b2 + ...))}.") (($ (|Fraction| |#1|)) "\\spad{continuedFraction(r)} converts the fraction \\spadvar{\\spad{r}} with components of type \\spad{R} to a continued fraction over \\spad{R}."))) 
(((-3996 "*") . T) (-3987 . T) (-3992 . T) (-3986 . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-149) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: October 24,{} 2007 Date Last Modified: January 18,{} 2008. A `Contour' a list of bindings making up a `virtual scope'.")) (|findBinding| (((|Maybe| (|Binding|)) (|Identifier|) $) "\\spad{findBinding(c,n)} returns the first binding associated with `n'. Otherwise `nothing.")) (|push| (($ (|Binding|) $) "\\spad{push(c,b)} augments the contour with binding `b'.")) (|bindings| (((|List| (|Binding|)) $) "\\spad{bindings(c)} returns the list of bindings in countour \\spad{c}."))) 
NIL 
NIL 
(-150 R) 
((|constructor| (NIL "CoordinateSystems provides coordinate transformation functions for plotting. Functions in this package return conversion functions which take points expressed in other coordinate systems and return points with the corresponding Cartesian coordinates.")) (|conical| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1| |#1|) "\\spad{conical(a,b)} transforms from conical coordinates to Cartesian coordinates: \\spad{conical(a,b)} is a function which will map the point \\spad{(lambda,mu,nu)} to \\spad{x = lambda*mu*nu/(a*b)},{} \\spad{y = lambda/a*sqrt((mu**2-a**2)*(nu**2-a**2)/(a**2-b**2))},{} \\spad{z = lambda/b*sqrt((mu**2-b**2)*(nu**2-b**2)/(b**2-a**2))}.")) (|toroidal| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{toroidal(a)} transforms from toroidal coordinates to Cartesian coordinates: \\spad{toroidal(a)} is a function which will map the point \\spad{(u,v,phi)} to \\spad{x = a*sinh(v)*cos(phi)/(cosh(v)-cos(u))},{} \\spad{y = a*sinh(v)*sin(phi)/(cosh(v)-cos(u))},{} \\spad{z = a*sin(u)/(cosh(v)-cos(u))}.")) (|bipolarCylindrical| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{bipolarCylindrical(a)} transforms from bipolar cylindrical coordinates to Cartesian coordinates: \\spad{bipolarCylindrical(a)} is a function which will map the point \\spad{(u,v,z)} to \\spad{x = a*sinh(v)/(cosh(v)-cos(u))},{} \\spad{y = a*sin(u)/(cosh(v)-cos(u))},{} \\spad{z}.")) (|bipolar| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{bipolar(a)} transforms from bipolar coordinates to Cartesian coordinates: \\spad{bipolar(a)} is a function which will map the point \\spad{(u,v)} to \\spad{x = a*sinh(v)/(cosh(v)-cos(u))},{} \\spad{y = a*sin(u)/(cosh(v)-cos(u))}.")) (|oblateSpheroidal| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{oblateSpheroidal(a)} transforms from oblate spheroidal coordinates to Cartesian coordinates: \\spad{oblateSpheroidal(a)} is a function which will map the point \\spad{(xi,eta,phi)} to \\spad{x = a*sinh(xi)*sin(eta)*cos(phi)},{} \\spad{y = a*sinh(xi)*sin(eta)*sin(phi)},{} \\spad{z = a*cosh(xi)*cos(eta)}.")) (|prolateSpheroidal| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{prolateSpheroidal(a)} transforms from prolate spheroidal coordinates to Cartesian coordinates: \\spad{prolateSpheroidal(a)} is a function which will map the point \\spad{(xi,eta,phi)} to \\spad{x = a*sinh(xi)*sin(eta)*cos(phi)},{} \\spad{y = a*sinh(xi)*sin(eta)*sin(phi)},{} \\spad{z = a*cosh(xi)*cos(eta)}.")) (|ellipticCylindrical| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{ellipticCylindrical(a)} transforms from elliptic cylindrical coordinates to Cartesian coordinates: \\spad{ellipticCylindrical(a)} is a function which will map the point \\spad{(u,v,z)} to \\spad{x = a*cosh(u)*cos(v)},{} \\spad{y = a*sinh(u)*sin(v)},{} \\spad{z}.")) (|elliptic| (((|Mapping| (|Point| |#1|) (|Point| |#1|)) |#1|) "\\spad{elliptic(a)} transforms from elliptic coordinates to Cartesian coordinates: \\spad{elliptic(a)} is a function which will map the point \\spad{(u,v)} to \\spad{x = a*cosh(u)*cos(v)},{} \\spad{y = a*sinh(u)*sin(v)}.")) (|paraboloidal| (((|Point| |#1|) (|Point| |#1|)) "\\spad{paraboloidal(pt)} transforms \\spad{pt} from paraboloidal coordinates to Cartesian coordinates: the function produced will map the point \\spad{(u,v,phi)} to \\spad{x = u*v*cos(phi)},{} \\spad{y = u*v*sin(phi)},{} \\spad{z = 1/2 * (u**2 - v**2)}.")) (|parabolicCylindrical| (((|Point| |#1|) (|Point| |#1|)) "\\spad{parabolicCylindrical(pt)} transforms \\spad{pt} from parabolic cylindrical coordinates to Cartesian coordinates: the function produced will map the point \\spad{(u,v,z)} to \\spad{x = 1/2*(u**2 - v**2)},{} \\spad{y = u*v},{} \\spad{z}.")) (|parabolic| (((|Point| |#1|) (|Point| |#1|)) "\\spad{parabolic(pt)} transforms \\spad{pt} from parabolic coordinates to Cartesian coordinates: the function produced will map the point \\spad{(u,v)} to \\spad{x = 1/2*(u**2 - v**2)},{} \\spad{y = u*v}.")) (|spherical| (((|Point| |#1|) (|Point| |#1|)) "\\spad{spherical(pt)} transforms \\spad{pt} from spherical coordinates to Cartesian coordinates: the function produced will map the point \\spad{(r,theta,phi)} to \\spad{x = r*sin(phi)*cos(theta)},{} \\spad{y = r*sin(phi)*sin(theta)},{} \\spad{z = r*cos(phi)}.")) (|cylindrical| (((|Point| |#1|) (|Point| |#1|)) "\\spad{cylindrical(pt)} transforms \\spad{pt} from polar coordinates to Cartesian coordinates: the function produced will map the point \\spad{(r,theta,z)} to \\spad{x = r * cos(theta)},{} \\spad{y = r * sin(theta)},{} \\spad{z}.")) (|polar| (((|Point| |#1|) (|Point| |#1|)) "\\spad{polar(pt)} transforms \\spad{pt} from polar coordinates to Cartesian coordinates: the function produced will map the point \\spad{(r,theta)} to \\spad{x = r * cos(theta)} ,{} \\spad{y = r * sin(theta)}.")) (|cartesian| (((|Point| |#1|) (|Point| |#1|)) "\\spad{cartesian(pt)} returns the Cartesian coordinates of point \\spad{pt}."))) 
NIL 
NIL 
(-151 R |PolR| E) 
((|constructor| (NIL "This package implements characteristicPolynomials for monogenic algebras using resultants")) (|characteristicPolynomial| ((|#2| |#3|) "\\spad{characteristicPolynomial(e)} returns the characteristic polynomial of \\spad{e} using resultants"))) 
NIL 
NIL 
(-152 R S CS) 
((|constructor| (NIL "This package supports matching patterns involving complex expressions")) (|patternMatch| (((|PatternMatchResult| |#1| |#3|) |#3| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#3|)) "\\spad{patternMatch(cexpr, pat, res)} matches the pattern \\spad{pat} to the complex expression \\spad{cexpr}. res contains the variables of \\spad{pat} which are already matched and their matches."))) 
NIL 
((|HasCategory| (-857 |#2|) (|%list| (QUOTE -796) (|devaluate| |#1|)))) 
(-153 R) 
((|constructor| (NIL "This package \\undocumented{}")) (|multiEuclideanTree| (((|List| |#1|) (|List| |#1|) |#1|) "\\spad{multiEuclideanTree(l,r)} \\undocumented{}")) (|chineseRemainder| (((|List| |#1|) (|List| (|List| |#1|)) (|List| |#1|)) "\\spad{chineseRemainder(llv,lm)} returns a list of values,{} each of which corresponds to the Chinese remainder of the associated element of \\axiom{\\spad{llv}} and axiom{\\spad{lm}}. This is more efficient than applying chineseRemainder several times.") ((|#1| (|List| |#1|) (|List| |#1|)) "\\spad{chineseRemainder(lv,lm)} returns a value \\axiom{\\spad{v}} such that,{} if \\spad{x} is \\axiom{\\spad{lv}.\\spad{i}} modulo \\axiom{\\spad{lm}.\\spad{i}} for all \\axiom{\\spad{i}},{} then \\spad{x} is \\axiom{\\spad{v}} modulo \\axiom{\\spad{lm}(1)*lm(2)*...*lm(\\spad{n})}.")) (|modTree| (((|List| |#1|) |#1| (|List| |#1|)) "\\spad{modTree(r,l)} \\undocumented{}"))) 
NIL 
NIL 
(-154) 
((|constructor| (NIL "This domain represents `coerce' expressions.")) (|target| (((|TypeAst|) $) "\\spad{target(e)} returns the target type of the conversion..")) (|expression| (((|SpadAst|) $) "\\spad{expression(e)} returns the expression being converted."))) 
NIL 
NIL 
(-155 R UP) 
((|constructor| (NIL "\\spadtype{ComplexRootFindingPackage} provides functions to find all roots of a polynomial \\spad{p} over the complex number by using Plesken's idea to calculate in the polynomial ring modulo \\spad{f} and employing the Chinese Remainder Theorem. In this first version,{} the precision (see \\spadfunFrom{digits}{Float}) is not increased when this is necessary to avoid rounding errors. Hence it is the user's responsibility to increase the precision if necessary. Note also,{} if this package is called with \\spadignore{e.g.} \\spadtype{Fraction Integer},{} the precise calculations could require a lot of time. Also note that evaluating the zeros is not necessarily a good check whether the result is correct: already evaluation can cause rounding errors.")) (|startPolynomial| (((|Record| (|:| |start| |#2|) (|:| |factors| (|Factored| |#2|))) |#2|) "\\spad{startPolynomial(p)} uses the ideas of Schoenhage's variant of Graeffe's method to construct circles which separate roots to get a good start polynomial,{} \\spadignore{i.e.} one whose image under the Chinese Remainder Isomorphism has both entries of norm smaller and greater or equal to 1. In case the roots are found during internal calculations. The corresponding factors are in {\\em factors} which are otherwise 1.")) (|setErrorBound| ((|#1| |#1|) "\\spad{setErrorBound(eps)} changes the internal error bound,{} by default being {\\em 10 ** (-3)} to \\spad{eps},{} if \\spad{R} is a member in the category \\spadtype{QuotientFieldCategory Integer}. The internal {\\em globalDigits} is set to {\\em ceiling(1/r)**2*10} being {\\em 10**7} by default.")) (|schwerpunkt| (((|Complex| |#1|) |#2|) "\\spad{schwerpunkt(p)} determines the 'Schwerpunkt' of the roots of the polynomial \\spad{p} of degree \\spad{n},{} \\spadignore{i.e.} the center of gravity,{} which is {\\em coeffient of \\spad{x**(n-1)}} divided by {\\em n times coefficient of \\spad{x**n}}.")) (|rootRadius| ((|#1| |#2|) "\\spad{rootRadius(p)} calculates the root radius of \\spad{p} with a maximal error quotient of {\\em 1+globalEps},{} where {\\em globalEps} is the internal error bound,{} which can be set by {\\em setErrorBound}.") ((|#1| |#2| |#1|) "\\spad{rootRadius(p,errQuot)} calculates the root radius of \\spad{p} with a maximal error quotient of {\\em errQuot}.")) (|reciprocalPolynomial| ((|#2| |#2|) "\\spad{reciprocalPolynomial(p)} calulates a polynomial which has exactly the inverses of the non-zero roots of \\spad{p} as roots,{} and the same number of 0-roots.")) (|pleskenSplit| (((|Factored| |#2|) |#2| |#1|) "\\spad{pleskenSplit(poly, eps)} determines a start polynomial {\\em start}\\\\ by using \"startPolynomial then it increases the exponent \\spad{n} of {\\em start ** n mod poly} to get an approximate factor of {\\em poly},{} in general of degree \"degree \\spad{poly} -1\". Then a divisor cascade is calculated and the best splitting is chosen,{} as soon as the error is small enough.") (((|Factored| |#2|) |#2| |#1| (|Boolean|)) "\\spad{pleskenSplit(poly,eps,info)} determines a start polynomial {\\em start} by using \"startPolynomial then it increases the exponent \\spad{n} of {\\em start ** n mod poly} to get an approximate factor of {\\em poly},{} in general of degree \"degree \\spad{poly} -1\". Then a divisor cascade is calculated and the best splitting is chosen,{} as soon as the error is small enough. If {\\em info} is {\\em true},{} then information messages are issued.")) (|norm| ((|#1| |#2|) "\\spad{norm(p)} determines sum of absolute values of coefficients Note: this function depends on \\spadfunFrom{abs}{Complex}.")) (|graeffe| ((|#2| |#2|) "\\spad{graeffe p} determines \\spad{q} such that \\spad{q(-z**2) = p(z)*p(-z)}. Note that the roots of \\spad{q} are the squares of the roots of \\spad{p}.")) (|factor| (((|Factored| |#2|) |#2|) "\\spad{factor(p)} tries to factor \\spad{p} into linear factors with error atmost {\\em globalEps},{} the internal error bound,{} which can be set by {\\em setErrorBound}. An overall error bound {\\em eps0} is determined and iterated tree-like calls to {\\em pleskenSplit} are used to get the factorization.") (((|Factored| |#2|) |#2| |#1|) "\\spad{factor(p, eps)} tries to factor \\spad{p} into linear factors with error atmost {\\em eps}. An overall error bound {\\em eps0} is determined and iterated tree-like calls to {\\em pleskenSplit} are used to get the factorization.") (((|Factored| |#2|) |#2| |#1| (|Boolean|)) "\\spad{factor(p, eps, info)} tries to factor \\spad{p} into linear factors with error atmost {\\em eps}. An overall error bound {\\em eps0} is determined and iterated tree-like calls to {\\em pleskenSplit} are used to get the factorization. If {\\em info} is {\\em true},{} then information messages are given.")) (|divisorCascade| (((|List| (|Record| (|:| |factors| (|List| |#2|)) (|:| |error| |#1|))) |#2| |#2|) "\\spad{divisorCascade(p,tp)} assumes that degree of polynomial {\\em tp} is smaller than degree of polynomial \\spad{p},{} both monic. A sequence of divisions is calculated using the remainder,{} made monic,{} as divisor for the the next division. The result contains also the error of the factorizations,{} \\spadignore{i.e.} the norm of the remainder polynomial.") (((|List| (|Record| (|:| |factors| (|List| |#2|)) (|:| |error| |#1|))) |#2| |#2| (|Boolean|)) "\\spad{divisorCascade(p,tp)} assumes that degree of polynomial {\\em tp} is smaller than degree of polynomial \\spad{p},{} both monic. A sequence of divisions are calculated using the remainder,{} made monic,{} as divisor for the the next division. The result contains also the error of the factorizations,{} \\spadignore{i.e.} the norm of the remainder polynomial. If {\\em info} is {\\em true},{} then information messages are issued.")) (|complexZeros| (((|List| (|Complex| |#1|)) |#2| |#1|) "\\spad{complexZeros(p, eps)} tries to determine all complex zeros of the polynomial \\spad{p} with accuracy given by {\\em eps}.") (((|List| (|Complex| |#1|)) |#2|) "\\spad{complexZeros(p)} tries to determine all complex zeros of the polynomial \\spad{p} with accuracy given by the package constant {\\em globalEps} which you may change by {\\em setErrorBound}."))) 
NIL 
NIL 
(-156 S ST) 
((|constructor| (NIL "This package provides tools for working with cyclic streams.")) (|computeCycleEntry| ((|#2| |#2| |#2|) "\\spad{computeCycleEntry(x,cycElt)},{} where \\spad{cycElt} is a pointer to a node in the cyclic part of the cyclic stream \\spad{x},{} returns a pointer to the first node in the cycle")) (|computeCycleLength| (((|NonNegativeInteger|) |#2|) "\\spad{computeCycleLength(s)} returns the length of the cycle of a cyclic stream \\spad{t},{} where \\spad{s} is a pointer to a node in the cyclic part of \\spad{t}.")) (|cycleElt| (((|Union| |#2| "failed") |#2|) "\\spad{cycleElt(s)} returns a pointer to a node in the cycle if the stream \\spad{s} is cyclic and returns \"failed\" if \\spad{s} is not cyclic"))) 
NIL 
NIL 
(-157) 
((|constructor| (NIL "This domain provides implementations for constructors.")) (|findConstructor| (((|Maybe| $) (|Identifier|)) "\\spad{findConstructor(s)} attempts to find a constructor named \\spad{s}. If successful,{} returns that constructor; otherwise,{} returns \\spad{nothing}."))) 
NIL 
NIL 
(-158 C) 
((|arguments| (((|List| (|Syntax|)) $) "\\spad{arguments(t)} returns the list of syntax objects for the arguments used to invoke the constructor.")) (|constructor| (NIL "This domains represents a syntax object that designates a category,{} domain,{} or a package. See Also: Syntax,{} Domain") ((|#1| $) "\\spad{constructor(t)} returns the name of the constructor used to make the call."))) 
NIL 
NIL 
(-159 S) 
((|constructor| (NIL "This category declares basic operations on all constructors.")) (|operations| (((|List| (|OverloadSet|)) $) "\\spad{operations(c)} returns the list of all operator exported by instantiations of constructor \\spad{c}. The operators are partitioned into overload sets.")) (|dualSignature| (((|List| (|Boolean|)) $) "\\spad{dualSignature(c)} returns a list \\spad{l} of Boolean values with the following meaning: \\indented{2}{\\spad{l}.(\\spad{i+1}) holds when the constructor takes a domain object} \\indented{10}{as the `i'th argument.\\space{2}Otherwise the argument} \\indented{10}{must be a non-domain object.}")) (|kind| (((|ConstructorKind|) $) "\\spad{kind(ctor)} returns the kind of the constructor `ctor'."))) 
NIL 
NIL 
(-160) 
((|constructor| (NIL "This category declares basic operations on all constructors.")) (|operations| (((|List| (|OverloadSet|)) $) "\\spad{operations(c)} returns the list of all operator exported by instantiations of constructor \\spad{c}. The operators are partitioned into overload sets.")) (|dualSignature| (((|List| (|Boolean|)) $) "\\spad{dualSignature(c)} returns a list \\spad{l} of Boolean values with the following meaning: \\indented{2}{\\spad{l}.(\\spad{i+1}) holds when the constructor takes a domain object} \\indented{10}{as the `i'th argument.\\space{2}Otherwise the argument} \\indented{10}{must be a non-domain object.}")) (|kind| (((|ConstructorKind|) $) "\\spad{kind(ctor)} returns the kind of the constructor `ctor'."))) 
NIL 
NIL 
(-161) 
((|constructor| (NIL "This domain enumerates the three kinds of constructors available in OpenAxiom: category constructors,{} domain constructors,{} and package constructors.")) (|package| (($) "`package' is the kind of package constructors.")) (|domain| (($) "`domain' is the kind of domain constructors")) (|category| (($) "`category' is the kind of category constructors"))) 
NIL 
NIL 
(-162 R -3092) 
((|constructor| (NIL "\\spadtype{ComplexTrigonometricManipulations} provides function that compute the real and imaginary parts of complex functions.")) (|complexForm| (((|Complex| (|Expression| |#1|)) |#2|) "\\spad{complexForm(f)} returns \\spad{[real f, imag f]}.")) (|trigs| ((|#2| |#2|) "\\spad{trigs(f)} rewrites all the complex logs and exponentials appearing in \\spad{f} in terms of trigonometric functions.")) (|real?| (((|Boolean|) |#2|) "\\spad{real?(f)} returns \\spad{true} if \\spad{f = real f}.")) (|imag| (((|Expression| |#1|) |#2|) "\\spad{imag(f)} returns the imaginary part of \\spad{f} where \\spad{f} is a complex function.")) (|real| (((|Expression| |#1|) |#2|) "\\spad{real(f)} returns the real part of \\spad{f} where \\spad{f} is a complex function.")) (|complexElementary| ((|#2| |#2| (|Symbol|)) "\\spad{complexElementary(f, x)} rewrites the kernels of \\spad{f} involving \\spad{x} in terms of the 2 fundamental complex transcendental elementary functions: \\spad{log, exp}.") ((|#2| |#2|) "\\spad{complexElementary(f)} rewrites \\spad{f} in terms of the 2 fundamental complex transcendental elementary functions: \\spad{log, exp}.")) (|complexNormalize| ((|#2| |#2| (|Symbol|)) "\\spad{complexNormalize(f, x)} rewrites \\spad{f} using the least possible number of complex independent kernels involving \\spad{x}.") ((|#2| |#2|) "\\spad{complexNormalize(f)} rewrites \\spad{f} using the least possible number of complex independent kernels."))) 
NIL 
NIL 
(-163 R) 
((|constructor| (NIL "CoerceVectorMatrixPackage: an unexposed,{} technical package for data conversions")) (|coerce| (((|Vector| (|Matrix| (|Fraction| (|Polynomial| |#1|)))) (|Vector| (|Matrix| |#1|))) "\\spad{coerce(v)} coerces a vector \\spad{v} with entries in \\spadtype{Matrix R} as vector over \\spadtype{Matrix Fraction Polynomial R}")) (|coerceP| (((|Vector| (|Matrix| (|Polynomial| |#1|))) (|Vector| (|Matrix| |#1|))) "\\spad{coerceP(v)} coerces a vector \\spad{v} with entries in \\spadtype{Matrix R} as vector over \\spadtype{Matrix Polynomial R}"))) 
NIL 
NIL 
(-164) 
((|constructor| (NIL "Enumeration by cycle indices.")) (|skewSFunction| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{skewSFunction(li1,li2)} is the \\spad{S}-function \\indented{1}{of the partition difference \\spad{li1 - li2}} \\indented{1}{expressed in terms of power sum symmetric functions.}")) (|SFunction| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|List| (|PositiveInteger|))) "\\spad{SFunction(li)} is the \\spad{S}-function of the partition \\spad{li} \\indented{1}{expressed in terms of power sum symmetric functions.}")) (|wreath| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|SymmetricPolynomial| (|Fraction| (|Integer|))) (|SymmetricPolynomial| (|Fraction| (|Integer|)))) "\\spad{wreath(s1,s2)} is the cycle index of the wreath product \\indented{1}{of the two groups whose cycle indices are \\spad{s1} and} \\indented{1}{\\spad{s2}.}")) (|eval| (((|Fraction| (|Integer|)) (|SymmetricPolynomial| (|Fraction| (|Integer|)))) "\\spad{eval s} is the sum of the coefficients of a cycle index.")) (|cup| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|SymmetricPolynomial| (|Fraction| (|Integer|))) (|SymmetricPolynomial| (|Fraction| (|Integer|)))) "\\spad{cup(s1,s2)},{} introduced by Redfield,{} \\indented{1}{is the scalar product of two cycle indices,{} in which the} \\indented{1}{power sums are retained to produce a cycle index.}")) (|cap| (((|Fraction| (|Integer|)) (|SymmetricPolynomial| (|Fraction| (|Integer|))) (|SymmetricPolynomial| (|Fraction| (|Integer|)))) "\\spad{cap(s1,s2)},{} introduced by Redfield,{} \\indented{1}{is the scalar product of two cycle indices.}")) (|graphs| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{graphs n} is the cycle index of the group induced on \\indented{1}{the edges of a graph by applying the symmetric function to the} \\indented{1}{\\spad{n} nodes.}")) (|dihedral| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{dihedral n} is the cycle index of the \\indented{1}{dihedral group of degree \\spad{n}.}")) (|cyclic| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{cyclic n} is the cycle index of the \\indented{1}{cyclic group of degree \\spad{n}.}")) (|alternating| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{alternating n} is the cycle index of the \\indented{1}{alternating group of degree \\spad{n}.}")) (|elementary| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{elementary n} is the \\spad{n} th elementary symmetric \\indented{1}{function expressed in terms of power sums.}")) (|powerSum| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{powerSum n} is the \\spad{n} th power sum symmetric \\indented{1}{function.}")) (|complete| (((|SymmetricPolynomial| (|Fraction| (|Integer|))) (|PositiveInteger|)) "\\spad{complete n} is the \\spad{n} th complete homogeneous \\indented{1}{symmetric function expressed in terms of power sums.} \\indented{1}{Alternatively it is the cycle index of the symmetric} \\indented{1}{group of degree \\spad{n}.}"))) 
NIL 
NIL 
(-165) 
((|constructor| (NIL "This package \\undocumented{}")) (|cyclotomicFactorization| (((|Factored| (|SparseUnivariatePolynomial| (|Integer|))) (|Integer|)) "\\spad{cyclotomicFactorization(n)} \\undocumented{}")) (|cyclotomic| (((|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{cyclotomic(n)} \\undocumented{}")) (|cyclotomicDecomposition| (((|List| (|SparseUnivariatePolynomial| (|Integer|))) (|Integer|)) "\\spad{cyclotomicDecomposition(n)} \\undocumented{}"))) 
NIL 
NIL 
(-166 N T$) 
((|constructor| (NIL "This domain provides for a fixed-sized homogeneous data buffer.")) (|qsetelt| ((|#2| $ (|NonNegativeInteger|) |#2|) "setelt(\\spad{b},{}\\spad{i},{}\\spad{x}) sets the \\spad{i}th entry of data buffer `b' to `x'. Indexing is 0-based.")) (|qelt| ((|#2| $ (|NonNegativeInteger|)) "elt(\\spad{b},{}\\spad{i}) returns the \\spad{i}th element in buffer `b'. Indexing is 0-based.")) (|new| (($) "\\spad{new()} returns a fresly allocated data buffer or length \\spad{N}."))) 
NIL 
NIL 
(-167 S) 
((|constructor| (NIL "\\indented{1}{This domain implements a simple view of a database whose fields are} indexed by symbols")) (- (($ $ $) "\\spad{db1-db2} returns the difference of databases \\spad{db1} and \\spad{db2} \\spadignore{i.e.} consisting of elements in \\spad{db1} but not in \\spad{db2}")) (+ (($ $ $) "\\spad{db1+db2} returns the merge of databases \\spad{db1} and \\spad{db2}")) (|fullDisplay| (((|Void|) $ (|PositiveInteger|) (|PositiveInteger|)) "\\spad{fullDisplay(db,start,end )} prints full details of entries in the range \\axiom{\\spad{start}..end} in \\axiom{\\spad{db}}.") (((|Void|) $) "\\spad{fullDisplay(db)} prints full details of each entry in \\axiom{\\spad{db}}.") (((|Void|) $) "\\spad{fullDisplay(x)} displays \\spad{x} in detail")) (|display| (((|Void|) $) "\\spad{display(db)} prints a summary line for each entry in \\axiom{\\spad{db}}.") (((|Void|) $) "\\spad{display(x)} displays \\spad{x} in some form")) (|elt| (((|DataList| (|String|)) $ (|Symbol|)) "\\spad{elt(db,s)} returns the \\axiom{\\spad{s}} field of each element of \\axiom{\\spad{db}}.") (($ $ (|QueryEquation|)) "\\spad{elt(db,q)} returns all elements of \\axiom{\\spad{db}} which satisfy \\axiom{\\spad{q}}.") (((|String|) $ (|Symbol|)) "\\spad{elt(x,s)} returns an element of \\spad{x} indexed by \\spad{s}"))) 
NIL 
NIL 
(-168 |vars|) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: July 2,{} 2010 Date Last Modified: July 2,{} 2010 Descrption: \\indented{2}{Representation of a dual vector space basis,{} given by symbols.}")) (|dual| (($ (|LinearBasis| |#1|)) "\\spad{dual x} constructs the dual vector of a linear element which is part of a basis."))) 
NIL 
NIL 
(-169 -3092 UP UPUP R) 
((|constructor| (NIL "This package provides functions for computing the residues of a function on an algebraic curve.")) (|doubleResultant| ((|#2| |#4| (|Mapping| |#2| |#2|)) "\\spad{doubleResultant(f, ')} returns \\spad{p}(\\spad{x}) whose roots are rational multiples of the residues of \\spad{f} at all its finite poles. Argument ' is the derivation to use."))) 
NIL 
NIL 
(-170 -3092 FP) 
((|constructor| (NIL "Package for the factorization of a univariate polynomial with coefficients in a finite field. The algorithm used is the \"distinct degree\" algorithm of Cantor-Zassenhaus,{} modified to use trace instead of the norm and a table for computing Frobenius as suggested by Naudin and Quitte .")) (|irreducible?| (((|Boolean|) |#2|) "\\spad{irreducible?(p)} tests whether the polynomial \\spad{p} is irreducible.")) (|tracePowMod| ((|#2| |#2| (|NonNegativeInteger|) |#2|) "\\spad{tracePowMod(u,k,v)} produces the sum of \\spad{u**(q**i)} for \\spad{i} running and q= size \\spad{F}")) (|trace2PowMod| ((|#2| |#2| (|NonNegativeInteger|) |#2|) "\\spad{trace2PowMod(u,k,v)} produces the sum of \\spad{u**(2**i)} for \\spad{i} running from 1 to \\spad{k} all computed modulo the polynomial \\spad{v}.")) (|exptMod| ((|#2| |#2| (|NonNegativeInteger|) |#2|) "\\spad{exptMod(u,k,v)} raises the polynomial \\spad{u} to the \\spad{k}th power modulo the polynomial \\spad{v}.")) (|separateFactors| (((|List| |#2|) (|List| (|Record| (|:| |deg| (|NonNegativeInteger|)) (|:| |prod| |#2|)))) "\\spad{separateFactors(lfact)} takes the list produced by \\spadfunFrom{separateDegrees}{DistinctDegreeFactorization} and produces the complete list of factors.")) (|separateDegrees| (((|List| (|Record| (|:| |deg| (|NonNegativeInteger|)) (|:| |prod| |#2|))) |#2|) "\\spad{separateDegrees(p)} splits the square free polynomial \\spad{p} into factors each of which is a product of irreducibles of the same degree.")) (|distdfact| (((|Record| (|:| |cont| |#1|) (|:| |factors| (|List| (|Record| (|:| |irr| |#2|) (|:| |pow| (|Integer|)))))) |#2| (|Boolean|)) "\\spad{distdfact(p,sqfrflag)} produces the complete factorization of the polynomial \\spad{p} returning an internal data structure. If argument \\spad{sqfrflag} is \\spad{true},{} the polynomial is assumed square free.")) (|factorSquareFree| (((|Factored| |#2|) |#2|) "\\spad{factorSquareFree(p)} produces the complete factorization of the square free polynomial \\spad{p}.")) (|factor| (((|Factored| |#2|) |#2|) "\\spad{factor(p)} produces the complete factorization of the polynomial \\spad{p}."))) 
NIL 
NIL 
(-171) 
((|constructor| (NIL "This domain allows rational numbers to be presented as repeating decimal expansions.")) (|decimal| (($ (|Fraction| (|Integer|))) "\\spad{decimal(r)} converts a rational number to a decimal expansion.")) (|fractionPart| (((|Fraction| (|Integer|)) $) "\\spad{fractionPart(d)} returns the fractional part of a decimal expansion."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-484) (QUOTE (-821))) (|HasCategory| (-484) (QUOTE (-950 (-1089)))) (|HasCategory| (-484) (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-120))) (|HasCategory| (-484) (QUOTE (-553 (-473)))) (|HasCategory| (-484) (QUOTE (-933))) (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756))) (OR (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756)))) (|HasCategory| (-484) (QUOTE (-950 (-484)))) (|HasCategory| (-484) (QUOTE (-1065))) (|HasCategory| (-484) (QUOTE (-796 (-329)))) (|HasCategory| (-484) (QUOTE (-796 (-484)))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-484) (QUOTE (-189))) (|HasCategory| (-484) (QUOTE (-811 (-1089)))) (|HasCategory| (-484) (QUOTE (-190))) (|HasCategory| (-484) (QUOTE (-809 (-1089)))) (|HasCategory| (-484) (QUOTE (-455 (-1089) (-484)))) (|HasCategory| (-484) (QUOTE (-260 (-484)))) (|HasCategory| (-484) (QUOTE (-241 (-484) (-484)))) (|HasCategory| (-484) (QUOTE (-258))) (|HasCategory| (-484) (QUOTE (-483))) (|HasCategory| (-484) (QUOTE (-580 (-484)))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (|HasCategory| (-484) (QUOTE (-118))))) 
(-172) 
((|constructor| (NIL "This domain represents the syntax of a definition.")) (|body| (((|SpadAst|) $) "\\spad{body(d)} returns the right hand side of the definition `d'.")) (|signature| (((|Signature|) $) "\\spad{signature(d)} returns the signature of the operation being defined. Note that this list may be partial in that it contains only the types actually specified in the definition.")) (|head| (((|HeadAst|) $) "\\spad{head(d)} returns the head of the definition `d'. This is a list of identifiers starting with the name of the operation followed by the name of the parameters,{} if any."))) 
NIL 
NIL 
(-173 R -3092) 
((|constructor| (NIL "\\spadtype{ElementaryFunctionDefiniteIntegration} provides functions to compute definite integrals of elementary functions.")) (|innerint| (((|Union| (|:| |f1| (|OrderedCompletion| |#2|)) (|:| |f2| (|List| (|OrderedCompletion| |#2|))) (|:| |fail| #1="failed") (|:| |pole| #2="potentialPole")) |#2| (|Symbol|) (|OrderedCompletion| |#2|) (|OrderedCompletion| |#2|) (|Boolean|)) "\\spad{innerint(f, x, a, b, ignore?)} should be local but conditional")) (|integrate| (((|Union| (|:| |f1| (|OrderedCompletion| |#2|)) (|:| |f2| (|List| (|OrderedCompletion| |#2|))) (|:| |fail| #1#) (|:| |pole| #2#)) |#2| (|SegmentBinding| (|OrderedCompletion| |#2|)) (|String|)) "\\spad{integrate(f, x = a..b, \"noPole\")} returns the integral of \\spad{f(x)dx} from a to \\spad{b}. If it is not possible to check whether \\spad{f} has a pole for \\spad{x} between a and \\spad{b} (because of parameters),{} then this function will assume that \\spad{f} has no such pole. Error: if \\spad{f} has a pole for \\spad{x} between a and \\spad{b} or if the last argument is not \"noPole\".") (((|Union| (|:| |f1| (|OrderedCompletion| |#2|)) (|:| |f2| (|List| (|OrderedCompletion| |#2|))) (|:| |fail| #1#) (|:| |pole| #2#)) |#2| (|SegmentBinding| (|OrderedCompletion| |#2|))) "\\spad{integrate(f, x = a..b)} returns the integral of \\spad{f(x)dx} from a to \\spad{b}. Error: if \\spad{f} has a pole for \\spad{x} between a and \\spad{b}."))) 
NIL 
NIL 
(-174 R) 
((|constructor| (NIL "\\spadtype{RationalFunctionDefiniteIntegration} provides functions to compute definite integrals of rational functions.")) (|integrate| (((|Union| (|:| |f1| (|OrderedCompletion| (|Expression| |#1|))) (|:| |f2| (|List| (|OrderedCompletion| (|Expression| |#1|)))) (|:| |fail| #1="failed") (|:| |pole| #2="potentialPole")) (|Fraction| (|Polynomial| |#1|)) (|SegmentBinding| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|)))) (|String|)) "\\spad{integrate(f, x = a..b, \"noPole\")} returns the integral of \\spad{f(x)dx} from a to \\spad{b}. If it is not possible to check whether \\spad{f} has a pole for \\spad{x} between a and \\spad{b} (because of parameters),{} then this function will assume that \\spad{f} has no such pole. Error: if \\spad{f} has a pole for \\spad{x} between a and \\spad{b} or if the last argument is not \"noPole\".") (((|Union| (|:| |f1| (|OrderedCompletion| (|Expression| |#1|))) (|:| |f2| (|List| (|OrderedCompletion| (|Expression| |#1|)))) (|:| |fail| #1#) (|:| |pole| #2#)) (|Fraction| (|Polynomial| |#1|)) (|SegmentBinding| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))))) "\\spad{integrate(f, x = a..b)} returns the integral of \\spad{f(x)dx} from a to \\spad{b}. Error: if \\spad{f} has a pole for \\spad{x} between a and \\spad{b}.") (((|Union| (|:| |f1| (|OrderedCompletion| (|Expression| |#1|))) (|:| |f2| (|List| (|OrderedCompletion| (|Expression| |#1|)))) (|:| |fail| #1#) (|:| |pole| #2#)) (|Fraction| (|Polynomial| |#1|)) (|SegmentBinding| (|OrderedCompletion| (|Expression| |#1|))) (|String|)) "\\spad{integrate(f, x = a..b, \"noPole\")} returns the integral of \\spad{f(x)dx} from a to \\spad{b}. If it is not possible to check whether \\spad{f} has a pole for \\spad{x} between a and \\spad{b} (because of parameters),{} then this function will assume that \\spad{f} has no such pole. Error: if \\spad{f} has a pole for \\spad{x} between a and \\spad{b} or if the last argument is not \"noPole\".") (((|Union| (|:| |f1| (|OrderedCompletion| (|Expression| |#1|))) (|:| |f2| (|List| (|OrderedCompletion| (|Expression| |#1|)))) (|:| |fail| #1#) (|:| |pole| #2#)) (|Fraction| (|Polynomial| |#1|)) (|SegmentBinding| (|OrderedCompletion| (|Expression| |#1|)))) "\\spad{integrate(f, x = a..b)} returns the integral of \\spad{f(x)dx} from a to \\spad{b}. Error: if \\spad{f} has a pole for \\spad{x} between a and \\spad{b}."))) 
NIL 
NIL 
(-175 R1 R2) 
((|constructor| (NIL "This package \\undocumented{}")) (|expand| (((|List| (|Expression| |#2|)) (|Expression| |#2|) (|PositiveInteger|)) "\\spad{expand(f,n)} \\undocumented{}")) (|reduce| (((|Record| (|:| |pol| (|SparseUnivariatePolynomial| |#1|)) (|:| |deg| (|PositiveInteger|))) (|SparseUnivariatePolynomial| |#1|)) "\\spad{reduce(p)} \\undocumented{}"))) 
NIL 
NIL 
(-176 S) 
((|constructor| (NIL "Linked list implementation of a Dequeue")) (|dequeue| (($ (|List| |#1|)) "\\spad{dequeue([x,y,...,z])} creates a dequeue with first (top or front) element \\spad{x},{} second element \\spad{y},{}...,{}and last (bottom or back) element \\spad{z}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-177 |CoefRing| |listIndVar|) 
((|constructor| (NIL "The deRham complex of Euclidean space,{} that is,{} the class of differential forms of arbitary degree over a coefficient ring. See Flanders,{} Harley,{} Differential Forms,{} With Applications to the Physical Sciences,{} New York,{} Academic Press,{} 1963.")) (|exteriorDifferential| (($ $) "\\spad{exteriorDifferential(df)} returns the exterior derivative (gradient,{} curl,{} divergence,{} ...) of the differential form \\spad{df}.")) (|totalDifferential| (($ (|Expression| |#1|)) "\\spad{totalDifferential(x)} returns the total differential (gradient) form for element \\spad{x}.")) (|map| (($ (|Mapping| (|Expression| |#1|) (|Expression| |#1|)) $) "\\spad{map(f,df)} replaces each coefficient \\spad{x} of differential form \\spad{df} by \\spad{f(x)}.")) (|degree| (((|Integer|) $) "\\spad{degree(df)} returns the homogeneous degree of differential form \\spad{df}.")) (|retractable?| (((|Boolean|) $) "\\spad{retractable?(df)} tests if differential form \\spad{df} is a 0-form,{} \\spadignore{i.e.} if degree(\\spad{df}) = 0.")) (|homogeneous?| (((|Boolean|) $) "\\spad{homogeneous?(df)} tests if all of the terms of differential form \\spad{df} have the same degree.")) (|generator| (($ (|NonNegativeInteger|)) "\\spad{generator(n)} returns the \\spad{n}th basis term for a differential form.")) (|coefficient| (((|Expression| |#1|) $ $) "\\spad{coefficient(df,u)},{} where \\spad{df} is a differential form,{} returns the coefficient of \\spad{df} containing the basis term \\spad{u} if such a term exists,{} and 0 otherwise.")) (|reductum| (($ $) "\\spad{reductum(df)},{} where \\spad{df} is a differential form,{} returns \\spad{df} minus the leading term of \\spad{df} if \\spad{df} has two or more terms,{} and 0 otherwise.")) (|leadingBasisTerm| (($ $) "\\spad{leadingBasisTerm(df)} returns the leading basis term of differential form \\spad{df}.")) (|leadingCoefficient| (((|Expression| |#1|) $) "\\spad{leadingCoefficient(df)} returns the leading coefficient of differential form \\spad{df}."))) 
((-3991 . T)) 
NIL 
(-178 R -3092) 
((|constructor| (NIL "\\spadtype{DefiniteIntegrationTools} provides common tools used by the definite integration of both rational and elementary functions.")) (|checkForZero| (((|Union| (|Boolean|) "failed") (|SparseUnivariatePolynomial| |#2|) (|OrderedCompletion| |#2|) (|OrderedCompletion| |#2|) (|Boolean|)) "\\spad{checkForZero(p, a, b, incl?)} is \\spad{true} if \\spad{p} has a zero between a and \\spad{b},{} \\spad{false} otherwise,{} \"failed\" if this cannot be determined. Check for a and \\spad{b} inclusive if incl? is \\spad{true},{} exclusive otherwise.") (((|Union| (|Boolean|) "failed") (|Polynomial| |#1|) (|Symbol|) (|OrderedCompletion| |#2|) (|OrderedCompletion| |#2|) (|Boolean|)) "\\spad{checkForZero(p, x, a, b, incl?)} is \\spad{true} if \\spad{p} has a zero for \\spad{x} between a and \\spad{b},{} \\spad{false} otherwise,{} \"failed\" if this cannot be determined. Check for a and \\spad{b} inclusive if incl? is \\spad{true},{} exclusive otherwise.")) (|computeInt| (((|Union| (|OrderedCompletion| |#2|) "failed") (|Kernel| |#2|) |#2| (|OrderedCompletion| |#2|) (|OrderedCompletion| |#2|) (|Boolean|)) "\\spad{computeInt(x, g, a, b, eval?)} returns the integral of \\spad{f} for \\spad{x} between a and \\spad{b},{} assuming that \\spad{g} is an indefinite integral of \\spad{f} and \\spad{f} has no pole between a and \\spad{b}. If \\spad{eval?} is \\spad{true},{} then \\spad{g} can be evaluated safely at \\spad{a} and \\spad{b},{} provided that they are finite values. Otherwise,{} limits must be computed.")) (|ignore?| (((|Boolean|) (|String|)) "\\spad{ignore?(s)} is \\spad{true} if \\spad{s} is the string that tells the integrator to assume that the function has no pole in the integration interval."))) 
NIL 
NIL 
(-179) 
((|constructor| (NIL "\\indented{1}{\\spadtype{DoubleFloat} is intended to make accessible} hardware floating point arithmetic in \\Language{},{} either native double precision,{} or IEEE. On most machines,{} there will be hardware support for the arithmetic operations: \\spadfunFrom{+}{DoubleFloat},{} \\spadfunFrom{*}{DoubleFloat},{} \\spadfunFrom{/}{DoubleFloat} and possibly also the \\spadfunFrom{sqrt}{DoubleFloat} operation. The operations \\spadfunFrom{exp}{DoubleFloat},{} \\spadfunFrom{log}{DoubleFloat},{} \\spadfunFrom{sin}{DoubleFloat},{} \\spadfunFrom{cos}{DoubleFloat},{} \\spadfunFrom{atan}{DoubleFloat} are normally coded in software based on minimax polynomial/rational approximations. Note that under Lisp/VM,{} \\spadfunFrom{atan}{DoubleFloat} is not available at this time. Some general comments about the accuracy of the operations: the operations \\spadfunFrom{+}{DoubleFloat},{} \\spadfunFrom{*}{DoubleFloat},{} \\spadfunFrom{/}{DoubleFloat} and \\spadfunFrom{sqrt}{DoubleFloat} are expected to be fully accurate. The operations \\spadfunFrom{exp}{DoubleFloat},{} \\spadfunFrom{log}{DoubleFloat},{} \\spadfunFrom{sin}{DoubleFloat},{} \\spadfunFrom{cos}{DoubleFloat} and \\spadfunFrom{atan}{DoubleFloat} are not expected to be fully accurate. In particular,{} \\spadfunFrom{sin}{DoubleFloat} and \\spadfunFrom{cos}{DoubleFloat} will lose all precision for large arguments. \\blankline The \\spadtype{Float} domain provides an alternative to the \\spad{DoubleFloat} domain. It provides an arbitrary precision model of floating point arithmetic. This means that accuracy problems like those above are eliminated by increasing the working precision where necessary. \\spadtype{Float} provides some special functions such as \\spadfunFrom{erf}{DoubleFloat},{} the error function in addition to the elementary functions. The disadvantage of \\spadtype{Float} is that it is much more expensive than small floats when the latter can be used.")) (|nan?| (((|Boolean|) $) "\\spad{nan? x} holds if \\spad{x} is a Not a Number floating point data in the IEEE 754 sense.")) (|rationalApproximation| (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{rationalApproximation(f, n, b)} computes a rational approximation \\spad{r} to \\spad{f} with relative error \\spad{< b**(-n)} (that is,{} \\spad{|(r-f)/f| < b**(-n)}).") (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)) "\\spad{rationalApproximation(f, n)} computes a rational approximation \\spad{r} to \\spad{f} with relative error \\spad{< 10**(-n)}.")) (|Beta| (($ $ $) "\\spad{Beta(x,y)} is \\spad{Gamma(x) * Gamma(y)/Gamma(x+y)}.")) (|Gamma| (($ $) "\\spad{Gamma(x)} is the Euler Gamma function.")) (|atan| (($ $ $) "\\spad{atan(x,y)} computes the arc tangent from \\spad{x} with phase \\spad{y}.")) (|log10| (($ $) "\\spad{log10(x)} computes the logarithm with base 10 for \\spad{x}.")) (|log2| (($ $) "\\spad{log2(x)} computes the logarithm with base 2 for \\spad{x}.")) (|exp1| (($) "\\spad{exp1()} returns the natural log base \\spad{2.718281828...}.")) (** (($ $ $) "\\spad{x ** y} returns the \\spad{y}th power of \\spad{x} (equal to \\spad{exp(y log x)}).")) (/ (($ $ (|Integer|)) "\\spad{x / i} computes the division from \\spad{x} by an integer \\spad{i}."))) 
((-3769 . T) (-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-180) 
((|constructor| (NIL "This package provides special functions for double precision real and complex floating point.")) (|hypergeometric0F1| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{hypergeometric0F1(c,z)} is the hypergeometric function \\spad{0F1(; c; z)}.") (((|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{hypergeometric0F1(c,z)} is the hypergeometric function \\spad{0F1(; c; z)}.")) (|airyBi| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{airyBi(x)} is the Airy function \\spad{Bi(x)}. This function satisfies the differential equation: \\indented{2}{\\spad{Bi''(x) - x * Bi(x) = 0}.}") (((|DoubleFloat|) (|DoubleFloat|)) "\\spad{airyBi(x)} is the Airy function \\spad{Bi(x)}. This function satisfies the differential equation: \\indented{2}{\\spad{Bi''(x) - x * Bi(x) = 0}.}")) (|airyAi| (((|DoubleFloat|) (|DoubleFloat|)) "\\spad{airyAi(x)} is the Airy function \\spad{Ai(x)}. This function satisfies the differential equation: \\indented{2}{\\spad{Ai''(x) - x * Ai(x) = 0}.}") (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{airyAi(x)} is the Airy function \\spad{Ai(x)}. This function satisfies the differential equation: \\indented{2}{\\spad{Ai''(x) - x * Ai(x) = 0}.}")) (|besselK| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{besselK(v,x)} is the modified Bessel function of the first kind,{} \\spad{K(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.} Note: The default implmentation uses the relation \\indented{2}{\\spad{K(v,x) = \\%pi/2*(I(-v,x) - I(v,x))/sin(v*\\%pi)}} so is not valid for integer values of \\spad{v}.") (((|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{besselK(v,x)} is the modified Bessel function of the first kind,{} \\spad{K(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.} Note: The default implmentation uses the relation \\indented{2}{\\spad{K(v,x) = \\%pi/2*(I(-v,x) - I(v,x))/sin(v*\\%pi)}.} so is not valid for integer values of \\spad{v}.")) (|besselI| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{besselI(v,x)} is the modified Bessel function of the first kind,{} \\spad{I(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.}") (((|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{besselI(v,x)} is the modified Bessel function of the first kind,{} \\spad{I(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) - (x^2+v^2)w(x) = 0}.}")) (|besselY| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{besselY(v,x)} is the Bessel function of the second kind,{} \\spad{Y(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.} Note: The default implmentation uses the relation \\indented{2}{\\spad{Y(v,x) = (J(v,x) cos(v*\\%pi) - J(-v,x))/sin(v*\\%pi)}} so is not valid for integer values of \\spad{v}.") (((|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{besselY(v,x)} is the Bessel function of the second kind,{} \\spad{Y(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.} Note: The default implmentation uses the relation \\indented{2}{\\spad{Y(v,x) = (J(v,x) cos(v*\\%pi) - J(-v,x))/sin(v*\\%pi)}} so is not valid for integer values of \\spad{v}.")) (|besselJ| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{besselJ(v,x)} is the Bessel function of the first kind,{} \\spad{J(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.}") (((|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{besselJ(v,x)} is the Bessel function of the first kind,{} \\spad{J(v,x)}. This function satisfies the differential equation: \\indented{2}{\\spad{x^2 w''(x) + x w'(x) + (x^2-v^2)w(x) = 0}.}")) (|polygamma| (((|Complex| (|DoubleFloat|)) (|NonNegativeInteger|) (|Complex| (|DoubleFloat|))) "\\spad{polygamma(n, x)} is the \\spad{n}-th derivative of \\spad{digamma(x)}.") (((|DoubleFloat|) (|NonNegativeInteger|) (|DoubleFloat|)) "\\spad{polygamma(n, x)} is the \\spad{n}-th derivative of \\spad{digamma(x)}.")) (|digamma| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{digamma(x)} is the function,{} \\spad{psi(x)},{} defined by \\indented{2}{\\spad{psi(x) = Gamma'(x)/Gamma(x)}.}") (((|DoubleFloat|) (|DoubleFloat|)) "\\spad{digamma(x)} is the function,{} \\spad{psi(x)},{} defined by \\indented{2}{\\spad{psi(x) = Gamma'(x)/Gamma(x)}.}")) (|logGamma| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{logGamma(x)} is the natural log of \\spad{Gamma(x)}. This can often be computed even if \\spad{Gamma(x)} cannot.") (((|DoubleFloat|) (|DoubleFloat|)) "\\spad{logGamma(x)} is the natural log of \\spad{Gamma(x)}. This can often be computed even if \\spad{Gamma(x)} cannot.")) (|Beta| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{Beta(x, y)} is the Euler beta function,{} \\spad{B(x,y)},{} defined by \\indented{2}{\\spad{Beta(x,y) = integrate(t^(x-1)*(1-t)^(y-1), t=0..1)}.} This is related to \\spad{Gamma(x)} by \\indented{2}{\\spad{Beta(x,y) = Gamma(x)*Gamma(y) / Gamma(x + y)}.}") (((|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{Beta(x, y)} is the Euler beta function,{} \\spad{B(x,y)},{} defined by \\indented{2}{\\spad{Beta(x,y) = integrate(t^(x-1)*(1-t)^(y-1), t=0..1)}.} This is related to \\spad{Gamma(x)} by \\indented{2}{\\spad{Beta(x,y) = Gamma(x)*Gamma(y) / Gamma(x + y)}.}")) (|Gamma| (((|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) "\\spad{Gamma(x)} is the Euler gamma function,{} \\spad{Gamma(x)},{} defined by \\indented{2}{\\spad{Gamma(x) = integrate(t^(x-1)*exp(-t), t=0..\\%infinity)}.}") (((|DoubleFloat|) (|DoubleFloat|)) "\\spad{Gamma(x)} is the Euler gamma function,{} \\spad{Gamma(x)},{} defined by \\indented{2}{\\spad{Gamma(x) = integrate(t^(x-1)*exp(-t), t=0..\\%infinity)}.}"))) 
NIL 
NIL 
(-181 R) 
((|constructor| (NIL "\\indented{1}{A Denavit-Hartenberg Matrix is a 4x4 Matrix of the form:} \\indented{1}{\\spad{nx ox ax px}} \\indented{1}{\\spad{ny oy ay py}} \\indented{1}{\\spad{nz oz az pz}} \\indented{2}{\\spad{0\\space{2}0\\space{2}0\\space{2}1}} (\\spad{n},{} \\spad{o},{} and a are the direction cosines)")) (|translate| (($ |#1| |#1| |#1|) "\\spad{translate(X,Y,Z)} returns a dhmatrix for translation by \\spad{X},{} \\spad{Y},{} and \\spad{Z}")) (|scale| (($ |#1| |#1| |#1|) "\\spad{scale(sx,sy,sz)} returns a dhmatrix for scaling in the \\spad{X},{} \\spad{Y} and \\spad{Z} directions")) (|rotatez| (($ |#1|) "\\spad{rotatez(r)} returns a dhmatrix for rotation about axis \\spad{Z} for \\spad{r} degrees")) (|rotatey| (($ |#1|) "\\spad{rotatey(r)} returns a dhmatrix for rotation about axis \\spad{Y} for \\spad{r} degrees")) (|rotatex| (($ |#1|) "\\spad{rotatex(r)} returns a dhmatrix for rotation about axis \\spad{X} for \\spad{r} degrees")) (|identity| (($) "\\spad{identity()} create the identity dhmatrix")) (* (((|Point| |#1|) $ (|Point| |#1|)) "\\spad{t*p} applies the dhmatrix \\spad{t} to point \\spad{p}"))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-495))) (|HasAttribute| |#1| (QUOTE (-3996 "*"))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-182 A S) 
((|constructor| (NIL "A dictionary is an aggregate in which entries can be inserted,{} searched for and removed. Duplicates are thrown away on insertion. This category models the usual notion of dictionary which involves large amounts of data where copying is impractical. Principal operations are thus destructive (non-copying) ones."))) 
NIL 
NIL 
(-183 S) 
((|constructor| (NIL "A dictionary is an aggregate in which entries can be inserted,{} searched for and removed. Duplicates are thrown away on insertion. This category models the usual notion of dictionary which involves large amounts of data where copying is impractical. Principal operations are thus destructive (non-copying) ones."))) 
((-3995 . T)) 
NIL 
(-184 R) 
((|constructor| (NIL "Differential extensions of a ring \\spad{R}. Given a differentiation on \\spad{R},{} extend it to a differentiation on \\%."))) 
((-3991 . T)) 
NIL 
(-185 S T$) 
((|constructor| (NIL "This category captures the interface of domains with a distinguished operation named \\spad{differentiate}. Usually,{} additional properties are wanted. For example,{} that it obeys the usual Leibniz identity of differentiation of product,{} in case of differential rings. One could also want \\spad{differentiate} to obey the chain rule when considering differential manifolds. The lack of specific requirement in this category is an implicit admission that currently \\Language{} is not expressive enough to express the most general notion of differentiation in an adequate manner,{} suitable for computational purposes.")) (D ((|#2| $) "\\spad{D x} is a shorthand for \\spad{differentiate x}")) (|differentiate| ((|#2| $) "\\spad{differentiate x} compute the derivative of \\spad{x}."))) 
NIL 
NIL 
(-186 T$) 
((|constructor| (NIL "This category captures the interface of domains with a distinguished operation named \\spad{differentiate}. Usually,{} additional properties are wanted. For example,{} that it obeys the usual Leibniz identity of differentiation of product,{} in case of differential rings. One could also want \\spad{differentiate} to obey the chain rule when considering differential manifolds. The lack of specific requirement in this category is an implicit admission that currently \\Language{} is not expressive enough to express the most general notion of differentiation in an adequate manner,{} suitable for computational purposes.")) (D ((|#1| $) "\\spad{D x} is a shorthand for \\spad{differentiate x}")) (|differentiate| ((|#1| $) "\\spad{differentiate x} compute the derivative of \\spad{x}."))) 
NIL 
NIL 
(-187 R) 
((|constructor| (NIL "An \\spad{R}-module equipped with a distinguised differential operator. If \\spad{R} is a differential ring,{} then differentiation on the module should extend differentiation on the differential ring \\spad{R}. The latter can be the null operator. In that case,{} the differentiation operator on the module is just an \\spad{R}-linear operator. For that reason,{} we do not require that the ring \\spad{R} be a DifferentialRing; \\blankline"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-188 S) 
((|constructor| (NIL "This category is like \\spadtype{DifferentialDomain} where the target of the differentiation operator is the same as its source.")) (D (($ $ (|NonNegativeInteger|)) "\\spad{D(x, n)} returns the \\spad{n}\\spad{-}th derivative of \\spad{x}.")) (|differentiate| (($ $ (|NonNegativeInteger|)) "\\spad{differentiate(x,n)} returns the \\spad{n}\\spad{-}th derivative of \\spad{x}."))) 
NIL 
NIL 
(-189) 
((|constructor| (NIL "This category is like \\spadtype{DifferentialDomain} where the target of the differentiation operator is the same as its source.")) (D (($ $ (|NonNegativeInteger|)) "\\spad{D(x, n)} returns the \\spad{n}\\spad{-}th derivative of \\spad{x}.")) (|differentiate| (($ $ (|NonNegativeInteger|)) "\\spad{differentiate(x,n)} returns the \\spad{n}\\spad{-}th derivative of \\spad{x}."))) 
NIL 
NIL 
(-190) 
((|constructor| (NIL "An ordinary differential ring,{} that is,{} a ring with an operation \\spadfun{differentiate}. \\blankline"))) 
((-3991 . T)) 
NIL 
(-191) 
((|constructor| (NIL "Dioid is the class of semirings where the addition operation induces a canonical order relation."))) 
NIL 
NIL 
(-192 A S) 
((|constructor| (NIL "This category is a collection of operations common to both categories \\spadtype{Dictionary} and \\spadtype{MultiDictionary}")) (|select!| (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{select!(p,d)} destructively changes dictionary \\spad{d} by removing all entries \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})} is not \\spad{true}.")) (|remove!| (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{remove!(p,d)} destructively changes dictionary \\spad{d} by removeing all entries \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}.") (($ |#2| $) "\\spad{remove!(x,d)} destructively changes dictionary \\spad{d} by removing all entries \\spad{y} such that \\axiom{\\spad{y} = \\spad{x}}.")) (|dictionary| (($ (|List| |#2|)) "\\spad{dictionary([x,y,...,z])} creates a dictionary consisting of entries \\axiom{\\spad{x},{}\\spad{y},{}...,{}\\spad{z}}.") (($) "\\spad{dictionary()}\\$\\spad{D} creates an empty dictionary of type \\spad{D}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3994))) 
(-193 S) 
((|constructor| (NIL "This category is a collection of operations common to both categories \\spadtype{Dictionary} and \\spadtype{MultiDictionary}")) (|select!| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{select!(p,d)} destructively changes dictionary \\spad{d} by removing all entries \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})} is not \\spad{true}.")) (|remove!| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{remove!(p,d)} destructively changes dictionary \\spad{d} by removeing all entries \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}.") (($ |#1| $) "\\spad{remove!(x,d)} destructively changes dictionary \\spad{d} by removing all entries \\spad{y} such that \\axiom{\\spad{y} = \\spad{x}}.")) (|dictionary| (($ (|List| |#1|)) "\\spad{dictionary([x,y,...,z])} creates a dictionary consisting of entries \\axiom{\\spad{x},{}\\spad{y},{}...,{}\\spad{z}}.") (($) "\\spad{dictionary()}\\$\\spad{D} creates an empty dictionary of type \\spad{D}."))) 
((-3995 . T)) 
NIL 
(-194) 
((|constructor| (NIL "any solution of a homogeneous linear Diophantine equation can be represented as a sum of minimal solutions,{} which form a \"basis\" (a minimal solution cannot be represented as a nontrivial sum of solutions) in the case of an inhomogeneous linear Diophantine equation,{} each solution is the sum of a inhomogeneous solution and any number of homogeneous solutions therefore,{} it suffices to compute two sets: \\indented{3}{1. all minimal inhomogeneous solutions} \\indented{3}{2. all minimal homogeneous solutions} the algorithm implemented is a completion procedure,{} which enumerates all solutions in a recursive depth-first-search it can be seen as finding monotone paths in a graph for more details see Reference")) (|dioSolve| (((|Record| (|:| |varOrder| (|List| (|Symbol|))) (|:| |inhom| (|Union| (|List| (|Vector| (|NonNegativeInteger|))) "failed")) (|:| |hom| (|List| (|Vector| (|NonNegativeInteger|))))) (|Equation| (|Polynomial| (|Integer|)))) "\\spad{dioSolve(u)} computes a basis of all minimal solutions for linear homogeneous Diophantine equation \\spad{u},{} then all minimal solutions of inhomogeneous equation"))) 
NIL 
NIL 
(-195 S -2621 R) 
((|constructor| (NIL "\\indented{2}{This category represents a finite cartesian product of a given type.} Many categorical properties are preserved under this construction.")) (|dot| ((|#3| $ $) "\\spad{dot(x,y)} computes the inner product of the vectors \\spad{x} and \\spad{y}.")) (|unitVector| (($ (|PositiveInteger|)) "\\spad{unitVector(n)} produces a vector with 1 in position \\spad{n} and zero elsewhere.")) (|directProduct| (($ (|Vector| |#3|)) "\\spad{directProduct(v)} converts the vector \\spad{v} to become a direct product. Error: if the length of \\spad{v} is different from dim.")) (|finiteAggregate| ((|attribute|) "attribute to indicate an aggregate of finite size"))) 
NIL 
((|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-756))) (|HasAttribute| |#3| (QUOTE -3991)) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (QUOTE (-1013)))) 
(-196 -2621 R) 
((|constructor| (NIL "\\indented{2}{This category represents a finite cartesian product of a given type.} Many categorical properties are preserved under this construction.")) (|dot| ((|#2| $ $) "\\spad{dot(x,y)} computes the inner product of the vectors \\spad{x} and \\spad{y}.")) (|unitVector| (($ (|PositiveInteger|)) "\\spad{unitVector(n)} produces a vector with 1 in position \\spad{n} and zero elsewhere.")) (|directProduct| (($ (|Vector| |#2|)) "\\spad{directProduct(v)} converts the vector \\spad{v} to become a direct product. Error: if the length of \\spad{v} is different from dim.")) (|finiteAggregate| ((|attribute|) "attribute to indicate an aggregate of finite size"))) 
((-3988 |has| |#2| (-961)) (-3989 |has| |#2| (-961)) (-3991 |has| |#2| (-6 -3991)) (-3994 . T)) 
NIL 
(-197 -2621 R) 
((|constructor| (NIL "\\indented{2}{This type represents the finite direct or cartesian product of an} underlying component type. This contrasts with simple vectors in that the members can be viewed as having constant length. Thus many categorical properties can by lifted from the underlying component type. Component extraction operations are provided but no updating operations. Thus new direct product elements can either be created by converting vector elements using the \\spadfun{directProduct} function or by taking appropriate linear combinations of basis vectors provided by the \\spad{unitVector} operation."))) 
((-3988 |has| |#2| (-961)) (-3989 |has| |#2| (-961)) (-3991 |has| |#2| (-6 -3991)) (-3994 . T)) 
((OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-312))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312)))) (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (OR (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756)))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-319))) (OR (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-961))))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-190))) (OR (|HasCategory| |#2| (QUOTE (-190))) (-12 (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-1013))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-961))))) (|HasCategory| (-484) (QUOTE (-756))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-1013)))) (|HasAttribute| |#2| (QUOTE -3991)) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-72))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) 
(-198 -2621 A B) 
((|constructor| (NIL "\\indented{2}{This package provides operations which all take as arguments} direct products of elements of some type \\spad{A} and functions from \\spad{A} to another type \\spad{B}. The operations all iterate over their vector argument and either return a value of type \\spad{B} or a direct product over \\spad{B}.")) (|map| (((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2|) (|DirectProduct| |#1| |#2|)) "\\spad{map(f, v)} applies the function \\spad{f} to every element of the vector \\spad{v} producing a new vector containing the values.")) (|reduce| ((|#3| (|Mapping| |#3| |#2| |#3|) (|DirectProduct| |#1| |#2|) |#3|) "\\spad{reduce(func,vec,ident)} combines the elements in \\spad{vec} using the binary function \\spad{func}. Argument \\spad{ident} is returned if the vector is empty.")) (|scan| (((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2| |#3|) (|DirectProduct| |#1| |#2|) |#3|) "\\spad{scan(func,vec,ident)} creates a new vector whose elements are the result of applying reduce to the binary function \\spad{func},{} increasing initial subsequences of the vector \\spad{vec},{} and the element \\spad{ident}."))) 
NIL 
NIL 
(-199) 
((|constructor| (NIL "DisplayPackage allows one to print strings in a nice manner,{} including highlighting substrings.")) (|sayLength| (((|Integer|) (|List| (|String|))) "\\spad{sayLength(l)} returns the length of a list of strings \\spad{l} as an integer.") (((|Integer|) (|String|)) "\\spad{sayLength(s)} returns the length of a string \\spad{s} as an integer.")) (|say| (((|Void|) (|List| (|String|))) "\\spad{say(l)} sends a list of strings \\spad{l} to output.") (((|Void|) (|String|)) "\\spad{say(s)} sends a string \\spad{s} to output.")) (|center| (((|List| (|String|)) (|List| (|String|)) (|Integer|) (|String|)) "\\spad{center(l,i,s)} takes a list of strings \\spad{l},{} and centers them within a list of strings which is \\spad{i} characters long,{} in which the remaining spaces are filled with strings composed of as many repetitions as possible of the last string parameter \\spad{s}.") (((|String|) (|String|) (|Integer|) (|String|)) "\\spad{center(s,i,s)} takes the first string \\spad{s},{} and centers it within a string of length \\spad{i},{} in which the other elements of the string are composed of as many replications as possible of the second indicated string,{} \\spad{s} which must have a length greater than that of an empty string.")) (|copies| (((|String|) (|Integer|) (|String|)) "\\spad{copies(i,s)} will take a string \\spad{s} and create a new string composed of \\spad{i} copies of \\spad{s}.")) (|newLine| (((|String|)) "\\spad{newLine()} sends a new line command to output.")) (|bright| (((|List| (|String|)) (|List| (|String|))) "\\spad{bright(l)} sets the font property of a list of strings,{} \\spad{l},{} to bold-face type.") (((|List| (|String|)) (|String|)) "\\spad{bright(s)} sets the font property of the string \\spad{s} to bold-face type."))) 
NIL 
NIL 
(-200 S) 
((|constructor| (NIL "A division ring (sometimes called a skew field),{} \\spadignore{i.e.} a not necessarily commutative ring where all non-zero elements have multiplicative inverses.")) (|inv| (($ $) "\\spad{inv x} returns the multiplicative inverse of \\spad{x}. Error: if \\spad{x} is 0.")) (** (($ $ (|Integer|)) "\\spad{x**n} returns \\spad{x} raised to the integer power \\spad{n}."))) 
NIL 
NIL 
(-201) 
((|constructor| (NIL "A division ring (sometimes called a skew field),{} \\spadignore{i.e.} a not necessarily commutative ring where all non-zero elements have multiplicative inverses.")) (|inv| (($ $) "\\spad{inv x} returns the multiplicative inverse of \\spad{x}. Error: if \\spad{x} is 0.")) (** (($ $ (|Integer|)) "\\spad{x**n} returns \\spad{x} raised to the integer power \\spad{n}."))) 
((-3987 . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-202 S) 
((|constructor| (NIL "A doubly-linked aggregate serves as a model for a doubly-linked list,{} that is,{} a list which can has links to both next and previous nodes and thus can be efficiently traversed in both directions.")) (|setnext!| (($ $ $) "\\spad{setnext!(u,v)} destructively sets the next node of doubly-linked aggregate \\spad{u} to \\spad{v},{} returning \\spad{v}.")) (|setprevious!| (($ $ $) "\\spad{setprevious!(u,v)} destructively sets the previous node of doubly-linked aggregate \\spad{u} to \\spad{v},{} returning \\spad{v}.")) (|concat!| (($ $ $) "\\spad{concat!(u,v)} destructively concatenates doubly-linked aggregate \\spad{v} to the end of doubly-linked aggregate \\spad{u}.")) (|next| (($ $) "\\spad{next(l)} returns the doubly-linked aggregate beginning with its next element. Error: if \\spad{l} has no next element. Note: \\axiom{next(\\spad{l}) = rest(\\spad{l})} and \\axiom{previous(next(\\spad{l})) = \\spad{l}}.")) (|previous| (($ $) "\\spad{previous(l)} returns the doubly-link list beginning with its previous element. Error: if \\spad{l} has no previous element. Note: \\axiom{next(previous(\\spad{l})) = \\spad{l}}.")) (|tail| (($ $) "\\spad{tail(l)} returns the doubly-linked aggregate \\spad{l} starting at its second element. Error: if \\spad{l} is empty.")) (|head| (($ $) "\\spad{head(l)} returns the first element of a doubly-linked aggregate \\spad{l}. Error: if \\spad{l} is empty.")) (|last| ((|#1| $) "\\spad{last(l)} returns the last element of a doubly-linked aggregate \\spad{l}. Error: if \\spad{l} is empty."))) 
NIL 
NIL 
(-203 S) 
((|constructor| (NIL "This domain provides some nice functions on lists")) (|elt| (((|NonNegativeInteger|) $ "count") "\\axiom{\\spad{l}.\"count\"} returns the number of elements in \\axiom{\\spad{l}}.") (($ $ "sort") "\\axiom{\\spad{l}.sort} returns \\axiom{\\spad{l}} with elements sorted. Note: \\axiom{\\spad{l}.sort = sort(\\spad{l})}") (($ $ "unique") "\\axiom{\\spad{l}.unique} returns \\axiom{\\spad{l}} with duplicates removed. Note: \\axiom{\\spad{l}.unique = removeDuplicates(\\spad{l})}.")) (|datalist| (($ (|List| |#1|)) "\\spad{datalist(l)} creates a datalist from \\spad{l}"))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-204 M) 
((|constructor| (NIL "DiscreteLogarithmPackage implements help functions for discrete logarithms in monoids using small cyclic groups.")) (|shanksDiscLogAlgorithm| (((|Union| (|NonNegativeInteger|) "failed") |#1| |#1| (|NonNegativeInteger|)) "\\spad{shanksDiscLogAlgorithm(b,a,p)} computes \\spad{s} with \\spad{b**s = a} for assuming that \\spad{a} and \\spad{b} are elements in a 'small' cyclic group of order \\spad{p} by Shank's algorithm. Note: this is a subroutine of the function \\spadfun{discreteLog}.")) (** ((|#1| |#1| (|Integer|)) "\\spad{x ** n} returns \\spad{x} raised to the integer power \\spad{n}"))) 
NIL 
NIL 
(-205 R) 
((|constructor| (NIL "Category of modules that extend differential rings. \\blankline"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-206 |vl| R) 
((|constructor| (NIL "\\indented{2}{This type supports distributed multivariate polynomials} whose variables are from a user specified list of symbols. The coefficient ring may be non commutative,{} but the variables are assumed to commute. The term ordering is lexicographic specified by the variable list parameter with the most significant variable first in the list.")) (|reorder| (($ $ (|List| (|Integer|))) "\\spad{reorder(p, perm)} applies the permutation perm to the variables in a polynomial and returns the new correctly ordered polynomial"))) 
(((-3996 "*") |has| |#2| (-146)) (-3987 |has| |#2| (-495)) (-3992 |has| |#2| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-821))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-821)))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-495)))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-473))))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-312))) (|HasAttribute| |#2| (QUOTE -3992)) (|HasCategory| |#2| (QUOTE (-391))) (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#2| (QUOTE (-118))))) 
(-207) 
((|showSummary| (((|Void|) $) "\\spad{showSummary(d)} prints out implementation detail information of domain `d'.")) (|reflect| (($ (|ConstructorCall| (|DomainConstructor|))) "\\spad{reflect cc} returns the domain object designated by the ConstructorCall syntax `cc'. The constructor implied by `cc' must be known to the system since it is instantiated.")) (|reify| (((|ConstructorCall| (|DomainConstructor|)) $) "\\spad{reify(d)} returns the abstract syntax for the domain `x'.")) (|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Create: October 18,{} 2007. Date Last Updated: December 20,{} 2008. Basic Operations: coerce,{} reify Related Constructors: Type,{} Syntax,{} OutputForm Also See: Type,{} ConstructorCall") (((|DomainConstructor|) $) "\\spad{constructor(d)} returns the domain constructor that is instantiated to the domain object `d'."))) 
NIL 
NIL 
(-208) 
((|constructor| (NIL "This domain provides representations for domains constructors.")) (|functorData| (((|FunctorData|) $) "\\spad{functorData x} returns the functor data associated with the domain constructor \\spad{x}."))) 
NIL 
NIL 
(-209) 
((|constructor| (NIL "Represntation of domain templates resulting from compiling a domain constructor")) (|#| (((|NonNegativeInteger|) $) "\\spad{\\# x} returns the length of the domain template \\spad{x}."))) 
NIL 
NIL 
(-210 |n| R M S) 
((|constructor| (NIL "This constructor provides a direct product type with a left matrix-module view."))) 
((-3991 OR (-2562 (|has| |#4| (-961)) (|has| |#4| (-190))) (|has| |#4| (-6 -3991)) (-2562 (|has| |#4| (-961)) (|has| |#4| (-809 (-1089))))) (-3988 |has| |#4| (-961)) (-3989 |has| |#4| (-961)) (-3994 . T)) 
((OR (-12 (|HasCategory| |#4| (QUOTE (-21))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-319))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-663))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-717))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-756))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-961))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|))))) (|HasCategory| |#4| (QUOTE (-312))) (OR (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (QUOTE (-961)))) (OR (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-312)))) (|HasCategory| |#4| (QUOTE (-961))) (|HasCategory| |#4| (QUOTE (-663))) (|HasCategory| |#4| (QUOTE (-717))) (OR (|HasCategory| |#4| (QUOTE (-717))) (|HasCategory| |#4| (QUOTE (-756)))) (|HasCategory| |#4| (QUOTE (-756))) (|HasCategory| |#4| (QUOTE (-319))) (OR (-12 (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-580 (-484)))) (|HasCategory| |#4| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#4| (QUOTE (-580 (-484)))) (|HasCategory| |#4| (QUOTE (-961))))) (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (QUOTE (-961)))) (|HasCategory| |#4| (QUOTE (-190))) (OR (|HasCategory| |#4| (QUOTE (-190))) (-12 (|HasCategory| |#4| (QUOTE (-189))) (|HasCategory| |#4| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#4| (QUOTE (-811 (-1089)))) (|HasCategory| |#4| (QUOTE (-961)))) (|HasCategory| |#4| (QUOTE (-809 (-1089))))) (|HasCategory| |#4| (QUOTE (-1013))) (OR (-12 (|HasCategory| |#4| (QUOTE (-21))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-663))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-717))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-756))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#4| (QUOTE (-961)))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#4| (QUOTE (-1013))))) (OR (-12 (|HasCategory| |#4| (QUOTE (-21))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-717))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-756))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-484)))) (|HasCategory| |#4| (QUOTE (-1013)))) (-12 (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-663))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (|HasCategory| |#4| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#4| (QUOTE (-21))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-717))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-756))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-484)))) (|HasCategory| |#4| (QUOTE (-1013)))) (-12 (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-663))) (|HasCategory| |#4| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-484)))) (|HasCategory| |#4| (QUOTE (-961))))) (|HasCategory| (-484) (QUOTE (-756))) (-12 (|HasCategory| |#4| (QUOTE (-580 (-484)))) (|HasCategory| |#4| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (QUOTE (-961)))) (-12 (|HasCategory| |#4| (QUOTE (-811 (-1089)))) (|HasCategory| |#4| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-961)))) (-12 (|HasCategory| |#4| (QUOTE (-189))) (|HasCategory| |#4| (QUOTE (-961))))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-484)))) (|HasCategory| |#4| (QUOTE (-1013)))) (OR (-12 (|HasCategory| |#4| (QUOTE (-950 (-484)))) (|HasCategory| |#4| (QUOTE (-1013)))) (|HasCategory| |#4| (QUOTE (-961)))) (-12 (|HasCategory| |#4| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#4| (QUOTE (-1013)))) (OR (-12 (|HasCategory| |#4| (QUOTE (-809 (-1089)))) (|HasCategory| |#4| (QUOTE (-961)))) (|HasAttribute| |#4| (QUOTE -3991)) (-12 (|HasCategory| |#4| (QUOTE (-190))) (|HasCategory| |#4| (QUOTE (-961))))) (-12 (|HasCategory| |#4| (QUOTE (-189))) (|HasCategory| |#4| (QUOTE (-961)))) (-12 (|HasCategory| |#4| (QUOTE (-811 (-1089)))) (|HasCategory| |#4| (QUOTE (-961)))) (|HasCategory| |#4| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-21))) (|HasCategory| |#4| (QUOTE (-23))) (|HasCategory| |#4| (QUOTE (-104))) (|HasCategory| |#4| (QUOTE (-25))) (|HasCategory| |#4| (QUOTE (-552 (-772)))) (|HasCategory| |#4| (QUOTE (-72))) (-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|))))) 
(-211 |n| R S) 
((|constructor| (NIL "This constructor provides a direct product of \\spad{R}-modules with an \\spad{R}-module view."))) 
((-3991 OR (-2562 (|has| |#3| (-961)) (|has| |#3| (-190))) (|has| |#3| (-6 -3991)) (-2562 (|has| |#3| (-961)) (|has| |#3| (-809 (-1089))))) (-3988 |has| |#3| (-961)) (-3989 |has| |#3| (-961)) (-3994 . T)) 
((OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|))))) (|HasCategory| |#3| (QUOTE (-312))) (OR (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-312)))) (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-717))) (OR (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-756)))) (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-319))) (OR (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-580 (-484)))) (|HasCategory| |#3| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#3| (QUOTE (-580 (-484)))) (|HasCategory| |#3| (QUOTE (-961))))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasCategory| |#3| (QUOTE (-190))) (OR (|HasCategory| |#3| (QUOTE (-190))) (-12 (|HasCategory| |#3| (QUOTE (-189))) (|HasCategory| |#3| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#3| (QUOTE (-811 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasCategory| |#3| (QUOTE (-809 (-1089))))) (|HasCategory| |#3| (QUOTE (-1013))) (OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#3| (QUOTE (-1013))))) (OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-961))))) (|HasCategory| (-484) (QUOTE (-756))) (-12 (|HasCategory| |#3| (QUOTE (-580 (-484)))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-811 (-1089)))) (|HasCategory| |#3| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-189))) (|HasCategory| |#3| (QUOTE (-961))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (OR (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#3| (QUOTE (-1013)))) (OR (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasAttribute| |#3| (QUOTE -3991)) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-961))))) (-12 (|HasCategory| |#3| (QUOTE (-189))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-811 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-552 (-772)))) (|HasCategory| |#3| (QUOTE (-72))) (-12 (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|))))) 
(-212 A R S V E) 
((|constructor| (NIL "\\spadtype{DifferentialPolynomialCategory} is a category constructor specifying basic functions in an ordinary differential polynomial ring with a given ordered set of differential indeterminates. In addition,{} it implements defaults for the basic functions. The functions \\spadfun{order} and \\spadfun{weight} are extended from the set of derivatives of differential indeterminates to the set of differential polynomials. Other operations provided on differential polynomials are \\spadfun{leader},{} \\spadfun{initial},{} \\spadfun{separant},{} \\spadfun{differentialVariables},{} and \\spadfun{isobaric?}. Furthermore,{} if the ground ring is a differential ring,{} then evaluation (substitution of differential indeterminates by elements of the ground ring or by differential polynomials) is provided by \\spadfun{eval}. A convenient way of referencing derivatives is provided by the functions \\spadfun{makeVariable}. \\blankline To construct a domain using this constructor,{} one needs to provide a ground ring \\spad{R},{} an ordered set \\spad{S} of differential indeterminates,{} a ranking \\spad{V} on the set of derivatives of the differential indeterminates,{} and a set \\spad{E} of exponents in bijection with the set of differential monomials in the given differential indeterminates. \\blankline")) (|separant| (($ $) "\\spad{separant(p)} returns the partial derivative of the differential polynomial \\spad{p} with respect to its leader.")) (|initial| (($ $) "\\spad{initial(p)} returns the leading coefficient when the differential polynomial \\spad{p} is written as a univariate polynomial in its leader.")) (|leader| ((|#4| $) "\\spad{leader(p)} returns the derivative of the highest rank appearing in the differential polynomial \\spad{p} Note: an error occurs if \\spad{p} is in the ground ring.")) (|isobaric?| (((|Boolean|) $) "\\spad{isobaric?(p)} returns \\spad{true} if every differential monomial appearing in the differential polynomial \\spad{p} has same weight,{} and returns \\spad{false} otherwise.")) (|weight| (((|NonNegativeInteger|) $ |#3|) "\\spad{weight(p, s)} returns the maximum weight of all differential monomials appearing in the differential polynomial \\spad{p} when \\spad{p} is viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.") (((|NonNegativeInteger|) $) "\\spad{weight(p)} returns the maximum weight of all differential monomials appearing in the differential polynomial \\spad{p}.")) (|weights| (((|List| (|NonNegativeInteger|)) $ |#3|) "\\spad{weights(p, s)} returns a list of weights of differential monomials appearing in the differential polynomial \\spad{p} when \\spad{p} is viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.") (((|List| (|NonNegativeInteger|)) $) "\\spad{weights(p)} returns a list of weights of differential monomials appearing in differential polynomial \\spad{p}.")) (|degree| (((|NonNegativeInteger|) $ |#3|) "\\spad{degree(p, s)} returns the maximum degree of the differential polynomial \\spad{p} viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(p)} returns the order of the differential polynomial \\spad{p},{} which is the maximum number of differentiations of a differential indeterminate,{} among all those appearing in \\spad{p}.") (((|NonNegativeInteger|) $ |#3|) "\\spad{order(p,s)} returns the order of the differential polynomial \\spad{p} in differential indeterminate \\spad{s}.")) (|differentialVariables| (((|List| |#3|) $) "\\spad{differentialVariables(p)} returns a list of differential indeterminates occurring in a differential polynomial \\spad{p}.")) (|makeVariable| (((|Mapping| $ (|NonNegativeInteger|)) $) "\\spad{makeVariable(p)} views \\spad{p} as an element of a differential ring,{} in such a way that the \\spad{n}-th derivative of \\spad{p} may be simply referenced as \\spad{z}.\\spad{n} where \\spad{z} := makeVariable(\\spad{p}). Note: In the interpreter,{} \\spad{z} is given as an internal map,{} which may be ignored.") (((|Mapping| $ (|NonNegativeInteger|)) |#3|) "\\spad{makeVariable(s)} views \\spad{s} as a differential indeterminate,{} in such a way that the \\spad{n}-th derivative of \\spad{s} may be simply referenced as \\spad{z}.\\spad{n} where \\spad{z} :=makeVariable(\\spad{s}). Note: In the interpreter,{} \\spad{z} is given as an internal map,{} which may be ignored."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-190)))) 
(-213 R S V E) 
((|constructor| (NIL "\\spadtype{DifferentialPolynomialCategory} is a category constructor specifying basic functions in an ordinary differential polynomial ring with a given ordered set of differential indeterminates. In addition,{} it implements defaults for the basic functions. The functions \\spadfun{order} and \\spadfun{weight} are extended from the set of derivatives of differential indeterminates to the set of differential polynomials. Other operations provided on differential polynomials are \\spadfun{leader},{} \\spadfun{initial},{} \\spadfun{separant},{} \\spadfun{differentialVariables},{} and \\spadfun{isobaric?}. Furthermore,{} if the ground ring is a differential ring,{} then evaluation (substitution of differential indeterminates by elements of the ground ring or by differential polynomials) is provided by \\spadfun{eval}. A convenient way of referencing derivatives is provided by the functions \\spadfun{makeVariable}. \\blankline To construct a domain using this constructor,{} one needs to provide a ground ring \\spad{R},{} an ordered set \\spad{S} of differential indeterminates,{} a ranking \\spad{V} on the set of derivatives of the differential indeterminates,{} and a set \\spad{E} of exponents in bijection with the set of differential monomials in the given differential indeterminates. \\blankline")) (|separant| (($ $) "\\spad{separant(p)} returns the partial derivative of the differential polynomial \\spad{p} with respect to its leader.")) (|initial| (($ $) "\\spad{initial(p)} returns the leading coefficient when the differential polynomial \\spad{p} is written as a univariate polynomial in its leader.")) (|leader| ((|#3| $) "\\spad{leader(p)} returns the derivative of the highest rank appearing in the differential polynomial \\spad{p} Note: an error occurs if \\spad{p} is in the ground ring.")) (|isobaric?| (((|Boolean|) $) "\\spad{isobaric?(p)} returns \\spad{true} if every differential monomial appearing in the differential polynomial \\spad{p} has same weight,{} and returns \\spad{false} otherwise.")) (|weight| (((|NonNegativeInteger|) $ |#2|) "\\spad{weight(p, s)} returns the maximum weight of all differential monomials appearing in the differential polynomial \\spad{p} when \\spad{p} is viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.") (((|NonNegativeInteger|) $) "\\spad{weight(p)} returns the maximum weight of all differential monomials appearing in the differential polynomial \\spad{p}.")) (|weights| (((|List| (|NonNegativeInteger|)) $ |#2|) "\\spad{weights(p, s)} returns a list of weights of differential monomials appearing in the differential polynomial \\spad{p} when \\spad{p} is viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.") (((|List| (|NonNegativeInteger|)) $) "\\spad{weights(p)} returns a list of weights of differential monomials appearing in differential polynomial \\spad{p}.")) (|degree| (((|NonNegativeInteger|) $ |#2|) "\\spad{degree(p, s)} returns the maximum degree of the differential polynomial \\spad{p} viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(p)} returns the order of the differential polynomial \\spad{p},{} which is the maximum number of differentiations of a differential indeterminate,{} among all those appearing in \\spad{p}.") (((|NonNegativeInteger|) $ |#2|) "\\spad{order(p,s)} returns the order of the differential polynomial \\spad{p} in differential indeterminate \\spad{s}.")) (|differentialVariables| (((|List| |#2|) $) "\\spad{differentialVariables(p)} returns a list of differential indeterminates occurring in a differential polynomial \\spad{p}.")) (|makeVariable| (((|Mapping| $ (|NonNegativeInteger|)) $) "\\spad{makeVariable(p)} views \\spad{p} as an element of a differential ring,{} in such a way that the \\spad{n}-th derivative of \\spad{p} may be simply referenced as \\spad{z}.\\spad{n} where \\spad{z} := makeVariable(\\spad{p}). Note: In the interpreter,{} \\spad{z} is given as an internal map,{} which may be ignored.") (((|Mapping| $ (|NonNegativeInteger|)) |#2|) "\\spad{makeVariable(s)} views \\spad{s} as a differential indeterminate,{} in such a way that the \\spad{n}-th derivative of \\spad{s} may be simply referenced as \\spad{z}.\\spad{n} where \\spad{z} :=makeVariable(\\spad{s}). Note: In the interpreter,{} \\spad{z} is given as an internal map,{} which may be ignored."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-214 S) 
((|constructor| (NIL "A dequeue is a doubly ended stack,{} that is,{} a bag where first items inserted are the first items extracted,{} at either the front or the back end of the data structure.")) (|reverse!| (($ $) "\\spad{reverse!(d)} destructively replaces \\spad{d} by its reverse dequeue,{} \\spadignore{i.e.} the top (front) element is now the bottom (back) element,{} and so on.")) (|extractBottom!| ((|#1| $) "\\spad{extractBottom!(d)} destructively extracts the bottom (back) element from the dequeue \\spad{d}. Error: if \\spad{d} is empty.")) (|extractTop!| ((|#1| $) "\\spad{extractTop!(d)} destructively extracts the top (front) element from the dequeue \\spad{d}. Error: if \\spad{d} is empty.")) (|insertBottom!| ((|#1| |#1| $) "\\spad{insertBottom!(x,d)} destructively inserts \\spad{x} into the dequeue \\spad{d} at the bottom (back) of the dequeue.")) (|insertTop!| ((|#1| |#1| $) "\\spad{insertTop!(x,d)} destructively inserts \\spad{x} into the dequeue \\spad{d},{} that is,{} at the top (front) of the dequeue. The element previously at the top of the dequeue becomes the second in the dequeue,{} and so on.")) (|bottom!| ((|#1| $) "\\spad{bottom!(d)} returns the element at the bottom (back) of the dequeue.")) (|top!| ((|#1| $) "\\spad{top!(d)} returns the element at the top (front) of the dequeue.")) (|height| (((|NonNegativeInteger|) $) "\\spad{height(d)} returns the number of elements in dequeue \\spad{d}. Note: \\axiom{height(\\spad{d}) = \\# \\spad{d}}.")) (|dequeue| (($ (|List| |#1|)) "\\spad{dequeue([x,y,...,z])} creates a dequeue with first (top or front) element \\spad{x},{} second element \\spad{y},{}...,{}and last (bottom or back) element \\spad{z}.") (($) "\\spad{dequeue()}\\$\\spad{D} creates an empty dequeue of type \\spad{D}."))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-215 |Ex|) 
((|constructor| (NIL "TopLevelDrawFunctions provides top level functions for drawing graphics of expressions.")) (|makeObject| (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSurface| |#1|) (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|))) "\\spad{makeObject(surface(f(u,v),g(u,v),h(u,v)),u = a..b,v = c..d)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{h(t)} is the default title.") (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSurface| |#1|) (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(surface(f(u,v),g(u,v),h(u,v)),u = a..b,v = c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{h(t)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeSpace| (|DoubleFloat|)) |#1| (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|))) "\\spad{makeObject(f(x,y),x = a..b,y = c..d)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{f(x,y)} appears as the default title.") (((|ThreeSpace| (|DoubleFloat|)) |#1| (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(f(x,y),x = a..b,y = c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{f(x,y)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSpaceCurve| |#1|) (|SegmentBinding| (|Float|))) "\\spad{makeObject(curve(f(t),g(t),h(t)),t = a..b)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{h(t)} is the default title.") (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSpaceCurve| |#1|) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(curve(f(t),g(t),h(t)),t = a..b,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{h(t)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.")) (|draw| (((|ThreeDimensionalViewport|) (|ParametricSurface| |#1|) (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|))) "\\spad{draw(surface(f(u,v),g(u,v),h(u,v)),u = a..b,v = c..d)} draws the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{h(t)} is the default title.") (((|ThreeDimensionalViewport|) (|ParametricSurface| |#1|) (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(surface(f(u,v),g(u,v),h(u,v)),u = a..b,v = c..d,l)} draws the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{h(t)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) |#1| (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|))) "\\spad{draw(f(x,y),x = a..b,y = c..d)} draws the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{f(x,y)} appears in the title bar.") (((|ThreeDimensionalViewport|) |#1| (|SegmentBinding| (|Float|)) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(f(x,y),x = a..b,y = c..d,l)} draws the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; \\spad{f(x,y)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|ParametricSpaceCurve| |#1|) (|SegmentBinding| (|Float|))) "\\spad{draw(curve(f(t),g(t),h(t)),t = a..b)} draws the graph of the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{h(t)} is the default title.") (((|ThreeDimensionalViewport|) (|ParametricSpaceCurve| |#1|) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(curve(f(t),g(t),h(t)),t = a..b,l)} draws the graph of the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{h(t)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|TwoDimensionalViewport|) (|ParametricPlaneCurve| |#1|) (|SegmentBinding| (|Float|))) "\\spad{draw(curve(f(t),g(t)),t = a..b)} draws the graph of the parametric curve \\spad{x = f(t), y = g(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{(f(t),g(t))} appears in the title bar.") (((|TwoDimensionalViewport|) (|ParametricPlaneCurve| |#1|) (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(curve(f(t),g(t)),t = a..b,l)} draws the graph of the parametric curve \\spad{x = f(t), y = g(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{(f(t),g(t))} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|TwoDimensionalViewport|) |#1| (|SegmentBinding| (|Float|))) "\\spad{draw(f(x),x = a..b)} draws the graph of \\spad{y = f(x)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{f(x)} appears in the title bar.") (((|TwoDimensionalViewport|) |#1| (|SegmentBinding| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(f(x),x = a..b,l)} draws the graph of \\spad{y = f(x)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; \\spad{f(x)} is the default title,{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied."))) 
NIL 
NIL 
(-216) 
((|constructor| (NIL "TopLevelDrawFunctionsForCompiledFunctions provides top level functions for drawing graphics of expressions.")) (|recolor| (((|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) "\\spad{recolor()},{} uninteresting to top level user; exported in order to compile package.")) (|makeObject| (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSurface| (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|Segment| (|Float|))) "\\spad{makeObject(surface(f,g,h),a..b,c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}.") (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSurface| (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(surface(f,g,h),a..b,c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|))) "\\spad{makeObject(f,a..b,c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric surface \\spad{f(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}.") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(f,a..b,c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric surface \\spad{f(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|))) "\\spad{makeObject(f,a..b,c..d)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}.") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(f,a..b,c..d,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)},{} and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|Float|))) "\\spad{makeObject(sp,curve(f,g,h),a..b)} returns the space \\spad{sp} of the domain \\spadtype{ThreeSpace} with the addition of the graph of the parametric curve \\spad{x = f(t), y = g(t), z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}.") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(curve(f,g,h),a..b,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric curve \\spad{x = f(t), y = g(t), z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSpaceCurve| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|))) "\\spad{makeObject(sp,curve(f,g,h),a..b)} returns the space \\spad{sp} of the domain \\spadtype{ThreeSpace} with the addition of the graph of the parametric curve \\spad{x = f(t), y = g(t), z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}.") (((|ThreeSpace| (|DoubleFloat|)) (|ParametricSpaceCurve| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{makeObject(curve(f,g,h),a..b,l)} returns a space of the domain \\spadtype{ThreeSpace} which contains the graph of the parametric curve \\spad{x = f(t), y = g(t), z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}; The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.")) (|draw| (((|ThreeDimensionalViewport|) (|ParametricSurface| (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|Segment| (|Float|))) "\\spad{draw(surface(f,g,h),a..b,c..d)} draws the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}.") (((|ThreeDimensionalViewport|) (|ParametricSurface| (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(surface(f,g,h),a..b,c..d)} draws the graph of the parametric surface \\spad{x = f(u,v)},{} \\spad{y = g(u,v)},{} \\spad{z = h(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}; The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|))) "\\spad{draw(f,a..b,c..d)} draws the graph of the parametric surface \\spad{f(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)} The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(f,a..b,c..d)} draws the graph of the parametric surface \\spad{f(u,v)} as \\spad{u} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{v} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|))) "\\spad{draw(f,a..b,c..d)} draws the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}.") (((|ThreeDimensionalViewport|) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(f,a..b,c..d,l)} draws the graph of \\spad{z = f(x,y)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)} and \\spad{y} ranges from \\spad{min(c,d)} to \\spad{max(c,d)}. and the options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|Float|))) "\\spad{draw(f,a..b,l)} draws the graph of the parametric curve \\spad{f} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}.") (((|ThreeDimensionalViewport|) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(f,a..b,l)} draws the graph of the parametric curve \\spad{f} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|ParametricSpaceCurve| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|))) "\\spad{draw(curve(f,g,h),a..b,l)} draws the graph of the parametric curve \\spad{x = f(t), y = g(t), z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}.") (((|ThreeDimensionalViewport|) (|ParametricSpaceCurve| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(curve(f,g,h),a..b,l)} draws the graph of the parametric curve \\spad{x = f(t), y = g(t), z = h(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|TwoDimensionalViewport|) (|ParametricPlaneCurve| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|))) "\\spad{draw(curve(f,g),a..b)} draws the graph of the parametric curve \\spad{x = f(t), y = g(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}.") (((|TwoDimensionalViewport|) (|ParametricPlaneCurve| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(curve(f,g),a..b,l)} draws the graph of the parametric curve \\spad{x = f(t), y = g(t)} as \\spad{t} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|TwoDimensionalViewport|) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|))) "\\spad{draw(f,a..b)} draws the graph of \\spad{y = f(x)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}.") (((|TwoDimensionalViewport|) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|Float|)) (|List| (|DrawOption|))) "\\spad{draw(f,a..b,l)} draws the graph of \\spad{y = f(x)} as \\spad{x} ranges from \\spad{min(a,b)} to \\spad{max(a,b)}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied."))) 
NIL 
NIL 
(-217 R |Ex|) 
((|constructor| (NIL "TopLevelDrawFunctionsForAlgebraicCurves provides top level functions for drawing non-singular algebraic curves.")) (|draw| (((|TwoDimensionalViewport|) (|Equation| |#2|) (|Symbol|) (|Symbol|) (|List| (|DrawOption|))) "\\spad{draw(f(x,y) = g(x,y),x,y,l)} draws the graph of a polynomial equation. The list \\spad{l} of draw options must specify a region in the plane in which the curve is to sketched."))) 
NIL 
NIL 
(-218) 
((|setClipValue| (((|DoubleFloat|) (|DoubleFloat|)) "\\spad{setClipValue(x)} sets to \\spad{x} the maximum value to plot when drawing complex functions. Returns \\spad{x}.")) (|setImagSteps| (((|Integer|) (|Integer|)) "\\spad{setImagSteps(i)} sets to \\spad{i} the number of steps to use in the imaginary direction when drawing complex functions. Returns \\spad{i}.")) (|setRealSteps| (((|Integer|) (|Integer|)) "\\spad{setRealSteps(i)} sets to \\spad{i} the number of steps to use in the real direction when drawing complex functions. Returns \\spad{i}.")) (|drawComplexVectorField| (((|ThreeDimensionalViewport|) (|Mapping| (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{drawComplexVectorField(f,rRange,iRange)} draws a complex vector field using arrows on the \\spad{x--y} plane. These vector fields should be viewed from the top by pressing the \"XY\" translate button on the 3-\\spad{d} viewport control panel.\\newline Sample call: \\indented{3}{\\spad{f z == sin z}} \\indented{3}{\\spad{drawComplexVectorField(f, -2..2, -2..2)}} Parameter descriptions: \\indented{2}{\\spad{f} : the function to draw} \\indented{2}{\\spad{rRange} : the range of the real values} \\indented{2}{\\spad{iRange} : the range of the imaginary values} Call the functions \\axiomFunFrom{setRealSteps}{DrawComplex} and \\axiomFunFrom{setImagSteps}{DrawComplex} to change the number of steps used in each direction.")) (|drawComplex| (((|ThreeDimensionalViewport|) (|Mapping| (|Complex| (|DoubleFloat|)) (|Complex| (|DoubleFloat|))) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Boolean|)) "\\spad{drawComplex(f,rRange,iRange,arrows?)} draws a complex function as a height field. It uses the complex norm as the height and the complex argument as the color. It will optionally draw arrows on the surface indicating the direction of the complex value.\\newline Sample call: \\indented{2}{\\spad{f z == exp(1/z)}} \\indented{2}{\\spad{drawComplex(f, 0.3..3, 0..2*\\%pi, false)}} Parameter descriptions: \\indented{2}{f:\\space{2}the function to draw} \\indented{2}{\\spad{rRange} : the range of the real values} \\indented{2}{\\spad{iRange} : the range of imaginary values} \\indented{2}{\\spad{arrows?} : a flag indicating whether to draw the phase arrows for \\spad{f}} Call the functions \\axiomFunFrom{setRealSteps}{DrawComplex} and \\axiomFunFrom{setImagSteps}{DrawComplex} to change the number of steps used in each direction."))) 
NIL 
NIL 
(-219 R) 
((|constructor| (NIL "Hack for the draw interface. DrawNumericHack provides a \"coercion\" from something of the form \\spad{x = a..b} where \\spad{a} and \\spad{b} are formal expressions to a binding of the form \\spad{x = c..d} where \\spad{c} and \\spad{d} are the numerical values of \\spad{a} and \\spad{b}. This \"coercion\" fails if \\spad{a} and \\spad{b} contains symbolic variables,{} but is meant for expressions involving \\%\\spad{pi}.")) (|coerce| (((|SegmentBinding| (|Float|)) (|SegmentBinding| (|Expression| |#1|))) "\\spad{coerce(x = a..b)} returns \\spad{x = c..d} where \\spad{c} and \\spad{d} are the numerical values of \\spad{a} and \\spad{b}."))) 
NIL 
NIL 
(-220) 
((|constructor| (NIL "TopLevelDrawFunctionsForPoints provides top level functions for drawing curves and surfaces described by sets of points.")) (|draw| (((|ThreeDimensionalViewport|) (|List| (|DoubleFloat|)) (|List| (|DoubleFloat|)) (|List| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{draw(lx,ly,lz,l)} draws the surface constructed by projecting the values in the \\axiom{\\spad{lz}} list onto the rectangular grid formed by the The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|ThreeDimensionalViewport|) (|List| (|DoubleFloat|)) (|List| (|DoubleFloat|)) (|List| (|DoubleFloat|))) "\\spad{draw(lx,ly,lz)} draws the surface constructed by projecting the values in the \\axiom{\\spad{lz}} list onto the rectangular grid formed by the \\axiom{\\spad{lx} \\spad{X} \\spad{ly}}.") (((|TwoDimensionalViewport|) (|List| (|Point| (|DoubleFloat|))) (|List| (|DrawOption|))) "\\spad{draw(lp,l)} plots the curve constructed from the list of points \\spad{lp}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|TwoDimensionalViewport|) (|List| (|Point| (|DoubleFloat|)))) "\\spad{draw(lp)} plots the curve constructed from the list of points \\spad{lp}.") (((|TwoDimensionalViewport|) (|List| (|DoubleFloat|)) (|List| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{draw(lx,ly,l)} plots the curve constructed of points (\\spad{x},{}\\spad{y}) for \\spad{x} in \\spad{lx} for \\spad{y} in \\spad{ly}. The options contained in the list \\spad{l} of the domain \\spad{DrawOption} are applied.") (((|TwoDimensionalViewport|) (|List| (|DoubleFloat|)) (|List| (|DoubleFloat|))) "\\spad{draw(lx,ly)} plots the curve constructed of points (\\spad{x},{}\\spad{y}) for \\spad{x} in \\spad{lx} for \\spad{y} in \\spad{ly}."))) 
NIL 
NIL 
(-221) 
((|constructor| (NIL "DrawOption allows the user to specify defaults for the creation and rendering of plots.")) (|option?| (((|Boolean|) (|List| $) (|Symbol|)) "\\spad{option?()} is not to be used at the top level; option? internally returns \\spad{true} for drawing options which are indicated in a draw command,{} or \\spad{false} for those which are not.")) (|option| (((|Union| (|Any|) "failed") (|List| $) (|Symbol|)) "\\spad{option()} is not to be used at the top level; option determines internally which drawing options are indicated in a draw command.")) (|unit| (($ (|List| (|Float|))) "\\spad{unit(lf)} will mark off the units according to the indicated list \\spad{lf}. This option is expressed in the form \\spad{unit == [f1,f2]}.")) (|coord| (($ (|Mapping| (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)))) "\\spad{coord(p)} specifies a change of coordinates of point \\spad{p}. This option is expressed in the form \\spad{coord == p}.")) (|tubePoints| (($ (|PositiveInteger|)) "\\spad{tubePoints(n)} specifies the number of points,{} \\spad{n},{} defining the circle which creates the tube around a 3D curve,{} the default is 6. This option is expressed in the form \\spad{tubePoints == n}.")) (|var2Steps| (($ (|PositiveInteger|)) "\\spad{var2Steps(n)} indicates the number of subdivisions,{} \\spad{n},{} of the second range variable. This option is expressed in the form \\spad{var2Steps == n}.")) (|var1Steps| (($ (|PositiveInteger|)) "\\spad{var1Steps(n)} indicates the number of subdivisions,{} \\spad{n},{} of the first range variable. This option is expressed in the form \\spad{var1Steps == n}.")) (|space| (($ (|ThreeSpace| (|DoubleFloat|))) "\\spad{space specifies} the space into which we will draw. If none is given then a new space is created.")) (|ranges| (($ (|List| (|Segment| (|Float|)))) "\\spad{ranges(l)} provides a list of user-specified ranges \\spad{l}. This option is expressed in the form \\spad{ranges == l}.")) (|range| (($ (|List| (|Segment| (|Fraction| (|Integer|))))) "\\spad{range([i])} provides a user-specified range \\spad{i}. This option is expressed in the form \\spad{range == [i]}.") (($ (|List| (|Segment| (|Float|)))) "\\spad{range([l])} provides a user-specified range \\spad{l}. This option is expressed in the form \\spad{range == [l]}.")) (|tubeRadius| (($ (|Float|)) "\\spad{tubeRadius(r)} specifies a radius,{} \\spad{r},{} for a tube plot around a 3D curve; is expressed in the form \\spad{tubeRadius == 4}.")) (|colorFunction| (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) "\\spad{colorFunction(f(x,y,z))} specifies the color for three dimensional plots as a function of \\spad{x},{} \\spad{y},{} and \\spad{z} coordinates. This option is expressed in the form \\spad{colorFunction == f(x,y,z)}.") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) "\\spad{colorFunction(f(u,v))} specifies the color for three dimensional plots as a function based upon the two parametric variables. This option is expressed in the form \\spad{colorFunction == f(u,v)}.") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) "\\spad{colorFunction(f(z))} specifies the color based upon the \\spad{z}-component of three dimensional plots. This option is expressed in the form \\spad{colorFunction == f(z)}.")) (|curveColor| (($ (|Palette|)) "\\spad{curveColor(p)} specifies a color index for 2D graph curves from the spadcolors palette \\spad{p}. This option is expressed in the form \\spad{curveColor ==p}.") (($ (|Float|)) "\\spad{curveColor(v)} specifies a color,{} \\spad{v},{} for 2D graph curves. This option is expressed in the form \\spad{curveColor == v}.")) (|pointColor| (($ (|Palette|)) "\\spad{pointColor(p)} specifies a color index for 2D graph points from the spadcolors palette \\spad{p}. This option is expressed in the form \\spad{pointColor == p}.") (($ (|Float|)) "\\spad{pointColor(v)} specifies a color,{} \\spad{v},{} for 2D graph points. This option is expressed in the form \\spad{pointColor == v}.")) (|coordinates| (($ (|Mapping| (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)))) "\\spad{coordinates(p)} specifies a change of coordinate systems of point \\spad{p}. This option is expressed in the form \\spad{coordinates == p}.")) (|toScale| (($ (|Boolean|)) "\\spad{toScale(b)} specifies whether or not a plot is to be drawn to scale; if \\spad{b} is \\spad{true} it is drawn to scale,{} if \\spad{b} is \\spad{false} it is not. This option is expressed in the form \\spad{toScale == b}.")) (|style| (($ (|String|)) "\\spad{style(s)} specifies the drawing style in which the graph will be plotted by the indicated string \\spad{s}. This option is expressed in the form \\spad{style == s}.")) (|title| (($ (|String|)) "\\spad{title(s)} specifies a title for a plot by the indicated string \\spad{s}. This option is expressed in the form \\spad{title == s}.")) (|viewpoint| (($ (|Record| (|:| |theta| (|DoubleFloat|)) (|:| |phi| (|DoubleFloat|)) (|:| |scale| (|DoubleFloat|)) (|:| |scaleX| (|DoubleFloat|)) (|:| |scaleY| (|DoubleFloat|)) (|:| |scaleZ| (|DoubleFloat|)) (|:| |deltaX| (|DoubleFloat|)) (|:| |deltaY| (|DoubleFloat|)))) "\\spad{viewpoint(vp)} creates a viewpoint data structure corresponding to the list of values. The values are interpreted as [theta,{} phi,{} scale,{} scaleX,{} scaleY,{} scaleZ,{} deltaX,{} deltaY]. This option is expressed in the form \\spad{viewpoint == ls}.")) (|clip| (($ (|List| (|Segment| (|Float|)))) "\\spad{clip([l])} provides ranges for user-defined clipping as specified in the list \\spad{l}. This option is expressed in the form \\spad{clip == [l]}.") (($ (|Boolean|)) "\\spad{clip(b)} turns 2D clipping on if \\spad{b} is \\spad{true},{} or off if \\spad{b} is \\spad{false}. This option is expressed in the form \\spad{clip == b}.")) (|adaptive| (($ (|Boolean|)) "\\spad{adaptive(b)} turns adaptive 2D plotting on if \\spad{b} is \\spad{true},{} or off if \\spad{b} is \\spad{false}. This option is expressed in the form \\spad{adaptive == b}."))) 
NIL 
NIL 
(-222) 
((|constructor| (NIL "This package \\undocumented{}")) (|units| (((|List| (|Float|)) (|List| (|DrawOption|)) (|List| (|Float|))) "\\spad{units(l,u)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{unit}. If the option does not exist the value,{} \\spad{u} is returned.")) (|coord| (((|Mapping| (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|))) (|List| (|DrawOption|)) (|Mapping| (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)))) "\\spad{coord(l,p)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{coord}. If the option does not exist the value,{} \\spad{p} is returned.")) (|tubeRadius| (((|Float|) (|List| (|DrawOption|)) (|Float|)) "\\spad{tubeRadius(l,n)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{tubeRadius}. If the option does not exist the value,{} \\spad{n} is returned.")) (|tubePoints| (((|PositiveInteger|) (|List| (|DrawOption|)) (|PositiveInteger|)) "\\spad{tubePoints(l,n)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{tubePoints}. If the option does not exist the value,{} \\spad{n} is returned.")) (|space| (((|ThreeSpace| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{space(l)} takes a list of draw options,{} \\spad{l},{} and checks to see if it contains the option \\spad{space}. If the the option doesn't exist,{} then an empty space is returned.")) (|var2Steps| (((|PositiveInteger|) (|List| (|DrawOption|)) (|PositiveInteger|)) "\\spad{var2Steps(l,n)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{var2Steps}. If the option does not exist the value,{} \\spad{n} is returned.")) (|var1Steps| (((|PositiveInteger|) (|List| (|DrawOption|)) (|PositiveInteger|)) "\\spad{var1Steps(l,n)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{var1Steps}. If the option does not exist the value,{} \\spad{n} is returned.")) (|ranges| (((|List| (|Segment| (|Float|))) (|List| (|DrawOption|)) (|List| (|Segment| (|Float|)))) "\\spad{ranges(l,r)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{ranges}. If the option does not exist the value,{} \\spad{r} is returned.")) (|curveColorPalette| (((|Palette|) (|List| (|DrawOption|)) (|Palette|)) "\\spad{curveColorPalette(l,p)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{curveColorPalette}. If the option does not exist the value,{} \\spad{p} is returned.")) (|pointColorPalette| (((|Palette|) (|List| (|DrawOption|)) (|Palette|)) "\\spad{pointColorPalette(l,p)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{pointColorPalette}. If the option does not exist the value,{} \\spad{p} is returned.")) (|toScale| (((|Boolean|) (|List| (|DrawOption|)) (|Boolean|)) "\\spad{toScale(l,b)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{toScale}. If the option does not exist the value,{} \\spad{b} is returned.")) (|style| (((|String|) (|List| (|DrawOption|)) (|String|)) "\\spad{style(l,s)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{style}. If the option does not exist the value,{} \\spad{s} is returned.")) (|title| (((|String|) (|List| (|DrawOption|)) (|String|)) "\\spad{title(l,s)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{title}. If the option does not exist the value,{} \\spad{s} is returned.")) (|viewpoint| (((|Record| (|:| |theta| (|DoubleFloat|)) (|:| |phi| (|DoubleFloat|)) (|:| |scale| (|DoubleFloat|)) (|:| |scaleX| (|DoubleFloat|)) (|:| |scaleY| (|DoubleFloat|)) (|:| |scaleZ| (|DoubleFloat|)) (|:| |deltaX| (|DoubleFloat|)) (|:| |deltaY| (|DoubleFloat|))) (|List| (|DrawOption|)) (|Record| (|:| |theta| (|DoubleFloat|)) (|:| |phi| (|DoubleFloat|)) (|:| |scale| (|DoubleFloat|)) (|:| |scaleX| (|DoubleFloat|)) (|:| |scaleY| (|DoubleFloat|)) (|:| |scaleZ| (|DoubleFloat|)) (|:| |deltaX| (|DoubleFloat|)) (|:| |deltaY| (|DoubleFloat|)))) "\\spad{viewpoint(l,ls)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{viewpoint}. IF the option does not exist,{} the value \\spad{ls} is returned.")) (|clipBoolean| (((|Boolean|) (|List| (|DrawOption|)) (|Boolean|)) "\\spad{clipBoolean(l,b)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{clipBoolean}. If the option does not exist the value,{} \\spad{b} is returned.")) (|adaptive| (((|Boolean|) (|List| (|DrawOption|)) (|Boolean|)) "\\spad{adaptive(l,b)} takes the list of draw options,{} \\spad{l},{} and checks the list to see if it contains the option \\spad{adaptive}. If the option does not exist the value,{} \\spad{b} is returned."))) 
NIL 
NIL 
(-223 S) 
((|constructor| (NIL "This package \\undocumented{}")) (|option| (((|Union| |#1| "failed") (|List| (|DrawOption|)) (|Symbol|)) "\\spad{option(l,s)} determines whether the indicated drawing option,{} \\spad{s},{} is contained in the list of drawing options,{} \\spad{l},{} which is defined by the draw command."))) 
NIL 
NIL 
(-224 S R) 
((|constructor| (NIL "Extension of a base differential space with a derivation. \\blankline")) (D (($ $ (|Mapping| |#2| |#2|) (|NonNegativeInteger|)) "\\spad{D(x,d,n)} is a shorthand for \\spad{differentiate(x,d,n)}.") (($ $ (|Mapping| |#2| |#2|)) "\\spad{D(x,d)} is a shorthand for \\spad{differentiate(x,d)}.")) (|differentiate| (($ $ (|Mapping| |#2| |#2|) (|NonNegativeInteger|)) "\\spad{differentiate(x,d,n)} computes the \\spad{n}\\spad{-}th derivative of \\spad{x} using a derivation extending \\spad{d} on \\spad{R}.") (($ $ (|Mapping| |#2| |#2|)) "\\spad{differentiate(x,d)} computes the derivative of \\spad{x},{} extending differentiation \\spad{d} on \\spad{R}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-189)))) 
(-225 R) 
((|constructor| (NIL "Extension of a base differential space with a derivation. \\blankline")) (D (($ $ (|Mapping| |#1| |#1|) (|NonNegativeInteger|)) "\\spad{D(x,d,n)} is a shorthand for \\spad{differentiate(x,d,n)}.") (($ $ (|Mapping| |#1| |#1|)) "\\spad{D(x,d)} is a shorthand for \\spad{differentiate(x,d)}.")) (|differentiate| (($ $ (|Mapping| |#1| |#1|) (|NonNegativeInteger|)) "\\spad{differentiate(x,d,n)} computes the \\spad{n}\\spad{-}th derivative of \\spad{x} using a derivation extending \\spad{d} on \\spad{R}.") (($ $ (|Mapping| |#1| |#1|)) "\\spad{differentiate(x,d)} computes the derivative of \\spad{x},{} extending differentiation \\spad{d} on \\spad{R}."))) 
NIL 
NIL 
(-226 R S V) 
((|constructor| (NIL "\\spadtype{DifferentialSparseMultivariatePolynomial} implements an ordinary differential polynomial ring by combining a domain belonging to the category \\spadtype{DifferentialVariableCategory} with the domain \\spadtype{SparseMultivariatePolynomial}. \\blankline"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| |#3| (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#3| (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#3| (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#3| (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#3| (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-227 A S) 
((|constructor| (NIL "\\spadtype{DifferentialVariableCategory} constructs the set of derivatives of a given set of (ordinary) differential indeterminates. If \\spad{x},{}...,{}\\spad{y} is an ordered set of differential indeterminates,{} and the prime notation is used for differentiation,{} then the set of derivatives (including zero-th order) of the differential indeterminates is \\spad{x},{}\\spad{x'},{}\\spad{x''},{}...,{} \\spad{y},{}\\spad{y'},{}\\spad{y''},{}... (Note: in the interpreter,{} the \\spad{n}-th derivative of \\spad{y} is displayed as \\spad{y} with a subscript \\spad{n}.) This set is viewed as a set of algebraic indeterminates,{} totally ordered in a way compatible with differentiation and the given order on the differential indeterminates. Such a total order is called a ranking of the differential indeterminates. \\blankline A domain in this category is needed to construct a differential polynomial domain. Differential polynomials are ordered by a ranking on the derivatives,{} and by an order (extending the ranking) on on the set of differential monomials. One may thus associate a domain in this category with a ranking of the differential indeterminates,{} just as one associates a domain in the category \\spadtype{OrderedAbelianMonoidSup} with an ordering of the set of monomials in a set of algebraic indeterminates. The ranking is specified through the binary relation \\spadfun{<}. For example,{} one may define one derivative to be less than another by lexicographically comparing first the \\spadfun{order},{} then the given order of the differential indeterminates appearing in the derivatives. This is the default implementation. \\blankline The notion of weight generalizes that of degree. A polynomial domain may be made into a graded ring if a weight function is given on the set of indeterminates,{} Very often,{} a grading is the first step in ordering the set of monomials. For differential polynomial domains,{} this constructor provides a function \\spadfun{weight},{} which allows the assignment of a non-negative number to each derivative of a differential indeterminate. For example,{} one may define the weight of a derivative to be simply its \\spadfun{order} (this is the default assignment). This weight function can then be extended to the set of all differential polynomials,{} providing a graded ring structure.")) (|weight| (((|NonNegativeInteger|) $) "\\spad{weight(v)} returns the weight of the derivative \\spad{v}.")) (|variable| ((|#2| $) "\\spad{variable(v)} returns \\spad{s} if \\spad{v} is any derivative of the differential indeterminate \\spad{s}.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(v)} returns \\spad{n} if \\spad{v} is the \\spad{n}-th derivative of any differential indeterminate.")) (|makeVariable| (($ |#2| (|NonNegativeInteger|)) "\\spad{makeVariable(s, n)} returns the \\spad{n}-th derivative of a differential indeterminate \\spad{s} as an algebraic indeterminate."))) 
NIL 
NIL 
(-228 S) 
((|constructor| (NIL "\\spadtype{DifferentialVariableCategory} constructs the set of derivatives of a given set of (ordinary) differential indeterminates. If \\spad{x},{}...,{}\\spad{y} is an ordered set of differential indeterminates,{} and the prime notation is used for differentiation,{} then the set of derivatives (including zero-th order) of the differential indeterminates is \\spad{x},{}\\spad{x'},{}\\spad{x''},{}...,{} \\spad{y},{}\\spad{y'},{}\\spad{y''},{}... (Note: in the interpreter,{} the \\spad{n}-th derivative of \\spad{y} is displayed as \\spad{y} with a subscript \\spad{n}.) This set is viewed as a set of algebraic indeterminates,{} totally ordered in a way compatible with differentiation and the given order on the differential indeterminates. Such a total order is called a ranking of the differential indeterminates. \\blankline A domain in this category is needed to construct a differential polynomial domain. Differential polynomials are ordered by a ranking on the derivatives,{} and by an order (extending the ranking) on on the set of differential monomials. One may thus associate a domain in this category with a ranking of the differential indeterminates,{} just as one associates a domain in the category \\spadtype{OrderedAbelianMonoidSup} with an ordering of the set of monomials in a set of algebraic indeterminates. The ranking is specified through the binary relation \\spadfun{<}. For example,{} one may define one derivative to be less than another by lexicographically comparing first the \\spadfun{order},{} then the given order of the differential indeterminates appearing in the derivatives. This is the default implementation. \\blankline The notion of weight generalizes that of degree. A polynomial domain may be made into a graded ring if a weight function is given on the set of indeterminates,{} Very often,{} a grading is the first step in ordering the set of monomials. For differential polynomial domains,{} this constructor provides a function \\spadfun{weight},{} which allows the assignment of a non-negative number to each derivative of a differential indeterminate. For example,{} one may define the weight of a derivative to be simply its \\spadfun{order} (this is the default assignment). This weight function can then be extended to the set of all differential polynomials,{} providing a graded ring structure.")) (|weight| (((|NonNegativeInteger|) $) "\\spad{weight(v)} returns the weight of the derivative \\spad{v}.")) (|variable| ((|#1| $) "\\spad{variable(v)} returns \\spad{s} if \\spad{v} is any derivative of the differential indeterminate \\spad{s}.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(v)} returns \\spad{n} if \\spad{v} is the \\spad{n}-th derivative of any differential indeterminate.")) (|makeVariable| (($ |#1| (|NonNegativeInteger|)) "\\spad{makeVariable(s, n)} returns the \\spad{n}-th derivative of a differential indeterminate \\spad{s} as an algebraic indeterminate."))) 
NIL 
NIL 
(-229) 
((|constructor| (NIL "A domain used in the construction of the exterior algebra on a set \\spad{X} over a ring \\spad{R}. This domain represents the set of all ordered subsets of the set \\spad{X},{} assumed to be in correspondance with {1,{}2,{}3,{} ...}. The ordered subsets are themselves ordered lexicographically and are in bijective correspondance with an ordered basis of the exterior algebra. In this domain we are dealing strictly with the exponents of basis elements which can only be 0 or 1. \\blankline The multiplicative identity element of the exterior algebra corresponds to the empty subset of \\spad{X}. A coerce from List Integer to an ordered basis element is provided to allow the convenient input of expressions. Another exported function forgets the ordered structure and simply returns the list corresponding to an ordered subset.")) (|Nul| (($ (|NonNegativeInteger|)) "\\spad{Nul()} gives the basis element 1 for the algebra generated by \\spad{n} generators.")) (|exponents| (((|List| (|Integer|)) $) "\\spad{exponents(x)} converts a domain element into a list of zeros and ones corresponding to the exponents in the basis element that \\spad{x} represents.")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(x)} gives the numbers of 1's in \\spad{x},{} \\spadignore{i.e.} the number of non-zero exponents in the basis element that \\spad{x} represents.")) (|coerce| (($ (|List| (|Integer|))) "\\spad{coerce(l)} converts a list of 0's and 1's into a basis element,{} where 1 (respectively 0) designates that the variable of the corresponding index of \\spad{l} is (respectively,{} is not) present. Error: if an element of \\spad{l} is not 0 or 1."))) 
NIL 
NIL 
(-230 R -3092) 
((|constructor| (NIL "Provides elementary functions over an integral domain.")) (|localReal?| (((|Boolean|) |#2|) "\\spad{localReal?(x)} should be local but conditional")) (|specialTrigs| (((|Union| |#2| "failed") |#2| (|List| (|Record| (|:| |func| |#2|) (|:| |pole| (|Boolean|))))) "\\spad{specialTrigs(x,l)} should be local but conditional")) (|iiacsch| ((|#2| |#2|) "\\spad{iiacsch(x)} should be local but conditional")) (|iiasech| ((|#2| |#2|) "\\spad{iiasech(x)} should be local but conditional")) (|iiacoth| ((|#2| |#2|) "\\spad{iiacoth(x)} should be local but conditional")) (|iiatanh| ((|#2| |#2|) "\\spad{iiatanh(x)} should be local but conditional")) (|iiacosh| ((|#2| |#2|) "\\spad{iiacosh(x)} should be local but conditional")) (|iiasinh| ((|#2| |#2|) "\\spad{iiasinh(x)} should be local but conditional")) (|iicsch| ((|#2| |#2|) "\\spad{iicsch(x)} should be local but conditional")) (|iisech| ((|#2| |#2|) "\\spad{iisech(x)} should be local but conditional")) (|iicoth| ((|#2| |#2|) "\\spad{iicoth(x)} should be local but conditional")) (|iitanh| ((|#2| |#2|) "\\spad{iitanh(x)} should be local but conditional")) (|iicosh| ((|#2| |#2|) "\\spad{iicosh(x)} should be local but conditional")) (|iisinh| ((|#2| |#2|) "\\spad{iisinh(x)} should be local but conditional")) (|iiacsc| ((|#2| |#2|) "\\spad{iiacsc(x)} should be local but conditional")) (|iiasec| ((|#2| |#2|) "\\spad{iiasec(x)} should be local but conditional")) (|iiacot| ((|#2| |#2|) "\\spad{iiacot(x)} should be local but conditional")) (|iiatan| ((|#2| |#2|) "\\spad{iiatan(x)} should be local but conditional")) (|iiacos| ((|#2| |#2|) "\\spad{iiacos(x)} should be local but conditional")) (|iiasin| ((|#2| |#2|) "\\spad{iiasin(x)} should be local but conditional")) (|iicsc| ((|#2| |#2|) "\\spad{iicsc(x)} should be local but conditional")) (|iisec| ((|#2| |#2|) "\\spad{iisec(x)} should be local but conditional")) (|iicot| ((|#2| |#2|) "\\spad{iicot(x)} should be local but conditional")) (|iitan| ((|#2| |#2|) "\\spad{iitan(x)} should be local but conditional")) (|iicos| ((|#2| |#2|) "\\spad{iicos(x)} should be local but conditional")) (|iisin| ((|#2| |#2|) "\\spad{iisin(x)} should be local but conditional")) (|iilog| ((|#2| |#2|) "\\spad{iilog(x)} should be local but conditional")) (|iiexp| ((|#2| |#2|) "\\spad{iiexp(x)} should be local but conditional")) (|iisqrt3| ((|#2|) "\\spad{iisqrt3()} should be local but conditional")) (|iisqrt2| ((|#2|) "\\spad{iisqrt2()} should be local but conditional")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(p)} returns an elementary operator with the same symbol as \\spad{p}")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(p)} returns \\spad{true} if operator \\spad{p} is elementary")) (|pi| ((|#2|) "\\spad{pi()} returns the \\spad{pi} operator")) (|acsch| ((|#2| |#2|) "\\spad{acsch(x)} applies the inverse hyperbolic cosecant operator to \\spad{x}")) (|asech| ((|#2| |#2|) "\\spad{asech(x)} applies the	inverse hyperbolic secant operator to \\spad{x}")) (|acoth| ((|#2| |#2|) "\\spad{acoth(x)} applies the inverse hyperbolic cotangent operator to \\spad{x}")) (|atanh| ((|#2| |#2|) "\\spad{atanh(x)} applies the inverse hyperbolic tangent operator to \\spad{x}")) (|acosh| ((|#2| |#2|) "\\spad{acosh(x)} applies the inverse hyperbolic cosine operator to \\spad{x}")) (|asinh| ((|#2| |#2|) "\\spad{asinh(x)} applies the inverse hyperbolic sine operator to \\spad{x}")) (|csch| ((|#2| |#2|) "\\spad{csch(x)} applies the hyperbolic cosecant operator to \\spad{x}")) (|sech| ((|#2| |#2|) "\\spad{sech(x)} applies the hyperbolic secant operator to \\spad{x}")) (|coth| ((|#2| |#2|) "\\spad{coth(x)} applies the hyperbolic cotangent operator to \\spad{x}")) (|tanh| ((|#2| |#2|) "\\spad{tanh(x)} applies the hyperbolic tangent operator to \\spad{x}")) (|cosh| ((|#2| |#2|) "\\spad{cosh(x)} applies the hyperbolic cosine operator to \\spad{x}")) (|sinh| ((|#2| |#2|) "\\spad{sinh(x)} applies the hyperbolic sine operator to \\spad{x}")) (|acsc| ((|#2| |#2|) "\\spad{acsc(x)} applies the inverse cosecant operator to \\spad{x}")) (|asec| ((|#2| |#2|) "\\spad{asec(x)} applies the inverse secant operator to \\spad{x}")) (|acot| ((|#2| |#2|) "\\spad{acot(x)} applies the inverse cotangent operator to \\spad{x}")) (|atan| ((|#2| |#2|) "\\spad{atan(x)} applies the inverse tangent operator to \\spad{x}")) (|acos| ((|#2| |#2|) "\\spad{acos(x)} applies the inverse cosine operator to \\spad{x}")) (|asin| ((|#2| |#2|) "\\spad{asin(x)} applies the inverse sine operator to \\spad{x}")) (|csc| ((|#2| |#2|) "\\spad{csc(x)} applies the cosecant operator to \\spad{x}")) (|sec| ((|#2| |#2|) "\\spad{sec(x)} applies the secant operator to \\spad{x}")) (|cot| ((|#2| |#2|) "\\spad{cot(x)} applies the cotangent operator to \\spad{x}")) (|tan| ((|#2| |#2|) "\\spad{tan(x)} applies the tangent operator to \\spad{x}")) (|cos| ((|#2| |#2|) "\\spad{cos(x)} applies the cosine operator to \\spad{x}")) (|sin| ((|#2| |#2|) "\\spad{sin(x)} applies the sine operator to \\spad{x}")) (|log| ((|#2| |#2|) "\\spad{log(x)} applies the logarithm operator to \\spad{x}")) (|exp| ((|#2| |#2|) "\\spad{exp(x)} applies the exponential operator to \\spad{x}"))) 
NIL 
NIL 
(-231 R -3092) 
((|constructor| (NIL "ElementaryFunctionStructurePackage provides functions to test the algebraic independence of various elementary functions,{} using the Risch structure theorem (real and complex versions). It also provides transformations on elementary functions which are not considered simplifications.")) (|tanQ| ((|#2| (|Fraction| (|Integer|)) |#2|) "\\spad{tanQ(q,a)} is a local function with a conditional implementation.")) (|rootNormalize| ((|#2| |#2| (|Kernel| |#2|)) "\\spad{rootNormalize(f, k)} returns \\spad{f} rewriting either \\spad{k} which must be an \\spad{n}th-root in terms of radicals already in \\spad{f},{} or some radicals in \\spad{f} in terms of \\spad{k}.")) (|validExponential| (((|Union| |#2| "failed") (|List| (|Kernel| |#2|)) |#2| (|Symbol|)) "\\spad{validExponential([k1,...,kn],f,x)} returns \\spad{g} if \\spad{exp(f)=g} and \\spad{g} involves only \\spad{k1...kn},{} and \"failed\" otherwise.")) (|realElementary| ((|#2| |#2| (|Symbol|)) "\\spad{realElementary(f,x)} rewrites the kernels of \\spad{f} involving \\spad{x} in terms of the 4 fundamental real transcendental elementary functions: \\spad{log, exp, tan, atan}.") ((|#2| |#2|) "\\spad{realElementary(f)} rewrites \\spad{f} in terms of the 4 fundamental real transcendental elementary functions: \\spad{log, exp, tan, atan}.")) (|rischNormalize| (((|Record| (|:| |func| |#2|) (|:| |kers| (|List| (|Kernel| |#2|))) (|:| |vals| (|List| |#2|))) |#2| (|Symbol|)) "\\spad{rischNormalize(f, x)} returns \\spad{[g, [k1,...,kn], [h1,...,hn]]} such that \\spad{g = normalize(f, x)} and each \\spad{ki} was rewritten as \\spad{hi} during the normalization.")) (|normalize| ((|#2| |#2| (|Symbol|)) "\\spad{normalize(f, x)} rewrites \\spad{f} using the least possible number of real algebraically independent kernels involving \\spad{x}.") ((|#2| |#2|) "\\spad{normalize(f)} rewrites \\spad{f} using the least possible number of real algebraically independent kernels."))) 
NIL 
NIL 
(-232 |Coef| UTS ULS) 
((|constructor| (NIL "\\indented{1}{This package provides elementary functions on any Laurent series} domain over a field which was constructed from a Taylor series domain. These functions are implemented by calling the corresponding functions on the Taylor series domain. We also provide 'partial functions' which compute transcendental functions of Laurent series when possible and return \"failed\" when this is not possible.")) (|acsch| ((|#3| |#3|) "\\spad{acsch(z)} returns the inverse hyperbolic cosecant of Laurent series \\spad{z}.")) (|asech| ((|#3| |#3|) "\\spad{asech(z)} returns the inverse hyperbolic secant of Laurent series \\spad{z}.")) (|acoth| ((|#3| |#3|) "\\spad{acoth(z)} returns the inverse hyperbolic cotangent of Laurent series \\spad{z}.")) (|atanh| ((|#3| |#3|) "\\spad{atanh(z)} returns the inverse hyperbolic tangent of Laurent series \\spad{z}.")) (|acosh| ((|#3| |#3|) "\\spad{acosh(z)} returns the inverse hyperbolic cosine of Laurent series \\spad{z}.")) (|asinh| ((|#3| |#3|) "\\spad{asinh(z)} returns the inverse hyperbolic sine of Laurent series \\spad{z}.")) (|csch| ((|#3| |#3|) "\\spad{csch(z)} returns the hyperbolic cosecant of Laurent series \\spad{z}.")) (|sech| ((|#3| |#3|) "\\spad{sech(z)} returns the hyperbolic secant of Laurent series \\spad{z}.")) (|coth| ((|#3| |#3|) "\\spad{coth(z)} returns the hyperbolic cotangent of Laurent series \\spad{z}.")) (|tanh| ((|#3| |#3|) "\\spad{tanh(z)} returns the hyperbolic tangent of Laurent series \\spad{z}.")) (|cosh| ((|#3| |#3|) "\\spad{cosh(z)} returns the hyperbolic cosine of Laurent series \\spad{z}.")) (|sinh| ((|#3| |#3|) "\\spad{sinh(z)} returns the hyperbolic sine of Laurent series \\spad{z}.")) (|acsc| ((|#3| |#3|) "\\spad{acsc(z)} returns the arc-cosecant of Laurent series \\spad{z}.")) (|asec| ((|#3| |#3|) "\\spad{asec(z)} returns the arc-secant of Laurent series \\spad{z}.")) (|acot| ((|#3| |#3|) "\\spad{acot(z)} returns the arc-cotangent of Laurent series \\spad{z}.")) (|atan| ((|#3| |#3|) "\\spad{atan(z)} returns the arc-tangent of Laurent series \\spad{z}.")) (|acos| ((|#3| |#3|) "\\spad{acos(z)} returns the arc-cosine of Laurent series \\spad{z}.")) (|asin| ((|#3| |#3|) "\\spad{asin(z)} returns the arc-sine of Laurent series \\spad{z}.")) (|csc| ((|#3| |#3|) "\\spad{csc(z)} returns the cosecant of Laurent series \\spad{z}.")) (|sec| ((|#3| |#3|) "\\spad{sec(z)} returns the secant of Laurent series \\spad{z}.")) (|cot| ((|#3| |#3|) "\\spad{cot(z)} returns the cotangent of Laurent series \\spad{z}.")) (|tan| ((|#3| |#3|) "\\spad{tan(z)} returns the tangent of Laurent series \\spad{z}.")) (|cos| ((|#3| |#3|) "\\spad{cos(z)} returns the cosine of Laurent series \\spad{z}.")) (|sin| ((|#3| |#3|) "\\spad{sin(z)} returns the sine of Laurent series \\spad{z}.")) (|log| ((|#3| |#3|) "\\spad{log(z)} returns the logarithm of Laurent series \\spad{z}.")) (|exp| ((|#3| |#3|) "\\spad{exp(z)} returns the exponential of Laurent series \\spad{z}.")) (** ((|#3| |#3| (|Fraction| (|Integer|))) "\\spad{s ** r} raises a Laurent series \\spad{s} to a rational power \\spad{r}"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312)))) 
(-233 |Coef| ULS UPXS EFULS) 
((|constructor| (NIL "\\indented{1}{This package provides elementary functions on any Laurent series} domain over a field which was constructed from a Taylor series domain. These functions are implemented by calling the corresponding functions on the Taylor series domain. We also provide 'partial functions' which compute transcendental functions of Laurent series when possible and return \"failed\" when this is not possible.")) (|acsch| ((|#3| |#3|) "\\spad{acsch(z)} returns the inverse hyperbolic cosecant of a Puiseux series \\spad{z}.")) (|asech| ((|#3| |#3|) "\\spad{asech(z)} returns the inverse hyperbolic secant of a Puiseux series \\spad{z}.")) (|acoth| ((|#3| |#3|) "\\spad{acoth(z)} returns the inverse hyperbolic cotangent of a Puiseux series \\spad{z}.")) (|atanh| ((|#3| |#3|) "\\spad{atanh(z)} returns the inverse hyperbolic tangent of a Puiseux series \\spad{z}.")) (|acosh| ((|#3| |#3|) "\\spad{acosh(z)} returns the inverse hyperbolic cosine of a Puiseux series \\spad{z}.")) (|asinh| ((|#3| |#3|) "\\spad{asinh(z)} returns the inverse hyperbolic sine of a Puiseux series \\spad{z}.")) (|csch| ((|#3| |#3|) "\\spad{csch(z)} returns the hyperbolic cosecant of a Puiseux series \\spad{z}.")) (|sech| ((|#3| |#3|) "\\spad{sech(z)} returns the hyperbolic secant of a Puiseux series \\spad{z}.")) (|coth| ((|#3| |#3|) "\\spad{coth(z)} returns the hyperbolic cotangent of a Puiseux series \\spad{z}.")) (|tanh| ((|#3| |#3|) "\\spad{tanh(z)} returns the hyperbolic tangent of a Puiseux series \\spad{z}.")) (|cosh| ((|#3| |#3|) "\\spad{cosh(z)} returns the hyperbolic cosine of a Puiseux series \\spad{z}.")) (|sinh| ((|#3| |#3|) "\\spad{sinh(z)} returns the hyperbolic sine of a Puiseux series \\spad{z}.")) (|acsc| ((|#3| |#3|) "\\spad{acsc(z)} returns the arc-cosecant of a Puiseux series \\spad{z}.")) (|asec| ((|#3| |#3|) "\\spad{asec(z)} returns the arc-secant of a Puiseux series \\spad{z}.")) (|acot| ((|#3| |#3|) "\\spad{acot(z)} returns the arc-cotangent of a Puiseux series \\spad{z}.")) (|atan| ((|#3| |#3|) "\\spad{atan(z)} returns the arc-tangent of a Puiseux series \\spad{z}.")) (|acos| ((|#3| |#3|) "\\spad{acos(z)} returns the arc-cosine of a Puiseux series \\spad{z}.")) (|asin| ((|#3| |#3|) "\\spad{asin(z)} returns the arc-sine of a Puiseux series \\spad{z}.")) (|csc| ((|#3| |#3|) "\\spad{csc(z)} returns the cosecant of a Puiseux series \\spad{z}.")) (|sec| ((|#3| |#3|) "\\spad{sec(z)} returns the secant of a Puiseux series \\spad{z}.")) (|cot| ((|#3| |#3|) "\\spad{cot(z)} returns the cotangent of a Puiseux series \\spad{z}.")) (|tan| ((|#3| |#3|) "\\spad{tan(z)} returns the tangent of a Puiseux series \\spad{z}.")) (|cos| ((|#3| |#3|) "\\spad{cos(z)} returns the cosine of a Puiseux series \\spad{z}.")) (|sin| ((|#3| |#3|) "\\spad{sin(z)} returns the sine of a Puiseux series \\spad{z}.")) (|log| ((|#3| |#3|) "\\spad{log(z)} returns the logarithm of a Puiseux series \\spad{z}.")) (|exp| ((|#3| |#3|) "\\spad{exp(z)} returns the exponential of a Puiseux series \\spad{z}.")) (** ((|#3| |#3| (|Fraction| (|Integer|))) "\\spad{z ** r} raises a Puiseaux series \\spad{z} to a rational power \\spad{r}"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312)))) 
(-234) 
((|constructor| (NIL "This domains an expresion as elaborated by the interpreter. See Also:")) (|getOperands| (((|Union| (|List| $) "failed") $) "\\spad{getOperands(e)} returns the list of operands in `e',{} assuming it is a call form.")) (|getOperator| (((|Union| (|Identifier|) "failed") $) "\\spad{getOperator(e)} retrieves the operator being invoked in `e',{} when `e' is an expression.")) (|callForm?| (((|Boolean|) $) "\\spad{callForm?(e)} is \\spad{true} when `e' is a call expression.")) (|getIdentifier| (((|Union| (|Identifier|) "failed") $) "\\spad{getIdentifier(e)} retrieves the name of the variable `e'.")) (|variable?| (((|Boolean|) $) "\\spad{variable?(e)} returns \\spad{true} if `e' is a variable.")) (|getConstant| (((|Union| (|SExpression|) "failed") $) "\\spad{getConstant(e)} retrieves the constant value of `e'e.")) (|constant?| (((|Boolean|) $) "\\spad{constant?(e)} returns \\spad{true} if `e' is a constant.")) (|type| (((|Syntax|) $) "\\spad{type(e)} returns the type of the expression as computed by the interpreter."))) 
NIL 
NIL 
(-235) 
((|environment| (((|Environment|) $) "\\spad{environment(x)} returns the environment of the elaboration \\spad{x}.")) (|typeForm| (((|InternalTypeForm|) $) "\\spad{typeForm(x)} returns the type form of the elaboration \\spad{x}.")) (|irForm| (((|InternalRepresentationForm|) $) "\\spad{irForm(x)} returns the internal representation form of the elaboration \\spad{x}.")) (|elaboration| (($ (|InternalRepresentationForm|) (|InternalTypeForm|) (|Environment|)) "\\spad{elaboration(ir,ty,env)} construct an elaboration object for for the internal representation form \\spad{ir},{} with type \\spad{ty},{} and environment \\spad{env}."))) 
NIL 
NIL 
(-236 A S) 
((|constructor| (NIL "An extensible aggregate is one which allows insertion and deletion of entries. These aggregates are models of lists and streams which are represented by linked structures so as to make insertion,{} deletion,{} and concatenation efficient. However,{} access to elements of these extensible aggregates is generally slow since access is made from the end. See \\spadtype{FlexibleArray} for an exception.")) (|removeDuplicates!| (($ $) "\\spad{removeDuplicates!(u)} destructively removes duplicates from \\spad{u}.")) (|select!| (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{select!(p,u)} destructively changes \\spad{u} by keeping only values \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})}.")) (|merge!| (($ $ $) "\\spad{merge!(u,v)} destructively merges \\spad{u} and \\spad{v} in ascending order.") (($ (|Mapping| (|Boolean|) |#2| |#2|) $ $) "\\spad{merge!(p,u,v)} destructively merges \\spad{u} and \\spad{v} using predicate \\spad{p}.")) (|insert!| (($ $ $ (|Integer|)) "\\spad{insert!(v,u,i)} destructively inserts aggregate \\spad{v} into \\spad{u} at position \\spad{i}.") (($ |#2| $ (|Integer|)) "\\spad{insert!(x,u,i)} destructively inserts \\spad{x} into \\spad{u} at position \\spad{i}.")) (|remove!| (($ |#2| $) "\\spad{remove!(x,u)} destructively removes all values \\spad{x} from \\spad{u}.") (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{remove!(p,u)} destructively removes all elements \\spad{x} of \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}.")) (|delete!| (($ $ (|UniversalSegment| (|Integer|))) "\\spad{delete!(u,i..j)} destructively deletes elements \\spad{u}.\\spad{i} through \\spad{u}.\\spad{j}.") (($ $ (|Integer|)) "\\spad{delete!(u,i)} destructively deletes the \\axiom{\\spad{i}}th element of \\spad{u}.")) (|concat!| (($ $ $) "\\spad{concat!(u,v)} destructively appends \\spad{v} to the end of \\spad{u}. \\spad{v} is unchanged") (($ $ |#2|) "\\spad{concat!(u,x)} destructively adds element \\spad{x} to the end of \\spad{u}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013)))) 
(-237 S) 
((|constructor| (NIL "An extensible aggregate is one which allows insertion and deletion of entries. These aggregates are models of lists and streams which are represented by linked structures so as to make insertion,{} deletion,{} and concatenation efficient. However,{} access to elements of these extensible aggregates is generally slow since access is made from the end. See \\spadtype{FlexibleArray} for an exception.")) (|removeDuplicates!| (($ $) "\\spad{removeDuplicates!(u)} destructively removes duplicates from \\spad{u}.")) (|select!| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{select!(p,u)} destructively changes \\spad{u} by keeping only values \\spad{x} such that \\axiom{\\spad{p}(\\spad{x})}.")) (|merge!| (($ $ $) "\\spad{merge!(u,v)} destructively merges \\spad{u} and \\spad{v} in ascending order.") (($ (|Mapping| (|Boolean|) |#1| |#1|) $ $) "\\spad{merge!(p,u,v)} destructively merges \\spad{u} and \\spad{v} using predicate \\spad{p}.")) (|insert!| (($ $ $ (|Integer|)) "\\spad{insert!(v,u,i)} destructively inserts aggregate \\spad{v} into \\spad{u} at position \\spad{i}.") (($ |#1| $ (|Integer|)) "\\spad{insert!(x,u,i)} destructively inserts \\spad{x} into \\spad{u} at position \\spad{i}.")) (|remove!| (($ |#1| $) "\\spad{remove!(x,u)} destructively removes all values \\spad{x} from \\spad{u}.") (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{remove!(p,u)} destructively removes all elements \\spad{x} of \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}.")) (|delete!| (($ $ (|UniversalSegment| (|Integer|))) "\\spad{delete!(u,i..j)} destructively deletes elements \\spad{u}.\\spad{i} through \\spad{u}.\\spad{j}.") (($ $ (|Integer|)) "\\spad{delete!(u,i)} destructively deletes the \\axiom{\\spad{i}}th element of \\spad{u}.")) (|concat!| (($ $ $) "\\spad{concat!(u,v)} destructively appends \\spad{v} to the end of \\spad{u}. \\spad{v} is unchanged") (($ $ |#1|) "\\spad{concat!(u,x)} destructively adds element \\spad{x} to the end of \\spad{u}."))) 
((-3995 . T)) 
NIL 
(-238 S) 
((|constructor| (NIL "Category for the elementary functions.")) (** (($ $ $) "\\spad{x**y} returns \\spad{x} to the power \\spad{y}.")) (|exp| (($ $) "\\spad{exp(x)} returns \\%\\spad{e} to the power \\spad{x}.")) (|log| (($ $) "\\spad{log(x)} returns the natural logarithm of \\spad{x}."))) 
NIL 
NIL 
(-239) 
((|constructor| (NIL "Category for the elementary functions.")) (** (($ $ $) "\\spad{x**y} returns \\spad{x} to the power \\spad{y}.")) (|exp| (($ $) "\\spad{exp(x)} returns \\%\\spad{e} to the power \\spad{x}.")) (|log| (($ $) "\\spad{log(x)} returns the natural logarithm of \\spad{x}."))) 
NIL 
NIL 
(-240 |Coef| UTS) 
((|constructor| (NIL "The elliptic functions sn,{} sc and dn are expanded as Taylor series.")) (|sncndn| (((|List| (|Stream| |#1|)) (|Stream| |#1|) |#1|) "\\spad{sncndn(s,c)} is used internally.")) (|dn| ((|#2| |#2| |#1|) "\\spad{dn(x,k)} expands the elliptic function dn as a Taylor \\indented{1}{series.}")) (|cn| ((|#2| |#2| |#1|) "\\spad{cn(x,k)} expands the elliptic function cn as a Taylor \\indented{1}{series.}")) (|sn| ((|#2| |#2| |#1|) "\\spad{sn(x,k)} expands the elliptic function sn as a Taylor \\indented{1}{series.}"))) 
NIL 
NIL 
(-241 S T$) 
((|constructor| (NIL "An eltable over domains \\spad{S} and \\spad{T} is a structure which can be viewed as a function from \\spad{S} to \\spad{T}. Examples of eltable structures range from data structures,{} \\spadignore{e.g.} those of type \\spadtype{List},{} to algebraic structures,{} \\spadignore{e.g.} \\spadtype{Polynomial}.")) (|elt| ((|#2| $ |#1|) "\\spad{elt(u,s)} (also written: \\spad{u.s}) returns the value of \\spad{u} at \\spad{s}. Error: if \\spad{u} is not defined at \\spad{s}."))) 
NIL 
NIL 
(-242 S |Dom| |Im|) 
((|constructor| (NIL "An eltable aggregate is one which can be viewed as a function. For example,{} the list \\axiom{[1,{}7,{}4]} can applied to 0,{}1,{} and 2 respectively will return the integers 1,{}7,{} and 4; thus this list may be viewed as mapping 0 to 1,{} 1 to 7 and 2 to 4. In general,{} an aggregate can map members of a domain {\\em Dom} to an image domain {\\em Im}.")) (|qsetelt!| ((|#3| $ |#2| |#3|) "\\spad{qsetelt!(u,x,y)} sets the image of \\axiom{\\spad{x}} to be \\axiom{\\spad{y}} under \\axiom{\\spad{u}},{} without checking that \\axiom{\\spad{x}} is in the domain of \\axiom{\\spad{u}}. If such a check is required use the function \\axiom{setelt}.")) (|setelt| ((|#3| $ |#2| |#3|) "\\spad{setelt(u,x,y)} sets the image of \\spad{x} to be \\spad{y} under \\spad{u},{} assuming \\spad{x} is in the domain of \\spad{u}. Error: if \\spad{x} is not in the domain of \\spad{u}.")) (|qelt| ((|#3| $ |#2|) "\\spad{qelt(u, x)} applies \\axiom{\\spad{u}} to \\axiom{\\spad{x}} without checking whether \\axiom{\\spad{x}} is in the domain of \\axiom{\\spad{u}}. If \\axiom{\\spad{x}} is not in the domain of \\axiom{\\spad{u}} a memory-access violation may occur. If a check on whether \\axiom{\\spad{x}} is in the domain of \\axiom{\\spad{u}} is required,{} use the function \\axiom{elt}.")) (|elt| ((|#3| $ |#2| |#3|) "\\spad{elt(u, x, y)} applies \\spad{u} to \\spad{x} if \\spad{x} is in the domain of \\spad{u},{} and returns \\spad{y} otherwise. For example,{} if \\spad{u} is a polynomial in \\axiom{\\spad{x}} over the rationals,{} \\axiom{elt(\\spad{u},{}\\spad{n},{}0)} may define the coefficient of \\axiom{\\spad{x}} to the power \\spad{n},{} returning 0 when \\spad{n} is out of range."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995))) 
(-243 |Dom| |Im|) 
((|constructor| (NIL "An eltable aggregate is one which can be viewed as a function. For example,{} the list \\axiom{[1,{}7,{}4]} can applied to 0,{}1,{} and 2 respectively will return the integers 1,{}7,{} and 4; thus this list may be viewed as mapping 0 to 1,{} 1 to 7 and 2 to 4. In general,{} an aggregate can map members of a domain {\\em Dom} to an image domain {\\em Im}.")) (|qsetelt!| ((|#2| $ |#1| |#2|) "\\spad{qsetelt!(u,x,y)} sets the image of \\axiom{\\spad{x}} to be \\axiom{\\spad{y}} under \\axiom{\\spad{u}},{} without checking that \\axiom{\\spad{x}} is in the domain of \\axiom{\\spad{u}}. If such a check is required use the function \\axiom{setelt}.")) (|setelt| ((|#2| $ |#1| |#2|) "\\spad{setelt(u,x,y)} sets the image of \\spad{x} to be \\spad{y} under \\spad{u},{} assuming \\spad{x} is in the domain of \\spad{u}. Error: if \\spad{x} is not in the domain of \\spad{u}.")) (|qelt| ((|#2| $ |#1|) "\\spad{qelt(u, x)} applies \\axiom{\\spad{u}} to \\axiom{\\spad{x}} without checking whether \\axiom{\\spad{x}} is in the domain of \\axiom{\\spad{u}}. If \\axiom{\\spad{x}} is not in the domain of \\axiom{\\spad{u}} a memory-access violation may occur. If a check on whether \\axiom{\\spad{x}} is in the domain of \\axiom{\\spad{u}} is required,{} use the function \\axiom{elt}.")) (|elt| ((|#2| $ |#1| |#2|) "\\spad{elt(u, x, y)} applies \\spad{u} to \\spad{x} if \\spad{x} is in the domain of \\spad{u},{} and returns \\spad{y} otherwise. For example,{} if \\spad{u} is a polynomial in \\axiom{\\spad{x}} over the rationals,{} \\axiom{elt(\\spad{u},{}\\spad{n},{}0)} may define the coefficient of \\axiom{\\spad{x}} to the power \\spad{n},{} returning 0 when \\spad{n} is out of range."))) 
NIL 
NIL 
(-244 S R |Mod| -2037 -3517 |exactQuo|) 
((|constructor| (NIL "These domains are used for the factorization and gcds of univariate polynomials over the integers in order to work modulo different primes. See \\spadtype{ModularRing},{} \\spadtype{ModularField}")) (|inv| (($ $) "\\spad{inv(x)} \\undocumented")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(x)} \\undocumented")) (|exQuo| (((|Union| $ "failed") $ $) "\\spad{exQuo(x,y)} \\undocumented")) (|reduce| (($ |#2| |#3|) "\\spad{reduce(r,m)} \\undocumented")) (|coerce| ((|#2| $) "\\spad{coerce(x)} \\undocumented")) (|modulus| ((|#3| $) "\\spad{modulus(x)} \\undocumented"))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-245 S) 
((|constructor| (NIL "Entire Rings (non-commutative Integral Domains),{} \\spadignore{i.e.} a ring not necessarily commutative which has no zero divisors. \\blankline")) (|noZeroDivisors| ((|attribute|) "if a product is zero then one of the factors must be zero."))) 
NIL 
NIL 
(-246) 
((|constructor| (NIL "Entire Rings (non-commutative Integral Domains),{} \\spadignore{i.e.} a ring not necessarily commutative which has no zero divisors. \\blankline")) (|noZeroDivisors| ((|attribute|) "if a product is zero then one of the factors must be zero."))) 
((-3987 . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-247) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: October 24,{} 2007 Date Last Modified: March 18,{} 2010. An `Environment' is a stack of scope.")) (|categoryFrame| (($) "the current category environment in the interpreter.")) (|interactiveEnv| (($) "the current interactive environment in effect.")) (|currentEnv| (($) "the current normal environment in effect.")) (|putProperties| (($ (|Identifier|) (|List| (|Property|)) $) "\\spad{putProperties(n,props,e)} set the list of properties of \\spad{n} to \\spad{props} in \\spad{e}.")) (|getProperties| (((|List| (|Property|)) (|Identifier|) $) "\\spad{getBinding(n,e)} returns the list of properties of \\spad{n} in \\spad{e}.")) (|putProperty| (($ (|Identifier|) (|Identifier|) (|SExpression|) $) "\\spad{putProperty(n,p,v,e)} binds the property \\spad{(p,v)} to \\spad{n} in the topmost scope of \\spad{e}.")) (|getProperty| (((|Maybe| (|SExpression|)) (|Identifier|) (|Identifier|) $) "\\spad{getProperty(n,p,e)} returns the value of property with name \\spad{p} for the symbol \\spad{n} in environment \\spad{e}. Otherwise,{} \\spad{nothing}.")) (|scopes| (((|List| (|Scope|)) $) "\\spad{scopes(e)} returns the stack of scopes in environment \\spad{e}.")) (|empty| (($) "\\spad{empty()} constructs an empty environment"))) 
NIL 
NIL 
(-248 R) 
((|constructor| (NIL "This is a package for the exact computation of eigenvalues and eigenvectors. This package can be made to work for matrices with coefficients which are rational functions over a ring where we can factor polynomials. Rational eigenvalues are always explicitly computed while the non-rational ones are expressed in terms of their minimal polynomial.")) (|eigenvectors| (((|List| (|Record| (|:| |eigval| (|Union| (|Fraction| (|Polynomial| |#1|)) (|SuchThat| (|Symbol|) (|Polynomial| |#1|)))) (|:| |eigmult| (|NonNegativeInteger|)) (|:| |eigvec| (|List| (|Matrix| (|Fraction| (|Polynomial| |#1|))))))) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{eigenvectors(m)} returns the eigenvalues and eigenvectors for the matrix \\spad{m}. The rational eigenvalues and the correspondent eigenvectors are explicitely computed,{} while the non rational ones are given via their minimal polynomial and the corresponding eigenvectors are expressed in terms of a \"generic\" root of such a polynomial.")) (|generalizedEigenvectors| (((|List| (|Record| (|:| |eigval| (|Union| (|Fraction| (|Polynomial| |#1|)) (|SuchThat| (|Symbol|) (|Polynomial| |#1|)))) (|:| |geneigvec| (|List| (|Matrix| (|Fraction| (|Polynomial| |#1|))))))) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{generalizedEigenvectors(m)} returns the generalized eigenvectors of the matrix \\spad{m}.")) (|generalizedEigenvector| (((|List| (|Matrix| (|Fraction| (|Polynomial| |#1|)))) (|Record| (|:| |eigval| (|Union| (|Fraction| (|Polynomial| |#1|)) (|SuchThat| (|Symbol|) (|Polynomial| |#1|)))) (|:| |eigmult| (|NonNegativeInteger|)) (|:| |eigvec| (|List| (|Matrix| (|Fraction| (|Polynomial| |#1|)))))) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{generalizedEigenvector(eigen,m)} returns the generalized eigenvectors of the matrix relative to the eigenvalue \\spad{eigen},{} as returned by the function eigenvectors.") (((|List| (|Matrix| (|Fraction| (|Polynomial| |#1|)))) (|Union| (|Fraction| (|Polynomial| |#1|)) (|SuchThat| (|Symbol|) (|Polynomial| |#1|))) (|Matrix| (|Fraction| (|Polynomial| |#1|))) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{generalizedEigenvector(alpha,m,k,g)} returns the generalized eigenvectors of the matrix relative to the eigenvalue \\spad{alpha}. The integers \\spad{k} and \\spad{g} are respectively the algebraic and the geometric multiplicity of tye eigenvalue \\spad{alpha}. \\spad{alpha} can be either rational or not. In the seconda case apha is the minimal polynomial of the eigenvalue.")) (|eigenvector| (((|List| (|Matrix| (|Fraction| (|Polynomial| |#1|)))) (|Union| (|Fraction| (|Polynomial| |#1|)) (|SuchThat| (|Symbol|) (|Polynomial| |#1|))) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{eigenvector(eigval,m)} returns the eigenvectors belonging to the eigenvalue \\spad{eigval} for the matrix \\spad{m}.")) (|eigenvalues| (((|List| (|Union| (|Fraction| (|Polynomial| |#1|)) (|SuchThat| (|Symbol|) (|Polynomial| |#1|)))) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{eigenvalues(m)} returns the eigenvalues of the matrix \\spad{m} which are expressible as rational functions over the rational numbers.")) (|characteristicPolynomial| (((|Polynomial| |#1|) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{characteristicPolynomial(m)} returns the characteristicPolynomial of the matrix \\spad{m} using a new generated symbol symbol as the main variable.") (((|Polynomial| |#1|) (|Matrix| (|Fraction| (|Polynomial| |#1|))) (|Symbol|)) "\\spad{characteristicPolynomial(m,var)} returns the characteristicPolynomial of the matrix \\spad{m} using the symbol \\spad{var} as the main variable."))) 
NIL 
NIL 
(-249 S) 
((|constructor| (NIL "Equations as mathematical objects. All properties of the basis domain,{} \\spadignore{e.g.} being an abelian group are carried over the equation domain,{} by performing the structural operations on the left and on the right hand side.")) (|subst| (($ $ $) "\\spad{subst(eq1,eq2)} substitutes \\spad{eq2} into both sides of \\spad{eq1} the lhs of \\spad{eq2} should be a kernel")) (|inv| (($ $) "\\spad{inv(x)} returns the multiplicative inverse of \\spad{x}.")) (/ (($ $ $) "\\spad{e1/e2} produces a new equation by dividing the left and right hand sides of equations \\spad{e1} and \\spad{e2}.")) (|factorAndSplit| (((|List| $) $) "\\spad{factorAndSplit(eq)} make the right hand side 0 and factors the new left hand side. Each factor is equated to 0 and put into the resulting list without repetitions.")) (|rightOne| (((|Union| $ "failed") $) "\\spad{rightOne(eq)} divides by the right hand side.") (((|Union| $ "failed") $) "\\spad{rightOne(eq)} divides by the right hand side,{} if possible.")) (|leftOne| (((|Union| $ "failed") $) "\\spad{leftOne(eq)} divides by the left hand side.") (((|Union| $ "failed") $) "\\spad{leftOne(eq)} divides by the left hand side,{} if possible.")) (* (($ $ |#1|) "\\spad{eqn*x} produces a new equation by multiplying both sides of equation eqn by \\spad{x}.") (($ |#1| $) "\\spad{x*eqn} produces a new equation by multiplying both sides of equation eqn by \\spad{x}.")) (- (($ $ |#1|) "\\spad{eqn-x} produces a new equation by subtracting \\spad{x} from both sides of equation eqn.") (($ |#1| $) "\\spad{x-eqn} produces a new equation by subtracting both sides of equation eqn from \\spad{x}.")) (|rightZero| (($ $) "\\spad{rightZero(eq)} subtracts the right hand side.")) (|leftZero| (($ $) "\\spad{leftZero(eq)} subtracts the left hand side.")) (+ (($ $ |#1|) "\\spad{eqn+x} produces a new equation by adding \\spad{x} to both sides of equation eqn.") (($ |#1| $) "\\spad{x+eqn} produces a new equation by adding \\spad{x} to both sides of equation eqn.")) (|eval| (($ $ (|List| $)) "\\spad{eval(eqn, [x1=v1, ... xn=vn])} replaces \\spad{xi} by \\spad{vi} in equation \\spad{eqn}.") (($ $ $) "\\spad{eval(eqn, x=f)} replaces \\spad{x} by \\spad{f} in equation \\spad{eqn}.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f,eqn)} constructs a new equation by applying \\spad{f} to both sides of \\spad{eqn}.")) (|rhs| ((|#1| $) "\\spad{rhs(eqn)} returns the right hand side of equation \\spad{eqn}.")) (|lhs| ((|#1| $) "\\spad{lhs(eqn)} returns the left hand side of equation \\spad{eqn}.")) (|swap| (($ $) "\\spad{swap(eq)} interchanges left and right hand side of equation \\spad{eq}.")) (|equation| (($ |#1| |#1|) "\\spad{equation(a,b)} creates an equation.")) (= (($ |#1| |#1|) "\\spad{a=b} creates an equation."))) 
((-3991 OR (|has| |#1| (-961)) (|has| |#1| (-412))) (-3988 |has| |#1| (-961)) (-3989 |has| |#1| (-961))) 
((|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-961))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-663)))) (|HasCategory| |#1| (QUOTE (-412))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-961))) (|HasCategory| |#1| (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-1013)))) (OR (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#1| (QUOTE (-1025)))) (|HasCategory| |#1| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#1|))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-254))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-412)))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-663)))) (OR (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-663)))) 
(-250 S R) 
((|constructor| (NIL "This package provides operations for mapping the sides of equations.")) (|map| (((|Equation| |#2|) (|Mapping| |#2| |#1|) (|Equation| |#1|)) "\\spad{map(f,eq)} returns an equation where \\spad{f} is applied to the sides of \\spad{eq}"))) 
NIL 
NIL 
(-251 |Key| |Entry|) 
((|constructor| (NIL "This domain provides tables where the keys are compared using \\spadfun{eq?}. Thus keys are considered equal only if they are the same instance of a structure."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) 
(-252) 
((|constructor| (NIL "ErrorFunctions implements error functions callable from the system interpreter. Typically,{} these functions would be called in user functions. The simple forms of the functions take one argument which is either a string (an error message) or a list of strings which all together make up a message. The list can contain formatting codes (see below). The more sophisticated versions takes two arguments where the first argument is the name of the function from which the error was invoked and the second argument is either a string or a list of strings,{} as above. When you use the one argument version in an interpreter function,{} the system will automatically insert the name of the function as the new first argument. Thus in the user interpreter function \\indented{2}{\\spad{f x == if x < 0 then error \"negative argument\" else x}} the call to error will actually be of the form \\indented{2}{\\spad{error(\"f\",\"negative argument\")}} because the interpreter will have created a new first argument. \\blankline Formatting codes: error messages may contain the following formatting codes (they should either start or end a string or else have blanks around them): \\indented{3}{\\spad{\\%l}\\space{6}start a new line} \\indented{3}{\\spad{\\%b}\\space{6}start printing in a bold font (where available)} \\indented{3}{\\spad{\\%d}\\space{6}stop\\space{2}printing in a bold font (where available)} \\indented{3}{\\spad{ \\%ceon}\\space{2}start centering message lines} \\indented{3}{\\spad{\\%ceoff}\\space{2}stop\\space{2}centering message lines} \\indented{3}{\\spad{\\%rjon}\\space{3}start displaying lines \"ragged left\"} \\indented{3}{\\spad{\\%rjoff}\\space{2}stop\\space{2}displaying lines \"ragged left\"} \\indented{3}{\\spad{\\%i}\\space{6}indent\\space{3}following lines 3 additional spaces} \\indented{3}{\\spad{\\%u}\\space{6}unindent following lines 3 additional spaces} \\indented{3}{\\spad{\\%xN}\\space{5}insert \\spad{N} blanks (eg,{} \\spad{\\%x10} inserts 10 blanks)} \\blankline")) (|error| (((|Exit|) (|String|) (|List| (|String|))) "\\spad{error(nam,lmsg)} displays error messages \\spad{lmsg} preceded by a message containing the name \\spad{nam} of the function in which the error is contained.") (((|Exit|) (|String|) (|String|)) "\\spad{error(nam,msg)} displays error message \\spad{msg} preceded by a message containing the name \\spad{nam} of the function in which the error is contained.") (((|Exit|) (|List| (|String|))) "\\spad{error(lmsg)} displays error message \\spad{lmsg} and terminates.") (((|Exit|) (|String|)) "\\spad{error(msg)} displays error message \\spad{msg} and terminates."))) 
NIL 
NIL 
(-253 S) 
((|constructor| (NIL "An expression space is a set which is closed under certain operators.")) (|odd?| (((|Boolean|) $) "\\spad{odd? x} is \\spad{true} if \\spad{x} is an odd integer.")) (|even?| (((|Boolean|) $) "\\spad{even? x} is \\spad{true} if \\spad{x} is an even integer.")) (|definingPolynomial| (($ $) "\\spad{definingPolynomial(x)} returns an expression \\spad{p} such that \\spad{p(x) = 0}.")) (|minPoly| (((|SparseUnivariatePolynomial| $) (|Kernel| $)) "\\spad{minPoly(k)} returns \\spad{p} such that \\spad{p(k) = 0}.")) (|eval| (($ $ (|BasicOperator|) (|Mapping| $ $)) "\\spad{eval(x, s, f)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.") (($ $ (|BasicOperator|) (|Mapping| $ (|List| $))) "\\spad{eval(x, s, f)} replaces every \\spad{s(a1,..,am)} in \\spad{x} by \\spad{f(a1,..,am)} for any \\spad{a1},{}...,{}\\spad{am}.") (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ (|List| $)))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a1,...,an)} in \\spad{x} by \\spad{fi(a1,...,an)} for any \\spad{a1},{}...,{}\\spad{an}.") (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ $))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a)} in \\spad{x} by \\spad{fi(a)} for any \\spad{a}.") (($ $ (|Symbol|) (|Mapping| $ $)) "\\spad{eval(x, s, f)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.") (($ $ (|Symbol|) (|Mapping| $ (|List| $))) "\\spad{eval(x, s, f)} replaces every \\spad{s(a1,..,am)} in \\spad{x} by \\spad{f(a1,..,am)} for any \\spad{a1},{}...,{}\\spad{am}.") (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ (|List| $)))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a1,...,an)} in \\spad{x} by \\spad{fi(a1,...,an)} for any \\spad{a1},{}...,{}\\spad{an}.") (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ $))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a)} in \\spad{x} by \\spad{fi(a)} for any \\spad{a}.")) (|freeOf?| (((|Boolean|) $ (|Symbol|)) "\\spad{freeOf?(x, s)} tests if \\spad{x} does not contain any operator whose name is \\spad{s}.") (((|Boolean|) $ $) "\\spad{freeOf?(x, y)} tests if \\spad{x} does not contain any occurrence of \\spad{y},{} where \\spad{y} is a single kernel.")) (|map| (($ (|Mapping| $ $) (|Kernel| $)) "\\spad{map(f, k)} returns \\spad{op(f(x1),...,f(xn))} where \\spad{k = op(x1,...,xn)}.")) (|kernel| (($ (|BasicOperator|) (|List| $)) "\\spad{kernel(op, [f1,...,fn])} constructs \\spad{op(f1,...,fn)} without evaluating it.") (($ (|BasicOperator|) $) "\\spad{kernel(op, x)} constructs \\spad{op}(\\spad{x}) without evaluating it.")) (|is?| (((|Boolean|) $ (|Symbol|)) "\\spad{is?(x, s)} tests if \\spad{x} is a kernel and is the name of its operator is \\spad{s}.") (((|Boolean|) $ (|BasicOperator|)) "\\spad{is?(x, op)} tests if \\spad{x} is a kernel and is its operator is op.")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(op)} tests if \\% accepts \\spad{op} as applicable to its elements.")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(op)} returns a copy of \\spad{op} with the domain-dependent properties appropriate for \\%.")) (|operators| (((|List| (|BasicOperator|)) $) "\\spad{operators(f)} returns all the basic operators appearing in \\spad{f},{} no matter what their levels are.")) (|tower| (((|List| (|Kernel| $)) $) "\\spad{tower(f)} returns all the kernels appearing in \\spad{f},{} no matter what their levels are.")) (|kernels| (((|List| (|Kernel| $)) $) "\\spad{kernels(f)} returns the list of all the top-level kernels appearing in \\spad{f},{} but not the ones appearing in the arguments of the top-level kernels.")) (|mainKernel| (((|Union| (|Kernel| $) "failed") $) "\\spad{mainKernel(f)} returns a kernel of \\spad{f} with maximum nesting level,{} or if \\spad{f} has no kernels (\\spadignore{i.e.} \\spad{f} is a constant).")) (|height| (((|NonNegativeInteger|) $) "\\spad{height(f)} returns the highest nesting level appearing in \\spad{f}. Constants have height 0. Symbols have height 1. For any operator op and expressions \\spad{f1},{}...,{}fn,{} \\spad{op(f1,...,fn)} has height equal to \\spad{1 + max(height(f1),...,height(fn))}.")) (|distribute| (($ $ $) "\\spad{distribute(f, g)} expands all the kernels in \\spad{f} that contain \\spad{g} in their arguments and that are formally enclosed by a \\spadfunFrom{box}{ExpressionSpace} or a \\spadfunFrom{paren}{ExpressionSpace} expression.") (($ $) "\\spad{distribute(f)} expands all the kernels in \\spad{f} that are formally enclosed by a \\spadfunFrom{box}{ExpressionSpace} or \\spadfunFrom{paren}{ExpressionSpace} expression.")) (|paren| (($ (|List| $)) "\\spad{paren([f1,...,fn])} returns \\spad{(f1,...,fn)}. This prevents the \\spad{fi} from being evaluated when operators are applied to them,{} and makes them applicable to a unary operator. For example,{} \\spad{atan(paren [x, 2])} returns the formal kernel \\spad{atan((x, 2))}.") (($ $) "\\spad{paren(f)} returns (\\spad{f}). This prevents \\spad{f} from being evaluated when operators are applied to it. For example,{} \\spad{log(1)} returns 0,{} but \\spad{log(paren 1)} returns the formal kernel log((1)).")) (|box| (($ (|List| $)) "\\spad{box([f1,...,fn])} returns \\spad{(f1,...,fn)} with a 'box' around them that prevents the \\spad{fi} from being evaluated when operators are applied to them,{} and makes them applicable to a unary operator. For example,{} \\spad{atan(box [x, 2])} returns the formal kernel \\spad{atan(x, 2)}.") (($ $) "\\spad{box(f)} returns \\spad{f} with a 'box' around it that prevents \\spad{f} from being evaluated when operators are applied to it. For example,{} \\spad{log(1)} returns 0,{} but \\spad{log(box 1)} returns the formal kernel log(1).")) (|subst| (($ $ (|List| (|Kernel| $)) (|List| $)) "\\spad{subst(f, [k1...,kn], [g1,...,gn])} replaces the kernels \\spad{k1},{}...,{}kn by \\spad{g1},{}...,{}gn formally in \\spad{f}.") (($ $ (|List| (|Equation| $))) "\\spad{subst(f, [k1 = g1,...,kn = gn])} replaces the kernels \\spad{k1},{}...,{}kn by \\spad{g1},{}...,{}gn formally in \\spad{f}.") (($ $ (|Equation| $)) "\\spad{subst(f, k = g)} replaces the kernel \\spad{k} by \\spad{g} formally in \\spad{f}.")) (|elt| (($ (|BasicOperator|) (|List| $)) "\\spad{elt(op,[x1,...,xn])} or \\spad{op}([\\spad{x1},{}...,{}xn]) applies the \\spad{n}-ary operator \\spad{op} to \\spad{x1},{}...,{}xn.") (($ (|BasicOperator|) $ $ $ $) "\\spad{elt(op,x,y,z,t)} or \\spad{op}(\\spad{x},{} \\spad{y},{} \\spad{z},{} \\spad{t}) applies the 4-ary operator \\spad{op} to \\spad{x},{} \\spad{y},{} \\spad{z} and \\spad{t}.") (($ (|BasicOperator|) $ $ $) "\\spad{elt(op,x,y,z)} or \\spad{op}(\\spad{x},{} \\spad{y},{} \\spad{z}) applies the ternary operator \\spad{op} to \\spad{x},{} \\spad{y} and \\spad{z}.") (($ (|BasicOperator|) $ $) "\\spad{elt(op,x,y)} or \\spad{op}(\\spad{x},{} \\spad{y}) applies the binary operator \\spad{op} to \\spad{x} and \\spad{y}.") (($ (|BasicOperator|) $) "\\spad{elt(op,x)} or \\spad{op}(\\spad{x}) applies the unary operator \\spad{op} to \\spad{x}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-961)))) 
(-254) 
((|constructor| (NIL "An expression space is a set which is closed under certain operators.")) (|odd?| (((|Boolean|) $) "\\spad{odd? x} is \\spad{true} if \\spad{x} is an odd integer.")) (|even?| (((|Boolean|) $) "\\spad{even? x} is \\spad{true} if \\spad{x} is an even integer.")) (|definingPolynomial| (($ $) "\\spad{definingPolynomial(x)} returns an expression \\spad{p} such that \\spad{p(x) = 0}.")) (|minPoly| (((|SparseUnivariatePolynomial| $) (|Kernel| $)) "\\spad{minPoly(k)} returns \\spad{p} such that \\spad{p(k) = 0}.")) (|eval| (($ $ (|BasicOperator|) (|Mapping| $ $)) "\\spad{eval(x, s, f)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.") (($ $ (|BasicOperator|) (|Mapping| $ (|List| $))) "\\spad{eval(x, s, f)} replaces every \\spad{s(a1,..,am)} in \\spad{x} by \\spad{f(a1,..,am)} for any \\spad{a1},{}...,{}\\spad{am}.") (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ (|List| $)))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a1,...,an)} in \\spad{x} by \\spad{fi(a1,...,an)} for any \\spad{a1},{}...,{}\\spad{an}.") (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ $))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a)} in \\spad{x} by \\spad{fi(a)} for any \\spad{a}.") (($ $ (|Symbol|) (|Mapping| $ $)) "\\spad{eval(x, s, f)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.") (($ $ (|Symbol|) (|Mapping| $ (|List| $))) "\\spad{eval(x, s, f)} replaces every \\spad{s(a1,..,am)} in \\spad{x} by \\spad{f(a1,..,am)} for any \\spad{a1},{}...,{}\\spad{am}.") (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ (|List| $)))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a1,...,an)} in \\spad{x} by \\spad{fi(a1,...,an)} for any \\spad{a1},{}...,{}\\spad{an}.") (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ $))) "\\spad{eval(x, [s1,...,sm], [f1,...,fm])} replaces every \\spad{si(a)} in \\spad{x} by \\spad{fi(a)} for any \\spad{a}.")) (|freeOf?| (((|Boolean|) $ (|Symbol|)) "\\spad{freeOf?(x, s)} tests if \\spad{x} does not contain any operator whose name is \\spad{s}.") (((|Boolean|) $ $) "\\spad{freeOf?(x, y)} tests if \\spad{x} does not contain any occurrence of \\spad{y},{} where \\spad{y} is a single kernel.")) (|map| (($ (|Mapping| $ $) (|Kernel| $)) "\\spad{map(f, k)} returns \\spad{op(f(x1),...,f(xn))} where \\spad{k = op(x1,...,xn)}.")) (|kernel| (($ (|BasicOperator|) (|List| $)) "\\spad{kernel(op, [f1,...,fn])} constructs \\spad{op(f1,...,fn)} without evaluating it.") (($ (|BasicOperator|) $) "\\spad{kernel(op, x)} constructs \\spad{op}(\\spad{x}) without evaluating it.")) (|is?| (((|Boolean|) $ (|Symbol|)) "\\spad{is?(x, s)} tests if \\spad{x} is a kernel and is the name of its operator is \\spad{s}.") (((|Boolean|) $ (|BasicOperator|)) "\\spad{is?(x, op)} tests if \\spad{x} is a kernel and is its operator is op.")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(op)} tests if \\% accepts \\spad{op} as applicable to its elements.")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(op)} returns a copy of \\spad{op} with the domain-dependent properties appropriate for \\%.")) (|operators| (((|List| (|BasicOperator|)) $) "\\spad{operators(f)} returns all the basic operators appearing in \\spad{f},{} no matter what their levels are.")) (|tower| (((|List| (|Kernel| $)) $) "\\spad{tower(f)} returns all the kernels appearing in \\spad{f},{} no matter what their levels are.")) (|kernels| (((|List| (|Kernel| $)) $) "\\spad{kernels(f)} returns the list of all the top-level kernels appearing in \\spad{f},{} but not the ones appearing in the arguments of the top-level kernels.")) (|mainKernel| (((|Union| (|Kernel| $) "failed") $) "\\spad{mainKernel(f)} returns a kernel of \\spad{f} with maximum nesting level,{} or if \\spad{f} has no kernels (\\spadignore{i.e.} \\spad{f} is a constant).")) (|height| (((|NonNegativeInteger|) $) "\\spad{height(f)} returns the highest nesting level appearing in \\spad{f}. Constants have height 0. Symbols have height 1. For any operator op and expressions \\spad{f1},{}...,{}fn,{} \\spad{op(f1,...,fn)} has height equal to \\spad{1 + max(height(f1),...,height(fn))}.")) (|distribute| (($ $ $) "\\spad{distribute(f, g)} expands all the kernels in \\spad{f} that contain \\spad{g} in their arguments and that are formally enclosed by a \\spadfunFrom{box}{ExpressionSpace} or a \\spadfunFrom{paren}{ExpressionSpace} expression.") (($ $) "\\spad{distribute(f)} expands all the kernels in \\spad{f} that are formally enclosed by a \\spadfunFrom{box}{ExpressionSpace} or \\spadfunFrom{paren}{ExpressionSpace} expression.")) (|paren| (($ (|List| $)) "\\spad{paren([f1,...,fn])} returns \\spad{(f1,...,fn)}. This prevents the \\spad{fi} from being evaluated when operators are applied to them,{} and makes them applicable to a unary operator. For example,{} \\spad{atan(paren [x, 2])} returns the formal kernel \\spad{atan((x, 2))}.") (($ $) "\\spad{paren(f)} returns (\\spad{f}). This prevents \\spad{f} from being evaluated when operators are applied to it. For example,{} \\spad{log(1)} returns 0,{} but \\spad{log(paren 1)} returns the formal kernel log((1)).")) (|box| (($ (|List| $)) "\\spad{box([f1,...,fn])} returns \\spad{(f1,...,fn)} with a 'box' around them that prevents the \\spad{fi} from being evaluated when operators are applied to them,{} and makes them applicable to a unary operator. For example,{} \\spad{atan(box [x, 2])} returns the formal kernel \\spad{atan(x, 2)}.") (($ $) "\\spad{box(f)} returns \\spad{f} with a 'box' around it that prevents \\spad{f} from being evaluated when operators are applied to it. For example,{} \\spad{log(1)} returns 0,{} but \\spad{log(box 1)} returns the formal kernel log(1).")) (|subst| (($ $ (|List| (|Kernel| $)) (|List| $)) "\\spad{subst(f, [k1...,kn], [g1,...,gn])} replaces the kernels \\spad{k1},{}...,{}kn by \\spad{g1},{}...,{}gn formally in \\spad{f}.") (($ $ (|List| (|Equation| $))) "\\spad{subst(f, [k1 = g1,...,kn = gn])} replaces the kernels \\spad{k1},{}...,{}kn by \\spad{g1},{}...,{}gn formally in \\spad{f}.") (($ $ (|Equation| $)) "\\spad{subst(f, k = g)} replaces the kernel \\spad{k} by \\spad{g} formally in \\spad{f}.")) (|elt| (($ (|BasicOperator|) (|List| $)) "\\spad{elt(op,[x1,...,xn])} or \\spad{op}([\\spad{x1},{}...,{}xn]) applies the \\spad{n}-ary operator \\spad{op} to \\spad{x1},{}...,{}xn.") (($ (|BasicOperator|) $ $ $ $) "\\spad{elt(op,x,y,z,t)} or \\spad{op}(\\spad{x},{} \\spad{y},{} \\spad{z},{} \\spad{t}) applies the 4-ary operator \\spad{op} to \\spad{x},{} \\spad{y},{} \\spad{z} and \\spad{t}.") (($ (|BasicOperator|) $ $ $) "\\spad{elt(op,x,y,z)} or \\spad{op}(\\spad{x},{} \\spad{y},{} \\spad{z}) applies the ternary operator \\spad{op} to \\spad{x},{} \\spad{y} and \\spad{z}.") (($ (|BasicOperator|) $ $) "\\spad{elt(op,x,y)} or \\spad{op}(\\spad{x},{} \\spad{y}) applies the binary operator \\spad{op} to \\spad{x} and \\spad{y}.") (($ (|BasicOperator|) $) "\\spad{elt(op,x)} or \\spad{op}(\\spad{x}) applies the unary operator \\spad{op} to \\spad{x}."))) 
NIL 
NIL 
(-255 -3092 S) 
((|constructor| (NIL "This package allows a map from any expression space into any object to be lifted to a kernel over the expression set,{} using a given property of the operator of the kernel.")) (|map| ((|#2| (|Mapping| |#2| |#1|) (|String|) (|Kernel| |#1|)) "\\spad{map(f, p, k)} uses the property \\spad{p} of the operator of \\spad{k},{} in order to lift \\spad{f} and apply it to \\spad{k}."))) 
NIL 
NIL 
(-256 E -3092) 
((|constructor| (NIL "This package allows a mapping \\spad{E} -> \\spad{F} to be lifted to a kernel over \\spad{E}; This lifting can fail if the operator of the kernel cannot be applied in \\spad{F}; Do not use this package with \\spad{E} = \\spad{F},{} since this may drop some properties of the operators.")) (|map| ((|#2| (|Mapping| |#2| |#1|) (|Kernel| |#1|)) "\\spad{map(f, k)} returns \\spad{g = op(f(a1),...,f(an))} where \\spad{k = op(a1,...,an)}."))) 
NIL 
NIL 
(-257 S) 
((|constructor| (NIL "A constructive euclidean domain,{} \\spadignore{i.e.} one can divide producing a quotient and a remainder where the remainder is either zero or is smaller (\\spadfun{euclideanSize}) than the divisor. \\blankline Conditional attributes: \\indented{2}{multiplicativeValuation\\tab{25}\\spad{Size(a*b)=Size(a)*Size(b)}} \\indented{2}{additiveValuation\\tab{25}\\spad{Size(a*b)=Size(a)+Size(b)}}")) (|multiEuclidean| (((|Union| (|List| $) "failed") (|List| $) $) "\\spad{multiEuclidean([f1,...,fn],z)} returns a list of coefficients \\spad{[a1, ..., an]} such that \\spad{ z / prod fi = sum aj/fj}. If no such list of coefficients exists,{} \"failed\" is returned.")) (|extendedEuclidean| (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) "failed") $ $ $) "\\spad{extendedEuclidean(x,y,z)} either returns a record rec where \\spad{rec.coef1*x+rec.coef2*y=z} or returns \"failed\" if \\spad{z} cannot be expressed as a linear combination of \\spad{x} and \\spad{y}.") (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) "\\spad{extendedEuclidean(x,y)} returns a record rec where \\spad{rec.coef1*x+rec.coef2*y = rec.generator} and rec.generator is a gcd of \\spad{x} and \\spad{y}. The gcd is unique only up to associates if \\spadatt{canonicalUnitNormal} is not asserted. \\spadfun{principalIdeal} provides a version of this operation which accepts an arbitrary length list of arguments.")) (|rem| (($ $ $) "\\spad{x rem y} is the same as \\spad{divide(x,y).remainder}. See \\spadfunFrom{divide}{EuclideanDomain}.")) (|quo| (($ $ $) "\\spad{x quo y} is the same as \\spad{divide(x,y).quotient}. See \\spadfunFrom{divide}{EuclideanDomain}.")) (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{divide(x,y)} divides \\spad{x} by \\spad{y} producing a record containing a \\spad{quotient} and \\spad{remainder},{} where the remainder is smaller (see \\spadfunFrom{sizeLess?}{EuclideanDomain}) than the divisor \\spad{y}.")) (|euclideanSize| (((|NonNegativeInteger|) $) "\\spad{euclideanSize(x)} returns the euclidean size of the element \\spad{x}. Error: if \\spad{x} is zero.")) (|sizeLess?| (((|Boolean|) $ $) "\\spad{sizeLess?(x,y)} tests whether \\spad{x} is strictly smaller than \\spad{y} with respect to the \\spadfunFrom{euclideanSize}{EuclideanDomain}."))) 
NIL 
NIL 
(-258) 
((|constructor| (NIL "A constructive euclidean domain,{} \\spadignore{i.e.} one can divide producing a quotient and a remainder where the remainder is either zero or is smaller (\\spadfun{euclideanSize}) than the divisor. \\blankline Conditional attributes: \\indented{2}{multiplicativeValuation\\tab{25}\\spad{Size(a*b)=Size(a)*Size(b)}} \\indented{2}{additiveValuation\\tab{25}\\spad{Size(a*b)=Size(a)+Size(b)}}")) (|multiEuclidean| (((|Union| (|List| $) "failed") (|List| $) $) "\\spad{multiEuclidean([f1,...,fn],z)} returns a list of coefficients \\spad{[a1, ..., an]} such that \\spad{ z / prod fi = sum aj/fj}. If no such list of coefficients exists,{} \"failed\" is returned.")) (|extendedEuclidean| (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) "failed") $ $ $) "\\spad{extendedEuclidean(x,y,z)} either returns a record rec where \\spad{rec.coef1*x+rec.coef2*y=z} or returns \"failed\" if \\spad{z} cannot be expressed as a linear combination of \\spad{x} and \\spad{y}.") (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) "\\spad{extendedEuclidean(x,y)} returns a record rec where \\spad{rec.coef1*x+rec.coef2*y = rec.generator} and rec.generator is a gcd of \\spad{x} and \\spad{y}. The gcd is unique only up to associates if \\spadatt{canonicalUnitNormal} is not asserted. \\spadfun{principalIdeal} provides a version of this operation which accepts an arbitrary length list of arguments.")) (|rem| (($ $ $) "\\spad{x rem y} is the same as \\spad{divide(x,y).remainder}. See \\spadfunFrom{divide}{EuclideanDomain}.")) (|quo| (($ $ $) "\\spad{x quo y} is the same as \\spad{divide(x,y).quotient}. See \\spadfunFrom{divide}{EuclideanDomain}.")) (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{divide(x,y)} divides \\spad{x} by \\spad{y} producing a record containing a \\spad{quotient} and \\spad{remainder},{} where the remainder is smaller (see \\spadfunFrom{sizeLess?}{EuclideanDomain}) than the divisor \\spad{y}.")) (|euclideanSize| (((|NonNegativeInteger|) $) "\\spad{euclideanSize(x)} returns the euclidean size of the element \\spad{x}. Error: if \\spad{x} is zero.")) (|sizeLess?| (((|Boolean|) $ $) "\\spad{sizeLess?(x,y)} tests whether \\spad{x} is strictly smaller than \\spad{y} with respect to the \\spadfunFrom{euclideanSize}{EuclideanDomain}."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-259 S R) 
((|constructor| (NIL "This category provides \\spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation'' substitutions.")) (|eval| (($ $ (|List| (|Equation| |#2|))) "\\spad{eval(f, [x1 = v1,...,xn = vn])} replaces \\spad{xi} by \\spad{vi} in \\spad{f}.") (($ $ (|Equation| |#2|)) "\\spad{eval(f,x = v)} replaces \\spad{x} by \\spad{v} in \\spad{f}."))) 
NIL 
NIL 
(-260 R) 
((|constructor| (NIL "This category provides \\spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation'' substitutions.")) (|eval| (($ $ (|List| (|Equation| |#1|))) "\\spad{eval(f, [x1 = v1,...,xn = vn])} replaces \\spad{xi} by \\spad{vi} in \\spad{f}.") (($ $ (|Equation| |#1|)) "\\spad{eval(f,x = v)} replaces \\spad{x} by \\spad{v} in \\spad{f}."))) 
NIL 
NIL 
(-261 -3092) 
((|constructor| (NIL "This package is to be used in conjuction with \\indented{12}{the CycleIndicators package. It provides an evaluation} \\indented{12}{function for SymmetricPolynomials.}")) (|eval| ((|#1| (|Mapping| |#1| (|Integer|)) (|SymmetricPolynomial| (|Fraction| (|Integer|)))) "\\spad{eval(f,s)} evaluates the cycle index \\spad{s} by applying \\indented{1}{the function \\spad{f} to each integer in a monomial partition,{}} \\indented{1}{forms their product and sums the results over all monomials.}"))) 
NIL 
NIL 
(-262) 
((|constructor| (NIL "A function which does not return directly to its caller should have Exit as its return type. \\blankline Note: It is convenient to have a formal \\spad{coerce} into each type from type Exit. This allows,{} for example,{} errors to be raised in one half of a type-balanced \\spad{if}."))) 
NIL 
NIL 
(-263) 
((|constructor| (NIL "This domain represents exit expressions.")) (|level| (((|Integer|) $) "\\spad{level(e)} returns the nesting exit level of `e'")) (|expression| (((|SpadAst|) $) "\\spad{expression(e)} returns the exit expression of `e'."))) 
NIL 
NIL 
(-264 R FE |var| |cen|) 
((|constructor| (NIL "UnivariatePuiseuxSeriesWithExponentialSingularity is a domain used to represent essential singularities of functions. Objects in this domain are quotients of sums,{} where each term in the sum is a univariate Puiseux series times the exponential of a univariate Puiseux series.")) (|coerce| (($ (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)) "\\spad{coerce(f)} converts a \\spadtype{UnivariatePuiseuxSeries} to an \\spadtype{ExponentialExpansion}.")) (|limitPlus| (((|Union| (|OrderedCompletion| |#2|) "failed") $) "\\spad{limitPlus(f(var))} returns \\spad{limit(var -> a+,f(var))}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-821))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-950 (-1089)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-118))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-120))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-553 (-473)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-933))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-740))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-756))) (OR (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-740))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-756)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-950 (-484)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-1065))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-796 (-329)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-796 (-484)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-580 (-484)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-189))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-811 (-1089)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-190))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-809 (-1089)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (|%list| (QUOTE -455) (QUOTE (-1089)) (|%list| (QUOTE -1165) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|) (|devaluate| |#4|)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (|%list| (QUOTE -260) (|%list| (QUOTE -1165) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|) (|devaluate| |#4|)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (|%list| (QUOTE -241) (|%list| (QUOTE -1165) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|) (|devaluate| |#4|)) (|%list| (QUOTE -1165) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|) (|devaluate| |#4|)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-258))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-483))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-821)))) (|HasCategory| (-1165 |#1| |#2| |#3| |#4|) (QUOTE (-118))))) 
(-265 R) 
((|constructor| (NIL "Expressions involving symbolic functions.")) (|squareFreePolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{squareFreePolynomial(p)} \\undocumented{}")) (|factorPolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{factorPolynomial(p)} \\undocumented{}")) (|simplifyPower| (($ $ (|Integer|)) "simplifyPower?(\\spad{f},{}\\spad{n}) \\undocumented{}")) (|number?| (((|Boolean|) $) "\\spad{number?(f)} tests if \\spad{f} is rational")) (|reduce| (($ $) "\\spad{reduce(f)} simplifies all the unreduced algebraic quantities present in \\spad{f} by applying their defining relations."))) 
((-3991 OR (-12 (|has| |#1| (-495)) (OR (|has| |#1| (-961)) (|has| |#1| (-412)))) (|has| |#1| (-961)) (|has| |#1| (-412))) (-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) ((-3996 "*") |has| |#1| (-495)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-495)) (-3986 |has| |#1| (-495))) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-495))) (OR (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-961))) (|HasCategory| |#1| (QUOTE (-21))) (OR (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-961))))) (OR (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-1025)))) (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-950 (-484))))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-961)))) (-12 (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-21)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-1025)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-25)))) (OR (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#1| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-950 (-484)))))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| $ (QUOTE (-961))) (|HasCategory| $ (QUOTE (-950 (-484))))) 
(-266 R S) 
((|constructor| (NIL "Lifting of maps to Expressions. Date Created: 16 Jan 1989 Date Last Updated: 22 Jan 1990")) (|map| (((|Expression| |#2|) (|Mapping| |#2| |#1|) (|Expression| |#1|)) "\\spad{map(f, e)} applies \\spad{f} to all the constants appearing in \\spad{e}."))) 
NIL 
NIL 
(-267 R FE) 
((|constructor| (NIL "This package provides functions to convert functional expressions to power series.")) (|series| (((|Any|) |#2| (|Equation| |#2|) (|Fraction| (|Integer|))) "\\spad{series(f,x = a,n)} expands the expression \\spad{f} as a series in powers of (\\spad{x} - a); terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2| (|Equation| |#2|)) "\\spad{series(f,x = a)} expands the expression \\spad{f} as a series in powers of (\\spad{x} - a).") (((|Any|) |#2| (|Fraction| (|Integer|))) "\\spad{series(f,n)} returns a series expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2|) "\\spad{series(f)} returns a series expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable.") (((|Any|) (|Symbol|)) "\\spad{series(x)} returns \\spad{x} viewed as a series.")) (|puiseux| (((|Any|) |#2| (|Equation| |#2|) (|Fraction| (|Integer|))) "\\spad{puiseux(f,x = a,n)} expands the expression \\spad{f} as a Puiseux series in powers of \\spad{(x - a)}; terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2| (|Equation| |#2|)) "\\spad{puiseux(f,x = a)} expands the expression \\spad{f} as a Puiseux series in powers of \\spad{(x - a)}.") (((|Any|) |#2| (|Fraction| (|Integer|))) "\\spad{puiseux(f,n)} returns a Puiseux expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2|) "\\spad{puiseux(f)} returns a Puiseux expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable.") (((|Any|) (|Symbol|)) "\\spad{puiseux(x)} returns \\spad{x} viewed as a Puiseux series.")) (|laurent| (((|Any|) |#2| (|Equation| |#2|) (|Integer|)) "\\spad{laurent(f,x = a,n)} expands the expression \\spad{f} as a Laurent series in powers of \\spad{(x - a)}; terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2| (|Equation| |#2|)) "\\spad{laurent(f,x = a)} expands the expression \\spad{f} as a Laurent series in powers of \\spad{(x - a)}.") (((|Any|) |#2| (|Integer|)) "\\spad{laurent(f,n)} returns a Laurent expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2|) "\\spad{laurent(f)} returns a Laurent expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable.") (((|Any|) (|Symbol|)) "\\spad{laurent(x)} returns \\spad{x} viewed as a Laurent series.")) (|taylor| (((|Any|) |#2| (|Equation| |#2|) (|NonNegativeInteger|)) "\\spad{taylor(f,x = a)} expands the expression \\spad{f} as a Taylor series in powers of \\spad{(x - a)}; terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2| (|Equation| |#2|)) "\\spad{taylor(f,x = a)} expands the expression \\spad{f} as a Taylor series in powers of \\spad{(x - a)}.") (((|Any|) |#2| (|NonNegativeInteger|)) "\\spad{taylor(f,n)} returns a Taylor expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable and terms will be computed up to order at least \\spad{n}.") (((|Any|) |#2|) "\\spad{taylor(f)} returns a Taylor expansion of the expression \\spad{f}. Note: \\spad{f} should have only one variable; the series will be expanded in powers of that variable.") (((|Any|) (|Symbol|)) "\\spad{taylor(x)} returns \\spad{x} viewed as a Taylor series."))) 
NIL 
NIL 
(-268 R -3092) 
((|constructor| (NIL "Taylor series solutions of explicit ODE's.")) (|seriesSolve| (((|Any|) |#2| (|BasicOperator|) (|Equation| |#2|) (|List| |#2|)) "\\spad{seriesSolve(eq, y, x = a, [b0,...,bn])} is equivalent to \\spad{seriesSolve(eq = 0, y, x = a, [b0,...,b(n-1)])}.") (((|Any|) |#2| (|BasicOperator|) (|Equation| |#2|) (|Equation| |#2|)) "\\spad{seriesSolve(eq, y, x = a, y a = b)} is equivalent to \\spad{seriesSolve(eq=0, y, x=a, y a = b)}.") (((|Any|) |#2| (|BasicOperator|) (|Equation| |#2|) |#2|) "\\spad{seriesSolve(eq, y, x = a, b)} is equivalent to \\spad{seriesSolve(eq = 0, y, x = a, y a = b)}.") (((|Any|) (|Equation| |#2|) (|BasicOperator|) (|Equation| |#2|) |#2|) "\\spad{seriesSolve(eq,y, x=a, b)} is equivalent to \\spad{seriesSolve(eq, y, x=a, y a = b)}.") (((|Any|) (|List| |#2|) (|List| (|BasicOperator|)) (|Equation| |#2|) (|List| (|Equation| |#2|))) "\\spad{seriesSolve([eq1,...,eqn], [y1,...,yn], x = a,[y1 a = b1,..., yn a = bn])} is equivalent to \\spad{seriesSolve([eq1=0,...,eqn=0], [y1,...,yn], x = a, [y1 a = b1,..., yn a = bn])}.") (((|Any|) (|List| |#2|) (|List| (|BasicOperator|)) (|Equation| |#2|) (|List| |#2|)) "\\spad{seriesSolve([eq1,...,eqn], [y1,...,yn], x=a, [b1,...,bn])} is equivalent to \\spad{seriesSolve([eq1=0,...,eqn=0], [y1,...,yn], x=a, [b1,...,bn])}.") (((|Any|) (|List| (|Equation| |#2|)) (|List| (|BasicOperator|)) (|Equation| |#2|) (|List| |#2|)) "\\spad{seriesSolve([eq1,...,eqn], [y1,...,yn], x=a, [b1,...,bn])} is equivalent to \\spad{seriesSolve([eq1,...,eqn], [y1,...,yn], x = a, [y1 a = b1,..., yn a = bn])}.") (((|Any|) (|List| (|Equation| |#2|)) (|List| (|BasicOperator|)) (|Equation| |#2|) (|List| (|Equation| |#2|))) "\\spad{seriesSolve([eq1,...,eqn],[y1,...,yn],x = a,[y1 a = b1,...,yn a = bn])} returns a taylor series solution of \\spad{[eq1,...,eqn]} around \\spad{x = a} with initial conditions \\spad{yi(a) = bi}. Note: eqi must be of the form \\spad{fi(x, y1 x, y2 x,..., yn x) y1'(x) + gi(x, y1 x, y2 x,..., yn x) = h(x, y1 x, y2 x,..., yn x)}.") (((|Any|) (|Equation| |#2|) (|BasicOperator|) (|Equation| |#2|) (|List| |#2|)) "\\spad{seriesSolve(eq,y,x=a,[b0,...,b(n-1)])} returns a Taylor series solution of \\spad{eq} around \\spad{x = a} with initial conditions \\spad{y(a) = b0},{} \\spad{y'(a) = b1},{} \\spad{y''(a) = b2},{} ...,{}\\spad{y(n-1)(a) = b(n-1)} \\spad{eq} must be of the form \\spad{f(x, y x, y'(x),..., y(n-1)(x)) y(n)(x) + g(x,y x,y'(x),...,y(n-1)(x)) = h(x,y x, y'(x),..., y(n-1)(x))}.") (((|Any|) (|Equation| |#2|) (|BasicOperator|) (|Equation| |#2|) (|Equation| |#2|)) "\\spad{seriesSolve(eq,y,x=a, y a = b)} returns a Taylor series solution of \\spad{eq} around \\spad{x} = a with initial condition \\spad{y(a) = b}. Note: \\spad{eq} must be of the form \\spad{f(x, y x) y'(x) + g(x, y x) = h(x, y x)}."))) 
NIL 
NIL 
(-269) 
((|constructor| (NIL "\\indented{1}{Author: Clifton \\spad{J}. Williamson} Date Created: Bastille Day 1989 Date Last Updated: 5 June 1990 Keywords: Examples: Package for constructing tubes around 3-dimensional parametric curves.")) (|tubePlot| (((|TubePlot| (|Plot3D|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|DoubleFloat|) (|Integer|) (|String|)) "\\spad{tubePlot(f,g,h,colorFcn,a..b,r,n,s)} puts a tube of radius \\spad{r} with \\spad{n} points on each circle about the curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} for \\spad{t} in \\spad{[a,b]}. If \\spad{s} = \"closed\",{} the tube is considered to be closed; if \\spad{s} = \"open\",{} the tube is considered to be open.") (((|TubePlot| (|Plot3D|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|DoubleFloat|) (|Integer|)) "\\spad{tubePlot(f,g,h,colorFcn,a..b,r,n)} puts a tube of radius \\spad{r} with \\spad{n} points on each circle about the curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} for \\spad{t} in \\spad{[a,b]}. The tube is considered to be open.") (((|TubePlot| (|Plot3D|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Integer|) (|String|)) "\\spad{tubePlot(f,g,h,colorFcn,a..b,r,n,s)} puts a tube of radius \\spad{r(t)} with \\spad{n} points on each circle about the curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} for \\spad{t} in \\spad{[a,b]}. If \\spad{s} = \"closed\",{} the tube is considered to be closed; if \\spad{s} = \"open\",{} the tube is considered to be open.") (((|TubePlot| (|Plot3D|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Integer|)) "\\spad{tubePlot(f,g,h,colorFcn,a..b,r,n)} puts a tube of radius \\spad{r}(\\spad{t}) with \\spad{n} points on each circle about the curve \\spad{x = f(t)},{} \\spad{y = g(t)},{} \\spad{z = h(t)} for \\spad{t} in \\spad{[a,b]}. The tube is considered to be open.")) (|constantToUnaryFunction| (((|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|DoubleFloat|)) "\\spad{constantToUnaryFunction(s)} is a local function which takes the value of \\spad{s},{} which may be a function of a constant,{} and returns a function which always returns the value \\spadtype{DoubleFloat} \\spad{s}."))) 
NIL 
NIL 
(-270 FE |var| |cen|) 
((|constructor| (NIL "ExponentialOfUnivariatePuiseuxSeries is a domain used to represent essential singularities of functions. An object in this domain is a function of the form \\spad{exp(f(x))},{} where \\spad{f(x)} is a Puiseux series with no terms of non-negative degree. Objects are ordered according to order of singularity,{} with functions which tend more rapidly to zero or infinity considered to be larger. Thus,{} if \\spad{order(f(x)) < order(g(x))},{} \\spadignore{i.e.} the first non-zero term of \\spad{f(x)} has lower degree than the first non-zero term of \\spad{g(x)},{} then \\spad{exp(f(x)) > exp(g(x))}. If \\spad{order(f(x)) = order(g(x))},{} then the ordering is essentially random. This domain is used in computing limits involving functions with essential singularities.")) (|exponentialOrder| (((|Fraction| (|Integer|)) $) "\\spad{exponentialOrder(exp(c * x **(-n) + ...))} returns \\spad{-n}. exponentialOrder(0) returns \\spad{0}.")) (|exponent| (((|UnivariatePuiseuxSeries| |#1| |#2| |#3|) $) "\\spad{exponent(exp(f(x)))} returns \\spad{f(x)}")) (|exponential| (($ (|UnivariatePuiseuxSeries| |#1| |#2| |#3|)) "\\spad{exponential(f(x))} returns \\spad{exp(f(x))}. Note: the function does NOT check that \\spad{f(x)} has no non-negative terms."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|)))) (|HasCategory| (-349 (-484)) (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|))))))) 
(-271 M) 
((|constructor| (NIL "computes various functions on factored arguments.")) (|log| (((|List| (|Record| (|:| |coef| (|NonNegativeInteger|)) (|:| |logand| |#1|))) (|Factored| |#1|)) "\\spad{log(f)} returns \\spad{[(a1,b1),...,(am,bm)]} such that the logarithm of \\spad{f} is equal to \\spad{a1*log(b1) + ... + am*log(bm)}.")) (|nthRoot| (((|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |coef| |#1|) (|:| |radicand| (|List| |#1|))) (|Factored| |#1|) (|NonNegativeInteger|)) "\\spad{nthRoot(f, n)} returns \\spad{(p, r, [r1,...,rm])} such that the \\spad{n}th-root of \\spad{f} is equal to \\spad{r * \\spad{p}th-root(r1 * ... * rm)},{} where \\spad{r1},{}...,{}rm are distinct factors of \\spad{f},{} each of which has an exponent smaller than \\spad{p} in \\spad{f}."))) 
NIL 
NIL 
(-272 E OV R P) 
((|constructor| (NIL "This package provides utilities used by the factorizers which operate on polynomials represented as univariate polynomials with multivariate coefficients.")) (|ran| ((|#3| (|Integer|)) "\\spad{ran(k)} computes a random integer between -k and \\spad{k} as a member of \\spad{R}.")) (|normalDeriv| (((|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|) (|Integer|)) "\\spad{normalDeriv(poly,i)} computes the \\spad{i}th derivative of \\spad{poly} divided by i!.")) (|raisePolynomial| (((|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#3|)) "\\spad{raisePolynomial(rpoly)} converts \\spad{rpoly} from a univariate polynomial over \\spad{r} to be a univariate polynomial with polynomial coefficients.")) (|lowerPolynomial| (((|SparseUnivariatePolynomial| |#3|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{lowerPolynomial(upoly)} converts \\spad{upoly} to be a univariate polynomial over \\spad{R}. An error if the coefficients contain variables.")) (|variables| (((|List| |#2|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{variables(upoly)} returns the list of variables for the coefficients of \\spad{upoly}.")) (|degree| (((|List| (|NonNegativeInteger|)) (|SparseUnivariatePolynomial| |#4|) (|List| |#2|)) "\\spad{degree(upoly, lvar)} returns a list containing the maximum degree for each variable in lvar.")) (|completeEval| (((|SparseUnivariatePolynomial| |#3|) (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|List| |#3|)) "\\spad{completeEval(upoly, lvar, lval)} evaluates the polynomial \\spad{upoly} with each variable in \\spad{lvar} replaced by the corresponding value in lval. Substitutions are done for all variables in \\spad{upoly} producing a univariate polynomial over \\spad{R}."))) 
NIL 
NIL 
(-273 S) 
((|constructor| (NIL "The free abelian group on a set \\spad{S} is the monoid of finite sums of the form \\spad{reduce(+,[ni * si])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are integers. The operation is commutative."))) 
((-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| (-484) (QUOTE (-716)))) 
(-274 S E) 
((|constructor| (NIL "A free abelian monoid on a set \\spad{S} is the monoid of finite sums of the form \\spad{reduce(+,[ni * si])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are in a given abelian monoid. The operation is commutative.")) (|highCommonTerms| (($ $ $) "\\spad{highCommonTerms(e1 a1 + ... + en an, f1 b1 + ... + fm bm)} returns \\indented{2}{\\spad{reduce(+,[max(ei, fi) ci])}} where \\spad{ci} ranges in the intersection of \\spad{{a1,...,an}} and \\spad{{b1,...,bm}}.")) (|mapGen| (($ (|Mapping| |#1| |#1|) $) "\\spad{mapGen(f, e1 a1 +...+ en an)} returns \\spad{e1 f(a1) +...+ en f(an)}.")) (|mapCoef| (($ (|Mapping| |#2| |#2|) $) "\\spad{mapCoef(f, e1 a1 +...+ en an)} returns \\spad{f(e1) a1 +...+ f(en) an}.")) (|coefficient| ((|#2| |#1| $) "\\spad{coefficient(s, e1 a1 + ... + en an)} returns \\spad{ei} such that \\spad{ai} = \\spad{s},{} or 0 if \\spad{s} is not one of the \\spad{ai}'s.")) (|nthFactor| ((|#1| $ (|Integer|)) "\\spad{nthFactor(x, n)} returns the factor of the n^th term of \\spad{x}.")) (|nthCoef| ((|#2| $ (|Integer|)) "\\spad{nthCoef(x, n)} returns the coefficient of the n^th term of \\spad{x}.")) (|terms| (((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))) $) "\\spad{terms(e1 a1 + ... + en an)} returns \\spad{[[a1, e1],...,[an, en]]}.")) (|size| (((|NonNegativeInteger|) $) "\\spad{size(x)} returns the number of terms in \\spad{x}. mapGen(\\spad{f},{} \\spad{a1}\\^\\spad{e1} ... an\\^en) returns \\spad{f(a1)\\^e1 ... f(an)\\^en}.")) (* (($ |#2| |#1|) "\\spad{e * s} returns \\spad{e} times \\spad{s}.")) (+ (($ |#1| $) "\\spad{s + x} returns the sum of \\spad{s} and \\spad{x}."))) 
NIL 
NIL 
(-275 S) 
((|constructor| (NIL "The free abelian monoid on a set \\spad{S} is the monoid of finite sums of the form \\spad{reduce(+,[ni * si])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are non-negative integers. The operation is commutative."))) 
NIL 
((|HasCategory| (-694) (QUOTE (-716)))) 
(-276 S R E) 
((|constructor| (NIL "This category is similar to AbelianMonoidRing,{} except that the sum is assumed to be finite. It is a useful model for polynomials,{} but is somewhat more general.")) (|primitivePart| (($ $) "\\spad{primitivePart(p)} returns the unit normalized form of polynomial \\spad{p} divided by the content of \\spad{p}.")) (|content| ((|#2| $) "\\spad{content(p)} gives the gcd of the coefficients of polynomial \\spad{p}.")) (|exquo| (((|Union| $ "failed") $ |#2|) "\\spad{exquo(p,r)} returns the exact quotient of polynomial \\spad{p} by \\spad{r},{} or \"failed\" if none exists.")) (|binomThmExpt| (($ $ $ (|NonNegativeInteger|)) "\\spad{binomThmExpt(p,q,n)} returns \\spad{(x+y)^n} by means of the binomial theorem trick.")) (|pomopo!| (($ $ |#2| |#3| $) "\\spad{pomopo!(p1,r,e,p2)} returns \\spad{p1 + monomial(e,r) * p2} and may use \\spad{p1} as workspace. The constaant \\spad{r} is assumed to be nonzero.")) (|mapExponents| (($ (|Mapping| |#3| |#3|) $) "\\spad{mapExponents(fn,u)} maps function \\spad{fn} onto the exponents of the non-zero monomials of polynomial \\spad{u}.")) (|minimumDegree| ((|#3| $) "\\spad{minimumDegree(p)} gives the least exponent of a non-zero term of polynomial \\spad{p}. Error: if applied to 0.")) (|numberOfMonomials| (((|NonNegativeInteger|) $) "\\spad{numberOfMonomials(p)} gives the number of non-zero monomials in polynomial \\spad{p}.")) (|coefficients| (((|List| |#2|) $) "\\spad{coefficients(p)} gives the list of non-zero coefficients of polynomial \\spad{p}.")) (|ground| ((|#2| $) "\\spad{ground(p)} retracts polynomial \\spad{p} to the coefficient ring.")) (|ground?| (((|Boolean|) $) "\\spad{ground?(p)} tests if polynomial \\spad{p} is a member of the coefficient ring."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146)))) 
(-277 R E) 
((|constructor| (NIL "This category is similar to AbelianMonoidRing,{} except that the sum is assumed to be finite. It is a useful model for polynomials,{} but is somewhat more general.")) (|primitivePart| (($ $) "\\spad{primitivePart(p)} returns the unit normalized form of polynomial \\spad{p} divided by the content of \\spad{p}.")) (|content| ((|#1| $) "\\spad{content(p)} gives the gcd of the coefficients of polynomial \\spad{p}.")) (|exquo| (((|Union| $ "failed") $ |#1|) "\\spad{exquo(p,r)} returns the exact quotient of polynomial \\spad{p} by \\spad{r},{} or \"failed\" if none exists.")) (|binomThmExpt| (($ $ $ (|NonNegativeInteger|)) "\\spad{binomThmExpt(p,q,n)} returns \\spad{(x+y)^n} by means of the binomial theorem trick.")) (|pomopo!| (($ $ |#1| |#2| $) "\\spad{pomopo!(p1,r,e,p2)} returns \\spad{p1 + monomial(e,r) * p2} and may use \\spad{p1} as workspace. The constaant \\spad{r} is assumed to be nonzero.")) (|mapExponents| (($ (|Mapping| |#2| |#2|) $) "\\spad{mapExponents(fn,u)} maps function \\spad{fn} onto the exponents of the non-zero monomials of polynomial \\spad{u}.")) (|minimumDegree| ((|#2| $) "\\spad{minimumDegree(p)} gives the least exponent of a non-zero term of polynomial \\spad{p}. Error: if applied to 0.")) (|numberOfMonomials| (((|NonNegativeInteger|) $) "\\spad{numberOfMonomials(p)} gives the number of non-zero monomials in polynomial \\spad{p}.")) (|coefficients| (((|List| |#1|) $) "\\spad{coefficients(p)} gives the list of non-zero coefficients of polynomial \\spad{p}.")) (|ground| ((|#1| $) "\\spad{ground(p)} retracts polynomial \\spad{p} to the coefficient ring.")) (|ground?| (((|Boolean|) $) "\\spad{ground?(p)} tests if polynomial \\spad{p} is a member of the coefficient ring."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-278 S) 
((|constructor| (NIL "\\indented{1}{A FlexibleArray is the notion of an array intended to allow for growth} at the end only. Hence the following efficient operations \\indented{2}{\\spad{append(x,a)} meaning append item \\spad{x} at the end of the array \\spad{a}} \\indented{2}{\\spad{delete(a,n)} meaning delete the last item from the array \\spad{a}} Flexible arrays support the other operations inherited from \\spadtype{ExtensibleLinearAggregate}. However,{} these are not efficient. Flexible arrays combine the \\spad{O(1)} access time property of arrays with growing and shrinking at the end in \\spad{O(1)} (average) time. This is done by using an ordinary array which may have zero or more empty slots at the end. When the array becomes full it is copied into a new larger (50\\% larger) array. Conversely,{} when the array becomes less than 1/2 full,{} it is copied into a smaller array. Flexible arrays provide for an efficient implementation of many data structures in particular heaps,{} stacks and sets."))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-279 S -3092) 
((|constructor| (NIL "FiniteAlgebraicExtensionField {\\em F} is the category of fields which are finite algebraic extensions of the field {\\em F}. If {\\em F} is finite then any finite algebraic extension of {\\em F} is finite,{} too. Let {\\em K} be a finite algebraic extension of the finite field {\\em F}. The exponentiation of elements of {\\em K} defines a \\spad{Z}-module structure on the multiplicative group of {\\em K}. The additive group of {\\em K} becomes a module over the ring of polynomials over {\\em F} via the operation \\spadfun{linearAssociatedExp}(a:K,{}f:SparseUnivariatePolynomial \\spad{F}) which is linear over {\\em F},{} \\spadignore{i.e.} for elements {\\em a} from {\\em K},{} {\\em c,d} from {\\em F} and {\\em f,g} univariate polynomials over {\\em F} we have \\spadfun{linearAssociatedExp}(a,{}cf+dg) equals {\\em c} times \\spadfun{linearAssociatedExp}(a,{}\\spad{f}) plus {\\em d} times \\spadfun{linearAssociatedExp}(a,{}\\spad{g}). Therefore \\spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\\em F[X]}: \\spadfun{linearAssociatedExp}(a,{}monomial(1,{}\\spad{k})\\$SUP(\\spad{F})) is defined to be \\spadfun{Frobenius}(a,{}\\spad{k}) which is {\\em a**(q**k)} where {\\em q=size()\\$F}. The operations order and discreteLog associated with the multiplicative exponentiation have additive analogues associated to the operation \\spadfun{linearAssociatedExp}. These are the functions \\spadfun{linearAssociatedOrder} and \\spadfun{linearAssociatedLog},{} respectively.")) (|linearAssociatedLog| (((|Union| (|SparseUnivariatePolynomial| |#2|) "failed") $ $) "\\spad{linearAssociatedLog(b,a)} returns a polynomial {\\em g},{} such that the \\spadfun{linearAssociatedExp}(\\spad{b},{}\\spad{g}) equals {\\em a}. If there is no such polynomial {\\em g},{} then \\spadfun{linearAssociatedLog} fails.") (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{linearAssociatedLog(a)} returns a polynomial {\\em g},{} such that \\spadfun{linearAssociatedExp}(normalElement(),{}\\spad{g}) equals {\\em a}.")) (|linearAssociatedOrder| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{linearAssociatedOrder(a)} retruns the monic polynomial {\\em g} of least degree,{} such that \\spadfun{linearAssociatedExp}(a,{}\\spad{g}) is 0.")) (|linearAssociatedExp| (($ $ (|SparseUnivariatePolynomial| |#2|)) "\\spad{linearAssociatedExp(a,f)} is linear over {\\em F},{} \\spadignore{i.e.} for elements {\\em a} from {\\em \\$},{} {\\em c,d} form {\\em F} and {\\em f,g} univariate polynomials over {\\em F} we have \\spadfun{linearAssociatedExp}(a,{}cf+dg) equals {\\em c} times \\spadfun{linearAssociatedExp}(a,{}\\spad{f}) plus {\\em d} times \\spadfun{linearAssociatedExp}(a,{}\\spad{g}). Therefore \\spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\\em F[X]}: \\spadfun{linearAssociatedExp}(a,{}monomial(1,{}\\spad{k})\\$SUP(\\spad{F})) is defined to be \\spadfun{Frobenius}(a,{}\\spad{k}) which is {\\em a**(q**k)},{} where {\\em q=size()\\$F}.")) (|generator| (($) "\\spad{generator()} returns a root of the defining polynomial. This element generates the field as an algebra over the ground field.")) (|normal?| (((|Boolean|) $) "\\spad{normal?(a)} tests whether the element \\spad{a} is normal over the ground field \\spad{F},{} \\spadignore{i.e.} \\spad{a**(q**i), 0 <= i <= extensionDegree()-1} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. Implementation according to Lidl/Niederreiter: Theorem 2.39.")) (|normalElement| (($) "\\spad{normalElement()} returns a element,{} normal over the ground field \\spad{F},{} \\spadignore{i.e.} \\spad{a**(q**i), 0 <= i < extensionDegree()} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. At the first call,{} the element is computed by \\spadfunFrom{createNormalElement}{FiniteAlgebraicExtensionField} then cached in a global variable. On subsequent calls,{} the element is retrieved by referencing the global variable.")) (|createNormalElement| (($) "\\spad{createNormalElement()} computes a normal element over the ground field \\spad{F},{} that is,{} \\spad{a**(q**i), 0 <= i < extensionDegree()} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. Reference: Such an element exists Lidl/Niederreiter: Theorem 2.35.")) (|trace| (($ $ (|PositiveInteger|)) "\\spad{trace(a,d)} computes the trace of \\spad{a} with respect to the field of extension degree \\spad{d} over the ground field of size \\spad{q}. Error: if \\spad{d} does not divide the extension degree of \\spad{a}. Note: \\spad{trace(a,d) = reduce(+,[a**(q**(d*i)) for i in 0..n/d])}.") ((|#2| $) "\\spad{trace(a)} computes the trace of \\spad{a} with respect to the field considered as an algebra with 1 over the ground field \\spad{F}.")) (|norm| (($ $ (|PositiveInteger|)) "\\spad{norm(a,d)} computes the norm of \\spad{a} with respect to the field of extension degree \\spad{d} over the ground field of size. Error: if \\spad{d} does not divide the extension degree of \\spad{a}. Note: norm(a,{}\\spad{d}) = reduce(*,{}[a**(q**(d*i)) for \\spad{i} in 0..n/d])") ((|#2| $) "\\spad{norm(a)} computes the norm of \\spad{a} with respect to the field considered as an algebra with 1 over the ground field \\spad{F}.")) (|degree| (((|PositiveInteger|) $) "\\spad{degree(a)} returns the degree of the minimal polynomial of an element \\spad{a} over the ground field \\spad{F}.")) (|extensionDegree| (((|PositiveInteger|)) "\\spad{extensionDegree()} returns the degree of field extension.")) (|definingPolynomial| (((|SparseUnivariatePolynomial| |#2|)) "\\spad{definingPolynomial()} returns the polynomial used to define the field extension.")) (|minimalPolynomial| (((|SparseUnivariatePolynomial| $) $ (|PositiveInteger|)) "\\spad{minimalPolynomial(x,n)} computes the minimal polynomial of \\spad{x} over the field of extension degree \\spad{n} over the ground field \\spad{F}.") (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{minimalPolynomial(a)} returns the minimal polynomial of an element \\spad{a} over the ground field \\spad{F}.")) (|represents| (($ (|Vector| |#2|)) "\\spad{represents([a1,..,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{}...,{}vn are the elements of the fixed basis.")) (|coordinates| (((|Matrix| |#2|) (|Vector| $)) "\\spad{coordinates([v1,...,vm])} returns the coordinates of the \\spad{vi}'s with to the fixed basis. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.") (((|Vector| |#2|) $) "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{F}-vectorspace basis.")) (|basis| (((|Vector| $) (|PositiveInteger|)) "\\spad{basis(n)} returns a fixed basis of a subfield of \\$ as \\spad{F}-vectorspace.") (((|Vector| $)) "\\spad{basis()} returns a fixed basis of \\$ as \\spad{F}-vectorspace."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-319)))) 
(-280 -3092) 
((|constructor| (NIL "FiniteAlgebraicExtensionField {\\em F} is the category of fields which are finite algebraic extensions of the field {\\em F}. If {\\em F} is finite then any finite algebraic extension of {\\em F} is finite,{} too. Let {\\em K} be a finite algebraic extension of the finite field {\\em F}. The exponentiation of elements of {\\em K} defines a \\spad{Z}-module structure on the multiplicative group of {\\em K}. The additive group of {\\em K} becomes a module over the ring of polynomials over {\\em F} via the operation \\spadfun{linearAssociatedExp}(a:K,{}f:SparseUnivariatePolynomial \\spad{F}) which is linear over {\\em F},{} \\spadignore{i.e.} for elements {\\em a} from {\\em K},{} {\\em c,d} from {\\em F} and {\\em f,g} univariate polynomials over {\\em F} we have \\spadfun{linearAssociatedExp}(a,{}cf+dg) equals {\\em c} times \\spadfun{linearAssociatedExp}(a,{}\\spad{f}) plus {\\em d} times \\spadfun{linearAssociatedExp}(a,{}\\spad{g}). Therefore \\spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\\em F[X]}: \\spadfun{linearAssociatedExp}(a,{}monomial(1,{}\\spad{k})\\$SUP(\\spad{F})) is defined to be \\spadfun{Frobenius}(a,{}\\spad{k}) which is {\\em a**(q**k)} where {\\em q=size()\\$F}. The operations order and discreteLog associated with the multiplicative exponentiation have additive analogues associated to the operation \\spadfun{linearAssociatedExp}. These are the functions \\spadfun{linearAssociatedOrder} and \\spadfun{linearAssociatedLog},{} respectively.")) (|linearAssociatedLog| (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") $ $) "\\spad{linearAssociatedLog(b,a)} returns a polynomial {\\em g},{} such that the \\spadfun{linearAssociatedExp}(\\spad{b},{}\\spad{g}) equals {\\em a}. If there is no such polynomial {\\em g},{} then \\spadfun{linearAssociatedLog} fails.") (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{linearAssociatedLog(a)} returns a polynomial {\\em g},{} such that \\spadfun{linearAssociatedExp}(normalElement(),{}\\spad{g}) equals {\\em a}.")) (|linearAssociatedOrder| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{linearAssociatedOrder(a)} retruns the monic polynomial {\\em g} of least degree,{} such that \\spadfun{linearAssociatedExp}(a,{}\\spad{g}) is 0.")) (|linearAssociatedExp| (($ $ (|SparseUnivariatePolynomial| |#1|)) "\\spad{linearAssociatedExp(a,f)} is linear over {\\em F},{} \\spadignore{i.e.} for elements {\\em a} from {\\em \\$},{} {\\em c,d} form {\\em F} and {\\em f,g} univariate polynomials over {\\em F} we have \\spadfun{linearAssociatedExp}(a,{}cf+dg) equals {\\em c} times \\spadfun{linearAssociatedExp}(a,{}\\spad{f}) plus {\\em d} times \\spadfun{linearAssociatedExp}(a,{}\\spad{g}). Therefore \\spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\\em F[X]}: \\spadfun{linearAssociatedExp}(a,{}monomial(1,{}\\spad{k})\\$SUP(\\spad{F})) is defined to be \\spadfun{Frobenius}(a,{}\\spad{k}) which is {\\em a**(q**k)},{} where {\\em q=size()\\$F}.")) (|generator| (($) "\\spad{generator()} returns a root of the defining polynomial. This element generates the field as an algebra over the ground field.")) (|normal?| (((|Boolean|) $) "\\spad{normal?(a)} tests whether the element \\spad{a} is normal over the ground field \\spad{F},{} \\spadignore{i.e.} \\spad{a**(q**i), 0 <= i <= extensionDegree()-1} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. Implementation according to Lidl/Niederreiter: Theorem 2.39.")) (|normalElement| (($) "\\spad{normalElement()} returns a element,{} normal over the ground field \\spad{F},{} \\spadignore{i.e.} \\spad{a**(q**i), 0 <= i < extensionDegree()} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. At the first call,{} the element is computed by \\spadfunFrom{createNormalElement}{FiniteAlgebraicExtensionField} then cached in a global variable. On subsequent calls,{} the element is retrieved by referencing the global variable.")) (|createNormalElement| (($) "\\spad{createNormalElement()} computes a normal element over the ground field \\spad{F},{} that is,{} \\spad{a**(q**i), 0 <= i < extensionDegree()} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. Reference: Such an element exists Lidl/Niederreiter: Theorem 2.35.")) (|trace| (($ $ (|PositiveInteger|)) "\\spad{trace(a,d)} computes the trace of \\spad{a} with respect to the field of extension degree \\spad{d} over the ground field of size \\spad{q}. Error: if \\spad{d} does not divide the extension degree of \\spad{a}. Note: \\spad{trace(a,d) = reduce(+,[a**(q**(d*i)) for i in 0..n/d])}.") ((|#1| $) "\\spad{trace(a)} computes the trace of \\spad{a} with respect to the field considered as an algebra with 1 over the ground field \\spad{F}.")) (|norm| (($ $ (|PositiveInteger|)) "\\spad{norm(a,d)} computes the norm of \\spad{a} with respect to the field of extension degree \\spad{d} over the ground field of size. Error: if \\spad{d} does not divide the extension degree of \\spad{a}. Note: norm(a,{}\\spad{d}) = reduce(*,{}[a**(q**(d*i)) for \\spad{i} in 0..n/d])") ((|#1| $) "\\spad{norm(a)} computes the norm of \\spad{a} with respect to the field considered as an algebra with 1 over the ground field \\spad{F}.")) (|degree| (((|PositiveInteger|) $) "\\spad{degree(a)} returns the degree of the minimal polynomial of an element \\spad{a} over the ground field \\spad{F}.")) (|extensionDegree| (((|PositiveInteger|)) "\\spad{extensionDegree()} returns the degree of field extension.")) (|definingPolynomial| (((|SparseUnivariatePolynomial| |#1|)) "\\spad{definingPolynomial()} returns the polynomial used to define the field extension.")) (|minimalPolynomial| (((|SparseUnivariatePolynomial| $) $ (|PositiveInteger|)) "\\spad{minimalPolynomial(x,n)} computes the minimal polynomial of \\spad{x} over the field of extension degree \\spad{n} over the ground field \\spad{F}.") (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{minimalPolynomial(a)} returns the minimal polynomial of an element \\spad{a} over the ground field \\spad{F}.")) (|represents| (($ (|Vector| |#1|)) "\\spad{represents([a1,..,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{}...,{}vn are the elements of the fixed basis.")) (|coordinates| (((|Matrix| |#1|) (|Vector| $)) "\\spad{coordinates([v1,...,vm])} returns the coordinates of the \\spad{vi}'s with to the fixed basis. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.") (((|Vector| |#1|) $) "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{F}-vectorspace basis.")) (|basis| (((|Vector| $) (|PositiveInteger|)) "\\spad{basis(n)} returns a fixed basis of a subfield of \\$ as \\spad{F}-vectorspace.") (((|Vector| $)) "\\spad{basis()} returns a fixed basis of \\$ as \\spad{F}-vectorspace."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-281 E) 
((|constructor| (NIL "\\indented{1}{Author: James Davenport} Date Created: 17 April 1992 Date Last Updated: 12 June 1992 Basic Functions: Related Constructors: Also See: AMS Classifications: Keywords: References: Description:")) (|argument| ((|#1| $) "\\spad{argument(x)} returns the argument of a given sin/cos expressions")) (|sin?| (((|Boolean|) $) "\\spad{sin?(x)} returns \\spad{true} if term is a sin,{} otherwise \\spad{false}")) (|cos| (($ |#1|) "\\spad{cos(x)} makes a cos kernel for use in Fourier series")) (|sin| (($ |#1|) "\\spad{sin(x)} makes a sin kernel for use in Fourier series"))) 
NIL 
NIL 
(-282) 
((|constructor| (NIL "Represntation of data needed to instantiate a domain constructor.")) (|lookupFunction| (((|Identifier|) $) "\\spad{lookupFunction x} returns the name of the lookup function associated with the functor data \\spad{x}.")) (|categories| (((|PrimitiveArray| (|ConstructorCall| (|CategoryConstructor|))) $) "\\spad{categories x} returns the list of categories forms each domain object obtained from the domain data \\spad{x} belongs to.")) (|encodingDirectory| (((|PrimitiveArray| (|NonNegativeInteger|)) $) "\\spad{encodintDirectory x} returns the directory of domain-wide entity description.")) (|attributeData| (((|List| (|Pair| (|Syntax|) (|NonNegativeInteger|))) $) "\\spad{attributeData x} returns the list of attribute-predicate bit vector index pair associated with the functor data \\spad{x}.")) (|domainTemplate| (((|DomainTemplate|) $) "\\spad{domainTemplate x} returns the domain template vector associated with the functor data \\spad{x}."))) 
NIL 
NIL 
(-283 -3092 UP UPUP R) 
((|constructor| (NIL "This domains implements finite rational divisors on a curve,{} that is finite formal sums SUM(\\spad{n} * \\spad{P}) where the \\spad{n}'s are integers and the \\spad{P}'s are finite rational points on the curve.")) (|lSpaceBasis| (((|Vector| |#4|) $) "\\spad{lSpaceBasis(d)} returns a basis for \\spad{L(d) = {f | (f) >= -d}} as a module over \\spad{K[x]}.")) (|finiteBasis| (((|Vector| |#4|) $) "\\spad{finiteBasis(d)} returns a basis for \\spad{d} as a module over {\\em K[x]}."))) 
NIL 
NIL 
(-284 R1 UP1 UPUP1 F1 R2 UP2 UPUP2 F2) 
((|constructor| (NIL "\\indented{1}{Lift a map to finite divisors.} Author: Manuel Bronstein Date Created: 1988 Date Last Updated: 19 May 1993")) (|map| (((|FiniteDivisor| |#5| |#6| |#7| |#8|) (|Mapping| |#5| |#1|) (|FiniteDivisor| |#1| |#2| |#3| |#4|)) "\\spad{map(f,d)} \\undocumented{}"))) 
NIL 
NIL 
(-285 S -3092 UP UPUP R) 
((|constructor| (NIL "This category describes finite rational divisors on a curve,{} that is finite formal sums SUM(\\spad{n} * \\spad{P}) where the \\spad{n}'s are integers and the \\spad{P}'s are finite rational points on the curve.")) (|generator| (((|Union| |#5| "failed") $) "\\spad{generator(d)} returns \\spad{f} if \\spad{(f) = d},{} \"failed\" if \\spad{d} is not principal.")) (|principal?| (((|Boolean|) $) "\\spad{principal?(D)} tests if the argument is the divisor of a function.")) (|reduce| (($ $) "\\spad{reduce(D)} converts \\spad{D} to some reduced form (the reduced forms can be differents in different implementations).")) (|decompose| (((|Record| (|:| |id| (|FractionalIdeal| |#3| (|Fraction| |#3|) |#4| |#5|)) (|:| |principalPart| |#5|)) $) "\\spad{decompose(d)} returns \\spad{[id, f]} where \\spad{d = (id) + div(f)}.")) (|divisor| (($ |#5| |#3| |#3| |#3| |#2|) "\\spad{divisor(h, d, d', g, r)} returns the sum of all the finite points where \\spad{h/d} has residue \\spad{r}. \\spad{h} must be integral. \\spad{d} must be squarefree. \\spad{d'} is some derivative of \\spad{d} (not necessarily dd/dx). \\spad{g = gcd(d,discriminant)} contains the ramified zeros of \\spad{d}") (($ |#2| |#2| (|Integer|)) "\\spad{divisor(a, b, n)} makes the divisor \\spad{nP} where P: \\spad{(x = a, y = b)}. \\spad{P} is allowed to be singular if \\spad{n} is a multiple of the rank.") (($ |#2| |#2|) "\\spad{divisor(a, b)} makes the divisor P: \\spad{(x = a, y = b)}. Error: if \\spad{P} is singular.") (($ |#5|) "\\spad{divisor(g)} returns the divisor of the function \\spad{g}.") (($ (|FractionalIdeal| |#3| (|Fraction| |#3|) |#4| |#5|)) "\\spad{divisor(I)} makes a divisor \\spad{D} from an ideal \\spad{I}.")) (|ideal| (((|FractionalIdeal| |#3| (|Fraction| |#3|) |#4| |#5|) $) "\\spad{ideal(D)} returns the ideal corresponding to a divisor \\spad{D}."))) 
NIL 
NIL 
(-286 -3092 UP UPUP R) 
((|constructor| (NIL "This category describes finite rational divisors on a curve,{} that is finite formal sums SUM(\\spad{n} * \\spad{P}) where the \\spad{n}'s are integers and the \\spad{P}'s are finite rational points on the curve.")) (|generator| (((|Union| |#4| "failed") $) "\\spad{generator(d)} returns \\spad{f} if \\spad{(f) = d},{} \"failed\" if \\spad{d} is not principal.")) (|principal?| (((|Boolean|) $) "\\spad{principal?(D)} tests if the argument is the divisor of a function.")) (|reduce| (($ $) "\\spad{reduce(D)} converts \\spad{D} to some reduced form (the reduced forms can be differents in different implementations).")) (|decompose| (((|Record| (|:| |id| (|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|)) (|:| |principalPart| |#4|)) $) "\\spad{decompose(d)} returns \\spad{[id, f]} where \\spad{d = (id) + div(f)}.")) (|divisor| (($ |#4| |#2| |#2| |#2| |#1|) "\\spad{divisor(h, d, d', g, r)} returns the sum of all the finite points where \\spad{h/d} has residue \\spad{r}. \\spad{h} must be integral. \\spad{d} must be squarefree. \\spad{d'} is some derivative of \\spad{d} (not necessarily dd/dx). \\spad{g = gcd(d,discriminant)} contains the ramified zeros of \\spad{d}") (($ |#1| |#1| (|Integer|)) "\\spad{divisor(a, b, n)} makes the divisor \\spad{nP} where P: \\spad{(x = a, y = b)}. \\spad{P} is allowed to be singular if \\spad{n} is a multiple of the rank.") (($ |#1| |#1|) "\\spad{divisor(a, b)} makes the divisor P: \\spad{(x = a, y = b)}. Error: if \\spad{P} is singular.") (($ |#4|) "\\spad{divisor(g)} returns the divisor of the function \\spad{g}.") (($ (|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|)) "\\spad{divisor(I)} makes a divisor \\spad{D} from an ideal \\spad{I}.")) (|ideal| (((|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|) $) "\\spad{ideal(D)} returns the ideal corresponding to a divisor \\spad{D}."))) 
NIL 
NIL 
(-287 S R) 
((|constructor| (NIL "This category provides a selection of evaluation operations depending on what the argument type \\spad{R} provides.")) (|map| (($ (|Mapping| |#2| |#2|) $) "\\spad{map(f, ex)} evaluates ex,{} applying \\spad{f} to values of type \\spad{R} in ex."))) 
NIL 
((|HasCategory| |#2| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#2|))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))) (|HasCategory| |#2| (|%list| (QUOTE -241) (|devaluate| |#2|) (|devaluate| |#2|)))) 
(-288 R) 
((|constructor| (NIL "This category provides a selection of evaluation operations depending on what the argument type \\spad{R} provides.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f, ex)} evaluates ex,{} applying \\spad{f} to values of type \\spad{R} in ex."))) 
NIL 
NIL 
(-289 |p| |n|) 
((|constructor| (NIL "FiniteField(\\spad{p},{}\\spad{n}) implements finite fields with p**n elements. This packages checks that \\spad{p} is prime. For a non-checking version,{} see \\spadtype{InnerFiniteField}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| (-817 |#1|) (QUOTE (-118))) (|HasCategory| (-817 |#1|) (QUOTE (-319)))) (|HasCategory| (-817 |#1|) (QUOTE (-120))) (|HasCategory| (-817 |#1|) (QUOTE (-319))) (|HasCategory| (-817 |#1|) (QUOTE (-118)))) 
(-290 S -3092 UP UPUP) 
((|constructor| (NIL "This category is a model for the function field of a plane algebraic curve.")) (|rationalPoints| (((|List| (|List| |#2|))) "\\spad{rationalPoints()} returns the list of all the affine rational points.")) (|nonSingularModel| (((|List| (|Polynomial| |#2|)) (|Symbol|)) "\\spad{nonSingularModel(u)} returns the equations in \\spad{u1},{}...,{}un of an affine non-singular model for the curve.")) (|algSplitSimple| (((|Record| (|:| |num| $) (|:| |den| |#3|) (|:| |derivden| |#3|) (|:| |gd| |#3|)) $ (|Mapping| |#3| |#3|)) "\\spad{algSplitSimple(f, D)} returns \\spad{[h,d,d',g]} such that \\spad{f=h/d},{} \\spad{h} is integral at all the normal places \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D},{} \\spad{d' = Dd},{} \\spad{g = gcd(d, discriminant())} and \\spad{D} is the derivation to use. \\spad{f} must have at most simple finite poles.")) (|hyperelliptic| (((|Union| |#3| "failed")) "\\spad{hyperelliptic()} returns \\spad{p(x)} if the curve is the hyperelliptic defined by \\spad{y**2 = p(x)},{} \"failed\" otherwise.")) (|elliptic| (((|Union| |#3| "failed")) "\\spad{elliptic()} returns \\spad{p(x)} if the curve is the elliptic defined by \\spad{y**2 = p(x)},{} \"failed\" otherwise.")) (|elt| ((|#2| $ |#2| |#2|) "\\spad{elt(f,a,b)} or \\spad{f}(a,{} \\spad{b}) returns the value of \\spad{f} at the point \\spad{(x = a, y = b)} if it is not singular.")) (|primitivePart| (($ $) "\\spad{primitivePart(f)} removes the content of the denominator and the common content of the numerator of \\spad{f}.")) (|differentiate| (($ $ (|Mapping| |#3| |#3|)) "\\spad{differentiate(x, d)} extends the derivation \\spad{d} from UP to \\$ and applies it to \\spad{x}.")) (|integralDerivationMatrix| (((|Record| (|:| |num| (|Matrix| |#3|)) (|:| |den| |#3|)) (|Mapping| |#3| |#3|)) "\\spad{integralDerivationMatrix(d)} extends the derivation \\spad{d} from UP to \\$ and returns (\\spad{M},{} \\spad{Q}) such that the i^th row of \\spad{M} divided by \\spad{Q} form the coordinates of \\spad{d(wi)} with respect to \\spad{(w1,...,wn)} where \\spad{(w1,...,wn)} is the integral basis returned by integralBasis().")) (|integralRepresents| (($ (|Vector| |#3|) |#3|) "\\spad{integralRepresents([A1,...,An], D)} returns \\spad{(A1 w1+...+An wn)/D} where \\spad{(w1,...,wn)} is the integral basis of \\spad{integralBasis()}.")) (|integralCoordinates| (((|Record| (|:| |num| (|Vector| |#3|)) (|:| |den| |#3|)) $) "\\spad{integralCoordinates(f)} returns \\spad{[[A1,...,An], D]} such that \\spad{f = (A1 w1 +...+ An wn) / D} where \\spad{(w1,...,wn)} is the integral basis returned by \\spad{integralBasis()}.")) (|represents| (($ (|Vector| |#3|) |#3|) "\\spad{represents([A0,...,A(n-1)],D)} returns \\spad{(A0 + A1 y +...+ A(n-1)*y**(n-1))/D}.")) (|yCoordinates| (((|Record| (|:| |num| (|Vector| |#3|)) (|:| |den| |#3|)) $) "\\spad{yCoordinates(f)} returns \\spad{[[A1,...,An], D]} such that \\spad{f = (A1 + A2 y +...+ An y**(n-1)) / D}.")) (|inverseIntegralMatrixAtInfinity| (((|Matrix| (|Fraction| |#3|))) "\\spad{inverseIntegralMatrixAtInfinity()} returns \\spad{M} such that \\spad{M (v1,...,vn) = (1, y, ..., y**(n-1))} where \\spad{(v1,...,vn)} is the local integral basis at infinity returned by \\spad{infIntBasis()}.")) (|integralMatrixAtInfinity| (((|Matrix| (|Fraction| |#3|))) "\\spad{integralMatrixAtInfinity()} returns \\spad{M} such that \\spad{(v1,...,vn) = M (1, y, ..., y**(n-1))} where \\spad{(v1,...,vn)} is the local integral basis at infinity returned by \\spad{infIntBasis()}.")) (|inverseIntegralMatrix| (((|Matrix| (|Fraction| |#3|))) "\\spad{inverseIntegralMatrix()} returns \\spad{M} such that \\spad{M (w1,...,wn) = (1, y, ..., y**(n-1))} where \\spad{(w1,...,wn)} is the integral basis of \\spadfunFrom{integralBasis}{FunctionFieldCategory}.")) (|integralMatrix| (((|Matrix| (|Fraction| |#3|))) "\\spad{integralMatrix()} returns \\spad{M} such that \\spad{(w1,...,wn) = M (1, y, ..., y**(n-1))},{} where \\spad{(w1,...,wn)} is the integral basis of \\spadfunFrom{integralBasis}{FunctionFieldCategory}.")) (|reduceBasisAtInfinity| (((|Vector| $) (|Vector| $)) "\\spad{reduceBasisAtInfinity(b1,...,bn)} returns \\spad{(x**i * bj)} for all \\spad{i},{}\\spad{j} such that \\spad{x**i*bj} is locally integral at infinity.")) (|normalizeAtInfinity| (((|Vector| $) (|Vector| $)) "\\spad{normalizeAtInfinity(v)} makes \\spad{v} normal at infinity.")) (|complementaryBasis| (((|Vector| $) (|Vector| $)) "\\spad{complementaryBasis(b1,...,bn)} returns the complementary basis \\spad{(b1',...,bn')} of \\spad{(b1,...,bn)}.")) (|integral?| (((|Boolean|) $ |#3|) "\\spad{integral?(f, p)} tests whether \\spad{f} is locally integral at \\spad{p(x) = 0}.") (((|Boolean|) $ |#2|) "\\spad{integral?(f, a)} tests whether \\spad{f} is locally integral at \\spad{x = a}.") (((|Boolean|) $) "\\spad{integral?()} tests if \\spad{f} is integral over \\spad{k[x]}.")) (|integralAtInfinity?| (((|Boolean|) $) "\\spad{integralAtInfinity?()} tests if \\spad{f} is locally integral at infinity.")) (|integralBasisAtInfinity| (((|Vector| $)) "\\spad{integralBasisAtInfinity()} returns the local integral basis at infinity.")) (|integralBasis| (((|Vector| $)) "\\spad{integralBasis()} returns the integral basis for the curve.")) (|ramified?| (((|Boolean|) |#3|) "\\spad{ramified?(p)} tests whether \\spad{p(x) = 0} is ramified.") (((|Boolean|) |#2|) "\\spad{ramified?(a)} tests whether \\spad{x = a} is ramified.")) (|ramifiedAtInfinity?| (((|Boolean|)) "\\spad{ramifiedAtInfinity?()} tests if infinity is ramified.")) (|singular?| (((|Boolean|) |#3|) "\\spad{singular?(p)} tests whether \\spad{p(x) = 0} is singular.") (((|Boolean|) |#2|) "\\spad{singular?(a)} tests whether \\spad{x = a} is singular.")) (|singularAtInfinity?| (((|Boolean|)) "\\spad{singularAtInfinity?()} tests if there is a singularity at infinity.")) (|branchPoint?| (((|Boolean|) |#3|) "\\spad{branchPoint?(p)} tests whether \\spad{p(x) = 0} is a branch point.") (((|Boolean|) |#2|) "\\spad{branchPoint?(a)} tests whether \\spad{x = a} is a branch point.")) (|branchPointAtInfinity?| (((|Boolean|)) "\\spad{branchPointAtInfinity?()} tests if there is a branch point at infinity.")) (|rationalPoint?| (((|Boolean|) |#2| |#2|) "\\spad{rationalPoint?(a, b)} tests if \\spad{(x=a,y=b)} is on the curve.")) (|absolutelyIrreducible?| (((|Boolean|)) "\\spad{absolutelyIrreducible?()} tests if the curve absolutely irreducible?")) (|genus| (((|NonNegativeInteger|)) "\\spad{genus()} returns the genus of one absolutely irreducible component")) (|numberOfComponents| (((|NonNegativeInteger|)) "\\spad{numberOfComponents()} returns the number of absolutely irreducible components."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-312)))) 
(-291 -3092 UP UPUP) 
((|constructor| (NIL "This category is a model for the function field of a plane algebraic curve.")) (|rationalPoints| (((|List| (|List| |#1|))) "\\spad{rationalPoints()} returns the list of all the affine rational points.")) (|nonSingularModel| (((|List| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{nonSingularModel(u)} returns the equations in \\spad{u1},{}...,{}un of an affine non-singular model for the curve.")) (|algSplitSimple| (((|Record| (|:| |num| $) (|:| |den| |#2|) (|:| |derivden| |#2|) (|:| |gd| |#2|)) $ (|Mapping| |#2| |#2|)) "\\spad{algSplitSimple(f, D)} returns \\spad{[h,d,d',g]} such that \\spad{f=h/d},{} \\spad{h} is integral at all the normal places \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D},{} \\spad{d' = Dd},{} \\spad{g = gcd(d, discriminant())} and \\spad{D} is the derivation to use. \\spad{f} must have at most simple finite poles.")) (|hyperelliptic| (((|Union| |#2| "failed")) "\\spad{hyperelliptic()} returns \\spad{p(x)} if the curve is the hyperelliptic defined by \\spad{y**2 = p(x)},{} \"failed\" otherwise.")) (|elliptic| (((|Union| |#2| "failed")) "\\spad{elliptic()} returns \\spad{p(x)} if the curve is the elliptic defined by \\spad{y**2 = p(x)},{} \"failed\" otherwise.")) (|elt| ((|#1| $ |#1| |#1|) "\\spad{elt(f,a,b)} or \\spad{f}(a,{} \\spad{b}) returns the value of \\spad{f} at the point \\spad{(x = a, y = b)} if it is not singular.")) (|primitivePart| (($ $) "\\spad{primitivePart(f)} removes the content of the denominator and the common content of the numerator of \\spad{f}.")) (|differentiate| (($ $ (|Mapping| |#2| |#2|)) "\\spad{differentiate(x, d)} extends the derivation \\spad{d} from UP to \\$ and applies it to \\spad{x}.")) (|integralDerivationMatrix| (((|Record| (|:| |num| (|Matrix| |#2|)) (|:| |den| |#2|)) (|Mapping| |#2| |#2|)) "\\spad{integralDerivationMatrix(d)} extends the derivation \\spad{d} from UP to \\$ and returns (\\spad{M},{} \\spad{Q}) such that the i^th row of \\spad{M} divided by \\spad{Q} form the coordinates of \\spad{d(wi)} with respect to \\spad{(w1,...,wn)} where \\spad{(w1,...,wn)} is the integral basis returned by integralBasis().")) (|integralRepresents| (($ (|Vector| |#2|) |#2|) "\\spad{integralRepresents([A1,...,An], D)} returns \\spad{(A1 w1+...+An wn)/D} where \\spad{(w1,...,wn)} is the integral basis of \\spad{integralBasis()}.")) (|integralCoordinates| (((|Record| (|:| |num| (|Vector| |#2|)) (|:| |den| |#2|)) $) "\\spad{integralCoordinates(f)} returns \\spad{[[A1,...,An], D]} such that \\spad{f = (A1 w1 +...+ An wn) / D} where \\spad{(w1,...,wn)} is the integral basis returned by \\spad{integralBasis()}.")) (|represents| (($ (|Vector| |#2|) |#2|) "\\spad{represents([A0,...,A(n-1)],D)} returns \\spad{(A0 + A1 y +...+ A(n-1)*y**(n-1))/D}.")) (|yCoordinates| (((|Record| (|:| |num| (|Vector| |#2|)) (|:| |den| |#2|)) $) "\\spad{yCoordinates(f)} returns \\spad{[[A1,...,An], D]} such that \\spad{f = (A1 + A2 y +...+ An y**(n-1)) / D}.")) (|inverseIntegralMatrixAtInfinity| (((|Matrix| (|Fraction| |#2|))) "\\spad{inverseIntegralMatrixAtInfinity()} returns \\spad{M} such that \\spad{M (v1,...,vn) = (1, y, ..., y**(n-1))} where \\spad{(v1,...,vn)} is the local integral basis at infinity returned by \\spad{infIntBasis()}.")) (|integralMatrixAtInfinity| (((|Matrix| (|Fraction| |#2|))) "\\spad{integralMatrixAtInfinity()} returns \\spad{M} such that \\spad{(v1,...,vn) = M (1, y, ..., y**(n-1))} where \\spad{(v1,...,vn)} is the local integral basis at infinity returned by \\spad{infIntBasis()}.")) (|inverseIntegralMatrix| (((|Matrix| (|Fraction| |#2|))) "\\spad{inverseIntegralMatrix()} returns \\spad{M} such that \\spad{M (w1,...,wn) = (1, y, ..., y**(n-1))} where \\spad{(w1,...,wn)} is the integral basis of \\spadfunFrom{integralBasis}{FunctionFieldCategory}.")) (|integralMatrix| (((|Matrix| (|Fraction| |#2|))) "\\spad{integralMatrix()} returns \\spad{M} such that \\spad{(w1,...,wn) = M (1, y, ..., y**(n-1))},{} where \\spad{(w1,...,wn)} is the integral basis of \\spadfunFrom{integralBasis}{FunctionFieldCategory}.")) (|reduceBasisAtInfinity| (((|Vector| $) (|Vector| $)) "\\spad{reduceBasisAtInfinity(b1,...,bn)} returns \\spad{(x**i * bj)} for all \\spad{i},{}\\spad{j} such that \\spad{x**i*bj} is locally integral at infinity.")) (|normalizeAtInfinity| (((|Vector| $) (|Vector| $)) "\\spad{normalizeAtInfinity(v)} makes \\spad{v} normal at infinity.")) (|complementaryBasis| (((|Vector| $) (|Vector| $)) "\\spad{complementaryBasis(b1,...,bn)} returns the complementary basis \\spad{(b1',...,bn')} of \\spad{(b1,...,bn)}.")) (|integral?| (((|Boolean|) $ |#2|) "\\spad{integral?(f, p)} tests whether \\spad{f} is locally integral at \\spad{p(x) = 0}.") (((|Boolean|) $ |#1|) "\\spad{integral?(f, a)} tests whether \\spad{f} is locally integral at \\spad{x = a}.") (((|Boolean|) $) "\\spad{integral?()} tests if \\spad{f} is integral over \\spad{k[x]}.")) (|integralAtInfinity?| (((|Boolean|) $) "\\spad{integralAtInfinity?()} tests if \\spad{f} is locally integral at infinity.")) (|integralBasisAtInfinity| (((|Vector| $)) "\\spad{integralBasisAtInfinity()} returns the local integral basis at infinity.")) (|integralBasis| (((|Vector| $)) "\\spad{integralBasis()} returns the integral basis for the curve.")) (|ramified?| (((|Boolean|) |#2|) "\\spad{ramified?(p)} tests whether \\spad{p(x) = 0} is ramified.") (((|Boolean|) |#1|) "\\spad{ramified?(a)} tests whether \\spad{x = a} is ramified.")) (|ramifiedAtInfinity?| (((|Boolean|)) "\\spad{ramifiedAtInfinity?()} tests if infinity is ramified.")) (|singular?| (((|Boolean|) |#2|) "\\spad{singular?(p)} tests whether \\spad{p(x) = 0} is singular.") (((|Boolean|) |#1|) "\\spad{singular?(a)} tests whether \\spad{x = a} is singular.")) (|singularAtInfinity?| (((|Boolean|)) "\\spad{singularAtInfinity?()} tests if there is a singularity at infinity.")) (|branchPoint?| (((|Boolean|) |#2|) "\\spad{branchPoint?(p)} tests whether \\spad{p(x) = 0} is a branch point.") (((|Boolean|) |#1|) "\\spad{branchPoint?(a)} tests whether \\spad{x = a} is a branch point.")) (|branchPointAtInfinity?| (((|Boolean|)) "\\spad{branchPointAtInfinity?()} tests if there is a branch point at infinity.")) (|rationalPoint?| (((|Boolean|) |#1| |#1|) "\\spad{rationalPoint?(a, b)} tests if \\spad{(x=a,y=b)} is on the curve.")) (|absolutelyIrreducible?| (((|Boolean|)) "\\spad{absolutelyIrreducible?()} tests if the curve absolutely irreducible?")) (|genus| (((|NonNegativeInteger|)) "\\spad{genus()} returns the genus of one absolutely irreducible component")) (|numberOfComponents| (((|NonNegativeInteger|)) "\\spad{numberOfComponents()} returns the number of absolutely irreducible components."))) 
((-3987 |has| (-349 |#2|) (-312)) (-3992 |has| (-349 |#2|) (-312)) (-3986 |has| (-349 |#2|) (-312)) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-292 R1 UP1 UPUP1 F1 R2 UP2 UPUP2 F2) 
((|constructor| (NIL "Lifts a map from rings to function fields over them.")) (|map| ((|#8| (|Mapping| |#5| |#1|) |#4|) "\\spad{map(f, p)} lifts \\spad{f} to \\spad{F1} and applies it to \\spad{p}."))) 
NIL 
NIL 
(-293 |p| |extdeg|) 
((|constructor| (NIL "FiniteFieldCyclicGroup(\\spad{p},{}\\spad{n}) implements a finite field extension of degee \\spad{n} over the prime field with \\spad{p} elements. Its elements are represented by powers of a primitive element,{} \\spadignore{i.e.} a generator of the multiplicative (cyclic) group. As primitive element we choose the root of the extension polynomial,{} which is created by {\\em createPrimitivePoly} from \\spadtype{FiniteFieldPolynomialPackage}. The Zech logarithms are stored in a table of size half of the field size,{} and use \\spadtype{SingleInteger} for representing field elements,{} hence,{} there are restrictions on the size of the field.")) (|getZechTable| (((|PrimitiveArray| (|SingleInteger|))) "\\spad{getZechTable()} returns the zech logarithm table of the field. This table is used to perform additions in the field quickly."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| (-817 |#1|) (QUOTE (-118))) (|HasCategory| (-817 |#1|) (QUOTE (-319)))) (|HasCategory| (-817 |#1|) (QUOTE (-120))) (|HasCategory| (-817 |#1|) (QUOTE (-319))) (|HasCategory| (-817 |#1|) (QUOTE (-118)))) 
(-294 GF |defpol|) 
((|constructor| (NIL "FiniteFieldCyclicGroupExtensionByPolynomial(GF,{}defpol) implements a finite extension field of the ground field {\\em GF}. Its elements are represented by powers of a primitive element,{} \\spadignore{i.e.} a generator of the multiplicative (cyclic) group. As primitive element we choose the root of the extension polynomial {\\em defpol},{} which MUST be primitive (user responsibility). Zech logarithms are stored in a table of size half of the field size,{} and use \\spadtype{SingleInteger} for representing field elements,{} hence,{} there are restrictions on the size of the field.")) (|getZechTable| (((|PrimitiveArray| (|SingleInteger|))) "\\spad{getZechTable()} returns the zech logarithm table of the field it is used to perform additions in the field quickly."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-118)))) 
(-295 GF |extdeg|) 
((|constructor| (NIL "FiniteFieldCyclicGroupExtension(GF,{}\\spad{n}) implements a extension of degree \\spad{n} over the ground field {\\em GF}. Its elements are represented by powers of a primitive element,{} \\spadignore{i.e.} a generator of the multiplicative (cyclic) group. As primitive element we choose the root of the extension polynomial,{} which is created by {\\em createPrimitivePoly} from \\spadtype{FiniteFieldPolynomialPackage}. Zech logarithms are stored in a table of size half of the field size,{} and use \\spadtype{SingleInteger} for representing field elements,{} hence,{} there are restrictions on the size of the field.")) (|getZechTable| (((|PrimitiveArray| (|SingleInteger|))) "\\spad{getZechTable()} returns the zech logarithm table of the field. This table is used to perform additions in the field quickly."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-118)))) 
(-296 GF) 
((|constructor| (NIL "FiniteFieldFunctions(GF) is a package with functions concerning finite extension fields of the finite ground field {\\em GF},{} \\spadignore{e.g.} Zech logarithms.")) (|createLowComplexityNormalBasis| (((|Union| (|SparseUnivariatePolynomial| |#1|) (|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|)))))) (|PositiveInteger|)) "\\spad{createLowComplexityNormalBasis(n)} tries to find a a low complexity normal basis of degree {\\em n} over {\\em GF} and returns its multiplication matrix If no low complexity basis is found it calls \\axiomFunFrom{createNormalPoly}{FiniteFieldPolynomialPackage}(\\spad{n}) to produce a normal polynomial of degree {\\em n} over {\\em GF}")) (|createLowComplexityTable| (((|Union| (|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|))))) "failed") (|PositiveInteger|)) "\\spad{createLowComplexityTable(n)} tries to find a low complexity normal basis of degree {\\em n} over {\\em GF} and returns its multiplication matrix Fails,{} if it does not find a low complexity basis")) (|sizeMultiplication| (((|NonNegativeInteger|) (|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|)))))) "\\spad{sizeMultiplication(m)} returns the number of entries of the multiplication table {\\em m}.")) (|createMultiplicationMatrix| (((|Matrix| |#1|) (|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|)))))) "\\spad{createMultiplicationMatrix(m)} forms the multiplication table {\\em m} into a matrix over the ground field.")) (|createMultiplicationTable| (((|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|))))) (|SparseUnivariatePolynomial| |#1|)) "\\spad{createMultiplicationTable(f)} generates a multiplication table for the normal basis of the field extension determined by {\\em f}. This is needed to perform multiplications between elements represented as coordinate vectors to this basis. See \\spadtype{FFNBP},{} \\spadtype{FFNBX}.")) (|createZechTable| (((|PrimitiveArray| (|SingleInteger|)) (|SparseUnivariatePolynomial| |#1|)) "\\spad{createZechTable(f)} generates a Zech logarithm table for the cyclic group representation of a extension of the ground field by the primitive polynomial {\\em f(x)},{} \\spadignore{i.e.} \\spad{Z(i)},{} defined by {\\em x**Z(i) = 1+x**i} is stored at index \\spad{i}. This is needed in particular to perform addition of field elements in finite fields represented in this way. See \\spadtype{FFCGP},{} \\spadtype{FFCGX}."))) 
NIL 
NIL 
(-297 F1 GF F2) 
((|constructor| (NIL "FiniteFieldHomomorphisms(\\spad{F1},{}GF,{}\\spad{F2}) exports coercion functions of elements between the fields {\\em F1} and {\\em F2},{} which both must be finite simple algebraic extensions of the finite ground field {\\em GF}.")) (|coerce| ((|#1| |#3|) "\\spad{coerce(x)} is the homomorphic image of \\spad{x} from {\\em F2} in {\\em F1},{} where {\\em coerce} is a field homomorphism between the fields extensions {\\em F2} and {\\em F1} both over ground field {\\em GF} (the second argument to the package). Error: if the extension degree of {\\em F2} doesn't divide the extension degree of {\\em F1}. Note that the other coercion function in the \\spadtype{FiniteFieldHomomorphisms} is a left inverse.") ((|#3| |#1|) "\\spad{coerce(x)} is the homomorphic image of \\spad{x} from {\\em F1} in {\\em F2}. Thus {\\em coerce} is a field homomorphism between the fields extensions {\\em F1} and {\\em F2} both over ground field {\\em GF} (the second argument to the package). Error: if the extension degree of {\\em F1} doesn't divide the extension degree of {\\em F2}. Note that the other coercion function in the \\spadtype{FiniteFieldHomomorphisms} is a left inverse."))) 
NIL 
NIL 
(-298 S) 
((|constructor| (NIL "FiniteFieldCategory is the category of finite fields")) (|representationType| (((|Union| "prime" "polynomial" "normal" "cyclic")) "\\spad{representationType()} returns the type of the representation,{} one of: \\spad{prime},{} \\spad{polynomial},{} \\spad{normal},{} or \\spad{cyclic}.")) (|order| (((|PositiveInteger|) $) "\\spad{order(b)} computes the order of an element \\spad{b} in the multiplicative group of the field. Error: if \\spad{b} equals 0.")) (|discreteLog| (((|NonNegativeInteger|) $) "\\spad{discreteLog(a)} computes the discrete logarithm of \\spad{a} with respect to \\spad{primitiveElement()} of the field.")) (|primitive?| (((|Boolean|) $) "\\spad{primitive?(b)} tests whether the element \\spad{b} is a generator of the (cyclic) multiplicative group of the field,{} \\spadignore{i.e.} is a primitive element. Implementation Note: see ch.IX.1.3,{} th.2 in \\spad{D}. Lipson.")) (|primitiveElement| (($) "\\spad{primitiveElement()} returns a primitive element stored in a global variable in the domain. At first call,{} the primitive element is computed by calling \\spadfun{createPrimitiveElement}.")) (|createPrimitiveElement| (($) "\\spad{createPrimitiveElement()} computes a generator of the (cyclic) multiplicative group of the field.")) (|tableForDiscreteLogarithm| (((|Table| (|PositiveInteger|) (|NonNegativeInteger|)) (|Integer|)) "\\spad{tableForDiscreteLogarithm(a,n)} returns a table of the discrete logarithms of \\spad{a**0} up to \\spad{a**(n-1)} which,{} called with key \\spad{lookup(a**i)} returns \\spad{i} for \\spad{i} in \\spad{0..n-1}. Error: if not called for prime divisors of order of \\indented{7}{multiplicative group.}")) (|factorsOfCyclicGroupSize| (((|List| (|Record| (|:| |factor| (|Integer|)) (|:| |exponent| (|Integer|))))) "\\spad{factorsOfCyclicGroupSize()} returns the factorization of size()\\spad{-1}")) (|conditionP| (((|Union| (|Vector| $) "failed") (|Matrix| $)) "\\spad{conditionP(mat)},{} given a matrix representing a homogeneous system of equations,{} returns a vector whose characteristic'th powers is a non-trivial solution,{} or \"failed\" if no such vector exists.")) (|charthRoot| (($ $) "\\spad{charthRoot(a)} takes the characteristic'th root of {\\em a}. Note: such a root is alway defined in finite fields."))) 
NIL 
NIL 
(-299) 
((|constructor| (NIL "FiniteFieldCategory is the category of finite fields")) (|representationType| (((|Union| "prime" "polynomial" "normal" "cyclic")) "\\spad{representationType()} returns the type of the representation,{} one of: \\spad{prime},{} \\spad{polynomial},{} \\spad{normal},{} or \\spad{cyclic}.")) (|order| (((|PositiveInteger|) $) "\\spad{order(b)} computes the order of an element \\spad{b} in the multiplicative group of the field. Error: if \\spad{b} equals 0.")) (|discreteLog| (((|NonNegativeInteger|) $) "\\spad{discreteLog(a)} computes the discrete logarithm of \\spad{a} with respect to \\spad{primitiveElement()} of the field.")) (|primitive?| (((|Boolean|) $) "\\spad{primitive?(b)} tests whether the element \\spad{b} is a generator of the (cyclic) multiplicative group of the field,{} \\spadignore{i.e.} is a primitive element. Implementation Note: see ch.IX.1.3,{} th.2 in \\spad{D}. Lipson.")) (|primitiveElement| (($) "\\spad{primitiveElement()} returns a primitive element stored in a global variable in the domain. At first call,{} the primitive element is computed by calling \\spadfun{createPrimitiveElement}.")) (|createPrimitiveElement| (($) "\\spad{createPrimitiveElement()} computes a generator of the (cyclic) multiplicative group of the field.")) (|tableForDiscreteLogarithm| (((|Table| (|PositiveInteger|) (|NonNegativeInteger|)) (|Integer|)) "\\spad{tableForDiscreteLogarithm(a,n)} returns a table of the discrete logarithms of \\spad{a**0} up to \\spad{a**(n-1)} which,{} called with key \\spad{lookup(a**i)} returns \\spad{i} for \\spad{i} in \\spad{0..n-1}. Error: if not called for prime divisors of order of \\indented{7}{multiplicative group.}")) (|factorsOfCyclicGroupSize| (((|List| (|Record| (|:| |factor| (|Integer|)) (|:| |exponent| (|Integer|))))) "\\spad{factorsOfCyclicGroupSize()} returns the factorization of size()\\spad{-1}")) (|conditionP| (((|Union| (|Vector| $) "failed") (|Matrix| $)) "\\spad{conditionP(mat)},{} given a matrix representing a homogeneous system of equations,{} returns a vector whose characteristic'th powers is a non-trivial solution,{} or \"failed\" if no such vector exists.")) (|charthRoot| (($ $) "\\spad{charthRoot(a)} takes the characteristic'th root of {\\em a}. Note: such a root is alway defined in finite fields."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-300 R UP -3092) 
((|constructor| (NIL "In this package \\spad{R} is a Euclidean domain and \\spad{F} is a framed algebra over \\spad{R}. The package provides functions to compute the integral closure of \\spad{R} in the quotient field of \\spad{F}. It is assumed that \\spad{char(R/P) = char(R)} for any prime \\spad{P} of \\spad{R}. A typical instance of this is when \\spad{R = K[x]} and \\spad{F} is a function field over \\spad{R}.")) (|localIntegralBasis| (((|Record| (|:| |basis| (|Matrix| |#1|)) (|:| |basisDen| |#1|) (|:| |basisInv| (|Matrix| |#1|))) |#1|) "\\spad{integralBasis(p)} returns a record \\spad{[basis,basisDen,basisInv]} containing information regarding the local integral closure of \\spad{R} at the prime \\spad{p} in the quotient field of \\spad{F},{} where \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the local integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of \\spad{basis} contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|integralBasis| (((|Record| (|:| |basis| (|Matrix| |#1|)) (|:| |basisDen| |#1|) (|:| |basisInv| (|Matrix| |#1|)))) "\\spad{integralBasis()} returns a record \\spad{[basis,basisDen,basisInv]} containing information regarding the integral closure of \\spad{R} in the quotient field of \\spad{F},{} where \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of \\spad{basis} contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|squareFree| (((|Factored| $) $) "\\spad{squareFree(x)} returns a square-free factorisation of \\spad{x}"))) 
NIL 
NIL 
(-301 |p| |extdeg|) 
((|constructor| (NIL "FiniteFieldNormalBasis(\\spad{p},{}\\spad{n}) implements a finite extension field of degree \\spad{n} over the prime field with \\spad{p} elements. The elements are represented by coordinate vectors with respect to a normal basis,{} \\spadignore{i.e.} a basis consisting of the conjugates (\\spad{q}-powers) of an element,{} in this case called normal element. This is chosen as a root of the extension polynomial created by \\spadfunFrom{createNormalPoly}{FiniteFieldPolynomialPackage}.")) (|sizeMultiplication| (((|NonNegativeInteger|)) "\\spad{sizeMultiplication()} returns the number of entries in the multiplication table of the field. Note: The time of multiplication of field elements depends on this size.")) (|getMultiplicationMatrix| (((|Matrix| (|PrimeField| |#1|))) "\\spad{getMultiplicationMatrix()} returns the multiplication table in form of a matrix.")) (|getMultiplicationTable| (((|Vector| (|List| (|Record| (|:| |value| (|PrimeField| |#1|)) (|:| |index| (|SingleInteger|)))))) "\\spad{getMultiplicationTable()} returns the multiplication table for the normal basis of the field. This table is used to perform multiplications between field elements."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| (-817 |#1|) (QUOTE (-118))) (|HasCategory| (-817 |#1|) (QUOTE (-319)))) (|HasCategory| (-817 |#1|) (QUOTE (-120))) (|HasCategory| (-817 |#1|) (QUOTE (-319))) (|HasCategory| (-817 |#1|) (QUOTE (-118)))) 
(-302 GF |uni|) 
((|constructor| (NIL "FiniteFieldNormalBasisExtensionByPolynomial(GF,{}uni) implements a finite extension of the ground field {\\em GF}. The elements are represented by coordinate vectors with respect to. a normal basis,{} \\spadignore{i.e.} a basis consisting of the conjugates (\\spad{q}-powers) of an element,{} in this case called normal element,{} where \\spad{q} is the size of {\\em GF}. The normal element is chosen as a root of the extension polynomial,{} which MUST be normal over {\\em GF} (user responsibility)")) (|sizeMultiplication| (((|NonNegativeInteger|)) "\\spad{sizeMultiplication()} returns the number of entries in the multiplication table of the field. Note: the time of multiplication of field elements depends on this size.")) (|getMultiplicationMatrix| (((|Matrix| |#1|)) "\\spad{getMultiplicationMatrix()} returns the multiplication table in form of a matrix.")) (|getMultiplicationTable| (((|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|)))))) "\\spad{getMultiplicationTable()} returns the multiplication table for the normal basis of the field. This table is used to perform multiplications between field elements."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-118)))) 
(-303 GF |extdeg|) 
((|constructor| (NIL "FiniteFieldNormalBasisExtensionByPolynomial(GF,{}\\spad{n}) implements a finite extension field of degree \\spad{n} over the ground field {\\em GF}. The elements are represented by coordinate vectors with respect to a normal basis,{} \\spadignore{i.e.} a basis consisting of the conjugates (\\spad{q}-powers) of an element,{} in this case called normal element. This is chosen as a root of the extension polynomial,{} created by {\\em createNormalPoly} from \\spadtype{FiniteFieldPolynomialPackage}")) (|sizeMultiplication| (((|NonNegativeInteger|)) "\\spad{sizeMultiplication()} returns the number of entries in the multiplication table of the field. Note: the time of multiplication of field elements depends on this size.")) (|getMultiplicationMatrix| (((|Matrix| |#1|)) "\\spad{getMultiplicationMatrix()} returns the multiplication table in form of a matrix.")) (|getMultiplicationTable| (((|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|)))))) "\\spad{getMultiplicationTable()} returns the multiplication table for the normal basis of the field. This table is used to perform multiplications between field elements."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-118)))) 
(-304 GF |defpol|) 
((|constructor| (NIL "FiniteFieldExtensionByPolynomial(GF,{} defpol) implements the extension of the finite field {\\em GF} generated by the extension polynomial {\\em defpol} which MUST be irreducible. Note: the user has the responsibility to ensure that {\\em defpol} is irreducible."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-118)))) 
(-305 GF) 
((|constructor| (NIL "This package provides a number of functions for generating,{} counting and testing irreducible,{} normal,{} primitive,{} random polynomials over finite fields.")) (|reducedQPowers| (((|PrimitiveArray| (|SparseUnivariatePolynomial| |#1|)) (|SparseUnivariatePolynomial| |#1|)) "\\spad{reducedQPowers(f)} generates \\spad{[x,x**q,x**(q**2),...,x**(q**(n-1))]} reduced modulo \\spad{f} where \\spad{q = size()\\$GF} and \\spad{n = degree f}.")) (|leastAffineMultiple| (((|SparseUnivariatePolynomial| |#1|) (|SparseUnivariatePolynomial| |#1|)) "\\spad{leastAffineMultiple(f)} computes the least affine polynomial which is divisible by the polynomial \\spad{f} over the finite field {\\em GF},{} \\spadignore{i.e.} a polynomial whose exponents are 0 or a power of \\spad{q},{} the size of {\\em GF}.")) (|random| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|) (|PositiveInteger|)) "\\spad{random(m,n)}\\$FFPOLY(GF) generates a random monic polynomial of degree \\spad{d} over the finite field {\\em GF},{} \\spad{d} between \\spad{m} and \\spad{n}.") (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{random(n)}\\$FFPOLY(GF) generates a random monic polynomial of degree \\spad{n} over the finite field {\\em GF}.")) (|nextPrimitiveNormalPoly| (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") (|SparseUnivariatePolynomial| |#1|)) "\\spad{nextPrimitiveNormalPoly(f)} yields the next primitive normal polynomial over a finite field {\\em GF} of the same degree as \\spad{f} in the following order,{} or \"failed\" if there are no greater ones. Error: if \\spad{f} has degree 0. Note: the input polynomial \\spad{f} is made monic. Also,{} \\spad{f < g} if the {\\em lookup} of the constant term of \\spad{f} is less than this number for \\spad{g} or,{} in case these numbers are equal,{} if the {\\em lookup} of the coefficient of the term of degree {\\em n-1} of \\spad{f} is less than this number for \\spad{g}. If these numbers are equals,{} \\spad{f < g} if the number of monomials of \\spad{f} is less than that for \\spad{g},{} or if the lists of exponents for \\spad{f} are lexicographically less than those for \\spad{g}. If these lists are also equal,{} the lists of coefficients are coefficients according to the lexicographic ordering induced by the ordering of the elements of {\\em GF} given by {\\em lookup}. This operation is equivalent to nextNormalPrimitivePoly(\\spad{f}).")) (|nextNormalPrimitivePoly| (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") (|SparseUnivariatePolynomial| |#1|)) "\\spad{nextNormalPrimitivePoly(f)} yields the next normal primitive polynomial over a finite field {\\em GF} of the same degree as \\spad{f} in the following order,{} or \"failed\" if there are no greater ones. Error: if \\spad{f} has degree 0. Note: the input polynomial \\spad{f} is made monic. Also,{} \\spad{f < g} if the {\\em lookup} of the constant term of \\spad{f} is less than this number for \\spad{g} or if {\\em lookup} of the coefficient of the term of degree {\\em n-1} of \\spad{f} is less than this number for \\spad{g}. Otherwise,{} \\spad{f < g} if the number of monomials of \\spad{f} is less than that for \\spad{g} or if the lists of exponents for \\spad{f} are lexicographically less than those for \\spad{g}. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\\em GF} given by {\\em lookup}. This operation is equivalent to nextPrimitiveNormalPoly(\\spad{f}).")) (|nextNormalPoly| (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") (|SparseUnivariatePolynomial| |#1|)) "\\spad{nextNormalPoly(f)} yields the next normal polynomial over a finite field {\\em GF} of the same degree as \\spad{f} in the following order,{} or \"failed\" if there are no greater ones. Error: if \\spad{f} has degree 0. Note: the input polynomial \\spad{f} is made monic. Also,{} \\spad{f < g} if the {\\em lookup} of the coefficient of the term of degree {\\em n-1} of \\spad{f} is less than that for \\spad{g}. In case these numbers are equal,{} \\spad{f < g} if if the number of monomials of \\spad{f} is less that for \\spad{g} or if the list of exponents of \\spad{f} are lexicographically less than the corresponding list for \\spad{g}. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\\em GF} given by {\\em lookup}.")) (|nextPrimitivePoly| (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") (|SparseUnivariatePolynomial| |#1|)) "\\spad{nextPrimitivePoly(f)} yields the next primitive polynomial over a finite field {\\em GF} of the same degree as \\spad{f} in the following order,{} or \"failed\" if there are no greater ones. Error: if \\spad{f} has degree 0. Note: the input polynomial \\spad{f} is made monic. Also,{} \\spad{f < g} if the {\\em lookup} of the constant term of \\spad{f} is less than this number for \\spad{g}. If these values are equal,{} then \\spad{f < g} if if the number of monomials of \\spad{f} is less than that for \\spad{g} or if the lists of exponents of \\spad{f} are lexicographically less than the corresponding list for \\spad{g}. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\\em GF} given by {\\em lookup}.")) (|nextIrreduciblePoly| (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") (|SparseUnivariatePolynomial| |#1|)) "\\spad{nextIrreduciblePoly(f)} yields the next monic irreducible polynomial over a finite field {\\em GF} of the same degree as \\spad{f} in the following order,{} or \"failed\" if there are no greater ones. Error: if \\spad{f} has degree 0. Note: the input polynomial \\spad{f} is made monic. Also,{} \\spad{f < g} if the number of monomials of \\spad{f} is less than this number for \\spad{g}. If \\spad{f} and \\spad{g} have the same number of monomials,{} the lists of exponents are compared lexicographically. If these lists are also equal,{} the lists of coefficients are compared according to the lexicographic ordering induced by the ordering of the elements of {\\em GF} given by {\\em lookup}.")) (|createPrimitiveNormalPoly| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{createPrimitiveNormalPoly(n)}\\$FFPOLY(GF) generates a normal and primitive polynomial of degree \\spad{n} over the field {\\em GF}. polynomial of degree \\spad{n} over the field {\\em GF}.")) (|createNormalPrimitivePoly| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{createNormalPrimitivePoly(n)}\\$FFPOLY(GF) generates a normal and primitive polynomial of degree \\spad{n} over the field {\\em GF}. Note: this function is equivalent to createPrimitiveNormalPoly(\\spad{n})")) (|createNormalPoly| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{createNormalPoly(n)}\\$FFPOLY(GF) generates a normal polynomial of degree \\spad{n} over the finite field {\\em GF}.")) (|createPrimitivePoly| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{createPrimitivePoly(n)}\\$FFPOLY(GF) generates a primitive polynomial of degree \\spad{n} over the finite field {\\em GF}.")) (|createIrreduciblePoly| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{createIrreduciblePoly(n)}\\$FFPOLY(GF) generates a monic irreducible univariate polynomial of degree \\spad{n} over the finite field {\\em GF}.")) (|numberOfNormalPoly| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{numberOfNormalPoly(n)}\\$FFPOLY(GF) yields the number of normal polynomials of degree \\spad{n} over the finite field {\\em GF}.")) (|numberOfPrimitivePoly| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{numberOfPrimitivePoly(n)}\\$FFPOLY(GF) yields the number of primitive polynomials of degree \\spad{n} over the finite field {\\em GF}.")) (|numberOfIrreduciblePoly| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{numberOfIrreduciblePoly(n)}\\$FFPOLY(GF) yields the number of monic irreducible univariate polynomials of degree \\spad{n} over the finite field {\\em GF}.")) (|normal?| (((|Boolean|) (|SparseUnivariatePolynomial| |#1|)) "\\spad{normal?(f)} tests whether the polynomial \\spad{f} over a finite field is normal,{} \\spadignore{i.e.} its roots are linearly independent over the field.")) (|primitive?| (((|Boolean|) (|SparseUnivariatePolynomial| |#1|)) "\\spad{primitive?(f)} tests whether the polynomial \\spad{f} over a finite field is primitive,{} \\spadignore{i.e.} all its roots are primitive."))) 
NIL 
NIL 
(-306 -3092 GF) 
((|constructor| (NIL "\\spad{FiniteFieldPolynomialPackage2}(\\spad{F},{}GF) exports some functions concerning finite fields,{} which depend on a finite field {\\em GF} and an algebraic extension \\spad{F} of {\\em GF},{} \\spadignore{e.g.} a zero of a polynomial over {\\em GF} in \\spad{F}.")) (|rootOfIrreduciblePoly| ((|#1| (|SparseUnivariatePolynomial| |#2|)) "\\spad{rootOfIrreduciblePoly(f)} computes one root of the monic,{} irreducible polynomial \\spad{f},{} which degree must divide the extension degree of {\\em F} over {\\em GF},{} \\spadignore{i.e.} \\spad{f} splits into linear factors over {\\em F}.")) (|Frobenius| ((|#1| |#1|) "\\spad{Frobenius(x)} \\undocumented{}")) (|basis| (((|Vector| |#1|) (|PositiveInteger|)) "\\spad{basis(n)} \\undocumented{}")) (|lookup| (((|PositiveInteger|) |#1|) "\\spad{lookup(x)} \\undocumented{}")) (|coerce| ((|#1| |#2|) "\\spad{coerce(x)} \\undocumented{}"))) 
NIL 
NIL 
(-307 -3092 FP FPP) 
((|constructor| (NIL "This package solves linear diophantine equations for Bivariate polynomials over finite fields")) (|solveLinearPolynomialEquation| (((|Union| (|List| |#3|) "failed") (|List| |#3|) |#3|) "\\spad{solveLinearPolynomialEquation([f1, ..., fn], g)} (where the \\spad{fi} are relatively prime to each other) returns a list of \\spad{ai} such that \\spad{g/prod fi = sum ai/fi} or returns \"failed\" if no such list of \\spad{ai}'s exists."))) 
NIL 
NIL 
(-308 GF |n|) 
((|constructor| (NIL "FiniteFieldExtensionByPolynomial(GF,{} \\spad{n}) implements an extension of the finite field {\\em GF} of degree \\spad{n} generated by the extension polynomial constructed by \\spadfunFrom{createIrreduciblePoly}{FiniteFieldPolynomialPackage} from \\spadtype{FiniteFieldPolynomialPackage}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-118)))) 
(-309 R |ls|) 
((|constructor| (NIL "This is just an interface between several packages and domains. The goal is to compute lexicographical Groebner bases of sets of polynomial with type \\spadtype{Polynomial R} by the {\\em FGLM} algorithm if this is possible (\\spadignore{i.e.} if the input system generates a zero-dimensional ideal).")) (|groebner| (((|List| (|Polynomial| |#1|)) (|List| (|Polynomial| |#1|))) "\\axiom{groebner(\\spad{lq1})} returns the lexicographical Groebner basis of \\axiom{\\spad{lq1}}. If \\axiom{\\spad{lq1}} generates a zero-dimensional ideal then the {\\em FGLM} strategy is used,{} otherwise the {\\em Sugar} strategy is used.")) (|fglmIfCan| (((|Union| (|List| (|Polynomial| |#1|)) "failed") (|List| (|Polynomial| |#1|))) "\\axiom{fglmIfCan(\\spad{lq1})} returns the lexicographical Groebner basis of \\axiom{\\spad{lq1}} by using the {\\em FGLM} strategy,{} if \\axiom{zeroDimensional?(\\spad{lq1})} holds.")) (|zeroDimensional?| (((|Boolean|) (|List| (|Polynomial| |#1|))) "\\axiom{zeroDimensional?(\\spad{lq1})} returns \\spad{true} iff \\axiom{\\spad{lq1}} generates a zero-dimensional ideal \\spad{w}.\\spad{r}.\\spad{t}. the variables of \\axiom{ls}."))) 
NIL 
NIL 
(-310 S) 
((|constructor| (NIL "The free group on a set \\spad{S} is the group of finite products of the form \\spad{reduce(*,[si ** ni])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are integers. The multiplication is not commutative.")) (|factors| (((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| (|Integer|)))) $) "\\spad{factors(a1\\^e1,...,an\\^en)} returns \\spad{[[a1, e1],...,[an, en]]}.")) (|mapGen| (($ (|Mapping| |#1| |#1|) $) "\\spad{mapGen(f, a1\\^e1 ... an\\^en)} returns \\spad{f(a1)\\^e1 ... f(an)\\^en}.")) (|mapExpon| (($ (|Mapping| (|Integer|) (|Integer|)) $) "\\spad{mapExpon(f, a1\\^e1 ... an\\^en)} returns \\spad{a1\\^f(e1) ... an\\^f(en)}.")) (|nthFactor| ((|#1| $ (|Integer|)) "\\spad{nthFactor(x, n)} returns the factor of the n^th monomial of \\spad{x}.")) (|nthExpon| (((|Integer|) $ (|Integer|)) "\\spad{nthExpon(x, n)} returns the exponent of the n^th monomial of \\spad{x}.")) (|size| (((|NonNegativeInteger|) $) "\\spad{size(x)} returns the number of monomials in \\spad{x}.")) (** (($ |#1| (|Integer|)) "\\spad{s ** n} returns the product of \\spad{s} by itself \\spad{n} times.")) (* (($ $ |#1|) "\\spad{x * s} returns the product of \\spad{x} by \\spad{s} on the right.") (($ |#1| $) "\\spad{s * x} returns the product of \\spad{x} by \\spad{s} on the left."))) 
((-3991 . T)) 
NIL 
(-311 S) 
((|constructor| (NIL "The category of commutative fields,{} \\spadignore{i.e.} commutative rings where all non-zero elements have multiplicative inverses. The \\spadfun{factor} operation while trivial is useful to have defined. \\blankline")) (|canonicalsClosed| ((|attribute|) "since \\spad{0*0=0},{} \\spad{1*1=1}")) (|canonicalUnitNormal| ((|attribute|) "either 0 or 1.")) (/ (($ $ $) "\\spad{x/y} divides the element \\spad{x} by the element \\spad{y}. Error: if \\spad{y} is 0."))) 
NIL 
NIL 
(-312) 
((|constructor| (NIL "The category of commutative fields,{} \\spadignore{i.e.} commutative rings where all non-zero elements have multiplicative inverses. The \\spadfun{factor} operation while trivial is useful to have defined. \\blankline")) (|canonicalsClosed| ((|attribute|) "since \\spad{0*0=0},{} \\spad{1*1=1}")) (|canonicalUnitNormal| ((|attribute|) "either 0 or 1.")) (/ (($ $ $) "\\spad{x/y} divides the element \\spad{x} by the element \\spad{y}. Error: if \\spad{y} is 0."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-313 S) 
((|constructor| (NIL "This domain provides a basic model of files to save arbitrary values. The operations provide sequential access to the contents.")) (|readIfCan!| (((|Union| |#1| "failed") $) "\\spad{readIfCan!(f)} returns a value from the file \\spad{f},{} if possible. If \\spad{f} is not open for reading,{} or if \\spad{f} is at the end of file then \\spad{\"failed\"} is the result."))) 
NIL 
NIL 
(-314 |Name| S) 
((|constructor| (NIL "This category provides an interface to operate on files in the computer's file system. The precise method of naming files is determined by the Name parameter. The type of the contents of the file is determined by \\spad{S}.")) (|write!| ((|#2| $ |#2|) "\\spad{write!(f,s)} puts the value \\spad{s} into the file \\spad{f}. The state of \\spad{f} is modified so subsequents call to \\spad{write!} will append one after another.")) (|read!| ((|#2| $) "\\spad{read!(f)} extracts a value from file \\spad{f}. The state of \\spad{f} is modified so a subsequent call to \\spadfun{read!} will return the next element.")) (|iomode| (((|String|) $) "\\spad{iomode(f)} returns the status of the file \\spad{f}. The input/output status of \\spad{f} may be \"input\",{} \"output\" or \"closed\" mode.")) (|name| ((|#1| $) "\\spad{name(f)} returns the external name of the file \\spad{f}.")) (|close!| (($ $) "\\spad{close!(f)} returns the file \\spad{f} closed to input and output.")) (|reopen!| (($ $ (|String|)) "\\spad{reopen!(f,mode)} returns a file \\spad{f} reopened for operation in the indicated mode: \"input\" or \"output\". \\spad{reopen!(f,\"input\")} will reopen the file \\spad{f} for input.")) (|open| (($ |#1| (|String|)) "\\spad{open(s,mode)} returns a file \\spad{s} open for operation in the indicated mode: \"input\" or \"output\".") (($ |#1|) "\\spad{open(s)} returns the file \\spad{s} open for input."))) 
NIL 
NIL 
(-315 S R) 
((|constructor| (NIL "A FiniteRankNonAssociativeAlgebra is a non associative algebra over a commutative ring \\spad{R} which is a free \\spad{R}-module of finite rank.")) (|unitsKnown| ((|attribute|) "unitsKnown means that \\spadfun{recip} truly yields reciprocal or \\spad{\"failed\"} if not a unit,{} similarly for \\spadfun{leftRecip} and \\spadfun{rightRecip}. The reason is that we use left,{} respectively right,{} minimal polynomials to decide this question.")) (|unit| (((|Union| $ "failed")) "\\spad{unit()} returns a unit of the algebra (necessarily unique),{} or \\spad{\"failed\"} if there is none.")) (|rightUnit| (((|Union| $ "failed")) "\\spad{rightUnit()} returns a right unit of the algebra (not necessarily unique),{} or \\spad{\"failed\"} if there is none.")) (|leftUnit| (((|Union| $ "failed")) "\\spad{leftUnit()} returns a left unit of the algebra (not necessarily unique),{} or \\spad{\"failed\"} if there is none.")) (|rightUnits| (((|Union| (|Record| (|:| |particular| $) (|:| |basis| (|List| $))) "failed")) "\\spad{rightUnits()} returns the affine space of all right units of the algebra,{} or \\spad{\"failed\"} if there is none.")) (|leftUnits| (((|Union| (|Record| (|:| |particular| $) (|:| |basis| (|List| $))) "failed")) "\\spad{leftUnits()} returns the affine space of all left units of the algebra,{} or \\spad{\"failed\"} if there is none.")) (|rightMinimalPolynomial| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{rightMinimalPolynomial(a)} returns the polynomial determined by the smallest non-trivial linear combination of right powers of \\spad{a}. Note: the polynomial never has a constant term as in general the algebra has no unit.")) (|leftMinimalPolynomial| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{leftMinimalPolynomial(a)} returns the polynomial determined by the smallest non-trivial linear combination of left powers of \\spad{a}. Note: the polynomial never has a constant term as in general the algebra has no unit.")) (|associatorDependence| (((|List| (|Vector| |#2|))) "\\spad{associatorDependence()} looks for the associator identities,{} \\spadignore{i.e.} finds a basis of the solutions of the linear combinations of the six permutations of \\spad{associator(a,b,c)} which yield 0,{} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra. The order of the permutations is \\spad{123 231 312 132 321 213}.")) (|rightRecip| (((|Union| $ "failed") $) "\\spad{rightRecip(a)} returns an element,{} which is a right inverse of \\spad{a},{} or \\spad{\"failed\"} if there is no unit element,{} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|leftRecip| (((|Union| $ "failed") $) "\\spad{leftRecip(a)} returns an element,{} which is a left inverse of \\spad{a},{} or \\spad{\"failed\"} if there is no unit element,{} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \\spad{a},{} or \\spad{\"failed\"} if there is no unit element,{} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|lieAlgebra?| (((|Boolean|)) "\\spad{lieAlgebra?()} tests if the algebra is anticommutative and \\spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra (Jacobi identity). Example: for every associative algebra \\spad{(A,+,@)} we can construct a Lie algebra \\spad{(A,+,*)},{} where \\spad{a*b := a@b-b@a}.")) (|jordanAlgebra?| (((|Boolean|)) "\\spad{jordanAlgebra?()} tests if the algebra is commutative,{} characteristic is not 2,{} and \\spad{(a*b)*a**2 - a*(b*a**2) = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra (Jordan identity). Example: for every associative algebra \\spad{(A,+,@)} we can construct a Jordan algebra \\spad{(A,+,*)},{} where \\spad{a*b := (a@b+b@a)/2}.")) (|noncommutativeJordanAlgebra?| (((|Boolean|)) "\\spad{noncommutativeJordanAlgebra?()} tests if the algebra is flexible and Jordan admissible.")) (|jordanAdmissible?| (((|Boolean|)) "\\spad{jordanAdmissible?()} tests if 2 is invertible in the coefficient domain and the multiplication defined by \\spad{(1/2)(a*b+b*a)} determines a Jordan algebra,{} \\spadignore{i.e.} satisfies the Jordan identity. The property of \\spadatt{commutative(\"*\")} follows from by definition.")) (|lieAdmissible?| (((|Boolean|)) "\\spad{lieAdmissible?()} tests if the algebra defined by the commutators is a Lie algebra,{} \\spadignore{i.e.} satisfies the Jacobi identity. The property of anticommutativity follows from definition.")) (|jacobiIdentity?| (((|Boolean|)) "\\spad{jacobiIdentity?()} tests if \\spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra. For example,{} this holds for crossed products of 3-dimensional vectors.")) (|powerAssociative?| (((|Boolean|)) "\\spad{powerAssociative?()} tests if all subalgebras generated by a single element are associative.")) (|alternative?| (((|Boolean|)) "\\spad{alternative?()} tests if \\spad{2*associator(a,a,b) = 0 = 2*associator(a,b,b)} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|flexible?| (((|Boolean|)) "\\spad{flexible?()} tests if \\spad{2*associator(a,b,a) = 0} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|rightAlternative?| (((|Boolean|)) "\\spad{rightAlternative?()} tests if \\spad{2*associator(a,b,b) = 0} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|leftAlternative?| (((|Boolean|)) "\\spad{leftAlternative?()} tests if \\spad{2*associator(a,a,b) = 0} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|antiAssociative?| (((|Boolean|)) "\\spad{antiAssociative?()} tests if multiplication in algebra is anti-associative,{} \\spadignore{i.e.} \\spad{(a*b)*c + a*(b*c) = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra.")) (|associative?| (((|Boolean|)) "\\spad{associative?()} tests if multiplication in algebra is associative.")) (|antiCommutative?| (((|Boolean|)) "\\spad{antiCommutative?()} tests if \\spad{a*a = 0} for all \\spad{a} in the algebra. Note: this implies \\spad{a*b + b*a = 0} for all \\spad{a} and \\spad{b}.")) (|commutative?| (((|Boolean|)) "\\spad{commutative?()} tests if multiplication in the algebra is commutative.")) (|rightCharacteristicPolynomial| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{rightCharacteristicPolynomial(a)} returns the characteristic polynomial of the right regular representation of \\spad{a} with respect to any basis.")) (|leftCharacteristicPolynomial| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{leftCharacteristicPolynomial(a)} returns the characteristic polynomial of the left regular representation of \\spad{a} with respect to any basis.")) (|rightTraceMatrix| (((|Matrix| |#2|) (|Vector| $)) "\\spad{rightTraceMatrix([v1,...,vn])} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj}.")) (|leftTraceMatrix| (((|Matrix| |#2|) (|Vector| $)) "\\spad{leftTraceMatrix([v1,...,vn])} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the left trace of the product \\spad{vi*vj}.")) (|rightDiscriminant| ((|#2| (|Vector| $)) "\\spad{rightDiscriminant([v1,...,vn])} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj}. Note: the same as \\spad{determinant(rightTraceMatrix([v1,...,vn]))}.")) (|leftDiscriminant| ((|#2| (|Vector| $)) "\\spad{leftDiscriminant([v1,...,vn])} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the left trace of the product \\spad{vi*vj}. Note: the same as \\spad{determinant(leftTraceMatrix([v1,...,vn]))}.")) (|represents| (($ (|Vector| |#2|) (|Vector| $)) "\\spad{represents([a1,...,am],[v1,...,vm])} returns the linear combination \\spad{a1*vm + ... + an*vm}.")) (|coordinates| (((|Matrix| |#2|) (|Vector| $) (|Vector| $)) "\\spad{coordinates([a1,...,am],[v1,...,vn])} returns a matrix whose \\spad{i}-th row is formed by the coordinates of \\spad{ai} with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.") (((|Vector| |#2|) $ (|Vector| $)) "\\spad{coordinates(a,[v1,...,vn])} returns the coordinates of \\spad{a} with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.")) (|rightNorm| ((|#2| $) "\\spad{rightNorm(a)} returns the determinant of the right regular representation of \\spad{a}.")) (|leftNorm| ((|#2| $) "\\spad{leftNorm(a)} returns the determinant of the left regular representation of \\spad{a}.")) (|rightTrace| ((|#2| $) "\\spad{rightTrace(a)} returns the trace of the right regular representation of \\spad{a}.")) (|leftTrace| ((|#2| $) "\\spad{leftTrace(a)} returns the trace of the left regular representation of \\spad{a}.")) (|rightRegularRepresentation| (((|Matrix| |#2|) $ (|Vector| $)) "\\spad{rightRegularRepresentation(a,[v1,...,vn])} returns the matrix of the linear map defined by right multiplication by \\spad{a} with respect to the \\spad{R}-module basis \\spad{[v1,...,vn]}.")) (|leftRegularRepresentation| (((|Matrix| |#2|) $ (|Vector| $)) "\\spad{leftRegularRepresentation(a,[v1,...,vn])} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the \\spad{R}-module basis \\spad{[v1,...,vn]}.")) (|structuralConstants| (((|Vector| (|Matrix| |#2|)) (|Vector| $)) "\\spad{structuralConstants([v1,v2,...,vm])} calculates the structural constants \\spad{[(gammaijk) for k in 1..m]} defined by \\spad{vi * vj = gammaij1 * v1 + ... + gammaijm * vm},{} where \\spad{[v1,...,vm]} is an \\spad{R}-module basis of a subalgebra.")) (|conditionsForIdempotents| (((|List| (|Polynomial| |#2|)) (|Vector| $)) "\\spad{conditionsForIdempotents([v1,...,vn])} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.")) (|rank| (((|PositiveInteger|)) "\\spad{rank()} returns the rank of the algebra as \\spad{R}-module.")) (|someBasis| (((|Vector| $)) "\\spad{someBasis()} returns some \\spad{R}-module basis."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-495)))) 
(-316 R) 
((|constructor| (NIL "A FiniteRankNonAssociativeAlgebra is a non associative algebra over a commutative ring \\spad{R} which is a free \\spad{R}-module of finite rank.")) (|unitsKnown| ((|attribute|) "unitsKnown means that \\spadfun{recip} truly yields reciprocal or \\spad{\"failed\"} if not a unit,{} similarly for \\spadfun{leftRecip} and \\spadfun{rightRecip}. The reason is that we use left,{} respectively right,{} minimal polynomials to decide this question.")) (|unit| (((|Union| $ "failed")) "\\spad{unit()} returns a unit of the algebra (necessarily unique),{} or \\spad{\"failed\"} if there is none.")) (|rightUnit| (((|Union| $ "failed")) "\\spad{rightUnit()} returns a right unit of the algebra (not necessarily unique),{} or \\spad{\"failed\"} if there is none.")) (|leftUnit| (((|Union| $ "failed")) "\\spad{leftUnit()} returns a left unit of the algebra (not necessarily unique),{} or \\spad{\"failed\"} if there is none.")) (|rightUnits| (((|Union| (|Record| (|:| |particular| $) (|:| |basis| (|List| $))) "failed")) "\\spad{rightUnits()} returns the affine space of all right units of the algebra,{} or \\spad{\"failed\"} if there is none.")) (|leftUnits| (((|Union| (|Record| (|:| |particular| $) (|:| |basis| (|List| $))) "failed")) "\\spad{leftUnits()} returns the affine space of all left units of the algebra,{} or \\spad{\"failed\"} if there is none.")) (|rightMinimalPolynomial| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{rightMinimalPolynomial(a)} returns the polynomial determined by the smallest non-trivial linear combination of right powers of \\spad{a}. Note: the polynomial never has a constant term as in general the algebra has no unit.")) (|leftMinimalPolynomial| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{leftMinimalPolynomial(a)} returns the polynomial determined by the smallest non-trivial linear combination of left powers of \\spad{a}. Note: the polynomial never has a constant term as in general the algebra has no unit.")) (|associatorDependence| (((|List| (|Vector| |#1|))) "\\spad{associatorDependence()} looks for the associator identities,{} \\spadignore{i.e.} finds a basis of the solutions of the linear combinations of the six permutations of \\spad{associator(a,b,c)} which yield 0,{} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra. The order of the permutations is \\spad{123 231 312 132 321 213}.")) (|rightRecip| (((|Union| $ "failed") $) "\\spad{rightRecip(a)} returns an element,{} which is a right inverse of \\spad{a},{} or \\spad{\"failed\"} if there is no unit element,{} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|leftRecip| (((|Union| $ "failed") $) "\\spad{leftRecip(a)} returns an element,{} which is a left inverse of \\spad{a},{} or \\spad{\"failed\"} if there is no unit element,{} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \\spad{a},{} or \\spad{\"failed\"} if there is no unit element,{} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|lieAlgebra?| (((|Boolean|)) "\\spad{lieAlgebra?()} tests if the algebra is anticommutative and \\spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra (Jacobi identity). Example: for every associative algebra \\spad{(A,+,@)} we can construct a Lie algebra \\spad{(A,+,*)},{} where \\spad{a*b := a@b-b@a}.")) (|jordanAlgebra?| (((|Boolean|)) "\\spad{jordanAlgebra?()} tests if the algebra is commutative,{} characteristic is not 2,{} and \\spad{(a*b)*a**2 - a*(b*a**2) = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra (Jordan identity). Example: for every associative algebra \\spad{(A,+,@)} we can construct a Jordan algebra \\spad{(A,+,*)},{} where \\spad{a*b := (a@b+b@a)/2}.")) (|noncommutativeJordanAlgebra?| (((|Boolean|)) "\\spad{noncommutativeJordanAlgebra?()} tests if the algebra is flexible and Jordan admissible.")) (|jordanAdmissible?| (((|Boolean|)) "\\spad{jordanAdmissible?()} tests if 2 is invertible in the coefficient domain and the multiplication defined by \\spad{(1/2)(a*b+b*a)} determines a Jordan algebra,{} \\spadignore{i.e.} satisfies the Jordan identity. The property of \\spadatt{commutative(\"*\")} follows from by definition.")) (|lieAdmissible?| (((|Boolean|)) "\\spad{lieAdmissible?()} tests if the algebra defined by the commutators is a Lie algebra,{} \\spadignore{i.e.} satisfies the Jacobi identity. The property of anticommutativity follows from definition.")) (|jacobiIdentity?| (((|Boolean|)) "\\spad{jacobiIdentity?()} tests if \\spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra. For example,{} this holds for crossed products of 3-dimensional vectors.")) (|powerAssociative?| (((|Boolean|)) "\\spad{powerAssociative?()} tests if all subalgebras generated by a single element are associative.")) (|alternative?| (((|Boolean|)) "\\spad{alternative?()} tests if \\spad{2*associator(a,a,b) = 0 = 2*associator(a,b,b)} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|flexible?| (((|Boolean|)) "\\spad{flexible?()} tests if \\spad{2*associator(a,b,a) = 0} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|rightAlternative?| (((|Boolean|)) "\\spad{rightAlternative?()} tests if \\spad{2*associator(a,b,b) = 0} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|leftAlternative?| (((|Boolean|)) "\\spad{leftAlternative?()} tests if \\spad{2*associator(a,a,b) = 0} for all \\spad{a},{} \\spad{b} in the algebra. Note: we only can test this; in general we don't know whether \\spad{2*a=0} implies \\spad{a=0}.")) (|antiAssociative?| (((|Boolean|)) "\\spad{antiAssociative?()} tests if multiplication in algebra is anti-associative,{} \\spadignore{i.e.} \\spad{(a*b)*c + a*(b*c) = 0} for all \\spad{a},{}\\spad{b},{}\\spad{c} in the algebra.")) (|associative?| (((|Boolean|)) "\\spad{associative?()} tests if multiplication in algebra is associative.")) (|antiCommutative?| (((|Boolean|)) "\\spad{antiCommutative?()} tests if \\spad{a*a = 0} for all \\spad{a} in the algebra. Note: this implies \\spad{a*b + b*a = 0} for all \\spad{a} and \\spad{b}.")) (|commutative?| (((|Boolean|)) "\\spad{commutative?()} tests if multiplication in the algebra is commutative.")) (|rightCharacteristicPolynomial| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{rightCharacteristicPolynomial(a)} returns the characteristic polynomial of the right regular representation of \\spad{a} with respect to any basis.")) (|leftCharacteristicPolynomial| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{leftCharacteristicPolynomial(a)} returns the characteristic polynomial of the left regular representation of \\spad{a} with respect to any basis.")) (|rightTraceMatrix| (((|Matrix| |#1|) (|Vector| $)) "\\spad{rightTraceMatrix([v1,...,vn])} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj}.")) (|leftTraceMatrix| (((|Matrix| |#1|) (|Vector| $)) "\\spad{leftTraceMatrix([v1,...,vn])} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the left trace of the product \\spad{vi*vj}.")) (|rightDiscriminant| ((|#1| (|Vector| $)) "\\spad{rightDiscriminant([v1,...,vn])} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj}. Note: the same as \\spad{determinant(rightTraceMatrix([v1,...,vn]))}.")) (|leftDiscriminant| ((|#1| (|Vector| $)) "\\spad{leftDiscriminant([v1,...,vn])} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the left trace of the product \\spad{vi*vj}. Note: the same as \\spad{determinant(leftTraceMatrix([v1,...,vn]))}.")) (|represents| (($ (|Vector| |#1|) (|Vector| $)) "\\spad{represents([a1,...,am],[v1,...,vm])} returns the linear combination \\spad{a1*vm + ... + an*vm}.")) (|coordinates| (((|Matrix| |#1|) (|Vector| $) (|Vector| $)) "\\spad{coordinates([a1,...,am],[v1,...,vn])} returns a matrix whose \\spad{i}-th row is formed by the coordinates of \\spad{ai} with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.") (((|Vector| |#1|) $ (|Vector| $)) "\\spad{coordinates(a,[v1,...,vn])} returns the coordinates of \\spad{a} with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.")) (|rightNorm| ((|#1| $) "\\spad{rightNorm(a)} returns the determinant of the right regular representation of \\spad{a}.")) (|leftNorm| ((|#1| $) "\\spad{leftNorm(a)} returns the determinant of the left regular representation of \\spad{a}.")) (|rightTrace| ((|#1| $) "\\spad{rightTrace(a)} returns the trace of the right regular representation of \\spad{a}.")) (|leftTrace| ((|#1| $) "\\spad{leftTrace(a)} returns the trace of the left regular representation of \\spad{a}.")) (|rightRegularRepresentation| (((|Matrix| |#1|) $ (|Vector| $)) "\\spad{rightRegularRepresentation(a,[v1,...,vn])} returns the matrix of the linear map defined by right multiplication by \\spad{a} with respect to the \\spad{R}-module basis \\spad{[v1,...,vn]}.")) (|leftRegularRepresentation| (((|Matrix| |#1|) $ (|Vector| $)) "\\spad{leftRegularRepresentation(a,[v1,...,vn])} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the \\spad{R}-module basis \\spad{[v1,...,vn]}.")) (|structuralConstants| (((|Vector| (|Matrix| |#1|)) (|Vector| $)) "\\spad{structuralConstants([v1,v2,...,vm])} calculates the structural constants \\spad{[(gammaijk) for k in 1..m]} defined by \\spad{vi * vj = gammaij1 * v1 + ... + gammaijm * vm},{} where \\spad{[v1,...,vm]} is an \\spad{R}-module basis of a subalgebra.")) (|conditionsForIdempotents| (((|List| (|Polynomial| |#1|)) (|Vector| $)) "\\spad{conditionsForIdempotents([v1,...,vn])} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.")) (|rank| (((|PositiveInteger|)) "\\spad{rank()} returns the rank of the algebra as \\spad{R}-module.")) (|someBasis| (((|Vector| $)) "\\spad{someBasis()} returns some \\spad{R}-module basis."))) 
((-3991 |has| |#1| (-495)) (-3989 . T) (-3988 . T)) 
NIL 
(-317 S) 
((|constructor| (NIL "A finite aggregate is a homogeneous aggregate with a finite number of elements.")) (|member?| (((|Boolean|) |#1| $) "\\spad{member?(x,u)} tests if \\spad{x} is a member of \\spad{u}. For collections,{} \\axiom{member?(\\spad{x},{}\\spad{u}) = reduce(or,{}[x=y for \\spad{y} in \\spad{u}],{}\\spad{false})}.")) (|members| (((|List| |#1|) $) "\\spad{members(u)} returns a list of the consecutive elements of \\spad{u}. For collections,{} \\axiom{parts([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = (\\spad{x},{}\\spad{y},{}...,{}\\spad{z})}.")) (|count| (((|NonNegativeInteger|) |#1| $) "\\spad{count(x,u)} returns the number of occurrences of \\spad{x} in \\spad{u}. For collections,{} \\axiom{count(\\spad{x},{}\\spad{u}) = reduce(+,{}[x=y for \\spad{y} in \\spad{u}],{}0)}.") (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{count(p,u)} returns the number of elements \\spad{x} \\indented{1}{in \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} holds. For collections,{}} \\axiom{count(\\spad{p},{}\\spad{u}) = reduce(+,{}[1 for \\spad{x} in \\spad{u} | \\spad{p}(\\spad{x})],{}0)}.")) (|every?| (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{every?(f,u)} tests if \\spad{p}(\\spad{x}) holds for all elements \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{every?(\\spad{p},{}\\spad{u}) = reduce(and,{}map(\\spad{f},{}\\spad{u}),{}\\spad{true},{}\\spad{false})}.")) (|any?| (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{any?(p,u)} tests if \\spad{p(x)} is \\spad{true} for any element \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{any?(\\spad{p},{}\\spad{u}) = reduce(or,{}map(\\spad{f},{}\\spad{u}),{}\\spad{false},{}\\spad{true})}.")) (|#| (((|NonNegativeInteger|) $) "\\spad{\\#u} returns the number of items in \\spad{u}."))) 
NIL 
NIL 
(-318 S) 
((|constructor| (NIL "The category of domains composed of a finite set of elements. We include the functions \\spadfun{lookup} and \\spadfun{index} to give a bijection between the finite set and an initial segment of positive integers. \\blankline")) (|random| (($) "\\spad{random()} returns a random element from the set.")) (|lookup| (((|PositiveInteger|) $) "\\spad{lookup(x)} returns a positive integer such that \\spad{x = index lookup x}.")) (|index| (($ (|PositiveInteger|)) "\\spad{index(i)} takes a positive integer \\spad{i} less than or equal to \\spad{size()} and returns the \\spad{i}\\spad{-}th element of the set. This operation establishs a bijection between the elements of the finite set and \\spad{1..size()}.")) (|size| (((|NonNegativeInteger|)) "\\spad{size()} returns the number of elements in the set."))) 
NIL 
NIL 
(-319) 
((|constructor| (NIL "The category of domains composed of a finite set of elements. We include the functions \\spadfun{lookup} and \\spadfun{index} to give a bijection between the finite set and an initial segment of positive integers. \\blankline")) (|random| (($) "\\spad{random()} returns a random element from the set.")) (|lookup| (((|PositiveInteger|) $) "\\spad{lookup(x)} returns a positive integer such that \\spad{x = index lookup x}.")) (|index| (($ (|PositiveInteger|)) "\\spad{index(i)} takes a positive integer \\spad{i} less than or equal to \\spad{size()} and returns the \\spad{i}\\spad{-}th element of the set. This operation establishs a bijection between the elements of the finite set and \\spad{1..size()}.")) (|size| (((|NonNegativeInteger|)) "\\spad{size()} returns the number of elements in the set."))) 
NIL 
NIL 
(-320 S R UP) 
((|constructor| (NIL "A FiniteRankAlgebra is an algebra over a commutative ring \\spad{R} which is a free \\spad{R}-module of finite rank.")) (|minimalPolynomial| ((|#3| $) "\\spad{minimalPolynomial(a)} returns the minimal polynomial of \\spad{a}.")) (|characteristicPolynomial| ((|#3| $) "\\spad{characteristicPolynomial(a)} returns the characteristic polynomial of the regular representation of \\spad{a} with respect to any basis.")) (|traceMatrix| (((|Matrix| |#2|) (|Vector| $)) "\\spad{traceMatrix([v1,..,vn])} is the \\spad{n}-by-\\spad{n} matrix ( Tr(\\spad{vi} * vj) )")) (|discriminant| ((|#2| (|Vector| $)) "\\spad{discriminant([v1,..,vn])} returns \\spad{determinant(traceMatrix([v1,..,vn]))}.")) (|represents| (($ (|Vector| |#2|) (|Vector| $)) "\\spad{represents([a1,..,an],[v1,..,vn])} returns \\spad{a1*v1 + ... + an*vn}.")) (|coordinates| (((|Matrix| |#2|) (|Vector| $) (|Vector| $)) "\\spad{coordinates([v1,...,vm], basis)} returns the coordinates of the \\spad{vi}'s with to the basis \\spad{basis}. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.") (((|Vector| |#2|) $ (|Vector| $)) "\\spad{coordinates(a,basis)} returns the coordinates of \\spad{a} with respect to the \\spad{basis} \\spad{basis}.")) (|norm| ((|#2| $) "\\spad{norm(a)} returns the determinant of the regular representation of \\spad{a} with respect to any basis.")) (|trace| ((|#2| $) "\\spad{trace(a)} returns the trace of the regular representation of \\spad{a} with respect to any basis.")) (|regularRepresentation| (((|Matrix| |#2|) $ (|Vector| $)) "\\spad{regularRepresentation(a,basis)} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the \\spad{basis} \\spad{basis}.")) (|rank| (((|PositiveInteger|)) "\\spad{rank()} returns the rank of the algebra."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-312)))) 
(-321 R UP) 
((|constructor| (NIL "A FiniteRankAlgebra is an algebra over a commutative ring \\spad{R} which is a free \\spad{R}-module of finite rank.")) (|minimalPolynomial| ((|#2| $) "\\spad{minimalPolynomial(a)} returns the minimal polynomial of \\spad{a}.")) (|characteristicPolynomial| ((|#2| $) "\\spad{characteristicPolynomial(a)} returns the characteristic polynomial of the regular representation of \\spad{a} with respect to any basis.")) (|traceMatrix| (((|Matrix| |#1|) (|Vector| $)) "\\spad{traceMatrix([v1,..,vn])} is the \\spad{n}-by-\\spad{n} matrix ( Tr(\\spad{vi} * vj) )")) (|discriminant| ((|#1| (|Vector| $)) "\\spad{discriminant([v1,..,vn])} returns \\spad{determinant(traceMatrix([v1,..,vn]))}.")) (|represents| (($ (|Vector| |#1|) (|Vector| $)) "\\spad{represents([a1,..,an],[v1,..,vn])} returns \\spad{a1*v1 + ... + an*vn}.")) (|coordinates| (((|Matrix| |#1|) (|Vector| $) (|Vector| $)) "\\spad{coordinates([v1,...,vm], basis)} returns the coordinates of the \\spad{vi}'s with to the basis \\spad{basis}. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.") (((|Vector| |#1|) $ (|Vector| $)) "\\spad{coordinates(a,basis)} returns the coordinates of \\spad{a} with respect to the \\spad{basis} \\spad{basis}.")) (|norm| ((|#1| $) "\\spad{norm(a)} returns the determinant of the regular representation of \\spad{a} with respect to any basis.")) (|trace| ((|#1| $) "\\spad{trace(a)} returns the trace of the regular representation of \\spad{a} with respect to any basis.")) (|regularRepresentation| (((|Matrix| |#1|) $ (|Vector| $)) "\\spad{regularRepresentation(a,basis)} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the \\spad{basis} \\spad{basis}.")) (|rank| (((|PositiveInteger|)) "\\spad{rank()} returns the rank of the algebra."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-322 A S) 
((|constructor| (NIL "A finite linear aggregate is a linear aggregate of finite length. The finite property of the aggregate adds several exports to the list of exports from \\spadtype{LinearAggregate} such as \\spadfun{reverse},{} \\spadfun{sort},{} and so on.")) (|sort!| (($ $) "\\spad{sort!(u)} returns \\spad{u} with its elements in ascending order.") (($ (|Mapping| (|Boolean|) |#2| |#2|) $) "\\spad{sort!(p,u)} returns \\spad{u} with its elements ordered by \\spad{p}.")) (|reverse!| (($ $) "\\spad{reverse!(u)} returns \\spad{u} with its elements in reverse order.")) (|copyInto!| (($ $ $ (|Integer|)) "\\spad{copyInto!(u,v,i)} returns aggregate \\spad{u} containing a copy of \\spad{v} inserted at element \\spad{i}.")) (|position| (((|Integer|) |#2| $ (|Integer|)) "\\spad{position(x,a,n)} returns the index \\spad{i} of the first occurrence of \\spad{x} in \\axiom{a} where \\axiom{\\spad{i} >= \\spad{n}},{} and \\axiom{minIndex(a) - 1} if no such \\spad{x} is found.") (((|Integer|) |#2| $) "\\spad{position(x,a)} returns the index \\spad{i} of the first occurrence of \\spad{x} in a,{} and \\axiom{minIndex(a) - 1} if there is no such \\spad{x}.") (((|Integer|) (|Mapping| (|Boolean|) |#2|) $) "\\spad{position(p,a)} returns the index \\spad{i} of the first \\spad{x} in \\axiom{a} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true},{} and \\axiom{minIndex(a) - 1} if there is no such \\spad{x}.")) (|sorted?| (((|Boolean|) $) "\\spad{sorted?(u)} tests if the elements of \\spad{u} are in ascending order.") (((|Boolean|) (|Mapping| (|Boolean|) |#2| |#2|) $) "\\spad{sorted?(p,a)} tests if \\axiom{a} is sorted according to predicate \\spad{p}.")) (|sort| (($ $) "\\spad{sort(u)} returns an \\spad{u} with elements in ascending order. Note: \\axiom{sort(\\spad{u}) = sort(<=,{}\\spad{u})}.") (($ (|Mapping| (|Boolean|) |#2| |#2|) $) "\\spad{sort(p,a)} returns a copy of \\axiom{a} sorted using total ordering predicate \\spad{p}.")) (|reverse| (($ $) "\\spad{reverse(a)} returns a copy of \\axiom{a} with elements in reverse order.")) (|merge| (($ $ $) "\\spad{merge(u,v)} merges \\spad{u} and \\spad{v} in ascending order. Note: \\axiom{merge(\\spad{u},{}\\spad{v}) = merge(<=,{}\\spad{u},{}\\spad{v})}.") (($ (|Mapping| (|Boolean|) |#2| |#2|) $ $) "\\spad{merge(p,a,b)} returns an aggregate \\spad{c} which merges \\axiom{a} and \\spad{b}. The result is produced by examining each element \\spad{x} of \\axiom{a} and \\spad{y} of \\spad{b} successively. If \\axiom{\\spad{p}(\\spad{x},{}\\spad{y})} is \\spad{true},{} then \\spad{x} is inserted into the result; otherwise \\spad{y} is inserted. If \\spad{x} is chosen,{} the next element of \\axiom{a} is examined,{} and so on. When all the elements of one aggregate are examined,{} the remaining elements of the other are appended. For example,{} \\axiom{merge(<,{}[1,{}3],{}[2,{}7,{}5])} returns \\axiom{[1,{}2,{}3,{}7,{}5]}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995)) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013)))) 
(-323 S) 
((|constructor| (NIL "A finite linear aggregate is a linear aggregate of finite length. The finite property of the aggregate adds several exports to the list of exports from \\spadtype{LinearAggregate} such as \\spadfun{reverse},{} \\spadfun{sort},{} and so on.")) (|sort!| (($ $) "\\spad{sort!(u)} returns \\spad{u} with its elements in ascending order.") (($ (|Mapping| (|Boolean|) |#1| |#1|) $) "\\spad{sort!(p,u)} returns \\spad{u} with its elements ordered by \\spad{p}.")) (|reverse!| (($ $) "\\spad{reverse!(u)} returns \\spad{u} with its elements in reverse order.")) (|copyInto!| (($ $ $ (|Integer|)) "\\spad{copyInto!(u,v,i)} returns aggregate \\spad{u} containing a copy of \\spad{v} inserted at element \\spad{i}.")) (|position| (((|Integer|) |#1| $ (|Integer|)) "\\spad{position(x,a,n)} returns the index \\spad{i} of the first occurrence of \\spad{x} in \\axiom{a} where \\axiom{\\spad{i} >= \\spad{n}},{} and \\axiom{minIndex(a) - 1} if no such \\spad{x} is found.") (((|Integer|) |#1| $) "\\spad{position(x,a)} returns the index \\spad{i} of the first occurrence of \\spad{x} in a,{} and \\axiom{minIndex(a) - 1} if there is no such \\spad{x}.") (((|Integer|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{position(p,a)} returns the index \\spad{i} of the first \\spad{x} in \\axiom{a} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true},{} and \\axiom{minIndex(a) - 1} if there is no such \\spad{x}.")) (|sorted?| (((|Boolean|) $) "\\spad{sorted?(u)} tests if the elements of \\spad{u} are in ascending order.") (((|Boolean|) (|Mapping| (|Boolean|) |#1| |#1|) $) "\\spad{sorted?(p,a)} tests if \\axiom{a} is sorted according to predicate \\spad{p}.")) (|sort| (($ $) "\\spad{sort(u)} returns an \\spad{u} with elements in ascending order. Note: \\axiom{sort(\\spad{u}) = sort(<=,{}\\spad{u})}.") (($ (|Mapping| (|Boolean|) |#1| |#1|) $) "\\spad{sort(p,a)} returns a copy of \\axiom{a} sorted using total ordering predicate \\spad{p}.")) (|reverse| (($ $) "\\spad{reverse(a)} returns a copy of \\axiom{a} with elements in reverse order.")) (|merge| (($ $ $) "\\spad{merge(u,v)} merges \\spad{u} and \\spad{v} in ascending order. Note: \\axiom{merge(\\spad{u},{}\\spad{v}) = merge(<=,{}\\spad{u},{}\\spad{v})}.") (($ (|Mapping| (|Boolean|) |#1| |#1|) $ $) "\\spad{merge(p,a,b)} returns an aggregate \\spad{c} which merges \\axiom{a} and \\spad{b}. The result is produced by examining each element \\spad{x} of \\axiom{a} and \\spad{y} of \\spad{b} successively. If \\axiom{\\spad{p}(\\spad{x},{}\\spad{y})} is \\spad{true},{} then \\spad{x} is inserted into the result; otherwise \\spad{y} is inserted. If \\spad{x} is chosen,{} the next element of \\axiom{a} is examined,{} and so on. When all the elements of one aggregate are examined,{} the remaining elements of the other are appended. For example,{} \\axiom{merge(<,{}[1,{}3],{}[2,{}7,{}5])} returns \\axiom{[1,{}2,{}3,{}7,{}5]}."))) 
((-3994 . T)) 
NIL 
(-324 S A R B) 
((|constructor| (NIL "\\spad{FiniteLinearAggregateFunctions2} provides functions involving two FiniteLinearAggregates where the underlying domains might be different. An example of this might be creating a list of rational numbers by mapping a function across a list of integers where the function divides each integer by 1000.")) (|scan| ((|#4| (|Mapping| |#3| |#1| |#3|) |#2| |#3|) "\\spad{scan(f,a,r)} successively applies \\spad{reduce(f,x,r)} to more and more leading sub-aggregates \\spad{x} of aggregrate \\spad{a}. More precisely,{} if \\spad{a} is \\spad{[a1,a2,...]},{} then \\spad{scan(f,a,r)} returns \\spad{[reduce(f,[a1],r),reduce(f,[a1,a2],r),...]}.")) (|reduce| ((|#3| (|Mapping| |#3| |#1| |#3|) |#2| |#3|) "\\spad{reduce(f,a,r)} applies function \\spad{f} to each successive element of the aggregate \\spad{a} and an accumulant initialized to \\spad{r}. For example,{} \\spad{reduce(_+\\$Integer,[1,2,3],0)} does \\spad{3+(2+(1+0))}. Note: third argument \\spad{r} may be regarded as the identity element for the function \\spad{f}.")) (|map| ((|#4| (|Mapping| |#3| |#1|) |#2|) "\\spad{map(f,a)} applies function \\spad{f} to each member of aggregate \\spad{a} resulting in a new aggregate over a possibly different underlying domain."))) 
NIL 
NIL 
(-325 |VarSet| R) 
((|constructor| (NIL "The category of free Lie algebras. It is used by domains of non-commutative algebra: \\spadtype{LiePolynomial} and \\spadtype{XPBWPolynomial}. \\newline Author: Michel Petitot (petitot@lifl.fr)")) (|eval| (($ $ (|List| |#1|) (|List| $)) "\\axiom{eval(\\spad{p},{} [\\spad{x1},{}...,{}xn],{} [\\spad{v1},{}...,{}vn])} replaces \\axiom{\\spad{xi}} by \\axiom{\\spad{vi}} in \\axiom{\\spad{p}}.") (($ $ |#1| $) "\\axiom{eval(\\spad{p},{} \\spad{x},{} \\spad{v})} replaces \\axiom{\\spad{x}} by \\axiom{\\spad{v}} in \\axiom{\\spad{p}}.")) (|varList| (((|List| |#1|) $) "\\axiom{varList(\\spad{x})} returns the list of distinct entries of \\axiom{\\spad{x}}.")) (|trunc| (($ $ (|NonNegativeInteger|)) "\\axiom{trunc(\\spad{p},{}\\spad{n})} returns the polynomial \\axiom{\\spad{p}} truncated at order \\axiom{\\spad{n}}.")) (|mirror| (($ $) "\\axiom{mirror(\\spad{x})} returns \\axiom{Sum(r_i mirror(w_i))} if \\axiom{\\spad{x}} is \\axiom{Sum(r_i w_i)}.")) (|LiePoly| (($ (|LyndonWord| |#1|)) "\\axiom{LiePoly(\\spad{l})} returns the bracketed form of \\axiom{\\spad{l}} as a Lie polynomial.")) (|rquo| (((|XRecursivePolynomial| |#1| |#2|) (|XRecursivePolynomial| |#1| |#2|) $) "\\axiom{rquo(\\spad{x},{}\\spad{y})} returns the right simplification of \\axiom{\\spad{x}} by \\axiom{\\spad{y}}.")) (|lquo| (((|XRecursivePolynomial| |#1| |#2|) (|XRecursivePolynomial| |#1| |#2|) $) "\\axiom{lquo(\\spad{x},{}\\spad{y})} returns the left simplification of \\axiom{\\spad{x}} by \\axiom{\\spad{y}}.")) (|degree| (((|NonNegativeInteger|) $) "\\axiom{degree(\\spad{x})} returns the greatest length of a word in the support of \\axiom{\\spad{x}}.")) (|coerce| (((|XRecursivePolynomial| |#1| |#2|) $) "\\axiom{coerce(\\spad{x})} returns \\axiom{\\spad{x}} as a recursive polynomial.") (((|XDistributedPolynomial| |#1| |#2|) $) "\\axiom{coerce(\\spad{x})} returns \\axiom{\\spad{x}} as distributed polynomial.") (($ |#1|) "\\axiom{coerce(\\spad{x})} returns \\axiom{\\spad{x}} as a Lie polynomial.")) (|coef| ((|#2| (|XRecursivePolynomial| |#1| |#2|) $) "\\axiom{coef(\\spad{x},{}\\spad{y})} returns the scalar product of \\axiom{\\spad{x}} by \\axiom{\\spad{y}},{} the set of words being regarded as an orthogonal basis."))) 
((|JacobiIdentity| . T) (|NullSquare| . T) (-3989 . T) (-3988 . T)) 
NIL 
(-326 S V) 
((|constructor| (NIL "This package exports 3 sorting algorithms which work over FiniteLinearAggregates.")) (|shellSort| ((|#2| (|Mapping| (|Boolean|) |#1| |#1|) |#2|) "\\spad{shellSort(f, agg)} sorts the aggregate agg with the ordering function \\spad{f} using the shellSort algorithm.")) (|heapSort| ((|#2| (|Mapping| (|Boolean|) |#1| |#1|) |#2|) "\\spad{heapSort(f, agg)} sorts the aggregate agg with the ordering function \\spad{f} using the heapsort algorithm.")) (|quickSort| ((|#2| (|Mapping| (|Boolean|) |#1| |#1|) |#2|) "\\spad{quickSort(f, agg)} sorts the aggregate agg with the ordering function \\spad{f} using the quicksort algorithm."))) 
NIL 
NIL 
(-327 S R) 
((|constructor| (NIL "\\spad{S} is \\spadtype{FullyLinearlyExplicitRingOver R} means that \\spad{S} is a \\spadtype{LinearlyExplicitRingOver R} and,{} in addition,{} if \\spad{R} is a \\spadtype{LinearlyExplicitRingOver Integer},{} then so is \\spad{S}"))) 
NIL 
((|HasCategory| |#2| (QUOTE (-580 (-484))))) 
(-328 R) 
((|constructor| (NIL "\\spad{S} is \\spadtype{FullyLinearlyExplicitRingOver R} means that \\spad{S} is a \\spadtype{LinearlyExplicitRingOver R} and,{} in addition,{} if \\spad{R} is a \\spadtype{LinearlyExplicitRingOver Integer},{} then so is \\spad{S}"))) 
NIL 
NIL 
(-329) 
((|outputSpacing| (((|Void|) (|NonNegativeInteger|)) "\\spad{outputSpacing(n)} inserts a space after \\spad{n} (default 10) digits on output; outputSpacing(0) means no spaces are inserted.")) (|outputGeneral| (((|Void|) (|NonNegativeInteger|)) "\\spad{outputGeneral(n)} sets the output mode to general notation with \\spad{n} significant digits displayed.") (((|Void|)) "\\spad{outputGeneral()} sets the output mode (default mode) to general notation; numbers will be displayed in either fixed or floating (scientific) notation depending on the magnitude.")) (|outputFixed| (((|Void|) (|NonNegativeInteger|)) "\\spad{outputFixed(n)} sets the output mode to fixed point notation,{} with \\spad{n} digits displayed after the decimal point.") (((|Void|)) "\\spad{outputFixed()} sets the output mode to fixed point notation; the output will contain a decimal point.")) (|outputFloating| (((|Void|) (|NonNegativeInteger|)) "\\spad{outputFloating(n)} sets the output mode to floating (scientific) notation with \\spad{n} significant digits displayed after the decimal point.") (((|Void|)) "\\spad{outputFloating()} sets the output mode to floating (scientific) notation,{} \\spadignore{i.e.} \\spad{mantissa * 10 exponent} is displayed as \\spad{0.mantissa E exponent}.")) (|atan| (($ $ $) "\\spad{atan(x,y)} computes the arc tangent from \\spad{x} with phase \\spad{y}.")) (|exp1| (($) "\\spad{exp1()} returns exp 1: \\spad{2.7182818284...}.")) (|log10| (($ $) "\\spad{log10(x)} computes the logarithm for \\spad{x} to base 10.") (($) "\\spad{log10()} returns \\spad{ln 10}: \\spad{2.3025809299...}.")) (|log2| (($ $) "\\spad{log2(x)} computes the logarithm for \\spad{x} to base 2.") (($) "\\spad{log2()} returns \\spad{ln 2},{} \\spadignore{i.e.} \\spad{0.6931471805...}.")) (|rationalApproximation| (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{rationalApproximation(f, n, b)} computes a rational approximation \\spad{r} to \\spad{f} with relative error \\spad{< b**(-n)},{} that is \\spad{|(r-f)/f| < b**(-n)}.") (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)) "\\spad{rationalApproximation(f, n)} computes a rational approximation \\spad{r} to \\spad{f} with relative error \\spad{< 10**(-n)}.")) (|shift| (($ $ (|Integer|)) "\\spad{shift(x,n)} adds \\spad{n} to the exponent of float \\spad{x}.")) (|relerror| (((|Integer|) $ $) "\\spad{relerror(x,y)} computes the absolute value of \\spad{x - y} divided by \\spad{y},{} when \\spad{y \\~= 0}.")) (|normalize| (($ $) "\\spad{normalize(x)} normalizes \\spad{x} at current precision.")) (** (($ $ $) "\\spad{x ** y} computes \\spad{exp(y log x)} where \\spad{x >= 0}.")) (/ (($ $ (|Integer|)) "\\spad{x / i} computes the division from \\spad{x} by an integer \\spad{i}."))) 
((-3977 . T) (-3985 . T) (-3769 . T) (-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-330 |Par|) 
((|constructor| (NIL "\\indented{3}{This is a package for the approximation of complex solutions for} systems of equations of rational functions with complex rational coefficients. The results are expressed as either complex rational numbers or complex floats depending on the type of the precision parameter which can be either a rational number or a floating point number.")) (|complexRoots| (((|List| (|List| (|Complex| |#1|))) (|List| (|Fraction| (|Polynomial| (|Complex| (|Integer|))))) (|List| (|Symbol|)) |#1|) "\\spad{complexRoots(lrf, lv, eps)} finds all the complex solutions of a list of rational functions with rational number coefficients with respect the the variables appearing in \\spad{lv}. Each solution is computed to precision eps and returned as list corresponding to the order of variables in \\spad{lv}.") (((|List| (|Complex| |#1|)) (|Fraction| (|Polynomial| (|Complex| (|Integer|)))) |#1|) "\\spad{complexRoots(rf, eps)} finds all the complex solutions of a univariate rational function with rational number coefficients. The solutions are computed to precision eps.")) (|complexSolve| (((|List| (|Equation| (|Polynomial| (|Complex| |#1|)))) (|Equation| (|Fraction| (|Polynomial| (|Complex| (|Integer|))))) |#1|) "\\spad{complexSolve(eq,eps)} finds all the complex solutions of the equation \\spad{eq} of rational functions with rational rational coefficients with respect to all the variables appearing in \\spad{eq},{} with precision \\spad{eps}.") (((|List| (|Equation| (|Polynomial| (|Complex| |#1|)))) (|Fraction| (|Polynomial| (|Complex| (|Integer|)))) |#1|) "\\spad{complexSolve(p,eps)} find all the complex solutions of the rational function \\spad{p} with complex rational coefficients with respect to all the variables appearing in \\spad{p},{} with precision \\spad{eps}.") (((|List| (|List| (|Equation| (|Polynomial| (|Complex| |#1|))))) (|List| (|Equation| (|Fraction| (|Polynomial| (|Complex| (|Integer|)))))) |#1|) "\\spad{complexSolve(leq,eps)} finds all the complex solutions to precision \\spad{eps} of the system \\spad{leq} of equations of rational functions over complex rationals with respect to all the variables appearing in lp.") (((|List| (|List| (|Equation| (|Polynomial| (|Complex| |#1|))))) (|List| (|Fraction| (|Polynomial| (|Complex| (|Integer|))))) |#1|) "\\spad{complexSolve(lp,eps)} finds all the complex solutions to precision \\spad{eps} of the system \\spad{lp} of rational functions over the complex rationals with respect to all the variables appearing in \\spad{lp}."))) 
NIL 
NIL 
(-331 |Par|) 
((|constructor| (NIL "\\indented{3}{This is a package for the approximation of real solutions for} systems of polynomial equations over the rational numbers. The results are expressed as either rational numbers or floats depending on the type of the precision parameter which can be either a rational number or a floating point number.")) (|realRoots| (((|List| |#1|) (|Fraction| (|Polynomial| (|Integer|))) |#1|) "\\spad{realRoots(rf, eps)} finds the real zeros of a univariate rational function with precision given by eps.") (((|List| (|List| |#1|)) (|List| (|Fraction| (|Polynomial| (|Integer|)))) (|List| (|Symbol|)) |#1|) "\\spad{realRoots(lp,lv,eps)} computes the list of the real solutions of the list \\spad{lp} of rational functions with rational coefficients with respect to the variables in \\spad{lv},{} with precision \\spad{eps}. Each solution is expressed as a list of numbers in order corresponding to the variables in \\spad{lv}.")) (|solve| (((|List| (|Equation| (|Polynomial| |#1|))) (|Equation| (|Fraction| (|Polynomial| (|Integer|)))) |#1|) "\\spad{solve(eq,eps)} finds all of the real solutions of the univariate equation \\spad{eq} of rational functions with respect to the unique variables appearing in \\spad{eq},{} with precision \\spad{eps}.") (((|List| (|Equation| (|Polynomial| |#1|))) (|Fraction| (|Polynomial| (|Integer|))) |#1|) "\\spad{solve(p,eps)} finds all of the real solutions of the univariate rational function \\spad{p} with rational coefficients with respect to the unique variable appearing in \\spad{p},{} with precision \\spad{eps}.") (((|List| (|List| (|Equation| (|Polynomial| |#1|)))) (|List| (|Equation| (|Fraction| (|Polynomial| (|Integer|))))) |#1|) "\\spad{solve(leq,eps)} finds all of the real solutions of the system \\spad{leq} of equationas of rational functions with respect to all the variables appearing in lp,{} with precision \\spad{eps}.") (((|List| (|List| (|Equation| (|Polynomial| |#1|)))) (|List| (|Fraction| (|Polynomial| (|Integer|)))) |#1|) "\\spad{solve(lp,eps)} finds all of the real solutions of the system \\spad{lp} of rational functions over the rational numbers with respect to all the variables appearing in \\spad{lp},{} with precision \\spad{eps}."))) 
NIL 
NIL 
(-332 R S) 
((|constructor| (NIL "A \\spad{bi}-module is a free module over a ring with generators indexed by an ordered set. Each element can be expressed as a finite linear combination of generators. Only non-zero terms are stored."))) 
((-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) 
(-333 R S) 
((|constructor| (NIL "This domain implements linear combinations of elements from the domain \\spad{S} with coefficients in the domain \\spad{R} where \\spad{S} is an ordered set and \\spad{R} is a ring (which may be non-commutative). This domain is used by domains of non-commutative algebra such as: \\indented{4}{\\spadtype{XDistributedPolynomial},{}} \\indented{4}{\\spadtype{XRecursivePolynomial}.} Author: Michel Petitot (petitot@lifl.fr)")) (* (($ |#2| |#1|) "\\spad{s*r} returns the product \\spad{r*s} used by \\spadtype{XRecursivePolynomial}"))) 
((-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-146)))) 
(-334 R |Basis|) 
((|constructor| (NIL "A domain of this category implements formal linear combinations of elements from a domain \\spad{Basis} with coefficients in a domain \\spad{R}. The domain \\spad{Basis} needs only to belong to the category \\spadtype{SetCategory} and \\spad{R} to the category \\spadtype{Ring}. Thus the coefficient ring may be non-commutative. See the \\spadtype{XDistributedPolynomial} constructor for examples of domains built with the \\spadtype{FreeModuleCat} category constructor. Author: Michel Petitot (petitot@lifl.fr)")) (|reductum| (($ $) "\\spad{reductum(x)} returns \\spad{x} minus its leading term.")) (|leadingTerm| (((|Record| (|:| |k| |#2|) (|:| |c| |#1|)) $) "\\spad{leadingTerm(x)} returns the first term which appears in \\spad{ListOfTerms(x)}.")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(x)} returns the first coefficient which appears in \\spad{ListOfTerms(x)}.")) (|leadingMonomial| ((|#2| $) "\\spad{leadingMonomial(x)} returns the first element from \\spad{Basis} which appears in \\spad{ListOfTerms(x)}.")) (|numberOfMonomials| (((|NonNegativeInteger|) $) "\\spad{numberOfMonomials(x)} returns the number of monomials of \\spad{x}.")) (|monomials| (((|List| $) $) "\\spad{monomials(x)} returns the list of \\spad{r_i*b_i} whose sum is \\spad{x}.")) (|coefficients| (((|List| |#1|) $) "\\spad{coefficients(x)} returns the list of coefficients of \\spad{x}.")) (|ListOfTerms| (((|List| (|Record| (|:| |k| |#2|) (|:| |c| |#1|))) $) "\\spad{ListOfTerms(x)} returns a list \\spad{lt} of terms with type \\spad{Record(k: Basis, c: R)} such that \\spad{x} equals \\spad{reduce(+, map(x +-> monom(x.k, x.c), lt))}.")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(x)} returns \\spad{true} if \\spad{x} contains a single monomial.")) (|monom| (($ |#2| |#1|) "\\spad{monom(b,r)} returns the element with the single monomial \\indented{1}{\\spad{b} and coefficient \\spad{r}.}")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(fn,u)} maps function \\spad{fn} onto the coefficients \\indented{1}{of the non-zero monomials of \\spad{u}.}")) (|coefficient| ((|#1| $ |#2|) "\\spad{coefficient(x,b)} returns the coefficient of \\spad{b} in \\spad{x}.")) (* (($ |#1| |#2|) "\\spad{r*b} returns the product of \\spad{r} by \\spad{b}."))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-335 S) 
((|constructor| (NIL "A free monoid on a set \\spad{S} is the monoid of finite products of the form \\spad{reduce(*,[si ** ni])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are nonnegative integers. The multiplication is not commutative.")) (|mapGen| (($ (|Mapping| |#1| |#1|) $) "\\spad{mapGen(f, a1\\^e1 ... an\\^en)} returns \\spad{f(a1)\\^e1 ... f(an)\\^en}.")) (|mapExpon| (($ (|Mapping| (|NonNegativeInteger|) (|NonNegativeInteger|)) $) "\\spad{mapExpon(f, a1\\^e1 ... an\\^en)} returns \\spad{a1\\^f(e1) ... an\\^f(en)}.")) (|nthFactor| ((|#1| $ (|Integer|)) "\\spad{nthFactor(x, n)} returns the factor of the n^th monomial of \\spad{x}.")) (|nthExpon| (((|NonNegativeInteger|) $ (|Integer|)) "\\spad{nthExpon(x, n)} returns the exponent of the n^th monomial of \\spad{x}.")) (|factors| (((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| (|NonNegativeInteger|)))) $) "\\spad{factors(a1\\^e1,...,an\\^en)} returns \\spad{[[a1, e1],...,[an, en]]}.")) (|size| (((|NonNegativeInteger|) $) "\\spad{size(x)} returns the number of monomials in \\spad{x}.")) (|overlap| (((|Record| (|:| |lm| $) (|:| |mm| $) (|:| |rm| $)) $ $) "\\spad{overlap(x, y)} returns \\spad{[l, m, r]} such that \\spad{x = l * m},{} \\spad{y = m * r} and \\spad{l} and \\spad{r} have no overlap,{} \\spadignore{i.e.} \\spad{overlap(l, r) = [l, 1, r]}.")) (|divide| (((|Union| (|Record| (|:| |lm| $) (|:| |rm| $)) "failed") $ $) "\\spad{divide(x, y)} returns the left and right exact quotients of \\spad{x} by \\spad{y},{} \\spadignore{i.e.} \\spad{[l, r]} such that \\spad{x = l * y * r},{} \"failed\" if \\spad{x} is not of the form \\spad{l * y * r}.")) (|rquo| (((|Union| $ "failed") $ $) "\\spad{rquo(x, y)} returns the exact right quotient of \\spad{x} by \\spad{y} \\spadignore{i.e.} \\spad{q} such that \\spad{x = q * y},{} \"failed\" if \\spad{x} is not of the form \\spad{q * y}.")) (|lquo| (((|Union| $ "failed") $ $) "\\spad{lquo(x, y)} returns the exact left quotient of \\spad{x} by \\spad{y} \\spadignore{i.e.} \\spad{q} such that \\spad{x = y * q},{} \"failed\" if \\spad{x} is not of the form \\spad{y * q}.")) (|hcrf| (($ $ $) "\\spad{hcrf(x, y)} returns the highest common right factor of \\spad{x} and \\spad{y},{} \\spadignore{i.e.} the largest \\spad{d} such that \\spad{x = a d} and \\spad{y = b d}.")) (|hclf| (($ $ $) "\\spad{hclf(x, y)} returns the highest common left factor of \\spad{x} and \\spad{y},{} \\spadignore{i.e.} the largest \\spad{d} such that \\spad{x = d a} and \\spad{y = d b}.")) (** (($ |#1| (|NonNegativeInteger|)) "\\spad{s ** n} returns the product of \\spad{s} by itself \\spad{n} times.")) (* (($ $ |#1|) "\\spad{x * s} returns the product of \\spad{x} by \\spad{s} on the right.") (($ |#1| $) "\\spad{s * x} returns the product of \\spad{x} by \\spad{s} on the left."))) 
NIL 
NIL 
(-336 S) 
((|constructor| (NIL "The free monoid on a set \\spad{S} is the monoid of finite products of the form \\spad{reduce(*,[si ** ni])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are nonnegative integers. The multiplication is not commutative."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-756)))) 
(-337) 
((|constructor| (NIL "This domain provides an interface to names in the file system."))) 
NIL 
NIL 
(-338) 
((|constructor| (NIL "This category provides an interface to names in the file system.")) (|new| (($ (|String|) (|String|) (|String|)) "\\spad{new(d,pref,e)} constructs the name of a new writable file with \\spad{d} as its directory,{} \\spad{pref} as a prefix of its name and \\spad{e} as its extension. When \\spad{d} or \\spad{t} is the empty string,{} a default is used. An error occurs if a new file cannot be written in the given directory.")) (|writable?| (((|Boolean|) $) "\\spad{writable?(f)} tests if the named file be opened for writing. The named file need not already exist.")) (|readable?| (((|Boolean|) $) "\\spad{readable?(f)} tests if the named file exist and can it be opened for reading.")) (|exists?| (((|Boolean|) $) "\\spad{exists?(f)} tests if the file exists in the file system.")) (|extension| (((|String|) $) "\\spad{extension(f)} returns the type part of the file name.")) (|name| (((|String|) $) "\\spad{name(f)} returns the name part of the file name.")) (|directory| (((|String|) $) "\\spad{directory(f)} returns the directory part of the file name.")) (|filename| (($ (|String|) (|String|) (|String|)) "\\spad{filename(d,n,e)} creates a file name with \\spad{d} as its directory,{} \\spad{n} as its name and \\spad{e} as its extension. This is a portable way to create file names. When \\spad{d} or \\spad{t} is the empty string,{} a default is used."))) 
NIL 
NIL 
(-339 |n| |class| R) 
((|constructor| (NIL "Generate the Free Lie Algebra over a ring \\spad{R} with identity; A \\spad{P}. Hall basis is generated by a package call to HallBasis.")) (|generator| (($ (|NonNegativeInteger|)) "\\spad{generator(i)} is the \\spad{i}th Hall Basis element")) (|shallowExpand| (((|OutputForm|) $) "\\spad{shallowExpand(x)} \\undocumented{}")) (|deepExpand| (((|OutputForm|) $) "\\spad{deepExpand(x)} \\undocumented{}")) (|dimension| (((|NonNegativeInteger|)) "\\spad{dimension()} is the rank of this Lie algebra"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-340 -3092 UP UPUP R) 
((|constructor| (NIL "\\indented{1}{Finds the order of a divisor over a finite field} Author: Manuel Bronstein Date Created: 1988 Date Last Updated: 11 Jul 1990")) (|order| (((|NonNegativeInteger|) (|FiniteDivisor| |#1| |#2| |#3| |#4|)) "\\spad{order(x)} \\undocumented"))) 
NIL 
NIL 
(-341 -3092 UP) 
((|constructor| (NIL "\\indented{1}{Full partial fraction expansion of rational functions} Author: Manuel Bronstein Date Created: 9 December 1992 Date Last Updated: June 18,{} 2010 References: \\spad{M}.Bronstein & \\spad{B}.Salvy,{} \\indented{12}{Full Partial Fraction Decomposition of Rational Functions,{}} \\indented{12}{in Proceedings of \\spad{ISSAC'93},{} Kiev,{} ACM Press.}")) (|construct| (($ (|List| (|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |center| |#2|) (|:| |num| |#2|)))) "\\spad{construct(l)} is the inverse of fracPart.")) (|fracPart| (((|List| (|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |center| |#2|) (|:| |num| |#2|))) $) "\\spad{fracPart(f)} returns the list of summands of the fractional part of \\spad{f}.")) (|polyPart| ((|#2| $) "\\spad{polyPart(f)} returns the polynomial part of \\spad{f}.")) (|fullPartialFraction| (($ (|Fraction| |#2|)) "\\spad{fullPartialFraction(f)} returns \\spad{[p, [[j, Dj, Hj]...]]} such that \\spad{f = p(x) + \\sum_{[j,Dj,Hj] in l} \\sum_{Dj(a)=0} Hj(a)/(x - a)\\^j}.")) (+ (($ |#2| $) "\\spad{p + x} returns the sum of \\spad{p} and \\spad{x}"))) 
NIL 
NIL 
(-342 R) 
((|constructor| (NIL "A set \\spad{S} is PatternMatchable over \\spad{R} if \\spad{S} can lift the pattern-matching functions of \\spad{S} over the integers and float to itself (necessary for matching in towers)."))) 
NIL 
NIL 
(-343 S) 
((|constructor| (NIL "FieldOfPrimeCharacteristic is the category of fields of prime characteristic,{} \\spadignore{e.g.} finite fields,{} algebraic closures of fields of prime characteristic,{} transcendental extensions of of fields of prime characteristic.")) (|primeFrobenius| (($ $ (|NonNegativeInteger|)) "\\spad{primeFrobenius(a,s)} returns \\spad{a**(p**s)} where \\spad{p} is the characteristic.") (($ $) "\\spad{primeFrobenius(a)} returns \\spad{a ** p} where \\spad{p} is the characteristic.")) (|discreteLog| (((|Union| (|NonNegativeInteger|) "failed") $ $) "\\spad{discreteLog(b,a)} computes \\spad{s} with \\spad{b**s = a} if such an \\spad{s} exists.")) (|order| (((|OnePointCompletion| (|PositiveInteger|)) $) "\\spad{order(a)} computes the order of an element in the multiplicative group of the field. Error: if \\spad{a} is 0."))) 
NIL 
NIL 
(-344) 
((|constructor| (NIL "FieldOfPrimeCharacteristic is the category of fields of prime characteristic,{} \\spadignore{e.g.} finite fields,{} algebraic closures of fields of prime characteristic,{} transcendental extensions of of fields of prime characteristic.")) (|primeFrobenius| (($ $ (|NonNegativeInteger|)) "\\spad{primeFrobenius(a,s)} returns \\spad{a**(p**s)} where \\spad{p} is the characteristic.") (($ $) "\\spad{primeFrobenius(a)} returns \\spad{a ** p} where \\spad{p} is the characteristic.")) (|discreteLog| (((|Union| (|NonNegativeInteger|) "failed") $ $) "\\spad{discreteLog(b,a)} computes \\spad{s} with \\spad{b**s = a} if such an \\spad{s} exists.")) (|order| (((|OnePointCompletion| (|PositiveInteger|)) $) "\\spad{order(a)} computes the order of an element in the multiplicative group of the field. Error: if \\spad{a} is 0."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-345 S) 
((|constructor| (NIL "This category is intended as a model for floating point systems. A floating point system is a model for the real numbers. In fact,{} it is an approximation in the sense that not all real numbers are exactly representable by floating point numbers. A floating point system is characterized by the following: \\blankline \\indented{2}{1: \\spadfunFrom{base}{FloatingPointSystem} of the \\spadfunFrom{exponent}{FloatingPointSystem}.} \\indented{9}{(actual implemenations are usually binary or decimal)} \\indented{2}{2: \\spadfunFrom{precision}{FloatingPointSystem} of the \\spadfunFrom{mantissa}{FloatingPointSystem} (arbitrary or fixed)} \\indented{2}{3: rounding error for operations} \\blankline Because a Float is an approximation to the real numbers,{} even though it is defined to be a join of a Field and OrderedRing,{} some of the attributes do not hold. In particular associative(\"+\") does not hold. Algorithms defined over a field need special considerations when the field is a floating point system.")) (|max| (($) "\\spad{max()} returns the maximum floating point number.")) (|min| (($) "\\spad{min()} returns the minimum floating point number.")) (|decreasePrecision| (((|PositiveInteger|) (|Integer|)) "\\spad{decreasePrecision(n)} decreases the current \\spadfunFrom{precision}{FloatingPointSystem} precision by \\spad{n} decimal digits.")) (|increasePrecision| (((|PositiveInteger|) (|Integer|)) "\\spad{increasePrecision(n)} increases the current \\spadfunFrom{precision}{FloatingPointSystem} by \\spad{n} decimal digits.")) (|precision| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{precision(n)} set the precision in the base to \\spad{n} decimal digits.") (((|PositiveInteger|)) "\\spad{precision()} returns the precision in digits base.")) (|digits| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{digits(d)} set the \\spadfunFrom{precision}{FloatingPointSystem} to \\spad{d} digits.") (((|PositiveInteger|)) "\\spad{digits()} returns ceiling's precision in decimal digits.")) (|bits| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{bits(n)} set the \\spadfunFrom{precision}{FloatingPointSystem} to \\spad{n} bits.") (((|PositiveInteger|)) "\\spad{bits()} returns ceiling's precision in bits.")) (|mantissa| (((|Integer|) $) "\\spad{mantissa(x)} returns the mantissa part of \\spad{x}.")) (|exponent| (((|Integer|) $) "\\spad{exponent(x)} returns the \\spadfunFrom{exponent}{FloatingPointSystem} part of \\spad{x}.")) (|base| (((|PositiveInteger|)) "\\spad{base()} returns the base of the \\spadfunFrom{exponent}{FloatingPointSystem}.")) (|order| (((|Integer|) $) "\\spad{order x} is the order of magnitude of \\spad{x}. Note: \\spad{base ** order x <= |x| < base ** (1 + order x)}.")) (|float| (($ (|Integer|) (|Integer|) (|PositiveInteger|)) "\\spad{float(a,e,b)} returns \\spad{a * b ** e}.") (($ (|Integer|) (|Integer|)) "\\spad{float(a,e)} returns \\spad{a * base() ** e}.")) (|approximate| ((|attribute|) "\\spad{approximate} means \"is an approximation to the real numbers\"."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3977)) (|HasAttribute| |#1| (QUOTE -3985))) 
(-346) 
((|constructor| (NIL "This category is intended as a model for floating point systems. A floating point system is a model for the real numbers. In fact,{} it is an approximation in the sense that not all real numbers are exactly representable by floating point numbers. A floating point system is characterized by the following: \\blankline \\indented{2}{1: \\spadfunFrom{base}{FloatingPointSystem} of the \\spadfunFrom{exponent}{FloatingPointSystem}.} \\indented{9}{(actual implemenations are usually binary or decimal)} \\indented{2}{2: \\spadfunFrom{precision}{FloatingPointSystem} of the \\spadfunFrom{mantissa}{FloatingPointSystem} (arbitrary or fixed)} \\indented{2}{3: rounding error for operations} \\blankline Because a Float is an approximation to the real numbers,{} even though it is defined to be a join of a Field and OrderedRing,{} some of the attributes do not hold. In particular associative(\"+\") does not hold. Algorithms defined over a field need special considerations when the field is a floating point system.")) (|max| (($) "\\spad{max()} returns the maximum floating point number.")) (|min| (($) "\\spad{min()} returns the minimum floating point number.")) (|decreasePrecision| (((|PositiveInteger|) (|Integer|)) "\\spad{decreasePrecision(n)} decreases the current \\spadfunFrom{precision}{FloatingPointSystem} precision by \\spad{n} decimal digits.")) (|increasePrecision| (((|PositiveInteger|) (|Integer|)) "\\spad{increasePrecision(n)} increases the current \\spadfunFrom{precision}{FloatingPointSystem} by \\spad{n} decimal digits.")) (|precision| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{precision(n)} set the precision in the base to \\spad{n} decimal digits.") (((|PositiveInteger|)) "\\spad{precision()} returns the precision in digits base.")) (|digits| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{digits(d)} set the \\spadfunFrom{precision}{FloatingPointSystem} to \\spad{d} digits.") (((|PositiveInteger|)) "\\spad{digits()} returns ceiling's precision in decimal digits.")) (|bits| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{bits(n)} set the \\spadfunFrom{precision}{FloatingPointSystem} to \\spad{n} bits.") (((|PositiveInteger|)) "\\spad{bits()} returns ceiling's precision in bits.")) (|mantissa| (((|Integer|) $) "\\spad{mantissa(x)} returns the mantissa part of \\spad{x}.")) (|exponent| (((|Integer|) $) "\\spad{exponent(x)} returns the \\spadfunFrom{exponent}{FloatingPointSystem} part of \\spad{x}.")) (|base| (((|PositiveInteger|)) "\\spad{base()} returns the base of the \\spadfunFrom{exponent}{FloatingPointSystem}.")) (|order| (((|Integer|) $) "\\spad{order x} is the order of magnitude of \\spad{x}. Note: \\spad{base ** order x <= |x| < base ** (1 + order x)}.")) (|float| (($ (|Integer|) (|Integer|) (|PositiveInteger|)) "\\spad{float(a,e,b)} returns \\spad{a * b ** e}.") (($ (|Integer|) (|Integer|)) "\\spad{float(a,e)} returns \\spad{a * base() ** e}.")) (|approximate| ((|attribute|) "\\spad{approximate} means \"is an approximation to the real numbers\"."))) 
((-3769 . T) (-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-347 R) 
((|constructor| (NIL "\\spadtype{Factored} creates a domain whose objects are kept in factored form as long as possible. Thus certain operations like multiplication and gcd are relatively easy to do. Others,{} like addition require somewhat more work,{} and unless the argument domain provides a factor function,{} the result may not be completely factored. Each object consists of a unit and a list of factors,{} where a factor has a member of \\spad{R} (the \"base\"),{} and exponent and a flag indicating what is known about the base. A flag may be one of \"nil\",{} \"sqfr\",{} \"irred\" or \"prime\",{} which respectively mean that nothing is known about the base,{} it is square-free,{} it is irreducible,{} or it is prime. The current restriction to integral domains allows simplification to be performed without worrying about multiplication order.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(u)} returns a rational number if \\spad{u} really is one,{} and \"failed\" otherwise.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(u)} assumes spadvar{\\spad{u}} is actually a rational number and does the conversion to rational number (see \\spadtype{Fraction Integer}).")) (|rational?| (((|Boolean|) $) "\\spad{rational?(u)} tests if \\spadvar{\\spad{u}} is actually a rational number (see \\spadtype{Fraction Integer}).")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(fn,u)} maps the function \\userfun{\\spad{fn}} across the factors of \\spadvar{\\spad{u}} and creates a new factored object. Note: this clears the information flags (sets them to \"nil\") because the effect of \\userfun{\\spad{fn}} is clearly not known in general.")) (|unitNormalize| (($ $) "\\spad{unitNormalize(u)} normalizes the unit part of the factorization. For example,{} when working with factored integers,{} this operation will ensure that the bases are all positive integers.")) (|unit| ((|#1| $) "\\spad{unit(u)} extracts the unit part of the factorization.")) (|flagFactor| (($ |#1| (|Integer|) (|Union| #1="nil" #2="sqfr" #3="irred" #4="prime")) "\\spad{flagFactor(base,exponent,flag)} creates a factored object with a single factor whose \\spad{base} is asserted to be properly described by the information \\spad{flag}.")) (|sqfrFactor| (($ |#1| (|Integer|)) "\\spad{sqfrFactor(base,exponent)} creates a factored object with a single factor whose \\spad{base} is asserted to be square-free (flag = \"sqfr\").")) (|primeFactor| (($ |#1| (|Integer|)) "\\spad{primeFactor(base,exponent)} creates a factored object with a single factor whose \\spad{base} is asserted to be prime (flag = \"prime\").")) (|numberOfFactors| (((|NonNegativeInteger|) $) "\\spad{numberOfFactors(u)} returns the number of factors in \\spadvar{\\spad{u}}.")) (|nthFlag| (((|Union| #1# #2# #3# #4#) $ (|Integer|)) "\\spad{nthFlag(u,n)} returns the information flag of the \\spad{n}th factor of \\spadvar{\\spad{u}}. If \\spadvar{\\spad{n}} is not a valid index for a factor (for example,{} less than 1 or too big),{} \"nil\" is returned.")) (|nthFactor| ((|#1| $ (|Integer|)) "\\spad{nthFactor(u,n)} returns the base of the \\spad{n}th factor of \\spadvar{\\spad{u}}. If \\spadvar{\\spad{n}} is not a valid index for a factor (for example,{} less than 1 or too big),{} 1 is returned. If \\spadvar{\\spad{u}} consists only of a unit,{} the unit is returned.")) (|nthExponent| (((|Integer|) $ (|Integer|)) "\\spad{nthExponent(u,n)} returns the exponent of the \\spad{n}th factor of \\spadvar{\\spad{u}}. If \\spadvar{\\spad{n}} is not a valid index for a factor (for example,{} less than 1 or too big),{} 0 is returned.")) (|irreducibleFactor| (($ |#1| (|Integer|)) "\\spad{irreducibleFactor(base,exponent)} creates a factored object with a single factor whose \\spad{base} is asserted to be irreducible (flag = \"irred\").")) (|factors| (((|List| (|Record| (|:| |factor| |#1|) (|:| |exponent| (|Integer|)))) $) "\\spad{factors(u)} returns a list of the factors in a form suitable for iteration. That is,{} it returns a list where each element is a record containing a base and exponent. The original object is the product of all the factors and the unit (which can be extracted by \\axiom{unit(\\spad{u})}).")) (|nilFactor| (($ |#1| (|Integer|)) "\\spad{nilFactor(base,exponent)} creates a factored object with a single factor with no information about the kind of \\spad{base} (flag = \"nil\").")) (|factorList| (((|List| (|Record| (|:| |flg| (|Union| #1# #2# #3# #4#)) (|:| |fctr| |#1|) (|:| |xpnt| (|Integer|)))) $) "\\spad{factorList(u)} returns the list of factors with flags (for use by factoring code).")) (|makeFR| (($ |#1| (|List| (|Record| (|:| |flg| (|Union| #1# #2# #3# #4#)) (|:| |fctr| |#1|) (|:| |xpnt| (|Integer|))))) "\\spad{makeFR(unit,listOfFactors)} creates a factored object (for use by factoring code).")) (|exponent| (((|Integer|) $) "\\spad{exponent(u)} returns the exponent of the first factor of \\spadvar{\\spad{u}},{} or 0 if the factored form consists solely of a unit.")) (|expand| ((|#1| $) "\\spad{expand(f)} multiplies the unit and factors together,{} yielding an \"unfactored\" object. Note: this is purposely not called \\spadfun{coerce} which would cause the interpreter to do this automatically."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-455 (-1089) $))) (|HasCategory| |#1| (QUOTE (-260 $))) (|HasCategory| |#1| (QUOTE (-241 $ $))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-1133))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-1133)))) (|HasCategory| |#1| (QUOTE (-933))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -241) (|devaluate| |#1|) (|devaluate| |#1|))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-483))) (|HasCategory| |#1| (QUOTE (-391)))) 
(-348 R S) 
((|constructor| (NIL "\\spadtype{FactoredFunctions2} contains functions that involve factored objects whose underlying domains may not be the same. For example,{} \\spadfun{map} might be used to coerce an object of type \\spadtype{Factored(Integer)} to \\spadtype{Factored(Complex(Integer))}.")) (|map| (((|Factored| |#2|) (|Mapping| |#2| |#1|) (|Factored| |#1|)) "\\spad{map(fn,u)} is used to apply the function \\userfun{\\spad{fn}} to every factor of \\spadvar{\\spad{u}}. The new factored object will have all its information flags set to \"nil\". This function is used,{} for example,{} to coerce every factor base to another type."))) 
NIL 
NIL 
(-349 S) 
((|constructor| (NIL "Fraction takes an IntegralDomain \\spad{S} and produces the domain of Fractions with numerators and denominators from \\spad{S}. If \\spad{S} is also a GcdDomain,{} then gcd's between numerator and denominator will be cancelled during all operations.")) (|canonical| ((|attribute|) "\\spad{canonical} means that equal elements are in fact identical."))) 
((-3981 -12 (|has| |#1| (-6 -3992)) (|has| |#1| (-391)) (|has| |#1| (-6 -3981))) (-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| |#1| (QUOTE (-950 (-1089)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-933))) (|HasCategory| |#1| (QUOTE (-740))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-740))) (|HasCategory| |#1| (QUOTE (-756)))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-1065))) (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -241) (|devaluate| |#1|) (|devaluate| |#1|))) (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-483))) (-12 (|HasAttribute| |#1| (QUOTE -3981)) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391)))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-350 A B) 
((|constructor| (NIL "This package extends a map between integral domains to a map between Fractions over those domains by applying the map to the numerators and denominators.")) (|map| (((|Fraction| |#2|) (|Mapping| |#2| |#1|) (|Fraction| |#1|)) "\\spad{map(func,frac)} applies the function \\spad{func} to the numerator and denominator of the fraction \\spad{frac}."))) 
NIL 
NIL 
(-351 S R UP) 
((|constructor| (NIL "A \\spadtype{FramedAlgebra} is a \\spadtype{FiniteRankAlgebra} together with a fixed \\spad{R}-module basis.")) (|regularRepresentation| (((|Matrix| |#2|) $) "\\spad{regularRepresentation(a)} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the fixed basis.")) (|discriminant| ((|#2|) "\\spad{discriminant()} = determinant(traceMatrix()).")) (|traceMatrix| (((|Matrix| |#2|)) "\\spad{traceMatrix()} is the \\spad{n}-by-\\spad{n} matrix ( \\spad{Tr(vi * vj)} ),{} where \\spad{v1},{} ...,{} vn are the elements of the fixed basis.")) (|convert| (($ (|Vector| |#2|)) "\\spad{convert([a1,..,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} vn are the elements of the fixed basis.") (((|Vector| |#2|) $) "\\spad{convert(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|represents| (($ (|Vector| |#2|)) "\\spad{represents([a1,..,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} vn are the elements of the fixed basis.")) (|coordinates| (((|Matrix| |#2|) (|Vector| $)) "\\spad{coordinates([v1,...,vm])} returns the coordinates of the \\spad{vi}'s with to the fixed basis. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.") (((|Vector| |#2|) $) "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|basis| (((|Vector| $)) "\\spad{basis()} returns the fixed \\spad{R}-module basis."))) 
NIL 
NIL 
(-352 R UP) 
((|constructor| (NIL "A \\spadtype{FramedAlgebra} is a \\spadtype{FiniteRankAlgebra} together with a fixed \\spad{R}-module basis.")) (|regularRepresentation| (((|Matrix| |#1|) $) "\\spad{regularRepresentation(a)} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the fixed basis.")) (|discriminant| ((|#1|) "\\spad{discriminant()} = determinant(traceMatrix()).")) (|traceMatrix| (((|Matrix| |#1|)) "\\spad{traceMatrix()} is the \\spad{n}-by-\\spad{n} matrix ( \\spad{Tr(vi * vj)} ),{} where \\spad{v1},{} ...,{} vn are the elements of the fixed basis.")) (|convert| (($ (|Vector| |#1|)) "\\spad{convert([a1,..,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} vn are the elements of the fixed basis.") (((|Vector| |#1|) $) "\\spad{convert(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|represents| (($ (|Vector| |#1|)) "\\spad{represents([a1,..,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} vn are the elements of the fixed basis.")) (|coordinates| (((|Matrix| |#1|) (|Vector| $)) "\\spad{coordinates([v1,...,vm])} returns the coordinates of the \\spad{vi}'s with to the fixed basis. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.") (((|Vector| |#1|) $) "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|basis| (((|Vector| $)) "\\spad{basis()} returns the fixed \\spad{R}-module basis."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-353 A S) 
((|constructor| (NIL "\\indented{2}{A is fully retractable to \\spad{B} means that A is retractable to \\spad{B},{} and,{}} \\indented{2}{in addition,{} if \\spad{B} is retractable to the integers or rational} \\indented{2}{numbers then so is A.} \\indented{2}{In particular,{} what we are asserting is that there are no integers} \\indented{2}{(rationals) in A which don't retract into \\spad{B}.} Date Created: March 1990 Date Last Updated: 9 April 1991"))) 
NIL 
((|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) 
(-354 S) 
((|constructor| (NIL "\\indented{2}{A is fully retractable to \\spad{B} means that A is retractable to \\spad{B},{} and,{}} \\indented{2}{in addition,{} if \\spad{B} is retractable to the integers or rational} \\indented{2}{numbers then so is A.} \\indented{2}{In particular,{} what we are asserting is that there are no integers} \\indented{2}{(rationals) in A which don't retract into \\spad{B}.} Date Created: March 1990 Date Last Updated: 9 April 1991"))) 
NIL 
NIL 
(-355 R -3092 UP A) 
((|constructor| (NIL "Fractional ideals in a framed algebra.")) (|randomLC| ((|#4| (|NonNegativeInteger|) (|Vector| |#4|)) "\\spad{randomLC(n,x)} should be local but conditional.")) (|minimize| (($ $) "\\spad{minimize(I)} returns a reduced set of generators for \\spad{I}.")) (|denom| ((|#1| $) "\\spad{denom(1/d * (f1,...,fn))} returns \\spad{d}.")) (|numer| (((|Vector| |#4|) $) "\\spad{numer(1/d * (f1,...,fn))} = the vector \\spad{[f1,...,fn]}.")) (|norm| ((|#2| $) "\\spad{norm(I)} returns the norm of the ideal \\spad{I}.")) (|basis| (((|Vector| |#4|) $) "\\spad{basis((f1,...,fn))} returns the vector \\spad{[f1,...,fn]}.")) (|ideal| (($ (|Vector| |#4|)) "\\spad{ideal([f1,...,fn])} returns the ideal \\spad{(f1,...,fn)}."))) 
((-3991 . T)) 
NIL 
(-356 R1 F1 U1 A1 R2 F2 U2 A2) 
((|constructor| (NIL "\\indented{1}{Lifting of morphisms to fractional ideals.} Author: Manuel Bronstein Date Created: 1 Feb 1989 Date Last Updated: 27 Feb 1990 Keywords: ideal,{} algebra,{} module.")) (|map| (((|FractionalIdeal| |#5| |#6| |#7| |#8|) (|Mapping| |#5| |#1|) (|FractionalIdeal| |#1| |#2| |#3| |#4|)) "\\spad{map(f,i)} \\undocumented{}"))) 
NIL 
NIL 
(-357 R -3092 UP A |ibasis|) 
((|constructor| (NIL "Module representation of fractional ideals.")) (|module| (($ (|FractionalIdeal| |#1| |#2| |#3| |#4|)) "\\spad{module(I)} returns \\spad{I} viewed has a module over \\spad{R}.") (($ (|Vector| |#4|)) "\\spad{module([f1,...,fn])} = the module generated by \\spad{(f1,...,fn)} over \\spad{R}.")) (|norm| ((|#2| $) "\\spad{norm(f)} returns the norm of the module \\spad{f}.")) (|basis| (((|Vector| |#4|) $) "\\spad{basis((f1,...,fn))} = the vector \\spad{[f1,...,fn]}."))) 
NIL 
((|HasCategory| |#4| (|%list| (QUOTE -950) (|devaluate| |#2|)))) 
(-358 AR R AS S) 
((|constructor| (NIL "\\spad{FramedNonAssociativeAlgebraFunctions2} implements functions between two framed non associative algebra domains defined over different rings. The function map is used to coerce between algebras over different domains having the same structural constants.")) (|map| ((|#3| (|Mapping| |#4| |#2|) |#1|) "\\spad{map(f,u)} maps \\spad{f} onto the coordinates of \\spad{u} to get an element in \\spad{AS} via identification of the basis of \\spad{AR} as beginning part of the basis of \\spad{AS}."))) 
NIL 
NIL 
(-359 S R) 
((|constructor| (NIL "FramedNonAssociativeAlgebra(\\spad{R}) is a \\spadtype{FiniteRankNonAssociativeAlgebra} (\\spadignore{i.e.} a non associative algebra over \\spad{R} which is a free \\spad{R}-module of finite rank) over a commutative ring \\spad{R} together with a fixed \\spad{R}-module basis.")) (|apply| (($ (|Matrix| |#2|) $) "\\spad{apply(m,a)} defines a left operation of \\spad{n} by \\spad{n} matrices where \\spad{n} is the rank of the algebra in terms of matrix-vector multiplication,{} this is a substitute for a left module structure. Error: if shape of matrix doesn't fit.")) (|rightRankPolynomial| (((|SparseUnivariatePolynomial| (|Polynomial| |#2|))) "\\spad{rightRankPolynomial()} calculates the right minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.")) (|leftRankPolynomial| (((|SparseUnivariatePolynomial| (|Polynomial| |#2|))) "\\spad{leftRankPolynomial()} calculates the left minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.")) (|rightRegularRepresentation| (((|Matrix| |#2|) $) "\\spad{rightRegularRepresentation(a)} returns the matrix of the linear map defined by right multiplication by \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|leftRegularRepresentation| (((|Matrix| |#2|) $) "\\spad{leftRegularRepresentation(a)} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|rightTraceMatrix| (((|Matrix| |#2|)) "\\spad{rightTraceMatrix()} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis.")) (|leftTraceMatrix| (((|Matrix| |#2|)) "\\spad{leftTraceMatrix()} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by left trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis.")) (|rightDiscriminant| ((|#2|) "\\spad{rightDiscriminant()} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis. Note: the same as \\spad{determinant(rightTraceMatrix())}.")) (|leftDiscriminant| ((|#2|) "\\spad{leftDiscriminant()} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the left trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis. Note: the same as \\spad{determinant(leftTraceMatrix())}.")) (|convert| (($ (|Vector| |#2|)) "\\spad{convert([a1,...,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} \\spad{vn} are the elements of the fixed \\spad{R}-module basis.") (((|Vector| |#2|) $) "\\spad{convert(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|represents| (($ (|Vector| |#2|)) "\\spad{represents([a1,...,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} \\spad{vn} are the elements of the fixed \\spad{R}-module basis.")) (|conditionsForIdempotents| (((|List| (|Polynomial| |#2|))) "\\spad{conditionsForIdempotents()} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the fixed \\spad{R}-module basis.")) (|structuralConstants| (((|Vector| (|Matrix| |#2|))) "\\spad{structuralConstants()} calculates the structural constants \\spad{[(gammaijk) for k in 1..rank()]} defined by \\spad{vi * vj = gammaij1 * v1 + ... + gammaijn * vn},{} where \\spad{v1},{}...,{}\\spad{vn} is the fixed \\spad{R}-module basis.")) (|coordinates| (((|Matrix| |#2|) (|Vector| $)) "\\spad{coordinates([a1,...,am])} returns a matrix whose \\spad{i}-th row is formed by the coordinates of \\spad{ai} with respect to the fixed \\spad{R}-module basis.") (((|Vector| |#2|) $) "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|basis| (((|Vector| $)) "\\spad{basis()} returns the fixed \\spad{R}-module basis."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-312)))) 
(-360 R) 
((|constructor| (NIL "FramedNonAssociativeAlgebra(\\spad{R}) is a \\spadtype{FiniteRankNonAssociativeAlgebra} (\\spadignore{i.e.} a non associative algebra over \\spad{R} which is a free \\spad{R}-module of finite rank) over a commutative ring \\spad{R} together with a fixed \\spad{R}-module basis.")) (|apply| (($ (|Matrix| |#1|) $) "\\spad{apply(m,a)} defines a left operation of \\spad{n} by \\spad{n} matrices where \\spad{n} is the rank of the algebra in terms of matrix-vector multiplication,{} this is a substitute for a left module structure. Error: if shape of matrix doesn't fit.")) (|rightRankPolynomial| (((|SparseUnivariatePolynomial| (|Polynomial| |#1|))) "\\spad{rightRankPolynomial()} calculates the right minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.")) (|leftRankPolynomial| (((|SparseUnivariatePolynomial| (|Polynomial| |#1|))) "\\spad{leftRankPolynomial()} calculates the left minimal polynomial of the generic element in the algebra,{} defined by the same structural constants over the polynomial ring in symbolic coefficients with respect to the fixed basis.")) (|rightRegularRepresentation| (((|Matrix| |#1|) $) "\\spad{rightRegularRepresentation(a)} returns the matrix of the linear map defined by right multiplication by \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|leftRegularRepresentation| (((|Matrix| |#1|) $) "\\spad{leftRegularRepresentation(a)} returns the matrix of the linear map defined by left multiplication by \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|rightTraceMatrix| (((|Matrix| |#1|)) "\\spad{rightTraceMatrix()} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis.")) (|leftTraceMatrix| (((|Matrix| |#1|)) "\\spad{leftTraceMatrix()} is the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by left trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis.")) (|rightDiscriminant| ((|#1|) "\\spad{rightDiscriminant()} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the right trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis. Note: the same as \\spad{determinant(rightTraceMatrix())}.")) (|leftDiscriminant| ((|#1|) "\\spad{leftDiscriminant()} returns the determinant of the \\spad{n}-by-\\spad{n} matrix whose element at the \\spad{i}\\spad{-}th row and \\spad{j}\\spad{-}th column is given by the left trace of the product \\spad{vi*vj},{} where \\spad{v1},{}...,{}\\spad{vn} are the elements of the fixed \\spad{R}-module basis. Note: the same as \\spad{determinant(leftTraceMatrix())}.")) (|convert| (($ (|Vector| |#1|)) "\\spad{convert([a1,...,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} \\spad{vn} are the elements of the fixed \\spad{R}-module basis.") (((|Vector| |#1|) $) "\\spad{convert(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|represents| (($ (|Vector| |#1|)) "\\spad{represents([a1,...,an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} \\spad{vn} are the elements of the fixed \\spad{R}-module basis.")) (|conditionsForIdempotents| (((|List| (|Polynomial| |#1|))) "\\spad{conditionsForIdempotents()} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the fixed \\spad{R}-module basis.")) (|structuralConstants| (((|Vector| (|Matrix| |#1|))) "\\spad{structuralConstants()} calculates the structural constants \\spad{[(gammaijk) for k in 1..rank()]} defined by \\spad{vi * vj = gammaij1 * v1 + ... + gammaijn * vn},{} where \\spad{v1},{}...,{}\\spad{vn} is the fixed \\spad{R}-module basis.")) (|coordinates| (((|Matrix| |#1|) (|Vector| $)) "\\spad{coordinates([a1,...,am])} returns a matrix whose \\spad{i}-th row is formed by the coordinates of \\spad{ai} with respect to the fixed \\spad{R}-module basis.") (((|Vector| |#1|) $) "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{R}-module basis.")) (|basis| (((|Vector| $)) "\\spad{basis()} returns the fixed \\spad{R}-module basis."))) 
((-3991 |has| |#1| (-495)) (-3989 . T) (-3988 . T)) 
NIL 
(-361 R) 
((|constructor| (NIL "\\spadtype{FactoredFunctionUtilities} implements some utility functions for manipulating factored objects.")) (|mergeFactors| (((|Factored| |#1|) (|Factored| |#1|) (|Factored| |#1|)) "\\spad{mergeFactors(u,v)} is used when the factorizations of \\spadvar{\\spad{u}} and \\spadvar{\\spad{v}} are known to be disjoint,{} \\spadignore{e.g.} resulting from a content/primitive part split. Essentially,{} it creates a new factored object by multiplying the units together and appending the lists of factors.")) (|refine| (((|Factored| |#1|) (|Factored| |#1|) (|Mapping| (|Factored| |#1|) |#1|)) "\\spad{refine(u,fn)} is used to apply the function \\userfun{\\spad{fn}} to each factor of \\spadvar{\\spad{u}} and then build a new factored object from the results. For example,{} if \\spadvar{\\spad{u}} were created by calling \\spad{nilFactor(10,2)} then \\spad{refine(u,factor)} would create a factored object equal to that created by \\spad{factor(100)} or \\spad{primeFactor(2,2) * primeFactor(5,2)}."))) 
NIL 
NIL 
(-362 S R) 
((|constructor| (NIL "A space of formal functions with arguments in an arbitrary ordered set.")) (|univariate| (((|Fraction| (|SparseUnivariatePolynomial| $)) $ (|Kernel| $)) "\\spad{univariate(f, k)} returns \\spad{f} viewed as a univariate fraction in \\spad{k}.")) (/ (($ (|SparseMultivariatePolynomial| |#2| (|Kernel| $)) (|SparseMultivariatePolynomial| |#2| (|Kernel| $))) "\\spad{p1/p2} returns the quotient of \\spad{p1} and \\spad{p2} as an element of \\%.")) (|denominator| (($ $) "\\spad{denominator(f)} returns the denominator of \\spad{f} converted to \\%.")) (|denom| (((|SparseMultivariatePolynomial| |#2| (|Kernel| $)) $) "\\spad{denom(f)} returns the denominator of \\spad{f} viewed as a polynomial in the kernels over \\spad{R}.")) (|convert| (($ (|Factored| $)) "\\spad{convert(f1\\^e1 ... fm\\^em)} returns \\spad{(f1)\\^e1 ... (fm)\\^em} as an element of \\%,{} using formal kernels created using a \\spadfunFrom{paren}{ExpressionSpace}.")) (|isPower| (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|Integer|))) "failed") $) "\\spad{isPower(p)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0}.")) (|numerator| (($ $) "\\spad{numerator(f)} returns the numerator of \\spad{f} converted to \\%.")) (|numer| (((|SparseMultivariatePolynomial| |#2| (|Kernel| $)) $) "\\spad{numer(f)} returns the numerator of \\spad{f} viewed as a polynomial in the kernels over \\spad{R} if \\spad{R} is an integral domain. If not,{} then numer(\\spad{f}) = \\spad{f} viewed as a polynomial in the kernels over \\spad{R}.")) (|coerce| (($ (|Fraction| (|Polynomial| (|Fraction| |#2|)))) "\\spad{coerce(f)} returns \\spad{f} as an element of \\%.") (($ (|Polynomial| (|Fraction| |#2|))) "\\spad{coerce(p)} returns \\spad{p} as an element of \\%.") (($ (|Fraction| |#2|)) "\\spad{coerce(q)} returns \\spad{q} as an element of \\%.") (($ (|SparseMultivariatePolynomial| |#2| (|Kernel| $))) "\\spad{coerce(p)} returns \\spad{p} as an element of \\%.")) (|isMult| (((|Union| (|Record| (|:| |coef| (|Integer|)) (|:| |var| (|Kernel| $))) "failed") $) "\\spad{isMult(p)} returns \\spad{[n, x]} if \\spad{p = n * x} and \\spad{n <> 0}.")) (|isPlus| (((|Union| (|List| $) "failed") $) "\\spad{isPlus(p)} returns \\spad{[m1,...,mn]} if \\spad{p = m1 +...+ mn} and \\spad{n > 1}.")) (|isExpt| (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|))) "failed") $ (|Symbol|)) "\\spad{isExpt(p,f)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0} and \\spad{x = f(a)}.") (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|))) "failed") $ (|BasicOperator|)) "\\spad{isExpt(p,op)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0} and \\spad{x = op(a)}.") (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|))) "failed") $) "\\spad{isExpt(p)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0}.")) (|isTimes| (((|Union| (|List| $) "failed") $) "\\spad{isTimes(p)} returns \\spad{[a1,...,an]} if \\spad{p = a1*...*an} and \\spad{n > 1}.")) (** (($ $ (|NonNegativeInteger|)) "\\spad{x**n} returns \\spad{x} * \\spad{x} * \\spad{x} * ... * \\spad{x} (\\spad{n} times).")) (|eval| (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ $)) "\\spad{eval(x, s, n, f)} replaces every \\spad{s(a)**n} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.") (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ (|List| $))) "\\spad{eval(x, s, n, f)} replaces every \\spad{s(a1,...,am)**n} in \\spad{x} by \\spad{f(a1,...,am)} for any \\spad{a1},{}...,{}am.") (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|)) (|List| (|Mapping| $ (|List| $)))) "\\spad{eval(x, [s1,...,sm], [n1,...,nm], [f1,...,fm])} replaces every \\spad{si(a1,...,an)**ni} in \\spad{x} by \\spad{fi(a1,...,an)} for any \\spad{a1},{}...,{}am.") (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|)) (|List| (|Mapping| $ $))) "\\spad{eval(x, [s1,...,sm], [n1,...,nm], [f1,...,fm])} replaces every \\spad{si(a)**ni} in \\spad{x} by \\spad{fi(a)} for any \\spad{a}.") (($ $ (|List| (|BasicOperator|)) (|List| $) (|Symbol|)) "\\spad{eval(x, [s1,...,sm], [f1,...,fm], y)} replaces every \\spad{si(a)} in \\spad{x} by \\spad{fi(y)} with \\spad{y} replaced by \\spad{a} for any \\spad{a}.") (($ $ (|BasicOperator|) $ (|Symbol|)) "\\spad{eval(x, s, f, y)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(y)} with \\spad{y} replaced by \\spad{a} for any \\spad{a}.") (($ $) "\\spad{eval(f)} unquotes all the quoted operators in \\spad{f}.") (($ $ (|List| (|Symbol|))) "\\spad{eval(f, [foo1,...,foon])} unquotes all the \\spad{fooi}'s in \\spad{f}.") (($ $ (|Symbol|)) "\\spad{eval(f, foo)} unquotes all the foo's in \\spad{f}.")) (|applyQuote| (($ (|Symbol|) (|List| $)) "\\spad{applyQuote(foo, [x1,...,xn])} returns \\spad{'foo(x1,...,xn)}.") (($ (|Symbol|) $ $ $ $) "\\spad{applyQuote(foo, x, y, z, t)} returns \\spad{'foo(x,y,z,t)}.") (($ (|Symbol|) $ $ $) "\\spad{applyQuote(foo, x, y, z)} returns \\spad{'foo(x,y,z)}.") (($ (|Symbol|) $ $) "\\spad{applyQuote(foo, x, y)} returns \\spad{'foo(x,y)}.") (($ (|Symbol|) $) "\\spad{applyQuote(foo, x)} returns \\spad{'foo(x)}.")) (|variables| (((|List| (|Symbol|)) $) "\\spad{variables(f)} returns the list of all the variables of \\spad{f}.")) (|ground| ((|#2| $) "\\spad{ground(f)} returns \\spad{f} as an element of \\spad{R}. An error occurs if \\spad{f} is not an element of \\spad{R}.")) (|ground?| (((|Boolean|) $) "\\spad{ground?(f)} tests if \\spad{f} is an element of \\spad{R}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-412))) (|HasCategory| |#2| (QUOTE (-1025))) (|HasCategory| |#2| (QUOTE (-553 (-473))))) 
(-363 R) 
((|constructor| (NIL "A space of formal functions with arguments in an arbitrary ordered set.")) (|univariate| (((|Fraction| (|SparseUnivariatePolynomial| $)) $ (|Kernel| $)) "\\spad{univariate(f, k)} returns \\spad{f} viewed as a univariate fraction in \\spad{k}.")) (/ (($ (|SparseMultivariatePolynomial| |#1| (|Kernel| $)) (|SparseMultivariatePolynomial| |#1| (|Kernel| $))) "\\spad{p1/p2} returns the quotient of \\spad{p1} and \\spad{p2} as an element of \\%.")) (|denominator| (($ $) "\\spad{denominator(f)} returns the denominator of \\spad{f} converted to \\%.")) (|denom| (((|SparseMultivariatePolynomial| |#1| (|Kernel| $)) $) "\\spad{denom(f)} returns the denominator of \\spad{f} viewed as a polynomial in the kernels over \\spad{R}.")) (|convert| (($ (|Factored| $)) "\\spad{convert(f1\\^e1 ... fm\\^em)} returns \\spad{(f1)\\^e1 ... (fm)\\^em} as an element of \\%,{} using formal kernels created using a \\spadfunFrom{paren}{ExpressionSpace}.")) (|isPower| (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|Integer|))) "failed") $) "\\spad{isPower(p)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0}.")) (|numerator| (($ $) "\\spad{numerator(f)} returns the numerator of \\spad{f} converted to \\%.")) (|numer| (((|SparseMultivariatePolynomial| |#1| (|Kernel| $)) $) "\\spad{numer(f)} returns the numerator of \\spad{f} viewed as a polynomial in the kernels over \\spad{R} if \\spad{R} is an integral domain. If not,{} then numer(\\spad{f}) = \\spad{f} viewed as a polynomial in the kernels over \\spad{R}.")) (|coerce| (($ (|Fraction| (|Polynomial| (|Fraction| |#1|)))) "\\spad{coerce(f)} returns \\spad{f} as an element of \\%.") (($ (|Polynomial| (|Fraction| |#1|))) "\\spad{coerce(p)} returns \\spad{p} as an element of \\%.") (($ (|Fraction| |#1|)) "\\spad{coerce(q)} returns \\spad{q} as an element of \\%.") (($ (|SparseMultivariatePolynomial| |#1| (|Kernel| $))) "\\spad{coerce(p)} returns \\spad{p} as an element of \\%.")) (|isMult| (((|Union| (|Record| (|:| |coef| (|Integer|)) (|:| |var| (|Kernel| $))) "failed") $) "\\spad{isMult(p)} returns \\spad{[n, x]} if \\spad{p = n * x} and \\spad{n <> 0}.")) (|isPlus| (((|Union| (|List| $) "failed") $) "\\spad{isPlus(p)} returns \\spad{[m1,...,mn]} if \\spad{p = m1 +...+ mn} and \\spad{n > 1}.")) (|isExpt| (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|))) "failed") $ (|Symbol|)) "\\spad{isExpt(p,f)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0} and \\spad{x = f(a)}.") (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|))) "failed") $ (|BasicOperator|)) "\\spad{isExpt(p,op)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0} and \\spad{x = op(a)}.") (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|))) "failed") $) "\\spad{isExpt(p)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0}.")) (|isTimes| (((|Union| (|List| $) "failed") $) "\\spad{isTimes(p)} returns \\spad{[a1,...,an]} if \\spad{p = a1*...*an} and \\spad{n > 1}.")) (** (($ $ (|NonNegativeInteger|)) "\\spad{x**n} returns \\spad{x} * \\spad{x} * \\spad{x} * ... * \\spad{x} (\\spad{n} times).")) (|eval| (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ $)) "\\spad{eval(x, s, n, f)} replaces every \\spad{s(a)**n} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.") (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ (|List| $))) "\\spad{eval(x, s, n, f)} replaces every \\spad{s(a1,...,am)**n} in \\spad{x} by \\spad{f(a1,...,am)} for any \\spad{a1},{}...,{}am.") (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|)) (|List| (|Mapping| $ (|List| $)))) "\\spad{eval(x, [s1,...,sm], [n1,...,nm], [f1,...,fm])} replaces every \\spad{si(a1,...,an)**ni} in \\spad{x} by \\spad{fi(a1,...,an)} for any \\spad{a1},{}...,{}am.") (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|)) (|List| (|Mapping| $ $))) "\\spad{eval(x, [s1,...,sm], [n1,...,nm], [f1,...,fm])} replaces every \\spad{si(a)**ni} in \\spad{x} by \\spad{fi(a)} for any \\spad{a}.") (($ $ (|List| (|BasicOperator|)) (|List| $) (|Symbol|)) "\\spad{eval(x, [s1,...,sm], [f1,...,fm], y)} replaces every \\spad{si(a)} in \\spad{x} by \\spad{fi(y)} with \\spad{y} replaced by \\spad{a} for any \\spad{a}.") (($ $ (|BasicOperator|) $ (|Symbol|)) "\\spad{eval(x, s, f, y)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(y)} with \\spad{y} replaced by \\spad{a} for any \\spad{a}.") (($ $) "\\spad{eval(f)} unquotes all the quoted operators in \\spad{f}.") (($ $ (|List| (|Symbol|))) "\\spad{eval(f, [foo1,...,foon])} unquotes all the \\spad{fooi}'s in \\spad{f}.") (($ $ (|Symbol|)) "\\spad{eval(f, foo)} unquotes all the foo's in \\spad{f}.")) (|applyQuote| (($ (|Symbol|) (|List| $)) "\\spad{applyQuote(foo, [x1,...,xn])} returns \\spad{'foo(x1,...,xn)}.") (($ (|Symbol|) $ $ $ $) "\\spad{applyQuote(foo, x, y, z, t)} returns \\spad{'foo(x,y,z,t)}.") (($ (|Symbol|) $ $ $) "\\spad{applyQuote(foo, x, y, z)} returns \\spad{'foo(x,y,z)}.") (($ (|Symbol|) $ $) "\\spad{applyQuote(foo, x, y)} returns \\spad{'foo(x,y)}.") (($ (|Symbol|) $) "\\spad{applyQuote(foo, x)} returns \\spad{'foo(x)}.")) (|variables| (((|List| (|Symbol|)) $) "\\spad{variables(f)} returns the list of all the variables of \\spad{f}.")) (|ground| ((|#1| $) "\\spad{ground(f)} returns \\spad{f} as an element of \\spad{R}. An error occurs if \\spad{f} is not an element of \\spad{R}.")) (|ground?| (((|Boolean|) $) "\\spad{ground?(f)} tests if \\spad{f} is an element of \\spad{R}."))) 
((-3991 OR (|has| |#1| (-961)) (|has| |#1| (-412))) (-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) ((-3996 "*") |has| |#1| (-495)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-495)) (-3986 |has| |#1| (-495))) 
NIL 
(-364 R A S B) 
((|constructor| (NIL "This package allows a mapping \\spad{R} -> \\spad{S} to be lifted to a mapping from a function space over \\spad{R} to a function space over \\spad{S}.")) (|map| ((|#4| (|Mapping| |#3| |#1|) |#2|) "\\spad{map(f, a)} applies \\spad{f} to all the constants in \\spad{R} appearing in \\spad{a}."))) 
NIL 
NIL 
(-365 R FE |x| |cen|) 
((|constructor| (NIL "This package converts expressions in some function space to exponential expansions.")) (|localAbs| ((|#2| |#2|) "\\spad{localAbs(fcn)} = \\spad{abs(fcn)} or \\spad{sqrt(fcn**2)} depending on whether or not FE has a function \\spad{abs}. This should be a local function,{} but the compiler won't allow it.")) (|exprToXXP| (((|Union| (|:| |%expansion| (|ExponentialExpansion| |#1| |#2| |#3| |#4|)) (|:| |%problem| (|Record| (|:| |func| (|String|)) (|:| |prob| (|String|))))) |#2| (|Boolean|)) "\\spad{exprToXXP(fcn,posCheck?)} converts the expression \\spad{fcn} to an exponential expansion. If \\spad{posCheck?} is \\spad{true},{} log's of negative numbers are not allowed nor are \\spad{n}th roots of negative numbers with \\spad{n} even. If \\spad{posCheck?} is \\spad{false},{} these are allowed."))) 
NIL 
NIL 
(-366 R FE |Expon| UPS TRAN |x|) 
((|constructor| (NIL "This package converts expressions in some function space to power series in a variable \\spad{x} with coefficients in that function space. The function \\spadfun{exprToUPS} converts expressions to power series whose coefficients do not contain the variable \\spad{x}. The function \\spadfun{exprToGenUPS} converts functional expressions to power series whose coefficients may involve functions of \\spad{log(x)}.")) (|localAbs| ((|#2| |#2|) "\\spad{localAbs(fcn)} = \\spad{abs(fcn)} or \\spad{sqrt(fcn**2)} depending on whether or not FE has a function \\spad{abs}. This should be a local function,{} but the compiler won't allow it.")) (|exprToGenUPS| (((|Union| (|:| |%series| |#4|) (|:| |%problem| (|Record| (|:| |func| (|String|)) (|:| |prob| (|String|))))) |#2| (|Boolean|) (|String|)) "\\spad{exprToGenUPS(fcn,posCheck?,atanFlag)} converts the expression \\spad{fcn} to a generalized power series. If \\spad{posCheck?} is \\spad{true},{} log's of negative numbers are not allowed nor are \\spad{n}th roots of negative numbers with \\spad{n} even. If \\spad{posCheck?} is \\spad{false},{} these are allowed. \\spad{atanFlag} determines how the case \\spad{atan(f(x))},{} where \\spad{f(x)} has a pole,{} will be treated. The possible values of \\spad{atanFlag} are \\spad{\"complex\"},{} \\spad{\"real: two sides\"},{} \\spad{\"real: left side\"},{} \\spad{\"real: right side\"},{} and \\spad{\"just do it\"}. If \\spad{atanFlag} is \\spad{\"complex\"},{} then no series expansion will be computed because,{} viewed as a function of a complex variable,{} \\spad{atan(f(x))} has an essential singularity. Otherwise,{} the sign of the leading coefficient of the series expansion of \\spad{f(x)} determines the constant coefficient in the series expansion of \\spad{atan(f(x))}. If this sign cannot be determined,{} a series expansion is computed only when \\spad{atanFlag} is \\spad{\"just do it\"}. When the leading term in the series expansion of \\spad{f(x)} is of odd degree (or is a rational degree with odd numerator),{} then the constant coefficient in the series expansion of \\spad{atan(f(x))} for values to the left differs from that for values to the right. If \\spad{atanFlag} is \\spad{\"real: two sides\"},{} no series expansion will be computed. If \\spad{atanFlag} is \\spad{\"real: left side\"} the constant coefficient for values to the left will be used and if \\spad{atanFlag} \\spad{\"real: right side\"} the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series,{} we return a record containing the name of the function that caused the problem and a brief description of the problem. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a,{} the user should perform the substitution \\spad{x -> x + a} before calling this function.")) (|exprToUPS| (((|Union| (|:| |%series| |#4|) (|:| |%problem| (|Record| (|:| |func| (|String|)) (|:| |prob| (|String|))))) |#2| (|Boolean|) (|String|)) "\\spad{exprToUPS(fcn,posCheck?,atanFlag)} converts the expression \\spad{fcn} to a power series. If \\spad{posCheck?} is \\spad{true},{} log's of negative numbers are not allowed nor are \\spad{n}th roots of negative numbers with \\spad{n} even. If \\spad{posCheck?} is \\spad{false},{} these are allowed. \\spad{atanFlag} determines how the case \\spad{atan(f(x))},{} where \\spad{f(x)} has a pole,{} will be treated. The possible values of \\spad{atanFlag} are \\spad{\"complex\"},{} \\spad{\"real: two sides\"},{} \\spad{\"real: left side\"},{} \\spad{\"real: right side\"},{} and \\spad{\"just do it\"}. If \\spad{atanFlag} is \\spad{\"complex\"},{} then no series expansion will be computed because,{} viewed as a function of a complex variable,{} \\spad{atan(f(x))} has an essential singularity. Otherwise,{} the sign of the leading coefficient of the series expansion of \\spad{f(x)} determines the constant coefficient in the series expansion of \\spad{atan(f(x))}. If this sign cannot be determined,{} a series expansion is computed only when \\spad{atanFlag} is \\spad{\"just do it\"}. When the leading term in the series expansion of \\spad{f(x)} is of odd degree (or is a rational degree with odd numerator),{} then the constant coefficient in the series expansion of \\spad{atan(f(x))} for values to the left differs from that for values to the right. If \\spad{atanFlag} is \\spad{\"real: two sides\"},{} no series expansion will be computed. If \\spad{atanFlag} is \\spad{\"real: left side\"} the constant coefficient for values to the left will be used and if \\spad{atanFlag} \\spad{\"real: right side\"} the constant coefficient for values to the right will be used. If there is a problem in converting the function to a power series,{} a record containing the name of the function that caused the problem and a brief description of the problem is returned. When expanding the expression into a series it is assumed that the series is centered at 0. For a series centered at a,{} the user should perform the substitution \\spad{x -> x + a} before calling this function.")) (|integrate| (($ $) "\\spad{integrate(x)} returns the integral of \\spad{x} since we need to be able to integrate a power series")) (|differentiate| (($ $) "\\spad{differentiate(x)} returns the derivative of \\spad{x} since we need to be able to differentiate a power series"))) 
NIL 
NIL 
(-367 A S) 
((|constructor| (NIL "A finite-set aggregate models the notion of a finite set,{} that is,{} a collection of elements characterized by membership,{} but not by order or multiplicity. See \\spadtype{Set} for an example.")) (|min| ((|#2| $) "\\spad{min(u)} returns the smallest element of aggregate \\spad{u}.")) (|max| ((|#2| $) "\\spad{max(u)} returns the largest element of aggregate \\spad{u}.")) (|universe| (($) "\\spad{universe()}\\$\\spad{D} returns the universal set for finite set aggregate \\spad{D}.")) (|complement| (($ $) "\\spad{complement(u)} returns the complement of the set \\spad{u},{} \\spadignore{i.e.} the set of all values not in \\spad{u}.")) (|cardinality| (((|NonNegativeInteger|) $) "\\spad{cardinality(u)} returns the number of elements of \\spad{u}. Note: \\axiom{cardinality(\\spad{u}) = \\#u}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-319)))) 
(-368 S) 
((|constructor| (NIL "A finite-set aggregate models the notion of a finite set,{} that is,{} a collection of elements characterized by membership,{} but not by order or multiplicity. See \\spadtype{Set} for an example.")) (|min| ((|#1| $) "\\spad{min(u)} returns the smallest element of aggregate \\spad{u}.")) (|max| ((|#1| $) "\\spad{max(u)} returns the largest element of aggregate \\spad{u}.")) (|universe| (($) "\\spad{universe()}\\$\\spad{D} returns the universal set for finite set aggregate \\spad{D}.")) (|complement| (($ $) "\\spad{complement(u)} returns the complement of the set \\spad{u},{} \\spadignore{i.e.} the set of all values not in \\spad{u}.")) (|cardinality| (((|NonNegativeInteger|) $) "\\spad{cardinality(u)} returns the number of elements of \\spad{u}. Note: \\axiom{cardinality(\\spad{u}) = \\#u}."))) 
((-3994 . T) (-3984 . T) (-3995 . T)) 
NIL 
(-369 S A R B) 
((|constructor| (NIL "\\spad{FiniteSetAggregateFunctions2} provides functions involving two finite set aggregates where the underlying domains might be different. An example of this is to create a set of rational numbers by mapping a function across a set of integers,{} where the function divides each integer by 1000.")) (|scan| ((|#4| (|Mapping| |#3| |#1| |#3|) |#2| |#3|) "\\spad{scan(f,a,r)} successively applies \\spad{reduce(f,x,r)} to more and more leading sub-aggregates \\spad{x} of aggregate \\spad{a}. More precisely,{} if \\spad{a} is \\spad{[a1,a2,...]},{} then \\spad{scan(f,a,r)} returns \\spad {[reduce(f,[a1],r),reduce(f,[a1,a2],r),...]}.")) (|reduce| ((|#3| (|Mapping| |#3| |#1| |#3|) |#2| |#3|) "\\spad{reduce(f,a,r)} applies function \\spad{f} to each successive element of the aggregate \\spad{a} and an accumulant initialised to \\spad{r}. For example,{} \\spad{reduce(_+\\$Integer,[1,2,3],0)} does a \\spad{3+(2+(1+0))}. Note: third argument \\spad{r} may be regarded as an identity element for the function.")) (|map| ((|#4| (|Mapping| |#3| |#1|) |#2|) "\\spad{map(f,a)} applies function \\spad{f} to each member of aggregate \\spad{a},{} creating a new aggregate with a possibly different underlying domain."))) 
NIL 
NIL 
(-370 R -3092) 
((|constructor| (NIL "\\spadtype{FunctionSpaceComplexIntegration} provides functions for the indefinite integration of complex-valued functions.")) (|complexIntegrate| ((|#2| |#2| (|Symbol|)) "\\spad{complexIntegrate(f, x)} returns the integral of \\spad{f(x)dx} where \\spad{x} is viewed as a complex variable.")) (|internalIntegrate0| (((|IntegrationResult| |#2|) |#2| (|Symbol|)) "\\spad{internalIntegrate0 should} be a local function,{} but is conditional.")) (|internalIntegrate| (((|IntegrationResult| |#2|) |#2| (|Symbol|)) "\\spad{internalIntegrate(f, x)} returns the integral of \\spad{f(x)dx} where \\spad{x} is viewed as a complex variable."))) 
NIL 
NIL 
(-371 R E) 
((|constructor| (NIL "\\indented{1}{Author: James Davenport} Date Created: 17 April 1992 Date Last Updated: Basic Functions: Related Constructors: Also See: AMS Classifications: Keywords: References: Description:")) (|makeCos| (($ |#2| |#1|) "\\spad{makeCos(e,r)} makes a sin expression with given argument and coefficient")) (|makeSin| (($ |#2| |#1|) "\\spad{makeSin(e,r)} makes a sin expression with given argument and coefficient")) (|coerce| (($ (|FourierComponent| |#2|)) "\\spad{coerce(c)} converts sin/cos terms into Fourier Series") (($ |#1|) "\\spad{coerce(r)} converts coefficients into Fourier Series"))) 
((-3981 -12 (|has| |#1| (-6 -3981)) (|has| |#2| (-6 -3981))) (-3988 . T) (-3989 . T) (-3991 . T)) 
((-12 (|HasAttribute| |#1| (QUOTE -3981)) (|HasAttribute| |#2| (QUOTE -3981)))) 
(-372 R -3092) 
((|constructor| (NIL "\\spadtype{FunctionSpaceIntegration} provides functions for the indefinite integration of real-valued functions.")) (|integrate| (((|Union| |#2| (|List| |#2|)) |#2| (|Symbol|)) "\\spad{integrate(f, x)} returns the integral of \\spad{f(x)dx} where \\spad{x} is viewed as a real variable."))) 
NIL 
NIL 
(-373 R -3092) 
((|constructor| (NIL "Provides some special functions over an integral domain.")) (|iiabs| ((|#2| |#2|) "\\spad{iiabs(x)} should be local but conditional.")) (|iiGamma| ((|#2| |#2|) "\\spad{iiGamma(x)} should be local but conditional.")) (|airyBi| ((|#2| |#2|) "\\spad{airyBi(x)} returns the airybi function applied to \\spad{x}")) (|airyAi| ((|#2| |#2|) "\\spad{airyAi(x)} returns the airyai function applied to \\spad{x}")) (|besselK| ((|#2| |#2| |#2|) "\\spad{besselK(x,y)} returns the besselk function applied to \\spad{x} and \\spad{y}")) (|besselI| ((|#2| |#2| |#2|) "\\spad{besselI(x,y)} returns the besseli function applied to \\spad{x} and \\spad{y}")) (|besselY| ((|#2| |#2| |#2|) "\\spad{besselY(x,y)} returns the bessely function applied to \\spad{x} and \\spad{y}")) (|besselJ| ((|#2| |#2| |#2|) "\\spad{besselJ(x,y)} returns the besselj function applied to \\spad{x} and \\spad{y}")) (|polygamma| ((|#2| |#2| |#2|) "\\spad{polygamma(x,y)} returns the polygamma function applied to \\spad{x} and \\spad{y}")) (|digamma| ((|#2| |#2|) "\\spad{digamma(x)} returns the digamma function applied to \\spad{x}")) (|Beta| ((|#2| |#2| |#2|) "\\spad{Beta(x,y)} returns the beta function applied to \\spad{x} and \\spad{y}")) (|Gamma| ((|#2| |#2| |#2|) "\\spad{Gamma(a,x)} returns the incomplete Gamma function applied to a and \\spad{x}") ((|#2| |#2|) "\\spad{Gamma(f)} returns the formal Gamma function applied to \\spad{f}")) (|abs| ((|#2| |#2|) "\\spad{abs(f)} returns the absolute value operator applied to \\spad{f}")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(op)} returns a copy of \\spad{op} with the domain-dependent properties appropriate for \\spad{F}; error if \\spad{op} is not a special function operator")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(op)} is \\spad{true} if \\spad{op} is a special function operator."))) 
NIL 
NIL 
(-374 R -3092) 
((|constructor| (NIL "FunctionsSpacePrimitiveElement provides functions to compute primitive elements in functions spaces.")) (|primitiveElement| (((|Record| (|:| |primelt| |#2|) (|:| |pol1| (|SparseUnivariatePolynomial| |#2|)) (|:| |pol2| (|SparseUnivariatePolynomial| |#2|)) (|:| |prim| (|SparseUnivariatePolynomial| |#2|))) |#2| |#2|) "\\spad{primitiveElement(a1, a2)} returns \\spad{[a, q1, q2, q]} such that \\spad{k(a1, a2) = k(a)},{} \\spad{ai = qi(a)},{} and \\spad{q(a) = 0}. The minimal polynomial for \\spad{a2} may involve \\spad{a1},{} but the minimal polynomial for \\spad{a1} may not involve \\spad{a2}; This operations uses \\spadfun{resultant}.") (((|Record| (|:| |primelt| |#2|) (|:| |poly| (|List| (|SparseUnivariatePolynomial| |#2|))) (|:| |prim| (|SparseUnivariatePolynomial| |#2|))) (|List| |#2|)) "\\spad{primitiveElement([a1,...,an])} returns \\spad{[a, [q1,...,qn], q]} such that then \\spad{k(a1,...,an) = k(a)},{} \\spad{ai = qi(a)},{} and \\spad{q(a) = 0}. This operation uses the technique of \\spadglossSee{groebner bases}{Groebner basis}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-27)))) 
(-375 R -3092) 
((|constructor| (NIL "This package provides function which replaces transcendental kernels in a function space by random integers. The correspondence between the kernels and the integers is fixed between calls to new().")) (|newReduc| (((|Void|)) "\\spad{newReduc()} \\undocumented")) (|bringDown| (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|))) |#2| (|Kernel| |#2|)) "\\spad{bringDown(f,k)} \\undocumented") (((|Fraction| (|Integer|)) |#2|) "\\spad{bringDown(f)} \\undocumented"))) 
NIL 
NIL 
(-376) 
((|constructor| (NIL "Creates and manipulates objects which correspond to the basic FORTRAN data types: REAL,{} INTEGER,{} COMPLEX,{} LOGICAL and CHARACTER")) (= (((|Boolean|) $ $) "\\spad{x=y} tests for equality")) (|logical?| (((|Boolean|) $) "\\spad{logical?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type LOGICAL.")) (|character?| (((|Boolean|) $) "\\spad{character?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type CHARACTER.")) (|doubleComplex?| (((|Boolean|) $) "\\spad{doubleComplex?(t)} tests whether \\spad{t} is equivalent to the (non-standard) FORTRAN type DOUBLE COMPLEX.")) (|complex?| (((|Boolean|) $) "\\spad{complex?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type COMPLEX.")) (|integer?| (((|Boolean|) $) "\\spad{integer?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type INTEGER.")) (|double?| (((|Boolean|) $) "\\spad{double?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type DOUBLE PRECISION")) (|real?| (((|Boolean|) $) "\\spad{real?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type REAL.")) (|coerce| (((|SExpression|) $) "\\spad{coerce(x)} returns the \\spad{s}-expression associated with \\spad{x}") (((|Symbol|) $) "\\spad{coerce(x)} returns the symbol associated with \\spad{x}") (($ (|Symbol|)) "\\spad{coerce(s)} transforms the symbol \\spad{s} into an element of FortranScalarType provided \\spad{s} is one of real,{} complex,{}double precision,{} logical,{} integer,{} character,{} REAL,{} COMPLEX,{} LOGICAL,{} INTEGER,{} CHARACTER,{} DOUBLE PRECISION") (($ (|String|)) "\\spad{coerce(s)} transforms the string \\spad{s} into an element of FortranScalarType provided \\spad{s} is one of \"real\",{} \"double precision\",{} \"complex\",{} \"logical\",{} \"integer\",{} \"character\",{} \"REAL\",{} \"COMPLEX\",{} \"LOGICAL\",{} \"INTEGER\",{} \"CHARACTER\",{} \"DOUBLE PRECISION\""))) 
NIL 
NIL 
(-377 R -3092 UP) 
((|constructor| (NIL "\\indented{1}{Used internally by IR2F} Author: Manuel Bronstein Date Created: 12 May 1988 Date Last Updated: 22 September 1993 Keywords: function,{} space,{} polynomial,{} factoring")) (|anfactor| (((|Union| (|Factored| (|SparseUnivariatePolynomial| (|AlgebraicNumber|))) "failed") |#3|) "\\spad{anfactor(p)} tries to factor \\spad{p} over algebraic numbers,{} returning \"failed\" if it cannot")) (|UP2ifCan| (((|Union| (|:| |overq| (|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))) (|:| |overan| (|SparseUnivariatePolynomial| (|AlgebraicNumber|))) (|:| |failed| (|Boolean|))) |#3|) "\\spad{UP2ifCan(x)} should be local but conditional.")) (|qfactor| (((|Union| (|Factored| (|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))) "failed") |#3|) "\\spad{qfactor(p)} tries to factor \\spad{p} over fractions of integers,{} returning \"failed\" if it cannot")) (|ffactor| (((|Factored| |#3|) |#3|) "\\spad{ffactor(p)} tries to factor a univariate polynomial \\spad{p} over \\spad{F}"))) 
NIL 
((|HasCategory| |#2| (QUOTE (-950 (-48))))) 
(-378) 
((|constructor| (NIL "Creates and manipulates objects which correspond to FORTRAN data types,{} including array dimensions.")) (|fortranCharacter| (($) "\\spad{fortranCharacter()} returns CHARACTER,{} an element of FortranType")) (|fortranDoubleComplex| (($) "\\spad{fortranDoubleComplex()} returns DOUBLE COMPLEX,{} an element of FortranType")) (|fortranComplex| (($) "\\spad{fortranComplex()} returns COMPLEX,{} an element of FortranType")) (|fortranLogical| (($) "\\spad{fortranLogical()} returns LOGICAL,{} an element of FortranType")) (|fortranInteger| (($) "\\spad{fortranInteger()} returns INTEGER,{} an element of FortranType")) (|fortranDouble| (($) "\\spad{fortranDouble()} returns DOUBLE PRECISION,{} an element of FortranType")) (|fortranReal| (($) "\\spad{fortranReal()} returns REAL,{} an element of FortranType")) (|construct| (($ (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1="void")) (|List| (|Polynomial| (|Integer|))) (|Boolean|)) "\\spad{construct(type,dims)} creates an element of FortranType") (($ (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)) (|List| (|Symbol|)) (|Boolean|)) "\\spad{construct(type,dims)} creates an element of FortranType")) (|external?| (((|Boolean|) $) "\\spad{external?(u)} returns \\spad{true} if \\spad{u} is declared to be EXTERNAL")) (|dimensionsOf| (((|List| (|Polynomial| (|Integer|))) $) "\\spad{dimensionsOf(t)} returns the dimensions of \\spad{t}")) (|scalarTypeOf| (((|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)) $) "\\spad{scalarTypeOf(t)} returns the FORTRAN data type of \\spad{t}")) (|coerce| (($ (|FortranScalarType|)) "\\spad{coerce(t)} creates an element from a scalar type"))) 
NIL 
NIL 
(-379 |f|) 
((|constructor| (NIL "This domain implements named functions")) (|name| (((|Symbol|) $) "\\spad{name(x)} returns the symbol"))) 
NIL 
NIL 
(-380) 
((|constructor| (NIL "This is the datatype for exported function descriptor. A function descriptor consists of: (1) a signature; (2) a predicate; and (3) a slot into the scope object.")) (|signature| (((|Signature|) $) "\\spad{signature(x)} returns the signature of function described by \\spad{x}."))) 
NIL 
NIL 
(-381 UP) 
((|constructor| (NIL "\\spadtype{GaloisGroupFactorizer} provides functions to factor resolvents.")) (|btwFact| (((|Record| (|:| |contp| (|Integer|)) (|:| |factors| (|List| (|Record| (|:| |irr| |#1|) (|:| |pow| (|Integer|)))))) |#1| (|Boolean|) (|Set| (|NonNegativeInteger|)) (|NonNegativeInteger|)) "\\spad{btwFact(p,sqf,pd,r)} returns the factorization of \\spad{p},{} the result is a Record such that \\spad{contp=}content \\spad{p},{} \\spad{factors=}List of irreducible factors of \\spad{p} with exponent. If \\spad{sqf=true} the polynomial is assumed to be square free (\\spadignore{i.e.} without repeated factors). \\spad{pd} is the \\spadtype{Set} of possible degrees. \\spad{r} is a lower bound for the number of factors of \\spad{p}. Please do not use this function in your code because its design may change.")) (|henselFact| (((|Record| (|:| |contp| (|Integer|)) (|:| |factors| (|List| (|Record| (|:| |irr| |#1|) (|:| |pow| (|Integer|)))))) |#1| (|Boolean|)) "\\spad{henselFact(p,sqf)} returns the factorization of \\spad{p},{} the result is a Record such that \\spad{contp=}content \\spad{p},{} \\spad{factors=}List of irreducible factors of \\spad{p} with exponent. If \\spad{sqf=true} the polynomial is assumed to be square free (\\spadignore{i.e.} without repeated factors).")) (|factorOfDegree| (((|Union| |#1| "failed") (|PositiveInteger|) |#1| (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|) (|Boolean|)) "\\spad{factorOfDegree(d,p,listOfDegrees,r,sqf)} returns a factor of \\spad{p} of degree \\spad{d} knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees},{} and that \\spad{p} has at least \\spad{r} factors. If \\spad{sqf=true} the polynomial is assumed to be square free (\\spadignore{i.e.} without repeated factors).") (((|Union| |#1| "failed") (|PositiveInteger|) |#1| (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) "\\spad{factorOfDegree(d,p,listOfDegrees,r)} returns a factor of \\spad{p} of degree \\spad{d} knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees},{} and that \\spad{p} has at least \\spad{r} factors.") (((|Union| |#1| "failed") (|PositiveInteger|) |#1| (|List| (|NonNegativeInteger|))) "\\spad{factorOfDegree(d,p,listOfDegrees)} returns a factor of \\spad{p} of degree \\spad{d} knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees}.") (((|Union| |#1| "failed") (|PositiveInteger|) |#1| (|NonNegativeInteger|)) "\\spad{factorOfDegree(d,p,r)} returns a factor of \\spad{p} of degree \\spad{d} knowing that \\spad{p} has at least \\spad{r} factors.") (((|Union| |#1| "failed") (|PositiveInteger|) |#1|) "\\spad{factorOfDegree(d,p)} returns a factor of \\spad{p} of degree \\spad{d}.")) (|factorSquareFree| (((|Factored| |#1|) |#1| (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{factorSquareFree(p,d,r)} factorizes the polynomial \\spad{p} using the single factor bound algorithm,{} knowing that \\spad{d} divides the degree of all factors of \\spad{p} and that \\spad{p} has at least \\spad{r} factors. \\spad{f} is supposed not having any repeated factor (this is not checked).") (((|Factored| |#1|) |#1| (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) "\\spad{factorSquareFree(p,listOfDegrees,r)} factorizes the polynomial \\spad{p} using the single factor bound algorithm,{} knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees} and that \\spad{p} has at least \\spad{r} factors. \\spad{f} is supposed not having any repeated factor (this is not checked).") (((|Factored| |#1|) |#1| (|List| (|NonNegativeInteger|))) "\\spad{factorSquareFree(p,listOfDegrees)} factorizes the polynomial \\spad{p} using the single factor bound algorithm and knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees}. \\spad{f} is supposed not having any repeated factor (this is not checked).") (((|Factored| |#1|) |#1| (|NonNegativeInteger|)) "\\spad{factorSquareFree(p,r)} factorizes the polynomial \\spad{p} using the single factor bound algorithm and knowing that \\spad{p} has at least \\spad{r} factors. \\spad{f} is supposed not having any repeated factor (this is not checked).") (((|Factored| |#1|) |#1|) "\\spad{factorSquareFree(p)} returns the factorization of \\spad{p} which is supposed not having any repeated factor (this is not checked).")) (|factor| (((|Factored| |#1|) |#1| (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{factor(p,d,r)} factorizes the polynomial \\spad{p} using the single factor bound algorithm,{} knowing that \\spad{d} divides the degree of all factors of \\spad{p} and that \\spad{p} has at least \\spad{r} factors.") (((|Factored| |#1|) |#1| (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) "\\spad{factor(p,listOfDegrees,r)} factorizes the polynomial \\spad{p} using the single factor bound algorithm,{} knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees} and that \\spad{p} has at least \\spad{r} factors.") (((|Factored| |#1|) |#1| (|List| (|NonNegativeInteger|))) "\\spad{factor(p,listOfDegrees)} factorizes the polynomial \\spad{p} using the single factor bound algorithm and knowing that \\spad{p} has for possible splitting of its degree \\spad{listOfDegrees}.") (((|Factored| |#1|) |#1| (|NonNegativeInteger|)) "\\spad{factor(p,r)} factorizes the polynomial \\spad{p} using the single factor bound algorithm and knowing that \\spad{p} has at least \\spad{r} factors.") (((|Factored| |#1|) |#1|) "\\spad{factor(p)} returns the factorization of \\spad{p} over the integers.")) (|tryFunctionalDecomposition| (((|Boolean|) (|Boolean|)) "\\spad{tryFunctionalDecomposition(b)} chooses whether factorizers have to look for functional decomposition of polynomials (\\spad{true}) or not (\\spad{false}). Returns the previous value.")) (|tryFunctionalDecomposition?| (((|Boolean|)) "\\spad{tryFunctionalDecomposition?()} returns \\spad{true} if factorizers try functional decomposition of polynomials before factoring them.")) (|eisensteinIrreducible?| (((|Boolean|) |#1|) "\\spad{eisensteinIrreducible?(p)} returns \\spad{true} if \\spad{p} can be shown to be irreducible by Eisenstein's criterion,{} \\spad{false} is inconclusive.")) (|useEisensteinCriterion| (((|Boolean|) (|Boolean|)) "\\spad{useEisensteinCriterion(b)} chooses whether factorizers check Eisenstein's criterion before factoring: \\spad{true} for using it,{} \\spad{false} else. Returns the previous value.")) (|useEisensteinCriterion?| (((|Boolean|)) "\\spad{useEisensteinCriterion?()} returns \\spad{true} if factorizers check Eisenstein's criterion before factoring.")) (|useSingleFactorBound| (((|Boolean|) (|Boolean|)) "\\spad{useSingleFactorBound(b)} chooses the algorithm to be used by the factorizers: \\spad{true} for algorithm with single factor bound,{} \\spad{false} for algorithm with overall bound. Returns the previous value.")) (|useSingleFactorBound?| (((|Boolean|)) "\\spad{useSingleFactorBound?()} returns \\spad{true} if algorithm with single factor bound is used for factorization,{} \\spad{false} for algorithm with overall bound.")) (|modularFactor| (((|Record| (|:| |prime| (|Integer|)) (|:| |factors| (|List| |#1|))) |#1|) "\\spad{modularFactor(f)} chooses a \"good\" prime and returns the factorization of \\spad{f} modulo this prime in a form that may be used by \\spadfunFrom{completeHensel}{GeneralHenselPackage}. If prime is zero it means that \\spad{f} has been proved to be irreducible over the integers or that \\spad{f} is a unit (\\spadignore{i.e.} 1 or \\spad{-1}). \\spad{f} shall be primitive (\\spadignore{i.e.} content(\\spad{p})\\spad{=1}) and square free (\\spadignore{i.e.} without repeated factors).")) (|numberOfFactors| (((|NonNegativeInteger|) (|List| (|Record| (|:| |factor| |#1|) (|:| |degree| (|Integer|))))) "\\spad{numberOfFactors(ddfactorization)} returns the number of factors of the polynomial \\spad{f} modulo \\spad{p} where \\spad{ddfactorization} is the distinct degree factorization of \\spad{f} computed by \\spadfunFrom{ddFact}{ModularDistinctDegreeFactorizer} for some prime \\spad{p}.")) (|stopMusserTrials| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{stopMusserTrials(n)} sets to \\spad{n} the bound on the number of factors for which \\spadfun{modularFactor} stops to look for an other prime. You will have to remember that the step of recombining the extraneous factors may take up to \\spad{2**n} trials. Returns the previous value.") (((|PositiveInteger|)) "\\spad{stopMusserTrials()} returns the bound on the number of factors for which \\spadfun{modularFactor} stops to look for an other prime. You will have to remember that the step of recombining the extraneous factors may take up to \\spad{2**stopMusserTrials()} trials.")) (|musserTrials| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{musserTrials(n)} sets to \\spad{n} the number of primes to be tried in \\spadfun{modularFactor} and returns the previous value.") (((|PositiveInteger|)) "\\spad{musserTrials()} returns the number of primes that are tried in \\spadfun{modularFactor}.")) (|degreePartition| (((|Multiset| (|NonNegativeInteger|)) (|List| (|Record| (|:| |factor| |#1|) (|:| |degree| (|Integer|))))) "\\spad{degreePartition(ddfactorization)} returns the degree partition of the polynomial \\spad{f} modulo \\spad{p} where \\spad{ddfactorization} is the distinct degree factorization of \\spad{f} computed by \\spadfunFrom{ddFact}{ModularDistinctDegreeFactorizer} for some prime \\spad{p}.")) (|makeFR| (((|Factored| |#1|) (|Record| (|:| |contp| (|Integer|)) (|:| |factors| (|List| (|Record| (|:| |irr| |#1|) (|:| |pow| (|Integer|))))))) "\\spad{makeFR(flist)} turns the final factorization of henselFact into a \\spadtype{Factored} object."))) 
NIL 
NIL 
(-382 R UP -3092) 
((|constructor| (NIL "\\spadtype{GaloisGroupFactorizationUtilities} provides functions that will be used by the factorizer.")) (|length| ((|#3| |#2|) "\\spad{length(p)} returns the sum of the absolute values of the coefficients of the polynomial \\spad{p}.")) (|height| ((|#3| |#2|) "\\spad{height(p)} returns the maximal absolute value of the coefficients of the polynomial \\spad{p}.")) (|infinityNorm| ((|#3| |#2|) "\\spad{infinityNorm(f)} returns the maximal absolute value of the coefficients of the polynomial \\spad{f}.")) (|quadraticNorm| ((|#3| |#2|) "\\spad{quadraticNorm(f)} returns the \\spad{l2} norm of the polynomial \\spad{f}.")) (|norm| ((|#3| |#2| (|PositiveInteger|)) "\\spad{norm(f,p)} returns the lp norm of the polynomial \\spad{f}.")) (|singleFactorBound| (((|Integer|) |#2|) "\\spad{singleFactorBound(p,r)} returns a bound on the infinite norm of the factor of \\spad{p} with smallest Bombieri's norm. \\spad{p} shall be of degree higher or equal to 2.") (((|Integer|) |#2| (|NonNegativeInteger|)) "\\spad{singleFactorBound(p,r)} returns a bound on the infinite norm of the factor of \\spad{p} with smallest Bombieri's norm. \\spad{r} is a lower bound for the number of factors of \\spad{p}. \\spad{p} shall be of degree higher or equal to 2.")) (|rootBound| (((|Integer|) |#2|) "\\spad{rootBound(p)} returns a bound on the largest norm of the complex roots of \\spad{p}.")) (|bombieriNorm| ((|#3| |#2| (|PositiveInteger|)) "\\spad{bombieriNorm(p,n)} returns the \\spad{n}th Bombieri's norm of \\spad{p}.") ((|#3| |#2|) "\\spad{bombieriNorm(p)} returns quadratic Bombieri's norm of \\spad{p}.")) (|beauzamyBound| (((|Integer|) |#2|) "\\spad{beauzamyBound(p)} returns a bound on the larger coefficient of any factor of \\spad{p}."))) 
NIL 
NIL 
(-383 R UP) 
((|constructor| (NIL "\\spadtype{GaloisGroupPolynomialUtilities} provides useful functions for univariate polynomials which should be added to \\spadtype{UnivariatePolynomialCategory} or to \\spadtype{Factored} (July 1994).")) (|factorsOfDegree| (((|List| |#2|) (|PositiveInteger|) (|Factored| |#2|)) "\\spad{factorsOfDegree(d,f)} returns the factors of degree \\spad{d} of the factored polynomial \\spad{f}.")) (|factorOfDegree| ((|#2| (|PositiveInteger|) (|Factored| |#2|)) "\\spad{factorOfDegree(d,f)} returns a factor of degree \\spad{d} of the factored polynomial \\spad{f}. Such a factor shall exist.")) (|degreePartition| (((|Multiset| (|NonNegativeInteger|)) (|Factored| |#2|)) "\\spad{degreePartition(f)} returns the degree partition (\\spadignore{i.e.} the multiset of the degrees of the irreducible factors) of the polynomial \\spad{f}.")) (|shiftRoots| ((|#2| |#2| |#1|) "\\spad{shiftRoots(p,c)} returns the polynomial which has for roots \\spad{c} added to the roots of \\spad{p}.")) (|scaleRoots| ((|#2| |#2| |#1|) "\\spad{scaleRoots(p,c)} returns the polynomial which has \\spad{c} times the roots of \\spad{p}.")) (|reverse| ((|#2| |#2|) "\\spad{reverse(p)} returns the reverse polynomial of \\spad{p}.")) (|unvectorise| ((|#2| (|Vector| |#1|)) "\\spad{unvectorise(v)} returns the polynomial which has for coefficients the entries of \\spad{v} in the increasing order.")) (|monic?| (((|Boolean|) |#2|) "\\spad{monic?(p)} tests if \\spad{p} is monic (\\spadignore{i.e.} leading coefficient equal to 1)."))) 
NIL 
NIL 
(-384 R) 
((|constructor| (NIL "\\spadtype{GaloisGroupUtilities} provides several useful functions.")) (|safetyMargin| (((|NonNegativeInteger|)) "\\spad{safetyMargin()} returns the number of low weight digits we do not trust in the floating point representation (used by \\spadfun{safeCeiling}).") (((|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{safetyMargin(n)} sets to \\spad{n} the number of low weight digits we do not trust in the floating point representation and returns the previous value (for use by \\spadfun{safeCeiling}).")) (|safeFloor| (((|Integer|) |#1|) "\\spad{safeFloor(x)} returns the integer which is lower or equal to the largest integer which has the same floating point number representation.")) (|safeCeiling| (((|Integer|) |#1|) "\\spad{safeCeiling(x)} returns the integer which is greater than any integer with the same floating point number representation.")) (|fillPascalTriangle| (((|Void|)) "\\spad{fillPascalTriangle()} fills the stored table.")) (|sizePascalTriangle| (((|NonNegativeInteger|)) "\\spad{sizePascalTriangle()} returns the number of entries currently stored in the table.")) (|rangePascalTriangle| (((|NonNegativeInteger|)) "\\spad{rangePascalTriangle()} returns the maximal number of lines stored.") (((|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{rangePascalTriangle(n)} sets the maximal number of lines which are stored and returns the previous value.")) (|pascalTriangle| ((|#1| (|NonNegativeInteger|) (|Integer|)) "\\spad{pascalTriangle(n,r)} returns the binomial coefficient \\spad{C(n,r)=n!/(r! (n-r)!)} and stores it in a table to prevent recomputation."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-346)))) 
(-385) 
((|constructor| (NIL "Package for the factorization of complex or gaussian integers.")) (|prime?| (((|Boolean|) (|Complex| (|Integer|))) "\\spad{prime?(zi)} tests if the complex integer \\spad{zi} is prime.")) (|sumSquares| (((|List| (|Integer|)) (|Integer|)) "\\spad{sumSquares(p)} construct \\spad{a} and \\spad{b} such that \\spad{a**2+b**2} is equal to the integer prime \\spad{p},{} and otherwise returns an error. It will succeed if the prime number \\spad{p} is 2 or congruent to 1 mod 4.")) (|factor| (((|Factored| (|Complex| (|Integer|))) (|Complex| (|Integer|))) "\\spad{factor(zi)} produces the complete factorization of the complex integer \\spad{zi}."))) 
NIL 
NIL 
(-386 |Dom| |Expon| |VarSet| |Dpol|) 
((|constructor| (NIL "\\spadtype{GroebnerPackage} computes groebner bases for polynomial ideals. The basic computation provides a distinguished set of generators for polynomial ideals over fields. This basis allows an easy test for membership: the operation \\spadfun{normalForm} returns zero on ideal members. When the provided coefficient domain,{} Dom,{} is not a field,{} the result is equivalent to considering the extended ideal with \\spadtype{Fraction(Dom)} as coefficients,{} but considerably more efficient since all calculations are performed in Dom. Additional argument \"info\" and \"redcrit\" can be given to provide incremental information during computation. Argument \"info\" produces a computational summary for each \\spad{s}-polynomial. Argument \"redcrit\" prints out the reduced critical pairs. The term ordering is determined by the polynomial type used. Suggested types include \\spadtype{DistributedMultivariatePolynomial},{} \\spadtype{HomogeneousDistributedMultivariatePolynomial},{} \\spadtype{GeneralDistributedMultivariatePolynomial}.")) (|normalForm| ((|#4| |#4| (|List| |#4|)) "\\spad{normalForm(poly,gb)} reduces the polynomial \\spad{poly} modulo the precomputed groebner basis \\spad{gb} giving a canonical representative of the residue class.")) (|groebner| (((|List| |#4|) (|List| |#4|) (|String|) (|String|)) "\\spad{groebner(lp, \"info\", \"redcrit\")} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp},{} displaying both a summary of the critical pairs considered (\\spad{\"info\"}) and the result of reducing each critical pair (\"redcrit\"). If the second or third arguments have any other string value,{} the indicated information is suppressed.") (((|List| |#4|) (|List| |#4|) (|String|)) "\\spad{groebner(lp, infoflag)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp}. Argument infoflag is used to get information on the computation. If infoflag is \"info\",{} then summary information is displayed for each \\spad{s}-polynomial generated. If infoflag is \"redcrit\",{} the reduced critical pairs are displayed. If infoflag is any other string,{} no information is printed during computation.") (((|List| |#4|) (|List| |#4|)) "\\spad{groebner(lp)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312)))) 
(-387 |Dom| |Expon| |VarSet| |Dpol|) 
((|constructor| (NIL "\\spadtype{EuclideanGroebnerBasisPackage} computes groebner bases for polynomial ideals over euclidean domains. The basic computation provides a distinguished set of generators for these ideals. This basis allows an easy test for membership: the operation \\spadfun{euclideanNormalForm} returns zero on ideal members. The string \"info\" and \"redcrit\" can be given as additional args to provide incremental information during the computation. If \"info\" is given,{} \\indented{1}{a computational summary is given for each \\spad{s}-polynomial. If \"redcrit\"} is given,{} the reduced critical pairs are printed. The term ordering is determined by the polynomial type used. Suggested types include \\spadtype{DistributedMultivariatePolynomial},{} \\spadtype{HomogeneousDistributedMultivariatePolynomial},{} \\spadtype{GeneralDistributedMultivariatePolynomial}.")) (|euclideanGroebner| (((|List| |#4|) (|List| |#4|) (|String|) (|String|)) "\\spad{euclideanGroebner(lp, \"info\", \"redcrit\")} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp}. If the second argument is \\spad{\"info\"},{} a summary is given of the critical pairs. If the third argument is \"redcrit\",{} critical pairs are printed.") (((|List| |#4|) (|List| |#4|) (|String|)) "\\spad{euclideanGroebner(lp, infoflag)} computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \\spad{lp}. During computation,{} additional information is printed out if infoflag is given as either \"info\" (for summary information) or \"redcrit\" (for reduced critical pairs)") (((|List| |#4|) (|List| |#4|)) "\\spad{euclideanGroebner(lp)} computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \\spad{lp}.")) (|euclideanNormalForm| ((|#4| |#4| (|List| |#4|)) "\\spad{euclideanNormalForm(poly,gb)} reduces the polynomial \\spad{poly} modulo the precomputed groebner basis \\spad{gb} giving a canonical representative of the residue class."))) 
NIL 
NIL 
(-388 |Dom| |Expon| |VarSet| |Dpol|) 
((|constructor| (NIL "\\spadtype{GroebnerFactorizationPackage} provides the function groebnerFactor\" which uses the factorization routines of \\Language{} to factor each polynomial under consideration while doing the groebner basis algorithm. Then it writes the ideal as an intersection of ideals determined by the irreducible factors. Note that the whole ring may occur as well as other redundancies. We also use the fact,{} that from the second factor on we can assume that the preceding factors are not equal to 0 and we divide all polynomials under considerations by the elements of this list of \"nonZeroRestrictions\". The result is a list of groebner bases,{} whose union of solutions of the corresponding systems of equations is the solution of the system of equation corresponding to the input list. The term ordering is determined by the polynomial type used. Suggested types include \\spadtype{DistributedMultivariatePolynomial},{} \\spadtype{HomogeneousDistributedMultivariatePolynomial},{} \\spadtype{GeneralDistributedMultivariatePolynomial}.")) (|groebnerFactorize| (((|List| (|List| |#4|)) (|List| |#4|) (|Boolean|)) "\\spad{groebnerFactorize(listOfPolys, info)} returns a list of groebner bases. The union of their solutions is the solution of the system of equations given by {\\em listOfPolys}. At each stage the polynomial \\spad{p} under consideration (either from the given basis or obtained from a reduction of the next \\spad{S}-polynomial) is factorized. For each irreducible factors of \\spad{p},{} a new {\\em createGroebnerBasis} is started doing the usual updates with the factor in place of \\spad{p}. If {\\em info} is \\spad{true},{} information is printed about partial results.") (((|List| (|List| |#4|)) (|List| |#4|)) "\\spad{groebnerFactorize(listOfPolys)} returns a list of groebner bases. The union of their solutions is the solution of the system of equations given by {\\em listOfPolys}. At each stage the polynomial \\spad{p} under consideration (either from the given basis or obtained from a reduction of the next \\spad{S}-polynomial) is factorized. For each irreducible factors of \\spad{p},{} a new {\\em createGroebnerBasis} is started doing the usual updates with the factor in place of \\spad{p}.") (((|List| (|List| |#4|)) (|List| |#4|) (|List| |#4|) (|Boolean|)) "\\spad{groebnerFactorize(listOfPolys, nonZeroRestrictions, info)} returns a list of groebner basis. The union of their solutions is the solution of the system of equations given by {\\em listOfPolys} under the restriction that the polynomials of {\\em nonZeroRestrictions} don't vanish. At each stage the polynomial \\spad{p} under consideration (either from the given basis or obtained from a reduction of the next \\spad{S}-polynomial) is factorized. For each irreducible factors of \\spad{p} a new {\\em createGroebnerBasis} is started doing the usual updates with the factor in place of \\spad{p}. If argument {\\em info} is \\spad{true},{} information is printed about partial results.") (((|List| (|List| |#4|)) (|List| |#4|) (|List| |#4|)) "\\spad{groebnerFactorize(listOfPolys, nonZeroRestrictions)} returns a list of groebner basis. The union of their solutions is the solution of the system of equations given by {\\em listOfPolys} under the restriction that the polynomials of {\\em nonZeroRestrictions} don't vanish. At each stage the polynomial \\spad{p} under consideration (either from the given basis or obtained from a reduction of the next \\spad{S}-polynomial) is factorized. For each irreducible factors of \\spad{p},{} a new {\\em createGroebnerBasis} is started doing the usual updates with the factor in place of \\spad{p}.")) (|factorGroebnerBasis| (((|List| (|List| |#4|)) (|List| |#4|) (|Boolean|)) "\\spad{factorGroebnerBasis(basis,info)} checks whether the \\spad{basis} contains reducible polynomials and uses these to split the \\spad{basis}. If argument {\\em info} is \\spad{true},{} information is printed about partial results.") (((|List| (|List| |#4|)) (|List| |#4|)) "\\spad{factorGroebnerBasis(basis)} checks whether the \\spad{basis} contains reducible polynomials and uses these to split the \\spad{basis}."))) 
NIL 
NIL 
(-389 |Dom| |Expon| |VarSet| |Dpol|) 
((|constructor| (NIL "\\indented{1}{Author:} Date Created: Date Last Updated: Keywords: Description This package provides low level tools for Groebner basis computations")) (|virtualDegree| (((|NonNegativeInteger|) |#4|) "\\spad{virtualDegree }\\undocumented")) (|makeCrit| (((|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)) (|Record| (|:| |totdeg| (|NonNegativeInteger|)) (|:| |pol| |#4|)) |#4| (|NonNegativeInteger|)) "\\spad{makeCrit }\\undocumented")) (|critpOrder| (((|Boolean|) (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)) (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) "\\spad{critpOrder }\\undocumented")) (|prinb| (((|Void|) (|Integer|)) "\\spad{prinb }\\undocumented")) (|prinpolINFO| (((|Void|) (|List| |#4|)) "\\spad{prinpolINFO }\\undocumented")) (|fprindINFO| (((|Integer|) (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)) |#4| |#4| (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{fprindINFO }\\undocumented")) (|prindINFO| (((|Integer|) (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)) |#4| |#4| (|Integer|) (|Integer|) (|Integer|)) "\\spad{prindINFO }\\undocumented")) (|prinshINFO| (((|Void|) |#4|) "\\spad{prinshINFO }\\undocumented")) (|lepol| (((|Integer|) |#4|) "\\spad{lepol }\\undocumented")) (|minGbasis| (((|List| |#4|) (|List| |#4|)) "\\spad{minGbasis }\\undocumented")) (|updatD| (((|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) (|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) (|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)))) "\\spad{updatD }\\undocumented")) (|sPol| ((|#4| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) "\\spad{sPol }\\undocumented")) (|updatF| (((|List| (|Record| (|:| |totdeg| (|NonNegativeInteger|)) (|:| |pol| |#4|))) |#4| (|NonNegativeInteger|) (|List| (|Record| (|:| |totdeg| (|NonNegativeInteger|)) (|:| |pol| |#4|)))) "\\spad{updatF }\\undocumented")) (|hMonic| ((|#4| |#4|) "\\spad{hMonic }\\undocumented")) (|redPo| (((|Record| (|:| |poly| |#4|) (|:| |mult| |#1|)) |#4| (|List| |#4|)) "\\spad{redPo }\\undocumented")) (|critMonD1| (((|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) |#2| (|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)))) "\\spad{critMonD1 }\\undocumented")) (|critMTonD1| (((|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) (|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)))) "\\spad{critMTonD1 }\\undocumented")) (|critBonD| (((|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) |#4| (|List| (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|)))) "\\spad{critBonD }\\undocumented")) (|critB| (((|Boolean|) |#2| |#2| |#2| |#2|) "\\spad{critB }\\undocumented")) (|critM| (((|Boolean|) |#2| |#2|) "\\spad{critM }\\undocumented")) (|critT| (((|Boolean|) (|Record| (|:| |lcmfij| |#2|) (|:| |totdeg| (|NonNegativeInteger|)) (|:| |poli| |#4|) (|:| |polj| |#4|))) "\\spad{critT }\\undocumented")) (|gbasis| (((|List| |#4|) (|List| |#4|) (|Integer|) (|Integer|)) "\\spad{gbasis }\\undocumented")) (|redPol| ((|#4| |#4| (|List| |#4|)) "\\spad{redPol }\\undocumented")) (|credPol| ((|#4| |#4| (|List| |#4|)) "\\spad{credPol }\\undocumented"))) 
NIL 
NIL 
(-390 S) 
((|constructor| (NIL "This category describes domains where \\spadfun{gcd} can be computed but where there is no guarantee of the existence of \\spadfun{factor} operation for factorisation into irreducibles. However,{} if such a \\spadfun{factor} operation exist,{} factorization will be unique up to order and units.")) (|lcm| (($ (|List| $)) "\\spad{lcm(l)} returns the least common multiple of the elements of the list \\spad{l}.") (($ $ $) "\\spad{lcm(x,y)} returns the least common multiple of \\spad{x} and \\spad{y}.")) (|gcd| (($ (|List| $)) "\\spad{gcd(l)} returns the common gcd of the elements in the list \\spad{l}.") (($ $ $) "\\spad{gcd(x,y)} returns the greatest common divisor of \\spad{x} and \\spad{y}."))) 
NIL 
NIL 
(-391) 
((|constructor| (NIL "This category describes domains where \\spadfun{gcd} can be computed but where there is no guarantee of the existence of \\spadfun{factor} operation for factorisation into irreducibles. However,{} if such a \\spadfun{factor} operation exist,{} factorization will be unique up to order and units.")) (|lcm| (($ (|List| $)) "\\spad{lcm(l)} returns the least common multiple of the elements of the list \\spad{l}.") (($ $ $) "\\spad{lcm(x,y)} returns the least common multiple of \\spad{x} and \\spad{y}.")) (|gcd| (($ (|List| $)) "\\spad{gcd(l)} returns the common gcd of the elements in the list \\spad{l}.") (($ $ $) "\\spad{gcd(x,y)} returns the greatest common divisor of \\spad{x} and \\spad{y}."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-392 R |n| |ls| |gamma|) 
((|constructor| (NIL "AlgebraGenericElementPackage allows you to create generic elements of an algebra,{} \\spadignore{i.e.} the scalars are extended to include symbolic coefficients")) (|conditionsForIdempotents| (((|List| (|Polynomial| |#1|))) "\\spad{conditionsForIdempotents()} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the fixed \\spad{R}-module basis") (((|List| (|Polynomial| |#1|)) (|Vector| $)) "\\spad{conditionsForIdempotents([v1,...,vn])} determines a complete list of polynomial equations for the coefficients of idempotents with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}")) (|genericRightDiscriminant| (((|Fraction| (|Polynomial| |#1|))) "\\spad{genericRightDiscriminant()} is the determinant of the generic left trace forms of all products of basis element,{} if the generic left trace form is associative,{} an algebra is separable if the generic left discriminant is invertible,{} if it is non-zero,{} there is some ring extension which makes the algebra separable")) (|genericRightTraceForm| (((|Fraction| (|Polynomial| |#1|)) $ $) "\\spad{genericRightTraceForm (a,b)} is defined to be \\spadfun{genericRightTrace (a*b)},{} this defines a symmetric bilinear form on the algebra")) (|genericLeftDiscriminant| (((|Fraction| (|Polynomial| |#1|))) "\\spad{genericLeftDiscriminant()} is the determinant of the generic left trace forms of all products of basis element,{} if the generic left trace form is associative,{} an algebra is separable if the generic left discriminant is invertible,{} if it is non-zero,{} there is some ring extension which makes the algebra separable")) (|genericLeftTraceForm| (((|Fraction| (|Polynomial| |#1|)) $ $) "\\spad{genericLeftTraceForm (a,b)} is defined to be \\spad{genericLeftTrace (a*b)},{} this defines a symmetric bilinear form on the algebra")) (|genericRightNorm| (((|Fraction| (|Polynomial| |#1|)) $) "\\spad{genericRightNorm(a)} substitutes the coefficients of \\spad{a} for the generic coefficients into the coefficient of the constant term in \\spadfun{rightRankPolynomial} and changes the sign if the degree of this polynomial is odd")) (|genericRightTrace| (((|Fraction| (|Polynomial| |#1|)) $) "\\spad{genericRightTrace(a)} substitutes the coefficients of \\spad{a} for the generic coefficients into the coefficient of the second highest term in \\spadfun{rightRankPolynomial} and changes the sign")) (|genericRightMinimalPolynomial| (((|SparseUnivariatePolynomial| (|Fraction| (|Polynomial| |#1|))) $) "\\spad{genericRightMinimalPolynomial(a)} substitutes the coefficients of \\spad{a} for the generic coefficients in \\spadfun{rightRankPolynomial}")) (|rightRankPolynomial| (((|SparseUnivariatePolynomial| (|Fraction| (|Polynomial| |#1|)))) "\\spad{rightRankPolynomial()} returns the right minimimal polynomial of the generic element")) (|genericLeftNorm| (((|Fraction| (|Polynomial| |#1|)) $) "\\spad{genericLeftNorm(a)} substitutes the coefficients of \\spad{a} for the generic coefficients into the coefficient of the constant term in \\spadfun{leftRankPolynomial} and changes the sign if the degree of this polynomial is odd. This is a form of degree \\spad{k}")) (|genericLeftTrace| (((|Fraction| (|Polynomial| |#1|)) $) "\\spad{genericLeftTrace(a)} substitutes the coefficients of \\spad{a} for the generic coefficients into the coefficient of the second highest term in \\spadfun{leftRankPolynomial} and changes the sign. \\indented{1}{This is a linear form}")) (|genericLeftMinimalPolynomial| (((|SparseUnivariatePolynomial| (|Fraction| (|Polynomial| |#1|))) $) "\\spad{genericLeftMinimalPolynomial(a)} substitutes the coefficients of {em a} for the generic coefficients in \\spad{leftRankPolynomial()}")) (|leftRankPolynomial| (((|SparseUnivariatePolynomial| (|Fraction| (|Polynomial| |#1|)))) "\\spad{leftRankPolynomial()} returns the left minimimal polynomial of the generic element")) (|generic| (($ (|Vector| (|Symbol|)) (|Vector| $)) "\\spad{generic(vs,ve)} returns a generic element,{} \\spadignore{i.e.} the linear combination of \\spad{ve} with the symbolic coefficients \\spad{vs} error,{} if the vector of symbols is shorter than the vector of elements") (($ (|Symbol|) (|Vector| $)) "\\spad{generic(s,v)} returns a generic element,{} \\spadignore{i.e.} the linear combination of \\spad{v} with the symbolic coefficients \\spad{s1,s2,..}") (($ (|Vector| $)) "\\spad{generic(ve)} returns a generic element,{} \\spadignore{i.e.} the linear combination of \\spad{ve} basis with the symbolic coefficients \\spad{\\%x1,\\%x2,..}") (($ (|Vector| (|Symbol|))) "\\spad{generic(vs)} returns a generic element,{} \\spadignore{i.e.} the linear combination of the fixed basis with the symbolic coefficients \\spad{vs}; error,{} if the vector of symbols is too short") (($ (|Symbol|)) "\\spad{generic(s)} returns a generic element,{} \\spadignore{i.e.} the linear combination of the fixed basis with the symbolic coefficients \\spad{s1,s2,..}") (($) "\\spad{generic()} returns a generic element,{} \\spadignore{i.e.} the linear combination of the fixed basis with the symbolic coefficients \\spad{\\%x1,\\%x2,..}")) (|rightUnits| (((|Union| (|Record| (|:| |particular| $) (|:| |basis| (|List| $))) "failed")) "\\spad{rightUnits()} returns the affine space of all right units of the algebra,{} or \\spad{\"failed\"} if there is none")) (|leftUnits| (((|Union| (|Record| (|:| |particular| $) (|:| |basis| (|List| $))) "failed")) "\\spad{leftUnits()} returns the affine space of all left units of the algebra,{} or \\spad{\"failed\"} if there is none")) (|coerce| (($ (|Vector| (|Fraction| (|Polynomial| |#1|)))) "\\spad{coerce(v)} assumes that it is called with a vector of length equal to the dimension of the algebra,{} then a linear combination with the basis element is formed"))) 
((-3991 |has| (-349 (-857 |#1|)) (-495)) (-3989 . T) (-3988 . T)) 
((|HasCategory| (-349 (-857 |#1|)) (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| (-349 (-857 |#1|)) (QUOTE (-495)))) 
(-393 |vl| R E) 
((|constructor| (NIL "\\indented{2}{This type supports distributed multivariate polynomials} whose variables are from a user specified list of symbols. The coefficient ring may be non commutative,{} but the variables are assumed to commute. The term ordering is specified by its third parameter. Suggested types which define term orderings include: \\spadtype{DirectProduct},{} \\spadtype{HomogeneousDirectProduct},{} \\spadtype{SplitHomogeneousDirectProduct} and finally \\spadtype{OrderedDirectProduct} which accepts an arbitrary user function to define a term ordering.")) (|reorder| (($ $ (|List| (|Integer|))) "\\spad{reorder(p, perm)} applies the permutation perm to the variables in a polynomial and returns the new correctly ordered polynomial"))) 
(((-3996 "*") |has| |#2| (-146)) (-3987 |has| |#2| (-495)) (-3992 |has| |#2| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-821))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-821)))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-495)))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-473))))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-312))) (|HasAttribute| |#2| (QUOTE -3992)) (|HasCategory| |#2| (QUOTE (-391))) (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#2| (QUOTE (-118))))) 
(-394 R BP) 
((|constructor| (NIL "\\indented{1}{Author : \\spad{P}.Gianni.} January 1990 The equation \\spad{Af+Bg=h} and its generalization to \\spad{n} polynomials is solved for solutions over the \\spad{R},{} euclidean domain. A table containing the solutions of \\spad{Af+Bg=x**k} is used. The operations are performed modulus a prime which are in principle big enough,{} but the solutions are tested and,{} in case of failure,{} a hensel lifting process is used to get to the right solutions. It will be used in the factorization of multivariate polynomials over finite field,{} with \\spad{R=F[x]}.")) (|testModulus| (((|Boolean|) |#1| (|List| |#2|)) "\\spad{testModulus(p,lp)} returns \\spad{true} if the the prime \\spad{p} is valid for the list of polynomials \\spad{lp},{} \\spadignore{i.e.} preserves the degree and they remain relatively prime.")) (|solveid| (((|Union| (|List| |#2|) "failed") |#2| |#1| (|Vector| (|List| |#2|))) "\\spad{solveid(h,table)} computes the coefficients of the extended euclidean algorithm for a list of polynomials whose tablePow is \\spad{table} and with right side \\spad{h}.")) (|tablePow| (((|Union| (|Vector| (|List| |#2|)) "failed") (|NonNegativeInteger|) |#1| (|List| |#2|)) "\\spad{tablePow(maxdeg,prime,lpol)} constructs the table with the coefficients of the Extended Euclidean Algorithm for \\spad{lpol}. Here the right side is \\spad{x**k},{} for \\spad{k} less or equal to \\spad{maxdeg}. The operation returns \"failed\" when the elements are not coprime modulo \\spad{prime}.")) (|compBound| (((|NonNegativeInteger|) |#2| (|List| |#2|)) "\\spad{compBound(p,lp)} computes a bound for the coefficients of the solution polynomials. Given a polynomial right hand side \\spad{p},{} and a list \\spad{lp} of left hand side polynomials. Exported because it depends on the valuation.")) (|reduction| ((|#2| |#2| |#1|) "\\spad{reduction(p,prime)} reduces the polynomial \\spad{p} modulo \\spad{prime} of \\spad{R}. Note: this function is exported only because it's conditional."))) 
NIL 
NIL 
(-395 OV E S R P) 
((|constructor| (NIL "\\indented{2}{This is the top level package for doing multivariate factorization} over basic domains like \\spadtype{Integer} or \\spadtype{Fraction Integer}.")) (|factor| (((|Factored| |#5|) |#5|) "\\spad{factor(p)} factors the multivariate polynomial \\spad{p} over its coefficient domain")) (|variable| (((|Union| $ "failed") (|Symbol|)) "\\spad{variable(s)} makes an element from symbol \\spad{s} or fails.")) (|convert| (((|Symbol|) $) "\\spad{convert(x)} converts \\spad{x} to a symbol"))) 
NIL 
NIL 
(-396 E OV R P) 
((|constructor| (NIL "This package provides operations for GCD computations on polynomials")) (|randomR| ((|#3|) "\\spad{randomR()} should be local but conditional")) (|gcdPolynomial| (((|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{gcdPolynomial(p,q)} returns the GCD of \\spad{p} and \\spad{q}"))) 
NIL 
NIL 
(-397 R) 
((|constructor| (NIL "\\indented{1}{Description} This package provides operations for the factorization of univariate polynomials with integer coefficients. The factorization is done by \"lifting\" the finite \"berlekamp's\" factorization")) (|factor| (((|Factored| (|SparseUnivariatePolynomial| |#1|)) (|SparseUnivariatePolynomial| |#1|)) "\\spad{factor(p)} returns the factorisation of \\spad{p}"))) 
NIL 
NIL 
(-398 R FE) 
((|constructor| (NIL "\\spadtype{GenerateUnivariatePowerSeries} provides functions that create power series from explicit formulas for their \\spad{n}th coefficient.")) (|series| (((|Any|) |#2| (|Symbol|) (|Equation| |#2|) (|UniversalSegment| (|Fraction| (|Integer|))) (|Fraction| (|Integer|))) "\\spad{series(a(n),n,x = a,r0..,r)} returns \\spad{sum(n = r0,r0 + r,r0 + 2*r..., a(n) * (x - a)**n)}; \\spad{series(a(n),n,x = a,r0..r1,r)} returns \\spad{sum(n = r0 + k*r while n <= r1, a(n) * (x - a)**n)}.") (((|Any|) (|Mapping| |#2| (|Fraction| (|Integer|))) (|Equation| |#2|) (|UniversalSegment| (|Fraction| (|Integer|))) (|Fraction| (|Integer|))) "\\spad{series(n +-> a(n),x = a,r0..,r)} returns \\spad{sum(n = r0,r0 + r,r0 + 2*r..., a(n) * (x - a)**n)}; \\spad{series(n +-> a(n),x = a,r0..r1,r)} returns \\spad{sum(n = r0 + k*r while n <= r1, a(n) * (x - a)**n)}.") (((|Any|) |#2| (|Symbol|) (|Equation| |#2|) (|UniversalSegment| (|Integer|))) "\\spad{series(a(n),n,x=a,n0..)} returns \\spad{sum(n = n0..,a(n) * (x - a)**n)}; \\spad{series(a(n),n,x=a,n0..n1)} returns \\spad{sum(n = n0..n1,a(n) * (x - a)**n)}.") (((|Any|) (|Mapping| |#2| (|Integer|)) (|Equation| |#2|) (|UniversalSegment| (|Integer|))) "\\spad{series(n +-> a(n),x = a,n0..)} returns \\spad{sum(n = n0..,a(n) * (x - a)**n)}; \\spad{series(n +-> a(n),x = a,n0..n1)} returns \\spad{sum(n = n0..n1,a(n) * (x - a)**n)}.") (((|Any|) |#2| (|Symbol|) (|Equation| |#2|)) "\\spad{series(a(n),n,x = a)} returns \\spad{sum(n = 0..,a(n)*(x-a)**n)}.") (((|Any|) (|Mapping| |#2| (|Integer|)) (|Equation| |#2|)) "\\spad{series(n +-> a(n),x = a)} returns \\spad{sum(n = 0..,a(n)*(x-a)**n)}.")) (|puiseux| (((|Any|) |#2| (|Symbol|) (|Equation| |#2|) (|UniversalSegment| (|Fraction| (|Integer|))) (|Fraction| (|Integer|))) "\\spad{puiseux(a(n),n,x = a,r0..,r)} returns \\spad{sum(n = r0,r0 + r,r0 + 2*r..., a(n) * (x - a)**n)}; \\spad{puiseux(a(n),n,x = a,r0..r1,r)} returns \\spad{sum(n = r0 + k*r while n <= r1, a(n) * (x - a)**n)}.") (((|Any|) (|Mapping| |#2| (|Fraction| (|Integer|))) (|Equation| |#2|) (|UniversalSegment| (|Fraction| (|Integer|))) (|Fraction| (|Integer|))) "\\spad{puiseux(n +-> a(n),x = a,r0..,r)} returns \\spad{sum(n = r0,r0 + r,r0 + 2*r..., a(n) * (x - a)**n)}; \\spad{puiseux(n +-> a(n),x = a,r0..r1,r)} returns \\spad{sum(n = r0 + k*r while n <= r1, a(n) * (x - a)**n)}.")) (|laurent| (((|Any|) |#2| (|Symbol|) (|Equation| |#2|) (|UniversalSegment| (|Integer|))) "\\spad{laurent(a(n),n,x=a,n0..)} returns \\spad{sum(n = n0..,a(n) * (x - a)**n)}; \\spad{laurent(a(n),n,x=a,n0..n1)} returns \\spad{sum(n = n0..n1,a(n) * (x - a)**n)}.") (((|Any|) (|Mapping| |#2| (|Integer|)) (|Equation| |#2|) (|UniversalSegment| (|Integer|))) "\\spad{laurent(n +-> a(n),x = a,n0..)} returns \\spad{sum(n = n0..,a(n) * (x - a)**n)}; \\spad{laurent(n +-> a(n),x = a,n0..n1)} returns \\spad{sum(n = n0..n1,a(n) * (x - a)**n)}.")) (|taylor| (((|Any|) |#2| (|Symbol|) (|Equation| |#2|) (|UniversalSegment| (|NonNegativeInteger|))) "\\spad{taylor(a(n),n,x = a,n0..)} returns \\spad{sum(n = n0..,a(n)*(x-a)**n)}; \\spad{taylor(a(n),n,x = a,n0..n1)} returns \\spad{sum(n = n0..,a(n)*(x-a)**n)}.") (((|Any|) (|Mapping| |#2| (|Integer|)) (|Equation| |#2|) (|UniversalSegment| (|NonNegativeInteger|))) "\\spad{taylor(n +-> a(n),x = a,n0..)} returns \\spad{sum(n=n0..,a(n)*(x-a)**n)}; \\spad{taylor(n +-> a(n),x = a,n0..n1)} returns \\spad{sum(n = n0..,a(n)*(x-a)**n)}.") (((|Any|) |#2| (|Symbol|) (|Equation| |#2|)) "\\spad{taylor(a(n),n,x = a)} returns \\spad{sum(n = 0..,a(n)*(x-a)**n)}.") (((|Any|) (|Mapping| |#2| (|Integer|)) (|Equation| |#2|)) "\\spad{taylor(n +-> a(n),x = a)} returns \\spad{sum(n = 0..,a(n)*(x-a)**n)}."))) 
NIL 
NIL 
(-399 RP TP) 
((|constructor| (NIL "\\indented{1}{Author : \\spad{P}.Gianni} General Hensel Lifting Used for Factorization of bivariate polynomials over a finite field.")) (|reduction| ((|#2| |#2| |#1|) "\\spad{reduction(u,pol)} computes the symmetric reduction of \\spad{u} mod \\spad{pol}")) (|completeHensel| (((|List| |#2|) |#2| (|List| |#2|) |#1| (|PositiveInteger|)) "\\spad{completeHensel(pol,lfact,prime,bound)} lifts \\spad{lfact},{} the factorization mod \\spad{prime} of \\spad{pol},{} to the factorization mod prime**k>bound. Factors are recombined on the way.")) (|HenselLift| (((|Record| (|:| |plist| (|List| |#2|)) (|:| |modulo| |#1|)) |#2| (|List| |#2|) |#1| (|PositiveInteger|)) "\\spad{HenselLift(pol,lfacts,prime,bound)} lifts \\spad{lfacts},{} that are the factors of \\spad{pol} mod \\spad{prime},{} to factors of \\spad{pol} mod prime**k > \\spad{bound}. No recombining is done ."))) 
NIL 
NIL 
(-400 |vl| R IS E |ff| P) 
((|constructor| (NIL "This package \\undocumented")) (* (($ |#6| $) "\\spad{p*x} \\undocumented")) (|multMonom| (($ |#2| |#4| $) "\\spad{multMonom(r,e,x)} \\undocumented")) (|build| (($ |#2| |#3| |#4|) "\\spad{build(r,i,e)} \\undocumented")) (|unitVector| (($ |#3|) "\\spad{unitVector(x)} \\undocumented")) (|monomial| (($ |#2| (|ModuleMonomial| |#3| |#4| |#5|)) "\\spad{monomial(r,x)} \\undocumented")) (|reductum| (($ $) "\\spad{reductum(x)} \\undocumented")) (|leadingIndex| ((|#3| $) "\\spad{leadingIndex(x)} \\undocumented")) (|leadingExponent| ((|#4| $) "\\spad{leadingExponent(x)} \\undocumented")) (|leadingMonomial| (((|ModuleMonomial| |#3| |#4| |#5|) $) "\\spad{leadingMonomial(x)} \\undocumented")) (|leadingCoefficient| ((|#2| $) "\\spad{leadingCoefficient(x)} \\undocumented"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-401 E V R P Q) 
((|constructor| (NIL "Gosper's summation algorithm.")) (|GospersMethod| (((|Union| |#5| "failed") |#5| |#2| (|Mapping| |#2|)) "\\spad{GospersMethod(b, n, new)} returns a rational function \\spad{rf(n)} such that \\spad{a(n) * rf(n)} is the indefinite sum of \\spad{a(n)} with respect to upward difference on \\spad{n},{} \\spadignore{i.e.} \\spad{a(n+1) * rf(n+1) - a(n) * rf(n) = a(n)},{} where \\spad{b(n) = a(n)/a(n-1)} is a rational function. Returns \"failed\" if no such rational function \\spad{rf(n)} exists. Note: \\spad{new} is a nullary function returning a new \\spad{V} every time. The condition on \\spad{a(n)} is that \\spad{a(n)/a(n-1)} is a rational function of \\spad{n}."))) 
NIL 
NIL 
(-402 R E |VarSet| P) 
((|constructor| (NIL "A domain for polynomial sets.")) (|convert| (($ (|List| |#4|)) "\\axiom{convert(lp)} returns the polynomial set whose members are the polynomials of \\axiom{lp}."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (|HasCategory| |#4| (QUOTE (-553 (-473)))) (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#4| (QUOTE (-552 (-772)))) (|HasCategory| |#4| (QUOTE (-72)))) 
(-403 S R E) 
((|constructor| (NIL "GradedAlgebra(\\spad{R},{}\\spad{E}) denotes ``E-graded \\spad{R}-algebra''. A graded algebra is a graded module together with a degree preserving \\spad{R}-linear map,{} called the {\\em product}. \\blankline The name ``product'' is written out in full so inner and outer products with the same mapping type can be distinguished by name.")) (|product| (($ $ $) "\\spad{product(a,b)} is the degree-preserving \\spad{R}-linear product: \\blankline \\indented{2}{\\spad{degree product(a,b) = degree a + degree b}} \\indented{2}{\\spad{product(a1+a2,b) = product(a1,b) + product(a2,b)}} \\indented{2}{\\spad{product(a,b1+b2) = product(a,b1) + product(a,b2)}} \\indented{2}{\\spad{product(r*a,b) = product(a,r*b) = r*product(a,b)}} \\indented{2}{\\spad{product(a,product(b,c)) = product(product(a,b),c)}}")) (|One| (($) "1 is the identity for \\spad{product}."))) 
NIL 
NIL 
(-404 R E) 
((|constructor| (NIL "GradedAlgebra(\\spad{R},{}\\spad{E}) denotes ``E-graded \\spad{R}-algebra''. A graded algebra is a graded module together with a degree preserving \\spad{R}-linear map,{} called the {\\em product}. \\blankline The name ``product'' is written out in full so inner and outer products with the same mapping type can be distinguished by name.")) (|product| (($ $ $) "\\spad{product(a,b)} is the degree-preserving \\spad{R}-linear product: \\blankline \\indented{2}{\\spad{degree product(a,b) = degree a + degree b}} \\indented{2}{\\spad{product(a1+a2,b) = product(a1,b) + product(a2,b)}} \\indented{2}{\\spad{product(a,b1+b2) = product(a,b1) + product(a,b2)}} \\indented{2}{\\spad{product(r*a,b) = product(a,r*b) = r*product(a,b)}} \\indented{2}{\\spad{product(a,product(b,c)) = product(product(a,b),c)}}")) (|One| (($) "1 is the identity for \\spad{product}."))) 
NIL 
NIL 
(-405) 
((|constructor| (NIL "GrayCode provides a function for efficiently running through all subsets of a finite set,{} only changing one element by another one.")) (|firstSubsetGray| (((|Vector| (|Vector| (|Integer|))) (|PositiveInteger|)) "\\spad{firstSubsetGray(n)} creates the first vector {\\em ww} to start a loop using {\\em nextSubsetGray(ww,n)}")) (|nextSubsetGray| (((|Vector| (|Vector| (|Integer|))) (|Vector| (|Vector| (|Integer|))) (|PositiveInteger|)) "\\spad{nextSubsetGray(ww,n)} returns a vector {\\em vv} whose components have the following meanings:\\begin{items} \\item {\\em vv.1}: a vector of length \\spad{n} whose entries are 0 or 1. This \\indented{3}{can be interpreted as a code for a subset of the set 1,{}...,{}\\spad{n};} \\indented{3}{{\\em vv.1} differs from {\\em ww.1} by exactly one entry;} \\item {\\em vv.2.1} is the number of the entry of {\\em vv.1} which \\indented{3}{will be changed next time;} \\item {\\em vv.2.1 = n+1} means that {\\em vv.1} is the last subset; \\indented{3}{trying to compute nextSubsetGray(vv) if {\\em vv.2.1 = n+1}} \\indented{3}{will produce an error!} \\end{items} The other components of {\\em vv.2} are needed to compute nextSubsetGray efficiently. Note: this is an implementation of [Williamson,{} Topic II,{} 3.54,{} \\spad{p}. 112] for the special case {\\em r1 = r2 = ... = rn = 2}; Note: nextSubsetGray produces a side-effect,{} \\spadignore{i.e.} {\\em nextSubsetGray(vv)} and {\\em vv := nextSubsetGray(vv)} will have the same effect."))) 
NIL 
NIL 
(-406) 
((|constructor| (NIL "TwoDimensionalPlotSettings sets global flags and constants for 2-dimensional plotting.")) (|screenResolution| (((|Integer|) (|Integer|)) "\\spad{screenResolution(n)} sets the screen resolution to \\spad{n}.") (((|Integer|)) "\\spad{screenResolution()} returns the screen resolution \\spad{n}.")) (|minPoints| (((|Integer|) (|Integer|)) "\\spad{minPoints()} sets the minimum number of points in a plot.") (((|Integer|)) "\\spad{minPoints()} returns the minimum number of points in a plot.")) (|maxPoints| (((|Integer|) (|Integer|)) "\\spad{maxPoints()} sets the maximum number of points in a plot.") (((|Integer|)) "\\spad{maxPoints()} returns the maximum number of points in a plot.")) (|adaptive| (((|Boolean|) (|Boolean|)) "\\spad{adaptive(true)} turns adaptive plotting on; \\spad{adaptive(false)} turns adaptive plotting off.") (((|Boolean|)) "\\spad{adaptive()} determines whether plotting will be done adaptively.")) (|drawToScale| (((|Boolean|) (|Boolean|)) "\\spad{drawToScale(true)} causes plots to be drawn to scale. \\spad{drawToScale(false)} causes plots to be drawn so that they fill up the viewport window. The default setting is \\spad{false}.") (((|Boolean|)) "\\spad{drawToScale()} determines whether or not plots are to be drawn to scale.")) (|clipPointsDefault| (((|Boolean|) (|Boolean|)) "\\spad{clipPointsDefault(true)} turns on automatic clipping; \\spad{clipPointsDefault(false)} turns off automatic clipping. The default setting is \\spad{true}.") (((|Boolean|)) "\\spad{clipPointsDefault()} determines whether or not automatic clipping is to be done."))) 
NIL 
NIL 
(-407) 
((|constructor| (NIL "TwoDimensionalGraph creates virtual two dimensional graphs (to be displayed on TwoDimensionalViewports).")) (|putColorInfo| (((|List| (|List| (|Point| (|DoubleFloat|)))) (|List| (|List| (|Point| (|DoubleFloat|)))) (|List| (|Palette|))) "\\spad{putColorInfo(llp,lpal)} takes a list of list of points,{} \\spad{llp},{} and returns the points with their hue and shade components set according to the list of palette colors,{} \\spad{lpal}.")) (|coerce| (((|OutputForm|) $) "\\spad{coerce(gi)} returns the indicated graph,{} \\spad{gi},{} of domain \\spadtype{GraphImage} as output of the domain \\spadtype{OutputForm}.") (($ (|List| (|List| (|Point| (|DoubleFloat|))))) "\\spad{coerce(llp)} component(\\spad{gi},{}pt) creates and returns a graph of the domain \\spadtype{GraphImage} which is composed of the list of list of points given by \\spad{llp},{} and whose point colors,{} line colors and point sizes are determined by the default functions \\spadfun{pointColorDefault},{} \\spadfun{lineColorDefault},{} and \\spadfun{pointSizeDefault}. The graph data is then sent to the viewport manager where it waits to be included in a two-dimensional viewport window.")) (|point| (((|Void|) $ (|Point| (|DoubleFloat|)) (|Palette|)) "\\spad{point(gi,pt,pal)} modifies the graph \\spad{gi} of the domain \\spadtype{GraphImage} to contain one point component,{} \\spad{pt} whose point color is set to be the palette color \\spad{pal},{} and whose line color and point size are determined by the default functions \\spadfun{lineColorDefault} and \\spadfun{pointSizeDefault}.")) (|appendPoint| (((|Void|) $ (|Point| (|DoubleFloat|))) "\\spad{appendPoint(gi,pt)} appends the point \\spad{pt} to the end of the list of points component for the graph,{} \\spad{gi},{} which is of the domain \\spadtype{GraphImage}.")) (|component| (((|Void|) $ (|Point| (|DoubleFloat|)) (|Palette|) (|Palette|) (|PositiveInteger|)) "\\spad{component(gi,pt,pal1,pal2,ps)} modifies the graph \\spad{gi} of the domain \\spadtype{GraphImage} to contain one point component,{} \\spad{pt} whose point color is set to the palette color \\spad{pal1},{} line color is set to the palette color \\spad{pal2},{} and point size is set to the positive integer \\spad{ps}.") (((|Void|) $ (|Point| (|DoubleFloat|))) "\\spad{component(gi,pt)} modifies the graph \\spad{gi} of the domain \\spadtype{GraphImage} to contain one point component,{} \\spad{pt} whose point color,{} line color and point size are determined by the default functions \\spadfun{pointColorDefault},{} \\spadfun{lineColorDefault},{} and \\spadfun{pointSizeDefault}.") (((|Void|) $ (|List| (|Point| (|DoubleFloat|))) (|Palette|) (|Palette|) (|PositiveInteger|)) "\\spad{component(gi,lp,pal1,pal2,p)} sets the components of the graph,{} \\spad{gi} of the domain \\spadtype{GraphImage},{} to the values given. The point list for \\spad{gi} is set to the list \\spad{lp},{} the color of the points in \\spad{lp} is set to the palette color \\spad{pal1},{} the color of the lines which connect the points \\spad{lp} is set to the palette color \\spad{pal2},{} and the size of the points in \\spad{lp} is given by the integer \\spad{p}.")) (|units| (((|List| (|Float|)) $ (|List| (|Float|))) "\\spad{units(gi,lu)} modifies the list of unit increments for the \\spad{x} and \\spad{y} axes of the given graph,{} \\spad{gi} of the domain \\spadtype{GraphImage},{} to be that of the list of unit increments,{} \\spad{lu},{} and returns the new list of units for \\spad{gi}.") (((|List| (|Float|)) $) "\\spad{units(gi)} returns the list of unit increments for the \\spad{x} and \\spad{y} axes of the indicated graph,{} \\spad{gi},{} of the domain \\spadtype{GraphImage}.")) (|ranges| (((|List| (|Segment| (|Float|))) $ (|List| (|Segment| (|Float|)))) "\\spad{ranges(gi,lr)} modifies the list of ranges for the given graph,{} \\spad{gi} of the domain \\spadtype{GraphImage},{} to be that of the list of range segments,{} \\spad{lr},{} and returns the new range list for \\spad{gi}.") (((|List| (|Segment| (|Float|))) $) "\\spad{ranges(gi)} returns the list of ranges of the point components from the indicated graph,{} \\spad{gi},{} of the domain \\spadtype{GraphImage}.")) (|key| (((|Integer|) $) "\\spad{key(gi)} returns the process ID of the given graph,{} \\spad{gi},{} of the domain \\spadtype{GraphImage}.")) (|pointLists| (((|List| (|List| (|Point| (|DoubleFloat|)))) $) "\\spad{pointLists(gi)} returns the list of lists of points which compose the given graph,{} \\spad{gi},{} of the domain \\spadtype{GraphImage}.")) (|makeGraphImage| (($ (|List| (|List| (|Point| (|DoubleFloat|)))) (|List| (|Palette|)) (|List| (|Palette|)) (|List| (|PositiveInteger|)) (|List| (|DrawOption|))) "\\spad{makeGraphImage(llp,lpal1,lpal2,lp,lopt)} returns a graph of the domain \\spadtype{GraphImage} which is composed of the points and lines from the list of lists of points,{} \\spad{llp},{} whose point colors are indicated by the list of palette colors,{} \\spad{lpal1},{} and whose lines are colored according to the list of palette colors,{} \\spad{lpal2}. The paramater \\spad{lp} is a list of integers which denote the size of the data points,{} and \\spad{lopt} is the list of draw command options. The graph data is then sent to the viewport manager where it waits to be included in a two-dimensional viewport window.") (($ (|List| (|List| (|Point| (|DoubleFloat|)))) (|List| (|Palette|)) (|List| (|Palette|)) (|List| (|PositiveInteger|))) "\\spad{makeGraphImage(llp,lpal1,lpal2,lp)} returns a graph of the domain \\spadtype{GraphImage} which is composed of the points and lines from the list of lists of points,{} \\spad{llp},{} whose point colors are indicated by the list of palette colors,{} \\spad{lpal1},{} and whose lines are colored according to the list of palette colors,{} \\spad{lpal2}. The paramater \\spad{lp} is a list of integers which denote the size of the data points. The graph data is then sent to the viewport manager where it waits to be included in a two-dimensional viewport window.") (($ (|List| (|List| (|Point| (|DoubleFloat|))))) "\\spad{makeGraphImage(llp)} returns a graph of the domain \\spadtype{GraphImage} which is composed of the points and lines from the list of lists of points,{} \\spad{llp},{} with default point size and default point and line colours. The graph data is then sent to the viewport manager where it waits to be included in a two-dimensional viewport window.") (($ $) "\\spad{makeGraphImage(gi)} takes the given graph,{} \\spad{gi} of the domain \\spadtype{GraphImage},{} and sends it's data to the viewport manager where it waits to be included in a two-dimensional viewport window. \\spad{gi} cannot be an empty graph,{} and it's elements must have been created using the \\spadfun{point} or \\spadfun{component} functions,{} not by a previous \\spadfun{makeGraphImage}.")) (|graphImage| (($) "\\spad{graphImage()} returns an empty graph with 0 point lists of the domain \\spadtype{GraphImage}. A graph image contains the graph data component of a two dimensional viewport."))) 
NIL 
NIL 
(-408 S R E) 
((|constructor| (NIL "GradedModule(\\spad{R},{}\\spad{E}) denotes ``E-graded \\spad{R}-module'',{} \\spadignore{i.e.} collection of \\spad{R}-modules indexed by an abelian monoid \\spad{E}. An element \\spad{g} of \\spad{G[s]} for some specific \\spad{s} in \\spad{E} is said to be an element of \\spad{G} with {\\em degree} \\spad{s}. Sums are defined in each module \\spad{G[s]} so two elements of \\spad{G} have a sum if they have the same degree. \\blankline Morphisms can be defined and composed by degree to give the mathematical category of graded modules.")) (+ (($ $ $) "\\spad{g+h} is the sum of \\spad{g} and \\spad{h} in the module of elements of the same degree as \\spad{g} and \\spad{h}. Error: if \\spad{g} and \\spad{h} have different degrees.")) (- (($ $ $) "\\spad{g-h} is the difference of \\spad{g} and \\spad{h} in the module of elements of the same degree as \\spad{g} and \\spad{h}. Error: if \\spad{g} and \\spad{h} have different degrees.") (($ $) "\\spad{-g} is the additive inverse of \\spad{g} in the module of elements of the same grade as \\spad{g}.")) (* (($ $ |#2|) "\\spad{g*r} is right module multiplication.") (($ |#2| $) "\\spad{r*g} is left module multiplication.")) (|Zero| (($) "0 denotes the zero of degree 0.")) (|degree| ((|#3| $) "\\spad{degree(g)} names the degree of \\spad{g}. The set of all elements of a given degree form an \\spad{R}-module."))) 
NIL 
NIL 
(-409 R E) 
((|constructor| (NIL "GradedModule(\\spad{R},{}\\spad{E}) denotes ``E-graded \\spad{R}-module'',{} \\spadignore{i.e.} collection of \\spad{R}-modules indexed by an abelian monoid \\spad{E}. An element \\spad{g} of \\spad{G[s]} for some specific \\spad{s} in \\spad{E} is said to be an element of \\spad{G} with {\\em degree} \\spad{s}. Sums are defined in each module \\spad{G[s]} so two elements of \\spad{G} have a sum if they have the same degree. \\blankline Morphisms can be defined and composed by degree to give the mathematical category of graded modules.")) (+ (($ $ $) "\\spad{g+h} is the sum of \\spad{g} and \\spad{h} in the module of elements of the same degree as \\spad{g} and \\spad{h}. Error: if \\spad{g} and \\spad{h} have different degrees.")) (- (($ $ $) "\\spad{g-h} is the difference of \\spad{g} and \\spad{h} in the module of elements of the same degree as \\spad{g} and \\spad{h}. Error: if \\spad{g} and \\spad{h} have different degrees.") (($ $) "\\spad{-g} is the additive inverse of \\spad{g} in the module of elements of the same grade as \\spad{g}.")) (* (($ $ |#1|) "\\spad{g*r} is right module multiplication.") (($ |#1| $) "\\spad{r*g} is left module multiplication.")) (|Zero| (($) "0 denotes the zero of degree 0.")) (|degree| ((|#2| $) "\\spad{degree(g)} names the degree of \\spad{g}. The set of all elements of a given degree form an \\spad{R}-module."))) 
NIL 
NIL 
(-410 |lv| -3092 R) 
((|constructor| (NIL "\\indented{1}{Author : \\spad{P}.Gianni,{} Summer \\spad{'88},{} revised November \\spad{'89}} Solve systems of polynomial equations using Groebner bases Total order Groebner bases are computed and then converted to lex ones This package is mostly intended for internal use.")) (|genericPosition| (((|Record| (|:| |dpolys| (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) (|:| |coords| (|List| (|Integer|)))) (|List| (|DistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|OrderedVariableList| |#1|))) "\\spad{genericPosition(lp,lv)} puts a radical zero dimensional ideal in general position,{} for system \\spad{lp} in variables \\spad{lv}.")) (|testDim| (((|Union| (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) "failed") (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|OrderedVariableList| |#1|))) "\\spad{testDim(lp,lv)} tests if the polynomial system \\spad{lp} in variables \\spad{lv} is zero dimensional.")) (|groebSolve| (((|List| (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) (|List| (|DistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|OrderedVariableList| |#1|))) "\\spad{groebSolve(lp,lv)} reduces the polynomial system \\spad{lp} in variables \\spad{lv} to triangular form. Algorithm based on groebner bases algorithm with linear algebra for change of ordering. Preprocessing for the general solver. The polynomials in input are of type \\spadtype{DMP}."))) 
NIL 
NIL 
(-411 S) 
((|constructor| (NIL "The class of multiplicative groups,{} \\spadignore{i.e.} monoids with multiplicative inverses. \\blankline")) (|commutator| (($ $ $) "\\spad{commutator(p,q)} computes \\spad{inv(p) * inv(q) * p * q}.")) (|conjugate| (($ $ $) "\\spad{conjugate(p,q)} computes \\spad{inv(q) * p * q}; this is 'right action by conjugation'.")) (|unitsKnown| ((|attribute|) "unitsKnown asserts that recip only returns \"failed\" for non-units.")) (** (($ $ (|Integer|)) "\\spad{x**n} returns \\spad{x} raised to the integer power \\spad{n}.")) (/ (($ $ $) "\\spad{x/y} is the same as \\spad{x} times the inverse of \\spad{y}.")) (|inv| (($ $) "\\spad{inv(x)} returns the inverse of \\spad{x}."))) 
NIL 
NIL 
(-412) 
((|constructor| (NIL "The class of multiplicative groups,{} \\spadignore{i.e.} monoids with multiplicative inverses. \\blankline")) (|commutator| (($ $ $) "\\spad{commutator(p,q)} computes \\spad{inv(p) * inv(q) * p * q}.")) (|conjugate| (($ $ $) "\\spad{conjugate(p,q)} computes \\spad{inv(q) * p * q}; this is 'right action by conjugation'.")) (|unitsKnown| ((|attribute|) "unitsKnown asserts that recip only returns \"failed\" for non-units.")) (** (($ $ (|Integer|)) "\\spad{x**n} returns \\spad{x} raised to the integer power \\spad{n}.")) (/ (($ $ $) "\\spad{x/y} is the same as \\spad{x} times the inverse of \\spad{y}.")) (|inv| (($ $) "\\spad{inv(x)} returns the inverse of \\spad{x}."))) 
((-3991 . T)) 
NIL 
(-413 |Coef| |var| |cen|) 
((|constructor| (NIL "This is a category of univariate Puiseux series constructed from univariate Laurent series. A Puiseux series is represented by a pair \\spad{[r,f(x)]},{} where \\spad{r} is a positive rational number and \\spad{f(x)} is a Laurent series. This pair represents the Puiseux series \\spad{f(x\\^r)}.")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (|coerce| (($ (|UnivariatePuiseuxSeries| |#1| |#2| |#3|)) "\\spad{coerce(f)} converts a Puiseux series to a general power series.") (($ (|Variable| |#2|)) "\\spad{coerce(var)} converts the series variable \\spad{var} into a Puiseux series."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|)))) (|HasCategory| (-349 (-484)) (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|))))))) 
(-414 |Key| |Entry| |Tbl| |dent|) 
((|constructor| (NIL "A sparse table has a default entry,{} which is returned if no other value has been explicitly stored for a key."))) 
((-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) 
(-415 R E V P) 
((|constructor| (NIL "A domain constructor of the category \\axiomType{TriangularSetCategory}. The only requirement for a list of polynomials to be a member of such a domain is the following: no polynomial is constant and two distinct polynomials have distinct main variables. Such a triangular set may not be auto-reduced or consistent. Triangular sets are stored as sorted lists \\spad{w}.\\spad{r}.\\spad{t}. the main variables of their members but they are displayed in reverse order.\\newline References : \\indented{1}{[1] \\spad{P}. AUBRY,{} \\spad{D}. LAZARD and \\spad{M}. MORENO MAZA \"On the Theories} \\indented{5}{of Triangular Sets\" Journal of Symbol. Comp. (to appear)}"))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (|HasCategory| |#4| (QUOTE (-553 (-473)))) (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-552 (-772)))) (|HasCategory| |#4| (QUOTE (-72)))) 
(-416) 
((|constructor| (NIL "\\indented{1}{Symbolic fractions in \\%\\spad{pi} with integer coefficients;} \\indented{1}{The point for using \\spad{Pi} as the default domain for those fractions} \\indented{1}{is that \\spad{Pi} is coercible to the float types,{} and not Expression.} Date Created: 21 Feb 1990 Date Last Updated: 12 Mai 1992")) (|pi| (($) "\\spad{pi()} returns the symbolic \\%\\spad{pi}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-417) 
((|constructor| (NIL "This domain represents a `has' expression.")) (|rhs| (((|SpadAst|) $) "\\spad{rhs(e)} returns the right hand side of the case expression `e'.")) (|lhs| (((|SpadAst|) $) "\\spad{lhs(e)} returns the left hand side of the has expression `e'."))) 
NIL 
NIL 
(-418 |Key| |Entry| |hashfn|) 
((|constructor| (NIL "This domain provides access to the underlying Lisp hash tables. By varying the hashfn parameter,{} tables suited for different purposes can be obtained."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) 
(-419) 
((|constructor| (NIL "\\indented{1}{Author : Larry Lambe} Date Created : August 1988 Date Last Updated : March 9 1990 Related Constructors: OrderedSetInts,{} Commutator,{} FreeNilpotentLie AMS Classification: Primary 17B05,{} 17B30; Secondary 17A50 Keywords: free Lie algebra,{} Hall basis,{} basic commutators Description : Generate a basis for the free Lie algebra on \\spad{n} generators over a ring \\spad{R} with identity up to basic commutators of length \\spad{c} using the algorithm of \\spad{P}. Hall as given in Serre's book Lie Groups -- Lie Algebras")) (|generate| (((|Vector| (|List| (|Integer|))) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{generate(numberOfGens, maximalWeight)} generates a vector of elements of the form [left,{}weight,{}right] which represents a \\spad{P}. Hall basis element for the free lie algebra on \\spad{numberOfGens} generators. We only generate those basis elements of weight less than or equal to maximalWeight")) (|inHallBasis?| (((|Boolean|) (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{inHallBasis?(numberOfGens, leftCandidate, rightCandidate, left)} tests to see if a new element should be added to the \\spad{P}. Hall basis being constructed. The list \\spad{[leftCandidate,wt,rightCandidate]} is included in the basis if in the unique factorization of \\spad{rightCandidate},{} we have left factor leftOfRight,{} and leftOfRight <= \\spad{leftCandidate}")) (|lfunc| (((|Integer|) (|Integer|) (|Integer|)) "\\spad{lfunc(d,n)} computes the rank of the \\spad{n}th factor in the lower central series of the free \\spad{d}-generated free Lie algebra; This rank is \\spad{d} if \\spad{n} = 1 and binom(\\spad{d},{}2) if \\spad{n} = 2"))) 
NIL 
NIL 
(-420 |vl| R) 
((|constructor| (NIL "\\indented{2}{This type supports distributed multivariate polynomials} whose variables are from a user specified list of symbols. The coefficient ring may be non commutative,{} but the variables are assumed to commute. The term ordering is total degree ordering refined by reverse lexicographic ordering with respect to the position that the variables appear in the list of variables parameter.")) (|reorder| (($ $ (|List| (|Integer|))) "\\spad{reorder(p, perm)} applies the permutation perm to the variables in a polynomial and returns the new correctly ordered polynomial"))) 
(((-3996 "*") |has| |#2| (-146)) (-3987 |has| |#2| (-495)) (-3992 |has| |#2| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-821))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-821)))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-495)))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-473))))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-312))) (|HasAttribute| |#2| (QUOTE -3992)) (|HasCategory| |#2| (QUOTE (-391))) (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#2| (QUOTE (-118))))) 
(-421 -2621 S) 
((|constructor| (NIL "\\indented{2}{This type represents the finite direct or cartesian product of an} underlying ordered component type. The vectors are ordered first by the sum of their components,{} and then refined using a reverse lexicographic ordering. This type is a suitable third argument for \\spadtype{GeneralDistributedMultivariatePolynomial}."))) 
((-3988 |has| |#2| (-961)) (-3989 |has| |#2| (-961)) (-3991 |has| |#2| (-6 -3991)) (-3994 . T)) 
((OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-312))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312)))) (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (OR (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756)))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-319))) (OR (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-961))))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-190))) (OR (|HasCategory| |#2| (QUOTE (-190))) (-12 (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-1013))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-961))))) (|HasCategory| (-484) (QUOTE (-756))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-1013)))) (|HasAttribute| |#2| (QUOTE -3991)) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-72))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) 
(-422) 
((|constructor| (NIL "This domain represents the header of a definition.")) (|parameters| (((|List| (|ParameterAst|)) $) "\\spad{parameters(h)} gives the parameters specified in the definition header `h'.")) (|name| (((|Identifier|) $) "\\spad{name(h)} returns the name of the operation defined defined.")) (|headAst| (($ (|Identifier|) (|List| (|ParameterAst|))) "\\spad{headAst(f,[x1,..,xn])} constructs a function definition header."))) 
NIL 
NIL 
(-423 S) 
((|constructor| (NIL "Heap implemented in a flexible array to allow for insertions")) (|heap| (($ (|List| |#1|)) "\\spad{heap(ls)} creates a heap of elements consisting of the elements of \\spad{ls}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-424 -3092 UP UPUP R) 
((|constructor| (NIL "This domains implements finite rational divisors on an hyperelliptic curve,{} that is finite formal sums SUM(\\spad{n} * \\spad{P}) where the \\spad{n}'s are integers and the \\spad{P}'s are finite rational points on the curve. The equation of the curve must be \\spad{y^2} = \\spad{f}(\\spad{x}) and \\spad{f} must have odd degree."))) 
NIL 
NIL 
(-425 BP) 
((|constructor| (NIL "This package provides the functions for the heuristic integer gcd. Geddes's algorithm,{}for univariate polynomials with integer coefficients")) (|lintgcd| (((|Integer|) (|List| (|Integer|))) "\\spad{lintgcd([a1,..,ak])} = gcd of a list of integers")) (|content| (((|List| (|Integer|)) (|List| |#1|)) "\\spad{content([f1,..,fk])} = content of a list of univariate polynonials")) (|gcdcofactprim| (((|List| |#1|) (|List| |#1|)) "\\spad{gcdcofactprim([f1,..fk])} = gcd and cofactors of \\spad{k} primitive polynomials.")) (|gcdcofact| (((|List| |#1|) (|List| |#1|)) "\\spad{gcdcofact([f1,..fk])} = gcd and cofactors of \\spad{k} univariate polynomials.")) (|gcdprim| ((|#1| (|List| |#1|)) "\\spad{gcdprim([f1,..,fk])} = gcd of \\spad{k} PRIMITIVE univariate polynomials")) (|gcd| ((|#1| (|List| |#1|)) "\\spad{gcd([f1,..,fk])} = gcd of the polynomials \\spad{fi}."))) 
NIL 
NIL 
(-426) 
((|constructor| (NIL "This domain allows rational numbers to be presented as repeating hexadecimal expansions.")) (|hex| (($ (|Fraction| (|Integer|))) "\\spad{hex(r)} converts a rational number to a hexadecimal expansion.")) (|fractionPart| (((|Fraction| (|Integer|)) $) "\\spad{fractionPart(h)} returns the fractional part of a hexadecimal expansion."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-484) (QUOTE (-821))) (|HasCategory| (-484) (QUOTE (-950 (-1089)))) (|HasCategory| (-484) (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-120))) (|HasCategory| (-484) (QUOTE (-553 (-473)))) (|HasCategory| (-484) (QUOTE (-933))) (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756))) (OR (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756)))) (|HasCategory| (-484) (QUOTE (-950 (-484)))) (|HasCategory| (-484) (QUOTE (-1065))) (|HasCategory| (-484) (QUOTE (-796 (-329)))) (|HasCategory| (-484) (QUOTE (-796 (-484)))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-484) (QUOTE (-189))) (|HasCategory| (-484) (QUOTE (-811 (-1089)))) (|HasCategory| (-484) (QUOTE (-190))) (|HasCategory| (-484) (QUOTE (-809 (-1089)))) (|HasCategory| (-484) (QUOTE (-455 (-1089) (-484)))) (|HasCategory| (-484) (QUOTE (-260 (-484)))) (|HasCategory| (-484) (QUOTE (-241 (-484) (-484)))) (|HasCategory| (-484) (QUOTE (-258))) (|HasCategory| (-484) (QUOTE (-483))) (|HasCategory| (-484) (QUOTE (-580 (-484)))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (|HasCategory| (-484) (QUOTE (-118))))) 
(-427 A S) 
((|constructor| (NIL "A homogeneous aggregate is an aggregate of elements all of the same type. In the current system,{} all aggregates are homogeneous. Two attributes characterize classes of aggregates. Aggregates from domains with attribute \\spadatt{finiteAggregate} have a finite number of members. Those with attribute \\spadatt{shallowlyMutable} allow an element to be modified or updated without changing its overall value.")) (|member?| (((|Boolean|) |#2| $) "\\spad{member?(x,u)} tests if \\spad{x} is a member of \\spad{u}. For collections,{} \\axiom{member?(\\spad{x},{}\\spad{u}) = reduce(or,{}[x=y for \\spad{y} in \\spad{u}],{}\\spad{false})}.")) (|members| (((|List| |#2|) $) "\\spad{members(u)} returns a list of the consecutive elements of \\spad{u}. For collections,{} \\axiom{parts([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = (\\spad{x},{}\\spad{y},{}...,{}\\spad{z})}.")) (|parts| (((|List| |#2|) $) "\\spad{parts(u)} returns a list of the consecutive elements of \\spad{u}. For collections,{} \\axiom{parts([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = (\\spad{x},{}\\spad{y},{}...,{}\\spad{z})}.")) (|count| (((|NonNegativeInteger|) |#2| $) "\\spad{count(x,u)} returns the number of occurrences of \\spad{x} in \\spad{u}. For collections,{} \\axiom{count(\\spad{x},{}\\spad{u}) = reduce(+,{}[x=y for \\spad{y} in \\spad{u}],{}0)}.") (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#2|) $) "\\spad{count(p,u)} returns the number of elements \\spad{x} in \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}. For collections,{} \\axiom{count(\\spad{p},{}\\spad{u}) = reduce(+,{}[1 for \\spad{x} in \\spad{u} | \\spad{p}(\\spad{x})],{}0)}.")) (|every?| (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) "\\spad{every?(f,u)} tests if \\spad{p}(\\spad{x}) is \\spad{true} for all elements \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{every?(\\spad{p},{}\\spad{u}) = reduce(and,{}map(\\spad{f},{}\\spad{u}),{}\\spad{true},{}\\spad{false})}.")) (|any?| (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) "\\spad{any?(p,u)} tests if \\axiom{\\spad{p}(\\spad{x})} is \\spad{true} for any element \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{any?(\\spad{p},{}\\spad{u}) = reduce(or,{}map(\\spad{f},{}\\spad{u}),{}\\spad{false},{}\\spad{true})}.")) (|map!| (($ (|Mapping| |#2| |#2|) $) "\\spad{map!(f,u)} destructively replaces each element \\spad{x} of \\spad{u} by \\axiom{\\spad{f}(\\spad{x})}.")) (|map| (($ (|Mapping| |#2| |#2|) $) "\\spad{map(f,u)} returns a copy of \\spad{u} with each element \\spad{x} replaced by \\spad{f}(\\spad{x}). For collections,{} \\axiom{map(\\spad{f},{}\\spad{u}) = [\\spad{f}(\\spad{x}) for \\spad{x} in \\spad{u}]}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3994)) (|HasAttribute| |#1| (QUOTE -3995)) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) 
(-428 S) 
((|constructor| (NIL "A homogeneous aggregate is an aggregate of elements all of the same type. In the current system,{} all aggregates are homogeneous. Two attributes characterize classes of aggregates. Aggregates from domains with attribute \\spadatt{finiteAggregate} have a finite number of members. Those with attribute \\spadatt{shallowlyMutable} allow an element to be modified or updated without changing its overall value.")) (|member?| (((|Boolean|) |#1| $) "\\spad{member?(x,u)} tests if \\spad{x} is a member of \\spad{u}. For collections,{} \\axiom{member?(\\spad{x},{}\\spad{u}) = reduce(or,{}[x=y for \\spad{y} in \\spad{u}],{}\\spad{false})}.")) (|members| (((|List| |#1|) $) "\\spad{members(u)} returns a list of the consecutive elements of \\spad{u}. For collections,{} \\axiom{parts([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = (\\spad{x},{}\\spad{y},{}...,{}\\spad{z})}.")) (|parts| (((|List| |#1|) $) "\\spad{parts(u)} returns a list of the consecutive elements of \\spad{u}. For collections,{} \\axiom{parts([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = (\\spad{x},{}\\spad{y},{}...,{}\\spad{z})}.")) (|count| (((|NonNegativeInteger|) |#1| $) "\\spad{count(x,u)} returns the number of occurrences of \\spad{x} in \\spad{u}. For collections,{} \\axiom{count(\\spad{x},{}\\spad{u}) = reduce(+,{}[x=y for \\spad{y} in \\spad{u}],{}0)}.") (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{count(p,u)} returns the number of elements \\spad{x} in \\spad{u} such that \\axiom{\\spad{p}(\\spad{x})} is \\spad{true}. For collections,{} \\axiom{count(\\spad{p},{}\\spad{u}) = reduce(+,{}[1 for \\spad{x} in \\spad{u} | \\spad{p}(\\spad{x})],{}0)}.")) (|every?| (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{every?(f,u)} tests if \\spad{p}(\\spad{x}) is \\spad{true} for all elements \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{every?(\\spad{p},{}\\spad{u}) = reduce(and,{}map(\\spad{f},{}\\spad{u}),{}\\spad{true},{}\\spad{false})}.")) (|any?| (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) "\\spad{any?(p,u)} tests if \\axiom{\\spad{p}(\\spad{x})} is \\spad{true} for any element \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{any?(\\spad{p},{}\\spad{u}) = reduce(or,{}map(\\spad{f},{}\\spad{u}),{}\\spad{false},{}\\spad{true})}.")) (|map!| (($ (|Mapping| |#1| |#1|) $) "\\spad{map!(f,u)} destructively replaces each element \\spad{x} of \\spad{u} by \\axiom{\\spad{f}(\\spad{x})}.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f,u)} returns a copy of \\spad{u} with each element \\spad{x} replaced by \\spad{f}(\\spad{x}). For collections,{} \\axiom{map(\\spad{f},{}\\spad{u}) = [\\spad{f}(\\spad{x}) for \\spad{x} in \\spad{u}]}."))) 
NIL 
NIL 
(-429 S) 
((|constructor| (NIL "A is homotopic to \\spad{B} iff any element of domain \\spad{B} can be automically converted into an element of domain \\spad{B},{} and nay element of domain \\spad{B} can be automatically converted into an A."))) 
NIL 
NIL 
(-430) 
((|constructor| (NIL "This domain represents hostnames on computer network.")) (|host| (($ (|String|)) "\\spad{host(n)} constructs a Hostname from the name `n'."))) 
NIL 
NIL 
(-431 S) 
((|constructor| (NIL "Category for the hyperbolic trigonometric functions.")) (|tanh| (($ $) "\\spad{tanh(x)} returns the hyperbolic tangent of \\spad{x}.")) (|sinh| (($ $) "\\spad{sinh(x)} returns the hyperbolic sine of \\spad{x}.")) (|sech| (($ $) "\\spad{sech(x)} returns the hyperbolic secant of \\spad{x}.")) (|csch| (($ $) "\\spad{csch(x)} returns the hyperbolic cosecant of \\spad{x}.")) (|coth| (($ $) "\\spad{coth(x)} returns the hyperbolic cotangent of \\spad{x}.")) (|cosh| (($ $) "\\spad{cosh(x)} returns the hyperbolic cosine of \\spad{x}."))) 
NIL 
NIL 
(-432) 
((|constructor| (NIL "Category for the hyperbolic trigonometric functions.")) (|tanh| (($ $) "\\spad{tanh(x)} returns the hyperbolic tangent of \\spad{x}.")) (|sinh| (($ $) "\\spad{sinh(x)} returns the hyperbolic sine of \\spad{x}.")) (|sech| (($ $) "\\spad{sech(x)} returns the hyperbolic secant of \\spad{x}.")) (|csch| (($ $) "\\spad{csch(x)} returns the hyperbolic cosecant of \\spad{x}.")) (|coth| (($ $) "\\spad{coth(x)} returns the hyperbolic cotangent of \\spad{x}.")) (|cosh| (($ $) "\\spad{cosh(x)} returns the hyperbolic cosine of \\spad{x}."))) 
NIL 
NIL 
(-433 -3092 UP |AlExt| |AlPol|) 
((|constructor| (NIL "Factorization of univariate polynomials with coefficients in an algebraic extension of a field over which we can factor UP's.")) (|factor| (((|Factored| |#4|) |#4| (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{factor(p, f)} returns a prime factorisation of \\spad{p}; \\spad{f} is a factorisation map for elements of UP."))) 
NIL 
NIL 
(-434) 
((|constructor| (NIL "Algebraic closure of the rational numbers.")) (|norm| (($ $ (|List| (|Kernel| $))) "\\spad{norm(f,l)} computes the norm of the algebraic number \\spad{f} with respect to the extension generated by kernels \\spad{l}") (($ $ (|Kernel| $)) "\\spad{norm(f,k)} computes the norm of the algebraic number \\spad{f} with respect to the extension generated by kernel \\spad{k}") (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|List| (|Kernel| $))) "\\spad{norm(p,l)} computes the norm of the polynomial \\spad{p} with respect to the extension generated by kernels \\spad{l}") (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|Kernel| $)) "\\spad{norm(p,k)} computes the norm of the polynomial \\spad{p} with respect to the extension generated by kernel \\spad{k}")) (|trueEqual| (((|Boolean|) $ $) "\\spad{trueEqual(x,y)} tries to determine if the two numbers are equal")) (|reduce| (($ $) "\\spad{reduce(f)} simplifies all the unreduced algebraic numbers present in \\spad{f} by applying their defining relations.")) (|denom| (((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $) "\\spad{denom(f)} returns the denominator of \\spad{f} viewed as a polynomial in the kernels over \\spad{Z}.")) (|numer| (((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $) "\\spad{numer(f)} returns the numerator of \\spad{f} viewed as a polynomial in the kernels over \\spad{Z}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| $ (QUOTE (-961))) (|HasCategory| $ (QUOTE (-950 (-484))))) 
(-435 S |mn|) 
((|constructor| (NIL "\\indented{1}{Author Micheal Monagan \\spad{Aug/87}} This is the basic one dimensional array data type."))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-436 R |Row| |Col|) 
((|constructor| (NIL "\\indented{1}{This is an internal type which provides an implementation of} 2-dimensional arrays as PrimitiveArray's of PrimitiveArray's."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-437 K R UP) 
((|constructor| (NIL "\\indented{1}{Author: Clifton Williamson} Date Created: 9 August 1993 Date Last Updated: 3 December 1993 Basic Operations: chineseRemainder,{} factorList Related Domains: PAdicWildFunctionFieldIntegralBasis(\\spad{K},{}\\spad{R},{}UP,{}\\spad{F}) Also See: WildFunctionFieldIntegralBasis,{} FunctionFieldIntegralBasis AMS Classifications: Keywords: function field,{} finite field,{} integral basis Examples: References: Description:")) (|chineseRemainder| (((|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|))) (|List| |#3|) (|List| (|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|)))) (|NonNegativeInteger|)) "\\spad{chineseRemainder(lu,lr,n)} \\undocumented")) (|listConjugateBases| (((|List| (|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|)))) (|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|))) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{listConjugateBases(bas,q,n)} returns the list \\spad{[bas,bas^Frob,bas^(Frob^2),...bas^(Frob^(n-1))]},{} where \\spad{Frob} raises the coefficients of all polynomials appearing in the basis \\spad{bas} to the \\spad{q}th power.")) (|factorList| (((|List| (|SparseUnivariatePolynomial| |#1|)) |#1| (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{factorList(k,n,m,j)} \\undocumented"))) 
NIL 
NIL 
(-438 R UP -3092) 
((|constructor| (NIL "This package contains functions used in the packages FunctionFieldIntegralBasis and NumberFieldIntegralBasis.")) (|moduleSum| (((|Record| (|:| |basis| (|Matrix| |#1|)) (|:| |basisDen| |#1|) (|:| |basisInv| (|Matrix| |#1|))) (|Record| (|:| |basis| (|Matrix| |#1|)) (|:| |basisDen| |#1|) (|:| |basisInv| (|Matrix| |#1|))) (|Record| (|:| |basis| (|Matrix| |#1|)) (|:| |basisDen| |#1|) (|:| |basisInv| (|Matrix| |#1|)))) "\\spad{moduleSum(m1,m2)} returns the sum of two modules in the framed algebra \\spad{F}. Each module \\spad{mi} is represented as follows: \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn} and \\spad{mi} is a record \\spad{[basis,basisDen,basisInv]}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then a basis \\spad{v1,...,vn} for \\spad{mi} is given by \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of 'basis' contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|idealiserMatrix| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{idealiserMatrix(m1, m2)} returns the matrix representing the linear conditions on the Ring associatied with an ideal defined by \\spad{m1} and \\spad{m2}.")) (|idealiser| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) |#1|) "\\spad{idealiser(m1,m2,d)} computes the order of an ideal defined by \\spad{m1} and \\spad{m2} where \\spad{d} is the known part of the denominator") (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{idealiser(m1,m2)} computes the order of an ideal defined by \\spad{m1} and \\spad{m2}")) (|leastPower| (((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{leastPower(p,n)} returns \\spad{e},{} where \\spad{e} is the smallest integer such that \\spad{p **e >= n}")) (|divideIfCan!| ((|#1| (|Matrix| |#1|) (|Matrix| |#1|) |#1| (|Integer|)) "\\spad{divideIfCan!(matrix,matrixOut,prime,n)} attempts to divide the entries of \\spad{matrix} by \\spad{prime} and store the result in \\spad{matrixOut}. If it is successful,{} 1 is returned and if not,{} \\spad{prime} is returned. Here both \\spad{matrix} and \\spad{matrixOut} are \\spad{n}-by-\\spad{n} upper triangular matrices.")) (|matrixGcd| ((|#1| (|Matrix| |#1|) |#1| (|NonNegativeInteger|)) "\\spad{matrixGcd(mat,sing,n)} is \\spad{gcd(sing,g)} where \\spad{g} is the gcd of the entries of the \\spad{n}-by-\\spad{n} upper-triangular matrix \\spad{mat}.")) (|diagonalProduct| ((|#1| (|Matrix| |#1|)) "\\spad{diagonalProduct(m)} returns the product of the elements on the diagonal of the matrix \\spad{m}")) (|squareFree| (((|Factored| $) $) "\\spad{squareFree(x)} returns a square-free factorisation of \\spad{x}"))) 
NIL 
NIL 
(-439 |mn|) 
((|constructor| (NIL "\\spadtype{IndexedBits} is a domain to compactly represent large quantities of Boolean data."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| (-85) (QUOTE (-260 (-85)))) (|HasCategory| (-85) (QUOTE (-1013)))) (|HasCategory| (-85) (QUOTE (-553 (-473)))) (|HasCategory| (-85) (QUOTE (-756))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| (-85) (QUOTE (-1013))) (|HasCategory| (-85) (QUOTE (-552 (-772)))) (|HasCategory| (-85) (QUOTE (-72)))) 
(-440 K R UP L) 
((|constructor| (NIL "IntegralBasisPolynomialTools provides functions for \\indented{1}{mapping functions on the coefficients of univariate and bivariate} \\indented{1}{polynomials.}")) (|mapBivariate| (((|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#4|)) (|Mapping| |#4| |#1|) |#3|) "\\spad{mapBivariate(f,p(x,y))} applies the function \\spad{f} to the coefficients of \\spad{p(x,y)}.")) (|mapMatrixIfCan| (((|Union| (|Matrix| |#2|) "failed") (|Mapping| (|Union| |#1| "failed") |#4|) (|Matrix| (|SparseUnivariatePolynomial| |#4|))) "\\spad{mapMatrixIfCan(f,mat)} applies the function \\spad{f} to the coefficients of the entries of \\spad{mat} if possible,{} and returns \\spad{\"failed\"} otherwise.")) (|mapUnivariateIfCan| (((|Union| |#2| "failed") (|Mapping| (|Union| |#1| "failed") |#4|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{mapUnivariateIfCan(f,p(x))} applies the function \\spad{f} to the coefficients of \\spad{p(x)},{} if possible,{} and returns \\spad{\"failed\"} otherwise.")) (|mapUnivariate| (((|SparseUnivariatePolynomial| |#4|) (|Mapping| |#4| |#1|) |#2|) "\\spad{mapUnivariate(f,p(x))} applies the function \\spad{f} to the coefficients of \\spad{p(x)}.") ((|#2| (|Mapping| |#1| |#4|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{mapUnivariate(f,p(x))} applies the function \\spad{f} to the coefficients of \\spad{p(x)}."))) 
NIL 
NIL 
(-441) 
((|constructor| (NIL "\\indented{1}{This domain implements a container of information} about the AXIOM library")) (|fullDisplay| (((|Void|) $) "\\spad{fullDisplay(ic)} prints all of the information contained in \\axiom{\\spad{ic}}.")) (|display| (((|Void|) $) "\\spad{display(ic)} prints a summary of the information contained in \\axiom{\\spad{ic}}.")) (|elt| (((|String|) $ (|Symbol|)) "\\spad{elt(ic,s)} selects a particular field from \\axiom{\\spad{ic}}. Valid fields are \\axiom{name,{} nargs,{} exposed,{} type,{} abbreviation,{} kind,{} origin,{} params,{} condition,{} doc}."))) 
NIL 
NIL 
(-442 R Q A B) 
((|constructor| (NIL "InnerCommonDenominator provides functions to compute the common denominator of a finite linear aggregate of elements of the quotient field of an integral domain.")) (|splitDenominator| (((|Record| (|:| |num| |#3|) (|:| |den| |#1|)) |#4|) "\\spad{splitDenominator([q1,...,qn])} returns \\spad{[[p1,...,pn], d]} such that \\spad{qi = pi/d} and \\spad{d} is a common denominator for the \\spad{qi}'s.")) (|clearDenominator| ((|#3| |#4|) "\\spad{clearDenominator([q1,...,qn])} returns \\spad{[p1,...,pn]} such that \\spad{qi = pi/d} where \\spad{d} is a common denominator for the \\spad{qi}'s.")) (|commonDenominator| ((|#1| |#4|) "\\spad{commonDenominator([q1,...,qn])} returns a common denominator \\spad{d} for \\spad{q1},{}...,{}qn."))) 
NIL 
NIL 
(-443 -3092 |Expon| |VarSet| |DPoly|) 
((|constructor| (NIL "This domain represents polynomial ideals with coefficients in any field and supports the basic ideal operations,{} including intersection sum and quotient. An ideal is represented by a list of polynomials (the generators of the ideal) and a boolean that is \\spad{true} if the generators are a Groebner basis. The algorithms used are based on Groebner basis computations. The ordering is determined by the datatype of the input polynomials. Users may use refinements of total degree orderings.")) (|relationsIdeal| (((|SuchThat| (|List| (|Polynomial| |#1|)) (|List| (|Equation| (|Polynomial| |#1|)))) (|List| |#4|)) "\\spad{relationsIdeal(polyList)} returns the ideal of relations among the polynomials in \\spad{polyList}.")) (|saturate| (($ $ |#4| (|List| |#3|)) "\\spad{saturate(I,f,lvar)} is the saturation with respect to the prime principal ideal which is generated by \\spad{f} in the polynomial ring \\spad{F[lvar]}.") (($ $ |#4|) "\\spad{saturate(I,f)} is the saturation of the ideal \\spad{I} with respect to the multiplicative set generated by the polynomial \\spad{f}.")) (|coerce| (($ (|List| |#4|)) "\\spad{coerce(polyList)} converts the list of polynomials \\spad{polyList} to an ideal.")) (|generators| (((|List| |#4|) $) "\\spad{generators(I)} returns a list of generators for the ideal \\spad{I}.")) (|groebner?| (((|Boolean|) $) "\\spad{groebner?(I)} tests if the generators of the ideal \\spad{I} are a Groebner basis.")) (|groebnerIdeal| (($ (|List| |#4|)) "\\spad{groebnerIdeal(polyList)} constructs the ideal generated by the list of polynomials \\spad{polyList} which are assumed to be a Groebner basis. Note: this operation avoids a Groebner basis computation.")) (|ideal| (($ (|List| |#4|)) "\\spad{ideal(polyList)} constructs the ideal generated by the list of polynomials \\spad{polyList}.")) (|leadingIdeal| (($ $) "\\spad{leadingIdeal(I)} is the ideal generated by the leading terms of the elements of the ideal \\spad{I}.")) (|dimension| (((|Integer|) $) "\\spad{dimension(I)} gives the dimension of the ideal \\spad{I}. in the ring \\spad{F[lvar]},{} where lvar are the variables appearing in \\spad{I}") (((|Integer|) $ (|List| |#3|)) "\\spad{dimension(I,lvar)} gives the dimension of the ideal \\spad{I},{} in the ring \\spad{F[lvar]}")) (|backOldPos| (($ (|Record| (|:| |mval| (|Matrix| |#1|)) (|:| |invmval| (|Matrix| |#1|)) (|:| |genIdeal| $))) "\\spad{backOldPos(genPos)} takes the result produced by \\spadfunFrom{generalPosition}{PolynomialIdeals} and performs the inverse transformation,{} returning the original ideal \\spad{backOldPos(generalPosition(I,listvar))} = \\spad{I}.")) (|generalPosition| (((|Record| (|:| |mval| (|Matrix| |#1|)) (|:| |invmval| (|Matrix| |#1|)) (|:| |genIdeal| $)) $ (|List| |#3|)) "\\spad{generalPosition(I,listvar)} perform a random linear transformation on the variables in \\spad{listvar} and returns the transformed ideal along with the change of basis matrix.")) (|groebner| (($ $) "\\spad{groebner(I)} returns a set of generators of \\spad{I} that are a Groebner basis for \\spad{I}.")) (|quotient| (($ $ |#4|) "\\spad{quotient(I,f)} computes the quotient of the ideal \\spad{I} by the principal ideal generated by the polynomial \\spad{f},{} \\spad{(I:(f))}.") (($ $ $) "\\spad{quotient(I,J)} computes the quotient of the ideals \\spad{I} and \\spad{J},{} \\spad{(I:J)}.")) (|intersect| (($ (|List| $)) "\\spad{intersect(LI)} computes the intersection of the list of ideals \\spad{LI}.") (($ $ $) "\\spad{intersect(I,J)} computes the intersection of the ideals \\spad{I} and \\spad{J}.")) (|zeroDim?| (((|Boolean|) $) "\\spad{zeroDim?(I)} tests if the ideal \\spad{I} is zero dimensional,{} \\spadignore{i.e.} all its associated primes are maximal,{} in the ring \\spad{F[lvar]},{} where lvar are the variables appearing in \\spad{I}") (((|Boolean|) $ (|List| |#3|)) "\\spad{zeroDim?(I,lvar)} tests if the ideal \\spad{I} is zero dimensional,{} \\spadignore{i.e.} all its associated primes are maximal,{} in the ring \\spad{F[lvar]}")) (|inRadical?| (((|Boolean|) |#4| $) "\\spad{inRadical?(f,I)} tests if some power of the polynomial \\spad{f} belongs to the ideal \\spad{I}.")) (|in?| (((|Boolean|) $ $) "\\spad{in?(I,J)} tests if the ideal \\spad{I} is contained in the ideal \\spad{J}.")) (|element?| (((|Boolean|) |#4| $) "\\spad{element?(f,I)} tests whether the polynomial \\spad{f} belongs to the ideal \\spad{I}.")) (|zero?| (((|Boolean|) $) "\\spad{zero?(I)} tests whether the ideal \\spad{I} is the zero ideal")) (|one?| (((|Boolean|) $) "\\spad{one?(I)} tests whether the ideal \\spad{I} is the unit ideal,{} \\spadignore{i.e.} contains 1.")) (+ (($ $ $) "\\spad{I+J} computes the ideal generated by the union of \\spad{I} and \\spad{J}.")) (** (($ $ (|NonNegativeInteger|)) "\\spad{I**n} computes the \\spad{n}th power of the ideal \\spad{I}.")) (* (($ $ $) "\\spad{I*J} computes the product of the ideal \\spad{I} and \\spad{J}."))) 
NIL 
((|HasCategory| |#3| (QUOTE (-553 (-1089))))) 
(-444 |vl| |nv|) 
((|constructor| (NIL "\\indented{2}{This package provides functions for the primary decomposition of} polynomial ideals over the rational numbers. The ideals are members of the \\spadtype{PolynomialIdeals} domain,{} and the polynomial generators are required to be from the \\spadtype{DistributedMultivariatePolynomial} domain.")) (|contract| (((|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|)))) (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|)))) (|List| (|OrderedVariableList| |#1|))) "\\spad{contract(I,lvar)} contracts the ideal \\spad{I} to the polynomial ring \\spad{F[lvar]}.")) (|primaryDecomp| (((|List| (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) "\\spad{primaryDecomp(I)} returns a list of primary ideals such that their intersection is the ideal \\spad{I}.")) (|radical| (((|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|)))) (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) "\\spad{radical(I)} returns the radical of the ideal \\spad{I}.")) (|prime?| (((|Boolean|) (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) "\\spad{prime?(I)} tests if the ideal \\spad{I} is prime.")) (|zeroDimPrimary?| (((|Boolean|) (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) "\\spad{zeroDimPrimary?(I)} tests if the ideal \\spad{I} is 0-dimensional primary.")) (|zeroDimPrime?| (((|Boolean|) (|PolynomialIdeals| (|Fraction| (|Integer|)) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|OrderedVariableList| |#1|) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) "\\spad{zeroDimPrime?(I)} tests if the ideal \\spad{I} is a 0-dimensional prime."))) 
NIL 
NIL 
(-445 T$) 
((|constructor| (NIL "This is the category of all domains that implement idempotent operations."))) 
(((|%Rule| |idempotence| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|)) (-3056 (|f| |x| |x|) |x|))) . T)) 
NIL 
(-446) 
((|constructor| (NIL "This domain provides representation for plain identifiers. It differs from Symbol in that it does not support any form of scripting. It is a plain basic data structure. \\blankline")) (|gensym| (($) "\\spad{gensym()} returns a new identifier,{} different from any other identifier in the running system"))) 
NIL 
NIL 
(-447 A S) 
((|constructor| (NIL "\\indented{1}{Indexed direct products of abelian groups over an abelian group \\spad{A} of} generators indexed by the ordered set \\spad{S}. All items have finite support: only non-zero terms are stored."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) 
(-448 A S) 
((|constructor| (NIL "\\indented{1}{Indexed direct products of abelian monoids over an abelian monoid \\spad{A} of} generators indexed by the ordered set \\spad{S}. All items have finite support. Only non-zero terms are stored."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) 
(-449 A S) 
((|constructor| (NIL "This category represents the direct product of some set with respect to an ordered indexing set.")) (|terms| (((|List| (|IndexedProductTerm| |#1| |#2|)) $) "\\spad{terms x} returns the list of terms in \\spad{x}. Each term is a pair of a support (the first component) and the corresponding value (the second component).")) (|reductum| (($ $) "\\spad{reductum(z)} returns a new element created by removing the leading coefficient/support pair from the element \\spad{z}. Error: if \\spad{z} has no support.")) (|leadingSupport| ((|#2| $) "\\spad{leadingSupport(z)} returns the index of leading (with respect to the ordering on the indexing set) monomial of \\spad{z}. Error: if \\spad{z} has no support.")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(z)} returns the coefficient of the leading (with respect to the ordering on the indexing set) monomial of \\spad{z}. Error: if \\spad{z} has no support.")) (|monomial| (($ |#1| |#2|) "\\spad{monomial(a,s)} constructs a direct product element with the \\spad{s} component set to \\spad{a}")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f,z)} returns the new element created by applying the function \\spad{f} to each component of the direct product element \\spad{z}."))) 
NIL 
NIL 
(-450 A S) 
((|constructor| (NIL "Indexed direct products of objects over a set \\spad{A} of generators indexed by an ordered set \\spad{S}. All items have finite support.")) (|combineWithIf| (($ $ $ (|Mapping| |#1| |#1| |#1|) (|Mapping| (|Boolean|) |#1| |#1|)) "\\spad{combineWithIf(u,v,f,p)} returns the result of combining index-wise,{} coefficients of \\spad{u} and \\spad{u} if when satisfy the predicate \\spad{p}. Those pairs of coefficients which fail\\spad{p} are implicitly ignored."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) 
(-451 A S) 
((|constructor| (NIL "\\indented{1}{Indexed direct products of ordered abelian monoids \\spad{A} of} generators indexed by the ordered set \\spad{S}. The inherited order is lexicographical. All items have finite support: only non-zero terms are stored."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) 
(-452 A S) 
((|constructor| (NIL "\\indented{1}{Indexed direct products of ordered abelian monoid sups \\spad{A},{}} generators indexed by the ordered set \\spad{S}. All items have finite support: only non-zero terms are stored."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) 
(-453 A S) 
((|constructor| (NIL "An indexed product term is a utility domain used in the representation of indexed direct product objects.")) (|coefficient| ((|#1| $) "\\spad{coefficient t} returns the coefficient of the tern \\spad{t}.")) (|index| ((|#2| $) "\\spad{index t} returns the index of the term \\spad{t}.")) (|term| (($ |#2| |#1|) "\\spad{term(s,a)} constructs a term with index \\spad{s} and coefficient \\spad{a}."))) 
NIL 
NIL 
(-454 S A B) 
((|constructor| (NIL "This category provides \\spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation'' substitutions. The difference between this and \\spadtype{Evalable} is that the operations in this category specify the substitution as a pair of arguments rather than as an equation.")) (|eval| (($ $ (|List| |#2|) (|List| |#3|)) "\\spad{eval(f, [x1,...,xn], [v1,...,vn])} replaces \\spad{xi} by \\spad{vi} in \\spad{f}.") (($ $ |#2| |#3|) "\\spad{eval(f, x, v)} replaces \\spad{x} by \\spad{v} in \\spad{f}."))) 
NIL 
NIL 
(-455 A B) 
((|constructor| (NIL "This category provides \\spadfun{eval} operations. A domain may belong to this category if it is possible to make ``evaluation'' substitutions. The difference between this and \\spadtype{Evalable} is that the operations in this category specify the substitution as a pair of arguments rather than as an equation.")) (|eval| (($ $ (|List| |#1|) (|List| |#2|)) "\\spad{eval(f, [x1,...,xn], [v1,...,vn])} replaces \\spad{xi} by \\spad{vi} in \\spad{f}.") (($ $ |#1| |#2|) "\\spad{eval(f, x, v)} replaces \\spad{x} by \\spad{v} in \\spad{f}."))) 
NIL 
NIL 
(-456 S E |un|) 
((|constructor| (NIL "Internal implementation of a free abelian monoid."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-716)))) 
(-457 S |mn|) 
((|constructor| (NIL "\\indented{1}{Author: Michael Monagan \\spad{July/87},{} modified SMW \\spad{June/91}} A FlexibleArray is the notion of an array intended to allow for growth at the end only. Hence the following efficient operations \\indented{2}{\\spad{append(x,a)} meaning append item \\spad{x} at the end of the array \\spad{a}} \\indented{2}{\\spad{delete(a,n)} meaning delete the last item from the array \\spad{a}} Flexible arrays support the other operations inherited from \\spadtype{ExtensibleLinearAggregate}. However,{} these are not efficient. Flexible arrays combine the \\spad{O(1)} access time property of arrays with growing and shrinking at the end in \\spad{O(1)} (average) time. This is done by using an ordinary array which may have zero or more empty slots at the end. When the array becomes full it is copied into a new larger (50\\% larger) array. Conversely,{} when the array becomes less than 1/2 full,{} it is copied into a smaller array. Flexible arrays provide for an efficient implementation of many data structures in particular heaps,{} stacks and sets.")) (|shrinkable| (((|Boolean|) (|Boolean|)) "\\spad{shrinkable(b)} sets the shrinkable attribute of flexible arrays to \\spad{b} and returns the previous value")) (|physicalLength!| (($ $ (|Integer|)) "\\spad{physicalLength!(x,n)} changes the physical length of \\spad{x} to be \\spad{n} and returns the new array.")) (|physicalLength| (((|NonNegativeInteger|) $) "\\spad{physicalLength(x)} returns the number of elements \\spad{x} can accomodate before growing")) (|flexibleArray| (($ (|List| |#1|)) "\\spad{flexibleArray(l)} creates a flexible array from the list of elements \\spad{l}"))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-458) 
((|constructor| (NIL "This domain represents AST for conditional expressions.")) (|elseBranch| (((|SpadAst|) $) "thenBranch(\\spad{e}) returns the `else-branch' of `e'.")) (|thenBranch| (((|SpadAst|) $) "\\spad{thenBranch(e)} returns the `then-branch' of `e'.")) (|condition| (((|SpadAst|) $) "\\spad{condition(e)} returns the condition of the if-expression `e'."))) 
NIL 
NIL 
(-459 |p| |n|) 
((|constructor| (NIL "InnerFiniteField(\\spad{p},{}\\spad{n}) implements finite fields with \\spad{p**n} elements where \\spad{p} is assumed prime but does not check. For a version which checks that \\spad{p} is prime,{} see \\spadtype{FiniteField}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((OR (|HasCategory| (-517 |#1|) (QUOTE (-118))) (|HasCategory| (-517 |#1|) (QUOTE (-319)))) (|HasCategory| (-517 |#1|) (QUOTE (-120))) (|HasCategory| (-517 |#1|) (QUOTE (-319))) (|HasCategory| (-517 |#1|) (QUOTE (-118)))) 
(-460 R |Row| |Col| M) 
((|constructor| (NIL "\\spadtype{InnerMatrixLinearAlgebraFunctions} is an internal package which provides standard linear algebra functions on domains in \\spad{MatrixCategory}")) (|inverse| (((|Union| |#4| "failed") |#4|) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square.")) (|generalizedInverse| ((|#4| |#4|) "\\spad{generalizedInverse(m)} returns the generalized (Moore--Penrose) inverse of the matrix \\spad{m},{} \\spadignore{i.e.} the matrix \\spad{h} such that m*h*m=h,{} h*m*h=m,{} m*h and h*m are both symmetric matrices.")) (|determinant| ((|#1| |#4|) "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}. an error message is returned if the matrix is not square.")) (|nullSpace| (((|List| |#3|) |#4|) "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}.")) (|nullity| (((|NonNegativeInteger|) |#4|) "\\spad{nullity(m)} returns the mullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}.")) (|rank| (((|NonNegativeInteger|) |#4|) "\\spad{rank(m)} returns the rank of the matrix \\spad{m}.")) (|rowEchelon| ((|#4| |#4|) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}."))) 
NIL 
((|HasAttribute| |#3| (QUOTE -3995))) 
(-461 R |Row| |Col| M QF |Row2| |Col2| M2) 
((|constructor| (NIL "\\spadtype{InnerMatrixQuotientFieldFunctions} provides functions on matrices over an integral domain which involve the quotient field of that integral domain. The functions rowEchelon and inverse return matrices with entries in the quotient field.")) (|nullSpace| (((|List| |#3|) |#4|) "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}.")) (|inverse| (((|Union| |#8| "failed") |#4|) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square. Note: the result will have entries in the quotient field.")) (|rowEchelon| ((|#8| |#4|) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}. the result will have entries in the quotient field."))) 
NIL 
((|HasAttribute| |#7| (QUOTE -3995))) 
(-462) 
((|constructor| (NIL "This domain represents an `import' of types.")) (|imports| (((|List| (|TypeAst|)) $) "\\spad{imports(x)} returns the list of imported types.")) (|coerce| (($ (|List| (|TypeAst|))) "ts::ImportAst constructs an ImportAst for the list if types `ts'."))) 
NIL 
NIL 
(-463) 
((|constructor| (NIL "This domain represents the `in' iterator syntax.")) (|sequence| (((|SpadAst|) $) "\\spad{sequence(i)} returns the sequence expression being iterated over by `i'.")) (|iterationVar| (((|Identifier|) $) "\\spad{iterationVar(i)} returns the name of the iterating variable of the `in' iterator 'i'"))) 
NIL 
NIL 
(-464 S) 
((|constructor| (NIL "This category describes input byte stream conduits.")) (|readBytes!| (((|NonNegativeInteger|) $ (|ByteBuffer|)) "\\spad{readBytes!(c,b)} reads byte sequences from conduit `c' into the byte buffer `b'. The actual number of bytes written is returned,{} and the length of `b' is set to that amount.")) (|readUInt32!| (((|Maybe| (|UInt32|)) $) "\\spad{readUInt32!(cond)} attempts to read a \\spad{UInt32} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readInt32!| (((|Maybe| (|Int32|)) $) "\\spad{readInt32!(cond)} attempts to read an \\spad{Int32} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readUInt16!| (((|Maybe| (|UInt16|)) $) "\\spad{readUInt16!(cond)} attempts to read a \\spad{UInt16} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readInt16!| (((|Maybe| (|Int16|)) $) "\\spad{readInt16!(cond)} attempts to read an \\spad{Int16} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readUInt8!| (((|Maybe| (|UInt8|)) $) "\\spad{readUInt8!(cond)} attempts to read a \\spad{UInt8} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readInt8!| (((|Maybe| (|Int8|)) $) "\\spad{readInt8!(cond)} attempts to read an \\spad{Int8} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readByte!| (((|Maybe| (|Byte|)) $) "\\spad{readByte!(cond)} attempts to read a byte from the input conduit `cond'. Returns the read byte if successful,{} otherwise \\spad{nothing}."))) 
NIL 
NIL 
(-465) 
((|constructor| (NIL "This category describes input byte stream conduits.")) (|readBytes!| (((|NonNegativeInteger|) $ (|ByteBuffer|)) "\\spad{readBytes!(c,b)} reads byte sequences from conduit `c' into the byte buffer `b'. The actual number of bytes written is returned,{} and the length of `b' is set to that amount.")) (|readUInt32!| (((|Maybe| (|UInt32|)) $) "\\spad{readUInt32!(cond)} attempts to read a \\spad{UInt32} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readInt32!| (((|Maybe| (|Int32|)) $) "\\spad{readInt32!(cond)} attempts to read an \\spad{Int32} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readUInt16!| (((|Maybe| (|UInt16|)) $) "\\spad{readUInt16!(cond)} attempts to read a \\spad{UInt16} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readInt16!| (((|Maybe| (|Int16|)) $) "\\spad{readInt16!(cond)} attempts to read an \\spad{Int16} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readUInt8!| (((|Maybe| (|UInt8|)) $) "\\spad{readUInt8!(cond)} attempts to read a \\spad{UInt8} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readInt8!| (((|Maybe| (|Int8|)) $) "\\spad{readInt8!(cond)} attempts to read an \\spad{Int8} value from the input conduit `cond'. Returns the value if successful,{} otherwise \\spad{nothing}.")) (|readByte!| (((|Maybe| (|Byte|)) $) "\\spad{readByte!(cond)} attempts to read a byte from the input conduit `cond'. Returns the read byte if successful,{} otherwise \\spad{nothing}."))) 
NIL 
NIL 
(-466 GF) 
((|constructor| (NIL "InnerNormalBasisFieldFunctions(GF) (unexposed): This package has functions used by every normal basis finite field extension domain.")) (|minimalPolynomial| (((|SparseUnivariatePolynomial| |#1|) (|Vector| |#1|)) "\\spad{minimalPolynomial(x)} \\undocumented{} See \\axiomFunFrom{minimalPolynomial}{FiniteAlgebraicExtensionField}")) (|normalElement| (((|Vector| |#1|) (|PositiveInteger|)) "\\spad{normalElement(n)} \\undocumented{} See \\axiomFunFrom{normalElement}{FiniteAlgebraicExtensionField}")) (|basis| (((|Vector| (|Vector| |#1|)) (|PositiveInteger|)) "\\spad{basis(n)} \\undocumented{} See \\axiomFunFrom{basis}{FiniteAlgebraicExtensionField}")) (|normal?| (((|Boolean|) (|Vector| |#1|)) "\\spad{normal?(x)} \\undocumented{} See \\axiomFunFrom{normal?}{FiniteAlgebraicExtensionField}")) (|lookup| (((|PositiveInteger|) (|Vector| |#1|)) "\\spad{lookup(x)} \\undocumented{} See \\axiomFunFrom{lookup}{Finite}")) (|inv| (((|Vector| |#1|) (|Vector| |#1|)) "\\spad{inv x} \\undocumented{} See \\axiomFunFrom{inv}{DivisionRing}")) (|trace| (((|Vector| |#1|) (|Vector| |#1|) (|PositiveInteger|)) "\\spad{trace(x,n)} \\undocumented{} See \\axiomFunFrom{trace}{FiniteAlgebraicExtensionField}")) (|norm| (((|Vector| |#1|) (|Vector| |#1|) (|PositiveInteger|)) "\\spad{norm(x,n)} \\undocumented{} See \\axiomFunFrom{norm}{FiniteAlgebraicExtensionField}")) (/ (((|Vector| |#1|) (|Vector| |#1|) (|Vector| |#1|)) "\\spad{x/y} \\undocumented{} See \\axiomFunFrom{/}{Field}")) (* (((|Vector| |#1|) (|Vector| |#1|) (|Vector| |#1|)) "\\spad{x*y} \\undocumented{} See \\axiomFunFrom{*}{SemiGroup}")) (** (((|Vector| |#1|) (|Vector| |#1|) (|Integer|)) "\\spad{x**n} \\undocumented{} See \\axiomFunFrom{**}{DivisionRing}")) (|qPot| (((|Vector| |#1|) (|Vector| |#1|) (|Integer|)) "\\spad{qPot(v,e)} computes \\spad{v**(q**e)},{} interpreting \\spad{v} as an element of normal basis field,{} \\spad{q} the size of the ground field. This is done by a cyclic \\spad{e}-shift of the vector \\spad{v}.")) (|expPot| (((|Vector| |#1|) (|Vector| |#1|) (|SingleInteger|) (|SingleInteger|)) "\\spad{expPot(v,e,d)} returns the sum from \\spad{i = 0} to \\spad{e - 1} of \\spad{v**(q**i*d)},{} interpreting \\spad{v} as an element of a normal basis field and where \\spad{q} is the size of the ground field. Note: for a description of the algorithm,{} see \\spad{T}.Itoh and \\spad{S}.Tsujii,{} \"A fast algorithm for computing multiplicative inverses in GF(2^m) using normal bases\",{} Information and Computation 78,{} pp.171-177,{} 1988.")) (|repSq| (((|Vector| |#1|) (|Vector| |#1|) (|NonNegativeInteger|)) "\\spad{repSq(v,e)} computes \\spad{v**e} by repeated squaring,{} interpreting \\spad{v} as an element of a normal basis field.")) (|dAndcExp| (((|Vector| |#1|) (|Vector| |#1|) (|NonNegativeInteger|) (|SingleInteger|)) "\\spad{dAndcExp(v,n,k)} computes \\spad{v**e} interpreting \\spad{v} as an element of normal basis field. A divide and conquer algorithm similar to the one from \\spad{D}.\\spad{R}.Stinson,{} \"Some observations on parallel Algorithms for fast exponentiation in GF(2^n)\",{} Siam \\spad{J}. Computation,{} Vol.19,{} No.4,{} pp.711-717,{} August 1990 is used. Argument \\spad{k} is a parameter of this algorithm.")) (|xn| (((|SparseUnivariatePolynomial| |#1|) (|NonNegativeInteger|)) "\\spad{xn(n)} returns the polynomial \\spad{x**n-1}.")) (|pol| (((|SparseUnivariatePolynomial| |#1|) (|Vector| |#1|)) "\\spad{pol(v)} turns the vector \\spad{[v0,...,vn]} into the polynomial \\spad{v0+v1*x+ ... + vn*x**n}.")) (|index| (((|Vector| |#1|) (|PositiveInteger|) (|PositiveInteger|)) "\\spad{index(n,m)} is a index function for vectors of length \\spad{n} over the ground field.")) (|random| (((|Vector| |#1|) (|PositiveInteger|)) "\\spad{random(n)} creates a vector over the ground field with random entries.")) (|setFieldInfo| (((|Void|) (|Vector| (|List| (|Record| (|:| |value| |#1|) (|:| |index| (|SingleInteger|))))) |#1|) "\\spad{setFieldInfo(m,p)} initializes the field arithmetic,{} where \\spad{m} is the multiplication table and \\spad{p} is the respective normal element of the ground field GF."))) 
NIL 
NIL 
(-467) 
((|constructor| (NIL "This domain provides representation for binary files open for input operations. `Binary' here means that the conduits do not interpret their contents.")) (|position!| (((|SingleInteger|) $ (|SingleInteger|)) "position(\\spad{f},{}\\spad{p}) sets the current byte-position to `i'.")) (|position| (((|SingleInteger|) $) "\\spad{position(f)} returns the current byte-position in the file `f'.")) (|isOpen?| (((|Boolean|) $) "\\spad{isOpen?(ifile)} holds if `ifile' is in open state.")) (|eof?| (((|Boolean|) $) "\\spad{eof?(ifile)} holds when the last read reached end of file.")) (|inputBinaryFile| (($ (|String|)) "\\spad{inputBinaryFile(f)} returns an input conduit obtained by opening the file named by `f' as a binary file.") (($ (|FileName|)) "\\spad{inputBinaryFile(f)} returns an input conduit obtained by opening the file named by `f' as a binary file."))) 
NIL 
NIL 
(-468 R) 
((|constructor| (NIL "This package provides operations to create incrementing functions.")) (|incrementBy| (((|Mapping| |#1| |#1|) |#1|) "\\spad{incrementBy(n)} produces a function which adds \\spad{n} to whatever argument it is given. For example,{} if {\\spad{f} := increment(\\spad{n})} then \\spad{f x} is \\spad{x+n}.")) (|increment| (((|Mapping| |#1| |#1|)) "\\spad{increment()} produces a function which adds \\spad{1} to whatever argument it is given. For example,{} if {\\spad{f} := increment()} then \\spad{f x} is \\spad{x+1}."))) 
NIL 
NIL 
(-469 |Varset|) 
((|constructor| (NIL "\\indented{2}{IndexedExponents of an ordered set of variables gives a representation} for the degree of polynomials in commuting variables. It gives an ordered pairing of non negative integer exponents with variables"))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| (-694) (QUOTE (-1013))))) 
(-470 K -3092 |Par|) 
((|constructor| (NIL "This package is the inner package to be used by NumericRealEigenPackage and NumericComplexEigenPackage for the computation of numeric eigenvalues and eigenvectors.")) (|innerEigenvectors| (((|List| (|Record| (|:| |outval| |#2|) (|:| |outmult| (|Integer|)) (|:| |outvect| (|List| (|Matrix| |#2|))))) (|Matrix| |#1|) |#3| (|Mapping| (|Factored| (|SparseUnivariatePolynomial| |#1|)) (|SparseUnivariatePolynomial| |#1|))) "\\spad{innerEigenvectors(m,eps,factor)} computes explicitly the eigenvalues and the correspondent eigenvectors of the matrix \\spad{m}. The parameter \\spad{eps} determines the type of the output,{} \\spad{factor} is the univariate factorizer to br used to reduce the characteristic polynomial into irreducible factors.")) (|solve1| (((|List| |#2|) (|SparseUnivariatePolynomial| |#1|) |#3|) "\\spad{solve1(pol, eps)} finds the roots of the univariate polynomial polynomial \\spad{pol} to precision eps. If \\spad{K} is \\spad{Fraction Integer} then only the real roots are returned,{} if \\spad{K} is \\spad{Complex Fraction Integer} then all roots are found.")) (|charpol| (((|SparseUnivariatePolynomial| |#1|) (|Matrix| |#1|)) "\\spad{charpol(m)} computes the characteristic polynomial of a matrix \\spad{m} with entries in \\spad{K}. This function returns a polynomial over \\spad{K},{} while the general one (that is in EiegenPackage) returns Fraction \\spad{P} \\spad{K}"))) 
NIL 
NIL 
(-471) 
NIL 
NIL 
NIL 
(-472) 
((|constructor| (NIL "Default infinity signatures for the interpreter; Date Created: 4 Oct 1989 Date Last Updated: 4 Oct 1989")) (|minusInfinity| (((|OrderedCompletion| (|Integer|))) "\\spad{minusInfinity()} returns minusInfinity.")) (|plusInfinity| (((|OrderedCompletion| (|Integer|))) "\\spad{plusInfinity()} returns plusIinfinity.")) (|infinity| (((|OnePointCompletion| (|Integer|))) "\\spad{infinity()} returns infinity."))) 
NIL 
NIL 
(-473) 
((|constructor| (NIL "Domain of parsed forms which can be passed to the interpreter. This is also the interface between algebra code and facilities in the interpreter.")) (|compile| (((|Symbol|) (|Symbol|) (|List| $)) "\\spad{compile(f, [t1,...,tn])} forces the interpreter to compile the function \\spad{f} with signature \\spad{(t1,...,tn) -> ?}. returns the symbol \\spad{f} if successful. Error: if \\spad{f} was not defined beforehand in the interpreter,{} or if the \\spad{ti}'s are not valid types,{} or if the compiler fails.")) (|declare| (((|Symbol|) (|List| $)) "\\spad{declare(t)} returns a name \\spad{f} such that \\spad{f} has been declared to the interpreter to be of type \\spad{t},{} but has not been assigned a value yet. Note: \\spad{t} should be created as \\spad{devaluate(T)\\$Lisp} where \\spad{T} is the actual type of \\spad{f} (this hack is required for the case where \\spad{T} is a mapping type).")) (|parseString| (($ (|String|)) "parseString is the inverse of unparse. It parses a string to InputForm.")) (|unparse| (((|String|) $) "\\spad{unparse(f)} returns a string \\spad{s} such that the parser would transform \\spad{s} to \\spad{f}. Error: if \\spad{f} is not the parsed form of a string.")) (|flatten| (($ $) "\\spad{flatten(s)} returns an input form corresponding to \\spad{s} with all the nested operations flattened to triples using new local variables. If \\spad{s} is a piece of code,{} this speeds up the compilation tremendously later on.")) (|One| (($) "\\spad{1} returns the input form corresponding to 1.")) (|Zero| (($) "\\spad{0} returns the input form corresponding to 0.")) (** (($ $ (|Integer|)) "\\spad{a ** b} returns the input form corresponding to \\spad{a ** b}.") (($ $ (|NonNegativeInteger|)) "\\spad{a ** b} returns the input form corresponding to \\spad{a ** b}.")) (/ (($ $ $) "\\spad{a / b} returns the input form corresponding to \\spad{a / b}.")) (* (($ $ $) "\\spad{a * b} returns the input form corresponding to \\spad{a * b}.")) (+ (($ $ $) "\\spad{a + b} returns the input form corresponding to \\spad{a + b}.")) (|lambda| (($ $ (|List| (|Symbol|))) "\\spad{lambda(code, [x1,...,xn])} returns the input form corresponding to \\spad{(x1,...,xn) +-> code} if \\spad{n > 1},{} or to \\spad{x1 +-> code} if \\spad{n = 1}.")) (|function| (($ $ (|List| (|Symbol|)) (|Symbol|)) "\\spad{function(code, [x1,...,xn], f)} returns the input form corresponding to \\spad{f(x1,...,xn) == code}.")) (|binary| (($ $ (|List| $)) "\\spad{binary(op, [a1,...,an])} returns the input form corresponding to \\spad{a1 op a2 op ... op an}.")) (|convert| (($ (|SExpression|)) "\\spad{convert(s)} makes \\spad{s} into an input form.")) (|interpret| (((|Any|) $) "\\spad{interpret(f)} passes \\spad{f} to the interpreter."))) 
NIL 
NIL 
(-474 R) 
((|constructor| (NIL "Tools for manipulating input forms.")) (|interpret| ((|#1| (|InputForm|)) "\\spad{interpret(f)} passes \\spad{f} to the interpreter,{} and transforms the result into an object of type \\spad{R}.")) (|packageCall| (((|InputForm|) (|Symbol|)) "\\spad{packageCall(f)} returns the input form corresponding to \\spad{f}\\$\\spad{R}."))) 
NIL 
NIL 
(-475 |Coef| UTS) 
((|constructor| (NIL "This package computes infinite products of univariate Taylor series over an integral domain of characteristic 0.")) (|generalInfiniteProduct| ((|#2| |#2| (|Integer|) (|Integer|)) "\\spad{generalInfiniteProduct(f(x),a,d)} computes \\spad{product(n=a,a+d,a+2*d,...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|oddInfiniteProduct| ((|#2| |#2|) "\\spad{oddInfiniteProduct(f(x))} computes \\spad{product(n=1,3,5...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|evenInfiniteProduct| ((|#2| |#2|) "\\spad{evenInfiniteProduct(f(x))} computes \\spad{product(n=2,4,6...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|infiniteProduct| ((|#2| |#2|) "\\spad{infiniteProduct(f(x))} computes \\spad{product(n=1,2,3...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1."))) 
NIL 
NIL 
(-476 K -3092 |Par|) 
((|constructor| (NIL "This is an internal package for computing approximate solutions to systems of polynomial equations. The parameter \\spad{K} specifies the coefficient field of the input polynomials and must be either \\spad{Fraction(Integer)} or \\spad{Complex(Fraction Integer)}. The parameter \\spad{F} specifies where the solutions must lie and can be one of the following: \\spad{Float},{} \\spad{Fraction(Integer)},{} \\spad{Complex(Float)},{} \\spad{Complex(Fraction Integer)}. The last parameter specifies the type of the precision operand and must be either \\spad{Fraction(Integer)} or \\spad{Float}.")) (|makeEq| (((|List| (|Equation| (|Polynomial| |#2|))) (|List| |#2|) (|List| (|Symbol|))) "\\spad{makeEq(lsol,lvar)} returns a list of equations formed by corresponding members of \\spad{lvar} and \\spad{lsol}.")) (|innerSolve| (((|List| (|List| |#2|)) (|List| (|Polynomial| |#1|)) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|)) |#3|) "\\spad{innerSolve(lnum,lden,lvar,eps)} returns a list of solutions of the system of polynomials \\spad{lnum},{} with the side condition that none of the members of \\spad{lden} vanish identically on any solution. Each solution is expressed as a list corresponding to the list of variables in \\spad{lvar} and with precision specified by \\spad{eps}.")) (|innerSolve1| (((|List| |#2|) (|Polynomial| |#1|) |#3|) "\\spad{innerSolve1(p,eps)} returns the list of the zeros of the polynomial \\spad{p} with precision \\spad{eps}.") (((|List| |#2|) (|SparseUnivariatePolynomial| |#1|) |#3|) "\\spad{innerSolve1(up,eps)} returns the list of the zeros of the univariate polynomial \\spad{up} with precision \\spad{eps}."))) 
NIL 
NIL 
(-477 R BP |pMod| |nextMod|) 
((|reduction| ((|#2| |#2| |#1|) "\\spad{reduction(f,p)} reduces the coefficients of the polynomial \\spad{f} modulo the prime \\spad{p}.")) (|modularGcd| ((|#2| (|List| |#2|)) "\\spad{modularGcd(listf)} computes the gcd of the list of polynomials \\spad{listf} by modular methods.")) (|modularGcdPrimitive| ((|#2| (|List| |#2|)) "\\spad{modularGcdPrimitive(f1,f2)} computes the gcd of the two polynomials \\spad{f1} and \\spad{f2} by modular methods."))) 
NIL 
NIL 
(-478 OV E R P) 
((|constructor| (NIL "\\indented{2}{This is an inner package for factoring multivariate polynomials} over various coefficient domains in characteristic 0. The univariate factor operation is passed as a parameter. Multivariate hensel lifting is used to lift the univariate factorization")) (|factor| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|) (|Mapping| (|Factored| (|SparseUnivariatePolynomial| |#3|)) (|SparseUnivariatePolynomial| |#3|))) "\\spad{factor(p,ufact)} factors the multivariate polynomial \\spad{p} by specializing variables and calling the univariate factorizer \\spad{ufact}. \\spad{p} is represented as a univariate polynomial with multivariate coefficients.") (((|Factored| |#4|) |#4| (|Mapping| (|Factored| (|SparseUnivariatePolynomial| |#3|)) (|SparseUnivariatePolynomial| |#3|))) "\\spad{factor(p,ufact)} factors the multivariate polynomial \\spad{p} by specializing variables and calling the univariate factorizer \\spad{ufact}."))) 
NIL 
NIL 
(-479 K UP |Coef| UTS) 
((|constructor| (NIL "This package computes infinite products of univariate Taylor series over an arbitrary finite field.")) (|generalInfiniteProduct| ((|#4| |#4| (|Integer|) (|Integer|)) "\\spad{generalInfiniteProduct(f(x),a,d)} computes \\spad{product(n=a,a+d,a+2*d,...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|oddInfiniteProduct| ((|#4| |#4|) "\\spad{oddInfiniteProduct(f(x))} computes \\spad{product(n=1,3,5...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|evenInfiniteProduct| ((|#4| |#4|) "\\spad{evenInfiniteProduct(f(x))} computes \\spad{product(n=2,4,6...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|infiniteProduct| ((|#4| |#4|) "\\spad{infiniteProduct(f(x))} computes \\spad{product(n=1,2,3...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1."))) 
NIL 
NIL 
(-480 |Coef| UTS) 
((|constructor| (NIL "This package computes infinite products of univariate Taylor series over a field of prime order.")) (|generalInfiniteProduct| ((|#2| |#2| (|Integer|) (|Integer|)) "\\spad{generalInfiniteProduct(f(x),a,d)} computes \\spad{product(n=a,a+d,a+2*d,...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|oddInfiniteProduct| ((|#2| |#2|) "\\spad{oddInfiniteProduct(f(x))} computes \\spad{product(n=1,3,5...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|evenInfiniteProduct| ((|#2| |#2|) "\\spad{evenInfiniteProduct(f(x))} computes \\spad{product(n=2,4,6...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|infiniteProduct| ((|#2| |#2|) "\\spad{infiniteProduct(f(x))} computes \\spad{product(n=1,2,3...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1."))) 
NIL 
NIL 
(-481 R UP) 
((|constructor| (NIL "Find the sign of a polynomial around a point or infinity.")) (|signAround| (((|Union| (|Integer|) #1="failed") |#2| |#1| (|Mapping| (|Union| (|Integer|) #1#) |#1|)) "\\spad{signAround(u,r,f)} \\undocumented") (((|Union| (|Integer|) #1#) |#2| |#1| (|Integer|) (|Mapping| (|Union| (|Integer|) #1#) |#1|)) "\\spad{signAround(u,r,i,f)} \\undocumented") (((|Union| (|Integer|) #1#) |#2| (|Integer|) (|Mapping| (|Union| (|Integer|) #1#) |#1|)) "\\spad{signAround(u,i,f)} \\undocumented"))) 
NIL 
NIL 
(-482 S) 
((|constructor| (NIL "An \\spad{IntegerNumberSystem} is a model for the integers.")) (|invmod| (($ $ $) "\\spad{invmod(a,b)},{} \\spad{0<=a<b>1},{} \\spad{(a,b)=1} means \\spad{1/a mod b}.")) (|powmod| (($ $ $ $) "\\spad{powmod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a**b mod p}.")) (|mulmod| (($ $ $ $) "\\spad{mulmod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a*b mod p}.")) (|submod| (($ $ $ $) "\\spad{submod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a-b mod p}.")) (|addmod| (($ $ $ $) "\\spad{addmod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a+b mod p}.")) (|mask| (($ $) "\\spad{mask(n)} returns \\spad{2**n-1} (an \\spad{n} bit mask).")) (|dec| (($ $) "\\spad{dec(x)} returns \\spad{x - 1}.")) (|inc| (($ $) "\\spad{inc(x)} returns \\spad{x + 1}.")) (|copy| (($ $) "\\spad{copy(n)} gives a copy of \\spad{n}.")) (|random| (($ $) "\\spad{random(a)} creates a random element from 0 to \\spad{a-1}.") (($) "\\spad{random()} creates a random element.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(n)} creates a rational number,{} or returns \"failed\" if this is not possible.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(n)} creates a rational number (see \\spadtype{Fraction Integer})..")) (|rational?| (((|Boolean|) $) "\\spad{rational?(n)} tests if \\spad{n} is a rational number (see \\spadtype{Fraction Integer}).")) (|symmetricRemainder| (($ $ $) "\\spad{symmetricRemainder(a,b)} (where \\spad{b > 1}) yields \\spad{r} where \\spad{ -b/2 <= r < b/2 }.")) (|positiveRemainder| (($ $ $) "\\spad{positiveRemainder(a,b)} (where \\spad{b > 1}) yields \\spad{r} where \\spad{0 <= r < b} and \\spad{r == a rem b}.")) (|bit?| (((|Boolean|) $ $) "\\spad{bit?(n,i)} returns \\spad{true} if and only if \\spad{i}-th bit of \\spad{n} is a 1.")) (|shift| (($ $ $) "\\spad{shift(a,i)} shift \\spad{a} by \\spad{i} digits.")) (|length| (($ $) "\\spad{length(a)} length of \\spad{a} in digits.")) (|base| (($) "\\spad{base()} returns the base for the operations of \\spad{IntegerNumberSystem}.")) (|multiplicativeValuation| ((|attribute|) "euclideanSize(a*b) returns \\spad{euclideanSize(a)*euclideanSize(b)}.")) (|even?| (((|Boolean|) $) "\\spad{even?(n)} returns \\spad{true} if and only if \\spad{n} is even.")) (|odd?| (((|Boolean|) $) "\\spad{odd?(n)} returns \\spad{true} if and only if \\spad{n} is odd."))) 
NIL 
NIL 
(-483) 
((|constructor| (NIL "An \\spad{IntegerNumberSystem} is a model for the integers.")) (|invmod| (($ $ $) "\\spad{invmod(a,b)},{} \\spad{0<=a<b>1},{} \\spad{(a,b)=1} means \\spad{1/a mod b}.")) (|powmod| (($ $ $ $) "\\spad{powmod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a**b mod p}.")) (|mulmod| (($ $ $ $) "\\spad{mulmod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a*b mod p}.")) (|submod| (($ $ $ $) "\\spad{submod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a-b mod p}.")) (|addmod| (($ $ $ $) "\\spad{addmod(a,b,p)},{} \\spad{0<=a,b<p>1},{} means \\spad{a+b mod p}.")) (|mask| (($ $) "\\spad{mask(n)} returns \\spad{2**n-1} (an \\spad{n} bit mask).")) (|dec| (($ $) "\\spad{dec(x)} returns \\spad{x - 1}.")) (|inc| (($ $) "\\spad{inc(x)} returns \\spad{x + 1}.")) (|copy| (($ $) "\\spad{copy(n)} gives a copy of \\spad{n}.")) (|random| (($ $) "\\spad{random(a)} creates a random element from 0 to \\spad{a-1}.") (($) "\\spad{random()} creates a random element.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(n)} creates a rational number,{} or returns \"failed\" if this is not possible.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(n)} creates a rational number (see \\spadtype{Fraction Integer})..")) (|rational?| (((|Boolean|) $) "\\spad{rational?(n)} tests if \\spad{n} is a rational number (see \\spadtype{Fraction Integer}).")) (|symmetricRemainder| (($ $ $) "\\spad{symmetricRemainder(a,b)} (where \\spad{b > 1}) yields \\spad{r} where \\spad{ -b/2 <= r < b/2 }.")) (|positiveRemainder| (($ $ $) "\\spad{positiveRemainder(a,b)} (where \\spad{b > 1}) yields \\spad{r} where \\spad{0 <= r < b} and \\spad{r == a rem b}.")) (|bit?| (((|Boolean|) $ $) "\\spad{bit?(n,i)} returns \\spad{true} if and only if \\spad{i}-th bit of \\spad{n} is a 1.")) (|shift| (($ $ $) "\\spad{shift(a,i)} shift \\spad{a} by \\spad{i} digits.")) (|length| (($ $) "\\spad{length(a)} length of \\spad{a} in digits.")) (|base| (($) "\\spad{base()} returns the base for the operations of \\spad{IntegerNumberSystem}.")) (|multiplicativeValuation| ((|attribute|) "euclideanSize(a*b) returns \\spad{euclideanSize(a)*euclideanSize(b)}.")) (|even?| (((|Boolean|) $) "\\spad{even?(n)} returns \\spad{true} if and only if \\spad{n} is even.")) (|odd?| (((|Boolean|) $) "\\spad{odd?(n)} returns \\spad{true} if and only if \\spad{n} is odd."))) 
((-3992 . T) (-3993 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-484) 
((|constructor| (NIL "\\spadtype{Integer} provides the domain of arbitrary precision integers.")) (|noetherian| ((|attribute|) "ascending chain condition on ideals.")) (|canonicalsClosed| ((|attribute|) "two positives multiply to give positive.")) (|canonical| ((|attribute|) "mathematical equality is data structure equality."))) 
((-3982 . T) (-3986 . T) (-3981 . T) (-3992 . T) (-3993 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-485) 
((|constructor| (NIL "This domain is a datatype for (signed) integer values of precision 16 bits."))) 
NIL 
NIL 
(-486) 
((|constructor| (NIL "This domain is a datatype for (signed) integer values of precision 32 bits."))) 
NIL 
NIL 
(-487) 
((|constructor| (NIL "This domain is a datatype for (signed) integer values of precision 64 bits."))) 
NIL 
NIL 
(-488) 
((|constructor| (NIL "This domain is a datatype for (signed) integer values of precision 8 bits."))) 
NIL 
NIL 
(-489 |Key| |Entry| |addDom|) 
((|constructor| (NIL "This domain is used to provide a conditional \"add\" domain for the implementation of \\spadtype{Table}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) 
(-490 R -3092) 
((|constructor| (NIL "This package provides functions for the integration of algebraic integrands over transcendental functions.")) (|algint| (((|IntegrationResult| |#2|) |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Mapping| (|SparseUnivariatePolynomial| |#2|) (|SparseUnivariatePolynomial| |#2|))) "\\spad{algint(f, x, y, d)} returns the integral of \\spad{f(x,y)dx} where \\spad{y} is an algebraic function of \\spad{x}; \\spad{d} is the derivation to use on \\spad{k[x]}."))) 
NIL 
NIL 
(-491 R0 -3092 UP UPUP R) 
((|constructor| (NIL "This package provides functions for integrating a function on an algebraic curve.")) (|palginfieldint| (((|Union| |#5| "failed") |#5| (|Mapping| |#3| |#3|)) "\\spad{palginfieldint(f, d)} returns an algebraic function \\spad{g} such that \\spad{dg = f} if such a \\spad{g} exists,{} \"failed\" otherwise. Argument \\spad{f} must be a pure algebraic function.")) (|palgintegrate| (((|IntegrationResult| |#5|) |#5| (|Mapping| |#3| |#3|)) "\\spad{palgintegrate(f, d)} integrates \\spad{f} with respect to the derivation \\spad{d}. Argument \\spad{f} must be a pure algebraic function.")) (|algintegrate| (((|IntegrationResult| |#5|) |#5| (|Mapping| |#3| |#3|)) "\\spad{algintegrate(f, d)} integrates \\spad{f} with respect to the derivation \\spad{d}."))) 
NIL 
NIL 
(-492) 
((|constructor| (NIL "This package provides functions to lookup bits in integers")) (|bitTruth| (((|Boolean|) (|Integer|) (|Integer|)) "\\spad{bitTruth(n,m)} returns \\spad{true} if coefficient of 2**m in abs(\\spad{n}) is 1")) (|bitCoef| (((|Integer|) (|Integer|) (|Integer|)) "\\spad{bitCoef(n,m)} returns the coefficient of 2**m in abs(\\spad{n})")) (|bitLength| (((|Integer|) (|Integer|)) "\\spad{bitLength(n)} returns the number of bits to represent abs(\\spad{n})"))) 
NIL 
NIL 
(-493 R) 
((|constructor| (NIL "\\indented{1}{+ Author: Mike Dewar} + Date Created: November 1996 + Date Last Updated: + Basic Functions: + Related Constructors: + Also See: + AMS Classifications: + Keywords: + References: + Description: + This category implements of interval arithmetic and transcendental + functions over intervals.")) (|contains?| (((|Boolean|) $ |#1|) "\\spad{contains?(i,f)} returns \\spad{true} if \\axiom{\\spad{f}} is contained within the interval \\axiom{\\spad{i}},{} \\spad{false} otherwise.")) (|negative?| (((|Boolean|) $) "\\spad{negative?(u)} returns \\axiom{\\spad{true}} if every element of \\spad{u} is negative,{} \\axiom{\\spad{false}} otherwise.")) (|positive?| (((|Boolean|) $) "\\spad{positive?(u)} returns \\axiom{\\spad{true}} if every element of \\spad{u} is positive,{} \\axiom{\\spad{false}} otherwise.")) (|width| ((|#1| $) "\\spad{width(u)} returns \\axiom{sup(\\spad{u}) - inf(\\spad{u})}.")) (|sup| ((|#1| $) "\\spad{sup(u)} returns the supremum of \\axiom{\\spad{u}}.")) (|inf| ((|#1| $) "\\spad{inf(u)} returns the infinum of \\axiom{\\spad{u}}.")) (|qinterval| (($ |#1| |#1|) "\\spad{qinterval(inf,sup)} creates a new interval \\axiom{[\\spad{inf},{}\\spad{sup}]},{} without checking the ordering on the elements.")) (|interval| (($ (|Fraction| (|Integer|))) "\\spad{interval(f)} creates a new interval around \\spad{f}.") (($ |#1|) "\\spad{interval(f)} creates a new interval around \\spad{f}.") (($ |#1| |#1|) "\\spad{interval(inf,sup)} creates a new interval,{} either \\axiom{[\\spad{inf},{}\\spad{sup}]} if \\axiom{\\spad{inf} <= \\spad{sup}} or \\axiom{[\\spad{sup},{}in]} otherwise."))) 
((-3769 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-494 S) 
((|constructor| (NIL "The category of commutative integral domains,{} \\spadignore{i.e.} commutative rings with no zero divisors. \\blankline Conditional attributes: \\indented{2}{canonicalUnitNormal\\tab{20}the canonical field is the same for all associates} \\indented{2}{canonicalsClosed\\tab{20}the product of two canonicals is itself canonical}")) (|unit?| (((|Boolean|) $) "\\spad{unit?(x)} tests whether \\spad{x} is a unit,{} \\spadignore{i.e.} is invertible.")) (|associates?| (((|Boolean|) $ $) "\\spad{associates?(x,y)} tests whether \\spad{x} and \\spad{y} are associates,{} \\spadignore{i.e.} differ by a unit factor.")) (|unitCanonical| (($ $) "\\spad{unitCanonical(x)} returns \\spad{unitNormal(x).canonical}.")) (|unitNormal| (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) "\\spad{unitNormal(x)} tries to choose a canonical element from the associate class of \\spad{x}. The attribute canonicalUnitNormal,{} if asserted,{} means that the \"canonical\" element is the same across all associates of \\spad{x} if \\spad{unitNormal(x) = [u,c,a]} then \\spad{u*c = x},{} \\spad{a*u = 1}.")) (|exquo| (((|Union| $ "failed") $ $) "\\spad{exquo(a,b)} either returns an element \\spad{c} such that \\spad{c*b=a} or \"failed\" if no such element can be found."))) 
NIL 
NIL 
(-495) 
((|constructor| (NIL "The category of commutative integral domains,{} \\spadignore{i.e.} commutative rings with no zero divisors. \\blankline Conditional attributes: \\indented{2}{canonicalUnitNormal\\tab{20}the canonical field is the same for all associates} \\indented{2}{canonicalsClosed\\tab{20}the product of two canonicals is itself canonical}")) (|unit?| (((|Boolean|) $) "\\spad{unit?(x)} tests whether \\spad{x} is a unit,{} \\spadignore{i.e.} is invertible.")) (|associates?| (((|Boolean|) $ $) "\\spad{associates?(x,y)} tests whether \\spad{x} and \\spad{y} are associates,{} \\spadignore{i.e.} differ by a unit factor.")) (|unitCanonical| (($ $) "\\spad{unitCanonical(x)} returns \\spad{unitNormal(x).canonical}.")) (|unitNormal| (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) "\\spad{unitNormal(x)} tries to choose a canonical element from the associate class of \\spad{x}. The attribute canonicalUnitNormal,{} if asserted,{} means that the \"canonical\" element is the same across all associates of \\spad{x} if \\spad{unitNormal(x) = [u,c,a]} then \\spad{u*c = x},{} \\spad{a*u = 1}.")) (|exquo| (((|Union| $ "failed") $ $) "\\spad{exquo(a,b)} either returns an element \\spad{c} such that \\spad{c*b=a} or \"failed\" if no such element can be found."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-496 R -3092) 
((|constructor| (NIL "This package provides functions for integration,{} limited integration,{} extended integration and the risch differential equation for elemntary functions.")) (|lfextlimint| (((|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) #1="failed") |#2| (|Symbol|) (|Kernel| |#2|) (|List| (|Kernel| |#2|))) "\\spad{lfextlimint(f,x,k,[k1,...,kn])} returns functions \\spad{[h, c]} such that \\spad{dh/dx = f - c dk/dx}. Value \\spad{h} is looked for in a field containing \\spad{f} and \\spad{k1},{}...,{}kn (the \\spad{ki}'s must be logs).")) (|lfintegrate| (((|IntegrationResult| |#2|) |#2| (|Symbol|)) "\\spad{lfintegrate(f, x)} = \\spad{g} such that \\spad{dg/dx = f}.")) (|lfinfieldint| (((|Union| |#2| "failed") |#2| (|Symbol|)) "\\spad{lfinfieldint(f, x)} returns a function \\spad{g} such that \\spad{dg/dx = f} if \\spad{g} exists,{} \"failed\" otherwise.")) (|lflimitedint| (((|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) "failed") |#2| (|Symbol|) (|List| |#2|)) "\\spad{lflimitedint(f,x,[g1,...,gn])} returns functions \\spad{[h,[[ci, gi]]]} such that the \\spad{gi}'s are among \\spad{[g1,...,gn]},{} and \\spad{d(h+sum(ci log(gi)))/dx = f},{} if possible,{} \"failed\" otherwise.")) (|lfextendedint| (((|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) #1#) |#2| (|Symbol|) |#2|) "\\spad{lfextendedint(f, x, g)} returns functions \\spad{[h, c]} such that \\spad{dh/dx = f - cg},{} if (\\spad{h},{} \\spad{c}) exist,{} \"failed\" otherwise."))) 
NIL 
NIL 
(-497 I) 
((|constructor| (NIL "\\indented{1}{This Package contains basic methods for integer factorization.} The factor operation employs trial division up to 10,{}000. It then tests to see if \\spad{n} is a perfect power before using Pollards rho method. Because Pollards method may fail,{} the result of factor may contain composite factors. We should also employ Lenstra's eliptic curve method.")) (|PollardSmallFactor| (((|Union| |#1| "failed") |#1|) "\\spad{PollardSmallFactor(n)} returns a factor of \\spad{n} or \"failed\" if no one is found")) (|BasicMethod| (((|Factored| |#1|) |#1|) "\\spad{BasicMethod(n)} returns the factorization of integer \\spad{n} by trial division")) (|squareFree| (((|Factored| |#1|) |#1|) "\\spad{squareFree(n)} returns the square free factorization of integer \\spad{n}")) (|factor| (((|Factored| |#1|) |#1|) "\\spad{factor(n)} returns the full factorization of integer \\spad{n}"))) 
NIL 
NIL 
(-498 R -3092 L) 
((|constructor| (NIL "This internal package rationalises integrands on curves of the form: \\indented{2}{\\spad{y\\^2 = a x\\^2 + b x + c}} \\indented{2}{\\spad{y\\^2 = (a x + b) / (c x + d)}} \\indented{2}{\\spad{f(x, y) = 0} where \\spad{f} has degree 1 in \\spad{x}} The rationalization is done for integration,{} limited integration,{} extended integration and the risch differential equation.")) (|palgLODE0| (((|Record| (|:| |particular| (|Union| |#2| #1="failed")) (|:| |basis| (|List| |#2|))) |#3| |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Kernel| |#2|) |#2| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) "\\spad{palgLODE0(op,g,x,y,z,t,c)} returns the solution of \\spad{op f = g} Argument \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{f(x,y)dx = c f(t,y) dy}; \\spad{c} and \\spad{t} are rational functions of \\spad{y}.") (((|Record| (|:| |particular| (|Union| |#2| #1#)) (|:| |basis| (|List| |#2|))) |#3| |#2| (|Kernel| |#2|) (|Kernel| |#2|) |#2| (|SparseUnivariatePolynomial| |#2|)) "\\spad{palgLODE0(op, g, x, y, d, p)} returns the solution of \\spad{op f = g}. Argument \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{d(x)\\^2y(x)\\^2 = P(x)}.")) (|lift| (((|SparseUnivariatePolynomial| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) (|SparseUnivariatePolynomial| |#2|) (|Kernel| |#2|)) "\\spad{lift(u,k)} \\undocumented")) (|multivariate| ((|#2| (|SparseUnivariatePolynomial| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) (|Kernel| |#2|) |#2|) "\\spad{multivariate(u,k,f)} \\undocumented")) (|univariate| (((|SparseUnivariatePolynomial| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|SparseUnivariatePolynomial| |#2|)) "\\spad{univariate(f,k,k,p)} \\undocumented")) (|palgRDE0| (((|Union| |#2| #2="failed") |#2| |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Mapping| (|Union| |#2| #2#) |#2| |#2| (|Symbol|)) (|Kernel| |#2|) |#2| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) "\\spad{palgRDE0(f, g, x, y, foo, t, c)} returns a function \\spad{z(x,y)} such that \\spad{dz/dx + n * df/dx z(x,y) = g(x,y)} if such a \\spad{z} exists,{} and \"failed\" otherwise. Argument \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{f(x,y)dx = c f(t,y) dy}; \\spad{c} and \\spad{t} are rational functions of \\spad{y}. Argument \\spad{foo},{} called by \\spad{foo(a, b, x)},{} is a function that solves \\spad{du/dx + n * da/dx u(x) = u(x)} for an unknown \\spad{u(x)} not involving \\spad{y}.") (((|Union| |#2| #2#) |#2| |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Mapping| (|Union| |#2| #2#) |#2| |#2| (|Symbol|)) |#2| (|SparseUnivariatePolynomial| |#2|)) "\\spad{palgRDE0(f, g, x, y, foo, d, p)} returns a function \\spad{z(x,y)} such that \\spad{dz/dx + n * df/dx z(x,y) = g(x,y)} if such a \\spad{z} exists,{} and \"failed\" otherwise. Argument \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{d(x)\\^2y(x)\\^2 = P(x)}. Argument \\spad{foo},{} called by \\spad{foo(a, b, x)},{} is a function that solves \\spad{du/dx + n * da/dx u(x) = u(x)} for an unknown \\spad{u(x)} not involving \\spad{y}.")) (|palglimint0| (((|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) #3="failed") |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|List| |#2|) (|Kernel| |#2|) |#2| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) "\\spad{palglimint0(f, x, y, [u1,...,un], z, t, c)} returns functions \\spad{[h,[[ci, ui]]]} such that the \\spad{ui}'s are among \\spad{[u1,...,un]} and \\spad{d(h + sum(ci log(ui)))/dx = f(x,y)} if such functions exist,{} and \"failed\" otherwise. Argument \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{f(x,y)dx = c f(t,y) dy}; \\spad{c} and \\spad{t} are rational functions of \\spad{y}.") (((|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) #3#) |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|List| |#2|) |#2| (|SparseUnivariatePolynomial| |#2|)) "\\spad{palglimint0(f, x, y, [u1,...,un], d, p)} returns functions \\spad{[h,[[ci, ui]]]} such that the \\spad{ui}'s are among \\spad{[u1,...,un]} and \\spad{d(h + sum(ci log(ui)))/dx = f(x,y)} if such functions exist,{} and \"failed\" otherwise. Argument \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{d(x)\\^2y(x)\\^2 = P(x)}.")) (|palgextint0| (((|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) #4="failed") |#2| (|Kernel| |#2|) (|Kernel| |#2|) |#2| (|Kernel| |#2|) |#2| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) "\\spad{palgextint0(f, x, y, g, z, t, c)} returns functions \\spad{[h, d]} such that \\spad{dh/dx = f(x,y) - d g},{} where \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{f(x,y)dx = c f(t,y) dy},{} and \\spad{c} and \\spad{t} are rational functions of \\spad{y}. Argument \\spad{z} is a dummy variable not appearing in \\spad{f(x,y)}. The operation returns \"failed\" if no such functions exist.") (((|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) #4#) |#2| (|Kernel| |#2|) (|Kernel| |#2|) |#2| |#2| (|SparseUnivariatePolynomial| |#2|)) "\\spad{palgextint0(f, x, y, g, d, p)} returns functions \\spad{[h, c]} such that \\spad{dh/dx = f(x,y) - c g},{} where \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{d(x)\\^2 y(x)\\^2 = P(x)},{} or \"failed\" if no such functions exist.")) (|palgint0| (((|IntegrationResult| |#2|) |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Kernel| |#2|) |#2| (|Fraction| (|SparseUnivariatePolynomial| |#2|))) "\\spad{palgint0(f, x, y, z, t, c)} returns the integral of \\spad{f(x,y)dx} where \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{f(x,y)dx = c f(t,y) dy}; \\spad{c} and \\spad{t} are rational functions of \\spad{y}. Argument \\spad{z} is a dummy variable not appearing in \\spad{f(x,y)}.") (((|IntegrationResult| |#2|) |#2| (|Kernel| |#2|) (|Kernel| |#2|) |#2| (|SparseUnivariatePolynomial| |#2|)) "\\spad{palgint0(f, x, y, d, p)} returns the integral of \\spad{f(x,y)dx} where \\spad{y} is an algebraic function of \\spad{x} satisfying \\spad{d(x)\\^2 y(x)\\^2 = P(x)}."))) 
NIL 
((|HasCategory| |#3| (|%list| (QUOTE -600) (|devaluate| |#2|)))) 
(-499) 
((|constructor| (NIL "This package provides various number theoretic functions on the integers.")) (|sumOfKthPowerDivisors| (((|Integer|) (|Integer|) (|NonNegativeInteger|)) "\\spad{sumOfKthPowerDivisors(n,k)} returns the sum of the \\spad{k}th powers of the integers between 1 and \\spad{n} (inclusive) which divide \\spad{n}. the sum of the \\spad{k}th powers of the divisors of \\spad{n} is often denoted by \\spad{sigma_k(n)}.")) (|sumOfDivisors| (((|Integer|) (|Integer|)) "\\spad{sumOfDivisors(n)} returns the sum of the integers between 1 and \\spad{n} (inclusive) which divide \\spad{n}. The sum of the divisors of \\spad{n} is often denoted by \\spad{sigma(n)}.")) (|numberOfDivisors| (((|Integer|) (|Integer|)) "\\spad{numberOfDivisors(n)} returns the number of integers between 1 and \\spad{n} (inclusive) which divide \\spad{n}. The number of divisors of \\spad{n} is often denoted by \\spad{tau(n)}.")) (|moebiusMu| (((|Integer|) (|Integer|)) "\\spad{moebiusMu(n)} returns the Moebius function \\spad{mu(n)}. \\spad{mu(n)} is either \\spad{-1},{}0 or 1 as follows: \\spad{mu(n) = 0} if \\spad{n} is divisible by a square > 1,{} \\spad{mu(n) = (-1)^k} if \\spad{n} is square-free and has \\spad{k} distinct prime divisors.")) (|legendre| (((|Integer|) (|Integer|) (|Integer|)) "\\spad{legendre(a,p)} returns the Legendre symbol \\spad{L(a/p)}. \\spad{L(a/p) = (-1)**((p-1)/2) mod p} (\\spad{p} prime),{} which is 0 if \\spad{a} is 0,{} 1 if \\spad{a} is a quadratic residue \\spad{mod p} and \\spad{-1} otherwise. Note: because the primality test is expensive,{} if it is known that \\spad{p} is prime then use \\spad{jacobi(a,p)}.")) (|jacobi| (((|Integer|) (|Integer|) (|Integer|)) "\\spad{jacobi(a,b)} returns the Jacobi symbol \\spad{J(a/b)}. When \\spad{b} is odd,{} \\spad{J(a/b) = product(L(a/p) for p in factor b )}. Note: by convention,{} 0 is returned if \\spad{gcd(a,b) ~= 1}. Iterative \\spad{O(log(b)^2)} version coded by Michael Monagan June 1987.")) (|harmonic| (((|Fraction| (|Integer|)) (|Integer|)) "\\spad{harmonic(n)} returns the \\spad{n}th harmonic number. This is \\spad{H[n] = sum(1/k,k=1..n)}.")) (|fibonacci| (((|Integer|) (|Integer|)) "\\spad{fibonacci(n)} returns the \\spad{n}th Fibonacci number. the Fibonacci numbers \\spad{F[n]} are defined by \\spad{F[0] = F[1] = 1} and \\spad{F[n] = F[n-1] + F[n-2]}. The algorithm has running time \\spad{O(log(n)^3)}. Reference: Knuth,{} The Art of Computer Programming Vol 2,{} Semi-Numerical Algorithms.")) (|eulerPhi| (((|Integer|) (|Integer|)) "\\spad{eulerPhi(n)} returns the number of integers between 1 and \\spad{n} (including 1) which are relatively prime to \\spad{n}. This is the Euler phi function \\spad{\\phi(n)} is also called the totient function.")) (|euler| (((|Integer|) (|Integer|)) "\\spad{euler(n)} returns the \\spad{n}th Euler number. This is \\spad{2^n E(n,1/2)},{} where \\spad{E(n,x)} is the \\spad{n}th Euler polynomial.")) (|divisors| (((|List| (|Integer|)) (|Integer|)) "\\spad{divisors(n)} returns a list of the divisors of \\spad{n}.")) (|chineseRemainder| (((|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{chineseRemainder(x1,m1,x2,m2)} returns \\spad{w},{} where \\spad{w} is such that \\spad{w = x1 mod m1} and \\spad{w = x2 mod m2}. Note: \\spad{m1} and \\spad{m2} must be relatively prime.")) (|bernoulli| (((|Fraction| (|Integer|)) (|Integer|)) "\\spad{bernoulli(n)} returns the \\spad{n}th Bernoulli number. this is \\spad{B(n,0)},{} where \\spad{B(n,x)} is the \\spad{n}th Bernoulli polynomial."))) 
NIL 
NIL 
(-500 -3092 UP UPUP R) 
((|constructor| (NIL "algebraic Hermite redution.")) (|HermiteIntegrate| (((|Record| (|:| |answer| |#4|) (|:| |logpart| |#4|)) |#4| (|Mapping| |#2| |#2|)) "\\spad{HermiteIntegrate(f, ')} returns \\spad{[g,h]} such that \\spad{f = g' + h} and \\spad{h} has a only simple finite normal poles."))) 
NIL 
NIL 
(-501 -3092 UP) 
((|constructor| (NIL "Hermite integration,{} transcendental case.")) (|HermiteIntegrate| (((|Record| (|:| |answer| (|Fraction| |#2|)) (|:| |logpart| (|Fraction| |#2|)) (|:| |specpart| (|Fraction| |#2|)) (|:| |polypart| |#2|)) (|Fraction| |#2|) (|Mapping| |#2| |#2|)) "\\spad{HermiteIntegrate(f, D)} returns \\spad{[g, h, s, p]} such that \\spad{f = Dg + h + s + p},{} \\spad{h} has a squarefree denominator normal \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D},{} and all the squarefree factors of the denominator of \\spad{s} are special \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D}. Furthermore,{} \\spad{h} and \\spad{s} have no polynomial parts. \\spad{D} is the derivation to use on \\spadtype{UP}."))) 
NIL 
NIL 
(-502 R -3092 L) 
((|constructor| (NIL "This package provides functions for integration,{} limited integration,{} extended integration and the risch differential equation for pure algebraic integrands.")) (|palgLODE| (((|Record| (|:| |particular| (|Union| |#2| #1="failed")) (|:| |basis| (|List| |#2|))) |#3| |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Symbol|)) "\\spad{palgLODE(op, g, kx, y, x)} returns the solution of \\spad{op f = g}. \\spad{y} is an algebraic function of \\spad{x}.")) (|palgRDE| (((|Union| |#2| #1#) |#2| |#2| |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|Mapping| (|Union| |#2| #1#) |#2| |#2| (|Symbol|))) "\\spad{palgRDE(nfp, f, g, x, y, foo)} returns a function \\spad{z(x,y)} such that \\spad{dz/dx + n * df/dx z(x,y) = g(x,y)} if such a \\spad{z} exists,{} \"failed\" otherwise; \\spad{y} is an algebraic function of \\spad{x}; \\spad{foo(a, b, x)} is a function that solves \\spad{du/dx + n * da/dx u(x) = u(x)} for an unknown \\spad{u(x)} not involving \\spad{y}. \\spad{nfp} is \\spad{n * df/dx}.")) (|palglimint| (((|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) "failed") |#2| (|Kernel| |#2|) (|Kernel| |#2|) (|List| |#2|)) "\\spad{palglimint(f, x, y, [u1,...,un])} returns functions \\spad{[h,[[ci, ui]]]} such that the \\spad{ui}'s are among \\spad{[u1,...,un]} and \\spad{d(h + sum(ci log(ui)))/dx = f(x,y)} if such functions exist,{} \"failed\" otherwise; \\spad{y} is an algebraic function of \\spad{x}.")) (|palgextint| (((|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) "failed") |#2| (|Kernel| |#2|) (|Kernel| |#2|) |#2|) "\\spad{palgextint(f, x, y, g)} returns functions \\spad{[h, c]} such that \\spad{dh/dx = f(x,y) - c g},{} where \\spad{y} is an algebraic function of \\spad{x}; returns \"failed\" if no such functions exist.")) (|palgint| (((|IntegrationResult| |#2|) |#2| (|Kernel| |#2|) (|Kernel| |#2|)) "\\spad{palgint(f, x, y)} returns the integral of \\spad{f(x,y)dx} where \\spad{y} is an algebraic function of \\spad{x}."))) 
NIL 
((|HasCategory| |#3| (|%list| (QUOTE -600) (|devaluate| |#2|)))) 
(-503 R -3092) 
((|constructor| (NIL "\\spadtype{PatternMatchIntegration} provides functions that use the pattern matcher to find some indefinite and definite integrals involving special functions and found in the litterature.")) (|pmintegrate| (((|Union| |#2| "failed") |#2| (|Symbol|) (|OrderedCompletion| |#2|) (|OrderedCompletion| |#2|)) "\\spad{pmintegrate(f, x = a..b)} returns the integral of \\spad{f(x)dx} from a to \\spad{b} if it can be found by the built-in pattern matching rules.") (((|Union| (|Record| (|:| |special| |#2|) (|:| |integrand| |#2|)) "failed") |#2| (|Symbol|)) "\\spad{pmintegrate(f, x)} returns either \"failed\" or \\spad{[g,h]} such that \\spad{integrate(f,x) = g + integrate(h,x)}.")) (|pmComplexintegrate| (((|Union| (|Record| (|:| |special| |#2|) (|:| |integrand| |#2|)) "failed") |#2| (|Symbol|)) "\\spad{pmComplexintegrate(f, x)} returns either \"failed\" or \\spad{[g,h]} such that \\spad{integrate(f,x) = g + integrate(h,x)}. It only looks for special complex integrals that pmintegrate does not return.")) (|splitConstant| (((|Record| (|:| |const| |#2|) (|:| |nconst| |#2|)) |#2| (|Symbol|)) "\\spad{splitConstant(f, x)} returns \\spad{[c, g]} such that \\spad{f = c * g} and \\spad{c} does not involve \\spad{t}."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-1052)))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-569))))) 
(-504 -3092 UP) 
((|constructor| (NIL "This package provides functions for the base case of the Risch algorithm.")) (|limitedint| (((|Union| (|Record| (|:| |mainpart| (|Fraction| |#2|)) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| (|Fraction| |#2|)) (|:| |logand| (|Fraction| |#2|)))))) "failed") (|Fraction| |#2|) (|List| (|Fraction| |#2|))) "\\spad{limitedint(f, [g1,...,gn])} returns fractions \\spad{[h,[[ci, gi]]]} such that the \\spad{gi}'s are among \\spad{[g1,...,gn]},{} \\spad{ci' = 0},{} and \\spad{(h+sum(ci log(gi)))' = f},{} if possible,{} \"failed\" otherwise.")) (|extendedint| (((|Union| (|Record| (|:| |ratpart| (|Fraction| |#2|)) (|:| |coeff| (|Fraction| |#2|))) "failed") (|Fraction| |#2|) (|Fraction| |#2|)) "\\spad{extendedint(f, g)} returns fractions \\spad{[h, c]} such that \\spad{c' = 0} and \\spad{h' = f - cg},{} if \\spad{(h, c)} exist,{} \"failed\" otherwise.")) (|infieldint| (((|Union| (|Fraction| |#2|) "failed") (|Fraction| |#2|)) "\\spad{infieldint(f)} returns \\spad{g} such that \\spad{g' = f} or \"failed\" if the integral of \\spad{f} is not a rational function.")) (|integrate| (((|IntegrationResult| (|Fraction| |#2|)) (|Fraction| |#2|)) "\\spad{integrate(f)} returns \\spad{g} such that \\spad{g' = f}."))) 
NIL 
NIL 
(-505 S) 
((|constructor| (NIL "Provides integer testing and retraction functions. Date Created: March 1990 Date Last Updated: 9 April 1991")) (|integerIfCan| (((|Union| (|Integer|) "failed") |#1|) "\\spad{integerIfCan(x)} returns \\spad{x} as an integer,{} \"failed\" if \\spad{x} is not an integer.")) (|integer?| (((|Boolean|) |#1|) "\\spad{integer?(x)} is \\spad{true} if \\spad{x} is an integer,{} \\spad{false} otherwise.")) (|integer| (((|Integer|) |#1|) "\\spad{integer(x)} returns \\spad{x} as an integer; error if \\spad{x} is not an integer."))) 
NIL 
NIL 
(-506 -3092) 
((|constructor| (NIL "This package provides functions for the integration of rational functions.")) (|extendedIntegrate| (((|Union| (|Record| (|:| |ratpart| (|Fraction| (|Polynomial| |#1|))) (|:| |coeff| (|Fraction| (|Polynomial| |#1|)))) "failed") (|Fraction| (|Polynomial| |#1|)) (|Symbol|) (|Fraction| (|Polynomial| |#1|))) "\\spad{extendedIntegrate(f, x, g)} returns fractions \\spad{[h, c]} such that \\spad{dc/dx = 0} and \\spad{dh/dx = f - cg},{} if \\spad{(h, c)} exist,{} \"failed\" otherwise.")) (|limitedIntegrate| (((|Union| (|Record| (|:| |mainpart| (|Fraction| (|Polynomial| |#1|))) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| (|Fraction| (|Polynomial| |#1|))) (|:| |logand| (|Fraction| (|Polynomial| |#1|))))))) "failed") (|Fraction| (|Polynomial| |#1|)) (|Symbol|) (|List| (|Fraction| (|Polynomial| |#1|)))) "\\spad{limitedIntegrate(f, x, [g1,...,gn])} returns fractions \\spad{[h, [[ci,gi]]]} such that the \\spad{gi}'s are among \\spad{[g1,...,gn]},{} \\spad{dci/dx = 0},{} and \\spad{d(h + sum(ci log(gi)))/dx = f} if possible,{} \"failed\" otherwise.")) (|infieldIntegrate| (((|Union| (|Fraction| (|Polynomial| |#1|)) "failed") (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{infieldIntegrate(f, x)} returns a fraction \\spad{g} such that \\spad{dg/dx = f} if \\spad{g} exists,{} \"failed\" otherwise.")) (|internalIntegrate| (((|IntegrationResult| (|Fraction| (|Polynomial| |#1|))) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{internalIntegrate(f, x)} returns \\spad{g} such that \\spad{dg/dx = f}."))) 
NIL 
NIL 
(-507 R) 
((|constructor| (NIL "\\indented{1}{+ Author: Mike Dewar} + Date Created: November 1996 + Date Last Updated: + Basic Functions: + Related Constructors: + Also See: + AMS Classifications: + Keywords: + References: + Description: + This domain is an implementation of interval arithmetic and transcendental + functions over intervals."))) 
((-3769 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-508) 
((|constructor| (NIL "This package provides the implementation for the \\spadfun{solveLinearPolynomialEquation} operation over the integers. It uses a lifting technique from the package GenExEuclid")) (|solveLinearPolynomialEquation| (((|Union| (|List| (|SparseUnivariatePolynomial| (|Integer|))) "failed") (|List| (|SparseUnivariatePolynomial| (|Integer|))) (|SparseUnivariatePolynomial| (|Integer|))) "\\spad{solveLinearPolynomialEquation([f1, ..., fn], g)} (where the \\spad{fi} are relatively prime to each other) returns a list of \\spad{ai} such that \\spad{g/prod fi = sum ai/fi} or returns \"failed\" if no such list of \\spad{ai}'s exists."))) 
NIL 
NIL 
(-509 R -3092) 
((|constructor| (NIL "\\indented{1}{Tools for the integrator} Author: Manuel Bronstein Date Created: 25 April 1990 Date Last Updated: 9 June 1993 Keywords: elementary,{} function,{} integration.")) (|intPatternMatch| (((|IntegrationResult| |#2|) |#2| (|Symbol|) (|Mapping| (|IntegrationResult| |#2|) |#2| (|Symbol|)) (|Mapping| (|Union| (|Record| (|:| |special| |#2|) (|:| |integrand| |#2|)) "failed") |#2| (|Symbol|))) "\\spad{intPatternMatch(f, x, int, pmint)} tries to integrate \\spad{f} first by using the integration function \\spad{int},{} and then by using the pattern match intetgration function \\spad{pmint} on any remaining unintegrable part.")) (|mkPrim| ((|#2| |#2| (|Symbol|)) "\\spad{mkPrim(f, x)} makes the logs in \\spad{f} which are linear in \\spad{x} primitive with respect to \\spad{x}.")) (|removeConstantTerm| ((|#2| |#2| (|Symbol|)) "\\spad{removeConstantTerm(f, x)} returns \\spad{f} minus any additive constant with respect to \\spad{x}.")) (|vark| (((|List| (|Kernel| |#2|)) (|List| |#2|) (|Symbol|)) "\\spad{vark([f1,...,fn],x)} returns the set-theoretic union of \\spad{(varselect(f1,x),...,varselect(fn,x))}.")) (|union| (((|List| (|Kernel| |#2|)) (|List| (|Kernel| |#2|)) (|List| (|Kernel| |#2|))) "\\spad{union(l1, l2)} returns set-theoretic union of \\spad{l1} and \\spad{l2}.")) (|ksec| (((|Kernel| |#2|) (|Kernel| |#2|) (|List| (|Kernel| |#2|)) (|Symbol|)) "\\spad{ksec(k, [k1,...,kn], x)} returns the second top-level \\spad{ki} after \\spad{k} involving \\spad{x}.")) (|kmax| (((|Kernel| |#2|) (|List| (|Kernel| |#2|))) "\\spad{kmax([k1,...,kn])} returns the top-level \\spad{ki} for integration.")) (|varselect| (((|List| (|Kernel| |#2|)) (|List| (|Kernel| |#2|)) (|Symbol|)) "\\spad{varselect([k1,...,kn], x)} returns the \\spad{ki} which involve \\spad{x}."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-239))) (|HasCategory| |#2| (QUOTE (-569))) (|HasCategory| |#2| (QUOTE (-950 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-239)))) (|HasCategory| |#1| (QUOTE (-495)))) 
(-510 -3092 UP) 
((|constructor| (NIL "This package provides functions for the transcendental case of the Risch algorithm.")) (|monomialIntPoly| (((|Record| (|:| |answer| |#2|) (|:| |polypart| |#2|)) |#2| (|Mapping| |#2| |#2|)) "\\spad{monomialIntPoly(p, ')} returns [\\spad{q},{} \\spad{r}] such that \\spad{p = q' + r} and \\spad{degree(r) < degree(t')}. Error if \\spad{degree(t') < 2}.")) (|monomialIntegrate| (((|Record| (|:| |ir| (|IntegrationResult| (|Fraction| |#2|))) (|:| |specpart| (|Fraction| |#2|)) (|:| |polypart| |#2|)) (|Fraction| |#2|) (|Mapping| |#2| |#2|)) "\\spad{monomialIntegrate(f, ')} returns \\spad{[ir, s, p]} such that \\spad{f = ir' + s + p} and all the squarefree factors of the denominator of \\spad{s} are special \\spad{w}.\\spad{r}.\\spad{t} the derivation '.")) (|expintfldpoly| (((|Union| (|LaurentPolynomial| |#1| |#2|) "failed") (|LaurentPolynomial| |#1| |#2|) (|Mapping| (|Record| (|:| |ans| |#1|) (|:| |right| |#1|) (|:| |sol?| (|Boolean|))) (|Integer|) |#1|)) "\\spad{expintfldpoly(p, foo)} returns \\spad{q} such that \\spad{p' = q} or \"failed\" if no such \\spad{q} exists. Argument foo is a Risch differential equation function on \\spad{F}.")) (|primintfldpoly| (((|Union| |#2| "failed") |#2| (|Mapping| (|Union| (|Record| (|:| |ratpart| |#1|) (|:| |coeff| |#1|)) #1="failed") |#1|) |#1|) "\\spad{primintfldpoly(p, ', t')} returns \\spad{q} such that \\spad{p' = q} or \"failed\" if no such \\spad{q} exists. Argument \\spad{t'} is the derivative of the primitive generating the extension.")) (|primlimintfrac| (((|Union| (|Record| (|:| |mainpart| (|Fraction| |#2|)) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| (|Fraction| |#2|)) (|:| |logand| (|Fraction| |#2|)))))) "failed") (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|List| (|Fraction| |#2|))) "\\spad{primlimintfrac(f, ', [u1,...,un])} returns \\spad{[v, [c1,...,cn]]} such that \\spad{ci' = 0} and \\spad{f = v' + +/[ci * ui'/ui]}. Error: if \\spad{degree numer f >= degree denom f}.")) (|primextintfrac| (((|Union| (|Record| (|:| |ratpart| (|Fraction| |#2|)) (|:| |coeff| (|Fraction| |#2|))) "failed") (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Fraction| |#2|)) "\\spad{primextintfrac(f, ', g)} returns \\spad{[v, c]} such that \\spad{f = v' + c g} and \\spad{c' = 0}. Error: if \\spad{degree numer f >= degree denom f} or if \\spad{degree numer g >= degree denom g} or if \\spad{denom g} is not squarefree.")) (|explimitedint| (((|Union| (|Record| (|:| |answer| (|Record| (|:| |mainpart| (|Fraction| |#2|)) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| (|Fraction| |#2|)) (|:| |logand| (|Fraction| |#2|))))))) (|:| |a0| |#1|)) "failed") (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Record| (|:| |ans| |#1|) (|:| |right| |#1|) (|:| |sol?| (|Boolean|))) (|Integer|) |#1|) (|List| (|Fraction| |#2|))) "\\spad{explimitedint(f, ', foo, [u1,...,un])} returns \\spad{[v, [c1,...,cn], a]} such that \\spad{ci' = 0},{} \\spad{f = v' + a + reduce(+,[ci * ui'/ui])},{} and \\spad{a = 0} or \\spad{a} has no integral in \\spad{F}. Returns \"failed\" if no such \\spad{v},{} \\spad{ci},{} a exist. Argument \\spad{foo} is a Risch differential equation function on \\spad{F}.")) (|primlimitedint| (((|Union| (|Record| (|:| |answer| (|Record| (|:| |mainpart| (|Fraction| |#2|)) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| (|Fraction| |#2|)) (|:| |logand| (|Fraction| |#2|))))))) (|:| |a0| |#1|)) "failed") (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Union| (|Record| (|:| |ratpart| |#1|) (|:| |coeff| |#1|)) #1#) |#1|) (|List| (|Fraction| |#2|))) "\\spad{primlimitedint(f, ', foo, [u1,...,un])} returns \\spad{[v, [c1,...,cn], a]} such that \\spad{ci' = 0},{} \\spad{f = v' + a + reduce(+,[ci * ui'/ui])},{} and \\spad{a = 0} or \\spad{a} has no integral in UP. Returns \"failed\" if no such \\spad{v},{} \\spad{ci},{} a exist. Argument \\spad{foo} is an extended integration function on \\spad{F}.")) (|expextendedint| (((|Union| (|Record| (|:| |answer| (|Fraction| |#2|)) (|:| |a0| |#1|)) (|Record| (|:| |ratpart| (|Fraction| |#2|)) (|:| |coeff| (|Fraction| |#2|))) "failed") (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Record| (|:| |ans| |#1|) (|:| |right| |#1|) (|:| |sol?| (|Boolean|))) (|Integer|) |#1|) (|Fraction| |#2|)) "\\spad{expextendedint(f, ', foo, g)} returns either \\spad{[v, c]} such that \\spad{f = v' + c g} and \\spad{c' = 0},{} or \\spad{[v, a]} such that \\spad{f = g' + a},{} and \\spad{a = 0} or \\spad{a} has no integral in \\spad{F}. Returns \"failed\" if neither case can hold. Argument \\spad{foo} is a Risch differential equation function on \\spad{F}.")) (|primextendedint| (((|Union| (|Record| (|:| |answer| (|Fraction| |#2|)) (|:| |a0| |#1|)) (|Record| (|:| |ratpart| (|Fraction| |#2|)) (|:| |coeff| (|Fraction| |#2|))) "failed") (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Union| (|Record| (|:| |ratpart| |#1|) (|:| |coeff| |#1|)) #1#) |#1|) (|Fraction| |#2|)) "\\spad{primextendedint(f, ', foo, g)} returns either \\spad{[v, c]} such that \\spad{f = v' + c g} and \\spad{c' = 0},{} or \\spad{[v, a]} such that \\spad{f = g' + a},{} and \\spad{a = 0} or \\spad{a} has no integral in UP. Returns \"failed\" if neither case can hold. Argument \\spad{foo} is an extended integration function on \\spad{F}.")) (|tanintegrate| (((|Record| (|:| |answer| (|IntegrationResult| (|Fraction| |#2|))) (|:| |a0| |#1|)) (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Union| (|List| |#1|) "failed") (|Integer|) |#1| |#1|)) "\\spad{tanintegrate(f, ', foo)} returns \\spad{[g, a]} such that \\spad{f = g' + a},{} and \\spad{a = 0} or \\spad{a} has no integral in \\spad{F}; Argument foo is a Risch differential system solver on \\spad{F}.")) (|expintegrate| (((|Record| (|:| |answer| (|IntegrationResult| (|Fraction| |#2|))) (|:| |a0| |#1|)) (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Record| (|:| |ans| |#1|) (|:| |right| |#1|) (|:| |sol?| (|Boolean|))) (|Integer|) |#1|)) "\\spad{expintegrate(f, ', foo)} returns \\spad{[g, a]} such that \\spad{f = g' + a},{} and \\spad{a = 0} or \\spad{a} has no integral in \\spad{F}; Argument foo is a Risch differential equation solver on \\spad{F}.")) (|primintegrate| (((|Record| (|:| |answer| (|IntegrationResult| (|Fraction| |#2|))) (|:| |a0| |#1|)) (|Fraction| |#2|) (|Mapping| |#2| |#2|) (|Mapping| (|Union| (|Record| (|:| |ratpart| |#1|) (|:| |coeff| |#1|)) #1#) |#1|)) "\\spad{primintegrate(f, ', foo)} returns \\spad{[g, a]} such that \\spad{f = g' + a},{} and \\spad{a = 0} or \\spad{a} has no integral in UP. Argument foo is an extended integration function on \\spad{F}."))) 
NIL 
NIL 
(-511 R -3092) 
((|constructor| (NIL "This package computes the inverse Laplace Transform.")) (|inverseLaplace| (((|Union| |#2| "failed") |#2| (|Symbol|) (|Symbol|)) "\\spad{inverseLaplace(f, s, t)} returns the Inverse Laplace transform of \\spad{f(s)} using \\spad{t} as the new variable or \"failed\" if unable to find a closed form."))) 
NIL 
NIL 
(-512) 
((|constructor| (NIL "This category describes byte stream conduits supporting both input and output operations."))) 
NIL 
NIL 
(-513) 
((|constructor| (NIL "\\indented{2}{This domain provides representation for binary files open} \\indented{2}{for input and output operations.} See Also: InputBinaryFile,{} OutputBinaryFile")) (|isOpen?| (((|Boolean|) $) "\\spad{isOpen?(f)} holds if `f' is in open state.")) (|inputOutputBinaryFile| (($ (|String|)) "\\spad{inputOutputBinaryFile(f)} returns an input/output conduit obtained by opening the file named by `f' as a binary file.") (($ (|FileName|)) "\\spad{inputOutputBinaryFile(f)} returns an input/output conduit obtained by opening the file designated by `f' as a binary file."))) 
NIL 
NIL 
(-514) 
((|constructor| (NIL "This domain provides constants to describe directions of IO conduits (file,{} etc) mode of operations.")) (|closed| (($) "\\spad{closed} indicates that the IO conduit has been closed.")) (|bothWays| (($) "\\spad{bothWays} indicates that an IO conduit is for both input and output.")) (|output| (($) "\\spad{output} indicates that an IO conduit is for output")) (|input| (($) "\\spad{input} indicates that an IO conduit is for input."))) 
NIL 
NIL 
(-515) 
((|constructor| (NIL "This domain provides representation for ARPA Internet \\spad{IP4} addresses.")) (|resolve| (((|Maybe| $) (|Hostname|)) "\\spad{resolve(h)} returns the \\spad{IP4} address of host `h'.")) (|bytes| (((|DataArray| 4 (|Byte|)) $) "\\spad{bytes(x)} returns the bytes of the numeric address `x'.")) (|ip4Address| (($ (|String|)) "\\spad{ip4Address(a)} builds a numeric address out of the ASCII form `a'."))) 
NIL 
NIL 
(-516 |p| |unBalanced?|) 
((|constructor| (NIL "This domain implements Zp,{} the \\spad{p}-adic completion of the integers. This is an internal domain."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-517 |p|) 
((|constructor| (NIL "InnerPrimeField(\\spad{p}) implements the field with \\spad{p} elements. Note: argument \\spad{p} MUST be a prime (this domain does not check). See \\spadtype{PrimeField} for a domain that does check."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| $ (QUOTE (-120))) (|HasCategory| $ (QUOTE (-118))) (|HasCategory| $ (QUOTE (-319)))) 
(-518) 
((|constructor| (NIL "A package to print strings without line-feed nor carriage-return.")) (|iprint| (((|Void|) (|String|)) "\\axiom{iprint(\\spad{s})} prints \\axiom{\\spad{s}} at the current position of the cursor."))) 
NIL 
NIL 
(-519 -3092) 
((|constructor| (NIL "If a function \\spad{f} has an elementary integral \\spad{g},{} then \\spad{g} can be written in the form \\spad{g = h + c1 log(u1) + c2 log(u2) + ... + cn log(un)} where \\spad{h},{} which is in the same field than \\spad{f},{} is called the rational part of the integral,{} and \\spad{c1 log(u1) + ... cn log(un)} is called the logarithmic part of the integral. This domain manipulates integrals represented in that form,{} by keeping both parts separately. The logs are not explicitly computed.")) (|differentiate| ((|#1| $ (|Symbol|)) "\\spad{differentiate(ir,x)} differentiates \\spad{ir} with respect to \\spad{x}") ((|#1| $ (|Mapping| |#1| |#1|)) "\\spad{differentiate(ir,D)} differentiates \\spad{ir} with respect to the derivation \\spad{D}.")) (|integral| (($ |#1| (|Symbol|)) "\\spad{integral(f,x)} returns the formal integral of \\spad{f} with respect to \\spad{x}") (($ |#1| |#1|) "\\spad{integral(f,x)} returns the formal integral of \\spad{f} with respect to \\spad{x}")) (|elem?| (((|Boolean|) $) "\\spad{elem?(ir)} tests if an integration result is elementary over F?")) (|notelem| (((|List| (|Record| (|:| |integrand| |#1|) (|:| |intvar| |#1|))) $) "\\spad{notelem(ir)} returns the non-elementary part of an integration result")) (|logpart| (((|List| (|Record| (|:| |scalar| (|Fraction| (|Integer|))) (|:| |coeff| (|SparseUnivariatePolynomial| |#1|)) (|:| |logand| (|SparseUnivariatePolynomial| |#1|)))) $) "\\spad{logpart(ir)} returns the logarithmic part of an integration result")) (|ratpart| ((|#1| $) "\\spad{ratpart(ir)} returns the rational part of an integration result")) (|mkAnswer| (($ |#1| (|List| (|Record| (|:| |scalar| (|Fraction| (|Integer|))) (|:| |coeff| (|SparseUnivariatePolynomial| |#1|)) (|:| |logand| (|SparseUnivariatePolynomial| |#1|)))) (|List| (|Record| (|:| |integrand| |#1|) (|:| |intvar| |#1|)))) "\\spad{mkAnswer(r,l,ne)} creates an integration result from a rational part \\spad{r},{} a logarithmic part \\spad{l},{} and a non-elementary part \\spad{ne}."))) 
((-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-950 (-1089))))) 
(-520 E -3092) 
((|constructor| (NIL "\\indented{1}{Internally used by the integration packages} Author: Manuel Bronstein Date Created: 1987 Date Last Updated: 12 August 1992 Keywords: integration.")) (|map| (((|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) "failed") (|Mapping| |#2| |#1|) (|Union| (|Record| (|:| |mainpart| |#1|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#1|) (|:| |logand| |#1|))))) "failed")) "\\spad{map(f,ufe)} \\undocumented") (((|Union| |#2| "failed") (|Mapping| |#2| |#1|) (|Union| |#1| "failed")) "\\spad{map(f,ue)} \\undocumented") (((|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) "failed") (|Mapping| |#2| |#1|) (|Union| (|Record| (|:| |ratpart| |#1|) (|:| |coeff| |#1|)) "failed")) "\\spad{map(f,ure)} \\undocumented") (((|IntegrationResult| |#2|) (|Mapping| |#2| |#1|) (|IntegrationResult| |#1|)) "\\spad{map(f,ire)} \\undocumented"))) 
NIL 
NIL 
(-521 R -3092) 
((|constructor| (NIL "This package allows a sum of logs over the roots of a polynomial to be expressed as explicit logarithms and arc tangents,{} provided that the indexing polynomial can be factored into quadratics.")) (|complexExpand| ((|#2| (|IntegrationResult| |#2|)) "\\spad{complexExpand(i)} returns the expanded complex function corresponding to \\spad{i}.")) (|expand| (((|List| |#2|) (|IntegrationResult| |#2|)) "\\spad{expand(i)} returns the list of possible real functions corresponding to \\spad{i}.")) (|split| (((|IntegrationResult| |#2|) (|IntegrationResult| |#2|)) "\\spad{split(u(x) + sum_{P(a)=0} Q(a,x))} returns \\spad{u(x) + sum_{P1(a)=0} Q(a,x) + ... + sum_{Pn(a)=0} Q(a,x)} where \\spad{P1},{}...,{}Pn are the factors of \\spad{P}."))) 
NIL 
NIL 
(-522) 
((|constructor| (NIL "This domain provides representations for the intermediate form data structure used by the Spad elaborator.")) (|irDef| (($ (|Identifier|) (|InternalTypeForm|) $) "\\spad{irDef(f,ts,e)} returns an IR representation for a definition of a function named \\spad{f},{} with signature \\spad{ts} and body \\spad{e}.")) (|irCtor| (($ (|Identifier|) (|InternalTypeForm|)) "\\spad{irCtor(n,t)} returns an IR for a constructor reference of type designated by the type form \\spad{t}")) (|irVar| (($ (|Identifier|) (|InternalTypeForm|)) "\\spad{irVar(x,t)} returns an IR for a variable reference of type designated by the type form \\spad{t}"))) 
NIL 
NIL 
(-523 I) 
((|constructor| (NIL "The \\spadtype{IntegerRoots} package computes square roots and \\indented{2}{\\spad{n}th roots of integers efficiently.}")) (|approxSqrt| ((|#1| |#1|) "\\spad{approxSqrt(n)} returns an approximation \\spad{x} to \\spad{sqrt(n)} such that \\spad{-1 < x - sqrt(n) < 1}. Compute an approximation \\spad{s} to \\spad{sqrt(n)} such that \\indented{10}{\\spad{-1 < s - sqrt(n) < 1}} A variable precision Newton iteration is used. The running time is \\spad{O( log(n)**2 )}.")) (|perfectSqrt| (((|Union| |#1| "failed") |#1|) "\\spad{perfectSqrt(n)} returns the square root of \\spad{n} if \\spad{n} is a perfect square and returns \"failed\" otherwise")) (|perfectSquare?| (((|Boolean|) |#1|) "\\spad{perfectSquare?(n)} returns \\spad{true} if \\spad{n} is a perfect square and \\spad{false} otherwise")) (|approxNthRoot| ((|#1| |#1| (|NonNegativeInteger|)) "\\spad{approxRoot(n,r)} returns an approximation \\spad{x} to \\spad{n**(1/r)} such that \\spad{-1 < x - n**(1/r) < 1}")) (|perfectNthRoot| (((|Record| (|:| |base| |#1|) (|:| |exponent| (|NonNegativeInteger|))) |#1|) "\\spad{perfectNthRoot(n)} returns \\spad{[x,r]},{} where \\spad{n = x\\^r} and \\spad{r} is the largest integer such that \\spad{n} is a perfect \\spad{r}th power") (((|Union| |#1| "failed") |#1| (|NonNegativeInteger|)) "\\spad{perfectNthRoot(n,r)} returns the \\spad{r}th root of \\spad{n} if \\spad{n} is an \\spad{r}th power and returns \"failed\" otherwise")) (|perfectNthPower?| (((|Boolean|) |#1| (|NonNegativeInteger|)) "\\spad{perfectNthPower?(n,r)} returns \\spad{true} if \\spad{n} is an \\spad{r}th power and \\spad{false} otherwise"))) 
NIL 
NIL 
(-524 GF) 
((|constructor| (NIL "This package exports the function generateIrredPoly that computes a monic irreducible polynomial of degree \\spad{n} over a finite field.")) (|generateIrredPoly| (((|SparseUnivariatePolynomial| |#1|) (|PositiveInteger|)) "\\spad{generateIrredPoly(n)} generates an irreducible univariate polynomial of the given degree \\spad{n} over the finite field."))) 
NIL 
NIL 
(-525 R) 
((|constructor| (NIL "\\indented{2}{This package allows a sum of logs over the roots of a polynomial} \\indented{2}{to be expressed as explicit logarithms and arc tangents,{} provided} \\indented{2}{that the indexing polynomial can be factored into quadratics.} Date Created: 21 August 1988 Date Last Updated: 4 October 1993")) (|complexIntegrate| (((|Expression| |#1|) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{complexIntegrate(f, x)} returns the integral of \\spad{f(x)dx} where \\spad{x} is viewed as a complex variable.")) (|integrate| (((|Union| (|Expression| |#1|) (|List| (|Expression| |#1|))) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{integrate(f, x)} returns the integral of \\spad{f(x)dx} where \\spad{x} is viewed as a real variable..")) (|complexExpand| (((|Expression| |#1|) (|IntegrationResult| (|Fraction| (|Polynomial| |#1|)))) "\\spad{complexExpand(i)} returns the expanded complex function corresponding to \\spad{i}.")) (|expand| (((|List| (|Expression| |#1|)) (|IntegrationResult| (|Fraction| (|Polynomial| |#1|)))) "\\spad{expand(i)} returns the list of possible real functions corresponding to \\spad{i}.")) (|split| (((|IntegrationResult| (|Fraction| (|Polynomial| |#1|))) (|IntegrationResult| (|Fraction| (|Polynomial| |#1|)))) "\\spad{split(u(x) + sum_{P(a)=0} Q(a,x))} returns \\spad{u(x) + sum_{P1(a)=0} Q(a,x) + ... + sum_{Pn(a)=0} Q(a,x)} where \\spad{P1},{}...,{}Pn are the factors of \\spad{P}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-120)))) 
(-526) 
((|constructor| (NIL "IrrRepSymNatPackage contains functions for computing the ordinary irreducible representations of symmetric groups on \\spad{n} letters {\\em {1,2,...,n}} in Young's natural form and their dimensions. These representations can be labelled by number partitions of \\spad{n},{} \\spadignore{i.e.} a weakly decreasing sequence of integers summing up to \\spad{n},{} \\spadignore{e.g.} {\\em [3,3,3,1]} labels an irreducible representation for \\spad{n} equals 10. Note: whenever a \\spadtype{List Integer} appears in a signature,{} a partition required.")) (|irreducibleRepresentation| (((|List| (|Matrix| (|Integer|))) (|List| (|PositiveInteger|)) (|List| (|Permutation| (|Integer|)))) "\\spad{irreducibleRepresentation(lambda,listOfPerm)} is the list of the irreducible representations corresponding to {\\em lambda} in Young's natural form for the list of permutations given by {\\em listOfPerm}.") (((|List| (|Matrix| (|Integer|))) (|List| (|PositiveInteger|))) "\\spad{irreducibleRepresentation(lambda)} is the list of the two irreducible representations corresponding to the partition {\\em lambda} in Young's natural form for the following two generators of the symmetric group,{} whose elements permute {\\em {1,2,...,n}},{} namely {\\em (1 2)} (2-cycle) and {\\em (1 2 ... n)} (\\spad{n}-cycle).") (((|Matrix| (|Integer|)) (|List| (|PositiveInteger|)) (|Permutation| (|Integer|))) "\\spad{irreducibleRepresentation(lambda,pi)} is the irreducible representation corresponding to partition {\\em lambda} in Young's natural form of the permutation {\\em pi} in the symmetric group,{} whose elements permute {\\em {1,2,...,n}}.")) (|dimensionOfIrreducibleRepresentation| (((|NonNegativeInteger|) (|List| (|PositiveInteger|))) "\\spad{dimensionOfIrreducibleRepresentation(lambda)} is the dimension of the ordinary irreducible representation of the symmetric group corresponding to {\\em lambda}. Note: the Robinson-Thrall hook formula is implemented."))) 
NIL 
NIL 
(-527 R E V P TS) 
((|constructor| (NIL "\\indented{1}{An internal package for computing the rational univariate representation} \\indented{1}{of a zero-dimensional algebraic variety given by a square-free} \\indented{1}{triangular set.} \\indented{1}{The main operation is \\axiomOpFrom{rur}{InternalRationalUnivariateRepresentationPackage}.} \\indented{1}{It is based on the {\\em generic} algorithm description in [1]. \\newline References:} [1] \\spad{D}. LAZARD \"Solving Zero-dimensional Algebraic Systems\" \\indented{4}{Journal of Symbolic Computation,{} 1992,{} 13,{} 117-131}")) (|checkRur| (((|Boolean|) |#5| (|List| |#5|)) "\\spad{checkRur(ts,lus)} returns \\spad{true} if \\spad{lus} is a rational univariate representation of \\spad{ts}.")) (|rur| (((|List| |#5|) |#5| (|Boolean|)) "\\spad{rur(ts,univ?)} returns a rational univariate representation of \\spad{ts}. This assumes that the lowest polynomial in \\spad{ts} is a variable \\spad{v} which does not occur in the other polynomials of \\spad{ts}. This variable will be used to define the simple algebraic extension over which these other polynomials will be rewritten as univariate polynomials with degree one. If \\spad{univ?} is \\spad{true} then these polynomials will have a constant initial."))) 
NIL 
NIL 
(-528) 
((|constructor| (NIL "This domain represents a `has' expression.")) (|rhs| (((|SpadAst|) $) "\\spad{rhs(e)} returns the right hand side of the is expression `e'.")) (|lhs| (((|SpadAst|) $) "\\spad{lhs(e)} returns the left hand side of the is expression `e'."))) 
NIL 
NIL 
(-529 E V R P) 
((|constructor| (NIL "tools for the summation packages.")) (|sum| (((|Record| (|:| |num| |#4|) (|:| |den| (|Integer|))) |#4| |#2|) "\\spad{sum(p(n), n)} returns \\spad{P(n)},{} the indefinite sum of \\spad{p(n)} with respect to upward difference on \\spad{n},{} \\spadignore{i.e.} \\spad{P(n+1) - P(n) = a(n)}.") (((|Record| (|:| |num| |#4|) (|:| |den| (|Integer|))) |#4| |#2| (|Segment| |#4|)) "\\spad{sum(p(n), n = a..b)} returns \\spad{p(a) + p(a+1) + ... + p(b)}."))) 
NIL 
NIL 
(-530 |Coef|) 
((|constructor| (NIL "InnerSparseUnivariatePowerSeries is an internal domain \\indented{2}{used for creating sparse Taylor and Laurent series.}")) (|cAcsch| (($ $) "\\spad{cAcsch(f)} computes the inverse hyperbolic cosecant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAsech| (($ $) "\\spad{cAsech(f)} computes the inverse hyperbolic secant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAcoth| (($ $) "\\spad{cAcoth(f)} computes the inverse hyperbolic cotangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAtanh| (($ $) "\\spad{cAtanh(f)} computes the inverse hyperbolic tangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAcosh| (($ $) "\\spad{cAcosh(f)} computes the inverse hyperbolic cosine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAsinh| (($ $) "\\spad{cAsinh(f)} computes the inverse hyperbolic sine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cCsch| (($ $) "\\spad{cCsch(f)} computes the hyperbolic cosecant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cSech| (($ $) "\\spad{cSech(f)} computes the hyperbolic secant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cCoth| (($ $) "\\spad{cCoth(f)} computes the hyperbolic cotangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cTanh| (($ $) "\\spad{cTanh(f)} computes the hyperbolic tangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cCosh| (($ $) "\\spad{cCosh(f)} computes the hyperbolic cosine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cSinh| (($ $) "\\spad{cSinh(f)} computes the hyperbolic sine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAcsc| (($ $) "\\spad{cAcsc(f)} computes the arccosecant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAsec| (($ $) "\\spad{cAsec(f)} computes the arcsecant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAcot| (($ $) "\\spad{cAcot(f)} computes the arccotangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAtan| (($ $) "\\spad{cAtan(f)} computes the arctangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAcos| (($ $) "\\spad{cAcos(f)} computes the arccosine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cAsin| (($ $) "\\spad{cAsin(f)} computes the arcsine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cCsc| (($ $) "\\spad{cCsc(f)} computes the cosecant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cSec| (($ $) "\\spad{cSec(f)} computes the secant of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cCot| (($ $) "\\spad{cCot(f)} computes the cotangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cTan| (($ $) "\\spad{cTan(f)} computes the tangent of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cCos| (($ $) "\\spad{cCos(f)} computes the cosine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cSin| (($ $) "\\spad{cSin(f)} computes the sine of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cLog| (($ $) "\\spad{cLog(f)} computes the logarithm of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cExp| (($ $) "\\spad{cExp(f)} computes the exponential of the power series \\spad{f}. For use when the coefficient ring is commutative.")) (|cRationalPower| (($ $ (|Fraction| (|Integer|))) "\\spad{cRationalPower(f,r)} computes \\spad{f^r}. For use when the coefficient ring is commutative.")) (|cPower| (($ $ |#1|) "\\spad{cPower(f,r)} computes \\spad{f^r},{} where \\spad{f} has constant coefficient 1. For use when the coefficient ring is commutative.")) (|integrate| (($ $) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. Warning: function does not check for a term of degree \\spad{-1}.")) (|seriesToOutputForm| (((|OutputForm|) (|Stream| (|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|))) (|Reference| (|OrderedCompletion| (|Integer|))) (|Symbol|) |#1| (|Fraction| (|Integer|))) "\\spad{seriesToOutputForm(st,refer,var,cen,r)} prints the series \\spad{f((var - cen)^r)}.")) (|iCompose| (($ $ $) "\\spad{iCompose(f,g)} returns \\spad{f(g(x))}. This is an internal function which should only be called for Taylor series \\spad{f(x)} and \\spad{g(x)} such that the constant coefficient of \\spad{g(x)} is zero.")) (|taylorQuoByVar| (($ $) "\\spad{taylorQuoByVar(a0 + a1 x + a2 x**2 + ...)} returns \\spad{a1 + a2 x + a3 x**2 + ...}")) (|iExquo| (((|Union| $ "failed") $ $ (|Boolean|)) "\\spad{iExquo(f,g,taylor?)} is the quotient of the power series \\spad{f} and \\spad{g}. If \\spad{taylor?} is \\spad{true},{} then we must have \\spad{order(f) >= order(g)}.")) (|multiplyCoefficients| (($ (|Mapping| |#1| (|Integer|)) $) "\\spad{multiplyCoefficients(fn,f)} returns the series \\spad{sum(fn(n) * an * x^n,n = n0..)},{} where \\spad{f} is the series \\spad{sum(an * x^n,n = n0..)}.")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(f)} tests if \\spad{f} is a single monomial.")) (|series| (($ (|Stream| (|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|)))) "\\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents.")) (|getStream| (((|Stream| (|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|))) $) "\\spad{getStream(f)} returns the stream of terms representing the series \\spad{f}.")) (|getRef| (((|Reference| (|OrderedCompletion| (|Integer|))) $) "\\spad{getRef(f)} returns a reference containing the order to which the terms of \\spad{f} have been computed.")) (|makeSeries| (($ (|Reference| (|OrderedCompletion| (|Integer|))) (|Stream| (|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|)))) "\\spad{makeSeries(refer,str)} creates a power series from the reference \\spad{refer} and the stream \\spad{str}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))) (|HasCategory| (-484) (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-312))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484)))))) 
(-531 |Coef|) 
((|constructor| (NIL "Internal package for dense Taylor series. This is an internal Taylor series type in which Taylor series are represented by a \\spadtype{Stream} of \\spadtype{Ring} elements. For univariate series,{} the \\spad{Stream} elements are the Taylor coefficients. For multivariate series,{} the \\spad{n}th Stream element is a form of degree \\spad{n} in the power series variables.")) (* (($ $ (|Integer|)) "\\spad{x*i} returns the product of integer \\spad{i} and the series \\spad{x}.")) (|order| (((|NonNegativeInteger|) $ (|NonNegativeInteger|)) "\\spad{order(x,n)} returns the minimum of \\spad{n} and the order of \\spad{x}.") (((|NonNegativeInteger|) $) "\\spad{order(x)} returns the order of a power series \\spad{x},{} \\indented{1}{\\spadignore{i.e.} the degree of the first non-zero term of the series.}")) (|pole?| (((|Boolean|) $) "\\spad{pole?(x)} tests if the series \\spad{x} has a pole. \\indented{1}{Note: this is \\spad{false} when \\spad{x} is a Taylor series.}")) (|series| (($ (|Stream| |#1|)) "\\spad{series(s)} creates a power series from a stream of \\indented{1}{ring elements.} \\indented{1}{For univariate series types,{} the stream \\spad{s} should be a stream} \\indented{1}{of Taylor coefficients. For multivariate series types,{} the} \\indented{1}{stream \\spad{s} should be a stream of forms the \\spad{n}th element} \\indented{1}{of which is a} \\indented{1}{form of degree \\spad{n} in the power series variables.}")) (|coefficients| (((|Stream| |#1|) $) "\\spad{coefficients(x)} returns a stream of ring elements. \\indented{1}{When \\spad{x} is a univariate series,{} this is a stream of Taylor} \\indented{1}{coefficients. When \\spad{x} is a multivariate series,{} the} \\indented{1}{\\spad{n}th element of the stream is a form of} \\indented{1}{degree \\spad{n} in the power series variables.}"))) 
(((-3996 "*") |has| |#1| (-495)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-495)))) 
(-532) 
((|constructor| (NIL "This domain provides representations for internal type form.")) (|mappingMode| (($ $ (|List| $)) "\\spad{mappingMode(r,ts)} returns a mapping mode with return mode \\spad{r},{} and parameter modes \\spad{ts}.")) (|categoryMode| (($) "\\spad{categoryMode} is a constant mode denoting Category.")) (|voidMode| (($) "\\spad{voidMode} is a constant mode denoting Void.")) (|noValueMode| (($) "\\spad{noValueMode} is a constant mode that indicates that the value of an expression is to be ignored.")) (|jokerMode| (($) "\\spad{jokerMode} is a constant that stands for any mode in a type inference context"))) 
NIL 
NIL 
(-533 A B) 
((|constructor| (NIL "Functions defined on streams with entries in two sets.")) (|map| (((|InfiniteTuple| |#2|) (|Mapping| |#2| |#1|) (|InfiniteTuple| |#1|)) "\\spad{map(f,[x0,x1,x2,...])} returns \\spad{[f(x0),f(x1),f(x2),..]}."))) 
NIL 
NIL 
(-534 A B C) 
((|constructor| (NIL "Functions defined on streams with entries in two sets.")) (|map| (((|Stream| |#3|) (|Mapping| |#3| |#1| |#2|) (|InfiniteTuple| |#1|) (|Stream| |#2|)) "\\spad{map(f,a,b)} \\undocumented") (((|Stream| |#3|) (|Mapping| |#3| |#1| |#2|) (|Stream| |#1|) (|InfiniteTuple| |#2|)) "\\spad{map(f,a,b)} \\undocumented") (((|InfiniteTuple| |#3|) (|Mapping| |#3| |#1| |#2|) (|InfiniteTuple| |#1|) (|InfiniteTuple| |#2|)) "\\spad{map(f,a,b)} \\undocumented"))) 
NIL 
NIL 
(-535 R -3092 FG) 
((|constructor| (NIL "This package provides transformations from trigonometric functions to exponentials and logarithms,{} and back. \\spad{F} and FG should be the same type of function space.")) (|trigs2explogs| ((|#3| |#3| (|List| (|Kernel| |#3|)) (|List| (|Symbol|))) "\\spad{trigs2explogs(f, [k1,...,kn], [x1,...,xm])} rewrites all the trigonometric functions appearing in \\spad{f} and involving one of the \\spad{xi's} in terms of complex logarithms and exponentials. A kernel of the form \\spad{tan(u)} is expressed using \\spad{exp(u)**2} if it is one of the \\spad{ki's},{} in terms of \\spad{exp(2*u)} otherwise.")) (|explogs2trigs| (((|Complex| |#2|) |#3|) "\\spad{explogs2trigs(f)} rewrites all the complex logs and exponentials appearing in \\spad{f} in terms of trigonometric functions.")) (F2FG ((|#3| |#2|) "\\spad{F2FG(a + sqrt(-1) b)} returns \\spad{a + i b}.")) (FG2F ((|#2| |#3|) "\\spad{FG2F(a + i b)} returns \\spad{a + sqrt(-1) b}.")) (GF2FG ((|#3| (|Complex| |#2|)) "\\spad{GF2FG(a + i b)} returns \\spad{a + i b} viewed as a function with the \\spad{i} pushed down into the coefficient domain."))) 
NIL 
NIL 
(-536 S) 
((|constructor| (NIL "This package implements 'infinite tuples' for the interpreter. The representation is a stream.")) (|construct| (((|Stream| |#1|) $) "\\spad{construct(t)} converts an infinite tuple to a stream.")) (|generate| (($ (|Mapping| |#1| |#1|) |#1|) "\\spad{generate(f,s)} returns \\spad{[s,f(s),f(f(s)),...]}.")) (|select| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{select(p,t)} returns \\spad{[x for x in t | p(x)]}.")) (|filterUntil| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{filterUntil(p,t)} returns \\spad{[x for x in t while not p(x)]}.")) (|filterWhile| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{filterWhile(p,t)} returns \\spad{[x for x in t while p(x)]}.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(f,t)} replaces the tuple \\spad{t} by \\spad{[f(x) for x in t]}."))) 
NIL 
NIL 
(-537 S |Index| |Entry|) 
((|constructor| (NIL "An indexed aggregate is a many-to-one mapping of indices to entries. For example,{} a one-dimensional-array is an indexed aggregate where the index is an integer. Also,{} a table is an indexed aggregate where the indices and entries may have any type.")) (|swap!| (((|Void|) $ |#2| |#2|) "\\spad{swap!(u,i,j)} interchanges elements \\spad{i} and \\spad{j} of aggregate \\spad{u}. No meaningful value is returned.")) (|fill!| (($ $ |#3|) "\\spad{fill!(u,x)} replaces each entry in aggregate \\spad{u} by \\spad{x}. The modified \\spad{u} is returned as value.")) (|first| ((|#3| $) "\\spad{first(u)} returns the first element \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{first([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = \\spad{x}}. Error: if \\spad{u} is empty.")) (|minIndex| ((|#2| $) "\\spad{minIndex(u)} returns the minimum index \\spad{i} of aggregate \\spad{u}. Note: in general,{} \\axiom{minIndex(a) = reduce(min,{}[\\spad{i} for \\spad{i} in indices a])}; for lists,{} \\axiom{minIndex(a) = 1}.")) (|maxIndex| ((|#2| $) "\\spad{maxIndex(u)} returns the maximum index \\spad{i} of aggregate \\spad{u}. Note: in general,{} \\axiom{maxIndex(\\spad{u}) = reduce(max,{}[\\spad{i} for \\spad{i} in indices \\spad{u}])}; if \\spad{u} is a list,{} \\axiom{maxIndex(\\spad{u}) = \\#u}.")) (|entry?| (((|Boolean|) |#3| $) "\\spad{entry?(x,u)} tests if \\spad{x} equals \\axiom{\\spad{u} . \\spad{i}} for some index \\spad{i}.")) (|indices| (((|List| |#2|) $) "\\spad{indices(u)} returns a list of indices of aggregate \\spad{u} in no particular order.")) (|index?| (((|Boolean|) |#2| $) "\\spad{index?(i,u)} tests if \\spad{i} is an index of aggregate \\spad{u}.")) (|entries| (((|List| |#3|) $) "\\spad{entries(u)} returns a list of all the entries of aggregate \\spad{u} in no assumed order."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995)) (|HasCategory| |#2| (QUOTE (-756))) (|HasAttribute| |#1| (QUOTE -3994)) (|HasCategory| |#3| (QUOTE (-1013)))) 
(-538 |Index| |Entry|) 
((|constructor| (NIL "An indexed aggregate is a many-to-one mapping of indices to entries. For example,{} a one-dimensional-array is an indexed aggregate where the index is an integer. Also,{} a table is an indexed aggregate where the indices and entries may have any type.")) (|swap!| (((|Void|) $ |#1| |#1|) "\\spad{swap!(u,i,j)} interchanges elements \\spad{i} and \\spad{j} of aggregate \\spad{u}. No meaningful value is returned.")) (|fill!| (($ $ |#2|) "\\spad{fill!(u,x)} replaces each entry in aggregate \\spad{u} by \\spad{x}. The modified \\spad{u} is returned as value.")) (|first| ((|#2| $) "\\spad{first(u)} returns the first element \\spad{x} of \\spad{u}. Note: for collections,{} \\axiom{first([\\spad{x},{}\\spad{y},{}...,{}\\spad{z}]) = \\spad{x}}. Error: if \\spad{u} is empty.")) (|minIndex| ((|#1| $) "\\spad{minIndex(u)} returns the minimum index \\spad{i} of aggregate \\spad{u}. Note: in general,{} \\axiom{minIndex(a) = reduce(min,{}[\\spad{i} for \\spad{i} in indices a])}; for lists,{} \\axiom{minIndex(a) = 1}.")) (|maxIndex| ((|#1| $) "\\spad{maxIndex(u)} returns the maximum index \\spad{i} of aggregate \\spad{u}. Note: in general,{} \\axiom{maxIndex(\\spad{u}) = reduce(max,{}[\\spad{i} for \\spad{i} in indices \\spad{u}])}; if \\spad{u} is a list,{} \\axiom{maxIndex(\\spad{u}) = \\#u}.")) (|entry?| (((|Boolean|) |#2| $) "\\spad{entry?(x,u)} tests if \\spad{x} equals \\axiom{\\spad{u} . \\spad{i}} for some index \\spad{i}.")) (|indices| (((|List| |#1|) $) "\\spad{indices(u)} returns a list of indices of aggregate \\spad{u} in no particular order.")) (|index?| (((|Boolean|) |#1| $) "\\spad{index?(i,u)} tests if \\spad{i} is an index of aggregate \\spad{u}.")) (|entries| (((|List| |#2|) $) "\\spad{entries(u)} returns a list of all the entries of aggregate \\spad{u} in no assumed order."))) 
NIL 
NIL 
(-539) 
((|constructor| (NIL "This domain represents the join of categories ASTs.")) (|categories| (((|List| (|TypeAst|)) $) "catehories(\\spad{x}) returns the types in the join `x'.")) (|coerce| (($ (|List| (|TypeAst|))) "ts::JoinAst construct the AST for a join of the types `ts'."))) 
NIL 
NIL 
(-540 R A) 
((|constructor| (NIL "\\indented{1}{AssociatedJordanAlgebra takes an algebra \\spad{A} and uses \\spadfun{*\\$A}} \\indented{1}{to define the new multiplications \\spad{a*b := (a *\\$A b + b *\\$A a)/2}} \\indented{1}{(anticommutator).} \\indented{1}{The usual notation \\spad{{a,b}_+} cannot be used due to} \\indented{1}{restrictions in the current language.} \\indented{1}{This domain only gives a Jordan algebra if the} \\indented{1}{Jordan-identity \\spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} holds} \\indented{1}{for all \\spad{a},{}\\spad{b},{}\\spad{c} in \\spad{A}.} \\indented{1}{This relation can be checked by} \\indented{1}{\\spadfun{jordanAdmissible?()\\$A}.} \\blankline If the underlying algebra is of type \\spadtype{FramedNonAssociativeAlgebra(R)} (\\spadignore{i.e.} a non associative algebra over \\spad{R} which is a free \\spad{R}-module of finite rank,{} together with a fixed \\spad{R}-module basis),{} then the same is \\spad{true} for the associated Jordan algebra. Moreover,{} if the underlying algebra is of type \\spadtype{FiniteRankNonAssociativeAlgebra(R)} (\\spadignore{i.e.} a non associative algebra over \\spad{R} which is a free \\spad{R}-module of finite rank),{} then the same \\spad{true} for the associated Jordan algebra.")) (|coerce| (($ |#2|) "\\spad{coerce(a)} coerces the element \\spad{a} of the algebra \\spad{A} to an element of the Jordan algebra \\spadtype{AssociatedJordanAlgebra}(\\spad{R},{}A)."))) 
((-3991 OR (-2562 (|has| |#2| (-316 |#1|)) (|has| |#1| (-495))) (-12 (|has| |#2| (-360 |#1|)) (|has| |#1| (-495)))) (-3989 . T) (-3988 . T)) 
((OR (|HasCategory| |#2| (|%list| (QUOTE -316) (|devaluate| |#1|))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|)))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#2| (|%list| (QUOTE -316) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|))))) (|HasCategory| |#2| (|%list| (QUOTE -316) (|devaluate| |#1|)))) 
(-541) 
((|constructor| (NIL "This is the datatype for the JVM bytecodes."))) 
NIL 
NIL 
(-542) 
((|constructor| (NIL "JVM class file access bitmask and values.")) (|jvmAbstract| (($) "The class was declared abstract; therefore object of this class may not be created.")) (|jvmInterface| (($) "The class file represents an interface,{} not a class.")) (|jvmSuper| (($) "Instruct the JVM to treat base clss method invokation specially.")) (|jvmFinal| (($) "The class was declared final; therefore no derived class allowed.")) (|jvmPublic| (($) "The class was declared public,{} therefore may be accessed from outside its package"))) 
NIL 
NIL 
(-543) 
((|constructor| (NIL "JVM class file constant pool tags.")) (|jvmNameAndTypeConstantTag| (($) "The correspondong constant pool entry represents the name and type of a field or method info.")) (|jvmInterfaceMethodConstantTag| (($) "The correspondong constant pool entry represents an interface method info.")) (|jvmMethodrefConstantTag| (($) "The correspondong constant pool entry represents a class method info.")) (|jvmFieldrefConstantTag| (($) "The corresponding constant pool entry represents a class field info.")) (|jvmStringConstantTag| (($) "The corresponding constant pool entry is a string constant info.")) (|jvmClassConstantTag| (($) "The corresponding constant pool entry represents a class or and interface.")) (|jvmDoubleConstantTag| (($) "The corresponding constant pool entry is a double constant info.")) (|jvmLongConstantTag| (($) "The corresponding constant pool entry is a long constant info.")) (|jvmFloatConstantTag| (($) "The corresponding constant pool entry is a float constant info.")) (|jvmIntegerConstantTag| (($) "The corresponding constant pool entry is an integer constant info.")) (|jvmUTF8ConstantTag| (($) "The corresponding constant pool entry is sequence of bytes representing Java \\spad{UTF8} string constant."))) 
NIL 
NIL 
(-544) 
((|constructor| (NIL "JVM class field access bitmask and values.")) (|jvmTransient| (($) "The field was declared transient.")) (|jvmVolatile| (($) "The field was declared volatile.")) (|jvmFinal| (($) "The field was declared final; therefore may not be modified after initialization.")) (|jvmStatic| (($) "The field was declared static.")) (|jvmProtected| (($) "The field was declared protected; therefore may be accessed withing derived classes.")) (|jvmPrivate| (($) "The field was declared private; threfore can be accessed only within the defining class.")) (|jvmPublic| (($) "The field was declared public; therefore mey accessed from outside its package."))) 
NIL 
NIL 
(-545) 
((|constructor| (NIL "JVM class method access bitmask and values.")) (|jvmStrict| (($) "The method was declared fpstrict; therefore floating-point mode is FP-strict.")) (|jvmAbstract| (($) "The method was declared abstract; therefore no implementation is provided.")) (|jvmNative| (($) "The method was declared native; therefore implemented in a language other than Java.")) (|jvmSynchronized| (($) "The method was declared synchronized.")) (|jvmFinal| (($) "The method was declared final; therefore may not be overriden. in derived classes.")) (|jvmStatic| (($) "The method was declared static.")) (|jvmProtected| (($) "The method was declared protected; therefore may be accessed withing derived classes.")) (|jvmPrivate| (($) "The method was declared private; threfore can be accessed only within the defining class.")) (|jvmPublic| (($) "The method was declared public; therefore mey accessed from outside its package."))) 
NIL 
NIL 
(-546) 
((|constructor| (NIL "This is the datatype for the JVM opcodes."))) 
NIL 
NIL 
(-547 |Entry|) 
((|constructor| (NIL "This domain allows a random access file to be viewed both as a table and as a file object.")) (|pack!| (($ $) "\\spad{pack!(f)} reorganizes the file \\spad{f} on disk to recover unused space."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (QUOTE (|:| -3859 (-1072))) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#1|))))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-1013)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| (-1072) (QUOTE (-756))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-72)))) 
(-548 S |Key| |Entry|) 
((|constructor| (NIL "A keyed dictionary is a dictionary of key-entry pairs for which there is a unique entry for each key.")) (|search| (((|Union| |#3| "failed") |#2| $) "\\spad{search(k,t)} searches the table \\spad{t} for the key \\spad{k},{} returning the entry stored in \\spad{t} for key \\spad{k}. If \\spad{t} has no such key,{} \\axiom{search(\\spad{k},{}\\spad{t})} returns \"failed\".")) (|remove!| (((|Union| |#3| "failed") |#2| $) "\\spad{remove!(k,t)} searches the table \\spad{t} for the key \\spad{k} removing (and return) the entry if there. If \\spad{t} has no such key,{} \\axiom{remove!(\\spad{k},{}\\spad{t})} returns \"failed\".")) (|keys| (((|List| |#2|) $) "\\spad{keys(t)} returns the list the keys in table \\spad{t}.")) (|key?| (((|Boolean|) |#2| $) "\\spad{key?(k,t)} tests if \\spad{k} is a key in table \\spad{t}."))) 
NIL 
NIL 
(-549 |Key| |Entry|) 
((|constructor| (NIL "A keyed dictionary is a dictionary of key-entry pairs for which there is a unique entry for each key.")) (|search| (((|Union| |#2| "failed") |#1| $) "\\spad{search(k,t)} searches the table \\spad{t} for the key \\spad{k},{} returning the entry stored in \\spad{t} for key \\spad{k}. If \\spad{t} has no such key,{} \\axiom{search(\\spad{k},{}\\spad{t})} returns \"failed\".")) (|remove!| (((|Union| |#2| "failed") |#1| $) "\\spad{remove!(k,t)} searches the table \\spad{t} for the key \\spad{k} removing (and return) the entry if there. If \\spad{t} has no such key,{} \\axiom{remove!(\\spad{k},{}\\spad{t})} returns \"failed\".")) (|keys| (((|List| |#1|) $) "\\spad{keys(t)} returns the list the keys in table \\spad{t}.")) (|key?| (((|Boolean|) |#1| $) "\\spad{key?(k,t)} tests if \\spad{k} is a key in table \\spad{t}."))) 
((-3995 . T)) 
NIL 
(-550 S) 
((|constructor| (NIL "A kernel over a set \\spad{S} is an operator applied to a given list of arguments from \\spad{S}.")) (|is?| (((|Boolean|) $ (|Symbol|)) "\\spad{is?(op(a1,...,an), s)} tests if the name of op is \\spad{s}.") (((|Boolean|) $ (|BasicOperator|)) "\\spad{is?(op(a1,...,an), f)} tests if op = \\spad{f}.")) (|symbolIfCan| (((|Union| (|Symbol|) "failed") $) "\\spad{symbolIfCan(k)} returns \\spad{k} viewed as a symbol if \\spad{k} is a symbol,{} and \"failed\" otherwise.")) (|kernel| (($ (|Symbol|)) "\\spad{kernel(x)} returns \\spad{x} viewed as a kernel.") (($ (|BasicOperator|) (|List| |#1|) (|NonNegativeInteger|)) "\\spad{kernel(op, [a1,...,an], m)} returns the kernel \\spad{op(a1,...,an)} of nesting level \\spad{m}. Error: if \\spad{op} is \\spad{k}-ary for some \\spad{k} not equal to \\spad{m}.")) (|height| (((|NonNegativeInteger|) $) "\\spad{height(k)} returns the nesting level of \\spad{k}.")) (|argument| (((|List| |#1|) $) "\\spad{argument(op(a1,...,an))} returns \\spad{[a1,...,an]}.")) (|operator| (((|BasicOperator|) $) "\\spad{operator(op(a1,...,an))} returns the operator op."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#1| (QUOTE (-553 (-800 (-484)))))) 
(-551 R S) 
((|constructor| (NIL "This package exports some auxiliary functions on kernels")) (|constantIfCan| (((|Union| |#1| "failed") (|Kernel| |#2|)) "\\spad{constantIfCan(k)} \\undocumented")) (|constantKernel| (((|Kernel| |#2|) |#1|) "\\spad{constantKernel(r)} \\undocumented"))) 
NIL 
NIL 
(-552 S) 
((|constructor| (NIL "A is coercible to \\spad{B} means any element of A can automatically be converted into an element of \\spad{B} by the interpreter.")) (|coerce| ((|#1| $) "\\spad{coerce(a)} transforms a into an element of \\spad{S}."))) 
NIL 
NIL 
(-553 S) 
((|constructor| (NIL "A is convertible to \\spad{B} means any element of A can be converted into an element of \\spad{B},{} but not automatically by the interpreter.")) (|convert| ((|#1| $) "\\spad{convert(a)} transforms a into an element of \\spad{S}."))) 
NIL 
NIL 
(-554 -3092 UP) 
((|constructor| (NIL "\\spadtype{Kovacic} provides a modified Kovacic's algorithm for solving explicitely irreducible 2nd order linear ordinary differential equations.")) (|kovacic| (((|Union| (|SparseUnivariatePolynomial| (|Fraction| |#2|)) "failed") (|Fraction| |#2|) (|Fraction| |#2|) (|Fraction| |#2|) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{kovacic(a_0,a_1,a_2,ezfactor)} returns either \"failed\" or \\spad{P}(\\spad{u}) such that \\spad{\\$e^{\\int(-a_1/2a_2)} e^{\\int u}\\$} is a solution of \\indented{5}{\\spad{\\$a_2 y'' + a_1 y' + a0 y = 0\\$}} whenever \\spad{u} is a solution of \\spad{P u = 0}. The equation must be already irreducible over the rational functions. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.") (((|Union| (|SparseUnivariatePolynomial| (|Fraction| |#2|)) "failed") (|Fraction| |#2|) (|Fraction| |#2|) (|Fraction| |#2|)) "\\spad{kovacic(a_0,a_1,a_2)} returns either \"failed\" or \\spad{P}(\\spad{u}) such that \\spad{\\$e^{\\int(-a_1/2a_2)} e^{\\int u}\\$} is a solution of \\indented{5}{\\spad{a_2 y'' + a_1 y' + a0 y = 0}} whenever \\spad{u} is a solution of \\spad{P u = 0}. The equation must be already irreducible over the rational functions."))) 
NIL 
NIL 
(-555 S) 
((|constructor| (NIL "A is coercible from \\spad{B} iff any element of domain \\spad{B} can be automically converted into an element of domain A.")) (|coerce| (($ |#1|) "\\spad{coerce(s)} transforms `s' into an element of `\\%'."))) 
NIL 
NIL 
(-556) 
((|constructor| (NIL "This domain implements Kleene's 3-valued propositional logic.")) (|case| (((|Boolean|) $ (|[\|\|]| |true|)) "\\spad{s case true} holds if the value of `x' is `true'.") (((|Boolean|) $ (|[\|\|]| |unknown|)) "\\spad{x case unknown} holds if the value of `x' is `unknown'") (((|Boolean|) $ (|[\|\|]| |false|)) "\\spad{x case false} holds if the value of `x' is `false'")) (|unknown| (($) "the indefinite `unknown'"))) 
NIL 
NIL 
(-557 S) 
((|constructor| (NIL "A is convertible from \\spad{B} iff any element of domain \\spad{B} can be explicitly converted into an element of domain A.")) (|convert| (($ |#1|) "\\spad{convert(s)} transforms `s' into an element of `\\%'."))) 
NIL 
NIL 
(-558 A R S) 
((|constructor| (NIL "LocalAlgebra produces the localization of an algebra,{} \\spadignore{i.e.} fractions whose numerators come from some \\spad{R} algebra.")) (|denom| ((|#3| $) "\\spad{denom x} returns the denominator of \\spad{x}.")) (|numer| ((|#1| $) "\\spad{numer x} returns the numerator of \\spad{x}.")) (/ (($ |#1| |#3|) "\\spad{a / d} divides the element \\spad{a} by \\spad{d}.") (($ $ |#3|) "\\spad{x / d} divides the element \\spad{x} by \\spad{d}."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-755)))) 
(-559 S R) 
((|constructor| (NIL "The category of all left algebras over an arbitrary ring.")) (|coerce| (($ |#2|) "\\spad{coerce(r)} returns \\spad{r} * 1 where 1 is the identity of the left algebra."))) 
NIL 
NIL 
(-560 R) 
((|constructor| (NIL "The category of all left algebras over an arbitrary ring.")) (|coerce| (($ |#1|) "\\spad{coerce(r)} returns \\spad{r} * 1 where 1 is the identity of the left algebra."))) 
((-3991 . T)) 
NIL 
(-561 R -3092) 
((|constructor| (NIL "This package computes the forward Laplace Transform.")) (|laplace| ((|#2| |#2| (|Symbol|) (|Symbol|)) "\\spad{laplace(f, t, s)} returns the Laplace transform of \\spad{f(t)} using \\spad{s} as the new variable. This is \\spad{integral(exp(-s*t)*f(t), t = 0..\\%plusInfinity)}. Returns the formal object \\spad{laplace(f, t, s)} if it cannot compute the transform."))) 
NIL 
NIL 
(-562 R UP) 
((|constructor| (NIL "\\indented{1}{Univariate polynomials with negative and positive exponents.} Author: Manuel Bronstein Date Created: May 1988 Date Last Updated: 26 Apr 1990")) (|separate| (((|Record| (|:| |polyPart| $) (|:| |fracPart| (|Fraction| |#2|))) (|Fraction| |#2|)) "\\spad{separate(x)} \\undocumented")) (|monomial| (($ |#1| (|Integer|)) "\\spad{monomial(x,n)} \\undocumented")) (|coefficient| ((|#1| $ (|Integer|)) "\\spad{coefficient(x,n)} \\undocumented")) (|trailingCoefficient| ((|#1| $) "\\spad{trailingCoefficient }\\undocumented")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient }\\undocumented")) (|reductum| (($ $) "\\spad{reductum(x)} \\undocumented")) (|order| (((|Integer|) $) "\\spad{order(x)} \\undocumented")) (|degree| (((|Integer|) $) "\\spad{degree(x)} \\undocumented")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(x)} \\undocumented"))) 
((-3989 . T) (-3988 . T) ((-3996 "*") . T) (-3987 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484))))) 
(-563 R E V P TS ST) 
((|constructor| (NIL "A package for solving polynomial systems by means of Lazard triangular sets [1]. This package provides two operations. One for solving in the sense of the regular zeros,{} and the other for solving in the sense of the Zariski closure. Both produce square-free regular sets. Moreover,{} the decompositions do not contain any redundant component. However,{} only zero-dimensional regular sets are normalized,{} since normalization may be time consumming in positive dimension. The decomposition process is that of [2].\\newline References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991} \\indented{1}{[2] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|zeroSetSplit| (((|List| |#6|) (|List| |#4|) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{}clos?)} has the same specifications as \\axiomOpFrom{zeroSetSplit(lp,{}clos?)}{RegularTriangularSetCategory}.")) (|normalizeIfCan| ((|#6| |#6|) "\\axiom{normalizeIfCan(ts)} returns \\axiom{ts} in an normalized shape if \\axiom{ts} is zero-dimensional."))) 
NIL 
NIL 
(-564 OV E Z P) 
((|constructor| (NIL "Package for leading coefficient determination in the lifting step. Package working for every \\spad{R} euclidean with property \"F\".")) (|distFact| (((|Union| (|Record| (|:| |polfac| (|List| |#4|)) (|:| |correct| |#3|) (|:| |corrfact| (|List| (|SparseUnivariatePolynomial| |#3|)))) "failed") |#3| (|List| (|SparseUnivariatePolynomial| |#3|)) (|Record| (|:| |contp| |#3|) (|:| |factors| (|List| (|Record| (|:| |irr| |#4|) (|:| |pow| (|Integer|)))))) (|List| |#3|) (|List| |#1|) (|List| |#3|)) "\\spad{distFact(contm,unilist,plead,vl,lvar,lval)},{} where \\spad{contm} is the content of the evaluated polynomial,{} \\spad{unilist} is the list of factors of the evaluated polynomial,{} \\spad{plead} is the complete factorization of the leading coefficient,{} \\spad{vl} is the list of factors of the leading coefficient evaluated,{} \\spad{lvar} is the list of variables,{} \\spad{lval} is the list of values,{} returns a record giving the list of leading coefficients to impose on the univariate factors,{}")) (|polCase| (((|Boolean|) |#3| (|NonNegativeInteger|) (|List| |#3|)) "\\spad{polCase(contprod, numFacts, evallcs)},{} where \\spad{contprod} is the product of the content of the leading coefficient of the polynomial to be factored with the content of the evaluated polynomial,{} \\spad{numFacts} is the number of factors of the leadingCoefficient,{} and evallcs is the list of the evaluated factors of the leadingCoefficient,{} returns \\spad{true} if the factors of the leading Coefficient can be distributed with this valuation."))) 
NIL 
NIL 
(-565) 
((|constructor| (NIL "This domain represents assignment expressions.")) (|rhs| (((|SpadAst|) $) "\\spad{rhs(e)} returns the right hand side of the assignment expression `e'.")) (|lhs| (((|SpadAst|) $) "\\spad{lhs(e)} returns the left hand side of the assignment expression `e'."))) 
NIL 
NIL 
(-566 |VarSet| R |Order|) 
((|constructor| (NIL "Management of the Lie Group associated with a free nilpotent Lie algebra. Every Lie bracket with length greater than \\axiom{Order} are assumed to be null. The implementation inherits from the \\spadtype{XPBWPolynomial} domain constructor: Lyndon coordinates are exponential coordinates of the second kind. \\newline Author: Michel Petitot (petitot@lifl.fr).")) (|identification| (((|List| (|Equation| |#2|)) $ $) "\\axiom{identification(\\spad{g},{}\\spad{h})} returns the list of equations \\axiom{g_i = h_i},{} where \\axiom{g_i} (resp. \\axiom{h_i}) are exponential coordinates of \\axiom{\\spad{g}} (resp. \\axiom{\\spad{h}}).")) (|LyndonCoordinates| (((|List| (|Record| (|:| |k| (|LyndonWord| |#1|)) (|:| |c| |#2|))) $) "\\axiom{LyndonCoordinates(\\spad{g})} returns the exponential coordinates of \\axiom{\\spad{g}}.")) (|LyndonBasis| (((|List| (|LiePolynomial| |#1| |#2|)) (|List| |#1|)) "\\axiom{LyndonBasis(lv)} returns the Lyndon basis of the nilpotent free Lie algebra.")) (|varList| (((|List| |#1|) $) "\\axiom{varList(\\spad{g})} returns the list of variables of \\axiom{\\spad{g}}.")) (|mirror| (($ $) "\\axiom{mirror(\\spad{g})} is the mirror of the internal representation of \\axiom{\\spad{g}}.")) (|coerce| (((|XPBWPolynomial| |#1| |#2|) $) "\\axiom{coerce(\\spad{g})} returns the internal representation of \\axiom{\\spad{g}}.") (((|XDistributedPolynomial| |#1| |#2|) $) "\\axiom{coerce(\\spad{g})} returns the internal representation of \\axiom{\\spad{g}}.")) (|ListOfTerms| (((|List| (|Record| (|:| |k| (|PoincareBirkhoffWittLyndonBasis| |#1|)) (|:| |c| |#2|))) $) "\\axiom{ListOfTerms(\\spad{p})} returns the internal representation of \\axiom{\\spad{p}}.")) (|log| (((|LiePolynomial| |#1| |#2|) $) "\\axiom{log(\\spad{p})} returns the logarithm of \\axiom{\\spad{p}}.")) (|exp| (($ (|LiePolynomial| |#1| |#2|)) "\\axiom{exp(\\spad{p})} returns the exponential of \\axiom{\\spad{p}}."))) 
((-3991 . T)) 
NIL 
(-567 R |ls|) 
((|constructor| (NIL "A package for solving polynomial systems with finitely many solutions. The decompositions are given by means of regular triangular sets. The computations use lexicographical Groebner bases. The main operations are \\axiomOpFrom{lexTriangular}{LexTriangularPackage} and \\axiomOpFrom{squareFreeLexTriangular}{LexTriangularPackage}. The second one provide decompositions by means of square-free regular triangular sets. Both are based on the {\\em lexTriangular} method described in [1]. They differ from the algorithm described in [2] by the fact that multiciplities of the roots are not kept. With the \\axiomOpFrom{squareFreeLexTriangular}{LexTriangularPackage} operation all multiciplities are removed. With the other operation some multiciplities may remain. Both operations admit an optional argument to produce normalized triangular sets. \\newline")) (|zeroSetSplit| (((|List| (|SquareFreeRegularTriangularSet| |#1| (|IndexedExponents| (|OrderedVariableList| |#2|)) (|OrderedVariableList| |#2|) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|)))) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{} norm?)} decomposes the variety associated with \\axiom{lp} into square-free regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \\axiom{lp} needs to generate a zero-dimensional ideal. If \\axiom{norm?} is \\axiom{\\spad{true}} then the regular sets are normalized.") (((|List| (|RegularChain| |#1| |#2|)) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{} norm?)} decomposes the variety associated with \\axiom{lp} into regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \\axiom{lp} needs to generate a zero-dimensional ideal. If \\axiom{norm?} is \\axiom{\\spad{true}} then the regular sets are normalized.")) (|squareFreeLexTriangular| (((|List| (|SquareFreeRegularTriangularSet| |#1| (|IndexedExponents| (|OrderedVariableList| |#2|)) (|OrderedVariableList| |#2|) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|)))) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|Boolean|)) "\\axiom{squareFreeLexTriangular(base,{} norm?)} decomposes the variety associated with \\axiom{base} into square-free regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \\axiom{base} needs to be a lexicographical Groebner basis of a zero-dimensional ideal. If \\axiom{norm?} is \\axiom{\\spad{true}} then the regular sets are normalized.")) (|lexTriangular| (((|List| (|RegularChain| |#1| |#2|)) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|Boolean|)) "\\axiom{lexTriangular(base,{} norm?)} decomposes the variety associated with \\axiom{base} into regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \\axiom{base} needs to be a lexicographical Groebner basis of a zero-dimensional ideal. If \\axiom{norm?} is \\axiom{\\spad{true}} then the regular sets are normalized.")) (|groebner| (((|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|)))) "\\axiom{groebner(lp)} returns the lexicographical Groebner basis of \\axiom{lp}. If \\axiom{lp} generates a zero-dimensional ideal then the {\\em FGLM} strategy is used,{} otherwise the {\\em Sugar} strategy is used.")) (|fglmIfCan| (((|Union| (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) "failed") (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|)))) "\\axiom{fglmIfCan(lp)} returns the lexicographical Groebner basis of \\axiom{lp} by using the {\\em FGLM} strategy,{} if \\axiom{zeroDimensional?(lp)} holds .")) (|zeroDimensional?| (((|Boolean|) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|)))) "\\axiom{zeroDimensional?(lp)} returns \\spad{true} iff \\axiom{lp} generates a zero-dimensional ideal \\spad{w}.\\spad{r}.\\spad{t}. the variables involved in \\axiom{lp}."))) 
NIL 
NIL 
(-568 R -3092) 
((|constructor| (NIL "This package provides liouvillian functions over an integral domain.")) (|integral| ((|#2| |#2| (|SegmentBinding| |#2|)) "\\spad{integral(f,x = a..b)} denotes the definite integral of \\spad{f} with respect to \\spad{x} from \\spad{a} to \\spad{b}.") ((|#2| |#2| (|Symbol|)) "\\spad{integral(f,x)} indefinite integral of \\spad{f} with respect to \\spad{x}.")) (|dilog| ((|#2| |#2|) "\\spad{dilog(f)} denotes the dilogarithm")) (|erf| ((|#2| |#2|) "\\spad{erf(f)} denotes the error function")) (|li| ((|#2| |#2|) "\\spad{li(f)} denotes the logarithmic integral")) (|Ci| ((|#2| |#2|) "\\spad{Ci(f)} denotes the cosine integral")) (|Si| ((|#2| |#2|) "\\spad{Si(f)} denotes the sine integral")) (|Ei| ((|#2| |#2|) "\\spad{Ei(f)} denotes the exponential integral")) (|operator| (((|BasicOperator|) (|BasicOperator|)) "\\spad{operator(op)} returns the Liouvillian operator based on \\spad{op}")) (|belong?| (((|Boolean|) (|BasicOperator|)) "\\spad{belong?(op)} checks if \\spad{op} is Liouvillian"))) 
NIL 
NIL 
(-569) 
((|constructor| (NIL "Category for the transcendental Liouvillian functions.")) (|erf| (($ $) "\\spad{erf(x)} returns the error function of \\spad{x},{} \\spadignore{i.e.} \\spad{2 / sqrt(\\%pi)} times the integral of \\spad{exp(-x**2) dx}.")) (|dilog| (($ $) "\\spad{dilog(x)} returns the dilogarithm of \\spad{x},{} \\spadignore{i.e.} the integral of \\spad{log(x) / (1 - x) dx}.")) (|li| (($ $) "\\spad{li(x)} returns the logarithmic integral of \\spad{x},{} \\spadignore{i.e.} the integral of \\spad{dx / log(x)}.")) (|Ci| (($ $) "\\spad{Ci(x)} returns the cosine integral of \\spad{x},{} \\spadignore{i.e.} the integral of \\spad{cos(x) / x dx}.")) (|Si| (($ $) "\\spad{Si(x)} returns the sine integral of \\spad{x},{} \\spadignore{i.e.} the integral of \\spad{sin(x) / x dx}.")) (|Ei| (($ $) "\\spad{Ei(x)} returns the exponential integral of \\spad{x},{} \\spadignore{i.e.} the integral of \\spad{exp(x)/x dx}."))) 
NIL 
NIL 
(-570 |lv| -3092) 
((|constructor| (NIL "\\indented{1}{Given a Groebner basis \\spad{B} with respect to the total degree ordering for} a zero-dimensional ideal \\spad{I},{} compute a Groebner basis with respect to the lexicographical ordering by using linear algebra.")) (|transform| (((|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|) (|DistributedMultivariatePolynomial| |#1| |#2|)) "\\spad{transform }\\undocumented")) (|choosemon| (((|DistributedMultivariatePolynomial| |#1| |#2|) (|DistributedMultivariatePolynomial| |#1| |#2|) (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{choosemon }\\undocumented")) (|intcompBasis| (((|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|OrderedVariableList| |#1|) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{intcompBasis }\\undocumented")) (|anticoord| (((|DistributedMultivariatePolynomial| |#1| |#2|) (|List| |#2|) (|DistributedMultivariatePolynomial| |#1| |#2|) (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{anticoord }\\undocumented")) (|coord| (((|Vector| |#2|) (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{coord }\\undocumented")) (|computeBasis| (((|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{computeBasis }\\undocumented")) (|minPol| (((|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|OrderedVariableList| |#1|)) "\\spad{minPol }\\undocumented") (((|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) (|OrderedVariableList| |#1|)) "\\spad{minPol }\\undocumented")) (|totolex| (((|List| (|DistributedMultivariatePolynomial| |#1| |#2|)) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{totolex }\\undocumented")) (|groebgen| (((|Record| (|:| |glbase| (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) (|:| |glval| (|List| (|Integer|)))) (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{groebgen }\\undocumented")) (|linGenPos| (((|Record| (|:| |gblist| (|List| (|DistributedMultivariatePolynomial| |#1| |#2|))) (|:| |gvlist| (|List| (|Integer|)))) (|List| (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|))) "\\spad{linGenPos }\\undocumented"))) 
NIL 
NIL 
(-571) 
((|constructor| (NIL "This domain provides a simple way to save values in files.")) (|setelt| (((|Any|) $ (|Symbol|) (|Any|)) "\\spad{lib.k := v} saves the value \\spad{v} in the library \\spad{lib}. It can later be extracted using the key \\spad{k}.")) (|pack!| (($ $) "\\spad{pack!(f)} reorganizes the file \\spad{f} on disk to recover unused space.")) (|library| (($ (|FileName|)) "\\spad{library(ln)} creates a new library file."))) 
((-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-260 (-2 (|:| -3859 (-1072)) (|:| |entry| (-51)))))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-1013)))) (OR (|HasCategory| (-51) (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-1013)))) (OR (|HasCategory| (-51) (QUOTE (-72))) (|HasCategory| (-51) (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-552 (-772)))) (|HasCategory| (-51) (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-553 (-473)))) (-12 (|HasCategory| (-51) (QUOTE (-260 (-51)))) (|HasCategory| (-51) (QUOTE (-1013)))) (|HasCategory| (-1072) (QUOTE (-756))) (OR (|HasCategory| (-51) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-72)))) (|HasCategory| (-51) (QUOTE (-1013))) (|HasCategory| (-51) (QUOTE (-72))) (|HasCategory| (-51) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| (-51))) (QUOTE (-1013)))) 
(-572 R A) 
((|constructor| (NIL "AssociatedLieAlgebra takes an algebra \\spad{A} and uses \\spadfun{*\\$A} to define the Lie bracket \\spad{a*b := (a *\\$A b - b *\\$A a)} (commutator). Note that the notation \\spad{[a,b]} cannot be used due to restrictions of the current compiler. This domain only gives a Lie algebra if the Jacobi-identity \\spad{(a*b)*c + (b*c)*a + (c*a)*b = 0} holds for all \\spad{a},{}\\spad{b},{}\\spad{c} in \\spad{A}. This relation can be checked by \\spad{lieAdmissible?()\\$A}. \\blankline If the underlying algebra is of type \\spadtype{FramedNonAssociativeAlgebra(R)} (\\spadignore{i.e.} a non associative algebra over \\spad{R} which is a free \\spad{R}-module of finite rank,{} together with a fixed \\spad{R}-module basis),{} then the same is \\spad{true} for the associated Lie algebra. Also,{} if the underlying algebra is of type \\spadtype{FiniteRankNonAssociativeAlgebra(R)} (\\spadignore{i.e.} a non associative algebra over \\spad{R} which is a free \\spad{R}-module of finite rank),{} then the same is \\spad{true} for the associated Lie algebra.")) (|coerce| (($ |#2|) "\\spad{coerce(a)} coerces the element \\spad{a} of the algebra \\spad{A} to an element of the Lie algebra \\spadtype{AssociatedLieAlgebra}(\\spad{R},{}A)."))) 
((-3991 OR (-2562 (|has| |#2| (-316 |#1|)) (|has| |#1| (-495))) (-12 (|has| |#2| (-360 |#1|)) (|has| |#1| (-495)))) (-3989 . T) (-3988 . T)) 
((OR (|HasCategory| |#2| (|%list| (QUOTE -316) (|devaluate| |#1|))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|)))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#2| (|%list| (QUOTE -316) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#2| (|%list| (QUOTE -360) (|devaluate| |#1|))))) (|HasCategory| |#2| (|%list| (QUOTE -316) (|devaluate| |#1|)))) 
(-573 S R) 
((|constructor| (NIL "\\axiom{JacobiIdentity} means that \\axiom{[\\spad{x},{}[\\spad{y},{}\\spad{z}]]+[\\spad{y},{}[\\spad{z},{}\\spad{x}]]+[\\spad{z},{}[\\spad{x},{}\\spad{y}]] = 0} holds.")) (/ (($ $ |#2|) "\\axiom{x/r} returns the division of \\axiom{\\spad{x}} by \\axiom{\\spad{r}}.")) (|construct| (($ $ $) "\\axiom{construct(\\spad{x},{}\\spad{y})} returns the Lie bracket of \\axiom{\\spad{x}} and \\axiom{\\spad{y}}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-312)))) 
(-574 R) 
((|constructor| (NIL "\\axiom{JacobiIdentity} means that \\axiom{[\\spad{x},{}[\\spad{y},{}\\spad{z}]]+[\\spad{y},{}[\\spad{z},{}\\spad{x}]]+[\\spad{z},{}[\\spad{x},{}\\spad{y}]] = 0} holds.")) (/ (($ $ |#1|) "\\axiom{x/r} returns the division of \\axiom{\\spad{x}} by \\axiom{\\spad{r}}.")) (|construct| (($ $ $) "\\axiom{construct(\\spad{x},{}\\spad{y})} returns the Lie bracket of \\axiom{\\spad{x}} and \\axiom{\\spad{y}}."))) 
((|JacobiIdentity| . T) (|NullSquare| . T) (-3989 . T) (-3988 . T)) 
NIL 
(-575 R FE) 
((|constructor| (NIL "PowerSeriesLimitPackage implements limits of expressions in one or more variables as one of the variables approaches a limiting value. Included are two-sided limits,{} left- and right- hand limits,{} and limits at plus or minus infinity.")) (|complexLimit| (((|Union| (|OnePointCompletion| |#2|) "failed") |#2| (|Equation| (|OnePointCompletion| |#2|))) "\\spad{complexLimit(f(x),x = a)} computes the complex limit \\spad{lim(x -> a,f(x))}.")) (|limit| (((|Union| (|OrderedCompletion| |#2|) #1="failed") |#2| (|Equation| |#2|) (|String|)) "\\spad{limit(f(x),x=a,\"left\")} computes the left hand real limit \\spad{lim(x -> a-,f(x))}; \\spad{limit(f(x),x=a,\"right\")} computes the right hand real limit \\spad{lim(x -> a+,f(x))}.") (((|Union| (|OrderedCompletion| |#2|) (|Record| (|:| |leftHandLimit| (|Union| (|OrderedCompletion| |#2|) #1#)) (|:| |rightHandLimit| (|Union| (|OrderedCompletion| |#2|) #1#))) "failed") |#2| (|Equation| (|OrderedCompletion| |#2|))) "\\spad{limit(f(x),x = a)} computes the real limit \\spad{lim(x -> a,f(x))}."))) 
NIL 
NIL 
(-576 R) 
((|constructor| (NIL "Computation of limits for rational functions.")) (|complexLimit| (((|OnePointCompletion| (|Fraction| (|Polynomial| |#1|))) (|Fraction| (|Polynomial| |#1|)) (|Equation| (|Fraction| (|Polynomial| |#1|)))) "\\spad{complexLimit(f(x),x = a)} computes the complex limit of \\spad{f} as its argument \\spad{x} approaches \\spad{a}.") (((|OnePointCompletion| (|Fraction| (|Polynomial| |#1|))) (|Fraction| (|Polynomial| |#1|)) (|Equation| (|OnePointCompletion| (|Polynomial| |#1|)))) "\\spad{complexLimit(f(x),x = a)} computes the complex limit of \\spad{f} as its argument \\spad{x} approaches \\spad{a}.")) (|limit| (((|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) #1="failed") (|Fraction| (|Polynomial| |#1|)) (|Equation| (|Fraction| (|Polynomial| |#1|))) (|String|)) "\\spad{limit(f(x),x,a,\"left\")} computes the real limit of \\spad{f} as its argument \\spad{x} approaches \\spad{a} from the left; limit(\\spad{f}(\\spad{x}),{}\\spad{x},{}a,{}\"right\") computes the corresponding limit as \\spad{x} approaches \\spad{a} from the right.") (((|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) (|Record| (|:| |leftHandLimit| (|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) #1#)) (|:| |rightHandLimit| (|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) #1#))) #2="failed") (|Fraction| (|Polynomial| |#1|)) (|Equation| (|Fraction| (|Polynomial| |#1|)))) "\\spad{limit(f(x),x = a)} computes the real two-sided limit of \\spad{f} as its argument \\spad{x} approaches \\spad{a}.") (((|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) (|Record| (|:| |leftHandLimit| (|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) #1#)) (|:| |rightHandLimit| (|Union| (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|))) #1#))) #2#) (|Fraction| (|Polynomial| |#1|)) (|Equation| (|OrderedCompletion| (|Polynomial| |#1|)))) "\\spad{limit(f(x),x = a)} computes the real two-sided limit of \\spad{f} as its argument \\spad{x} approaches \\spad{a}."))) 
NIL 
NIL 
(-577 |vars|) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: July 2,{} 2010 Date Last Modified: July 2,{} 2010 Descrption: \\indented{2}{Representation of a vector space basis,{} given by symbols.}")) (|dual| (($ (|DualBasis| |#1|)) "\\spad{dual f} constructs the dual vector of a linear form which is part of a basis."))) 
NIL 
NIL 
(-578 S R) 
((|constructor| (NIL "Test for linear dependence.")) (|solveLinear| (((|Union| (|Vector| (|Fraction| |#1|)) "failed") (|Vector| |#2|) |#2|) "\\spad{solveLinear([v1,...,vn], u)} returns \\spad{[c1,...,cn]} such that \\spad{c1*v1 + ... + cn*vn = u},{} \"failed\" if no such \\spad{ci}'s exist in the quotient field of \\spad{S}.") (((|Union| (|Vector| |#1|) "failed") (|Vector| |#2|) |#2|) "\\spad{solveLinear([v1,...,vn], u)} returns \\spad{[c1,...,cn]} such that \\spad{c1*v1 + ... + cn*vn = u},{} \"failed\" if no such \\spad{ci}'s exist in \\spad{S}.")) (|linearDependence| (((|Union| (|Vector| |#1|) "failed") (|Vector| |#2|)) "\\spad{linearDependence([v1,...,vn])} returns \\spad{[c1,...,cn]} if \\spad{c1*v1 + ... + cn*vn = 0} and not all the \\spad{ci}'s are 0,{} \"failed\" if the \\spad{vi}'s are linearly independent over \\spad{S}.")) (|linearlyDependent?| (((|Boolean|) (|Vector| |#2|)) "\\spad{linearlyDependent?([v1,...,vn])} returns \\spad{true} if the \\spad{vi}'s are linearly dependent over \\spad{S},{} \\spad{false} otherwise."))) 
NIL 
((-2560 (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-579 K B) 
((|constructor| (NIL "A simple data structure for elements that form a vector space of finite dimension over a given field,{} with a given symbolic basis.")) (|coordinates| (((|Vector| |#1|) $) "\\spad{coordinates x} returns the coordinates of the linear element with respect to the basis \\spad{B}.")) (|linearElement| (($ (|List| |#1|)) "\\spad{linearElement [x1,..,xn]} returns a linear element \\indented{1}{with coordinates \\spad{[x1,..,xn]} with respect to} the basis elements \\spad{B}."))) 
((-3989 . T) (-3988 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| (-577 |#2|) (QUOTE (-1013))))) 
(-580 R) 
((|constructor| (NIL "An extension of left-module with an explicit linear dependence test.")) (|reducedSystem| (((|Record| (|:| |mat| (|Matrix| |#1|)) (|:| |vec| (|Vector| |#1|))) (|Matrix| $) (|Vector| $)) "\\spad{reducedSystem(A, v)} returns a matrix \\spad{B} and a vector \\spad{w} such that \\spad{A x = v} and \\spad{B x = w} have the same solutions in \\spad{R}.") (((|Matrix| |#1|) (|Matrix| $)) "\\spad{reducedSystem(A)} returns a matrix \\spad{B} such that \\spad{A x = 0} and \\spad{B x = 0} have the same solutions in \\spad{R}.")) (|leftReducedSystem| (((|Record| (|:| |mat| (|Matrix| |#1|)) (|:| |vec| (|Vector| |#1|))) (|Vector| $) $) "\\spad{reducedSystem([v1,...,vn],u)} returns a matrix \\spad{M} with coefficients in \\spad{R} and a vector \\spad{w} such that the system of equations \\spad{c1*v1 + ... + cn*vn = u} has the same solution as \\spad{c * M = w} where \\spad{c} is the row vector \\spad{[c1,...cn]}.") (((|Matrix| |#1|) (|Vector| $)) "\\spad{leftReducedSystem [v1,...,vn]} returns a matrix \\spad{M} with coefficients in \\spad{R} such that the system of equations \\spad{c1*v1 + ... + cn*vn = 0\\$\\%} has the same solution as \\spad{c * M = 0} where \\spad{c} is the row vector \\spad{[c1,...cn]}."))) 
NIL 
NIL 
(-581 K B) 
((|constructor| (NIL "A simple data structure for linear forms on a vector space of finite dimension over a given field,{} with a given symbolic basis.")) (|coordinates| (((|Vector| |#1|) $) "\\spad{coordinates x} returns the coordinates of the linear form with respect to the basis \\spad{DualBasis B}.")) (|linearForm| (($ (|List| |#1|)) "\\spad{linearForm [x1,..,xn]} constructs a linear form with coordinates \\spad{[x1,..,xn]} with respect to the basis elements \\spad{DualBasis B}."))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-582 S) 
((|constructor| (NIL "\\indented{2}{A set is an \\spad{S}-linear set if it is stable by dilation} \\indented{2}{by elements in the semigroup \\spad{S}.} See Also: LeftLinearSet,{} RightLinearSet."))) 
NIL 
NIL 
(-583 S) 
((|constructor| (NIL "\\spadtype{List} implements singly-linked lists that are addressable by indices; the index of the first element is 1. this constructor provides some LISP-like functions such as \\spadfun{null} and \\spadfun{cons}.")) (|setDifference| (($ $ $) "\\spad{setDifference(u1,u2)} returns a list of the elements of \\spad{u1} that are not also in \\spad{u2}. The order of elements in the resulting list is unspecified.")) (|setIntersection| (($ $ $) "\\spad{setIntersection(u1,u2)} returns a list of the elements that lists \\spad{u1} and \\spad{u2} have in common. The order of elements in the resulting list is unspecified.")) (|setUnion| (($ $ $) "\\spad{setUnion(u1,u2)} appends the two lists \\spad{u1} and \\spad{u2},{} then removes all duplicates. The order of elements in the resulting list is unspecified.")) (|append| (($ $ $) "\\spad{append(u1,u2)} appends the elements of list \\spad{u1} onto the front of list \\spad{u2}. This new list and \\spad{u2} will share some structure.")) (|cons| (($ |#1| $) "\\spad{cons(element,u)} appends \\spad{element} onto the front of list \\spad{u} and returns the new list. This new list and the old one will share some structure.")) (|null| (((|Boolean|) $) "\\spad{null(u)} tests if list \\spad{u} is the empty list.")) (|nil| (($) "\\spad{nil} is the empty list."))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-584 A B) 
((|constructor| (NIL "\\spadtype{ListFunctions2} implements utility functions that operate on two kinds of lists,{} each with a possibly different type of element.")) (|map| (((|List| |#2|) (|Mapping| |#2| |#1|) (|List| |#1|)) "\\spad{map(fn,u)} applies \\spad{fn} to each element of list \\spad{u} and returns a new list with the results. For example \\spad{map(square,[1,2,3]) = [1,4,9]}.")) (|reduce| ((|#2| (|Mapping| |#2| |#1| |#2|) (|List| |#1|) |#2|) "\\spad{reduce(fn,u,ident)} successively uses the binary function \\spad{fn} on the elements of list \\spad{u} and the result of previous applications. \\spad{ident} is returned if the \\spad{u} is empty. Note the order of application in the following examples: \\spad{reduce(fn,[1,2,3],0) = fn(3,fn(2,fn(1,0)))} and \\spad{reduce(*,[2,3],1) = 3 * (2 * 1)}.")) (|scan| (((|List| |#2|) (|Mapping| |#2| |#1| |#2|) (|List| |#1|) |#2|) "\\spad{scan(fn,u,ident)} successively uses the binary function \\spad{fn} to reduce more and more of list \\spad{u}. \\spad{ident} is returned if the \\spad{u} is empty. The result is a list of the reductions at each step. See \\spadfun{reduce} for more information. Examples: \\spad{scan(fn,[1,2],0) = [fn(2,fn(1,0)),fn(1,0)]} and \\spad{scan(*,[2,3],1) = [2 * 1, 3 * (2 * 1)]}."))) 
NIL 
NIL 
(-585 A B) 
((|constructor| (NIL "\\spadtype{ListToMap} allows mappings to be described by a pair of lists of equal lengths. The image of an element \\spad{x},{} which appears in position \\spad{n} in the first list,{} is then the \\spad{n}th element of the second list. A default value or default function can be specified to be used when \\spad{x} does not appear in the first list. In the absence of defaults,{} an error will occur in that case.")) (|match| ((|#2| (|List| |#1|) (|List| |#2|) |#1| (|Mapping| |#2| |#1|)) "\\spad{match(la, lb, a, f)} creates a map defined by lists \\spad{la} and \\spad{lb} of equal length. and applies this map to a. The target of a source value \\spad{x} in \\spad{la} is the value \\spad{y} with the same index \\spad{lb}. Argument \\spad{f} is a default function to call if a is not in \\spad{la}. The value returned is then obtained by applying \\spad{f} to argument a.") (((|Mapping| |#2| |#1|) (|List| |#1|) (|List| |#2|) (|Mapping| |#2| |#1|)) "\\spad{match(la, lb, f)} creates a map defined by lists \\spad{la} and \\spad{lb} of equal length. The target of a source value \\spad{x} in \\spad{la} is the value \\spad{y} with the same index \\spad{lb}. Argument \\spad{f} is used as the function to call when the given function argument is not in \\spad{la}. The value returned is \\spad{f} applied to that argument.") ((|#2| (|List| |#1|) (|List| |#2|) |#1| |#2|) "\\spad{match(la, lb, a, b)} creates a map defined by lists \\spad{la} and \\spad{lb} of equal length. and applies this map to a. The target of a source value \\spad{x} in \\spad{la} is the value \\spad{y} with the same index \\spad{lb}. Argument \\spad{b} is the default target value if a is not in \\spad{la}. Error: if \\spad{la} and \\spad{lb} are not of equal length.") (((|Mapping| |#2| |#1|) (|List| |#1|) (|List| |#2|) |#2|) "\\spad{match(la, lb, b)} creates a map defined by lists \\spad{la} and \\spad{lb} of equal length,{} where \\spad{b} is used as the default target value if the given function argument is not in \\spad{la}. The target of a source value \\spad{x} in \\spad{la} is the value \\spad{y} with the same index \\spad{lb}. Error: if \\spad{la} and \\spad{lb} are not of equal length.") ((|#2| (|List| |#1|) (|List| |#2|) |#1|) "\\spad{match(la, lb, a)} creates a map defined by lists \\spad{la} and \\spad{lb} of equal length,{} where \\spad{a} is used as the default source value if the given one is not in \\spad{la}. The target of a source value \\spad{x} in \\spad{la} is the value \\spad{y} with the same index \\spad{lb}. Error: if \\spad{la} and \\spad{lb} are not of equal length.") (((|Mapping| |#2| |#1|) (|List| |#1|) (|List| |#2|)) "\\spad{match(la, lb)} creates a map with no default source or target values defined by lists \\spad{la} and lb of equal length. The target of a source value \\spad{x} in \\spad{la} is the value \\spad{y} with the same index lb. Error: if \\spad{la} and lb are not of equal length. Note: when this map is applied,{} an error occurs when applied to a value missing from \\spad{la}."))) 
NIL 
NIL 
(-586 A B C) 
((|constructor| (NIL "\\spadtype{ListFunctions3} implements utility functions that operate on three kinds of lists,{} each with a possibly different type of element.")) (|map| (((|List| |#3|) (|Mapping| |#3| |#1| |#2|) (|List| |#1|) (|List| |#2|)) "\\spad{map(fn,list1, u2)} applies the binary function \\spad{fn} to corresponding elements of lists \\spad{u1} and \\spad{u2} and returns a list of the results (in the same order). Thus \\spad{map(/,[1,2,3],[4,5,6]) = [1/4,2/4,1/2]}. The computation terminates when the end of either list is reached. That is,{} the length of the result list is equal to the minimum of the lengths of \\spad{u1} and \\spad{u2}."))) 
NIL 
NIL 
(-587 T$) 
((|constructor| (NIL "This domain represents AST for Spad literals."))) 
NIL 
NIL 
(-588 S) 
((|constructor| (NIL "\\indented{2}{A set is an \\spad{S}-left linear set if it is stable by left-dilation} \\indented{2}{by elements in the semigroup \\spad{S}.} See Also: RightLinearSet.")) (* (($ |#1| $) "\\spad{s*x} is the left-dilation of \\spad{x} by \\spad{s}."))) 
NIL 
NIL 
(-589 S) 
((|substitute| (($ |#1| |#1| $) "\\spad{substitute(x,y,d)} replace \\spad{x}'s with \\spad{y}'s in dictionary \\spad{d}.")) (|duplicates?| (((|Boolean|) $) "\\spad{duplicates?(d)} tests if dictionary \\spad{d} has duplicate entries."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-590 R) 
((|constructor| (NIL "The category of left modules over an rng (ring not necessarily with unit). This is an abelian group which supports left multiplation by elements of the rng. \\blankline"))) 
NIL 
NIL 
(-591 S E |un|) 
((|constructor| (NIL "This internal package represents monoid (abelian or not,{} with or without inverses) as lists and provides some common operations to the various flavors of monoids.")) (|mapGen| (($ (|Mapping| |#1| |#1|) $) "\\spad{mapGen(f, a1\\^e1 ... an\\^en)} returns \\spad{f(a1)\\^e1 ... f(an)\\^en}.")) (|mapExpon| (($ (|Mapping| |#2| |#2|) $) "\\spad{mapExpon(f, a1\\^e1 ... an\\^en)} returns \\spad{a1\\^f(e1) ... an\\^f(en)}.")) (|commutativeEquality| (((|Boolean|) $ $) "\\spad{commutativeEquality(x,y)} returns \\spad{true} if \\spad{x} and \\spad{y} are equal assuming commutativity")) (|plus| (($ $ $) "\\spad{plus(x, y)} returns \\spad{x + y} where \\spad{+} is the monoid operation,{} which is assumed commutative.") (($ |#1| |#2| $) "\\spad{plus(s, e, x)} returns \\spad{e * s + x} where \\spad{+} is the monoid operation,{} which is assumed commutative.")) (|leftMult| (($ |#1| $) "\\spad{leftMult(s, a)} returns \\spad{s * a} where \\spad{*} is the monoid operation,{} which is assumed non-commutative.")) (|rightMult| (($ $ |#1|) "\\spad{rightMult(a, s)} returns \\spad{a * s} where \\spad{*} is the monoid operation,{} which is assumed non-commutative.")) (|makeUnit| (($) "\\spad{makeUnit()} returns the unit element of the monomial.")) (|size| (((|NonNegativeInteger|) $) "\\spad{size(l)} returns the number of monomials forming \\spad{l}.")) (|reverse!| (($ $) "\\spad{reverse!(l)} reverses the list of monomials forming \\spad{l},{} destroying the element \\spad{l}.")) (|reverse| (($ $) "\\spad{reverse(l)} reverses the list of monomials forming \\spad{l}. This has some effect if the monoid is non-abelian,{} \\spadignore{i.e.} \\spad{reverse(a1\\^e1 ... an\\^en) = an\\^en ... a1\\^e1} which is different.")) (|nthFactor| ((|#1| $ (|Integer|)) "\\spad{nthFactor(l, n)} returns the factor of the n^th monomial of \\spad{l}.")) (|nthExpon| ((|#2| $ (|Integer|)) "\\spad{nthExpon(l, n)} returns the exponent of the n^th monomial of \\spad{l}.")) (|makeMulti| (($ (|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|)))) "\\spad{makeMulti(l)} returns the element whose list of monomials is \\spad{l}.")) (|makeTerm| (($ |#1| |#2|) "\\spad{makeTerm(s, e)} returns the monomial \\spad{s} exponentiated by \\spad{e} (\\spadignore{e.g.} s^e or \\spad{e} * \\spad{s}).")) (|listOfMonoms| (((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))) $) "\\spad{listOfMonoms(l)} returns the list of the monomials forming \\spad{l}.")) (|outputForm| (((|OutputForm|) $ (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|)) (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|)) (|Integer|)) "\\spad{outputForm(l, fop, fexp, unit)} converts the monoid element represented by \\spad{l} to an \\spadtype{OutputForm}. Argument unit is the output form for the \\spadignore{unit} of the monoid (\\spadignore{e.g.} 0 or 1),{} \\spad{fop(a, b)} is the output form for the monoid operation applied to \\spad{a} and \\spad{b} (\\spadignore{e.g.} \\spad{a + b},{} \\spad{a * b},{} \\spad{ab}),{} and \\spad{fexp(a, n)} is the output form for the exponentiation operation applied to \\spad{a} and \\spad{n} (\\spadignore{e.g.} \\spad{n a},{} \\spad{n * a},{} \\spad{a ** n},{} \\spad{a\\^n})."))) 
NIL 
NIL 
(-592 A S) 
((|constructor| (NIL "A linear aggregate is an aggregate whose elements are indexed by integers. Examples of linear aggregates are strings,{} lists,{} and arrays. Most of the exported operations for linear aggregates are non-destructive but are not always efficient for a particular aggregate. For example,{} \\spadfun{concat} of two lists needs only to copy its first argument,{} whereas \\spadfun{concat} of two arrays needs to copy both arguments. Most of the operations exported here apply to infinite objects (\\spadignore{e.g.} streams) as well to finite ones. For finite linear aggregates,{} see \\spadtype{FiniteLinearAggregate}.")) (|setelt| ((|#2| $ (|UniversalSegment| (|Integer|)) |#2|) "\\spad{setelt(u,i..j,x)} (also written: \\axiom{\\spad{u}(\\spad{i}..\\spad{j}) := \\spad{x}}) destructively replaces each element in the segment \\axiom{\\spad{u}(\\spad{i}..\\spad{j})} by \\spad{x}. The value \\spad{x} is returned. Note: \\spad{u} is destructively change so that \\axiom{\\spad{u}.\\spad{k} := \\spad{x} for \\spad{k} in \\spad{i}..\\spad{j}}; its length remains unchanged.")) (|insert| (($ $ $ (|Integer|)) "\\spad{insert(v,u,k)} returns a copy of \\spad{u} having \\spad{v} inserted beginning at the \\axiom{\\spad{i}}th element. Note: \\axiom{insert(\\spad{v},{}\\spad{u},{}\\spad{k}) = concat( \\spad{u}(0..\\spad{k}-1),{} \\spad{v},{} \\spad{u}(\\spad{k}..) )}.") (($ |#2| $ (|Integer|)) "\\spad{insert(x,u,i)} returns a copy of \\spad{u} having \\spad{x} as its \\axiom{\\spad{i}}th element. Note: \\axiom{insert(\\spad{x},{}a,{}\\spad{k}) = concat(concat(a(0..\\spad{k}-1),{}\\spad{x}),{}a(\\spad{k}..))}.")) (|delete| (($ $ (|UniversalSegment| (|Integer|))) "\\spad{delete(u,i..j)} returns a copy of \\spad{u} with the \\axiom{\\spad{i}}th through \\axiom{\\spad{j}}th element deleted. Note: \\axiom{delete(a,{}\\spad{i}..\\spad{j}) = concat(a(0..\\spad{i}-1),{}a(\\spad{j+1}..))}.") (($ $ (|Integer|)) "\\spad{delete(u,i)} returns a copy of \\spad{u} with the \\axiom{\\spad{i}}th element deleted. Note: for lists,{} \\axiom{delete(a,{}\\spad{i}) == concat(a(0..\\spad{i} - 1),{}a(\\spad{i} + 1,{}..))}.")) (|map| (($ (|Mapping| |#2| |#2| |#2|) $ $) "\\spad{map(f,u,v)} returns a new collection \\spad{w} with elements \\axiom{\\spad{z} = \\spad{f}(\\spad{x},{}\\spad{y})} for corresponding elements \\spad{x} and \\spad{y} from \\spad{u} and \\spad{v}. Note: for linear aggregates,{} \\axiom{\\spad{w}.\\spad{i} = \\spad{f}(\\spad{u}.\\spad{i},{}\\spad{v}.\\spad{i})}.")) (|concat| (($ (|List| $)) "\\spad{concat(u)},{} where \\spad{u} is a lists of aggregates \\axiom{[a,{}\\spad{b},{}...,{}\\spad{c}]},{} returns a single aggregate consisting of the elements of \\axiom{a} followed by those of \\spad{b} followed ... by the elements of \\spad{c}. Note: \\axiom{concat(a,{}\\spad{b},{}...,{}\\spad{c}) = concat(a,{}concat(\\spad{b},{}...,{}\\spad{c}))}.") (($ $ $) "\\spad{concat(u,v)} returns an aggregate consisting of the elements of \\spad{u} followed by the elements of \\spad{v}. Note: if \\axiom{\\spad{w} = concat(\\spad{u},{}\\spad{v})} then \\axiom{\\spad{w}.\\spad{i} = \\spad{u}.\\spad{i} for \\spad{i} in indices \\spad{u}} and \\axiom{\\spad{w}.(\\spad{j} + maxIndex \\spad{u}) = \\spad{v}.\\spad{j} for \\spad{j} in indices \\spad{v}}.") (($ |#2| $) "\\spad{concat(x,u)} returns aggregate \\spad{u} with additional element at the front. Note: for lists: \\axiom{concat(\\spad{x},{}\\spad{u}) == concat([\\spad{x}],{}\\spad{u})}.") (($ $ |#2|) "\\spad{concat(u,x)} returns aggregate \\spad{u} with additional element \\spad{x} at the end. Note: for lists,{} \\axiom{concat(\\spad{u},{}\\spad{x}) == concat(\\spad{u},{}[\\spad{x}])}")) (|new| (($ (|NonNegativeInteger|) |#2|) "\\spad{new(n,x)} returns \\axiom{fill!(new \\spad{n},{}\\spad{x})}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995))) 
(-593 S) 
((|constructor| (NIL "A linear aggregate is an aggregate whose elements are indexed by integers. Examples of linear aggregates are strings,{} lists,{} and arrays. Most of the exported operations for linear aggregates are non-destructive but are not always efficient for a particular aggregate. For example,{} \\spadfun{concat} of two lists needs only to copy its first argument,{} whereas \\spadfun{concat} of two arrays needs to copy both arguments. Most of the operations exported here apply to infinite objects (\\spadignore{e.g.} streams) as well to finite ones. For finite linear aggregates,{} see \\spadtype{FiniteLinearAggregate}.")) (|setelt| ((|#1| $ (|UniversalSegment| (|Integer|)) |#1|) "\\spad{setelt(u,i..j,x)} (also written: \\axiom{\\spad{u}(\\spad{i}..\\spad{j}) := \\spad{x}}) destructively replaces each element in the segment \\axiom{\\spad{u}(\\spad{i}..\\spad{j})} by \\spad{x}. The value \\spad{x} is returned. Note: \\spad{u} is destructively change so that \\axiom{\\spad{u}.\\spad{k} := \\spad{x} for \\spad{k} in \\spad{i}..\\spad{j}}; its length remains unchanged.")) (|insert| (($ $ $ (|Integer|)) "\\spad{insert(v,u,k)} returns a copy of \\spad{u} having \\spad{v} inserted beginning at the \\axiom{\\spad{i}}th element. Note: \\axiom{insert(\\spad{v},{}\\spad{u},{}\\spad{k}) = concat( \\spad{u}(0..\\spad{k}-1),{} \\spad{v},{} \\spad{u}(\\spad{k}..) )}.") (($ |#1| $ (|Integer|)) "\\spad{insert(x,u,i)} returns a copy of \\spad{u} having \\spad{x} as its \\axiom{\\spad{i}}th element. Note: \\axiom{insert(\\spad{x},{}a,{}\\spad{k}) = concat(concat(a(0..\\spad{k}-1),{}\\spad{x}),{}a(\\spad{k}..))}.")) (|delete| (($ $ (|UniversalSegment| (|Integer|))) "\\spad{delete(u,i..j)} returns a copy of \\spad{u} with the \\axiom{\\spad{i}}th through \\axiom{\\spad{j}}th element deleted. Note: \\axiom{delete(a,{}\\spad{i}..\\spad{j}) = concat(a(0..\\spad{i}-1),{}a(\\spad{j+1}..))}.") (($ $ (|Integer|)) "\\spad{delete(u,i)} returns a copy of \\spad{u} with the \\axiom{\\spad{i}}th element deleted. Note: for lists,{} \\axiom{delete(a,{}\\spad{i}) == concat(a(0..\\spad{i} - 1),{}a(\\spad{i} + 1,{}..))}.")) (|map| (($ (|Mapping| |#1| |#1| |#1|) $ $) "\\spad{map(f,u,v)} returns a new collection \\spad{w} with elements \\axiom{\\spad{z} = \\spad{f}(\\spad{x},{}\\spad{y})} for corresponding elements \\spad{x} and \\spad{y} from \\spad{u} and \\spad{v}. Note: for linear aggregates,{} \\axiom{\\spad{w}.\\spad{i} = \\spad{f}(\\spad{u}.\\spad{i},{}\\spad{v}.\\spad{i})}.")) (|concat| (($ (|List| $)) "\\spad{concat(u)},{} where \\spad{u} is a lists of aggregates \\axiom{[a,{}\\spad{b},{}...,{}\\spad{c}]},{} returns a single aggregate consisting of the elements of \\axiom{a} followed by those of \\spad{b} followed ... by the elements of \\spad{c}. Note: \\axiom{concat(a,{}\\spad{b},{}...,{}\\spad{c}) = concat(a,{}concat(\\spad{b},{}...,{}\\spad{c}))}.") (($ $ $) "\\spad{concat(u,v)} returns an aggregate consisting of the elements of \\spad{u} followed by the elements of \\spad{v}. Note: if \\axiom{\\spad{w} = concat(\\spad{u},{}\\spad{v})} then \\axiom{\\spad{w}.\\spad{i} = \\spad{u}.\\spad{i} for \\spad{i} in indices \\spad{u}} and \\axiom{\\spad{w}.(\\spad{j} + maxIndex \\spad{u}) = \\spad{v}.\\spad{j} for \\spad{j} in indices \\spad{v}}.") (($ |#1| $) "\\spad{concat(x,u)} returns aggregate \\spad{u} with additional element at the front. Note: for lists: \\axiom{concat(\\spad{x},{}\\spad{u}) == concat([\\spad{x}],{}\\spad{u})}.") (($ $ |#1|) "\\spad{concat(u,x)} returns aggregate \\spad{u} with additional element \\spad{x} at the end. Note: for lists,{} \\axiom{concat(\\spad{u},{}\\spad{x}) == concat(\\spad{u},{}[\\spad{x}])}")) (|new| (($ (|NonNegativeInteger|) |#1|) "\\spad{new(n,x)} returns \\axiom{fill!(new \\spad{n},{}\\spad{x})}."))) 
NIL 
NIL 
(-594 M R S) 
((|constructor| (NIL "Localize(\\spad{M},{}\\spad{R},{}\\spad{S}) produces fractions with numerators from an \\spad{R} module \\spad{M} and denominators from some multiplicative subset \\spad{D} of \\spad{R}.")) (|denom| ((|#3| $) "\\spad{denom x} returns the denominator of \\spad{x}.")) (|numer| ((|#1| $) "\\spad{numer x} returns the numerator of \\spad{x}.")) (/ (($ |#1| |#3|) "\\spad{m / d} divides the element \\spad{m} by \\spad{d}.") (($ $ |#3|) "\\spad{x / d} divides the element \\spad{x} by \\spad{d}."))) 
((-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-714)))) 
(-595 R -3092 L) 
((|constructor| (NIL "\\spad{ElementaryFunctionLODESolver} provides the top-level functions for finding closed form solutions of linear ordinary differential equations and initial value problems.")) (|solve| (((|Union| |#2| "failed") |#3| |#2| (|Symbol|) |#2| (|List| |#2|)) "\\spad{solve(op, g, x, a, [y0,...,ym])} returns either the solution of the initial value problem \\spad{op y = g, y(a) = y0, y'(a) = y1,...} or \"failed\" if the solution cannot be found; \\spad{x} is the dependent variable.") (((|Union| (|Record| (|:| |particular| |#2|) (|:| |basis| (|List| |#2|))) "failed") |#3| |#2| (|Symbol|)) "\\spad{solve(op, g, x)} returns either a solution of the ordinary differential equation \\spad{op y = g} or \"failed\" if no non-trivial solution can be found; When found,{} the solution is returned in the form \\spad{[h, [b1,...,bm]]} where \\spad{h} is a particular solution and and \\spad{[b1,...bm]} are linearly independent solutions of the associated homogenuous equation \\spad{op y = 0}. A full basis for the solutions of the homogenuous equation is not always returned,{} only the solutions which were found; \\spad{x} is the dependent variable."))) 
NIL 
NIL 
(-596 A -2492) 
((|constructor| (NIL "\\spad{LinearOrdinaryDifferentialOperator} defines a ring of differential operators with coefficients in a ring A with a given derivation. Multiplication of operators corresponds to functional composition: \\indented{4}{\\spad{(L1 * L2).(f) = L1 L2 f}}"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-597 A) 
((|constructor| (NIL "\\spad{LinearOrdinaryDifferentialOperator1} defines a ring of differential operators with coefficients in a differential ring A. Multiplication of operators corresponds to functional composition: \\indented{4}{\\spad{(L1 * L2).(f) = L1 L2 f}}"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-598 A M) 
((|constructor| (NIL "\\spad{LinearOrdinaryDifferentialOperator2} defines a ring of differential operators with coefficients in a differential ring A and acting on an A-module \\spad{M}. Multiplication of operators corresponds to functional composition: \\indented{4}{\\spad{(L1 * L2).(f) = L1 L2 f}}")) (|differentiate| (($ $) "\\spad{differentiate(x)} returns the derivative of \\spad{x}"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-599 S A) 
((|constructor| (NIL "\\spad{LinearOrdinaryDifferentialOperatorCategory} is the category of differential operators with coefficients in a ring A with a given derivation. Multiplication of operators corresponds to functional composition: \\indented{4}{\\spad{(L1 * L2).(f) = L1 L2 f}}")) (|directSum| (($ $ $) "\\spad{directSum(a,b)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the sums of a solution of \\spad{a} by a solution of \\spad{b}.")) (|symmetricSquare| (($ $) "\\spad{symmetricSquare(a)} computes \\spad{symmetricProduct(a,a)} using a more efficient method.")) (|symmetricPower| (($ $ (|NonNegativeInteger|)) "\\spad{symmetricPower(a,n)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of \\spad{n} solutions of \\spad{a}.")) (|symmetricProduct| (($ $ $) "\\spad{symmetricProduct(a,b)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of a solution of \\spad{a} by a solution of \\spad{b}.")) (|adjoint| (($ $) "\\spad{adjoint(a)} returns the adjoint operator of a.")) (D (($) "\\spad{D()} provides the operator corresponding to a derivation in the ring \\spad{A}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-312)))) 
(-600 A) 
((|constructor| (NIL "\\spad{LinearOrdinaryDifferentialOperatorCategory} is the category of differential operators with coefficients in a ring A with a given derivation. Multiplication of operators corresponds to functional composition: \\indented{4}{\\spad{(L1 * L2).(f) = L1 L2 f}}")) (|directSum| (($ $ $) "\\spad{directSum(a,b)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the sums of a solution of \\spad{a} by a solution of \\spad{b}.")) (|symmetricSquare| (($ $) "\\spad{symmetricSquare(a)} computes \\spad{symmetricProduct(a,a)} using a more efficient method.")) (|symmetricPower| (($ $ (|NonNegativeInteger|)) "\\spad{symmetricPower(a,n)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of \\spad{n} solutions of \\spad{a}.")) (|symmetricProduct| (($ $ $) "\\spad{symmetricProduct(a,b)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of a solution of \\spad{a} by a solution of \\spad{b}.")) (|adjoint| (($ $) "\\spad{adjoint(a)} returns the adjoint operator of a.")) (D (($) "\\spad{D()} provides the operator corresponding to a derivation in the ring \\spad{A}."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-601 -3092 UP) 
((|constructor| (NIL "\\spadtype{LinearOrdinaryDifferentialOperatorFactorizer} provides a factorizer for linear ordinary differential operators whose coefficients are rational functions.")) (|factor1| (((|List| (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) "\\spad{factor1(a)} returns the factorisation of a,{} assuming that a has no first-order right factor.")) (|factor| (((|List| (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) "\\spad{factor(a)} returns the factorisation of a.") (((|List| (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|)) (|Mapping| (|List| |#1|) |#2|)) "\\spad{factor(a, zeros)} returns the factorisation of a. \\spad{zeros} is a zero finder in \\spad{UP}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-27)))) 
(-602 A L) 
((|constructor| (NIL "\\spad{LinearOrdinaryDifferentialOperatorsOps} provides symmetric products and sums for linear ordinary differential operators.")) (|directSum| ((|#2| |#2| |#2| (|Mapping| |#1| |#1|)) "\\spad{directSum(a,b,D)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the sums of a solution of \\spad{a} by a solution of \\spad{b}. \\spad{D} is the derivation to use.")) (|symmetricPower| ((|#2| |#2| (|NonNegativeInteger|) (|Mapping| |#1| |#1|)) "\\spad{symmetricPower(a,n,D)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of \\spad{n} solutions of \\spad{a}. \\spad{D} is the derivation to use.")) (|symmetricProduct| ((|#2| |#2| |#2| (|Mapping| |#1| |#1|)) "\\spad{symmetricProduct(a,b,D)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of a solution of \\spad{a} by a solution of \\spad{b}. \\spad{D} is the derivation to use."))) 
NIL 
NIL 
(-603 S) 
((|constructor| (NIL "`Logic' provides the basic operations for lattices,{} \\spadignore{e.g.} boolean algebra.")) (|\\/| (($ $ $) "\\spadignore{ \\/ } returns the logical `join',{} \\spadignore{e.g.} `or'.")) (|/\\| (($ $ $) "\\spadignore { /\\ }returns the logical `meet',{} \\spadignore{e.g.} `and'.")) (~ (($ $) "\\spad{~(x)} returns the logical complement of \\spad{x}."))) 
NIL 
NIL 
(-604) 
((|constructor| (NIL "`Logic' provides the basic operations for lattices,{} \\spadignore{e.g.} boolean algebra.")) (|\\/| (($ $ $) "\\spadignore{ \\/ } returns the logical `join',{} \\spadignore{e.g.} `or'.")) (|/\\| (($ $ $) "\\spadignore { /\\ }returns the logical `meet',{} \\spadignore{e.g.} `and'.")) (~ (($ $) "\\spad{~(x)} returns the logical complement of \\spad{x}."))) 
NIL 
NIL 
(-605 R) 
((|constructor| (NIL "Given a PolynomialFactorizationExplicit ring,{} this package provides a defaulting rule for the \\spad{solveLinearPolynomialEquation} operation,{} by moving into the field of fractions,{} and solving it there via the \\spad{multiEuclidean} operation.")) (|solveLinearPolynomialEquationByFractions| (((|Union| (|List| (|SparseUnivariatePolynomial| |#1|)) "failed") (|List| (|SparseUnivariatePolynomial| |#1|)) (|SparseUnivariatePolynomial| |#1|)) "\\spad{solveLinearPolynomialEquationByFractions([f1, ..., fn], g)} (where the \\spad{fi} are relatively prime to each other) returns a list of \\spad{ai} such that \\spad{g/prod fi = sum ai/fi} or returns \"failed\" if no such exists."))) 
NIL 
NIL 
(-606 |VarSet| R) 
((|constructor| (NIL "This type supports Lie polynomials in Lyndon basis see Free Lie Algebras by \\spad{C}. Reutenauer (Oxford science publications). \\newline Author: Michel Petitot (petitot@lifl.fr).")) (|construct| (($ $ (|LyndonWord| |#1|)) "\\axiom{construct(\\spad{x},{}\\spad{y})} returns the Lie bracket \\axiom{[\\spad{x},{}\\spad{y}]}.") (($ (|LyndonWord| |#1|) $) "\\axiom{construct(\\spad{x},{}\\spad{y})} returns the Lie bracket \\axiom{[\\spad{x},{}\\spad{y}]}.") (($ (|LyndonWord| |#1|) (|LyndonWord| |#1|)) "\\axiom{construct(\\spad{x},{}\\spad{y})} returns the Lie bracket \\axiom{[\\spad{x},{}\\spad{y}]}.")) (|LiePolyIfCan| (((|Union| $ "failed") (|XDistributedPolynomial| |#1| |#2|)) "\\axiom{LiePolyIfCan(\\spad{p})} returns \\axiom{\\spad{p}} in Lyndon basis if \\axiom{\\spad{p}} is a Lie polynomial,{} otherwise \\axiom{\"failed\"} is returned."))) 
((|JacobiIdentity| . T) (|NullSquare| . T) (-3989 . T) (-3988 . T)) 
((|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-146)))) 
(-607 A S) 
((|constructor| (NIL "A list aggregate is a model for a linked list data structure. A linked list is a versatile data structure. Insertion and deletion are efficient and searching is a linear operation.")) (|list| (($ |#2|) "\\spad{list(x)} returns the list of one element \\spad{x}."))) 
NIL 
NIL 
(-608 S) 
((|constructor| (NIL "A list aggregate is a model for a linked list data structure. A linked list is a versatile data structure. Insertion and deletion are efficient and searching is a linear operation.")) (|list| (($ |#1|) "\\spad{list(x)} returns the list of one element \\spad{x}."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-609 -3092 |Row| |Col| M) 
((|constructor| (NIL "This package solves linear system in the matrix form \\spad{AX = B}.")) (|rank| (((|NonNegativeInteger|) |#4| |#3|) "\\spad{rank(A,B)} computes the rank of the complete matrix \\spad{(A|B)} of the linear system \\spad{AX = B}.")) (|hasSolution?| (((|Boolean|) |#4| |#3|) "\\spad{hasSolution?(A,B)} tests if the linear system \\spad{AX = B} has a solution.")) (|particularSolution| (((|Union| |#3| #1="failed") |#4| |#3|) "\\spad{particularSolution(A,B)} finds a particular solution of the linear system \\spad{AX = B}.")) (|solve| (((|List| (|Record| (|:| |particular| (|Union| |#3| #1#)) (|:| |basis| (|List| |#3|)))) |#4| (|List| |#3|)) "\\spad{solve(A,LB)} finds a particular soln of the systems \\spad{AX = B} and a basis of the associated homogeneous systems \\spad{AX = 0} where \\spad{B} varies in the list of column vectors \\spad{LB}.") (((|Record| (|:| |particular| (|Union| |#3| #1#)) (|:| |basis| (|List| |#3|))) |#4| |#3|) "\\spad{solve(A,B)} finds a particular solution of the system \\spad{AX = B} and a basis of the associated homogeneous system \\spad{AX = 0}."))) 
NIL 
NIL 
(-610 -3092) 
((|constructor| (NIL "This package solves linear system in the matrix form \\spad{AX = B}. It is essentially a particular instantiation of the package \\spadtype{LinearSystemMatrixPackage} for Matrix and Vector. This package's existence makes it easier to use \\spadfun{solve} in the AXIOM interpreter.")) (|rank| (((|NonNegativeInteger|) (|Matrix| |#1|) (|Vector| |#1|)) "\\spad{rank(A,B)} computes the rank of the complete matrix \\spad{(A|B)} of the linear system \\spad{AX = B}.")) (|hasSolution?| (((|Boolean|) (|Matrix| |#1|) (|Vector| |#1|)) "\\spad{hasSolution?(A,B)} tests if the linear system \\spad{AX = B} has a solution.")) (|particularSolution| (((|Union| (|Vector| |#1|) #1="failed") (|Matrix| |#1|) (|Vector| |#1|)) "\\spad{particularSolution(A,B)} finds a particular solution of the linear system \\spad{AX = B}.")) (|solve| (((|List| (|Record| (|:| |particular| (|Union| (|Vector| |#1|) #1#)) (|:| |basis| (|List| (|Vector| |#1|))))) (|List| (|List| |#1|)) (|List| (|Vector| |#1|))) "\\spad{solve(A,LB)} finds a particular soln of the systems \\spad{AX = B} and a basis of the associated homogeneous systems \\spad{AX = 0} where \\spad{B} varies in the list of column vectors \\spad{LB}.") (((|List| (|Record| (|:| |particular| (|Union| (|Vector| |#1|) #1#)) (|:| |basis| (|List| (|Vector| |#1|))))) (|Matrix| |#1|) (|List| (|Vector| |#1|))) "\\spad{solve(A,LB)} finds a particular soln of the systems \\spad{AX = B} and a basis of the associated homogeneous systems \\spad{AX = 0} where \\spad{B} varies in the list of column vectors \\spad{LB}.") (((|Record| (|:| |particular| (|Union| (|Vector| |#1|) #1#)) (|:| |basis| (|List| (|Vector| |#1|)))) (|List| (|List| |#1|)) (|Vector| |#1|)) "\\spad{solve(A,B)} finds a particular solution of the system \\spad{AX = B} and a basis of the associated homogeneous system \\spad{AX = 0}.") (((|Record| (|:| |particular| (|Union| (|Vector| |#1|) #1#)) (|:| |basis| (|List| (|Vector| |#1|)))) (|Matrix| |#1|) (|Vector| |#1|)) "\\spad{solve(A,B)} finds a particular solution of the system \\spad{AX = B} and a basis of the associated homogeneous system \\spad{AX = 0}."))) 
NIL 
NIL 
(-611 R E OV P) 
((|constructor| (NIL "this package finds the solutions of linear systems presented as a list of polynomials.")) (|linSolve| (((|Record| (|:| |particular| (|Union| (|Vector| (|Fraction| |#4|)) "failed")) (|:| |basis| (|List| (|Vector| (|Fraction| |#4|))))) (|List| |#4|) (|List| |#3|)) "\\spad{linSolve(lp,lvar)} finds the solutions of the linear system of polynomials \\spad{lp} = 0 with respect to the list of symbols \\spad{lvar}."))) 
NIL 
NIL 
(-612 |n| R) 
((|constructor| (NIL "LieSquareMatrix(\\spad{n},{}\\spad{R}) implements the Lie algebra of the \\spad{n} by \\spad{n} matrices over the commutative ring \\spad{R}. The Lie bracket (commutator) of the algebra is given by \\spad{a*b := (a *\\$SQMATRIX(n,R) b - b *\\$SQMATRIX(n,R) a)},{} where \\spadfun{*\\$SQMATRIX(\\spad{n},{}\\spad{R})} is the usual matrix multiplication."))) 
((-3991 . T) (-3994 . T) (-3988 . T) (-3989 . T)) 
((|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-189))) (|HasAttribute| |#2| (QUOTE (-3996 #1="*"))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) (|HasCategory| |#2| (QUOTE (-258))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-495))) (OR (|HasAttribute| |#2| (QUOTE (-3996 #1#))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-72))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| |#2| (QUOTE (-146)))) 
(-613) 
((|constructor| (NIL "This domain represents `literal sequence' syntax.")) (|elements| (((|List| (|SpadAst|)) $) "\\spad{elements(e)} returns the list of expressions in the `literal' list `e'."))) 
NIL 
NIL 
(-614 |VarSet|) 
((|constructor| (NIL "Lyndon words over arbitrary (ordered) symbols: see Free Lie Algebras by \\spad{C}. Reutenauer (Oxford science publications). A Lyndon word is a word which is smaller than any of its right factors \\spad{w}.\\spad{r}.\\spad{t}. the pure lexicographical ordering. If \\axiom{a} and \\axiom{\\spad{b}} are two Lyndon words such that \\axiom{a < \\spad{b}} holds \\spad{w}.\\spad{r}.\\spad{t} lexicographical ordering then \\axiom{a*b} is a Lyndon word. Parenthesized Lyndon words can be generated from symbols by using the following rule: \\axiom{[[a,{}\\spad{b}],{}\\spad{c}]} is a Lyndon word iff \\axiom{a*b < \\spad{c} <= \\spad{b}} holds. Lyndon words are internally represented by binary trees using the \\spadtype{Magma} domain constructor. Two ordering are provided: lexicographic and length-lexicographic. \\newline Author : Michel Petitot (petitot@lifl.fr).")) (|LyndonWordsList| (((|List| $) (|List| |#1|) (|PositiveInteger|)) "\\axiom{LyndonWordsList(vl,{} \\spad{n})} returns the list of Lyndon words over the alphabet \\axiom{vl},{} up to order \\axiom{\\spad{n}}.")) (|LyndonWordsList1| (((|OneDimensionalArray| (|List| $)) (|List| |#1|) (|PositiveInteger|)) "\\axiom{\\spad{LyndonWordsList1}(vl,{} \\spad{n})} returns an array of lists of Lyndon words over the alphabet \\axiom{vl},{} up to order \\axiom{\\spad{n}}.")) (|varList| (((|List| |#1|) $) "\\axiom{varList(\\spad{x})} returns the list of distinct entries of \\axiom{\\spad{x}}.")) (|lyndonIfCan| (((|Union| $ "failed") (|OrderedFreeMonoid| |#1|)) "\\axiom{lyndonIfCan(\\spad{w})} convert \\axiom{\\spad{w}} into a Lyndon word.")) (|lyndon| (($ (|OrderedFreeMonoid| |#1|)) "\\axiom{lyndon(\\spad{w})} convert \\axiom{\\spad{w}} into a Lyndon word,{} error if \\axiom{\\spad{w}} is not a Lyndon word.")) (|lyndon?| (((|Boolean|) (|OrderedFreeMonoid| |#1|)) "\\axiom{lyndon?(\\spad{w})} test if \\axiom{\\spad{w}} is a Lyndon word.")) (|factor| (((|List| $) (|OrderedFreeMonoid| |#1|)) "\\axiom{factor(\\spad{x})} returns the decreasing factorization into Lyndon words.")) (|coerce| (((|Magma| |#1|) $) "\\axiom{coerce(\\spad{x})} returns the element of \\axiomType{Magma}(VarSet) corresponding to \\axiom{\\spad{x}}.") (((|OrderedFreeMonoid| |#1|) $) "\\axiom{coerce(\\spad{x})} returns the element of \\axiomType{OrderedFreeMonoid}(VarSet) corresponding to \\axiom{\\spad{x}}.")) (|lexico| (((|Boolean|) $ $) "\\axiom{lexico(\\spad{x},{}\\spad{y})} returns \\axiom{\\spad{true}} iff \\axiom{\\spad{x}} is smaller than \\axiom{\\spad{y}} \\spad{w}.\\spad{r}.\\spad{t}. the lexicographical ordering induced by \\axiom{VarSet}.")) (|length| (((|PositiveInteger|) $) "\\axiom{length(\\spad{x})} returns the number of entries in \\axiom{\\spad{x}}.")) (|right| (($ $) "\\axiom{right(\\spad{x})} returns right subtree of \\axiom{\\spad{x}} or error if \\axiomOpFrom{retractable?}{LyndonWord}(\\axiom{\\spad{x}}) is \\spad{true}.")) (|left| (($ $) "\\axiom{left(\\spad{x})} returns left subtree of \\axiom{\\spad{x}} or error if \\axiomOpFrom{retractable?}{LyndonWord}(\\axiom{\\spad{x}}) is \\spad{true}.")) (|retractable?| (((|Boolean|) $) "\\axiom{retractable?(\\spad{x})} tests if \\axiom{\\spad{x}} is a tree with only one entry."))) 
NIL 
NIL 
(-615 A S) 
((|constructor| (NIL "LazyStreamAggregate is the category of streams with lazy evaluation. It is understood that the function 'empty?' will cause lazy evaluation if necessary to determine if there are entries. Functions which call 'empty?',{} \\spadignore{e.g.} 'first' and 'rest',{} will also cause lazy evaluation if necessary.")) (|complete| (($ $) "\\spad{complete(st)} causes all entries of 'st' to be computed. this function should only be called on streams which are known to be finite.")) (|extend| (($ $ (|Integer|)) "\\spad{extend(st,n)} causes entries to be computed,{} if necessary,{} so that 'st' will have at least 'n' explicit entries or so that all entries of 'st' will be computed if 'st' is finite with length <= \\spad{n}.")) (|numberOfComputedEntries| (((|NonNegativeInteger|) $) "\\spad{numberOfComputedEntries(st)} returns the number of explicitly computed entries of stream \\spad{st} which exist immediately prior to the time this function is called.")) (|rst| (($ $) "\\spad{rst(s)} returns a pointer to the next node of stream \\spad{s}. Caution: this function should only be called after a \\spad{empty?} test has been made since there no error check.")) (|frst| ((|#2| $) "\\spad{frst(s)} returns the first element of stream \\spad{s}. Caution: this function should only be called after a \\spad{empty?} test has been made since there no error check.")) (|lazyEvaluate| (($ $) "\\spad{lazyEvaluate(s)} causes one lazy evaluation of stream \\spad{s}. Caution: the first node must be a lazy evaluation mechanism (satisfies \\spad{lazy?(s) = true}) as there is no error check. Note: a call to this function may or may not produce an explicit first entry")) (|lazy?| (((|Boolean|) $) "\\spad{lazy?(s)} returns \\spad{true} if the first node of the stream \\spad{s} is a lazy evaluation mechanism which could produce an additional entry to \\spad{s}.")) (|explicitlyEmpty?| (((|Boolean|) $) "\\spad{explicitlyEmpty?(s)} returns \\spad{true} if the stream is an (explicitly) empty stream. Note: this is a null test which will not cause lazy evaluation.")) (|explicitEntries?| (((|Boolean|) $) "\\spad{explicitEntries?(s)} returns \\spad{true} if the stream \\spad{s} has explicitly computed entries,{} and \\spad{false} otherwise.")) (|select| (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{select(f,st)} returns a stream consisting of those elements of stream \\spad{st} satisfying the predicate \\spad{f}. Note: \\spad{select(f,st) = [x for x in st | f(x)]}.")) (|remove| (($ (|Mapping| (|Boolean|) |#2|) $) "\\spad{remove(f,st)} returns a stream consisting of those elements of stream \\spad{st} which do not satisfy the predicate \\spad{f}. Note: \\spad{remove(f,st) = [x for x in st | not f(x)]}."))) 
NIL 
NIL 
(-616 S) 
((|constructor| (NIL "LazyStreamAggregate is the category of streams with lazy evaluation. It is understood that the function 'empty?' will cause lazy evaluation if necessary to determine if there are entries. Functions which call 'empty?',{} \\spadignore{e.g.} 'first' and 'rest',{} will also cause lazy evaluation if necessary.")) (|complete| (($ $) "\\spad{complete(st)} causes all entries of 'st' to be computed. this function should only be called on streams which are known to be finite.")) (|extend| (($ $ (|Integer|)) "\\spad{extend(st,n)} causes entries to be computed,{} if necessary,{} so that 'st' will have at least 'n' explicit entries or so that all entries of 'st' will be computed if 'st' is finite with length <= \\spad{n}.")) (|numberOfComputedEntries| (((|NonNegativeInteger|) $) "\\spad{numberOfComputedEntries(st)} returns the number of explicitly computed entries of stream \\spad{st} which exist immediately prior to the time this function is called.")) (|rst| (($ $) "\\spad{rst(s)} returns a pointer to the next node of stream \\spad{s}. Caution: this function should only be called after a \\spad{empty?} test has been made since there no error check.")) (|frst| ((|#1| $) "\\spad{frst(s)} returns the first element of stream \\spad{s}. Caution: this function should only be called after a \\spad{empty?} test has been made since there no error check.")) (|lazyEvaluate| (($ $) "\\spad{lazyEvaluate(s)} causes one lazy evaluation of stream \\spad{s}. Caution: the first node must be a lazy evaluation mechanism (satisfies \\spad{lazy?(s) = true}) as there is no error check. Note: a call to this function may or may not produce an explicit first entry")) (|lazy?| (((|Boolean|) $) "\\spad{lazy?(s)} returns \\spad{true} if the first node of the stream \\spad{s} is a lazy evaluation mechanism which could produce an additional entry to \\spad{s}.")) (|explicitlyEmpty?| (((|Boolean|) $) "\\spad{explicitlyEmpty?(s)} returns \\spad{true} if the stream is an (explicitly) empty stream. Note: this is a null test which will not cause lazy evaluation.")) (|explicitEntries?| (((|Boolean|) $) "\\spad{explicitEntries?(s)} returns \\spad{true} if the stream \\spad{s} has explicitly computed entries,{} and \\spad{false} otherwise.")) (|select| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{select(f,st)} returns a stream consisting of those elements of stream \\spad{st} satisfying the predicate \\spad{f}. Note: \\spad{select(f,st) = [x for x in st | f(x)]}.")) (|remove| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{remove(f,st)} returns a stream consisting of those elements of stream \\spad{st} which do not satisfy the predicate \\spad{f}. Note: \\spad{remove(f,st) = [x for x in st | not f(x)]}."))) 
NIL 
NIL 
(-617) 
((|constructor| (NIL "This domain represents the syntax of a macro definition.")) (|body| (((|SpadAst|) $) "\\spad{body(m)} returns the right hand side of the definition `m'.")) (|head| (((|HeadAst|) $) "\\spad{head(m)} returns the head of the macro definition `m'. This is a list of identifiers starting with the name of the macro followed by the name of the parameters,{} if any."))) 
NIL 
NIL 
(-618 |VarSet|) 
((|constructor| (NIL "This type is the basic representation of parenthesized words (binary trees over arbitrary symbols) useful in \\spadtype{LiePolynomial}. \\newline Author: Michel Petitot (petitot@lifl.fr).")) (|varList| (((|List| |#1|) $) "\\axiom{varList(\\spad{x})} returns the list of distinct entries of \\axiom{\\spad{x}}.")) (|right| (($ $) "\\axiom{right(\\spad{x})} returns right subtree of \\axiom{\\spad{x}} or error if \\axiomOpFrom{retractable?}{Magma}(\\axiom{\\spad{x}}) is \\spad{true}.")) (|retractable?| (((|Boolean|) $) "\\axiom{retractable?(\\spad{x})} tests if \\axiom{\\spad{x}} is a tree with only one entry.")) (|rest| (($ $) "\\axiom{rest(\\spad{x})} return \\axiom{\\spad{x}} without the first entry or error if \\axiomOpFrom{retractable?}{Magma}(\\axiom{\\spad{x}}) is \\spad{true}.")) (|mirror| (($ $) "\\axiom{mirror(\\spad{x})} returns the reversed word of \\axiom{\\spad{x}}. That is \\axiom{\\spad{x}} itself if \\axiomOpFrom{retractable?}{Magma}(\\axiom{\\spad{x}}) is \\spad{true} and \\axiom{mirror(\\spad{z}) * mirror(\\spad{y})} if \\axiom{\\spad{x}} is \\axiom{y*z}.")) (|lexico| (((|Boolean|) $ $) "\\axiom{lexico(\\spad{x},{}\\spad{y})} returns \\axiom{\\spad{true}} iff \\axiom{\\spad{x}} is smaller than \\axiom{\\spad{y}} \\spad{w}.\\spad{r}.\\spad{t}. the lexicographical ordering induced by \\axiom{VarSet}. \\spad{N}.\\spad{B}. This operation does not take into account the tree structure of its arguments. Thus this is not a total ordering.")) (|length| (((|PositiveInteger|) $) "\\axiom{length(\\spad{x})} returns the number of entries in \\axiom{\\spad{x}}.")) (|left| (($ $) "\\axiom{left(\\spad{x})} returns left subtree of \\axiom{\\spad{x}} or error if \\axiomOpFrom{retractable?}{Magma}(\\axiom{\\spad{x}}) is \\spad{true}.")) (|first| ((|#1| $) "\\axiom{first(\\spad{x})} returns the first entry of the tree \\axiom{\\spad{x}}.")) (|coerce| (((|OrderedFreeMonoid| |#1|) $) "\\axiom{coerce(\\spad{x})} returns the element of \\axiomType{OrderedFreeMonoid}(VarSet) corresponding to \\axiom{\\spad{x}} by removing parentheses.")) (* (($ $ $) "\\axiom{x*y} returns the tree \\axiom{[\\spad{x},{}\\spad{y}]}."))) 
NIL 
NIL 
(-619 A) 
((|constructor| (NIL "various Currying operations.")) (|recur| ((|#1| (|Mapping| |#1| (|NonNegativeInteger|) |#1|) (|NonNegativeInteger|) |#1|) "\\spad{recur(n,g,x)} is \\spad{g(n,g(n-1,..g(1,x)..))}.")) (|iter| ((|#1| (|Mapping| |#1| |#1|) (|NonNegativeInteger|) |#1|) "\\spad{iter(f,n,x)} applies \\spad{f n} times to \\spad{x}."))) 
NIL 
NIL 
(-620 A C) 
((|constructor| (NIL "various Currying operations.")) (|arg2| ((|#2| |#1| |#2|) "\\spad{arg2(a,c)} selects its second argument.")) (|arg1| ((|#1| |#1| |#2|) "\\spad{arg1(a,c)} selects its first argument."))) 
NIL 
NIL 
(-621 A B C) 
((|constructor| (NIL "various Currying operations.")) (|comp| ((|#3| (|Mapping| |#3| |#2|) (|Mapping| |#2| |#1|) |#1|) "\\spad{comp(f,g,x)} is \\spad{f(g x)}."))) 
NIL 
NIL 
(-622) 
((|constructor| (NIL "This domain represents a mapping type AST. A mapping AST \\indented{2}{is a syntactic description of a function type,{} \\spadignore{e.g.} its result} \\indented{2}{type and the list of its argument types.}")) (|target| (((|TypeAst|) $) "\\spad{target(s)} returns the result type AST for `s'.")) (|source| (((|List| (|TypeAst|)) $) "\\spad{source(s)} returns the parameter type AST list of `s'.")) (|mappingAst| (($ (|List| (|TypeAst|)) (|TypeAst|)) "\\spad{mappingAst(s,t)} builds the mapping AST \\spad{s} -> \\spad{t}")) (|coerce| (($ (|Signature|)) "sig::MappingAst builds a MappingAst from the Signature `sig'."))) 
NIL 
NIL 
(-623 A) 
((|constructor| (NIL "various Currying operations.")) (|recur| (((|Mapping| |#1| (|NonNegativeInteger|) |#1|) (|Mapping| |#1| (|NonNegativeInteger|) |#1|)) "\\spad{recur(g)} is the function \\spad{h} such that \\indented{1}{\\spad{h(n,x)= g(n,g(n-1,..g(1,x)..))}.}")) (** (((|Mapping| |#1| |#1|) (|Mapping| |#1| |#1|) (|NonNegativeInteger|)) "\\spad{f**n} is the function which is the \\spad{n}-fold application \\indented{1}{of \\spad{f}.}")) (|id| ((|#1| |#1|) "\\spad{id x} is \\spad{x}.")) (|fixedPoint| (((|List| |#1|) (|Mapping| (|List| |#1|) (|List| |#1|)) (|Integer|)) "\\spad{fixedPoint(f,n)} is the fixed point of function \\indented{1}{\\spad{f} which is assumed to transform a list of length} \\indented{1}{\\spad{n}.}") ((|#1| (|Mapping| |#1| |#1|)) "\\spad{fixedPoint f} is the fixed point of function \\spad{f}. \\indented{1}{\\spadignore{i.e.} such that \\spad{fixedPoint f = f(fixedPoint f)}.}")) (|coerce| (((|Mapping| |#1|) |#1|) "\\spad{coerce A} changes its argument into a \\indented{1}{nullary function.}")) (|nullary| (((|Mapping| |#1|) |#1|) "\\spad{nullary A} changes its argument into a \\indented{1}{nullary function.}"))) 
NIL 
NIL 
(-624 A C) 
((|constructor| (NIL "various Currying operations.")) (|diag| (((|Mapping| |#2| |#1|) (|Mapping| |#2| |#1| |#1|)) "\\spad{diag(f)} is the function \\spad{g} \\indented{1}{such that \\spad{g a = f(a,a)}.}")) (|constant| (((|Mapping| |#2| |#1|) (|Mapping| |#2|)) "\\spad{vu(f)} is the function \\spad{g} \\indented{1}{such that \\spad{g a= f ()}.}")) (|curry| (((|Mapping| |#2|) (|Mapping| |#2| |#1|) |#1|) "\\spad{cu(f,a)} is the function \\spad{g} \\indented{1}{such that \\spad{g ()= f a}.}")) (|const| (((|Mapping| |#2| |#1|) |#2|) "\\spad{const c} is a function which produces \\spad{c} when \\indented{1}{applied to its argument.}"))) 
NIL 
NIL 
(-625 A B C) 
((|constructor| (NIL "various Currying operations.")) (* (((|Mapping| |#3| |#1|) (|Mapping| |#3| |#2|) (|Mapping| |#2| |#1|)) "\\spad{f*g} is the function \\spad{h} \\indented{1}{such that \\spad{h x= f(g x)}.}")) (|twist| (((|Mapping| |#3| |#2| |#1|) (|Mapping| |#3| |#1| |#2|)) "\\spad{twist(f)} is the function \\spad{g} \\indented{1}{such that \\spad{g (a,b)= f(b,a)}.}")) (|constantLeft| (((|Mapping| |#3| |#1| |#2|) (|Mapping| |#3| |#2|)) "\\spad{constantLeft(f)} is the function \\spad{g} \\indented{1}{such that \\spad{g (a,b)= f b}.}")) (|constantRight| (((|Mapping| |#3| |#1| |#2|) (|Mapping| |#3| |#1|)) "\\spad{constantRight(f)} is the function \\spad{g} \\indented{1}{such that \\spad{g (a,b)= f a}.}")) (|curryLeft| (((|Mapping| |#3| |#2|) (|Mapping| |#3| |#1| |#2|) |#1|) "\\spad{curryLeft(f,a)} is the function \\spad{g} \\indented{1}{such that \\spad{g b = f(a,b)}.}")) (|curryRight| (((|Mapping| |#3| |#1|) (|Mapping| |#3| |#1| |#2|) |#2|) "\\spad{curryRight(f,b)} is the function \\spad{g} such that \\indented{1}{\\spad{g a = f(a,b)}.}"))) 
NIL 
NIL 
(-626 S R |Row| |Col|) 
((|constructor| (NIL "\\spadtype{MatrixCategory} is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by calling the function \\spadfun{minRowIndex}. The index of the 'first' column may be obtained by calling the function \\spadfun{minColIndex}. The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa.")) (|inverse| (((|Union| $ "failed") $) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square.")) (|minordet| ((|#2| $) "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors. Error: if the matrix is not square.")) (|determinant| ((|#2| $) "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}. Error: if the matrix is not square.")) (|nullSpace| (((|List| |#4|) $) "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}.")) (|nullity| (((|NonNegativeInteger|) $) "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}.")) (|rank| (((|NonNegativeInteger|) $) "\\spad{rank(m)} returns the rank of the matrix \\spad{m}.")) (|rowEchelon| (($ $) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}.")) (/ (($ $ |#2|) "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}.")) (|exquo| (((|Union| $ "failed") $ |#2|) "\\spad{exquo(m,r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\axiom{\"failed\"} if this is not possible.")) (** (($ $ (|Integer|)) "\\spad{m**n} computes an integral power of the matrix \\spad{m}. Error: if matrix is not square or if the matrix is square but not invertible.") (($ $ (|NonNegativeInteger|)) "\\spad{x ** n} computes a non-negative integral power of the matrix \\spad{x}. Error: if the matrix is not square.")) (* ((|#3| |#3| $) "\\spad{r * x} is the product of the row vector \\spad{r} and the matrix \\spad{x}. Error: if the dimensions are incompatible.") ((|#4| $ |#4|) "\\spad{x * c} is the product of the matrix \\spad{x} and the column vector \\spad{c}. Error: if the dimensions are incompatible.") (($ (|Integer|) $) "\\spad{n * x} is an integer multiple.") (($ $ |#2|) "\\spad{x * r} is the right scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.") (($ |#2| $) "\\spad{r*x} is the left scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.") (($ $ $) "\\spad{x * y} is the product of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")) (- (($ $) "\\spad{-x} returns the negative of the matrix \\spad{x}.") (($ $ $) "\\spad{x - y} is the difference of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")) (+ (($ $ $) "\\spad{x + y} is the sum of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")) (|setsubMatrix!| (($ $ (|Integer|) (|Integer|) $) "\\spad{setsubMatrix(x,i1,j1,y)} destructively alters the matrix \\spad{x}. Here \\spad{x(i,j)} is set to \\spad{y(i-i1+1,j-j1+1)} for \\spad{i = i1,...,i1-1+nrows y} and \\spad{j = j1,...,j1-1+ncols y}.")) (|subMatrix| (($ $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{subMatrix(x,i1,i2,j1,j2)} extracts the submatrix \\spad{[x(i,j)]} where the index \\spad{i} ranges from \\spad{i1} to \\spad{i2} and the index \\spad{j} ranges from \\spad{j1} to \\spad{j2}.")) (|swapColumns!| (($ $ (|Integer|) (|Integer|)) "\\spad{swapColumns!(m,i,j)} interchanges the \\spad{i}th and \\spad{j}th columns of \\spad{m}. This destructively alters the matrix.")) (|swapRows!| (($ $ (|Integer|) (|Integer|)) "\\spad{swapRows!(m,i,j)} interchanges the \\spad{i}th and \\spad{j}th rows of \\spad{m}. This destructively alters the matrix.")) (|setelt| (($ $ (|List| (|Integer|)) (|List| (|Integer|)) $) "\\spad{setelt(x,rowList,colList,y)} destructively alters the matrix \\spad{x}. If \\spad{y} is \\spad{m}-by-\\spad{n},{} \\spad{rowList = [i<1>,i<2>,...,i<m>]} and \\spad{colList = [j<1>,j<2>,...,j<n>]},{} then \\spad{x(i<k>,j<l>)} is set to \\spad{y(k,l)} for \\spad{k = 1,...,m} and \\spad{l = 1,...,n}.")) (|elt| (($ $ (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{elt(x,rowList,colList)} returns an \\spad{m}-by-\\spad{n} matrix consisting of elements of \\spad{x},{} where \\spad{m = \\# rowList} and \\spad{n = \\# colList}. If \\spad{rowList = [i<1>,i<2>,...,i<m>]} and \\spad{colList = [j<1>,j<2>,...,j<n>]},{} then the \\spad{(k,l)}th entry of \\spad{elt(x,rowList,colList)} is \\spad{x(i<k>,j<l>)}.")) (|listOfLists| (((|List| (|List| |#2|)) $) "\\spad{listOfLists(m)} returns the rows of the matrix \\spad{m} as a list of lists.")) (|vertConcat| (($ $ $) "\\spad{vertConcat(x,y)} vertically concatenates two matrices with an equal number of columns. The entries of \\spad{y} appear below of the entries of \\spad{x}. Error: if the matrices do not have the same number of columns.")) (|horizConcat| (($ $ $) "\\spad{horizConcat(x,y)} horizontally concatenates two matrices with an equal number of rows. The entries of \\spad{y} appear to the right of the entries of \\spad{x}. Error: if the matrices do not have the same number of rows.")) (|squareTop| (($ $) "\\spad{squareTop(m)} returns an \\spad{n}-by-\\spad{n} matrix consisting of the first \\spad{n} rows of the \\spad{m}-by-\\spad{n} matrix \\spad{m}. Error: if \\spad{m < n}.")) (|transpose| (($ $) "\\spad{transpose(m)} returns the transpose of the matrix \\spad{m}.") (($ |#3|) "\\spad{transpose(r)} converts the row \\spad{r} to a row matrix.")) (|coerce| (($ |#4|) "\\spad{coerce(col)} converts the column \\spad{col} to a column matrix.")) (|diagonalMatrix| (($ (|List| $)) "\\spad{diagonalMatrix([m1,...,mk])} creates a block diagonal matrix \\spad{M} with block matrices {\\em m1},{}...,{}{\\em mk} down the diagonal,{} with 0 block matrices elsewhere. More precisly: if \\spad{ri := nrows mi},{} \\spad{ci := ncols mi},{} then \\spad{m} is an (r1+..+rk) by (c1+..+ck) - matrix with entries \\spad{m.i.j = ml.(i-r1-..-r(l-1)).(j-n1-..-n(l-1))},{} if \\spad{(r1+..+r(l-1)) < i <= r1+..+rl} and \\spad{(c1+..+c(l-1)) < i <= c1+..+cl},{} \\spad{m.i.j} = 0 otherwise.") (($ (|List| |#2|)) "\\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \\spad{l} on the diagonal.")) (|scalarMatrix| (($ (|NonNegativeInteger|) |#2|) "\\spad{scalarMatrix(n,r)} returns an \\spad{n}-by-\\spad{n} matrix with \\spad{r}'s on the diagonal and zeroes elsewhere.")) (|matrix| (($ (|NonNegativeInteger|) (|NonNegativeInteger|) (|Mapping| |#2| (|Integer|) (|Integer|))) "\\spad{matrix(n,m,f)} construcys and \\spad{n * m} matrix with the \\spad{(i,j)} entry equal to \\spad{f(i,j)}.") (($ (|List| (|List| |#2|))) "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.")) (|zero| (($ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{zero(m,n)} returns an \\spad{m}-by-\\spad{n} zero matrix.")) (|antisymmetric?| (((|Boolean|) $) "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,j] = -m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|symmetric?| (((|Boolean|) $) "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,j] = m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|diagonal?| (((|Boolean|) $) "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise.")) (|square?| (((|Boolean|) $) "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise."))) 
NIL 
((|HasAttribute| |#2| (QUOTE (-3996 "*"))) (|HasCategory| |#2| (QUOTE (-258))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-495)))) 
(-627 R |Row| |Col|) 
((|constructor| (NIL "\\spadtype{MatrixCategory} is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by calling the function \\spadfun{minRowIndex}. The index of the 'first' column may be obtained by calling the function \\spadfun{minColIndex}. The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa.")) (|inverse| (((|Union| $ "failed") $) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square.")) (|minordet| ((|#1| $) "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors. Error: if the matrix is not square.")) (|determinant| ((|#1| $) "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}. Error: if the matrix is not square.")) (|nullSpace| (((|List| |#3|) $) "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}.")) (|nullity| (((|NonNegativeInteger|) $) "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}.")) (|rank| (((|NonNegativeInteger|) $) "\\spad{rank(m)} returns the rank of the matrix \\spad{m}.")) (|rowEchelon| (($ $) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}.")) (/ (($ $ |#1|) "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}.")) (|exquo| (((|Union| $ "failed") $ |#1|) "\\spad{exquo(m,r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\axiom{\"failed\"} if this is not possible.")) (** (($ $ (|Integer|)) "\\spad{m**n} computes an integral power of the matrix \\spad{m}. Error: if matrix is not square or if the matrix is square but not invertible.") (($ $ (|NonNegativeInteger|)) "\\spad{x ** n} computes a non-negative integral power of the matrix \\spad{x}. Error: if the matrix is not square.")) (* ((|#2| |#2| $) "\\spad{r * x} is the product of the row vector \\spad{r} and the matrix \\spad{x}. Error: if the dimensions are incompatible.") ((|#3| $ |#3|) "\\spad{x * c} is the product of the matrix \\spad{x} and the column vector \\spad{c}. Error: if the dimensions are incompatible.") (($ (|Integer|) $) "\\spad{n * x} is an integer multiple.") (($ $ |#1|) "\\spad{x * r} is the right scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.") (($ |#1| $) "\\spad{r*x} is the left scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.") (($ $ $) "\\spad{x * y} is the product of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")) (- (($ $) "\\spad{-x} returns the negative of the matrix \\spad{x}.") (($ $ $) "\\spad{x - y} is the difference of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")) (+ (($ $ $) "\\spad{x + y} is the sum of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")) (|setsubMatrix!| (($ $ (|Integer|) (|Integer|) $) "\\spad{setsubMatrix(x,i1,j1,y)} destructively alters the matrix \\spad{x}. Here \\spad{x(i,j)} is set to \\spad{y(i-i1+1,j-j1+1)} for \\spad{i = i1,...,i1-1+nrows y} and \\spad{j = j1,...,j1-1+ncols y}.")) (|subMatrix| (($ $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{subMatrix(x,i1,i2,j1,j2)} extracts the submatrix \\spad{[x(i,j)]} where the index \\spad{i} ranges from \\spad{i1} to \\spad{i2} and the index \\spad{j} ranges from \\spad{j1} to \\spad{j2}.")) (|swapColumns!| (($ $ (|Integer|) (|Integer|)) "\\spad{swapColumns!(m,i,j)} interchanges the \\spad{i}th and \\spad{j}th columns of \\spad{m}. This destructively alters the matrix.")) (|swapRows!| (($ $ (|Integer|) (|Integer|)) "\\spad{swapRows!(m,i,j)} interchanges the \\spad{i}th and \\spad{j}th rows of \\spad{m}. This destructively alters the matrix.")) (|setelt| (($ $ (|List| (|Integer|)) (|List| (|Integer|)) $) "\\spad{setelt(x,rowList,colList,y)} destructively alters the matrix \\spad{x}. If \\spad{y} is \\spad{m}-by-\\spad{n},{} \\spad{rowList = [i<1>,i<2>,...,i<m>]} and \\spad{colList = [j<1>,j<2>,...,j<n>]},{} then \\spad{x(i<k>,j<l>)} is set to \\spad{y(k,l)} for \\spad{k = 1,...,m} and \\spad{l = 1,...,n}.")) (|elt| (($ $ (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{elt(x,rowList,colList)} returns an \\spad{m}-by-\\spad{n} matrix consisting of elements of \\spad{x},{} where \\spad{m = \\# rowList} and \\spad{n = \\# colList}. If \\spad{rowList = [i<1>,i<2>,...,i<m>]} and \\spad{colList = [j<1>,j<2>,...,j<n>]},{} then the \\spad{(k,l)}th entry of \\spad{elt(x,rowList,colList)} is \\spad{x(i<k>,j<l>)}.")) (|listOfLists| (((|List| (|List| |#1|)) $) "\\spad{listOfLists(m)} returns the rows of the matrix \\spad{m} as a list of lists.")) (|vertConcat| (($ $ $) "\\spad{vertConcat(x,y)} vertically concatenates two matrices with an equal number of columns. The entries of \\spad{y} appear below of the entries of \\spad{x}. Error: if the matrices do not have the same number of columns.")) (|horizConcat| (($ $ $) "\\spad{horizConcat(x,y)} horizontally concatenates two matrices with an equal number of rows. The entries of \\spad{y} appear to the right of the entries of \\spad{x}. Error: if the matrices do not have the same number of rows.")) (|squareTop| (($ $) "\\spad{squareTop(m)} returns an \\spad{n}-by-\\spad{n} matrix consisting of the first \\spad{n} rows of the \\spad{m}-by-\\spad{n} matrix \\spad{m}. Error: if \\spad{m < n}.")) (|transpose| (($ $) "\\spad{transpose(m)} returns the transpose of the matrix \\spad{m}.") (($ |#2|) "\\spad{transpose(r)} converts the row \\spad{r} to a row matrix.")) (|coerce| (($ |#3|) "\\spad{coerce(col)} converts the column \\spad{col} to a column matrix.")) (|diagonalMatrix| (($ (|List| $)) "\\spad{diagonalMatrix([m1,...,mk])} creates a block diagonal matrix \\spad{M} with block matrices {\\em m1},{}...,{}{\\em mk} down the diagonal,{} with 0 block matrices elsewhere. More precisly: if \\spad{ri := nrows mi},{} \\spad{ci := ncols mi},{} then \\spad{m} is an (r1+..+rk) by (c1+..+ck) - matrix with entries \\spad{m.i.j = ml.(i-r1-..-r(l-1)).(j-n1-..-n(l-1))},{} if \\spad{(r1+..+r(l-1)) < i <= r1+..+rl} and \\spad{(c1+..+c(l-1)) < i <= c1+..+cl},{} \\spad{m.i.j} = 0 otherwise.") (($ (|List| |#1|)) "\\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \\spad{l} on the diagonal.")) (|scalarMatrix| (($ (|NonNegativeInteger|) |#1|) "\\spad{scalarMatrix(n,r)} returns an \\spad{n}-by-\\spad{n} matrix with \\spad{r}'s on the diagonal and zeroes elsewhere.")) (|matrix| (($ (|NonNegativeInteger|) (|NonNegativeInteger|) (|Mapping| |#1| (|Integer|) (|Integer|))) "\\spad{matrix(n,m,f)} construcys and \\spad{n * m} matrix with the \\spad{(i,j)} entry equal to \\spad{f(i,j)}.") (($ (|List| (|List| |#1|))) "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.")) (|zero| (($ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{zero(m,n)} returns an \\spad{m}-by-\\spad{n} zero matrix.")) (|antisymmetric?| (((|Boolean|) $) "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,j] = -m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|symmetric?| (((|Boolean|) $) "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,j] = m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|diagonal?| (((|Boolean|) $) "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise.")) (|square?| (((|Boolean|) $) "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise."))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-628 R1 |Row1| |Col1| M1 R2 |Row2| |Col2| M2) 
((|constructor| (NIL "\\spadtype{MatrixCategoryFunctions2} provides functions between two matrix domains. The functions provided are \\spadfun{map} and \\spadfun{reduce}.")) (|reduce| ((|#5| (|Mapping| |#5| |#1| |#5|) |#4| |#5|) "\\spad{reduce(f,m,r)} returns a matrix \\spad{n} where \\spad{n[i,j] = f(m[i,j],r)} for all indices \\spad{i} and \\spad{j}.")) (|map| (((|Union| |#8| "failed") (|Mapping| (|Union| |#5| "failed") |#1|) |#4|) "\\spad{map(f,m)} applies the function \\spad{f} to the elements of the matrix \\spad{m}.") ((|#8| (|Mapping| |#5| |#1|) |#4|) "\\spad{map(f,m)} applies the function \\spad{f} to the elements of the matrix \\spad{m}."))) 
NIL 
NIL 
(-629 R |Row| |Col| M) 
((|constructor| (NIL "\\spadtype{MatrixLinearAlgebraFunctions} provides functions to compute inverses and canonical forms.")) (|inverse| (((|Union| |#4| "failed") |#4|) "\\spad{inverse(m)} returns the inverse of the matrix. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square.")) (|normalizedDivide| (((|Record| (|:| |quotient| |#1|) (|:| |remainder| |#1|)) |#1| |#1|) "\\spad{normalizedDivide(n,d)} returns a normalized quotient and remainder such that consistently unique representatives for the residue class are chosen,{} \\spadignore{e.g.} positive remainders")) (|rowEchelon| ((|#4| |#4|) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}.")) (|adjoint| (((|Record| (|:| |adjMat| |#4|) (|:| |detMat| |#1|)) |#4|) "\\spad{adjoint(m)} returns the ajoint matrix of \\spad{m} (\\spadignore{i.e.} the matrix \\spad{n} such that m*n = determinant(\\spad{m})*id) and the detrminant of \\spad{m}.")) (|invertIfCan| (((|Union| |#4| "failed") |#4|) "\\spad{invertIfCan(m)} returns the inverse of \\spad{m} over \\spad{R}")) (|fractionFreeGauss!| ((|#4| |#4|) "\\spad{fractionFreeGauss(m)} performs the fraction free gaussian elimination on the matrix \\spad{m}.")) (|nullSpace| (((|List| |#3|) |#4|) "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}.")) (|nullity| (((|NonNegativeInteger|) |#4|) "\\spad{nullity(m)} returns the mullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}.")) (|rank| (((|NonNegativeInteger|) |#4|) "\\spad{rank(m)} returns the rank of the matrix \\spad{m}.")) (|elColumn2!| ((|#4| |#4| |#1| (|Integer|) (|Integer|)) "\\spad{elColumn2!(m,a,i,j)} adds to column \\spad{i} a*column(\\spad{m},{}\\spad{j}) : elementary operation of second kind. (\\spad{i} ~=j)")) (|elRow2!| ((|#4| |#4| |#1| (|Integer|) (|Integer|)) "\\spad{elRow2!(m,a,i,j)} adds to row \\spad{i} a*row(\\spad{m},{}\\spad{j}) : elementary operation of second kind. (\\spad{i} ~=j)")) (|elRow1!| ((|#4| |#4| (|Integer|) (|Integer|)) "\\spad{elRow1!(m,i,j)} swaps rows \\spad{i} and \\spad{j} of matrix \\spad{m} : elementary operation of first kind")) (|minordet| ((|#1| |#4|) "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors. Error: if the matrix is not square.")) (|determinant| ((|#1| |#4|) "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}. an error message is returned if the matrix is not square."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-495)))) 
(-630 R) 
((|constructor| (NIL "\\spadtype{Matrix} is a matrix domain where 1-based indexing is used for both rows and columns.")) (|inverse| (((|Union| $ "failed") $) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square.")) (|diagonalMatrix| (($ (|Vector| |#1|)) "\\spad{diagonalMatrix(v)} returns a diagonal matrix where the elements of \\spad{v} appear on the diagonal."))) 
((-3994 . T) (-3995 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-258))) (|HasCategory| |#1| (QUOTE (-495))) (|HasAttribute| |#1| (QUOTE (-3996 "*"))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-631 R) 
((|constructor| (NIL "This package provides standard arithmetic operations on matrices. The functions in this package store the results of computations in existing matrices,{} rather than creating new matrices. This package works only for matrices of type Matrix and uses the internal representation of this type.")) (** (((|Matrix| |#1|) (|Matrix| |#1|) (|NonNegativeInteger|)) "\\spad{x ** n} computes the \\spad{n}-th power of a square matrix. The power \\spad{n} is assumed greater than 1.")) (|power!| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|NonNegativeInteger|)) "\\spad{power!(a,b,c,m,n)} computes \\spad{m} ** \\spad{n} and stores the result in \\spad{a}. The matrices \\spad{b} and \\spad{c} are used to store intermediate results. Error: if \\spad{a},{} \\spad{b},{} \\spad{c},{} and \\spad{m} are not square and of the same dimensions.")) (|times!| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{times!(c,a,b)} computes the matrix product \\spad{a * b} and stores the result in the matrix \\spad{c}. Error: if \\spad{a},{} \\spad{b},{} and \\spad{c} do not have compatible dimensions.")) (|rightScalarTimes!| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) |#1|) "\\spad{rightScalarTimes!(c,a,r)} computes the scalar product \\spad{a * r} and stores the result in the matrix \\spad{c}. Error: if \\spad{a} and \\spad{c} do not have the same dimensions.")) (|leftScalarTimes!| (((|Matrix| |#1|) (|Matrix| |#1|) |#1| (|Matrix| |#1|)) "\\spad{leftScalarTimes!(c,r,a)} computes the scalar product \\spad{r * a} and stores the result in the matrix \\spad{c}. Error: if \\spad{a} and \\spad{c} do not have the same dimensions.")) (|minus!| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{!minus!(c,a,b)} computes the matrix difference \\spad{a - b} and stores the result in the matrix \\spad{c}. Error: if \\spad{a},{} \\spad{b},{} and \\spad{c} do not have the same dimensions.") (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{minus!(c,a)} computes \\spad{-a} and stores the result in the matrix \\spad{c}. Error: if a and \\spad{c} do not have the same dimensions.")) (|plus!| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{plus!(c,a,b)} computes the matrix sum \\spad{a + b} and stores the result in the matrix \\spad{c}. Error: if \\spad{a},{} \\spad{b},{} and \\spad{c} do not have the same dimensions.")) (|copy!| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{copy!(c,a)} copies the matrix \\spad{a} into the matrix \\spad{c}. Error: if \\spad{a} and \\spad{c} do not have the same dimensions."))) 
NIL 
NIL 
(-632 T$) 
((|constructor| (NIL "This domain implements the notion of optional value,{} where a computation may fail to produce expected value.")) (|nothing| (($) "\\spad{nothing} represents failure or absence of value.")) (|autoCoerce| ((|#1| $) "\\spad{autoCoerce} is a courtesy coercion function used by the compiler in case it knows that `x' really is a \\spadtype{T}.")) (|case| (((|Boolean|) $ (|[\|\|]| |nothing|)) "\\spad{x case nothing} holds if the value for \\spad{x} is missing.") (((|Boolean|) $ (|[\|\|]| |#1|)) "\\spad{x case T} returns \\spad{true} if \\spad{x} is actually a data of type \\spad{T}.")) (|just| (($ |#1|) "\\spad{just x} injects the value `x' into \\%."))) 
NIL 
NIL 
(-633 R Q) 
((|constructor| (NIL "MatrixCommonDenominator provides functions to compute the common denominator of a matrix of elements of the quotient field of an integral domain.")) (|splitDenominator| (((|Record| (|:| |num| (|Matrix| |#1|)) (|:| |den| |#1|)) (|Matrix| |#2|)) "\\spad{splitDenominator(q)} returns \\spad{[p, d]} such that \\spad{q = p/d} and \\spad{d} is a common denominator for the elements of \\spad{q}.")) (|clearDenominator| (((|Matrix| |#1|) (|Matrix| |#2|)) "\\spad{clearDenominator(q)} returns \\spad{p} such that \\spad{q = p/d} where \\spad{d} is a common denominator for the elements of \\spad{q}.")) (|commonDenominator| ((|#1| (|Matrix| |#2|)) "\\spad{commonDenominator(q)} returns a common denominator \\spad{d} for the elements of \\spad{q}."))) 
NIL 
NIL 
(-634 S) 
((|constructor| (NIL "A multi-dictionary is a dictionary which may contain duplicates. As for any dictionary,{} its size is assumed large so that copying (non-destructive) operations are generally to be avoided.")) (|duplicates| (((|List| (|Record| (|:| |entry| |#1|) (|:| |count| (|NonNegativeInteger|)))) $) "\\spad{duplicates(d)} returns a list of values which have duplicates in \\spad{d}")) (|removeDuplicates!| (($ $) "\\spad{removeDuplicates!(d)} destructively removes any duplicate values in dictionary \\spad{d}.")) (|insert!| (($ |#1| $ (|NonNegativeInteger|)) "\\spad{insert!(x,d,n)} destructively inserts \\spad{n} copies of \\spad{x} into dictionary \\spad{d}."))) 
((-3995 . T)) 
NIL 
(-635 U) 
((|constructor| (NIL "This package supports factorization and gcds of univariate polynomials over the integers modulo different primes. The inputs are given as polynomials over the integers with the prime passed explicitly as an extra argument.")) (|exptMod| ((|#1| |#1| (|Integer|) |#1| (|Integer|)) "\\spad{exptMod(f,n,g,p)} raises the univariate polynomial \\spad{f} to the \\spad{n}th power modulo the polynomial \\spad{g} and the prime \\spad{p}.")) (|separateFactors| (((|List| |#1|) (|List| (|Record| (|:| |factor| |#1|) (|:| |degree| (|Integer|)))) (|Integer|)) "\\spad{separateFactors(ddl, p)} refines the distinct degree factorization produced by \\spadfunFrom{ddFact}{ModularDistinctDegreeFactorizer} to give a complete list of factors.")) (|ddFact| (((|List| (|Record| (|:| |factor| |#1|) (|:| |degree| (|Integer|)))) |#1| (|Integer|)) "\\spad{ddFact(f,p)} computes a distinct degree factorization of the polynomial \\spad{f} modulo the prime \\spad{p},{} \\spadignore{i.e.} such that each factor is a product of irreducibles of the same degrees. The input polynomial \\spad{f} is assumed to be square-free modulo \\spad{p}.")) (|factor| (((|List| |#1|) |#1| (|Integer|)) "\\spad{factor(f1,p)} returns the list of factors of the univariate polynomial \\spad{f1} modulo the integer prime \\spad{p}. Error: if \\spad{f1} is not square-free modulo \\spad{p}.")) (|linears| ((|#1| |#1| (|Integer|)) "\\spad{linears(f,p)} returns the product of all the linear factors of \\spad{f} modulo \\spad{p}. Potentially incorrect result if \\spad{f} is not square-free modulo \\spad{p}.")) (|gcd| ((|#1| |#1| |#1| (|Integer|)) "\\spad{gcd(f1,f2,p)} computes the gcd of the univariate polynomials \\spad{f1} and \\spad{f2} modulo the integer prime \\spad{p}."))) 
NIL 
NIL 
(-636) 
((|constructor| (NIL "\\indented{1}{<description of package>} Author: Jim Wen Date Created: ?? Date Last Updated: October 1991 by Jon Steinbach Keywords: Examples: References:")) (|ptFunc| (((|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))) "\\spad{ptFunc(a,b,c,d)} is an internal function exported in order to compile packages.")) (|meshPar1Var| (((|ThreeSpace| (|DoubleFloat|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Expression| (|Integer|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{meshPar1Var(s,t,u,f,s1,l)} \\undocumented")) (|meshFun2Var| (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Union| (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) #1="undefined") (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{meshFun2Var(f,g,s1,s2,l)} \\undocumented")) (|meshPar2Var| (((|ThreeSpace| (|DoubleFloat|)) (|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{meshPar2Var(sp,f,s1,s2,l)} \\undocumented") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{meshPar2Var(f,s1,s2,l)} \\undocumented") (((|ThreeSpace| (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) (|Union| (|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) #1#) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{meshPar2Var(f,g,h,j,s1,s2,l)} \\undocumented"))) 
NIL 
NIL 
(-637 OV E -3092 PG) 
((|constructor| (NIL "Package for factorization of multivariate polynomials over finite fields.")) (|factor| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|)) "\\spad{factor(p)} produces the complete factorization of the multivariate polynomial \\spad{p} over a finite field. \\spad{p} is represented as a univariate polynomial with multivariate coefficients over a finite field.") (((|Factored| |#4|) |#4|) "\\spad{factor(p)} produces the complete factorization of the multivariate polynomial \\spad{p} over a finite field."))) 
NIL 
NIL 
(-638 R) 
((|constructor| (NIL "\\indented{1}{Modular hermitian row reduction.} Author: Manuel Bronstein Date Created: 22 February 1989 Date Last Updated: 24 November 1993 Keywords: matrix,{} reduction.")) (|normalizedDivide| (((|Record| (|:| |quotient| |#1|) (|:| |remainder| |#1|)) |#1| |#1|) "\\spad{normalizedDivide(n,d)} returns a normalized quotient and remainder such that consistently unique representatives for the residue class are chosen,{} \\spadignore{e.g.} positive remainders")) (|rowEchelonLocal| (((|Matrix| |#1|) (|Matrix| |#1|) |#1| |#1|) "\\spad{rowEchelonLocal(m, d, p)} computes the row-echelon form of \\spad{m} concatenated with \\spad{d} times the identity matrix over a local ring where \\spad{p} is the only prime.")) (|rowEchLocal| (((|Matrix| |#1|) (|Matrix| |#1|) |#1|) "\\spad{rowEchLocal(m,p)} computes a modular row-echelon form of \\spad{m},{} finding an appropriate modulus over a local ring where \\spad{p} is the only prime.")) (|rowEchelon| (((|Matrix| |#1|) (|Matrix| |#1|) |#1|) "\\spad{rowEchelon(m, d)} computes a modular row-echelon form mod \\spad{d} of \\indented{3}{[\\spad{d}\\space{5}]} \\indented{3}{[\\space{2}\\spad{d}\\space{3}]} \\indented{3}{[\\space{4}. ]} \\indented{3}{[\\space{5}\\spad{d}]} \\indented{3}{[\\space{3}\\spad{M}\\space{2}]} where \\spad{M = m mod d}.")) (|rowEch| (((|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{rowEch(m)} computes a modular row-echelon form of \\spad{m},{} finding an appropriate modulus."))) 
NIL 
NIL 
(-639 S D1 D2 I) 
((|constructor| (NIL "transforms top-level objects into compiled functions.")) (|compiledFunction| (((|Mapping| |#4| |#2| |#3|) |#1| (|Symbol|) (|Symbol|)) "\\spad{compiledFunction(expr,x,y)} returns a function \\spad{f: (D1, D2) -> I} defined by \\spad{f(x, y) == expr}. Function \\spad{f} is compiled and directly applicable to objects of type \\spad{(D1, D2)}")) (|binaryFunction| (((|Mapping| |#4| |#2| |#3|) (|Symbol|)) "\\spad{binaryFunction(s)} is a local function"))) 
NIL 
NIL 
(-640 S) 
((|constructor| (NIL "MakeFloatCompiledFunction transforms top-level objects into compiled Lisp functions whose arguments are Lisp floats. This by-passes the \\Language{} compiler and interpreter,{} thereby gaining several orders of magnitude.")) (|makeFloatFunction| (((|Mapping| (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) |#1| (|Symbol|) (|Symbol|)) "\\spad{makeFloatFunction(expr, x, y)} returns a Lisp function \\spad{f: (\\axiomType{DoubleFloat}, \\axiomType{DoubleFloat}) -> \\axiomType{DoubleFloat}} defined by \\spad{f(x, y) == expr}. Function \\spad{f} is compiled and directly applicable to objects of type \\spad{(\\axiomType{DoubleFloat}, \\axiomType{DoubleFloat})}.") (((|Mapping| (|DoubleFloat|) (|DoubleFloat|)) |#1| (|Symbol|)) "\\spad{makeFloatFunction(expr, x)} returns a Lisp function \\spad{f: \\axiomType{DoubleFloat} -> \\axiomType{DoubleFloat}} defined by \\spad{f(x) == expr}. Function \\spad{f} is compiled and directly applicable to objects of type \\axiomType{DoubleFloat}."))) 
NIL 
NIL 
(-641 S) 
((|constructor| (NIL "transforms top-level objects into interpreter functions.")) (|function| (((|Symbol|) |#1| (|Symbol|) (|List| (|Symbol|))) "\\spad{function(e, foo, [x1,...,xn])} creates a function \\spad{foo(x1,...,xn) == e}.") (((|Symbol|) |#1| (|Symbol|) (|Symbol|) (|Symbol|)) "\\spad{function(e, foo, x, y)} creates a function \\spad{foo(x, y) = e}.") (((|Symbol|) |#1| (|Symbol|) (|Symbol|)) "\\spad{function(e, foo, x)} creates a function \\spad{foo(x) == e}.") (((|Symbol|) |#1| (|Symbol|)) "\\spad{function(e, foo)} creates a function \\spad{foo() == e}."))) 
NIL 
NIL 
(-642 S T$) 
((|constructor| (NIL "MakeRecord is used internally by the interpreter to create record types which are used for doing parallel iterations on streams.")) (|makeRecord| (((|Record| (|:| |part1| |#1|) (|:| |part2| |#2|)) |#1| |#2|) "\\spad{makeRecord(a,b)} creates a record object with type Record(part1:S,{} part2:R),{} where \\spad{part1} is \\spad{a} and \\spad{part2} is \\spad{b}."))) 
NIL 
NIL 
(-643 S -2669 I) 
((|constructor| (NIL "transforms top-level objects into compiled functions.")) (|compiledFunction| (((|Mapping| |#3| |#2|) |#1| (|Symbol|)) "\\spad{compiledFunction(expr, x)} returns a function \\spad{f: D -> I} defined by \\spad{f(x) == expr}. Function \\spad{f} is compiled and directly applicable to objects of type \\spad{D}.")) (|unaryFunction| (((|Mapping| |#3| |#2|) (|Symbol|)) "\\spad{unaryFunction(a)} is a local function"))) 
NIL 
NIL 
(-644 E OV R P) 
((|constructor| (NIL "This package provides the functions for the multivariate \"lifting\",{} using an algorithm of Paul Wang. This package will work for every euclidean domain \\spad{R} which has property \\spad{F},{} \\spadignore{i.e.} there exists a factor operation in \\spad{R[x]}.")) (|lifting1| (((|Union| (|List| (|SparseUnivariatePolynomial| |#4|)) "failed") (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|List| (|SparseUnivariatePolynomial| |#4|)) (|List| |#3|) (|List| |#4|) (|List| (|List| (|Record| (|:| |expt| (|NonNegativeInteger|)) (|:| |pcoef| |#4|)))) (|List| (|NonNegativeInteger|)) (|Vector| (|List| (|SparseUnivariatePolynomial| |#3|))) |#3|) "\\spad{lifting1(u,lv,lu,lr,lp,lt,ln,t,r)} \\undocumented")) (|lifting| (((|Union| (|List| (|SparseUnivariatePolynomial| |#4|)) "failed") (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|List| (|SparseUnivariatePolynomial| |#3|)) (|List| |#3|) (|List| |#4|) (|List| (|NonNegativeInteger|)) |#3|) "\\spad{lifting(u,lv,lu,lr,lp,ln,r)} \\undocumented")) (|corrPoly| (((|Union| (|List| (|SparseUnivariatePolynomial| |#4|)) "failed") (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|List| |#3|) (|List| (|NonNegativeInteger|)) (|List| (|SparseUnivariatePolynomial| |#4|)) (|Vector| (|List| (|SparseUnivariatePolynomial| |#3|))) |#3|) "\\spad{corrPoly(u,lv,lr,ln,lu,t,r)} \\undocumented"))) 
NIL 
NIL 
(-645 R) 
((|constructor| (NIL "This is the category of linear operator rings with one generator. The generator is not named by the category but can always be constructed as \\spad{monomial(1,1)}. \\blankline For convenience,{} call the generator \\spad{G}. Then each value is equal to \\indented{4}{\\spad{sum(a(i)*G**i, i = 0..n)}} for some unique \\spad{n} and \\spad{a(i)} in \\spad{R}. \\blankline Note that multiplication is not necessarily commutative. In fact,{} if \\spad{a} is in \\spad{R},{} it is quite normal to have \\spad{a*G \\~= G*a}.")) (|monomial| (($ |#1| (|NonNegativeInteger|)) "\\spad{monomial(c,k)} produces \\spad{c} times the \\spad{k}-th power of the generating operator,{} \\spad{monomial(1,1)}.")) (|coefficient| ((|#1| $ (|NonNegativeInteger|)) "\\spad{coefficient(l,k)} is \\spad{a(k)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|reductum| (($ $) "\\spad{reductum(l)} is \\spad{l - monomial(a(n),n)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(l)} is \\spad{a(n)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|minimumDegree| (((|NonNegativeInteger|) $) "\\spad{minimumDegree(l)} is the smallest \\spad{k} such that \\spad{a(k) \\~= 0} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(l)} is \\spad{n} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-646 R1 UP1 UPUP1 R2 UP2 UPUP2) 
((|constructor| (NIL "Lifting of a map through 2 levels of polynomials.")) (|map| ((|#6| (|Mapping| |#4| |#1|) |#3|) "\\spad{map(f, p)} lifts \\spad{f} to the domain of \\spad{p} then applies it to \\spad{p}."))) 
NIL 
NIL 
(-647) 
((|constructor| (NIL "\\spadtype{MathMLFormat} provides a coercion from \\spadtype{OutputForm} to MathML format.")) (|display| (((|Void|) (|String|)) "prints the string returned by coerce,{} adding <math ...> tags.")) (|exprex| (((|String|) (|OutputForm|)) "coverts \\spadtype{OutputForm} to \\spadtype{String} with the structure preserved with braces. Actually this is not quite accurate. The function \\spadfun{precondition} is first applied to the \\spadtype{OutputForm} expression before \\spadfun{exprex}. The raw \\spadtype{OutputForm} and the nature of the \\spadfun{precondition} function is still obscure to me at the time of this writing (2007-02-14).")) (|coerceL| (((|String|) (|OutputForm|)) "coerceS(\\spad{o}) changes \\spad{o} in the standard output format to MathML format and displays result as one long string.")) (|coerceS| (((|String|) (|OutputForm|)) "\\spad{coerceS(o)} changes \\spad{o} in the standard output format to MathML format and displays formatted result.")) (|coerce| (((|String|) (|OutputForm|)) "coerceS(\\spad{o}) changes \\spad{o} in the standard output format to MathML format."))) 
NIL 
NIL 
(-648 R |Mod| -2037 -3517 |exactQuo|) 
((|constructor| (NIL "\\indented{1}{These domains are used for the factorization and gcds} of univariate polynomials over the integers in order to work modulo different primes. See \\spadtype{ModularRing},{} \\spadtype{EuclideanModularRing}")) (|exQuo| (((|Union| $ "failed") $ $) "\\spad{exQuo(x,y)} \\undocumented")) (|reduce| (($ |#1| |#2|) "\\spad{reduce(r,m)} \\undocumented")) (|coerce| ((|#1| $) "\\spad{coerce(x)} \\undocumented")) (|modulus| ((|#2| $) "\\spad{modulus(x)} \\undocumented"))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-649 R P) 
((|constructor| (NIL "This package \\undocumented")) (|frobenius| (($ $) "\\spad{frobenius(x)} \\undocumented")) (|computePowers| (((|PrimitiveArray| $)) "\\spad{computePowers()} \\undocumented")) (|pow| (((|PrimitiveArray| $)) "\\spad{pow()} \\undocumented")) (|An| (((|Vector| |#1|) $) "\\spad{An(x)} \\undocumented")) (|UnVectorise| (($ (|Vector| |#1|)) "\\spad{UnVectorise(v)} \\undocumented")) (|Vectorise| (((|Vector| |#1|) $) "\\spad{Vectorise(x)} \\undocumented")) (|lift| ((|#2| $) "\\spad{lift(x)} \\undocumented")) (|reduce| (($ |#2|) "\\spad{reduce(x)} \\undocumented")) (|modulus| ((|#2|) "\\spad{modulus()} \\undocumented")) (|setPoly| ((|#2| |#2|) "\\spad{setPoly(x)} \\undocumented"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3990 |has| |#1| (-312)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| (-994) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| (-994) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-994) (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-1065))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-299))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-190))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-650 IS E |ff|) 
((|constructor| (NIL "This package \\undocumented")) (|construct| (($ |#1| |#2|) "\\spad{construct(i,e)} \\undocumented")) (|index| ((|#1| $) "\\spad{index(x)} \\undocumented")) (|exponent| ((|#2| $) "\\spad{exponent(x)} \\undocumented"))) 
NIL 
NIL 
(-651 R M) 
((|constructor| (NIL "Algebra of ADDITIVE operators on a module.")) (|makeop| (($ |#1| (|FreeGroup| (|BasicOperator|))) "\\spad{makeop should} be local but conditional")) (|opeval| ((|#2| (|BasicOperator|) |#2|) "\\spad{opeval should} be local but conditional")) (** (($ $ (|Integer|)) "\\spad{op**n} \\undocumented") (($ (|BasicOperator|) (|Integer|)) "\\spad{op**n} \\undocumented")) (|evaluateInverse| (($ $ (|Mapping| |#2| |#2|)) "\\spad{evaluateInverse(x,f)} \\undocumented")) (|evaluate| (($ $ (|Mapping| |#2| |#2|)) "\\spad{evaluate(f, u +-> g u)} attaches the map \\spad{g} to \\spad{f}. \\spad{f} must be a basic operator \\spad{g} MUST be additive,{} \\spadignore{i.e.} \\spad{g(a + b) = g(a) + g(b)} for any \\spad{a},{} \\spad{b} in \\spad{M}. This implies that \\spad{g(n a) = n g(a)} for any \\spad{a} in \\spad{M} and integer \\spad{n > 0}.")) (|conjug| ((|#1| |#1|) "\\spad{conjug(x)}should be local but conditional")) (|adjoint| (($ $ $) "\\spad{adjoint(op1, op2)} sets the adjoint of \\spad{op1} to be \\spad{op2}. \\spad{op1} must be a basic operator") (($ $) "\\spad{adjoint(op)} returns the adjoint of the operator \\spad{op}."))) 
((-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120)))) 
(-652 R |Mod| -2037 -3517 |exactQuo|) 
((|constructor| (NIL "These domains are used for the factorization and gcds of univariate polynomials over the integers in order to work modulo different primes. See \\spadtype{EuclideanModularRing} ,{}\\spadtype{ModularField}")) (|inv| (($ $) "\\spad{inv(x)} \\undocumented")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(x)} \\undocumented")) (|exQuo| (((|Union| $ "failed") $ $) "\\spad{exQuo(x,y)} \\undocumented")) (|reduce| (($ |#1| |#2|) "\\spad{reduce(r,m)} \\undocumented")) (|coerce| ((|#1| $) "\\spad{coerce(x)} \\undocumented")) (|modulus| ((|#2| $) "\\spad{modulus(x)} \\undocumented"))) 
((-3991 . T)) 
NIL 
(-653 S R) 
((|constructor| (NIL "The category of modules over a commutative ring. \\blankline"))) 
NIL 
NIL 
(-654 R) 
((|constructor| (NIL "The category of modules over a commutative ring. \\blankline"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-655 -3092) 
((|constructor| (NIL "\\indented{1}{MoebiusTransform(\\spad{F}) is the domain of fractional linear (Moebius)} transformations over \\spad{F}.")) (|eval| (((|OnePointCompletion| |#1|) $ (|OnePointCompletion| |#1|)) "\\spad{eval(m,x)} returns \\spad{(a*x + b)/(c*x + d)} where \\spad{m = moebius(a,b,c,d)} (see \\spadfunFrom{moebius}{MoebiusTransform}).") ((|#1| $ |#1|) "\\spad{eval(m,x)} returns \\spad{(a*x + b)/(c*x + d)} where \\spad{m = moebius(a,b,c,d)} (see \\spadfunFrom{moebius}{MoebiusTransform}).")) (|recip| (($ $) "\\spad{recip(m)} = recip() * \\spad{m}") (($) "\\spad{recip()} returns \\spad{matrix [[0,1],[1,0]]} representing the map \\spad{x -> 1 / x}.")) (|scale| (($ $ |#1|) "\\spad{scale(m,h)} returns \\spad{scale(h) * m} (see \\spadfunFrom{shift}{MoebiusTransform}).") (($ |#1|) "\\spad{scale(k)} returns \\spad{matrix [[k,0],[0,1]]} representing the map \\spad{x -> k * x}.")) (|shift| (($ $ |#1|) "\\spad{shift(m,h)} returns \\spad{shift(h) * m} (see \\spadfunFrom{shift}{MoebiusTransform}).") (($ |#1|) "\\spad{shift(k)} returns \\spad{matrix [[1,k],[0,1]]} representing the map \\spad{x -> x + k}.")) (|moebius| (($ |#1| |#1| |#1| |#1|) "\\spad{moebius(a,b,c,d)} returns \\spad{matrix [[a,b],[c,d]]}."))) 
((-3991 . T)) 
NIL 
(-656 S) 
((|constructor| (NIL "Monad is the class of all multiplicative monads,{} \\spadignore{i.e.} sets with a binary operation.")) (** (($ $ (|PositiveInteger|)) "\\spad{a**n} returns the \\spad{n}\\spad{-}th power of \\spad{a},{} defined by repeated squaring.")) (|leftPower| (($ $ (|PositiveInteger|)) "\\spad{leftPower(a,n)} returns the \\spad{n}\\spad{-}th left power of \\spad{a},{} \\spadignore{i.e.} \\spad{leftPower(a,n) := a * leftPower(a,n-1)} and \\spad{leftPower(a,1) := a}.")) (|rightPower| (($ $ (|PositiveInteger|)) "\\spad{rightPower(a,n)} returns the \\spad{n}\\spad{-}th right power of \\spad{a},{} \\spadignore{i.e.} \\spad{rightPower(a,n) := rightPower(a,n-1) * a} and \\spad{rightPower(a,1) := a}.")) (* (($ $ $) "\\spad{a*b} is the product of \\spad{a} and \\spad{b} in a set with a binary operation."))) 
NIL 
NIL 
(-657) 
((|constructor| (NIL "Monad is the class of all multiplicative monads,{} \\spadignore{i.e.} sets with a binary operation.")) (** (($ $ (|PositiveInteger|)) "\\spad{a**n} returns the \\spad{n}\\spad{-}th power of \\spad{a},{} defined by repeated squaring.")) (|leftPower| (($ $ (|PositiveInteger|)) "\\spad{leftPower(a,n)} returns the \\spad{n}\\spad{-}th left power of \\spad{a},{} \\spadignore{i.e.} \\spad{leftPower(a,n) := a * leftPower(a,n-1)} and \\spad{leftPower(a,1) := a}.")) (|rightPower| (($ $ (|PositiveInteger|)) "\\spad{rightPower(a,n)} returns the \\spad{n}\\spad{-}th right power of \\spad{a},{} \\spadignore{i.e.} \\spad{rightPower(a,n) := rightPower(a,n-1) * a} and \\spad{rightPower(a,1) := a}.")) (* (($ $ $) "\\spad{a*b} is the product of \\spad{a} and \\spad{b} in a set with a binary operation."))) 
NIL 
NIL 
(-658 S) 
((|constructor| (NIL "\\indented{1}{MonadWithUnit is the class of multiplicative monads with unit,{}} \\indented{1}{\\spadignore{i.e.} sets with a binary operation and a unit element.} Axioms \\indented{3}{leftIdentity(\"*\":(\\%,{}\\%)->\\%,{}1)\\space{3}\\tab{30} 1*x=x} \\indented{3}{rightIdentity(\"*\":(\\%,{}\\%)->\\%,{}1)\\space{2}\\tab{30} x*1=x} Common Additional Axioms \\indented{3}{unitsKnown---if \"recip\" says \"failed\",{} that PROVES input wasn't a unit}")) (|rightRecip| (((|Union| $ "failed") $) "\\spad{rightRecip(a)} returns an element,{} which is a right inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|leftRecip| (((|Union| $ "failed") $) "\\spad{leftRecip(a)} returns an element,{} which is a left inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (** (($ $ (|NonNegativeInteger|)) "\\spad{a**n} returns the \\spad{n}\\spad{-}th power of \\spad{a},{} defined by repeated squaring.")) (|leftPower| (($ $ (|NonNegativeInteger|)) "\\spad{leftPower(a,n)} returns the \\spad{n}\\spad{-}th left power of \\spad{a},{} \\spadignore{i.e.} \\spad{leftPower(a,n) := a * leftPower(a,n-1)} and \\spad{leftPower(a,0) := 1}.")) (|rightPower| (($ $ (|NonNegativeInteger|)) "\\spad{rightPower(a,n)} returns the \\spad{n}\\spad{-}th right power of \\spad{a},{} \\spadignore{i.e.} \\spad{rightPower(a,n) := rightPower(a,n-1) * a} and \\spad{rightPower(a,0) := 1}.")) (|one?| (((|Boolean|) $) "\\spad{one?(a)} tests whether \\spad{a} is the unit 1.")) (|One| (($) "1 returns the unit element,{} denoted by 1."))) 
NIL 
NIL 
(-659) 
((|constructor| (NIL "\\indented{1}{MonadWithUnit is the class of multiplicative monads with unit,{}} \\indented{1}{\\spadignore{i.e.} sets with a binary operation and a unit element.} Axioms \\indented{3}{leftIdentity(\"*\":(\\%,{}\\%)->\\%,{}1)\\space{3}\\tab{30} 1*x=x} \\indented{3}{rightIdentity(\"*\":(\\%,{}\\%)->\\%,{}1)\\space{2}\\tab{30} x*1=x} Common Additional Axioms \\indented{3}{unitsKnown---if \"recip\" says \"failed\",{} that PROVES input wasn't a unit}")) (|rightRecip| (((|Union| $ "failed") $) "\\spad{rightRecip(a)} returns an element,{} which is a right inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|leftRecip| (((|Union| $ "failed") $) "\\spad{leftRecip(a)} returns an element,{} which is a left inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn't exist or cannot be determined (see unitsKnown).")) (** (($ $ (|NonNegativeInteger|)) "\\spad{a**n} returns the \\spad{n}\\spad{-}th power of \\spad{a},{} defined by repeated squaring.")) (|leftPower| (($ $ (|NonNegativeInteger|)) "\\spad{leftPower(a,n)} returns the \\spad{n}\\spad{-}th left power of \\spad{a},{} \\spadignore{i.e.} \\spad{leftPower(a,n) := a * leftPower(a,n-1)} and \\spad{leftPower(a,0) := 1}.")) (|rightPower| (($ $ (|NonNegativeInteger|)) "\\spad{rightPower(a,n)} returns the \\spad{n}\\spad{-}th right power of \\spad{a},{} \\spadignore{i.e.} \\spad{rightPower(a,n) := rightPower(a,n-1) * a} and \\spad{rightPower(a,0) := 1}.")) (|one?| (((|Boolean|) $) "\\spad{one?(a)} tests whether \\spad{a} is the unit 1.")) (|One| (($) "1 returns the unit element,{} denoted by 1."))) 
NIL 
NIL 
(-660 S R UP) 
((|constructor| (NIL "A \\spadtype{MonogenicAlgebra} is an algebra of finite rank which can be generated by a single element.")) (|derivationCoordinates| (((|Matrix| |#2|) (|Vector| $) (|Mapping| |#2| |#2|)) "\\spad{derivationCoordinates(b, ')} returns \\spad{M} such that \\spad{b' = M b}.")) (|lift| ((|#3| $) "\\spad{lift(z)} returns a minimal degree univariate polynomial up such that \\spad{z=reduce up}.")) (|convert| (($ |#3|) "\\spad{convert(up)} converts the univariate polynomial \\spad{up} to an algebra element,{} reducing by the \\spad{definingPolynomial()} if necessary.")) (|reduce| (((|Union| $ "failed") (|Fraction| |#3|)) "\\spad{reduce(frac)} converts the fraction \\spad{frac} to an algebra element.") (($ |#3|) "\\spad{reduce(up)} converts the univariate polynomial \\spad{up} to an algebra element,{} reducing by the \\spad{definingPolynomial()} if necessary.")) (|definingPolynomial| ((|#3|) "\\spad{definingPolynomial()} returns the minimal polynomial which \\spad{generator()} satisfies.")) (|generator| (($) "\\spad{generator()} returns the generator for this domain."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-299))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319)))) 
(-661 R UP) 
((|constructor| (NIL "A \\spadtype{MonogenicAlgebra} is an algebra of finite rank which can be generated by a single element.")) (|derivationCoordinates| (((|Matrix| |#1|) (|Vector| $) (|Mapping| |#1| |#1|)) "\\spad{derivationCoordinates(b, ')} returns \\spad{M} such that \\spad{b' = M b}.")) (|lift| ((|#2| $) "\\spad{lift(z)} returns a minimal degree univariate polynomial up such that \\spad{z=reduce up}.")) (|convert| (($ |#2|) "\\spad{convert(up)} converts the univariate polynomial \\spad{up} to an algebra element,{} reducing by the \\spad{definingPolynomial()} if necessary.")) (|reduce| (((|Union| $ "failed") (|Fraction| |#2|)) "\\spad{reduce(frac)} converts the fraction \\spad{frac} to an algebra element.") (($ |#2|) "\\spad{reduce(up)} converts the univariate polynomial \\spad{up} to an algebra element,{} reducing by the \\spad{definingPolynomial()} if necessary.")) (|definingPolynomial| ((|#2|) "\\spad{definingPolynomial()} returns the minimal polynomial which \\spad{generator()} satisfies.")) (|generator| (($) "\\spad{generator()} returns the generator for this domain."))) 
((-3987 |has| |#1| (-312)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-662 S) 
((|constructor| (NIL "The class of multiplicative monoids,{} \\spadignore{i.e.} semigroups with a multiplicative identity element. \\blankline")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(x)} tries to compute the multiplicative inverse for \\spad{x} or \"failed\" if it cannot find the inverse (see unitsKnown).")) (** (($ $ (|NonNegativeInteger|)) "\\spad{x**n} returns the repeated product of \\spad{x} \\spad{n} times,{} \\spadignore{i.e.} exponentiation.")) (|one?| (((|Boolean|) $) "\\spad{one?(x)} tests if \\spad{x} is equal to 1.")) (|sample| (($) "\\spad{sample yields} a value of type \\%")) (|One| (($) "1 is the multiplicative identity."))) 
NIL 
NIL 
(-663) 
((|constructor| (NIL "The class of multiplicative monoids,{} \\spadignore{i.e.} semigroups with a multiplicative identity element. \\blankline")) (|recip| (((|Union| $ "failed") $) "\\spad{recip(x)} tries to compute the multiplicative inverse for \\spad{x} or \"failed\" if it cannot find the inverse (see unitsKnown).")) (** (($ $ (|NonNegativeInteger|)) "\\spad{x**n} returns the repeated product of \\spad{x} \\spad{n} times,{} \\spadignore{i.e.} exponentiation.")) (|one?| (((|Boolean|) $) "\\spad{one?(x)} tests if \\spad{x} is equal to 1.")) (|sample| (($) "\\spad{sample yields} a value of type \\%")) (|One| (($) "1 is the multiplicative identity."))) 
NIL 
NIL 
(-664 T$) 
((|constructor| (NIL "This domain implements monoid operations.")) (|monoidOperation| (($ (|Mapping| |#1| |#1| |#1|) |#1|) "\\spad{monoidOperation(f,e)} constructs a operation from the binary mapping \\spad{f} with neutral value \\spad{e}."))) 
(((|%Rule| |neutrality| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|)) (SEQ (-3056 (|f| |x| (-2412 |f|)) |x|) (|exit| 1 (-3056 (|f| (-2412 |f|) |x|) |x|))))) . T) ((|%Rule| |associativity| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|) (|:| |y| |#1|) (|:| |z| |#1|)) (-3056 (|f| (|f| |x| |y|) |z|) (|f| |x| (|f| |y| |z|))))) . T)) 
NIL 
(-665 T$) 
((|constructor| (NIL "This is the category of all domains that implement monoid operations")) (|neutralValue| ((|#1| $) "\\spad{neutralValue f} returns the neutral value of the monoid operation \\spad{f}."))) 
(((|%Rule| |neutrality| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|)) (SEQ (-3056 (|f| |x| (-2412 |f|)) |x|) (|exit| 1 (-3056 (|f| (-2412 |f|) |x|) |x|))))) . T) ((|%Rule| |associativity| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|) (|:| |y| |#1|) (|:| |z| |#1|)) (-3056 (|f| (|f| |x| |y|) |z|) (|f| |x| (|f| |y| |z|))))) . T)) 
NIL 
(-666 -3092 UP) 
((|constructor| (NIL "Tools for handling monomial extensions.")) (|decompose| (((|Record| (|:| |poly| |#2|) (|:| |normal| (|Fraction| |#2|)) (|:| |special| (|Fraction| |#2|))) (|Fraction| |#2|) (|Mapping| |#2| |#2|)) "\\spad{decompose(f, D)} returns \\spad{[p,n,s]} such that \\spad{f = p+n+s},{} all the squarefree factors of \\spad{denom(n)} are normal \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D},{} \\spad{denom(s)} is special \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D},{} and \\spad{n} and \\spad{s} are proper fractions (no pole at infinity). \\spad{D} is the derivation to use.")) (|normalDenom| ((|#2| (|Fraction| |#2|) (|Mapping| |#2| |#2|)) "\\spad{normalDenom(f, D)} returns the product of all the normal factors of \\spad{denom(f)}. \\spad{D} is the derivation to use.")) (|splitSquarefree| (((|Record| (|:| |normal| (|Factored| |#2|)) (|:| |special| (|Factored| |#2|))) |#2| (|Mapping| |#2| |#2|)) "\\spad{splitSquarefree(p, D)} returns \\spad{[n_1 n_2\\^2 ... n_m\\^m, s_1 s_2\\^2 ... s_q\\^q]} such that \\spad{p = n_1 n_2\\^2 ... n_m\\^m s_1 s_2\\^2 ... s_q\\^q},{} each \\spad{n_i} is normal \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D} and each \\spad{s_i} is special \\spad{w}.\\spad{r}.\\spad{t} \\spad{D}. \\spad{D} is the derivation to use.")) (|split| (((|Record| (|:| |normal| |#2|) (|:| |special| |#2|)) |#2| (|Mapping| |#2| |#2|)) "\\spad{split(p, D)} returns \\spad{[n,s]} such that \\spad{p = n s},{} all the squarefree factors of \\spad{n} are normal \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D},{} and \\spad{s} is special \\spad{w}.\\spad{r}.\\spad{t}. \\spad{D}. \\spad{D} is the derivation to use."))) 
NIL 
NIL 
(-667 |VarSet| E1 E2 R S PR PS) 
((|constructor| (NIL "\\indented{1}{Utilities for MPolyCat} Author: Manuel Bronstein Date Created: 1987 Date Last Updated: 28 March 1990 (PG)")) (|reshape| ((|#7| (|List| |#5|) |#6|) "\\spad{reshape(l,p)} \\undocumented")) (|map| ((|#7| (|Mapping| |#5| |#4|) |#6|) "\\spad{map(f,p)} \\undocumented"))) 
NIL 
NIL 
(-668 |Vars1| |Vars2| E1 E2 R PR1 PR2) 
((|constructor| (NIL "This package \\undocumented")) (|map| ((|#7| (|Mapping| |#2| |#1|) |#6|) "\\spad{map(f,x)} \\undocumented"))) 
NIL 
NIL 
(-669 E OV R PPR) 
((|constructor| (NIL "\\indented{3}{This package exports a factor operation for multivariate polynomials} with coefficients which are polynomials over some ring \\spad{R} over which we can factor. It is used internally by packages such as the solve package which need to work with polynomials in a specific set of variables with coefficients which are polynomials in all the other variables.")) (|factor| (((|Factored| |#4|) |#4|) "\\spad{factor(p)} factors a polynomial with polynomial coefficients.")) (|variable| (((|Union| $ "failed") (|Symbol|)) "\\spad{variable(s)} makes an element from symbol \\spad{s} or fails.")) (|convert| (((|Symbol|) $) "\\spad{convert(x)} converts \\spad{x} to a symbol"))) 
NIL 
NIL 
(-670 |vl| R) 
((|constructor| (NIL "\\indented{2}{This type is the basic representation of sparse recursive multivariate} polynomials whose variables are from a user specified list of symbols. The ordering is specified by the position of the variable in the list. The coefficient ring may be non commutative,{} but the variables are assumed to commute."))) 
(((-3996 "*") |has| |#2| (-146)) (-3987 |has| |#2| (-495)) (-3992 |has| |#2| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-821))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-821)))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-495)))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| (-773 |#1|) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| (-773 |#1|) (QUOTE (-553 (-473))))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-312))) (|HasAttribute| |#2| (QUOTE -3992)) (|HasCategory| |#2| (QUOTE (-391))) (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#2| (QUOTE (-118))))) 
(-671 E OV R PRF) 
((|constructor| (NIL "\\indented{3}{This package exports a factor operation for multivariate polynomials} with coefficients which are rational functions over some ring \\spad{R} over which we can factor. It is used internally by packages such as primary decomposition which need to work with polynomials with rational function coefficients,{} \\spadignore{i.e.} themselves fractions of polynomials.")) (|factor| (((|Factored| |#4|) |#4|) "\\spad{factor(prf)} factors a polynomial with rational function coefficients.")) (|pushuconst| ((|#4| (|Fraction| (|Polynomial| |#3|)) |#2|) "\\spad{pushuconst(r,var)} takes a rational function and raises all occurances of the variable \\spad{var} to the polynomial level.")) (|pushucoef| ((|#4| (|SparseUnivariatePolynomial| (|Polynomial| |#3|)) |#2|) "\\spad{pushucoef(upoly,var)} converts the anonymous univariate polynomial \\spad{upoly} to a polynomial in \\spad{var} over rational functions.")) (|pushup| ((|#4| |#4| |#2|) "\\spad{pushup(prf,var)} raises all occurences of the variable \\spad{var} in the coefficients of the polynomial \\spad{prf} back to the polynomial level.")) (|pushdterm| ((|#4| (|SparseUnivariatePolynomial| |#4|) |#2|) "\\spad{pushdterm(monom,var)} pushes all top level occurences of the variable \\spad{var} into the coefficient domain for the monomial \\spad{monom}.")) (|pushdown| ((|#4| |#4| |#2|) "\\spad{pushdown(prf,var)} pushes all top level occurences of the variable \\spad{var} into the coefficient domain for the polynomial \\spad{prf}.")) (|totalfract| (((|Record| (|:| |sup| (|Polynomial| |#3|)) (|:| |inf| (|Polynomial| |#3|))) |#4|) "\\spad{totalfract(prf)} takes a polynomial whose coefficients are themselves fractions of polynomials and returns a record containing the numerator and denominator resulting from putting \\spad{prf} over a common denominator.")) (|convert| (((|Symbol|) $) "\\spad{convert(x)} converts \\spad{x} to a symbol"))) 
NIL 
NIL 
(-672 E OV R P) 
((|constructor| (NIL "\\indented{1}{MRationalFactorize contains the factor function for multivariate} polynomials over the quotient field of a ring \\spad{R} such that the package MultivariateFactorize can factor multivariate polynomials over \\spad{R}.")) (|factor| (((|Factored| |#4|) |#4|) "\\spad{factor(p)} factors the multivariate polynomial \\spad{p} with coefficients which are fractions of elements of \\spad{R}."))) 
NIL 
NIL 
(-673 R S M) 
((|constructor| (NIL "\\spad{MonoidRingFunctions2} implements functions between two monoid rings defined with the same monoid over different rings.")) (|map| (((|MonoidRing| |#2| |#3|) (|Mapping| |#2| |#1|) (|MonoidRing| |#1| |#3|)) "\\spad{map(f,u)} maps \\spad{f} onto the coefficients \\spad{f} the element \\spad{u} of the monoid ring to create an element of a monoid ring with the same monoid \\spad{b}."))) 
NIL 
NIL 
(-674 R M) 
((|constructor| (NIL "\\spadtype{MonoidRing}(\\spad{R},{}\\spad{M}),{} implements the algebra of all maps from the monoid \\spad{M} to the commutative ring \\spad{R} with finite support. Multiplication of two maps \\spad{f} and \\spad{g} is defined to map an element \\spad{c} of \\spad{M} to the (convolution) sum over {\\em f(a)g(b)} such that {\\em ab = c}. Thus \\spad{M} can be identified with a canonical basis and the maps can also be considered as formal linear combinations of the elements in \\spad{M}. Scalar multiples of a basis element are called monomials. A prominent example is the class of polynomials where the monoid is a direct product of the natural numbers with pointwise addition. When \\spad{M} is \\spadtype{FreeMonoid Symbol},{} one gets polynomials in infinitely many non-commuting variables. Another application area is representation theory of finite groups \\spad{G},{} where modules over \\spadtype{MonoidRing}(\\spad{R},{}\\spad{G}) are studied.")) (|reductum| (($ $) "\\spad{reductum(f)} is \\spad{f} minus its leading monomial.")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(f)} gives the coefficient of \\spad{f},{} whose corresponding monoid element is the greatest among all those with non-zero coefficients.")) (|leadingMonomial| ((|#2| $) "\\spad{leadingMonomial(f)} gives the monomial of \\spad{f} whose corresponding monoid element is the greatest among all those with non-zero coefficients.")) (|numberOfMonomials| (((|NonNegativeInteger|) $) "\\spad{numberOfMonomials(f)} is the number of non-zero coefficients with respect to the canonical basis.")) (|monomials| (((|List| $) $) "\\spad{monomials(f)} gives the list of all monomials whose sum is \\spad{f}.")) (|coefficients| (((|List| |#1|) $) "\\spad{coefficients(f)} lists all non-zero coefficients.")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(f)} tests if \\spad{f} is a single monomial.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(fn,u)} maps function \\spad{fn} onto the coefficients of the non-zero monomials of \\spad{u}.")) (|terms| (((|List| (|Record| (|:| |coef| |#1|) (|:| |monom| |#2|))) $) "\\spad{terms(f)} gives the list of non-zero coefficients combined with their corresponding basis element as records. This is the internal representation.")) (|coerce| (($ (|List| (|Record| (|:| |coef| |#1|) (|:| |monom| |#2|)))) "\\spad{coerce(lt)} converts a list of terms and coefficients to a member of the domain.")) (|coefficient| ((|#1| $ |#2|) "\\spad{coefficient(f,m)} extracts the coefficient of \\spad{m} in \\spad{f} with respect to the canonical basis \\spad{M}.")) (|monomial| (($ |#1| |#2|) "\\spad{monomial(r,m)} creates a scalar multiple of the basis element \\spad{m}."))) 
((-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) (-3991 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-756)))) 
(-675 S) 
((|constructor| (NIL "A multiset is a set with multiplicities.")) (|remove!| (($ (|Mapping| (|Boolean|) |#1|) $ (|Integer|)) "\\spad{remove!(p,ms,number)} removes destructively at most \\spad{number} copies of elements \\spad{x} such that \\spad{p(x)} is \\spadfun{\\spad{true}} if \\spad{number} is positive,{} all of them if \\spad{number} equals zero,{} and all but at most \\spad{-number} if \\spad{number} is negative.") (($ |#1| $ (|Integer|)) "\\spad{remove!(x,ms,number)} removes destructively at most \\spad{number} copies of element \\spad{x} if \\spad{number} is positive,{} all of them if \\spad{number} equals zero,{} and all but at most \\spad{-number} if \\spad{number} is negative.")) (|remove| (($ (|Mapping| (|Boolean|) |#1|) $ (|Integer|)) "\\spad{remove(p,ms,number)} removes at most \\spad{number} copies of elements \\spad{x} such that \\spad{p(x)} is \\spadfun{\\spad{true}} if \\spad{number} is positive,{} all of them if \\spad{number} equals zero,{} and all but at most \\spad{-number} if \\spad{number} is negative.") (($ |#1| $ (|Integer|)) "\\spad{remove(x,ms,number)} removes at most \\spad{number} copies of element \\spad{x} if \\spad{number} is positive,{} all of them if \\spad{number} equals zero,{} and all but at most \\spad{-number} if \\spad{number} is negative.")) (|members| (((|List| |#1|) $) "\\spad{members(ms)} returns a list of the elements of \\spad{ms} {\\em without} their multiplicity. See also \\spadfun{parts}.")) (|multiset| (($ (|List| |#1|)) "\\spad{multiset(ls)} creates a multiset with elements from \\spad{ls}.") (($ |#1|) "\\spad{multiset(s)} creates a multiset with singleton \\spad{s}.") (($) "\\spad{multiset()}\\$\\spad{D} creates an empty multiset of domain \\spad{D}."))) 
((-3994 . T) (-3984 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-676 S) 
((|constructor| (NIL "A multi-set aggregate is a set which keeps track of the multiplicity of its elements."))) 
((-3984 . T) (-3995 . T)) 
NIL 
(-677) 
((|constructor| (NIL "\\spadtype{MoreSystemCommands} implements an interface with the system command facility. These are the commands that are issued from source files or the system interpreter and they start with a close parenthesis,{} \\spadignore{e.g.} \\spadsyscom{what} commands.")) (|systemCommand| (((|Void|) (|String|)) "\\spad{systemCommand(cmd)} takes the string \\spadvar{\\spad{cmd}} and passes it to the runtime environment for execution as a system command. Although various things may be printed,{} no usable value is returned."))) 
NIL 
NIL 
(-678 S) 
((|constructor| (NIL "This package exports tools for merging lists")) (|mergeDifference| (((|List| |#1|) (|List| |#1|) (|List| |#1|)) "\\spad{mergeDifference(l1,l2)} returns a list of elements in \\spad{l1} not present in \\spad{l2}. Assumes lists are ordered and all \\spad{x} in \\spad{l2} are also in \\spad{l1}."))) 
NIL 
NIL 
(-679 |Coef| |Var|) 
((|constructor| (NIL "\\spadtype{MultivariateTaylorSeriesCategory} is the most general multivariate Taylor series category.")) (|integrate| (($ $ |#2|) "\\spad{integrate(f,x)} returns the anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{x} with constant coefficient 1. We may integrate a series when we can divide coefficients by integers.")) (|polynomial| (((|Polynomial| |#1|) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{polynomial(f,k1,k2)} returns a polynomial consisting of the sum of all terms of \\spad{f} of degree \\spad{d} with \\spad{k1 <= d <= k2}.") (((|Polynomial| |#1|) $ (|NonNegativeInteger|)) "\\spad{polynomial(f,k)} returns a polynomial consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.")) (|order| (((|NonNegativeInteger|) $ |#2| (|NonNegativeInteger|)) "\\spad{order(f,x,n)} returns \\spad{min(n,order(f,x))}.") (((|NonNegativeInteger|) $ |#2|) "\\spad{order(f,x)} returns the order of \\spad{f} viewed as a series in \\spad{x} may result in an infinite loop if \\spad{f} has no non-zero terms.")) (|monomial| (($ $ (|List| |#2|) (|List| (|NonNegativeInteger|))) "\\spad{monomial(a,[x1,x2,...,xk],[n1,n2,...,nk])} returns \\spad{a * x1^n1 * ... * xk^nk}.") (($ $ |#2| (|NonNegativeInteger|)) "\\spad{monomial(a,x,n)} returns \\spad{a*x^n}.")) (|extend| (($ $ (|NonNegativeInteger|)) "\\spad{extend(f,n)} causes all terms of \\spad{f} of degree \\spad{<= n} to be computed.")) (|coefficient| (($ $ (|List| |#2|) (|List| (|NonNegativeInteger|))) "\\spad{coefficient(f,[x1,x2,...,xk],[n1,n2,...,nk])} returns the coefficient of \\spad{x1^n1 * ... * xk^nk} in \\spad{f}.") (($ $ |#2| (|NonNegativeInteger|)) "\\spad{coefficient(f,x,n)} returns the coefficient of \\spad{x^n} in \\spad{f}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-680 OV E R P) 
((|constructor| (NIL "\\indented{2}{This is the top level package for doing multivariate factorization} over basic domains like \\spadtype{Integer} or \\spadtype{Fraction Integer}.")) (|factor| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|)) "\\spad{factor(p)} factors the multivariate polynomial \\spad{p} over its coefficient domain where \\spad{p} is represented as a univariate polynomial with multivariate coefficients") (((|Factored| |#4|) |#4|) "\\spad{factor(p)} factors the multivariate polynomial \\spad{p} over its coefficient domain"))) 
NIL 
NIL 
(-681 E OV R P) 
((|constructor| (NIL "Author : \\spad{P}.Gianni This package provides the functions for the computation of the square free decomposition of a multivariate polynomial. It uses the package GenExEuclid for the resolution of the equation \\spad{Af + Bg = h} and its generalization to \\spad{n} polynomials over an integral domain and the package \\spad{MultivariateLifting} for the \"multivariate\" lifting.")) (|normDeriv2| (((|SparseUnivariatePolynomial| |#3|) (|SparseUnivariatePolynomial| |#3|) (|Integer|)) "\\spad{normDeriv2 should} be local")) (|myDegree| (((|List| (|NonNegativeInteger|)) (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|NonNegativeInteger|)) "\\spad{myDegree should} be local")) (|lift| (((|Union| (|List| (|SparseUnivariatePolynomial| |#4|)) "failed") (|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#3|) (|SparseUnivariatePolynomial| |#3|) |#4| (|List| |#2|) (|List| (|NonNegativeInteger|)) (|List| |#3|)) "\\spad{lift should} be local")) (|check| (((|Boolean|) (|List| (|Record| (|:| |factor| (|SparseUnivariatePolynomial| |#3|)) (|:| |exponent| (|Integer|)))) (|List| (|Record| (|:| |factor| (|SparseUnivariatePolynomial| |#3|)) (|:| |exponent| (|Integer|))))) "\\spad{check should} be local")) (|coefChoose| ((|#4| (|Integer|) (|Factored| |#4|)) "\\spad{coefChoose should} be local")) (|intChoose| (((|Record| (|:| |upol| (|SparseUnivariatePolynomial| |#3|)) (|:| |Lval| (|List| |#3|)) (|:| |Lfact| (|List| (|Record| (|:| |factor| (|SparseUnivariatePolynomial| |#3|)) (|:| |exponent| (|Integer|))))) (|:| |ctpol| |#3|)) (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|List| (|List| |#3|))) "\\spad{intChoose should} be local")) (|nsqfree| (((|Record| (|:| |unitPart| |#4|) (|:| |suPart| (|List| (|Record| (|:| |factor| (|SparseUnivariatePolynomial| |#4|)) (|:| |exponent| (|Integer|)))))) (|SparseUnivariatePolynomial| |#4|) (|List| |#2|) (|List| (|List| |#3|))) "\\spad{nsqfree should} be local")) (|consnewpol| (((|Record| (|:| |pol| (|SparseUnivariatePolynomial| |#4|)) (|:| |polval| (|SparseUnivariatePolynomial| |#3|))) (|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#3|) (|Integer|)) "\\spad{consnewpol should} be local")) (|univcase| (((|Factored| |#4|) |#4| |#2|) "\\spad{univcase should} be local")) (|compdegd| (((|Integer|) (|List| (|Record| (|:| |factor| (|SparseUnivariatePolynomial| |#3|)) (|:| |exponent| (|Integer|))))) "\\spad{compdegd should} be local")) (|squareFreePrim| (((|Factored| |#4|) |#4|) "\\spad{squareFreePrim(p)} compute the square free decomposition of a primitive multivariate polynomial \\spad{p}.")) (|squareFree| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|)) "\\spad{squareFree(p)} computes the square free decomposition of a multivariate polynomial \\spad{p} presented as a univariate polynomial with multivariate coefficients.") (((|Factored| |#4|) |#4|) "\\spad{squareFree(p)} computes the square free decomposition of a multivariate polynomial \\spad{p}."))) 
NIL 
NIL 
(-682 S R) 
((|constructor| (NIL "NonAssociativeAlgebra is the category of non associative algebras (modules which are themselves non associative rngs). Axioms \\indented{3}{r*(a*b) = (r*a)*b = a*(r*b)}")) (|plenaryPower| (($ $ (|PositiveInteger|)) "\\spad{plenaryPower(a,n)} is recursively defined to be \\spad{plenaryPower(a,n-1)*plenaryPower(a,n-1)} for \\spad{n>1} and \\spad{a} for \\spad{n=1}."))) 
NIL 
NIL 
(-683 R) 
((|constructor| (NIL "NonAssociativeAlgebra is the category of non associative algebras (modules which are themselves non associative rngs). Axioms \\indented{3}{r*(a*b) = (r*a)*b = a*(r*b)}")) (|plenaryPower| (($ $ (|PositiveInteger|)) "\\spad{plenaryPower(a,n)} is recursively defined to be \\spad{plenaryPower(a,n-1)*plenaryPower(a,n-1)} for \\spad{n>1} and \\spad{a} for \\spad{n=1}."))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-684 S) 
((|constructor| (NIL "NonAssociativeRng is a basic ring-type structure,{} not necessarily commutative or associative,{} and not necessarily with unit. Axioms \\indented{2}{x*(y+z) = x*y + x*z} \\indented{2}{(x+y)*z = x*z + y*z} Common Additional Axioms \\indented{2}{noZeroDivisors\\space{2}ab = 0 => \\spad{a=0} or \\spad{b=0}}")) (|antiCommutator| (($ $ $) "\\spad{antiCommutator(a,b)} returns \\spad{a*b+b*a}.")) (|commutator| (($ $ $) "\\spad{commutator(a,b)} returns \\spad{a*b-b*a}.")) (|associator| (($ $ $ $) "\\spad{associator(a,b,c)} returns \\spad{(a*b)*c-a*(b*c)}."))) 
NIL 
NIL 
(-685) 
((|constructor| (NIL "NonAssociativeRng is a basic ring-type structure,{} not necessarily commutative or associative,{} and not necessarily with unit. Axioms \\indented{2}{x*(y+z) = x*y + x*z} \\indented{2}{(x+y)*z = x*z + y*z} Common Additional Axioms \\indented{2}{noZeroDivisors\\space{2}ab = 0 => \\spad{a=0} or \\spad{b=0}}")) (|antiCommutator| (($ $ $) "\\spad{antiCommutator(a,b)} returns \\spad{a*b+b*a}.")) (|commutator| (($ $ $) "\\spad{commutator(a,b)} returns \\spad{a*b-b*a}.")) (|associator| (($ $ $ $) "\\spad{associator(a,b,c)} returns \\spad{(a*b)*c-a*(b*c)}."))) 
NIL 
NIL 
(-686 S) 
((|constructor| (NIL "A NonAssociativeRing is a non associative rng which has a unit,{} the multiplication is not necessarily commutative or associative.")) (|coerce| (($ (|Integer|)) "\\spad{coerce(n)} coerces the integer \\spad{n} to an element of the ring.")) (|characteristic| (((|NonNegativeInteger|)) "\\spad{characteristic()} returns the characteristic of the ring."))) 
NIL 
NIL 
(-687) 
((|constructor| (NIL "A NonAssociativeRing is a non associative rng which has a unit,{} the multiplication is not necessarily commutative or associative.")) (|coerce| (($ (|Integer|)) "\\spad{coerce(n)} coerces the integer \\spad{n} to an element of the ring.")) (|characteristic| (((|NonNegativeInteger|)) "\\spad{characteristic()} returns the characteristic of the ring."))) 
NIL 
NIL 
(-688 |Par|) 
((|constructor| (NIL "This package computes explicitly eigenvalues and eigenvectors of matrices with entries over the complex rational numbers. The results are expressed either as complex floating numbers or as complex rational numbers depending on the type of the precision parameter.")) (|complexEigenvectors| (((|List| (|Record| (|:| |outval| (|Complex| |#1|)) (|:| |outmult| (|Integer|)) (|:| |outvect| (|List| (|Matrix| (|Complex| |#1|)))))) (|Matrix| (|Complex| (|Fraction| (|Integer|)))) |#1|) "\\spad{complexEigenvectors(m,eps)} returns a list of records each one containing a complex eigenvalue,{} its algebraic multiplicity,{} and a list of associated eigenvectors. All these results are computed to precision \\spad{eps} and are expressed as complex floats or complex rational numbers depending on the type of \\spad{eps} (float or rational).")) (|complexEigenvalues| (((|List| (|Complex| |#1|)) (|Matrix| (|Complex| (|Fraction| (|Integer|)))) |#1|) "\\spad{complexEigenvalues(m,eps)} computes the eigenvalues of the matrix \\spad{m} to precision \\spad{eps}. The eigenvalues are expressed as complex floats or complex rational numbers depending on the type of \\spad{eps} (float or rational).")) (|characteristicPolynomial| (((|Polynomial| (|Complex| (|Fraction| (|Integer|)))) (|Matrix| (|Complex| (|Fraction| (|Integer|)))) (|Symbol|)) "\\spad{characteristicPolynomial(m,x)} returns the characteristic polynomial of the matrix \\spad{m} expressed as polynomial over Complex Rationals with variable \\spad{x}.") (((|Polynomial| (|Complex| (|Fraction| (|Integer|)))) (|Matrix| (|Complex| (|Fraction| (|Integer|))))) "\\spad{characteristicPolynomial(m)} returns the characteristic polynomial of the matrix \\spad{m} expressed as polynomial over complex rationals with a new symbol as variable."))) 
NIL 
NIL 
(-689 -3092) 
((|constructor| (NIL "\\spadtype{NumericContinuedFraction} provides functions \\indented{2}{for converting floating point numbers to continued fractions.}")) (|continuedFraction| (((|ContinuedFraction| (|Integer|)) |#1|) "\\spad{continuedFraction(f)} converts the floating point number \\spad{f} to a reduced continued fraction."))) 
NIL 
NIL 
(-690 P -3092) 
((|constructor| (NIL "This package provides a division and related operations for \\spadtype{MonogenicLinearOperator}\\spad{s} over a \\spadtype{Field}. Since the multiplication is in general non-commutative,{} these operations all have left- and right-hand versions. This package provides the operations based on left-division.")) (|leftLcm| ((|#1| |#1| |#1|) "\\spad{leftLcm(a,b)} computes the value \\spad{m} of lowest degree such that \\spad{m = a*aa = b*bb} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using left-division.")) (|leftGcd| ((|#1| |#1| |#1|) "\\spad{leftGcd(a,b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = aa*g}} \\indented{3}{\\spad{b = bb*g}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using left-division.")) (|leftExactQuotient| (((|Union| |#1| "failed") |#1| |#1|) "\\spad{leftExactQuotient(a,b)} computes the value \\spad{q},{} if it exists,{} \\indented{1}{such that \\spad{a = b*q}.}")) (|leftRemainder| ((|#1| |#1| |#1|) "\\spad{leftRemainder(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned.")) (|leftQuotient| ((|#1| |#1| |#1|) "\\spad{leftQuotient(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned.")) (|leftDivide| (((|Record| (|:| |quotient| |#1|) (|:| |remainder| |#1|)) |#1| |#1|) "\\spad{leftDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``left division''."))) 
NIL 
NIL 
(-691 T$) 
NIL 
NIL 
NIL 
(-692 UP -3092) 
((|constructor| (NIL "In this package \\spad{F} is a framed algebra over the integers (typically \\spad{F = Z[a]} for some algebraic integer a). The package provides functions to compute the integral closure of \\spad{Z} in the quotient quotient field of \\spad{F}.")) (|localIntegralBasis| (((|Record| (|:| |basis| (|Matrix| (|Integer|))) (|:| |basisDen| (|Integer|)) (|:| |basisInv| (|Matrix| (|Integer|)))) (|Integer|)) "\\spad{integralBasis(p)} returns a record \\spad{[basis,basisDen,basisInv]} containing information regarding the local integral closure of \\spad{Z} at the prime \\spad{p} in the quotient field of \\spad{F},{} where \\spad{F} is a framed algebra with \\spad{Z}-module basis \\spad{w1,w2,...,wn}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of \\spad{basis} contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|integralBasis| (((|Record| (|:| |basis| (|Matrix| (|Integer|))) (|:| |basisDen| (|Integer|)) (|:| |basisInv| (|Matrix| (|Integer|))))) "\\spad{integralBasis()} returns a record \\spad{[basis,basisDen,basisInv]} containing information regarding the integral closure of \\spad{Z} in the quotient field of \\spad{F},{} where \\spad{F} is a framed algebra with \\spad{Z}-module basis \\spad{w1,w2,...,wn}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of \\spad{basis} contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|discriminant| (((|Integer|)) "\\spad{discriminant()} returns the discriminant of the integral closure of \\spad{Z} in the quotient field of the framed algebra \\spad{F}."))) 
NIL 
NIL 
(-693 R) 
((|constructor| (NIL "NonLinearSolvePackage is an interface to \\spadtype{SystemSolvePackage} that attempts to retract the coefficients of the equations before solving. The solutions are given in the algebraic closure of \\spad{R} whenever possible.")) (|solve| (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|))) "\\spad{solve(lp)} finds the solution in the algebraic closure of \\spad{R} of the list \\spad{lp} of rational functions with respect to all the symbols appearing in \\spad{lp}.") (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|))) "\\spad{solve(lp,lv)} finds the solutions in the algebraic closure of \\spad{R} of the list \\spad{lp} of rational functions with respect to the list of symbols \\spad{lv}.")) (|solveInField| (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|))) "\\spad{solveInField(lp)} finds the solution of the list \\spad{lp} of rational functions with respect to all the symbols appearing in \\spad{lp}.") (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|))) "\\spad{solveInField(lp,lv)} finds the solutions of the list \\spad{lp} of rational functions with respect to the list of symbols \\spad{lv}."))) 
NIL 
NIL 
(-694) 
((|constructor| (NIL "\\spadtype{NonNegativeInteger} provides functions for non \\indented{2}{negative integers.}")) (|commutative| ((|attribute| "*") "\\spad{commutative(\"*\")} means multiplication is commutative : \\spad{x*y = y*x}.")) (|random| (($ $) "\\spad{random(n)} returns a random integer from 0 to \\spad{n-1}.")) (|shift| (($ $ (|Integer|)) "\\spad{shift(a,i)} shift \\spad{a} by \\spad{i} bits.")) (|exquo| (((|Union| $ "failed") $ $) "\\spad{exquo(a,b)} returns the quotient of \\spad{a} and \\spad{b},{} or \"failed\" if \\spad{b} is zero or \\spad{a} rem \\spad{b} is zero.")) (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{divide(a,b)} returns a record containing both remainder and quotient.")) (|gcd| (($ $ $) "\\spad{gcd(a,b)} computes the greatest common divisor of two non negative integers \\spad{a} and \\spad{b}.")) (|rem| (($ $ $) "\\spad{a rem b} returns the remainder of \\spad{a} and \\spad{b}.")) (|quo| (($ $ $) "\\spad{a quo b} returns the quotient of \\spad{a} and \\spad{b},{} forgetting the remainder."))) 
(((-3996 "*") . T)) 
NIL 
(-695 R -3092) 
((|constructor| (NIL "NonLinearFirstOrderODESolver provides a function for finding closed form first integrals of nonlinear ordinary differential equations of order 1.")) (|solve| (((|Union| |#2| "failed") |#2| |#2| (|BasicOperator|) (|Symbol|)) "\\spad{solve(M(x,y), N(x,y), y, x)} returns \\spad{F(x,y)} such that \\spad{F(x,y) = c} for a constant \\spad{c} is a first integral of the equation \\spad{M(x,y) dx + N(x,y) dy = 0},{} or \"failed\" if no first-integral can be found."))) 
NIL 
NIL 
(-696) 
((|constructor| (NIL "\\spadtype{None} implements a type with no objects. It is mainly used in technical situations where such a thing is needed (\\spadignore{e.g.} the interpreter and some of the internal \\spadtype{Expression} code)."))) 
NIL 
NIL 
(-697 S) 
((|constructor| (NIL "\\spadtype{NoneFunctions1} implements functions on \\spadtype{None}. It particular it includes a particulary dangerous coercion from any other type to \\spadtype{None}.")) (|coerce| (((|None|) |#1|) "\\spad{coerce(x)} changes \\spad{x} into an object of type \\spadtype{None}."))) 
NIL 
NIL 
(-698 R |PolR| E |PolE|) 
((|constructor| (NIL "This package implements the norm of a polynomial with coefficients in a monogenic algebra (using resultants)")) (|norm| ((|#2| |#4|) "\\spad{norm q} returns the norm of \\spad{q},{} \\spadignore{i.e.} the product of all the conjugates of \\spad{q}."))) 
NIL 
NIL 
(-699 R E V P TS) 
((|constructor| (NIL "A package for computing normalized assocites of univariate polynomials with coefficients in a tower of simple extensions of a field.\\newline References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991} \\indented{1}{[2] \\spad{M}. MORENO MAZA and \\spad{R}. RIOBOO \"Computations of gcd over} \\indented{5}{algebraic towers of simple extensions\" In proceedings of \\spad{AAECC11}} \\indented{5}{Paris,{} 1995.} \\indented{1}{[3] \\spad{M}. MORENO MAZA \"Calculs de pgcd au-dessus des tours} \\indented{5}{d'extensions simples et resolution des systemes d'equations} \\indented{5}{algebriques\" These,{} Universite \\spad{P}.etM. Curie,{} Paris,{} 1997.}")) (|normInvertible?| (((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| |#5|))) |#4| |#5|) "\\axiom{normInvertible?(\\spad{p},{}ts)} is an internal subroutine,{} exported only for developement.")) (|outputArgs| (((|Void|) (|String|) (|String|) |#4| |#5|) "\\axiom{outputArgs(\\spad{s1},{}\\spad{s2},{}\\spad{p},{}ts)} is an internal subroutine,{} exported only for developement.")) (|normalize| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| |#5|))) |#4| |#5|) "\\axiom{normalize(\\spad{p},{}ts)} normalizes \\axiom{\\spad{p}} \\spad{w}.\\spad{r}.\\spad{t} \\spad{ts}.")) (|normalizedAssociate| ((|#4| |#4| |#5|) "\\axiom{normalizedAssociate(\\spad{p},{}ts)} returns a normalized polynomial \\axiom{\\spad{n}} \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts} such that \\axiom{\\spad{n}} and \\axiom{\\spad{p}} are associates \\spad{w}.\\spad{r}.\\spad{t} \\spad{ts} and assuming that \\axiom{\\spad{p}} is invertible \\spad{w}.\\spad{r}.\\spad{t} \\spad{ts}.")) (|recip| (((|Record| (|:| |num| |#4|) (|:| |den| |#4|)) |#4| |#5|) "\\axiom{recip(\\spad{p},{}ts)} returns the inverse of \\axiom{\\spad{p}} \\spad{w}.\\spad{r}.\\spad{t} \\spad{ts} assuming that \\axiom{\\spad{p}} is invertible \\spad{w}.\\spad{r}.\\spad{t} \\spad{ts}."))) 
NIL 
NIL 
(-700 -3092 |ExtF| |SUEx| |ExtP| |n|) 
((|constructor| (NIL "This package \\undocumented")) (|Frobenius| ((|#4| |#4|) "\\spad{Frobenius(x)} \\undocumented")) (|retractIfCan| (((|Union| (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|)) "failed") |#4|) "\\spad{retractIfCan(x)} \\undocumented")) (|normFactors| (((|List| |#4|) |#4|) "\\spad{normFactors(x)} \\undocumented"))) 
NIL 
NIL 
(-701 BP E OV R P) 
((|constructor| (NIL "Package for the determination of the coefficients in the lifting process. Used by \\spadtype{MultivariateLifting}. This package will work for every euclidean domain \\spad{R} which has property \\spad{F},{} \\spadignore{i.e.} there exists a factor operation in \\spad{R[x]}.")) (|listexp| (((|List| (|NonNegativeInteger|)) |#1|) "\\spad{listexp }\\undocumented")) (|npcoef| (((|Record| (|:| |deter| (|List| (|SparseUnivariatePolynomial| |#5|))) (|:| |dterm| (|List| (|List| (|Record| (|:| |expt| (|NonNegativeInteger|)) (|:| |pcoef| |#5|))))) (|:| |nfacts| (|List| |#1|)) (|:| |nlead| (|List| |#5|))) (|SparseUnivariatePolynomial| |#5|) (|List| |#1|) (|List| |#5|)) "\\spad{npcoef }\\undocumented"))) 
NIL 
NIL 
(-702 |Par|) 
((|constructor| (NIL "This package computes explicitly eigenvalues and eigenvectors of matrices with entries over the Rational Numbers. The results are expressed as floating numbers or as rational numbers depending on the type of the parameter Par.")) (|realEigenvectors| (((|List| (|Record| (|:| |outval| |#1|) (|:| |outmult| (|Integer|)) (|:| |outvect| (|List| (|Matrix| |#1|))))) (|Matrix| (|Fraction| (|Integer|))) |#1|) "\\spad{realEigenvectors(m,eps)} returns a list of records each one containing a real eigenvalue,{} its algebraic multiplicity,{} and a list of associated eigenvectors. All these results are computed to precision \\spad{eps} as floats or rational numbers depending on the type of \\spad{eps} .")) (|realEigenvalues| (((|List| |#1|) (|Matrix| (|Fraction| (|Integer|))) |#1|) "\\spad{realEigenvalues(m,eps)} computes the eigenvalues of the matrix \\spad{m} to precision \\spad{eps}. The eigenvalues are expressed as floats or rational numbers depending on the type of \\spad{eps} (float or rational).")) (|characteristicPolynomial| (((|Polynomial| (|Fraction| (|Integer|))) (|Matrix| (|Fraction| (|Integer|))) (|Symbol|)) "\\spad{characteristicPolynomial(m,x)} returns the characteristic polynomial of the matrix \\spad{m} expressed as polynomial over RN with variable \\spad{x}. Fraction \\spad{P} RN.") (((|Polynomial| (|Fraction| (|Integer|))) (|Matrix| (|Fraction| (|Integer|)))) "\\spad{characteristicPolynomial(m)} returns the characteristic polynomial of the matrix \\spad{m} expressed as polynomial over RN with a new symbol as variable."))) 
NIL 
NIL 
(-703 R |VarSet|) 
((|constructor| (NIL "A post-facto extension for \\axiomType{SMP} in order to speed up operations related to pseudo-division and gcd. This domain is based on the \\axiomType{NSUP} constructor which is itself a post-facto extension of the \\axiomType{SUP} constructor."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| |#2| (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-553 (-1089))))) (|HasCategory| |#2| (QUOTE (-553 (-1089)))) (|HasCategory| |#1| (QUOTE (-312))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-553 (-1089))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-484)))) (|HasCategory| |#2| (QUOTE (-553 (-1089)))) (-2560 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-553 (-1089)))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-553 (-1089)))) (-2560 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) (-2560 (|HasCategory| |#1| (QUOTE (-38 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-484)))) (|HasCategory| |#2| (QUOTE (-553 (-1089)))) (-2560 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) (-2560 (|HasCategory| |#1| (QUOTE (-483))))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-553 (-1089)))) (-2560 (|HasCategory| |#1| (QUOTE (-904 (-484))))))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-704 R) 
((|constructor| (NIL "A post-facto extension for \\axiomType{SUP} in order to speed up operations related to pseudo-division and gcd for both \\axiomType{SUP} and,{} consequently,{} \\axiomType{NSMP}.")) (|halfExtendedResultant2| (((|Record| (|:| |resultant| |#1|) (|:| |coef2| $)) $ $) "\\axiom{\\spad{halfExtendedResultant2}(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}ca]} such that \\axiom{extendedResultant(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}ca,{} cb]}")) (|halfExtendedResultant1| (((|Record| (|:| |resultant| |#1|) (|:| |coef1| $)) $ $) "\\axiom{\\spad{halfExtendedResultant1}(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}ca]} such that \\axiom{extendedResultant(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}ca,{} cb]}")) (|extendedResultant| (((|Record| (|:| |resultant| |#1|) (|:| |coef1| $) (|:| |coef2| $)) $ $) "\\axiom{extendedResultant(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}ca,{}cb]} such that \\axiom{\\spad{r}} is the resultant of \\axiom{a} and \\axiom{\\spad{b}} and \\axiom{\\spad{r} = ca * a + cb * \\spad{b}}")) (|halfExtendedSubResultantGcd2| (((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $) "\\axiom{\\spad{halfExtendedSubResultantGcd2}(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}cb]} such that \\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{} cb]}")) (|halfExtendedSubResultantGcd1| (((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $) "\\axiom{\\spad{halfExtendedSubResultantGcd1}(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca]} such that \\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{} cb]}")) (|extendedSubResultantGcd| (((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $) "\\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{} cb]} such that \\axiom{\\spad{g}} is a gcd of \\axiom{a} and \\axiom{\\spad{b}} in \\axiom{R^(\\spad{-1}) \\spad{P}} and \\axiom{\\spad{g} = ca * a + cb * \\spad{b}}")) (|lastSubResultant| (($ $ $) "\\axiom{lastSubResultant(a,{}\\spad{b})} returns \\axiom{resultant(a,{}\\spad{b})} if \\axiom{a} and \\axiom{\\spad{b}} has no non-trivial gcd in \\axiom{R^(\\spad{-1}) \\spad{P}} otherwise the non-zero sub-resultant with smallest index.")) (|subResultantsChain| (((|List| $) $ $) "\\axiom{subResultantsChain(a,{}\\spad{b})} returns the list of the non-zero sub-resultants of \\axiom{a} and \\axiom{\\spad{b}} sorted by increasing degree.")) (|lazyPseudoQuotient| (($ $ $) "\\axiom{lazyPseudoQuotient(a,{}\\spad{b})} returns \\axiom{\\spad{q}} if \\axiom{lazyPseudoDivide(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]}")) (|lazyPseudoDivide| (((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\axiom{lazyPseudoDivide(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]} such that \\axiom{c^n * a = q*b +r} and \\axiom{lazyResidueClass(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}\\spad{c},{}\\spad{n}]} where \\axiom{\\spad{n} + \\spad{g} = max(0,{} degree(\\spad{b}) - degree(a) + 1)}.")) (|lazyPseudoRemainder| (($ $ $) "\\axiom{lazyPseudoRemainder(a,{}\\spad{b})} returns \\axiom{\\spad{r}} if \\axiom{lazyResidueClass(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}\\spad{c},{}\\spad{n}]}. This lazy pseudo-remainder is computed by means of the \\axiomOpFrom{fmecg}{NewSparseUnivariatePolynomial} operation.")) (|lazyResidueClass| (((|Record| (|:| |polnum| $) (|:| |polden| |#1|) (|:| |power| (|NonNegativeInteger|))) $ $) "\\axiom{lazyResidueClass(a,{}\\spad{b})} returns \\axiom{[\\spad{r},{}\\spad{c},{}\\spad{n}]} such that \\axiom{\\spad{r}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} and \\axiom{\\spad{b}} divides \\axiom{c^n * a - \\spad{r}} where \\axiom{\\spad{c}} is \\axiom{leadingCoefficient(\\spad{b})} and \\axiom{\\spad{n}} is as small as possible with the previous properties.")) (|monicModulo| (($ $ $) "\\axiom{monicModulo(a,{}\\spad{b})} returns \\axiom{\\spad{r}} such that \\axiom{\\spad{r}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} and \\axiom{\\spad{b}} divides \\axiom{a -r} where \\axiom{\\spad{b}} is monic.")) (|fmecg| (($ $ (|NonNegativeInteger|) |#1| $) "\\axiom{fmecg(\\spad{p1},{}\\spad{e},{}\\spad{r},{}\\spad{p2})} returns \\axiom{\\spad{p1} - \\spad{r} * X**e * \\spad{p2}} where \\axiom{\\spad{X}} is \\axiom{monomial(1,{}1)}"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3990 |has| |#1| (-312)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| (-994) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| (-994) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-994) (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-1065))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-190))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-705 R S) 
((|constructor| (NIL "This package lifts a mapping from coefficient rings \\spad{R} to \\spad{S} to a mapping from sparse univariate polynomial over \\spad{R} to a sparse univariate polynomial over \\spad{S}. Note that the mapping is assumed to send zero to zero,{} since it will only be applied to the non-zero coefficients of the polynomial.")) (|map| (((|NewSparseUnivariatePolynomial| |#2|) (|Mapping| |#2| |#1|) (|NewSparseUnivariatePolynomial| |#1|)) "\\axiom{map(func,{} poly)} creates a new polynomial by applying func to every non-zero coefficient of the polynomial poly."))) 
NIL 
NIL 
(-706 R) 
((|constructor| (NIL "This package provides polynomials as functions on a ring.")) (|eulerE| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{eulerE(n,r)} \\undocumented")) (|bernoulliB| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{bernoulliB(n,r)} \\undocumented")) (|cyclotomic| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{cyclotomic(n,r)} \\undocumented"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) 
(-707 R E V P) 
((|constructor| (NIL "The category of normalized triangular sets. A triangular set \\spad{ts} is said normalized if for every algebraic variable \\spad{v} of \\spad{ts} the polynomial \\spad{select(ts,v)} is normalized \\spad{w}.\\spad{r}.\\spad{t}. every polynomial in \\spad{collectUnder(ts,v)}. A polynomial \\spad{p} is said normalized \\spad{w}.\\spad{r}.\\spad{t}. a non-constant polynomial \\spad{q} if \\spad{p} is constant or \\spad{degree(p,mdeg(q)) = 0} and \\spad{init(p)} is normalized \\spad{w}.\\spad{r}.\\spad{t}. \\spad{q}. One of the important features of normalized triangular sets is that they are regular sets.\\newline References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991} \\indented{1}{[2] \\spad{P}. AUBRY,{} \\spad{D}. LAZARD and \\spad{M}. MORENO MAZA \"On the Theories} \\indented{5}{of Triangular Sets\" Journal of Symbol. Comp. (to appear)} \\indented{1}{[3] \\spad{M}. MORENO MAZA and \\spad{R}. RIOBOO \"Computations of gcd over} \\indented{5}{algebraic towers of simple extensions\" In proceedings of \\spad{AAECC11}} \\indented{5}{Paris,{} 1995.} \\indented{1}{[4] \\spad{M}. MORENO MAZA \"Calculs de pgcd au-dessus des tours} \\indented{5}{d'extensions simples et resolution des systemes d'equations} \\indented{5}{algebriques\" These,{} Universite \\spad{P}.etM. Curie,{} Paris,{} 1997.}"))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-708 S) 
((|constructor| (NIL "Numeric provides real and complex numerical evaluation functions for various symbolic types.")) (|numericIfCan| (((|Union| (|Float|) "failed") (|Expression| |#1|) (|PositiveInteger|)) "\\spad{numericIfCan(x, n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Float|) "failed") (|Expression| |#1|)) "\\spad{numericIfCan(x)} returns a real approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Float|) "failed") (|Fraction| (|Polynomial| |#1|)) (|PositiveInteger|)) "\\spad{numericIfCan(x,n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Float|) "failed") (|Fraction| (|Polynomial| |#1|))) "\\spad{numericIfCan(x)} returns a real approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Float|) "failed") (|Polynomial| |#1|) (|PositiveInteger|)) "\\spad{numericIfCan(x,n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Float|) "failed") (|Polynomial| |#1|)) "\\spad{numericIfCan(x)} returns a real approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.")) (|complexNumericIfCan| (((|Union| (|Complex| (|Float|)) "failed") (|Expression| (|Complex| |#1|)) (|PositiveInteger|)) "\\spad{complexNumericIfCan(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Expression| (|Complex| |#1|))) "\\spad{complexNumericIfCan(x)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Expression| |#1|) (|PositiveInteger|)) "\\spad{complexNumericIfCan(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Expression| |#1|)) "\\spad{complexNumericIfCan(x)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Fraction| (|Polynomial| (|Complex| |#1|))) (|PositiveInteger|)) "\\spad{complexNumericIfCan(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Fraction| (|Polynomial| (|Complex| |#1|)))) "\\spad{complexNumericIfCan(x)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Fraction| (|Polynomial| |#1|)) (|PositiveInteger|)) "\\spad{complexNumericIfCan(x, n)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Fraction| (|Polynomial| |#1|))) "\\spad{complexNumericIfCan(x)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Polynomial| |#1|) (|PositiveInteger|)) "\\spad{complexNumericIfCan(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Polynomial| |#1|)) "\\spad{complexNumericIfCan(x)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Polynomial| (|Complex| |#1|)) (|PositiveInteger|)) "\\spad{complexNumericIfCan(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places,{} or \"failed\" if \\axiom{\\spad{x}} is not a constant.") (((|Union| (|Complex| (|Float|)) "failed") (|Polynomial| (|Complex| |#1|))) "\\spad{complexNumericIfCan(x)} returns a complex approximation of \\spad{x},{} or \"failed\" if \\axiom{\\spad{x}} is not constant.")) (|complexNumeric| (((|Complex| (|Float|)) (|Expression| (|Complex| |#1|)) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) (|Expression| (|Complex| |#1|))) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) (|Expression| |#1|) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) (|Expression| |#1|)) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) (|Fraction| (|Polynomial| (|Complex| |#1|))) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) (|Fraction| (|Polynomial| (|Complex| |#1|)))) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) (|Fraction| (|Polynomial| |#1|)) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x}") (((|Complex| (|Float|)) (|Fraction| (|Polynomial| |#1|))) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) (|Polynomial| |#1|) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) (|Polynomial| |#1|)) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) (|Polynomial| (|Complex| |#1|)) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) (|Polynomial| (|Complex| |#1|))) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) (|Complex| |#1|) (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) (|Complex| |#1|)) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.") (((|Complex| (|Float|)) |#1| (|PositiveInteger|)) "\\spad{complexNumeric(x, n)} returns a complex approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Complex| (|Float|)) |#1|) "\\spad{complexNumeric(x)} returns a complex approximation of \\spad{x}.")) (|numeric| (((|Float|) (|Expression| |#1|) (|PositiveInteger|)) "\\spad{numeric(x, n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Float|) (|Expression| |#1|)) "\\spad{numeric(x)} returns a real approximation of \\spad{x}.") (((|Float|) (|Fraction| (|Polynomial| |#1|)) (|PositiveInteger|)) "\\spad{numeric(x,n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Float|) (|Fraction| (|Polynomial| |#1|))) "\\spad{numeric(x)} returns a real approximation of \\spad{x}.") (((|Float|) (|Polynomial| |#1|) (|PositiveInteger|)) "\\spad{numeric(x,n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Float|) (|Polynomial| |#1|)) "\\spad{numeric(x)} returns a real approximation of \\spad{x}.") (((|Float|) |#1| (|PositiveInteger|)) "\\spad{numeric(x, n)} returns a real approximation of \\spad{x} up to \\spad{n} decimal places.") (((|Float|) |#1|) "\\spad{numeric(x)} returns a real approximation of \\spad{x}."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-756)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-961))) (|HasCategory| |#1| (QUOTE (-146)))) 
(-709) 
((|constructor| (NIL "NumberFormats provides function to format and read arabic and roman numbers,{} to convert numbers to strings and to read floating-point numbers.")) (|ScanFloatIgnoreSpacesIfCan| (((|Union| (|Float|) "failed") (|String|)) "\\spad{ScanFloatIgnoreSpacesIfCan(s)} tries to form a floating point number from the string \\spad{s} ignoring any spaces.")) (|ScanFloatIgnoreSpaces| (((|Float|) (|String|)) "\\spad{ScanFloatIgnoreSpaces(s)} forms a floating point number from the string \\spad{s} ignoring any spaces. Error is generated if the string is not recognised as a floating point number.")) (|ScanRoman| (((|PositiveInteger|) (|String|)) "\\spad{ScanRoman(s)} forms an integer from a Roman numeral string \\spad{s}.")) (|FormatRoman| (((|String|) (|PositiveInteger|)) "\\spad{FormatRoman(n)} forms a Roman numeral string from an integer \\spad{n}.")) (|ScanArabic| (((|PositiveInteger|) (|String|)) "\\spad{ScanArabic(s)} forms an integer from an Arabic numeral string \\spad{s}.")) (|FormatArabic| (((|String|) (|PositiveInteger|)) "\\spad{FormatArabic(n)} forms an Arabic numeral string from an integer \\spad{n}."))) 
NIL 
NIL 
(-710) 
((|constructor| (NIL "This package is a suite of functions for the numerical integration of an ordinary differential equation of \\spad{n} variables: \\blankline \\indented{8}{\\center{dy/dx = \\spad{f}(\\spad{y},{}\\spad{x})\\space{5}\\spad{y} is an \\spad{n}-vector}} \\blankline \\par All the routines are based on a 4-th order Runge-Kutta kernel. These routines generally have as arguments: \\spad{n},{} the number of dependent variables; \\spad{x1},{} the initial point; \\spad{h},{} the step size; \\spad{y},{} a vector of initial conditions of length \\spad{n} which upon exit contains the solution at \\spad{x1 + h}; \\spad{derivs},{} a function which computes the right hand side of the ordinary differential equation: \\spad{derivs(dydx,y,x)} computes \\spad{dydx},{} a vector which contains the derivative information. \\blankline \\par In order of increasing complexity:\\begin{items} \\blankline \\item \\spad{rk4(y,n,x1,h,derivs)} advances the solution vector to \\spad{x1 + h} and return the values in \\spad{y}. \\blankline \\item \\spad{rk4(y,n,x1,h,derivs,t1,t2,t3,t4)} is the same as \\spad{rk4(y,n,x1,h,derivs)} except that you must provide 4 scratch arrays \\spad{t1}-\\spad{t4} of size \\spad{n}. \\blankline \\item Starting with \\spad{y} at \\spad{x1},{} \\spad{rk4f(y,n,x1,x2,ns,derivs)} uses \\spad{ns} fixed steps of a 4-th order Runge-Kutta integrator to advance the solution vector to \\spad{x2} and return the values in \\spad{y}. Argument \\spad{x2},{} is the final point,{} and \\spad{ns},{} the number of steps to take. \\blankline \\item \\spad{rk4qc(y,n,x1,step,eps,yscal,derivs)} takes a 5-th order Runge-Kutta step with monitoring of local truncation to ensure accuracy and adjust stepsize. The function takes two half steps and one full step and scales the difference in solutions at the final point. If the error is within \\spad{eps},{} the step is taken and the result is returned. If the error is not within \\spad{eps},{} the stepsize if decreased and the procedure is tried again until the desired accuracy is reached. Upon input,{} an trial step size must be given and upon return,{} an estimate of the next step size to use is returned as well as the step size which produced the desired accuracy. The scaled error is computed as \\center{\\spad{error = MAX(ABS((y2steps(i) - y1step(i))/yscal(i)))}} and this is compared against \\spad{eps}. If this is greater than \\spad{eps},{} the step size is reduced accordingly to \\center{\\spad{hnew = 0.9 * hdid * (error/eps)**(-1/4)}} If the error criterion is satisfied,{} then we check if the step size was too fine and return a more efficient one. If \\spad{error > \\spad{eps} * (6.0E-04)} then the next step size should be \\center{\\spad{hnext = 0.9 * hdid * (error/\\spad{eps})**(\\spad{-1/5})}} Otherwise \\spad{hnext = 4.0 * hdid} is returned. A more detailed discussion of this and related topics can be found in the book \"Numerical Recipies\" by \\spad{W}.Press,{} \\spad{B}.\\spad{P}. Flannery,{} \\spad{S}.A. Teukolsky,{} \\spad{W}.\\spad{T}. Vetterling published by Cambridge University Press. Argument \\spad{step} is a record of 3 floating point numbers \\spad{(try , did , next)},{} \\spad{eps} is the required accuracy,{} \\spad{yscal} is the scaling vector for the difference in solutions. On input,{} \\spad{step.try} should be the guess at a step size to achieve the accuracy. On output,{} \\spad{step.did} contains the step size which achieved the accuracy and \\spad{step.next} is the next step size to use. \\blankline \\item \\spad{rk4qc(y,n,x1,step,eps,yscal,derivs,t1,t2,t3,t4,t5,t6,t7)} is the same as \\spad{rk4qc(y,n,x1,step,eps,yscal,derivs)} except that the user must provide the 7 scratch arrays \\spad{t1-t7} of size \\spad{n}. \\blankline \\item \\spad{rk4a(y,n,x1,x2,eps,h,ns,derivs)} is a driver program which uses \\spad{rk4qc} to integrate \\spad{n} ordinary differential equations starting at \\spad{x1} to \\spad{x2},{} keeping the local truncation error to within \\spad{eps} by changing the local step size. The scaling vector is defined as \\center{\\spad{yscal(i) = abs(y(i)) + abs(h*dydx(i)) + tiny}} where \\spad{y(i)} is the solution at location \\spad{x},{} \\spad{dydx} is the ordinary differential equation's right hand side,{} \\spad{h} is the current step size and \\spad{tiny} is 10 times the smallest positive number representable. The user must supply an estimate for a trial step size and the maximum number of calls to \\spad{rk4qc} to use. Argument \\spad{x2} is the final point,{} \\spad{eps} is local truncation,{} \\spad{ns} is the maximum number of call to \\spad{rk4qc} to use. \\end{items}")) (|rk4f| (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Integer|) (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))) "\\spad{rk4f(y,n,x1,x2,ns,derivs)} uses a 4-th order Runge-Kutta method to numerically integrate the ordinary differential equation {\\em dy/dx = f(y,x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector. Starting with \\spad{y} at \\spad{x1},{} this function uses \\spad{ns} fixed steps of a 4-th order Runge-Kutta integrator to advance the solution vector to \\spad{x2} and return the values in \\spad{y}. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.")) (|rk4qc| (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Record| (|:| |tryValue| (|Float|)) (|:| |did| (|Float|)) (|:| |next| (|Float|))) (|Float|) (|Vector| (|Float|)) (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))) "\\spad{rk4qc(y,n,x1,step,eps,yscal,derivs,t1,t2,t3,t4,t5,t6,t7)} is a subfunction for the numerical integration of an ordinary differential equation {\\em dy/dx = f(y,x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector using a 4-th order Runge-Kutta method. This function takes a 5-th order Runge-Kutta \\spad{step} with monitoring of local truncation to ensure accuracy and adjust stepsize. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.") (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Record| (|:| |tryValue| (|Float|)) (|:| |did| (|Float|)) (|:| |next| (|Float|))) (|Float|) (|Vector| (|Float|)) (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))) "\\spad{rk4qc(y,n,x1,step,eps,yscal,derivs)} is a subfunction for the numerical integration of an ordinary differential equation {\\em dy/dx = f(y,x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector using a 4-th order Runge-Kutta method. This function takes a 5-th order Runge-Kutta \\spad{step} with monitoring of local truncation to ensure accuracy and adjust stepsize. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.")) (|rk4a| (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))) "\\spad{rk4a(y,n,x1,x2,eps,h,ns,derivs)} is a driver function for the numerical integration of an ordinary differential equation {\\em dy/dx = f(y,x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector using a 4-th order Runge-Kutta method. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.")) (|rk4| (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))) "\\spad{rk4(y,n,x1,h,derivs,t1,t2,t3,t4)} is the same as \\spad{rk4(y,n,x1,h,derivs)} except that you must provide 4 scratch arrays \\spad{t1}-\\spad{t4} of size \\spad{n}. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.") (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))) "\\spad{rk4(y,n,x1,h,derivs)} uses a 4-th order Runge-Kutta method to numerically integrate the ordinary differential equation {\\em dy/dx = f(y,x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector. Argument \\spad{y} is a vector of initial conditions of length \\spad{n} which upon exit contains the solution at \\spad{x1 + h},{} \\spad{n} is the number of dependent variables,{} \\spad{x1} is the initial point,{} \\spad{h} is the step size,{} and \\spad{derivs} is a function which computes the right hand side of the ordinary differential equation. For details,{} see \\spadtype{NumericalOrdinaryDifferentialEquations}."))) 
NIL 
NIL 
(-711) 
((|constructor| (NIL "This suite of routines performs numerical quadrature using algorithms derived from the basic trapezoidal rule. Because the error term of this rule contains only even powers of the step size (for open and closed versions),{} fast convergence can be obtained if the integrand is sufficiently smooth. \\blankline Each routine returns a Record of type TrapAns,{} which contains\\indent{3} \\newline value (\\spadtype{Float}):\\tab{20} estimate of the integral \\newline error (\\spadtype{Float}):\\tab{20} estimate of the error in the computation \\newline totalpts (\\spadtype{Integer}):\\tab{20} total number of function evaluations \\newline success (\\spadtype{Boolean}):\\tab{20} if the integral was computed within the user specified error criterion \\indent{0}\\indent{0} To produce this estimate,{} each routine generates an internal sequence of sub-estimates,{} denoted by {\\em S(i)},{} depending on the routine,{} to which the various convergence criteria are applied. The user must supply a relative accuracy,{} \\spad{eps_r},{} and an absolute accuracy,{} \\spad{eps_a}. Convergence is obtained when either \\center{\\spad{ABS(S(i) - S(i-1)) < eps_r * ABS(S(i-1))}} \\center{or \\spad{ABS(S(i) - S(i-1)) < eps_a}} are \\spad{true} statements. \\blankline The routines come in three families and three flavors: \\newline\\tab{3} closed:\\tab{20}romberg,{}\\tab{30}simpson,{}\\tab{42}trapezoidal \\newline\\tab{3} open: \\tab{20}rombergo,{}\\tab{30}simpsono,{}\\tab{42}trapezoidalo \\newline\\tab{3} adaptive closed:\\tab{20}aromberg,{}\\tab{30}asimpson,{}\\tab{42}atrapezoidal \\par The {\\em S(i)} for the trapezoidal family is the value of the integral using an equally spaced absicca trapezoidal rule for that level of refinement. \\par The {\\em S(i)} for the simpson family is the value of the integral using an equally spaced absicca simpson rule for that level of refinement. \\par The {\\em S(i)} for the romberg family is the estimate of the integral using an equally spaced absicca romberg method. For the \\spad{i}\\spad{-}th level,{} this is an appropriate combination of all the previous trapezodial estimates so that the error term starts with the \\spad{2*(i+1)} power only. \\par The three families come in a closed version,{} where the formulas include the endpoints,{} an open version where the formulas do not include the endpoints and an adaptive version,{} where the user is required to input the number of subintervals over which the appropriate closed family integrator will apply with the usual convergence parmeters for each subinterval. This is useful where a large number of points are needed only in a small fraction of the entire domain. \\par Each routine takes as arguments: \\newline \\spad{f}\\tab{10} integrand \\newline a\\tab{10} starting point \\newline \\spad{b}\\tab{10} ending point \\newline \\spad{eps_r}\\tab{10} relative error \\newline \\spad{eps_a}\\tab{10} absolute error \\newline \\spad{nmin} \\tab{10} refinement level when to start checking for convergence (> 1) \\newline \\spad{nmax} \\tab{10} maximum level of refinement \\par The adaptive routines take as an additional parameter \\newline \\spad{nint}\\tab{10} the number of independent intervals to apply a closed \\indented{1}{family integrator of the same name.} \\par Notes: \\newline Closed family level \\spad{i} uses \\spad{1 + 2**i} points. \\newline Open family level \\spad{i} uses \\spad{1 + 3**i} points.")) (|trapezoidalo| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|)) "\\spad{trapezoidalo(fn,a,b,epsrel,epsabs,nmin,nmax)} uses the trapezoidal method to numerically integrate function \\spad{fn} over the open interval from \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|simpsono| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|)) "\\spad{simpsono(fn,a,b,epsrel,epsabs,nmin,nmax)} uses the simpson method to numerically integrate function \\spad{fn} over the open interval from \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|rombergo| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|)) "\\spad{rombergo(fn,a,b,epsrel,epsabs,nmin,nmax)} uses the romberg method to numerically integrate function \\spad{fn} over the open interval from \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|trapezoidal| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|)) "\\spad{trapezoidal(fn,a,b,epsrel,epsabs,nmin,nmax)} uses the trapezoidal method to numerically integrate function \\spadvar{\\spad{fn}} over the closed interval \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|simpson| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|)) "\\spad{simpson(fn,a,b,epsrel,epsabs,nmin,nmax)} uses the simpson method to numerically integrate function \\spad{fn} over the closed interval \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|romberg| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|)) "\\spad{romberg(fn,a,b,epsrel,epsabs,nmin,nmax)} uses the romberg method to numerically integrate function \\spadvar{\\spad{fn}} over the closed interval \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax}. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|atrapezoidal| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{atrapezoidal(fn,a,b,epsrel,epsabs,nmin,nmax,nint)} uses the adaptive trapezoidal method to numerically integrate function \\spad{fn} over the closed interval from \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax},{} and where \\spad{nint} is the number of independent intervals to apply the integrator. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|asimpson| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{asimpson(fn,a,b,epsrel,epsabs,nmin,nmax,nint)} uses the adaptive simpson method to numerically integrate function \\spad{fn} over the closed interval from \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax},{} and where \\spad{nint} is the number of independent intervals to apply the integrator. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details.")) (|aromberg| (((|Record| (|:| |value| (|Float|)) (|:| |error| (|Float|)) (|:| |totalpts| (|Integer|)) (|:| |success| (|Boolean|))) (|Mapping| (|Float|) (|Float|)) (|Float|) (|Float|) (|Float|) (|Float|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{aromberg(fn,a,b,epsrel,epsabs,nmin,nmax,nint)} uses the adaptive romberg method to numerically integrate function \\spad{fn} over the closed interval from \\spad{a} to \\spad{b},{} with relative accuracy \\spad{epsrel} and absolute accuracy \\spad{epsabs},{} with the refinement levels for convergence checking vary from \\spad{nmin} to \\spad{nmax},{} and where \\spad{nint} is the number of independent intervals to apply the integrator. The value returned is a record containing the value of the integral,{} the estimate of the error in the computation,{} the total number of function evaluations,{} and either a boolean value which is \\spad{true} if the integral was computed within the user specified error criterion. See \\spadtype{NumericalQuadrature} for details."))) 
NIL 
NIL 
(-712 |Curve|) 
((|constructor| (NIL "\\indented{1}{Author: Clifton \\spad{J}. Williamson} Date Created: Bastille Day 1989 Date Last Updated: 5 June 1990 Keywords: Examples: Package for constructing tubes around 3-dimensional parametric curves.")) (|tube| (((|TubePlot| |#1|) |#1| (|DoubleFloat|) (|Integer|)) "\\spad{tube(c,r,n)} creates a tube of radius \\spad{r} around the curve \\spad{c}."))) 
NIL 
NIL 
(-713 S) 
((|constructor| (NIL "Ordered sets which are also abelian groups,{} such that the addition preserves the ordering.")) (|abs| (($ $) "\\spad{abs(x)} returns the absolute value of \\spad{x}.")) (|sign| (((|Integer|) $) "\\spad{sign(x)} is \\spad{1} if \\spad{x} is positive,{} \\spad{-1} if \\spad{x} is negative,{} and \\spad{0} otherwise.")) (|negative?| (((|Boolean|) $) "\\spad{negative?(x)} holds when \\spad{x} is less than \\spad{0}."))) 
NIL 
NIL 
(-714) 
((|constructor| (NIL "Ordered sets which are also abelian groups,{} such that the addition preserves the ordering.")) (|abs| (($ $) "\\spad{abs(x)} returns the absolute value of \\spad{x}.")) (|sign| (((|Integer|) $) "\\spad{sign(x)} is \\spad{1} if \\spad{x} is positive,{} \\spad{-1} if \\spad{x} is negative,{} and \\spad{0} otherwise.")) (|negative?| (((|Boolean|) $) "\\spad{negative?(x)} holds when \\spad{x} is less than \\spad{0}."))) 
NIL 
NIL 
(-715 S) 
((|constructor| (NIL "Ordered sets which are also abelian monoids,{} such that the addition preserves the ordering.")) (|positive?| (((|Boolean|) $) "\\spad{positive?(x)} holds when \\spad{x} is greater than \\spad{0}."))) 
NIL 
NIL 
(-716) 
((|constructor| (NIL "Ordered sets which are also abelian monoids,{} such that the addition preserves the ordering.")) (|positive?| (((|Boolean|) $) "\\spad{positive?(x)} holds when \\spad{x} is greater than \\spad{0}."))) 
NIL 
NIL 
(-717) 
((|constructor| (NIL "This domain is an OrderedAbelianMonoid with a \\spadfun{sup} operation added. The purpose of the \\spadfun{sup} operator in this domain is to act as a supremum with respect to the partial order imposed by \\spadop{-},{} rather than with respect to the total \\spad{>} order (since that is \"max\"). \\blankline")) (|sup| (($ $ $) "\\spad{sup(x,y)} returns the least element from which both \\spad{x} and \\spad{y} can be subtracted."))) 
NIL 
NIL 
(-718) 
((|constructor| (NIL "Ordered sets which are also abelian semigroups,{} such that the addition preserves the ordering. \\indented{2}{\\spad{ x < y => x+z < y+z}}"))) 
NIL 
NIL 
(-719 S R) 
((|constructor| (NIL "OctonionCategory gives the categorial frame for the octonions,{} and eight-dimensional non-associative algebra,{} doubling the the quaternions in the same way as doubling the Complex numbers to get the quaternions.")) (|inv| (($ $) "\\spad{inv(o)} returns the inverse of \\spad{o} if it exists.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(o)} returns the real part if all seven imaginary parts are 0,{} and \"failed\" otherwise.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(o)} returns the real part if all seven imaginary parts are 0. Error: if \\spad{o} is not rational.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(o)} tests if \\spad{o} is rational,{} \\spadignore{i.e.} that all seven imaginary parts are 0.")) (|abs| ((|#2| $) "\\spad{abs(o)} computes the absolute value of an octonion,{} equal to the square root of the \\spadfunFrom{norm}{Octonion}.")) (|octon| (($ |#2| |#2| |#2| |#2| |#2| |#2| |#2| |#2|) "\\spad{octon(re,ri,rj,rk,rE,rI,rJ,rK)} constructs an octonion from scalars.")) (|norm| ((|#2| $) "\\spad{norm(o)} returns the norm of an octonion,{} equal to the sum of the squares of its coefficients.")) (|imagK| ((|#2| $) "\\spad{imagK(o)} extracts the imaginary \\spad{K} part of octonion \\spad{o}.")) (|imagJ| ((|#2| $) "\\spad{imagJ(o)} extracts the imaginary \\spad{J} part of octonion \\spad{o}.")) (|imagI| ((|#2| $) "\\spad{imagI(o)} extracts the imaginary \\spad{I} part of octonion \\spad{o}.")) (|imagE| ((|#2| $) "\\spad{imagE(o)} extracts the imaginary \\spad{E} part of octonion \\spad{o}.")) (|imagk| ((|#2| $) "\\spad{imagk(o)} extracts the \\spad{k} part of octonion \\spad{o}.")) (|imagj| ((|#2| $) "\\spad{imagj(o)} extracts the \\spad{j} part of octonion \\spad{o}.")) (|imagi| ((|#2| $) "\\spad{imagi(o)} extracts the \\spad{i} part of octonion \\spad{o}.")) (|real| ((|#2| $) "\\spad{real(o)} extracts real part of octonion \\spad{o}.")) (|conjugate| (($ $) "\\spad{conjugate(o)} negates the imaginary parts \\spad{i},{}\\spad{j},{}\\spad{k},{}\\spad{E},{}\\spad{I},{}\\spad{J},{}\\spad{K} of octonian \\spad{o}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-483))) (|HasCategory| |#2| (QUOTE (-973))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-319)))) 
(-720 R) 
((|constructor| (NIL "OctonionCategory gives the categorial frame for the octonions,{} and eight-dimensional non-associative algebra,{} doubling the the quaternions in the same way as doubling the Complex numbers to get the quaternions.")) (|inv| (($ $) "\\spad{inv(o)} returns the inverse of \\spad{o} if it exists.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(o)} returns the real part if all seven imaginary parts are 0,{} and \"failed\" otherwise.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(o)} returns the real part if all seven imaginary parts are 0. Error: if \\spad{o} is not rational.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(o)} tests if \\spad{o} is rational,{} \\spadignore{i.e.} that all seven imaginary parts are 0.")) (|abs| ((|#1| $) "\\spad{abs(o)} computes the absolute value of an octonion,{} equal to the square root of the \\spadfunFrom{norm}{Octonion}.")) (|octon| (($ |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1|) "\\spad{octon(re,ri,rj,rk,rE,rI,rJ,rK)} constructs an octonion from scalars.")) (|norm| ((|#1| $) "\\spad{norm(o)} returns the norm of an octonion,{} equal to the sum of the squares of its coefficients.")) (|imagK| ((|#1| $) "\\spad{imagK(o)} extracts the imaginary \\spad{K} part of octonion \\spad{o}.")) (|imagJ| ((|#1| $) "\\spad{imagJ(o)} extracts the imaginary \\spad{J} part of octonion \\spad{o}.")) (|imagI| ((|#1| $) "\\spad{imagI(o)} extracts the imaginary \\spad{I} part of octonion \\spad{o}.")) (|imagE| ((|#1| $) "\\spad{imagE(o)} extracts the imaginary \\spad{E} part of octonion \\spad{o}.")) (|imagk| ((|#1| $) "\\spad{imagk(o)} extracts the \\spad{k} part of octonion \\spad{o}.")) (|imagj| ((|#1| $) "\\spad{imagj(o)} extracts the \\spad{j} part of octonion \\spad{o}.")) (|imagi| ((|#1| $) "\\spad{imagi(o)} extracts the \\spad{i} part of octonion \\spad{o}.")) (|real| ((|#1| $) "\\spad{real(o)} extracts real part of octonion \\spad{o}.")) (|conjugate| (($ $) "\\spad{conjugate(o)} negates the imaginary parts \\spad{i},{}\\spad{j},{}\\spad{k},{}\\spad{E},{}\\spad{I},{}\\spad{J},{}\\spad{K} of octonian \\spad{o}."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-721) 
((|constructor| (NIL "Ordered sets which are also abelian cancellation monoids,{} such that the addition preserves the ordering."))) 
NIL 
NIL 
(-722 R) 
((|constructor| (NIL "Octonion implements octonions (Cayley-Dixon algebra) over a commutative ring,{} an eight-dimensional non-associative algebra,{} doubling the quaternions in the same way as doubling the complex numbers to get the quaternions the main constructor function is {\\em octon} which takes 8 arguments: the real part,{} the \\spad{i} imaginary part,{} the \\spad{j} imaginary part,{} the \\spad{k} imaginary part,{} (as with quaternions) and in addition the imaginary parts \\spad{E},{} \\spad{I},{} \\spad{J},{} \\spad{K}.")) (|octon| (($ (|Quaternion| |#1|) (|Quaternion| |#1|)) "\\spad{octon(qe,qE)} constructs an octonion from two quaternions using the relation {\\em O = Q + QE}."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -241) (|devaluate| |#1|) (|devaluate| |#1|))) (OR (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| (-909 |#1|) (QUOTE (-950 (-349 (-484)))))) (OR (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| (-909 |#1|) (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-973))) (|HasCategory| |#1| (QUOTE (-483))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-909 |#1|) (QUOTE (-950 (-349 (-484))))) (|HasCategory| (-909 |#1|) (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484))))) 
(-723 OR R OS S) 
((|constructor| (NIL "\\spad{OctonionCategoryFunctions2} implements functions between two octonion domains defined over different rings. The function map is used to coerce between octonion types.")) (|map| ((|#3| (|Mapping| |#4| |#2|) |#1|) "\\spad{map(f,u)} maps \\spad{f} onto the component parts of the octonion \\spad{u}."))) 
NIL 
NIL 
(-724 R -3092 L) 
((|constructor| (NIL "Solution of linear ordinary differential equations,{} constant coefficient case.")) (|constDsolve| (((|Record| (|:| |particular| |#2|) (|:| |basis| (|List| |#2|))) |#3| |#2| (|Symbol|)) "\\spad{constDsolve(op, g, x)} returns \\spad{[f, [y1,...,ym]]} where \\spad{f} is a particular solution of the equation \\spad{op y = g},{} and the \\spad{yi}'s form a basis for the solutions of \\spad{op y = 0}."))) 
NIL 
NIL 
(-725 R -3092) 
((|constructor| (NIL "\\spad{ElementaryFunctionODESolver} provides the top-level functions for finding closed form solutions of ordinary differential equations and initial value problems.")) (|solve| (((|Union| |#2| #1="failed") |#2| (|BasicOperator|) (|Equation| |#2|) (|List| |#2|)) "\\spad{solve(eq, y, x = a, [y0,...,ym])} returns either the solution of the initial value problem \\spad{eq, y(a) = y0, y'(a) = y1,...} or \"failed\" if the solution cannot be found; error if the equation is not one linear ordinary or of the form \\spad{dy/dx = f(x,y)}.") (((|Union| |#2| #1#) (|Equation| |#2|) (|BasicOperator|) (|Equation| |#2|) (|List| |#2|)) "\\spad{solve(eq, y, x = a, [y0,...,ym])} returns either the solution of the initial value problem \\spad{eq, y(a) = y0, y'(a) = y1,...} or \"failed\" if the solution cannot be found; error if the equation is not one linear ordinary or of the form \\spad{dy/dx = f(x,y)}.") (((|Union| (|Record| (|:| |particular| |#2|) (|:| |basis| (|List| |#2|))) |#2| #2="failed") |#2| (|BasicOperator|) (|Symbol|)) "\\spad{solve(eq, y, x)} returns either a solution of the ordinary differential equation \\spad{eq} or \"failed\" if no non-trivial solution can be found; If the equation is linear ordinary,{} a solution is of the form \\spad{[h, [b1,...,bm]]} where \\spad{h} is a particular solution and and \\spad{[b1,...bm]} are linearly independent solutions of the associated homogenuous equation \\spad{f(x,y) = 0}; A full basis for the solutions of the homogenuous equation is not always returned,{} only the solutions which were found; If the equation is of the form {dy/dx = \\spad{f}(\\spad{x},{}\\spad{y})},{} a solution is of the form \\spad{h(x,y)} where \\spad{h(x,y) = c} is a first integral of the equation for any constant \\spad{c}.") (((|Union| (|Record| (|:| |particular| |#2|) (|:| |basis| (|List| |#2|))) |#2| #2#) (|Equation| |#2|) (|BasicOperator|) (|Symbol|)) "\\spad{solve(eq, y, x)} returns either a solution of the ordinary differential equation \\spad{eq} or \"failed\" if no non-trivial solution can be found; If the equation is linear ordinary,{} a solution is of the form \\spad{[h, [b1,...,bm]]} where \\spad{h} is a particular solution and \\spad{[b1,...bm]} are linearly independent solutions of the associated homogenuous equation \\spad{f(x,y) = 0}; A full basis for the solutions of the homogenuous equation is not always returned,{} only the solutions which were found; If the equation is of the form {dy/dx = \\spad{f}(\\spad{x},{}\\spad{y})},{} a solution is of the form \\spad{h(x,y)} where \\spad{h(x,y) = c} is a first integral of the equation for any constant \\spad{c}; error if the equation is not one of those 2 forms.") (((|Union| (|Record| (|:| |particular| (|Vector| |#2|)) (|:| |basis| (|List| (|Vector| |#2|)))) "failed") (|List| |#2|) (|List| (|BasicOperator|)) (|Symbol|)) "\\spad{solve([eq_1,...,eq_n], [y_1,...,y_n], x)} returns either \"failed\" or,{} if the equations form a fist order linear system,{} a solution of the form \\spad{[y_p, [b_1,...,b_n]]} where \\spad{h_p} is a particular solution and \\spad{[b_1,...b_m]} are linearly independent solutions of the associated homogenuous system. error if the equations do not form a first order linear system") (((|Union| (|Record| (|:| |particular| (|Vector| |#2|)) (|:| |basis| (|List| (|Vector| |#2|)))) "failed") (|List| (|Equation| |#2|)) (|List| (|BasicOperator|)) (|Symbol|)) "\\spad{solve([eq_1,...,eq_n], [y_1,...,y_n], x)} returns either \"failed\" or,{} if the equations form a fist order linear system,{} a solution of the form \\spad{[y_p, [b_1,...,b_n]]} where \\spad{h_p} is a particular solution and \\spad{[b_1,...b_m]} are linearly independent solutions of the associated homogenuous system. error if the equations do not form a first order linear system") (((|Union| (|List| (|Vector| |#2|)) "failed") (|Matrix| |#2|) (|Symbol|)) "\\spad{solve(m, x)} returns a basis for the solutions of \\spad{D y = m y}. \\spad{x} is the dependent variable.") (((|Union| (|Record| (|:| |particular| (|Vector| |#2|)) (|:| |basis| (|List| (|Vector| |#2|)))) "failed") (|Matrix| |#2|) (|Vector| |#2|) (|Symbol|)) "\\spad{solve(m, v, x)} returns \\spad{[v_p, [v_1,...,v_m]]} such that the solutions of the system \\spad{D y = m y + v} are \\spad{v_p + c_1 v_1 + ... + c_m v_m} where the \\spad{c_i's} are constants,{} and the \\spad{v_i's} form a basis for the solutions of \\spad{D y = m y}. \\spad{x} is the dependent variable."))) 
NIL 
NIL 
(-726 R -3092) 
((|constructor| (NIL "\\spadtype{ODEIntegration} provides an interface to the integrator. This package is intended for use by the differential equations solver but not at top-level.")) (|diff| (((|Mapping| |#2| |#2|) (|Symbol|)) "\\spad{diff(x)} returns the derivation with respect to \\spad{x}.")) (|expint| ((|#2| |#2| (|Symbol|)) "\\spad{expint(f, x)} returns e^{the integral of \\spad{f} with respect to \\spad{x}}.")) (|int| ((|#2| |#2| (|Symbol|)) "\\spad{int(f, x)} returns the integral of \\spad{f} with respect to \\spad{x}."))) 
NIL 
NIL 
(-727 -3092 UP UPUP R) 
((|constructor| (NIL "In-field solution of an linear ordinary differential equation,{} pure algebraic case.")) (|algDsolve| (((|Record| (|:| |particular| (|Union| |#4| "failed")) (|:| |basis| (|List| |#4|))) (|LinearOrdinaryDifferentialOperator1| |#4|) |#4|) "\\spad{algDsolve(op, g)} returns \\spad{[\"failed\", []]} if the equation \\spad{op y = g} has no solution in \\spad{R}. Otherwise,{} it returns \\spad{[f, [y1,...,ym]]} where \\spad{f} is a particular rational solution and the \\spad{y_i's} form a basis for the solutions in \\spad{R} of the homogeneous equation."))) 
NIL 
NIL 
(-728 -3092 UP L LQ) 
((|constructor| (NIL "\\spad{PrimitiveRatDE} provides functions for in-field solutions of linear \\indented{1}{ordinary differential equations,{} in the transcendental case.} \\indented{1}{The derivation to use is given by the parameter \\spad{L}.}")) (|splitDenominator| (((|Record| (|:| |eq| |#3|) (|:| |rh| (|List| (|Fraction| |#2|)))) |#4| (|List| (|Fraction| |#2|))) "\\spad{splitDenominator(op, [g1,...,gm])} returns \\spad{op0, [h1,...,hm]} such that the equations \\spad{op y = c1 g1 + ... + cm gm} and \\spad{op0 y = c1 h1 + ... + cm hm} have the same solutions.")) (|indicialEquation| ((|#2| |#4| |#1|) "\\spad{indicialEquation(op, a)} returns the indicial equation of \\spad{op} at \\spad{a}.") ((|#2| |#3| |#1|) "\\spad{indicialEquation(op, a)} returns the indicial equation of \\spad{op} at \\spad{a}.")) (|indicialEquations| (((|List| (|Record| (|:| |center| |#2|) (|:| |equation| |#2|))) |#4| |#2|) "\\spad{indicialEquations(op, p)} returns \\spad{[[d1,e1],...,[dq,eq]]} where the \\spad{d_i}'s are the affine singularities of \\spad{op} above the roots of \\spad{p},{} and the \\spad{e_i}'s are the indicial equations at each \\spad{d_i}.") (((|List| (|Record| (|:| |center| |#2|) (|:| |equation| |#2|))) |#4|) "\\spad{indicialEquations op} returns \\spad{[[d1,e1],...,[dq,eq]]} where the \\spad{d_i}'s are the affine singularities of \\spad{op},{} and the \\spad{e_i}'s are the indicial equations at each \\spad{d_i}.") (((|List| (|Record| (|:| |center| |#2|) (|:| |equation| |#2|))) |#3| |#2|) "\\spad{indicialEquations(op, p)} returns \\spad{[[d1,e1],...,[dq,eq]]} where the \\spad{d_i}'s are the affine singularities of \\spad{op} above the roots of \\spad{p},{} and the \\spad{e_i}'s are the indicial equations at each \\spad{d_i}.") (((|List| (|Record| (|:| |center| |#2|) (|:| |equation| |#2|))) |#3|) "\\spad{indicialEquations op} returns \\spad{[[d1,e1],...,[dq,eq]]} where the \\spad{d_i}'s are the affine singularities of \\spad{op},{} and the \\spad{e_i}'s are the indicial equations at each \\spad{d_i}.")) (|denomLODE| ((|#2| |#3| (|List| (|Fraction| |#2|))) "\\spad{denomLODE(op, [g1,...,gm])} returns a polynomial \\spad{d} such that any rational solution of \\spad{op y = c1 g1 + ... + cm gm} is of the form \\spad{p/d} for some polynomial \\spad{p}.") (((|Union| |#2| "failed") |#3| (|Fraction| |#2|)) "\\spad{denomLODE(op, g)} returns a polynomial \\spad{d} such that any rational solution of \\spad{op y = g} is of the form \\spad{p/d} for some polynomial \\spad{p},{} and \"failed\",{} if the equation has no rational solution."))) 
NIL 
NIL 
(-729 -3092 UP L LQ) 
((|constructor| (NIL "In-field solution of Riccati equations,{} primitive case.")) (|changeVar| ((|#3| |#3| (|Fraction| |#2|)) "\\spad{changeVar(+/[ai D^i], a)} returns the operator \\spad{+/[ai (D+a)^i]}.") ((|#3| |#3| |#2|) "\\spad{changeVar(+/[ai D^i], a)} returns the operator \\spad{+/[ai (D+a)^i]}.")) (|singRicDE| (((|List| (|Record| (|:| |frac| (|Fraction| |#2|)) (|:| |eq| |#3|))) |#3| (|Mapping| (|List| |#2|) |#2| (|SparseUnivariatePolynomial| |#2|)) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{singRicDE(op, zeros, ezfactor)} returns \\spad{[[f1, L1], [f2, L2], ... , [fk, Lk]]} such that the singular part of any rational solution of the associated Riccati equation of \\spad{op y=0} must be one of the \\spad{fi}'s (up to the constant coefficient),{} in which case the equation for \\spad{z=y e^{-int p}} is \\spad{Li z=0}. \\spad{zeros(C(x),H(x,y))} returns all the \\spad{P_i(x)}'s such that \\spad{H(x,P_i(x)) = 0 modulo C(x)}. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.")) (|polyRicDE| (((|List| (|Record| (|:| |poly| |#2|) (|:| |eq| |#3|))) |#3| (|Mapping| (|List| |#1|) |#2|)) "\\spad{polyRicDE(op, zeros)} returns \\spad{[[p1, L1], [p2, L2], ... , [pk, Lk]]} such that the polynomial part of any rational solution of the associated Riccati equation of \\spad{op y=0} must be one of the \\spad{pi}'s (up to the constant coefficient),{} in which case the equation for \\spad{z=y e^{-int p}} is \\spad{Li z =0}. \\spad{zeros} is a zero finder in \\spad{UP}.")) (|constantCoefficientRicDE| (((|List| (|Record| (|:| |constant| |#1|) (|:| |eq| |#3|))) |#3| (|Mapping| (|List| |#1|) |#2|)) "\\spad{constantCoefficientRicDE(op, ric)} returns \\spad{[[a1, L1], [a2, L2], ... , [ak, Lk]]} such that any rational solution with no polynomial part of the associated Riccati equation of \\spad{op y = 0} must be one of the \\spad{ai}'s in which case the equation for \\spad{z = y e^{-int ai}} is \\spad{Li z = 0}. \\spad{ric} is a Riccati equation solver over \\spad{F},{} whose input is the associated linear equation.")) (|leadingCoefficientRicDE| (((|List| (|Record| (|:| |deg| (|NonNegativeInteger|)) (|:| |eq| |#2|))) |#3|) "\\spad{leadingCoefficientRicDE(op)} returns \\spad{[[m1, p1], [m2, p2], ... , [mk, pk]]} such that the polynomial part of any rational solution of the associated Riccati equation of \\spad{op y = 0} must have degree mj for some \\spad{j},{} and its leading coefficient is then a zero of pj. In addition,{}\\spad{m1>m2> ... >mk}.")) (|denomRicDE| ((|#2| |#3|) "\\spad{denomRicDE(op)} returns a polynomial \\spad{d} such that any rational solution of the associated Riccati equation of \\spad{op y = 0} is of the form \\spad{p/d + q'/q + r} for some polynomials \\spad{p} and \\spad{q} and a reduced \\spad{r}. Also,{} \\spad{deg(p) < deg(d)} and {gcd(\\spad{d},{}\\spad{q}) = 1}."))) 
NIL 
NIL 
(-730 -3092 UP) 
((|constructor| (NIL "\\spad{RationalLODE} provides functions for in-field solutions of linear \\indented{1}{ordinary differential equations,{} in the rational case.}")) (|indicialEquationAtInfinity| ((|#2| (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|))) "\\spad{indicialEquationAtInfinity op} returns the indicial equation of \\spad{op} at infinity.") ((|#2| (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) "\\spad{indicialEquationAtInfinity op} returns the indicial equation of \\spad{op} at infinity.")) (|ratDsolve| (((|Record| (|:| |basis| (|List| (|Fraction| |#2|))) (|:| |mat| (|Matrix| |#1|))) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|List| (|Fraction| |#2|))) "\\spad{ratDsolve(op, [g1,...,gm])} returns \\spad{[[h1,...,hq], M]} such that any rational solution of \\spad{op y = c1 g1 + ... + cm gm} is of the form \\spad{d1 h1 + ... + dq hq} where \\spad{M [d1,...,dq,c1,...,cm] = 0}.") (((|Record| (|:| |particular| (|Union| (|Fraction| |#2|) #1="failed")) (|:| |basis| (|List| (|Fraction| |#2|)))) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|Fraction| |#2|)) "\\spad{ratDsolve(op, g)} returns \\spad{[\"failed\", []]} if the equation \\spad{op y = g} has no rational solution. Otherwise,{} it returns \\spad{[f, [y1,...,ym]]} where \\spad{f} is a particular rational solution and the \\spad{yi}'s form a basis for the rational solutions of the homogeneous equation.") (((|Record| (|:| |basis| (|List| (|Fraction| |#2|))) (|:| |mat| (|Matrix| |#1|))) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|)) (|List| (|Fraction| |#2|))) "\\spad{ratDsolve(op, [g1,...,gm])} returns \\spad{[[h1,...,hq], M]} such that any rational solution of \\spad{op y = c1 g1 + ... + cm gm} is of the form \\spad{d1 h1 + ... + dq hq} where \\spad{M [d1,...,dq,c1,...,cm] = 0}.") (((|Record| (|:| |particular| (|Union| (|Fraction| |#2|) #1#)) (|:| |basis| (|List| (|Fraction| |#2|)))) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|)) (|Fraction| |#2|)) "\\spad{ratDsolve(op, g)} returns \\spad{[\"failed\", []]} if the equation \\spad{op y = g} has no rational solution. Otherwise,{} it returns \\spad{[f, [y1,...,ym]]} where \\spad{f} is a particular rational solution and the \\spad{yi}'s form a basis for the rational solutions of the homogeneous equation."))) 
NIL 
NIL 
(-731 -3092 L UP A LO) 
((|constructor| (NIL "Elimination of an algebraic from the coefficentss of a linear ordinary differential equation.")) (|reduceLODE| (((|Record| (|:| |mat| (|Matrix| |#2|)) (|:| |vec| (|Vector| |#1|))) |#5| |#4|) "\\spad{reduceLODE(op, g)} returns \\spad{[m, v]} such that any solution in \\spad{A} of \\spad{op z = g} is of the form \\spad{z = (z_1,...,z_m) . (b_1,...,b_m)} where the \\spad{b_i's} are the basis of \\spad{A} over \\spad{F} returned by \\spadfun{basis}() from \\spad{A},{} and the \\spad{z_i's} satisfy the differential system \\spad{M.z = v}."))) 
NIL 
NIL 
(-732 -3092 UP) 
((|constructor| (NIL "In-field solution of Riccati equations,{} rational case.")) (|polyRicDE| (((|List| (|Record| (|:| |poly| |#2|) (|:| |eq| (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|))))) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|Mapping| (|List| |#1|) |#2|)) "\\spad{polyRicDE(op, zeros)} returns \\spad{[[p1, L1], [p2, L2], ... , [pk,Lk]]} such that the polynomial part of any rational solution of the associated Riccati equation of \\spad{op y = 0} must be one of the \\spad{pi}'s (up to the constant coefficient),{} in which case the equation for \\spad{z = y e^{-int p}} is \\spad{Li z = 0}. \\spad{zeros} is a zero finder in \\spad{UP}.")) (|singRicDE| (((|List| (|Record| (|:| |frac| (|Fraction| |#2|)) (|:| |eq| (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|))))) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{singRicDE(op, ezfactor)} returns \\spad{[[f1,L1], [f2,L2],..., [fk,Lk]]} such that the singular ++ part of any rational solution of the associated Riccati equation of \\spad{op y = 0} must be one of the \\spad{fi}'s (up to the constant coefficient),{} in which case the equation for \\spad{z = y e^{-int ai}} is \\spad{Li z = 0}. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.")) (|ricDsolve| (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{ricDsolve(op, ezfactor)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|))) "\\spad{ricDsolve(op)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|)) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{ricDsolve(op, ezfactor)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|))) "\\spad{ricDsolve(op)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|Mapping| (|List| |#1|) |#2|) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{ricDsolve(op, zeros, ezfactor)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}. \\spad{zeros} is a zero finder in \\spad{UP}. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator2| |#2| (|Fraction| |#2|)) (|Mapping| (|List| |#1|) |#2|)) "\\spad{ricDsolve(op, zeros)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}. \\spad{zeros} is a zero finder in \\spad{UP}.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|)) (|Mapping| (|List| |#1|) |#2|) (|Mapping| (|Factored| |#2|) |#2|)) "\\spad{ricDsolve(op, zeros, ezfactor)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}. \\spad{zeros} is a zero finder in \\spad{UP}. Argument \\spad{ezfactor} is a factorisation in \\spad{UP},{} not necessarily into irreducibles.") (((|List| (|Fraction| |#2|)) (|LinearOrdinaryDifferentialOperator1| (|Fraction| |#2|)) (|Mapping| (|List| |#1|) |#2|)) "\\spad{ricDsolve(op, zeros)} returns the rational solutions of the associated Riccati equation of \\spad{op y = 0}. \\spad{zeros} is a zero finder in \\spad{UP}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-27)))) 
(-733 -3092 LO) 
((|constructor| (NIL "SystemODESolver provides tools for triangulating and solving some systems of linear ordinary differential equations.")) (|solveInField| (((|Record| (|:| |particular| (|Union| (|Vector| |#1|) "failed")) (|:| |basis| (|List| (|Vector| |#1|)))) (|Matrix| |#2|) (|Vector| |#1|) (|Mapping| (|Record| (|:| |particular| (|Union| |#1| "failed")) (|:| |basis| (|List| |#1|))) |#2| |#1|)) "\\spad{solveInField(m, v, solve)} returns \\spad{[[v_1,...,v_m], v_p]} such that the solutions in \\spad{F} of the system \\spad{m x = v} are \\spad{v_p + c_1 v_1 + ... + c_m v_m} where the \\spad{c_i's} are constants,{} and the \\spad{v_i's} form a basis for the solutions of \\spad{m x = 0}. Argument \\spad{solve} is a function for solving a single linear ordinary differential equation in \\spad{F}.")) (|solve| (((|Union| (|Record| (|:| |particular| (|Vector| |#1|)) (|:| |basis| (|Matrix| |#1|))) "failed") (|Matrix| |#1|) (|Vector| |#1|) (|Mapping| (|Union| (|Record| (|:| |particular| |#1|) (|:| |basis| (|List| |#1|))) "failed") |#2| |#1|)) "\\spad{solve(m, v, solve)} returns \\spad{[[v_1,...,v_m], v_p]} such that the solutions in \\spad{F} of the system \\spad{D x = m x + v} are \\spad{v_p + c_1 v_1 + ... + c_m v_m} where the \\spad{c_i's} are constants,{} and the \\spad{v_i's} form a basis for the solutions of \\spad{D x = m x}. Argument \\spad{solve} is a function for solving a single linear ordinary differential equation in \\spad{F}.")) (|triangulate| (((|Record| (|:| |mat| (|Matrix| |#2|)) (|:| |vec| (|Vector| |#1|))) (|Matrix| |#2|) (|Vector| |#1|)) "\\spad{triangulate(m, v)} returns \\spad{[m_0, v_0]} such that \\spad{m_0} is upper triangular and the system \\spad{m_0 x = v_0} is equivalent to \\spad{m x = v}.") (((|Record| (|:| A (|Matrix| |#1|)) (|:| |eqs| (|List| (|Record| (|:| C (|Matrix| |#1|)) (|:| |g| (|Vector| |#1|)) (|:| |eq| |#2|) (|:| |rh| |#1|))))) (|Matrix| |#1|) (|Vector| |#1|)) "\\spad{triangulate(M,v)} returns \\spad{A,[[C_1,g_1,L_1,h_1],...,[C_k,g_k,L_k,h_k]]} such that under the change of variable \\spad{y = A z},{} the first order linear system \\spad{D y = M y + v} is uncoupled as \\spad{D z_i = C_i z_i + g_i} and each \\spad{C_i} is a companion matrix corresponding to the scalar equation \\spad{L_i z_j = h_i}."))) 
NIL 
NIL 
(-734 -3092 LODO) 
((|constructor| (NIL "\\spad{ODETools} provides tools for the linear ODE solver.")) (|particularSolution| (((|Union| |#1| "failed") |#2| |#1| (|List| |#1|) (|Mapping| |#1| |#1|)) "\\spad{particularSolution(op, g, [f1,...,fm], I)} returns a particular solution \\spad{h} of the equation \\spad{op y = g} where \\spad{[f1,...,fm]} are linearly independent and \\spad{op(fi)=0}. The value \"failed\" is returned if no particular solution is found. Note: the method of variations of parameters is used.")) (|variationOfParameters| (((|Union| (|Vector| |#1|) "failed") |#2| |#1| (|List| |#1|)) "\\spad{variationOfParameters(op, g, [f1,...,fm])} returns \\spad{[u1,...,um]} such that a particular solution of the equation \\spad{op y = g} is \\spad{f1 int(u1) + ... + fm int(um)} where \\spad{[f1,...,fm]} are linearly independent and \\spad{op(fi)=0}. The value \"failed\" is returned if \\spad{m < n} and no particular solution is found.")) (|wronskianMatrix| (((|Matrix| |#1|) (|List| |#1|) (|NonNegativeInteger|)) "\\spad{wronskianMatrix([f1,...,fn], q, D)} returns the \\spad{q x n} matrix \\spad{m} whose i^th row is \\spad{[f1^(i-1),...,fn^(i-1)]}.") (((|Matrix| |#1|) (|List| |#1|)) "\\spad{wronskianMatrix([f1,...,fn])} returns the \\spad{n x n} matrix \\spad{m} whose i^th row is \\spad{[f1^(i-1),...,fn^(i-1)]}."))) 
NIL 
NIL 
(-735 -2621 S |f|) 
((|constructor| (NIL "\\indented{2}{This type represents the finite direct or cartesian product of an} underlying ordered component type. The ordering on the type is determined by its third argument which represents the less than function on vectors. This type is a suitable third argument for \\spadtype{GeneralDistributedMultivariatePolynomial}."))) 
((-3988 |has| |#2| (-961)) (-3989 |has| |#2| (-961)) (-3991 |has| |#2| (-6 -3991)) (-3994 . T)) 
((OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-312))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312)))) (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (OR (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756)))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-319))) (OR (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-961))))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-190))) (OR (|HasCategory| |#2| (QUOTE (-190))) (-12 (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-1013))))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-961))))) (|HasCategory| (-484) (QUOTE (-756))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1013)))) (-12 (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-1013)))) (|HasAttribute| |#2| (QUOTE -3991)) (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-961)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-961)))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-25))) (|HasCategory| |#2| (QUOTE (-72))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) 
(-736 R) 
((|constructor| (NIL "\\spadtype{OrderlyDifferentialPolynomial} implements an ordinary differential polynomial ring in arbitrary number of differential indeterminates,{} with coefficients in a ring. The ranking on the differential indeterminate is orderly. This is analogous to the domain \\spadtype{Polynomial}. \\blankline"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| (-738 (-1089)) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| (-738 (-1089)) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-738 (-1089)) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-738 (-1089)) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-738 (-1089)) (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-737 |Kernels| R |var|) 
((|constructor| (NIL "This constructor produces an ordinary differential ring from a partial differential ring by specifying a variable."))) 
(((-3996 "*") |has| |#2| (-312)) (-3987 |has| |#2| (-312)) (-3992 |has| |#2| (-312)) (-3986 |has| |#2| (-312)) (-3991 . T) (-3989 . T) (-3988 . T)) 
((|HasCategory| |#2| (QUOTE (-312)))) 
(-738 S) 
((|constructor| (NIL "\\spadtype{OrderlyDifferentialVariable} adds a commonly used orderly ranking to the set of derivatives of an ordered list of differential indeterminates. An orderly ranking is a ranking \\spadfun{<} of the derivatives with the property that for two derivatives \\spad{u} and \\spad{v},{} \\spad{u} \\spadfun{<} \\spad{v} if the \\spadfun{order} of \\spad{u} is less than that of \\spad{v}. This domain belongs to \\spadtype{DifferentialVariableCategory}. It defines \\spadfun{weight} to be just \\spadfun{order},{} and it defines an orderly ranking \\spadfun{<} on derivatives \\spad{u} via the lexicographic order on the pair (\\spadfun{order}(\\spad{u}),{} \\spadfun{variable}(\\spad{u}))."))) 
NIL 
NIL 
(-739 S) 
((|constructor| (NIL "\\indented{3}{The free monoid on a set \\spad{S} is the monoid of finite products of} the form \\spad{reduce(*,[si ** ni])} where the \\spad{si}'s are in \\spad{S},{} and the \\spad{ni}'s are non-negative integers. The multiplication is not commutative. For two elements \\spad{x} and \\spad{y} the relation \\spad{x < y} holds if either \\spad{length(x) < length(y)} holds or if these lengths are equal and if \\spad{x} is smaller than \\spad{y} \\spad{w}.\\spad{r}.\\spad{t}. the lexicographical ordering induced by \\spad{S}. This domain inherits implementation from \\spadtype{FreeMonoid}.")) (|varList| (((|List| |#1|) $) "\\spad{varList(x)} returns the list of variables of \\spad{x}.")) (|length| (((|NonNegativeInteger|) $) "\\spad{length(x)} returns the length of \\spad{x}.")) (|div| (((|Union| (|Record| (|:| |lm| $) (|:| |rm| $)) "failed") $ $) "\\spad{x div y} returns the left and right exact quotients of \\spad{x} by \\spad{y},{} that is \\spad{[l, r]} such that \\spad{x = l * y * r}. \"failed\" is returned iff \\spad{x} is not of the form \\spad{l * y * r}. monomial of \\spad{x}.")) (|rquo| (((|Union| $ "failed") $ |#1|) "\\spad{rquo(x, s)} returns the exact right quotient of \\spad{x} by \\spad{s}.")) (|lquo| (((|Union| $ "failed") $ |#1|) "\\spad{lquo(x, s)} returns the exact left quotient of \\spad{x} by \\spad{s}.")) (|lexico| (((|Boolean|) $ $) "\\spad{lexico(x,y)} returns \\spad{true} iff \\spad{x} is smaller than \\spad{y} \\spad{w}.\\spad{r}.\\spad{t}. the pure lexicographical ordering induced by \\spad{S}.")) (|mirror| (($ $) "\\spad{mirror(x)} returns the reversed word of \\spad{x}.")) (|rest| (($ $) "\\spad{rest(x)} returns \\spad{x} except the first letter.")) (|first| ((|#1| $) "\\spad{first(x)} returns the first letter of \\spad{x}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-756)))) 
(-740) 
((|constructor| (NIL "The category of ordered commutative integral domains,{} where ordering and the arithmetic operations are compatible \\blankline"))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-741 P R) 
((|constructor| (NIL "This constructor creates the \\spadtype{MonogenicLinearOperator} domain which is ``opposite'' in the ring sense to \\spad{P}. That is,{} as sets \\spad{P = \\$} but \\spad{a * b} in \\spad{\\$} is equal to \\spad{b * a} in \\spad{P}.")) (|po| ((|#1| $) "\\spad{po(q)} creates a value in \\spad{P} equal to \\spad{q} in \\$.")) (|op| (($ |#1|) "\\spad{op(p)} creates a value in \\$ equal to \\spad{p} in \\spad{P}."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-190)))) 
(-742 S) 
((|constructor| (NIL "to become an in order iterator")) (|min| ((|#1| $) "\\spad{min(u)} returns the smallest entry in the multiset aggregate \\spad{u}."))) 
((-3994 . T) (-3984 . T) (-3995 . T)) 
NIL 
(-743 R) 
((|constructor| (NIL "Adjunction of a complex infinity to a set. Date Created: 4 Oct 1989 Date Last Updated: 1 Nov 1989")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(x)} returns \\spad{x} as a finite rational number if it is one,{} \"failed\" otherwise.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(x)} returns \\spad{x} as a finite rational number. Error: if \\spad{x} is not a rational number.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(x)} tests if \\spad{x} is a finite rational number.")) (|infinite?| (((|Boolean|) $) "\\spad{infinite?(x)} tests if \\spad{x} is infinite.")) (|finite?| (((|Boolean|) $) "\\spad{finite?(x)} tests if \\spad{x} is finite.")) (|infinity| (($) "\\spad{infinity()} returns infinity."))) 
((-3991 |has| |#1| (-755))) 
((|HasCategory| |#1| (QUOTE (-755))) (|HasCategory| |#1| (QUOTE (-21))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-755)))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (OR (|HasCategory| |#1| (QUOTE (-755))) (|HasCategory| |#1| (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-483)))) 
(-744 R S) 
((|constructor| (NIL "Lifting of maps to one-point completions. Date Created: 4 Oct 1989 Date Last Updated: 4 Oct 1989")) (|map| (((|OnePointCompletion| |#2|) (|Mapping| |#2| |#1|) (|OnePointCompletion| |#1|) (|OnePointCompletion| |#2|)) "\\spad{map(f, r, i)} lifts \\spad{f} and applies it to \\spad{r},{} assuming that \\spad{f}(infinity) = \\spad{i}.") (((|OnePointCompletion| |#2|) (|Mapping| |#2| |#1|) (|OnePointCompletion| |#1|)) "\\spad{map(f, r)} lifts \\spad{f} and applies it to \\spad{r},{} assuming that \\spad{f}(infinity) = infinity."))) 
NIL 
NIL 
(-745 R) 
((|constructor| (NIL "Algebra of ADDITIVE operators over a ring."))) 
((-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120)))) 
(-746 A S) 
((|constructor| (NIL "This category specifies the interface for operators used to build terms,{} in the sense of Universal Algebra. The domain parameter \\spad{S} provides representation for the `external name' of an operator.")) (|is?| (((|Boolean|) $ |#2|) "\\spad{is?(op,n)} holds if the name of the operator \\spad{op} is \\spad{n}.")) (|arity| (((|Arity|) $) "\\spad{arity(op)} returns the arity of the operator \\spad{op}.")) (|name| ((|#2| $) "\\spad{name(op)} returns the externam name of \\spad{op}."))) 
NIL 
NIL 
(-747 S) 
((|constructor| (NIL "This category specifies the interface for operators used to build terms,{} in the sense of Universal Algebra. The domain parameter \\spad{S} provides representation for the `external name' of an operator.")) (|is?| (((|Boolean|) $ |#1|) "\\spad{is?(op,n)} holds if the name of the operator \\spad{op} is \\spad{n}.")) (|arity| (((|Arity|) $) "\\spad{arity(op)} returns the arity of the operator \\spad{op}.")) (|name| ((|#1| $) "\\spad{name(op)} returns the externam name of \\spad{op}."))) 
NIL 
NIL 
(-748) 
((|constructor| (NIL "This package exports tools to create AXIOM Library information databases.")) (|getDatabase| (((|Database| (|IndexCard|)) (|String|)) "\\spad{getDatabase(\"char\")} returns a list of appropriate entries in the browser database. The legal values for \\spad{\"char\"} are \"o\" (operations),{} \"k\" (constructors),{} \"d\" (domains),{} \"c\" (categories) or \"p\" (packages)."))) 
NIL 
NIL 
(-749) 
((|constructor| (NIL "This the datatype for an operator-signature pair.")) (|construct| (($ (|Identifier|) (|Signature|)) "\\spad{construct(op,sig)} construct a signature-operator with operator name `op',{} and signature `sig'.")) (|signature| (((|Signature|) $) "\\spad{signature(x)} returns the signature of `x'."))) 
NIL 
NIL 
(-750 R) 
((|constructor| (NIL "Adjunction of two real infinites quantities to a set. Date Created: 4 Oct 1989 Date Last Updated: 1 Nov 1989")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(x)} returns \\spad{x} as a finite rational number if it is one and \"failed\" otherwise.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(x)} returns \\spad{x} as a finite rational number. Error: if \\spad{x} cannot be so converted.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(x)} tests if \\spad{x} is a finite rational number.")) (|whatInfinity| (((|SingleInteger|) $) "\\spad{whatInfinity(x)} returns 0 if \\spad{x} is finite,{} 1 if \\spad{x} is +infinity,{} and \\spad{-1} if \\spad{x} is -infinity.")) (|infinite?| (((|Boolean|) $) "\\spad{infinite?(x)} tests if \\spad{x} is +infinity or -infinity,{}")) (|finite?| (((|Boolean|) $) "\\spad{finite?(x)} tests if \\spad{x} is finite.")) (|minusInfinity| (($) "\\spad{minusInfinity()} returns -infinity.")) (|plusInfinity| (($) "\\spad{plusInfinity()} returns +infinity."))) 
((-3991 |has| |#1| (-755))) 
((|HasCategory| |#1| (QUOTE (-755))) (|HasCategory| |#1| (QUOTE (-21))) (OR (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-755)))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (OR (|HasCategory| |#1| (QUOTE (-755))) (|HasCategory| |#1| (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-483)))) 
(-751 R S) 
((|constructor| (NIL "Lifting of maps to ordered completions. Date Created: 4 Oct 1989 Date Last Updated: 4 Oct 1989")) (|map| (((|OrderedCompletion| |#2|) (|Mapping| |#2| |#1|) (|OrderedCompletion| |#1|) (|OrderedCompletion| |#2|) (|OrderedCompletion| |#2|)) "\\spad{map(f, r, p, m)} lifts \\spad{f} and applies it to \\spad{r},{} assuming that \\spad{f}(plusInfinity) = \\spad{p} and that \\spad{f}(minusInfinity) = \\spad{m}.") (((|OrderedCompletion| |#2|) (|Mapping| |#2| |#1|) (|OrderedCompletion| |#1|)) "\\spad{map(f, r)} lifts \\spad{f} and applies it to \\spad{r},{} assuming that \\spad{f}(plusInfinity) = plusInfinity and that \\spad{f}(minusInfinity) = minusInfinity."))) 
NIL 
NIL 
(-752) 
((|constructor| (NIL "Ordered finite sets.")) (|max| (($) "\\spad{max} is the maximum value of \\%.")) (|min| (($) "\\spad{min} is the minimum value of \\%."))) 
NIL 
NIL 
(-753 -2621 S) 
((|constructor| (NIL "\\indented{3}{This package provides ordering functions on vectors which} are suitable parameters for OrderedDirectProduct.")) (|reverseLex| (((|Boolean|) (|Vector| |#2|) (|Vector| |#2|)) "\\spad{reverseLex(v1,v2)} return \\spad{true} if the vector \\spad{v1} is less than the vector \\spad{v2} in the ordering which is total degree refined by the reverse lexicographic ordering.")) (|totalLex| (((|Boolean|) (|Vector| |#2|) (|Vector| |#2|)) "\\spad{totalLex(v1,v2)} return \\spad{true} if the vector \\spad{v1} is less than the vector \\spad{v2} in the ordering which is total degree refined by lexicographic ordering.")) (|pureLex| (((|Boolean|) (|Vector| |#2|) (|Vector| |#2|)) "\\spad{pureLex(v1,v2)} return \\spad{true} if the vector \\spad{v1} is less than the vector \\spad{v2} in the lexicographic ordering."))) 
NIL 
NIL 
(-754) 
((|constructor| (NIL "Ordered sets which are also monoids,{} such that multiplication preserves the ordering. \\blankline"))) 
NIL 
NIL 
(-755) 
((|constructor| (NIL "Ordered sets which are also rings,{} that is,{} domains where the ring operations are compatible with the ordering. \\blankline"))) 
((-3991 . T)) 
NIL 
(-756) 
((|constructor| (NIL "The class of totally ordered sets,{} that is,{} sets such that for each pair of elements \\spad{(a,b)} exactly one of the following relations holds \\spad{a<b or a=b or b<a} and the relation is transitive,{} \\spadignore{i.e.} \\spad{a<b and b<c => a<c}."))) 
NIL 
NIL 
(-757 T$ |f|) 
((|constructor| (NIL "This domain turns any total ordering \\spad{f} on a type \\spad{T} into a model of the category \\spadtype{OrderedType}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-552 (-772))))) 
(-758 S) 
((|constructor| (NIL "Category of types equipped with a total ordering.")) (|min| (($ $ $) "\\spad{min(x,y)} returns the minimum of \\spad{x} and \\spad{y} relative to the ordering.")) (|max| (($ $ $) "\\spad{max(x,y)} returns the maximum of \\spad{x} and \\spad{y} relative to the ordering.")) (>= (((|Boolean|) $ $) "\\spad{x <= y} holds if \\spad{x} is greater or equal than \\spad{y} in the current domain.")) (<= (((|Boolean|) $ $) "\\spad{x <= y} holds if \\spad{x} is less or equal than \\spad{y} in the current domain.")) (> (((|Boolean|) $ $) "\\spad{x > y} holds if \\spad{x} is greater than \\spad{y} in the current domain.")) (< (((|Boolean|) $ $) "\\spad{x < y} holds if \\spad{x} is less than \\spad{y} in the current domain."))) 
NIL 
NIL 
(-759) 
((|constructor| (NIL "Category of types equipped with a total ordering.")) (|min| (($ $ $) "\\spad{min(x,y)} returns the minimum of \\spad{x} and \\spad{y} relative to the ordering.")) (|max| (($ $ $) "\\spad{max(x,y)} returns the maximum of \\spad{x} and \\spad{y} relative to the ordering.")) (>= (((|Boolean|) $ $) "\\spad{x <= y} holds if \\spad{x} is greater or equal than \\spad{y} in the current domain.")) (<= (((|Boolean|) $ $) "\\spad{x <= y} holds if \\spad{x} is less or equal than \\spad{y} in the current domain.")) (> (((|Boolean|) $ $) "\\spad{x > y} holds if \\spad{x} is greater than \\spad{y} in the current domain.")) (< (((|Boolean|) $ $) "\\spad{x < y} holds if \\spad{x} is less than \\spad{y} in the current domain."))) 
NIL 
NIL 
(-760 S R) 
((|constructor| (NIL "This is the category of univariate skew polynomials over an Ore coefficient ring. The multiplication is given by \\spad{x a = \\sigma(a) x + \\delta a}. This category is an evolution of the types \\indented{2}{MonogenicLinearOperator,{} OppositeMonogenicLinearOperator,{} and} \\indented{2}{NonCommutativeOperatorDivision} developped by Jean Della Dora and Stephen \\spad{M}. Watt.")) (|leftLcm| (($ $ $) "\\spad{leftLcm(a,b)} computes the value \\spad{m} of lowest degree such that \\spad{m = aa*a = bb*b} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using right-division.")) (|rightExtendedGcd| (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) "\\spad{rightExtendedGcd(a,b)} returns \\spad{[c,d]} such that \\spad{g = c * a + d * b = rightGcd(a, b)}.")) (|rightGcd| (($ $ $) "\\spad{rightGcd(a,b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = aa*g}} \\indented{3}{\\spad{b = bb*g}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using right-division.")) (|rightExactQuotient| (((|Union| $ "failed") $ $) "\\spad{rightExactQuotient(a,b)} computes the value \\spad{q},{} if it exists such that \\spad{a = q*b}.")) (|rightRemainder| (($ $ $) "\\spad{rightRemainder(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned.")) (|rightQuotient| (($ $ $) "\\spad{rightQuotient(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned.")) (|rightDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{rightDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``right division''.")) (|rightLcm| (($ $ $) "\\spad{rightLcm(a,b)} computes the value \\spad{m} of lowest degree such that \\spad{m = a*aa = b*bb} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using left-division.")) (|leftExtendedGcd| (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) "\\spad{leftExtendedGcd(a,b)} returns \\spad{[c,d]} such that \\spad{g = a * c + b * d = leftGcd(a, b)}.")) (|leftGcd| (($ $ $) "\\spad{leftGcd(a,b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = g*aa}} \\indented{3}{\\spad{b = g*bb}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using left-division.")) (|leftExactQuotient| (((|Union| $ "failed") $ $) "\\spad{leftExactQuotient(a,b)} computes the value \\spad{q},{} if it exists,{} \\indented{1}{such that \\spad{a = b*q}.}")) (|leftRemainder| (($ $ $) "\\spad{leftRemainder(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned.")) (|leftQuotient| (($ $ $) "\\spad{leftQuotient(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned.")) (|leftDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{leftDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``left division''.")) (|primitivePart| (($ $) "\\spad{primitivePart(l)} returns \\spad{l0} such that \\spad{l = a * l0} for some a in \\spad{R},{} and \\spad{content(l0) = 1}.")) (|content| ((|#2| $) "\\spad{content(l)} returns the gcd of all the coefficients of \\spad{l}.")) (|monicRightDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{monicRightDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``right division''.")) (|monicLeftDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{monicLeftDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``left division''.")) (|exquo| (((|Union| $ "failed") $ |#2|) "\\spad{exquo(l, a)} returns the exact quotient of \\spad{l} by a,{} returning \\axiom{\"failed\"} if this is not possible.")) (|apply| ((|#2| $ |#2| |#2|) "\\spad{apply(p, c, m)} returns \\spad{p(m)} where the action is given by \\spad{x m = c sigma(m) + delta(m)}.")) (|coefficients| (((|List| |#2|) $) "\\spad{coefficients(l)} returns the list of all the nonzero coefficients of \\spad{l}.")) (|monomial| (($ |#2| (|NonNegativeInteger|)) "\\spad{monomial(c,k)} produces \\spad{c} times the \\spad{k}-th power of the generating operator,{} \\spad{monomial(1,1)}.")) (|coefficient| ((|#2| $ (|NonNegativeInteger|)) "\\spad{coefficient(l,k)} is \\spad{a(k)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|reductum| (($ $) "\\spad{reductum(l)} is \\spad{l - monomial(a(n),n)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|leadingCoefficient| ((|#2| $) "\\spad{leadingCoefficient(l)} is \\spad{a(n)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|minimumDegree| (((|NonNegativeInteger|) $) "\\spad{minimumDegree(l)} is the smallest \\spad{k} such that \\spad{a(k) ~= 0} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(l)} is \\spad{n} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}"))) 
NIL 
((|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146)))) 
(-761 R) 
((|constructor| (NIL "This is the category of univariate skew polynomials over an Ore coefficient ring. The multiplication is given by \\spad{x a = \\sigma(a) x + \\delta a}. This category is an evolution of the types \\indented{2}{MonogenicLinearOperator,{} OppositeMonogenicLinearOperator,{} and} \\indented{2}{NonCommutativeOperatorDivision} developped by Jean Della Dora and Stephen \\spad{M}. Watt.")) (|leftLcm| (($ $ $) "\\spad{leftLcm(a,b)} computes the value \\spad{m} of lowest degree such that \\spad{m = aa*a = bb*b} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using right-division.")) (|rightExtendedGcd| (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) "\\spad{rightExtendedGcd(a,b)} returns \\spad{[c,d]} such that \\spad{g = c * a + d * b = rightGcd(a, b)}.")) (|rightGcd| (($ $ $) "\\spad{rightGcd(a,b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = aa*g}} \\indented{3}{\\spad{b = bb*g}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using right-division.")) (|rightExactQuotient| (((|Union| $ "failed") $ $) "\\spad{rightExactQuotient(a,b)} computes the value \\spad{q},{} if it exists such that \\spad{a = q*b}.")) (|rightRemainder| (($ $ $) "\\spad{rightRemainder(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned.")) (|rightQuotient| (($ $ $) "\\spad{rightQuotient(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned.")) (|rightDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{rightDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``right division''.")) (|rightLcm| (($ $ $) "\\spad{rightLcm(a,b)} computes the value \\spad{m} of lowest degree such that \\spad{m = a*aa = b*bb} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using left-division.")) (|leftExtendedGcd| (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) "\\spad{leftExtendedGcd(a,b)} returns \\spad{[c,d]} such that \\spad{g = a * c + b * d = leftGcd(a, b)}.")) (|leftGcd| (($ $ $) "\\spad{leftGcd(a,b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = g*aa}} \\indented{3}{\\spad{b = g*bb}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using left-division.")) (|leftExactQuotient| (((|Union| $ "failed") $ $) "\\spad{leftExactQuotient(a,b)} computes the value \\spad{q},{} if it exists,{} \\indented{1}{such that \\spad{a = b*q}.}")) (|leftRemainder| (($ $ $) "\\spad{leftRemainder(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned.")) (|leftQuotient| (($ $ $) "\\spad{leftQuotient(a,b)} computes the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned.")) (|leftDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{leftDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``left division''.")) (|primitivePart| (($ $) "\\spad{primitivePart(l)} returns \\spad{l0} such that \\spad{l = a * l0} for some a in \\spad{R},{} and \\spad{content(l0) = 1}.")) (|content| ((|#1| $) "\\spad{content(l)} returns the gcd of all the coefficients of \\spad{l}.")) (|monicRightDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{monicRightDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``right division''.")) (|monicLeftDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{monicLeftDivide(a,b)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``left division''.")) (|exquo| (((|Union| $ "failed") $ |#1|) "\\spad{exquo(l, a)} returns the exact quotient of \\spad{l} by a,{} returning \\axiom{\"failed\"} if this is not possible.")) (|apply| ((|#1| $ |#1| |#1|) "\\spad{apply(p, c, m)} returns \\spad{p(m)} where the action is given by \\spad{x m = c sigma(m) + delta(m)}.")) (|coefficients| (((|List| |#1|) $) "\\spad{coefficients(l)} returns the list of all the nonzero coefficients of \\spad{l}.")) (|monomial| (($ |#1| (|NonNegativeInteger|)) "\\spad{monomial(c,k)} produces \\spad{c} times the \\spad{k}-th power of the generating operator,{} \\spad{monomial(1,1)}.")) (|coefficient| ((|#1| $ (|NonNegativeInteger|)) "\\spad{coefficient(l,k)} is \\spad{a(k)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|reductum| (($ $) "\\spad{reductum(l)} is \\spad{l - monomial(a(n),n)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(l)} is \\spad{a(n)} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|minimumDegree| (((|NonNegativeInteger|) $) "\\spad{minimumDegree(l)} is the smallest \\spad{k} such that \\spad{a(k) ~= 0} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(l)} is \\spad{n} if \\indented{2}{\\spad{l = sum(monomial(a(i),i), i = 0..n)}.}"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-762 R C) 
((|constructor| (NIL "\\spad{UnivariateSkewPolynomialCategoryOps} provides products and \\indented{1}{divisions of univariate skew polynomials.}")) (|rightDivide| (((|Record| (|:| |quotient| |#2|) (|:| |remainder| |#2|)) |#2| |#2| (|Automorphism| |#1|)) "\\spad{rightDivide(a, b, sigma)} returns the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``right division''. \\spad{\\sigma} is the morphism to use.")) (|leftDivide| (((|Record| (|:| |quotient| |#2|) (|:| |remainder| |#2|)) |#2| |#2| (|Automorphism| |#1|)) "\\spad{leftDivide(a, b, sigma)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``left division''. \\spad{\\sigma} is the morphism to use.")) (|monicRightDivide| (((|Record| (|:| |quotient| |#2|) (|:| |remainder| |#2|)) |#2| |#2| (|Automorphism| |#1|)) "\\spad{monicRightDivide(a, b, sigma)} returns the pair \\spad{[q,r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``right division''. \\spad{\\sigma} is the morphism to use.")) (|monicLeftDivide| (((|Record| (|:| |quotient| |#2|) (|:| |remainder| |#2|)) |#2| |#2| (|Automorphism| |#1|)) "\\spad{monicLeftDivide(a, b, sigma)} returns the pair \\spad{[q,r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``left division''. \\spad{\\sigma} is the morphism to use.")) (|apply| ((|#1| |#2| |#1| |#1| (|Automorphism| |#1|) (|Mapping| |#1| |#1|)) "\\spad{apply(p, c, m, sigma, delta)} returns \\spad{p(m)} where the action is given by \\spad{x m = c sigma(m) + delta(m)}.")) (|times| ((|#2| |#2| |#2| (|Automorphism| |#1|) (|Mapping| |#1| |#1|)) "\\spad{times(p, q, sigma, delta)} returns \\spad{p * q}. \\spad{\\sigma} and \\spad{\\delta} are the maps to use."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) 
(-763 R |sigma| -3244) 
((|constructor| (NIL "This is the domain of sparse univariate skew polynomials over an Ore coefficient field. The multiplication is given by \\spad{x a = \\sigma(a) x + \\delta a}.")) (|outputForm| (((|OutputForm|) $ (|OutputForm|)) "\\spad{outputForm(p, x)} returns the output form of \\spad{p} using \\spad{x} for the otherwise anonymous variable."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-764 |x| R |sigma| -3244) 
((|constructor| (NIL "This is the domain of univariate skew polynomials over an Ore coefficient field in a named variable. The multiplication is given by \\spad{x a = \\sigma(a) x + \\delta a}."))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-312)))) 
(-765 R) 
((|constructor| (NIL "This package provides orthogonal polynomials as functions on a ring.")) (|legendreP| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{legendreP(n,x)} is the \\spad{n}-th Legendre polynomial,{} \\spad{P[n](x)}. These are defined by \\spad{1/sqrt(1-2*x*t+t**2) = sum(P[n](x)*t**n, n = 0..)}.")) (|laguerreL| ((|#1| (|NonNegativeInteger|) (|NonNegativeInteger|) |#1|) "\\spad{laguerreL(m,n,x)} is the associated Laguerre polynomial,{} \\spad{L<m>[n](x)}. This is the \\spad{m}-th derivative of \\spad{L[n](x)}.") ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{laguerreL(n,x)} is the \\spad{n}-th Laguerre polynomial,{} \\spad{L[n](x)}. These are defined by \\spad{exp(-t*x/(1-t))/(1-t) = sum(L[n](x)*t**n/n!, n = 0..)}.")) (|hermiteH| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{hermiteH(n,x)} is the \\spad{n}-th Hermite polynomial,{} \\spad{H[n](x)}. These are defined by \\spad{exp(2*t*x-t**2) = sum(H[n](x)*t**n/n!, n = 0..)}.")) (|chebyshevU| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{chebyshevU(n,x)} is the \\spad{n}-th Chebyshev polynomial of the second kind,{} \\spad{U[n](x)}. These are defined by \\spad{1/(1-2*t*x+t**2) = sum(T[n](x) *t**n, n = 0..)}.")) (|chebyshevT| ((|#1| (|NonNegativeInteger|) |#1|) "\\spad{chebyshevT(n,x)} is the \\spad{n}-th Chebyshev polynomial of the first kind,{} \\spad{T[n](x)}. These are defined by \\spad{(1-t*x)/(1-2*t*x+t**2) = sum(T[n](x) *t**n, n = 0..)}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) 
(-766) 
((|constructor| (NIL "Semigroups with compatible ordering."))) 
NIL 
NIL 
(-767) 
((|constructor| (NIL "\\indented{1}{Author : Larry Lambe} Date created : 14 August 1988 Date Last Updated : 11 March 1991 Description : A domain used in order to take the free \\spad{R}-module on the Integers \\spad{I}. This is actually the forgetful functor from OrderedRings to OrderedSets applied to \\spad{I}")) (|value| (((|Integer|) $) "\\spad{value(x)} returns the integer associated with \\spad{x}")) (|coerce| (($ (|Integer|)) "\\spad{coerce(i)} returns the element corresponding to \\spad{i}"))) 
NIL 
NIL 
(-768) 
((|constructor| (NIL "OutPackage allows pretty-printing from programs.")) (|outputList| (((|Void|) (|List| (|Any|))) "\\spad{outputList(l)} displays the concatenated components of the list \\spad{l} on the ``algebra output'' stream,{} as defined by \\spadsyscom{set output algebra}; quotes are stripped from strings.")) (|output| (((|Void|) (|String|) (|OutputForm|)) "\\spad{output(s,x)} displays the string \\spad{s} followed by the form \\spad{x} on the ``algebra output'' stream,{} as defined by \\spadsyscom{set output algebra}.") (((|Void|) (|OutputForm|)) "\\spad{output(x)} displays the output form \\spad{x} on the ``algebra output'' stream,{} as defined by \\spadsyscom{set output algebra}.") (((|Void|) (|String|)) "\\spad{output(s)} displays the string \\spad{s} on the ``algebra output'' stream,{} as defined by \\spadsyscom{set output algebra}."))) 
NIL 
NIL 
(-769 S) 
((|constructor| (NIL "This category describes output byte stream conduits.")) (|writeBytes!| (((|NonNegativeInteger|) $ (|ByteBuffer|)) "\\spad{writeBytes!(c,b)} write bytes from buffer `b' onto the conduit `c'. The actual number of written bytes is returned.")) (|writeUInt8!| (((|Maybe| (|UInt8|)) $ (|UInt8|)) "\\spad{writeUInt8!(c,b)} attempts to write the unsigned 8-bit value `v' on the conduit `c'. Returns the written value if successful,{} otherwise,{} returns \\spad{nothing}.")) (|writeInt8!| (((|Maybe| (|Int8|)) $ (|Int8|)) "\\spad{writeInt8!(c,b)} attempts to write the 8-bit value `v' on the conduit `c'. Returns the written value if successful,{} otherwise,{} returns \\spad{nothing}.")) (|writeByte!| (((|Maybe| (|Byte|)) $ (|Byte|)) "\\spad{writeByte!(c,b)} attempts to write the byte `b' on the conduit `c'. Returns the written byte if successful,{} otherwise,{} returns \\spad{nothing}."))) 
NIL 
NIL 
(-770) 
((|constructor| (NIL "This category describes output byte stream conduits.")) (|writeBytes!| (((|NonNegativeInteger|) $ (|ByteBuffer|)) "\\spad{writeBytes!(c,b)} write bytes from buffer `b' onto the conduit `c'. The actual number of written bytes is returned.")) (|writeUInt8!| (((|Maybe| (|UInt8|)) $ (|UInt8|)) "\\spad{writeUInt8!(c,b)} attempts to write the unsigned 8-bit value `v' on the conduit `c'. Returns the written value if successful,{} otherwise,{} returns \\spad{nothing}.")) (|writeInt8!| (((|Maybe| (|Int8|)) $ (|Int8|)) "\\spad{writeInt8!(c,b)} attempts to write the 8-bit value `v' on the conduit `c'. Returns the written value if successful,{} otherwise,{} returns \\spad{nothing}.")) (|writeByte!| (((|Maybe| (|Byte|)) $ (|Byte|)) "\\spad{writeByte!(c,b)} attempts to write the byte `b' on the conduit `c'. Returns the written byte if successful,{} otherwise,{} returns \\spad{nothing}."))) 
NIL 
NIL 
(-771) 
((|constructor| (NIL "This domain provides representation for binary files open for output operations. `Binary' here means that the conduits do not interpret their contents.")) (|isOpen?| (((|Boolean|) $) "open?(ifile) holds if `ifile' is in open state.")) (|outputBinaryFile| (($ (|String|)) "\\spad{outputBinaryFile(f)} returns an output conduit obtained by opening the file named by `f' as a binary file.") (($ (|FileName|)) "\\spad{outputBinaryFile(f)} returns an output conduit obtained by opening the file named by `f' as a binary file."))) 
NIL 
NIL 
(-772) 
((|constructor| (NIL "This domain is used to create and manipulate mathematical expressions for output. It is intended to provide an insulating layer between the expression rendering software (\\spadignore{e.g.} TeX,{} or Script) and the output coercions in the various domains.")) (SEGMENT (($ $) "\\spad{SEGMENT(x)} creates the prefix form: \\spad{x..}.") (($ $ $) "\\spad{SEGMENT(x,y)} creates the infix form: \\spad{x..y}.")) (|not| (($ $) "\\spad{not f} creates the equivalent prefix form.")) (|or| (($ $ $) "\\spad{f or g} creates the equivalent infix form.")) (|and| (($ $ $) "\\spad{f and g} creates the equivalent infix form.")) (|exquo| (($ $ $) "\\spad{exquo(f,g)} creates the equivalent infix form.")) (|quo| (($ $ $) "\\spad{f quo g} creates the equivalent infix form.")) (|rem| (($ $ $) "\\spad{f rem g} creates the equivalent infix form.")) (|div| (($ $ $) "\\spad{f div g} creates the equivalent infix form.")) (** (($ $ $) "\\spad{f ** g} creates the equivalent infix form.")) (/ (($ $ $) "\\spad{f / g} creates the equivalent infix form.")) (* (($ $ $) "\\spad{f * g} creates the equivalent infix form.")) (- (($ $) "\\spad{- f} creates the equivalent prefix form.") (($ $ $) "\\spad{f - g} creates the equivalent infix form.")) (+ (($ $ $) "\\spad{f + g} creates the equivalent infix form.")) (>= (($ $ $) "\\spad{f >= g} creates the equivalent infix form.")) (<= (($ $ $) "\\spad{f <= g} creates the equivalent infix form.")) (> (($ $ $) "\\spad{f > g} creates the equivalent infix form.")) (< (($ $ $) "\\spad{f < g} creates the equivalent infix form.")) (~= (($ $ $) "\\spad{f ~= g} creates the equivalent infix form.")) (= (($ $ $) "\\spad{f = g} creates the equivalent infix form.")) (|blankSeparate| (($ (|List| $)) "\\spad{blankSeparate(l)} creates the form separating the elements of \\spad{l} by blanks.")) (|semicolonSeparate| (($ (|List| $)) "\\spad{semicolonSeparate(l)} creates the form separating the elements of \\spad{l} by semicolons.")) (|commaSeparate| (($ (|List| $)) "\\spad{commaSeparate(l)} creates the form separating the elements of \\spad{l} by commas.")) (|pile| (($ (|List| $)) "\\spad{pile(l)} creates the form consisting of the elements of \\spad{l} which displays as a pile,{} \\spadignore{i.e.} the elements begin on a new line and are indented right to the same margin.")) (|paren| (($ (|List| $)) "\\spad{paren(lf)} creates the form separating the elements of \\spad{lf} by commas and encloses the result in parentheses.") (($ $) "\\spad{paren(f)} creates the form enclosing \\spad{f} in parentheses.")) (|bracket| (($ (|List| $)) "\\spad{bracket(lf)} creates the form separating the elements of \\spad{lf} by commas and encloses the result in square brackets.") (($ $) "\\spad{bracket(f)} creates the form enclosing \\spad{f} in square brackets.")) (|brace| (($ (|List| $)) "\\spad{brace(lf)} creates the form separating the elements of \\spad{lf} by commas and encloses the result in curly brackets.") (($ $) "\\spad{brace(f)} creates the form enclosing \\spad{f} in braces (curly brackets).")) (|int| (($ $ $ $) "\\spad{int(expr,lowerlimit,upperlimit)} creates the form prefixing \\spad{expr} by an integral sign with both a \\spad{lowerlimit} and \\spad{upperlimit}.") (($ $ $) "\\spad{int(expr,lowerlimit)} creates the form prefixing \\spad{expr} by an integral sign with a \\spad{lowerlimit}.") (($ $) "\\spad{int(expr)} creates the form prefixing \\spad{expr} with an integral sign.")) (|prod| (($ $ $ $) "\\spad{prod(expr,lowerlimit,upperlimit)} creates the form prefixing \\spad{expr} by a capital \\spad{pi} with both a \\spad{lowerlimit} and \\spad{upperlimit}.") (($ $ $) "\\spad{prod(expr,lowerlimit)} creates the form prefixing \\spad{expr} by a capital \\spad{pi} with a \\spad{lowerlimit}.") (($ $) "\\spad{prod(expr)} creates the form prefixing \\spad{expr} by a capital \\spad{pi}.")) (|sum| (($ $ $ $) "\\spad{sum(expr,lowerlimit,upperlimit)} creates the form prefixing \\spad{expr} by a capital sigma with both a \\spad{lowerlimit} and \\spad{upperlimit}.") (($ $ $) "\\spad{sum(expr,lowerlimit)} creates the form prefixing \\spad{expr} by a capital sigma with a \\spad{lowerlimit}.") (($ $) "\\spad{sum(expr)} creates the form prefixing \\spad{expr} by a capital sigma.")) (|overlabel| (($ $ $) "\\spad{overlabel(x,f)} creates the form \\spad{f} with \"x overbar\" over the top.")) (|overbar| (($ $) "\\spad{overbar(f)} creates the form \\spad{f} with an overbar.")) (|prime| (($ $ (|NonNegativeInteger|)) "\\spad{prime(f,n)} creates the form \\spad{f} followed by \\spad{n} primes.") (($ $) "\\spad{prime(f)} creates the form \\spad{f} followed by a suffix prime (single quote).")) (|dot| (($ $ (|NonNegativeInteger|)) "\\spad{dot(f,n)} creates the form \\spad{f} with \\spad{n} dots overhead.") (($ $) "\\spad{dot(f)} creates the form with a one dot overhead.")) (|quote| (($ $) "\\spad{quote(f)} creates the form \\spad{f} with a prefix quote.")) (|supersub| (($ $ (|List| $)) "\\spad{supersub(a,[sub1,super1,sub2,super2,...])} creates a form with each subscript aligned under each superscript.")) (|scripts| (($ $ (|List| $)) "\\spad{scripts(f, [sub, super, presuper, presub])} \\indented{1}{creates a form for \\spad{f} with scripts on all 4 corners.}")) (|presuper| (($ $ $) "\\spad{presuper(f,n)} creates a form for \\spad{f} presuperscripted by \\spad{n}.")) (|presub| (($ $ $) "\\spad{presub(f,n)} creates a form for \\spad{f} presubscripted by \\spad{n}.")) (|super| (($ $ $) "\\spad{super(f,n)} creates a form for \\spad{f} superscripted by \\spad{n}.")) (|sub| (($ $ $) "\\spad{sub(f,n)} creates a form for \\spad{f} subscripted by \\spad{n}.")) (|binomial| (($ $ $) "\\spad{binomial(n,m)} creates a form for the binomial coefficient of \\spad{n} and \\spad{m}.")) (|differentiate| (($ $ (|NonNegativeInteger|)) "\\spad{differentiate(f,n)} creates a form for the \\spad{n}th derivative of \\spad{f},{} \\spadignore{e.g.} \\spad{f'},{} \\spad{f''},{} \\spad{f'''},{} \"f super \\spad{iv}\".")) (|rarrow| (($ $ $) "\\spad{rarrow(f,g)} creates a form for the mapping \\spad{f -> g}.")) (|assign| (($ $ $) "\\spad{assign(f,g)} creates a form for the assignment \\spad{f := g}.")) (|slash| (($ $ $) "\\spad{slash(f,g)} creates a form for the horizontal fraction of \\spad{f} over \\spad{g}.")) (|over| (($ $ $) "\\spad{over(f,g)} creates a form for the vertical fraction of \\spad{f} over \\spad{g}.")) (|root| (($ $ $) "\\spad{root(f,n)} creates a form for the \\spad{n}th root of form \\spad{f}.") (($ $) "\\spad{root(f)} creates a form for the square root of form \\spad{f}.")) (|zag| (($ $ $) "\\spad{zag(f,g)} creates a form for the continued fraction form for \\spad{f} over \\spad{g}.")) (|matrix| (($ (|List| (|List| $))) "\\spad{matrix(llf)} makes \\spad{llf} (a list of lists of forms) into a form which displays as a matrix.")) (|box| (($ $) "\\spad{box(f)} encloses \\spad{f} in a box.")) (|label| (($ $ $) "\\spad{label(n,f)} gives form \\spad{f} an equation label \\spad{n}.")) (|string| (($ $) "\\spad{string(f)} creates \\spad{f} with string quotes.")) (|elt| (($ $ (|List| $)) "\\spad{elt(op,l)} creates a form for application of \\spad{op} to list of arguments \\spad{l}.")) (|infix?| (((|Boolean|) $) "\\spad{infix?(op)} returns \\spad{true} if \\spad{op} is an infix operator,{} and \\spad{false} otherwise.")) (|postfix| (($ $ $) "\\spad{postfix(op, a)} creates a form which prints as: a \\spad{op}.")) (|infix| (($ $ $ $) "\\spad{infix(op, a, b)} creates a form which prints as: a \\spad{op} \\spad{b}.") (($ $ (|List| $)) "\\spad{infix(f,l)} creates a form depicting the \\spad{n}-ary application of infix operation \\spad{f} to a tuple of arguments \\spad{l}.")) (|prefix| (($ $ (|List| $)) "\\spad{prefix(f,l)} creates a form depicting the \\spad{n}-ary prefix application of \\spad{f} to a tuple of arguments given by list \\spad{l}.")) (|vconcat| (($ (|List| $)) "\\spad{vconcat(u)} vertically concatenates all forms in list \\spad{u}.") (($ $ $) "\\spad{vconcat(f,g)} vertically concatenates forms \\spad{f} and \\spad{g}.")) (|hconcat| (($ (|List| $)) "\\spad{hconcat(u)} horizontally concatenates all forms in list \\spad{u}.") (($ $ $) "\\spad{hconcat(f,g)} horizontally concatenate forms \\spad{f} and \\spad{g}.")) (|center| (($ $) "\\spad{center(f)} centers form \\spad{f} in total space.") (($ $ (|Integer|)) "\\spad{center(f,n)} centers form \\spad{f} within space of width \\spad{n}.")) (|right| (($ $) "\\spad{right(f)} right-justifies form \\spad{f} in total space.") (($ $ (|Integer|)) "\\spad{right(f,n)} right-justifies form \\spad{f} within space of width \\spad{n}.")) (|left| (($ $) "\\spad{left(f)} left-justifies form \\spad{f} in total space.") (($ $ (|Integer|)) "\\spad{left(f,n)} left-justifies form \\spad{f} within space of width \\spad{n}.")) (|rspace| (($ (|Integer|) (|Integer|)) "\\spad{rspace(n,m)} creates rectangular white space,{} \\spad{n} wide by \\spad{m} high.")) (|vspace| (($ (|Integer|)) "\\spad{vspace(n)} creates white space of height \\spad{n}.")) (|hspace| (($ (|Integer|)) "\\spad{hspace(n)} creates white space of width \\spad{n}.")) (|superHeight| (((|Integer|) $) "\\spad{superHeight(f)} returns the height of form \\spad{f} above the base line.")) (|subHeight| (((|Integer|) $) "\\spad{subHeight(f)} returns the height of form \\spad{f} below the base line.")) (|height| (((|Integer|)) "\\spad{height()} returns the height of the display area (an integer).") (((|Integer|) $) "\\spad{height(f)} returns the height of form \\spad{f} (an integer).")) (|width| (((|Integer|)) "\\spad{width()} returns the width of the display area (an integer).") (((|Integer|) $) "\\spad{width(f)} returns the width of form \\spad{f} (an integer).")) (|doubleFloatFormat| (((|String|) (|String|)) "change the output format for doublefloats using lisp format strings")) (|empty| (($) "\\spad{empty()} creates an empty form.")) (|outputForm| (($ (|DoubleFloat|)) "\\spad{outputForm(sf)} creates an form for small float \\spad{sf}.") (($ (|String|)) "\\spad{outputForm(s)} creates an form for string \\spad{s}.") (($ (|Symbol|)) "\\spad{outputForm(s)} creates an form for symbol \\spad{s}.") (($ (|Integer|)) "\\spad{outputForm(n)} creates an form for integer \\spad{n}.")) (|messagePrint| (((|Void|) (|String|)) "\\spad{messagePrint(s)} prints \\spad{s} without string quotes. Note: \\spad{messagePrint(s)} is equivalent to \\spad{print message(s)}.")) (|message| (($ (|String|)) "\\spad{message(s)} creates an form with no string quotes from string \\spad{s}.")) (|print| (((|Void|) $) "\\spad{print(u)} prints the form \\spad{u}."))) 
NIL 
NIL 
(-773 |VariableList|) 
((|constructor| (NIL "This domain implements ordered variables")) (|variable| (((|Union| $ "failed") (|Symbol|)) "\\spad{variable(s)} returns a member of the variable set or failed"))) 
NIL 
NIL 
(-774) 
((|constructor| (NIL "This domain represents set of overloaded operators (in fact operator descriptors).")) (|members| (((|List| (|FunctionDescriptor|)) $) "\\spad{members(x)} returns the list of operator descriptors,{} \\spadignore{e.g.} signature and implementation slots,{} of the overload set \\spad{x}.")) (|name| (((|Identifier|) $) "\\spad{name(x)} returns the name of the overload set \\spad{x}."))) 
NIL 
NIL 
(-775 R |vl| |wl| |wtlevel|) 
((|constructor| (NIL "This domain represents truncated weighted polynomials over the \"Polynomial\" type. The variables must be specified,{} as must the weights. The representation is sparse in the sense that only non-zero terms are represented.")) (|changeWeightLevel| (((|Void|) (|NonNegativeInteger|)) "\\spad{changeWeightLevel(n)} This changes the weight level to the new value given: NB: previously calculated terms are not affected")) (/ (((|Union| $ "failed") $ $) "\\spad{x/y} division (only works if minimum weight of divisor is zero,{} and if \\spad{R} is a Field)"))) 
((-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-776 R PS UP) 
((|constructor| (NIL "\\indented{1}{This package computes reliable Pad&ea. approximants using} a generalized Viskovatov continued fraction algorithm. Authors: Burge,{} Hassner & Watt. Date Created: April 1987 Date Last Updated: 12 April 1990 Keywords: Pade,{} series Examples: References: \\indented{2}{\"Pade Approximants,{} Part I: Basic Theory\",{} Baker & Graves-Morris.}")) (|padecf| (((|Union| (|ContinuedFraction| |#3|) "failed") (|NonNegativeInteger|) (|NonNegativeInteger|) |#2| |#2|) "\\spad{padecf(nd,dd,ns,ds)} computes the approximant as a continued fraction of polynomials (if it exists) for arguments \\spad{nd} (numerator degree of approximant),{} \\spad{dd} (denominator degree of approximant),{} \\spad{ns} (numerator series of function),{} and \\spad{ds} (denominator series of function).")) (|pade| (((|Union| (|Fraction| |#3|) "failed") (|NonNegativeInteger|) (|NonNegativeInteger|) |#2| |#2|) "\\spad{pade(nd,dd,ns,ds)} computes the approximant as a quotient of polynomials (if it exists) for arguments \\spad{nd} (numerator degree of approximant),{} \\spad{dd} (denominator degree of approximant),{} \\spad{ns} (numerator series of function),{} and \\spad{ds} (denominator series of function)."))) 
NIL 
NIL 
(-777 R |x| |pt|) 
((|constructor| (NIL "\\indented{1}{This package computes reliable Pad&ea. approximants using} a generalized Viskovatov continued fraction algorithm. Authors: Trager,{}Burge,{} Hassner & Watt. Date Created: April 1987 Date Last Updated: 12 April 1990 Keywords: Pade,{} series Examples: References: \\indented{2}{\"Pade Approximants,{} Part I: Basic Theory\",{} Baker & Graves-Morris.}")) (|pade| (((|Union| (|Fraction| (|UnivariatePolynomial| |#2| |#1|)) "failed") (|NonNegativeInteger|) (|NonNegativeInteger|) (|UnivariateTaylorSeries| |#1| |#2| |#3|)) "\\spad{pade(nd,dd,s)} computes the quotient of polynomials (if it exists) with numerator degree at most \\spad{nd} and denominator degree at most \\spad{dd} which matches the series \\spad{s} to order \\spad{nd + dd}.") (((|Union| (|Fraction| (|UnivariatePolynomial| |#2| |#1|)) "failed") (|NonNegativeInteger|) (|NonNegativeInteger|) (|UnivariateTaylorSeries| |#1| |#2| |#3|) (|UnivariateTaylorSeries| |#1| |#2| |#3|)) "\\spad{pade(nd,dd,ns,ds)} computes the approximant as a quotient of polynomials (if it exists) for arguments \\spad{nd} (numerator degree of approximant),{} \\spad{dd} (denominator degree of approximant),{} \\spad{ns} (numerator series of function),{} and \\spad{ds} (denominator series of function)."))) 
NIL 
NIL 
(-778 |p|) 
((|constructor| (NIL "Stream-based implementation of Zp: \\spad{p}-adic numbers are represented as sum(\\spad{i} = 0..,{} a[\\spad{i}] * p^i),{} where the a[\\spad{i}] lie in 0,{}1,{}...,{}(\\spad{p} - 1)."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-779 |p|) 
((|constructor| (NIL "This is the catefory of stream-based representations of \\indented{2}{the \\spad{p}-adic integers.}")) (|root| (($ (|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{root(f,a)} returns a root of the polynomial \\spad{f}. Argument \\spad{a} must be a root of \\spad{f} \\spad{(mod p)}.")) (|sqrt| (($ $ (|Integer|)) "\\spad{sqrt(b,a)} returns a square root of \\spad{b}. Argument \\spad{a} is a square root of \\spad{b} \\spad{(mod p)}.")) (|approximate| (((|Integer|) $ (|Integer|)) "\\spad{approximate(x,n)} returns an integer \\spad{y} such that \\spad{y = x (mod p^n)} when \\spad{n} is positive,{} and 0 otherwise.")) (|quotientByP| (($ $) "\\spad{quotientByP(x)} returns \\spad{b},{} where \\spad{x = a + b p}.")) (|moduloP| (((|Integer|) $) "\\spad{modulo(x)} returns a,{} where \\spad{x = a + b p}.")) (|modulus| (((|Integer|)) "\\spad{modulus()} returns the value of \\spad{p}.")) (|complete| (($ $) "\\spad{complete(x)} forces the computation of all digits.")) (|extend| (($ $ (|Integer|)) "\\spad{extend(x,n)} forces the computation of digits up to order \\spad{n}.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(x)} returns the exponent of the highest power of \\spad{p} dividing \\spad{x}.")) (|digits| (((|Stream| (|Integer|)) $) "\\spad{digits(x)} returns a stream of \\spad{p}-adic digits of \\spad{x}."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-780 |p|) 
((|constructor| (NIL "Stream-based implementation of Qp: numbers are represented as sum(\\spad{i} = \\spad{k}..,{} a[\\spad{i}] * p^i) where the a[\\spad{i}] lie in 0,{}1,{}...,{}(\\spad{p} - 1)."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-778 |#1|) (QUOTE (-821))) (|HasCategory| (-778 |#1|) (QUOTE (-950 (-1089)))) (|HasCategory| (-778 |#1|) (QUOTE (-118))) (|HasCategory| (-778 |#1|) (QUOTE (-120))) (|HasCategory| (-778 |#1|) (QUOTE (-553 (-473)))) (|HasCategory| (-778 |#1|) (QUOTE (-933))) (|HasCategory| (-778 |#1|) (QUOTE (-740))) (|HasCategory| (-778 |#1|) (QUOTE (-756))) (OR (|HasCategory| (-778 |#1|) (QUOTE (-740))) (|HasCategory| (-778 |#1|) (QUOTE (-756)))) (|HasCategory| (-778 |#1|) (QUOTE (-950 (-484)))) (|HasCategory| (-778 |#1|) (QUOTE (-1065))) (|HasCategory| (-778 |#1|) (QUOTE (-796 (-329)))) (|HasCategory| (-778 |#1|) (QUOTE (-796 (-484)))) (|HasCategory| (-778 |#1|) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-778 |#1|) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-778 |#1|) (QUOTE (-580 (-484)))) (|HasCategory| (-778 |#1|) (QUOTE (-189))) (|HasCategory| (-778 |#1|) (QUOTE (-811 (-1089)))) (|HasCategory| (-778 |#1|) (QUOTE (-190))) (|HasCategory| (-778 |#1|) (QUOTE (-809 (-1089)))) (|HasCategory| (-778 |#1|) (|%list| (QUOTE -455) (QUOTE (-1089)) (|%list| (QUOTE -778) (|devaluate| |#1|)))) (|HasCategory| (-778 |#1|) (|%list| (QUOTE -260) (|%list| (QUOTE -778) (|devaluate| |#1|)))) (|HasCategory| (-778 |#1|) (|%list| (QUOTE -241) (|%list| (QUOTE -778) (|devaluate| |#1|)) (|%list| (QUOTE -778) (|devaluate| |#1|)))) (|HasCategory| (-778 |#1|) (QUOTE (-258))) (|HasCategory| (-778 |#1|) (QUOTE (-483))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-778 |#1|) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-778 |#1|) (QUOTE (-821)))) (|HasCategory| (-778 |#1|) (QUOTE (-118))))) 
(-781 |p| PADIC) 
((|constructor| (NIL "This is the category of stream-based representations of Qp.")) (|removeZeroes| (($ (|Integer|) $) "\\spad{removeZeroes(n,x)} removes up to \\spad{n} leading zeroes from the \\spad{p}-adic rational \\spad{x}.") (($ $) "\\spad{removeZeroes(x)} removes leading zeroes from the representation of the \\spad{p}-adic rational \\spad{x}. A \\spad{p}-adic rational is represented by (1) an exponent and (2) a \\spad{p}-adic integer which may have leading zero digits. When the \\spad{p}-adic integer has a leading zero digit,{} a 'leading zero' is removed from the \\spad{p}-adic rational as follows: the number is rewritten by increasing the exponent by 1 and dividing the \\spad{p}-adic integer by \\spad{p}. Note: \\spad{removeZeroes(f)} removes all leading zeroes from \\spad{f}.")) (|continuedFraction| (((|ContinuedFraction| (|Fraction| (|Integer|))) $) "\\spad{continuedFraction(x)} converts the \\spad{p}-adic rational number \\spad{x} to a continued fraction.")) (|approximate| (((|Fraction| (|Integer|)) $ (|Integer|)) "\\spad{approximate(x,n)} returns a rational number \\spad{y} such that \\spad{y = x (mod p^n)}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| |#2| (QUOTE (-950 (-1089)))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-933))) (|HasCategory| |#2| (QUOTE (-740))) (|HasCategory| |#2| (QUOTE (-756))) (OR (|HasCategory| |#2| (QUOTE (-740))) (|HasCategory| |#2| (QUOTE (-756)))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1065))) (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#2|))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))) (|HasCategory| |#2| (|%list| (QUOTE -241) (|devaluate| |#2|) (|devaluate| |#2|))) (|HasCategory| |#2| (QUOTE (-258))) (|HasCategory| |#2| (QUOTE (-483))) (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#2| (QUOTE (-118))))) 
(-782 S T$) 
((|constructor| (NIL "\\indented{1}{This domain provides a very simple representation} of the notion of `pair of objects'. It does not try to achieve all possible imaginable things.")) (|second| ((|#2| $) "\\spad{second(p)} extracts the second components of `p'.")) (|first| ((|#1| $) "\\spad{first(p)} extracts the first component of `p'.")) (|construct| (($ |#1| |#2|) "\\spad{construct(s,t)} is same as pair(\\spad{s},{}\\spad{t}),{} with syntactic sugar.")) (|pair| (($ |#1| |#2|) "\\spad{pair(s,t)} returns a pair object composed of `s' and `t'."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-1013))))) (-12 (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772)))))) 
(-783) 
((|constructor| (NIL "This domain describes four groups of color shades (palettes).")) (|shade| (((|Integer|) $) "\\spad{shade(p)} returns the shade index of the indicated palette \\spad{p}.")) (|hue| (((|Color|) $) "\\spad{hue(p)} returns the hue field of the indicated palette \\spad{p}.")) (|light| (($ (|Color|)) "\\spad{light(c)} sets the shade of a hue,{} \\spad{c},{} to it's highest value.")) (|pastel| (($ (|Color|)) "\\spad{pastel(c)} sets the shade of a hue,{} \\spad{c},{} above bright,{} but below light.")) (|bright| (($ (|Color|)) "\\spad{bright(c)} sets the shade of a hue,{} \\spad{c},{} above dim,{} but below pastel.")) (|dim| (($ (|Color|)) "\\spad{dim(c)} sets the shade of a hue,{} \\spad{c},{} above dark,{} but below bright.")) (|dark| (($ (|Color|)) "\\spad{dark(c)} sets the shade of the indicated hue of \\spad{c} to it's lowest value."))) 
NIL 
NIL 
(-784) 
((|constructor| (NIL "This package provides a coerce from polynomials over algebraic numbers to \\spadtype{Expression AlgebraicNumber}.")) (|coerce| (((|Expression| (|Integer|)) (|Fraction| (|Polynomial| (|AlgebraicNumber|)))) "\\spad{coerce(rf)} converts \\spad{rf},{} a fraction of polynomial \\spad{p} with algebraic number coefficients to \\spadtype{Expression Integer}.") (((|Expression| (|Integer|)) (|Polynomial| (|AlgebraicNumber|))) "\\spad{coerce(p)} converts the polynomial \\spad{p} with algebraic number coefficients to \\spadtype{Expression Integer}."))) 
NIL 
NIL 
(-785) 
((|constructor| (NIL "Representation of parameters to functions or constructors. For the most part,{} they are Identifiers. However,{} in very cases,{} they are \"flags\",{} \\spadignore{e.g.} string literals.")) (|autoCoerce| (((|String|) $) "\\spad{autoCoerce(x)@String} implicitly coerce the object \\spad{x} to \\spadtype{String}. This function is left at the discretion of the compiler.") (((|Identifier|) $) "\\spad{autoCoerce(x)@Identifier} implicitly coerce the object \\spad{x} to \\spadtype{Identifier}. This function is left at the discretion of the compiler.")) (|case| (((|Boolean|) $ (|[\|\|]| (|String|))) "\\spad{x case String} if the parameter AST object \\spad{x} designates a flag.") (((|Boolean|) $ (|[\|\|]| (|Identifier|))) "\\spad{x case Identifier} if the parameter AST object \\spad{x} designates an \\spadtype{Identifier}."))) 
NIL 
NIL 
(-786 CF1 CF2) 
((|constructor| (NIL "This package \\undocumented")) (|map| (((|ParametricPlaneCurve| |#2|) (|Mapping| |#2| |#1|) (|ParametricPlaneCurve| |#1|)) "\\spad{map(f,x)} \\undocumented"))) 
NIL 
NIL 
(-787 |ComponentFunction|) 
((|constructor| (NIL "ParametricPlaneCurve is used for plotting parametric plane curves in the affine plane.")) (|coordinate| ((|#1| $ (|NonNegativeInteger|)) "\\spad{coordinate(c,i)} returns a coordinate function for \\spad{c} using 1-based indexing according to \\spad{i}. This indicates what the function for the coordinate component \\spad{i} of the plane curve is.")) (|curve| (($ |#1| |#1|) "\\spad{curve(c1,c2)} creates a plane curve from 2 component functions \\spad{c1} and \\spad{c2}."))) 
NIL 
NIL 
(-788 CF1 CF2) 
((|constructor| (NIL "This package \\undocumented")) (|map| (((|ParametricSpaceCurve| |#2|) (|Mapping| |#2| |#1|) (|ParametricSpaceCurve| |#1|)) "\\spad{map(f,x)} \\undocumented"))) 
NIL 
NIL 
(-789 |ComponentFunction|) 
((|constructor| (NIL "ParametricSpaceCurve is used for plotting parametric space curves in affine 3-space.")) (|coordinate| ((|#1| $ (|NonNegativeInteger|)) "\\spad{coordinate(c,i)} returns a coordinate function of \\spad{c} using 1-based indexing according to \\spad{i}. This indicates what the function for the coordinate component,{} \\spad{i},{} of the space curve is.")) (|curve| (($ |#1| |#1| |#1|) "\\spad{curve(c1,c2,c3)} creates a space curve from 3 component functions \\spad{c1},{} \\spad{c2},{} and \\spad{c3}."))) 
NIL 
NIL 
(-790) 
((|constructor| (NIL "\\indented{1}{This package provides a simple Spad script parser.} Related Constructors: Syntax. See Also: Syntax.")) (|getSyntaxFormsFromFile| (((|List| (|Syntax|)) (|String|)) "\\spad{getSyntaxFormsFromFile(f)} parses the source file \\spad{f} (supposedly containing Spad scripts) and returns a List Syntax. The filename \\spad{f} is supposed to have the proper extension. Note that source location information is not part of result."))) 
NIL 
NIL 
(-791 CF1 CF2) 
((|constructor| (NIL "This package \\undocumented")) (|map| (((|ParametricSurface| |#2|) (|Mapping| |#2| |#1|) (|ParametricSurface| |#1|)) "\\spad{map(f,x)} \\undocumented"))) 
NIL 
NIL 
(-792 |ComponentFunction|) 
((|constructor| (NIL "ParametricSurface is used for plotting parametric surfaces in affine 3-space.")) (|coordinate| ((|#1| $ (|NonNegativeInteger|)) "\\spad{coordinate(s,i)} returns a coordinate function of \\spad{s} using 1-based indexing according to \\spad{i}. This indicates what the function for the coordinate component,{} \\spad{i},{} of the surface is.")) (|surface| (($ |#1| |#1| |#1|) "\\spad{surface(c1,c2,c3)} creates a surface from 3 parametric component functions \\spad{c1},{} \\spad{c2},{} and \\spad{c3}."))) 
NIL 
NIL 
(-793) 
((|constructor| (NIL "PartitionsAndPermutations contains functions for generating streams of integer partitions,{} and streams of sequences of integers composed from a multi-set.")) (|permutations| (((|Stream| (|List| (|Integer|))) (|Integer|)) "\\spad{permutations(n)} is the stream of permutations \\indented{1}{formed from \\spad{1,2,3,...,n}.}")) (|sequences| (((|Stream| (|List| (|Integer|))) (|List| (|Integer|))) "\\spad{sequences([l0,l1,l2,..,ln])} is the set of \\indented{1}{all sequences formed from} \\spad{l0} 0's,{}\\spad{l1} 1's,{}\\spad{l2} 2's,{}...,{}\\spad{ln} \\spad{n}'s.") (((|Stream| (|List| (|Integer|))) (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{sequences(l1,l2)} is the stream of all sequences that \\indented{1}{can be composed from the multiset defined from} \\indented{1}{two lists of integers \\spad{l1} and \\spad{l2}.} \\indented{1}{For example,{}the pair \\spad{([1,2,4],[2,3,5])} represents} \\indented{1}{multi-set with 1 \\spad{2},{} 2 \\spad{3}'s,{} and 4 \\spad{5}'s.}")) (|shufflein| (((|Stream| (|List| (|Integer|))) (|List| (|Integer|)) (|Stream| (|List| (|Integer|)))) "\\spad{shufflein(l,st)} maps shuffle(\\spad{l},{}\\spad{u}) on to all \\indented{1}{members \\spad{u} of \\spad{st},{} concatenating the results.}")) (|shuffle| (((|Stream| (|List| (|Integer|))) (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{shuffle(l1,l2)} forms the stream of all shuffles of \\spad{l1} \\indented{1}{and \\spad{l2},{} \\spadignore{i.e.} all sequences that can be formed from} \\indented{1}{merging \\spad{l1} and \\spad{l2}.}")) (|conjugates| (((|Stream| (|List| (|PositiveInteger|))) (|Stream| (|List| (|PositiveInteger|)))) "\\spad{conjugates(lp)} is the stream of conjugates of a stream \\indented{1}{of partitions \\spad{lp}.}")) (|conjugate| (((|List| (|PositiveInteger|)) (|List| (|PositiveInteger|))) "\\spad{conjugate(pt)} is the conjugate of the partition \\spad{pt}."))) 
NIL 
NIL 
(-794 R) 
((|constructor| (NIL "An object \\spad{S} is Patternable over an object \\spad{R} if \\spad{S} can lift the conversions from \\spad{R} into \\spadtype{Pattern(Integer)} and \\spadtype{Pattern(Float)} to itself."))) 
NIL 
NIL 
(-795 R S L) 
((|constructor| (NIL "A PatternMatchListResult is an object internally returned by the pattern matcher when matching on lists. It is either a failed match,{} or a pair of PatternMatchResult,{} one for atoms (elements of the list),{} and one for lists.")) (|lists| (((|PatternMatchResult| |#1| |#3|) $) "\\spad{lists(r)} returns the list of matches that match lists.")) (|atoms| (((|PatternMatchResult| |#1| |#2|) $) "\\spad{atoms(r)} returns the list of matches that match atoms (elements of the lists).")) (|makeResult| (($ (|PatternMatchResult| |#1| |#2|) (|PatternMatchResult| |#1| |#3|)) "\\spad{makeResult(r1,r2)} makes the combined result [\\spad{r1},{}\\spad{r2}].")) (|new| (($) "\\spad{new()} returns a new empty match result.")) (|failed| (($) "\\spad{failed()} returns a failed match.")) (|failed?| (((|Boolean|) $) "\\spad{failed?(r)} tests if \\spad{r} is a failed match."))) 
NIL 
NIL 
(-796 S) 
((|constructor| (NIL "A set \\spad{R} is PatternMatchable over \\spad{S} if elements of \\spad{R} can be matched to patterns over \\spad{S}.")) (|patternMatch| (((|PatternMatchResult| |#1| $) $ (|Pattern| |#1|) (|PatternMatchResult| |#1| $)) "\\spad{patternMatch(expr, pat, res)} matches the pattern \\spad{pat} to the expression \\spad{expr}. res contains the variables of \\spad{pat} which are already matched and their matches (necessary for recursion). Initially,{} res is just the result of \\spadfun{new} which is an empty list of matches."))) 
NIL 
NIL 
(-797 |Base| |Subject| |Pat|) 
((|constructor| (NIL "This package provides the top-level pattern macthing functions.")) (|Is| (((|PatternMatchResult| |#1| |#2|) |#2| |#3|) "\\spad{Is(expr, pat)} matches the pattern pat on the expression \\spad{expr} and returns a match of the form \\spad{[v1 = e1,...,vn = en]}; returns an empty match if \\spad{expr} is exactly equal to pat. returns a \\spadfun{failed} match if pat does not match \\spad{expr}.") (((|List| (|Equation| (|Polynomial| |#2|))) |#2| |#3|) "\\spad{Is(expr, pat)} matches the pattern pat on the expression \\spad{expr} and returns a list of matches \\spad{[v1 = e1,...,vn = en]}; returns an empty list if either \\spad{expr} is exactly equal to pat or if pat does not match \\spad{expr}.") (((|List| (|Equation| |#2|)) |#2| |#3|) "\\spad{Is(expr, pat)} matches the pattern pat on the expression \\spad{expr} and returns a list of matches \\spad{[v1 = e1,...,vn = en]}; returns an empty list if either \\spad{expr} is exactly equal to pat or if pat does not match \\spad{expr}.") (((|PatternMatchListResult| |#1| |#2| (|List| |#2|)) (|List| |#2|) |#3|) "\\spad{Is([e1,...,en], pat)} matches the pattern pat on the list of expressions \\spad{[e1,...,en]} and returns the result.")) (|is?| (((|Boolean|) (|List| |#2|) |#3|) "\\spad{is?([e1,...,en], pat)} tests if the list of expressions \\spad{[e1,...,en]} matches the pattern pat.") (((|Boolean|) |#2| |#3|) "\\spad{is?(expr, pat)} tests if the expression \\spad{expr} matches the pattern pat."))) 
NIL 
((-12 (-2560 (|HasCategory| |#2| (QUOTE (-950 (-1089))))) (-2560 (|HasCategory| |#2| (QUOTE (-961))))) (-12 (|HasCategory| |#2| (QUOTE (-961))) (-2560 (|HasCategory| |#2| (QUOTE (-950 (-1089)))))) (|HasCategory| |#2| (QUOTE (-950 (-1089))))) 
(-798 R S) 
((|constructor| (NIL "A PatternMatchResult is an object internally returned by the pattern matcher; It is either a failed match,{} or a list of matches of the form (var,{} expr) meaning that the variable var matches the expression expr.")) (|satisfy?| (((|Union| (|Boolean|) "failed") $ (|Pattern| |#1|)) "\\spad{satisfy?(r, p)} returns \\spad{true} if the matches satisfy the top-level predicate of \\spad{p},{} \\spad{false} if they don't,{} and \"failed\" if not enough variables of \\spad{p} are matched in \\spad{r} to decide.")) (|construct| (($ (|List| (|Record| (|:| |key| (|Symbol|)) (|:| |entry| |#2|)))) "\\spad{construct([v1,e1],...,[vn,en])} returns the match result containing the matches (\\spad{v1},{}\\spad{e1}),{}...,{}(vn,{}en).")) (|destruct| (((|List| (|Record| (|:| |key| (|Symbol|)) (|:| |entry| |#2|))) $) "\\spad{destruct(r)} returns the list of matches (var,{} expr) in \\spad{r}. Error: if \\spad{r} is a failed match.")) (|addMatchRestricted| (($ (|Pattern| |#1|) |#2| $ |#2|) "\\spad{addMatchRestricted(var, expr, r, val)} adds the match (\\spad{var},{} \\spad{expr}) in \\spad{r},{} provided that \\spad{expr} satisfies the predicates attached to \\spad{var},{} that \\spad{var} is not matched to another expression already,{} and that either \\spad{var} is an optional pattern variable or that \\spad{expr} is not equal to val (usually an identity).")) (|insertMatch| (($ (|Pattern| |#1|) |#2| $) "\\spad{insertMatch(var, expr, r)} adds the match (\\spad{var},{} \\spad{expr}) in \\spad{r},{} without checking predicates or previous matches for \\spad{var}.")) (|addMatch| (($ (|Pattern| |#1|) |#2| $) "\\spad{addMatch(var, expr, r)} adds the match (\\spad{var},{} \\spad{expr}) in \\spad{r},{} provided that \\spad{expr} satisfies the predicates attached to \\spad{var},{} and that \\spad{var} is not matched to another expression already.")) (|getMatch| (((|Union| |#2| "failed") (|Pattern| |#1|) $) "\\spad{getMatch(var, r)} returns the expression that \\spad{var} matches in the result \\spad{r},{} and \"failed\" if \\spad{var} is not matched in \\spad{r}.")) (|union| (($ $ $) "\\spad{union(a, b)} makes the set-union of two match results.")) (|new| (($) "\\spad{new()} returns a new empty match result.")) (|failed| (($) "\\spad{failed()} returns a failed match.")) (|failed?| (((|Boolean|) $) "\\spad{failed?(r)} tests if \\spad{r} is a failed match."))) 
NIL 
NIL 
(-799 R A B) 
((|constructor| (NIL "Lifts maps to pattern matching results.")) (|map| (((|PatternMatchResult| |#1| |#3|) (|Mapping| |#3| |#2|) (|PatternMatchResult| |#1| |#2|)) "\\spad{map(f, [(v1,a1),...,(vn,an)])} returns the matching result [(\\spad{v1},{}\\spad{f}(\\spad{a1})),{}...,{}(vn,{}\\spad{f}(an))]."))) 
NIL 
NIL 
(-800 R) 
((|constructor| (NIL "Patterns for use by the pattern matcher.")) (|optpair| (((|Union| (|List| $) "failed") (|List| $)) "\\spad{optpair(l)} returns \\spad{l} has the form \\spad{[a, b]} and a is optional,{} and \"failed\" otherwise.")) (|variables| (((|List| $) $) "\\spad{variables(p)} returns the list of matching variables appearing in \\spad{p}.")) (|getBadValues| (((|List| (|Any|)) $) "\\spad{getBadValues(p)} returns the list of \"bad values\" for \\spad{p}. Note: \\spad{p} is not allowed to match any of its \"bad values\".")) (|addBadValue| (($ $ (|Any|)) "\\spad{addBadValue(p, v)} adds \\spad{v} to the list of \"bad values\" for \\spad{p}. Note: \\spad{p} is not allowed to match any of its \"bad values\".")) (|resetBadValues| (($ $) "\\spad{resetBadValues(p)} initializes the list of \"bad values\" for \\spad{p} to \\spad{[]}. Note: \\spad{p} is not allowed to match any of its \"bad values\".")) (|hasTopPredicate?| (((|Boolean|) $) "\\spad{hasTopPredicate?(p)} tests if \\spad{p} has a top-level predicate.")) (|topPredicate| (((|Record| (|:| |var| (|List| (|Symbol|))) (|:| |pred| (|Any|))) $) "\\spad{topPredicate(x)} returns \\spad{[[a1,...,an], f]} where the top-level predicate of \\spad{x} is \\spad{f(a1,...,an)}. Note: \\spad{n} is 0 if \\spad{x} has no top-level predicate.")) (|setTopPredicate| (($ $ (|List| (|Symbol|)) (|Any|)) "\\spad{setTopPredicate(x, [a1,...,an], f)} returns \\spad{x} with the top-level predicate set to \\spad{f(a1,...,an)}.")) (|patternVariable| (($ (|Symbol|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\spad{patternVariable(x, c?, o?, m?)} creates a pattern variable \\spad{x},{} which is constant if \\spad{c? = true},{} optional if \\spad{o? = true},{} and multiple if \\spad{m? = true}.")) (|withPredicates| (($ $ (|List| (|Any|))) "\\spad{withPredicates(p, [p1,...,pn])} makes a copy of \\spad{p} and attaches the predicate \\spad{p1} and ... and pn to the copy,{} which is returned.")) (|setPredicates| (($ $ (|List| (|Any|))) "\\spad{setPredicates(p, [p1,...,pn])} attaches the predicate \\spad{p1} and ... and pn to \\spad{p}.")) (|predicates| (((|List| (|Any|)) $) "\\spad{predicates(p)} returns \\spad{[p1,...,pn]} such that the predicate attached to \\spad{p} is \\spad{p1} and ... and pn.")) (|hasPredicate?| (((|Boolean|) $) "\\spad{hasPredicate?(p)} tests if \\spad{p} has predicates attached to it.")) (|optional?| (((|Boolean|) $) "\\spad{optional?(p)} tests if \\spad{p} is a single matching variable which can match an identity.")) (|multiple?| (((|Boolean|) $) "\\spad{multiple?(p)} tests if \\spad{p} is a single matching variable allowing list matching or multiple term matching in a sum or product.")) (|generic?| (((|Boolean|) $) "\\spad{generic?(p)} tests if \\spad{p} is a single matching variable.")) (|constant?| (((|Boolean|) $) "\\spad{constant?(p)} tests if \\spad{p} contains no matching variables.")) (|symbol?| (((|Boolean|) $) "\\spad{symbol?(p)} tests if \\spad{p} is a symbol.")) (|quoted?| (((|Boolean|) $) "\\spad{quoted?(p)} tests if \\spad{p} is of the form 's for a symbol \\spad{s}.")) (|inR?| (((|Boolean|) $) "\\spad{inR?(p)} tests if \\spad{p} is an atom (\\spadignore{i.e.} an element of \\spad{R}).")) (|copy| (($ $) "\\spad{copy(p)} returns a recursive copy of \\spad{p}.")) (|convert| (($ (|List| $)) "\\spad{convert([a1,...,an])} returns the pattern \\spad{[a1,...,an]}.")) (|depth| (((|NonNegativeInteger|) $) "\\spad{depth(p)} returns the nesting level of \\spad{p}.")) (/ (($ $ $) "\\spad{a / b} returns the pattern \\spad{a / b}.")) (** (($ $ $) "\\spad{a ** b} returns the pattern \\spad{a ** b}.") (($ $ (|NonNegativeInteger|)) "\\spad{a ** n} returns the pattern \\spad{a ** n}.")) (* (($ $ $) "\\spad{a * b} returns the pattern \\spad{a * b}.")) (+ (($ $ $) "\\spad{a + b} returns the pattern \\spad{a + b}.")) (|elt| (($ (|BasicOperator|) (|List| $)) "\\spad{elt(op, [a1,...,an])} returns \\spad{op(a1,...,an)}.")) (|isPower| (((|Union| (|Record| (|:| |val| $) (|:| |exponent| $)) "failed") $) "\\spad{isPower(p)} returns \\spad{[a, b]} if \\spad{p = a ** b},{} and \"failed\" otherwise.")) (|isList| (((|Union| (|List| $) "failed") $) "\\spad{isList(p)} returns \\spad{[a1,...,an]} if \\spad{p = [a1,...,an]},{} \"failed\" otherwise.")) (|isQuotient| (((|Union| (|Record| (|:| |num| $) (|:| |den| $)) "failed") $) "\\spad{isQuotient(p)} returns \\spad{[a, b]} if \\spad{p = a / b},{} and \"failed\" otherwise.")) (|isExpt| (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|NonNegativeInteger|))) "failed") $) "\\spad{isExpt(p)} returns \\spad{[q, n]} if \\spad{n > 0} and \\spad{p = q ** n},{} and \"failed\" otherwise.")) (|isOp| (((|Union| (|Record| (|:| |op| (|BasicOperator|)) (|:| |arg| (|List| $))) "failed") $) "\\spad{isOp(p)} returns \\spad{[op, [a1,...,an]]} if \\spad{p = op(a1,...,an)},{} and \"failed\" otherwise.") (((|Union| (|List| $) "failed") $ (|BasicOperator|)) "\\spad{isOp(p, op)} returns \\spad{[a1,...,an]} if \\spad{p = op(a1,...,an)},{} and \"failed\" otherwise.")) (|isTimes| (((|Union| (|List| $) "failed") $) "\\spad{isTimes(p)} returns \\spad{[a1,...,an]} if \\spad{n > 1} and \\spad{p = a1 * ... * an},{} and \"failed\" otherwise.")) (|isPlus| (((|Union| (|List| $) "failed") $) "\\spad{isPlus(p)} returns \\spad{[a1,...,an]} if \\spad{n > 1} \\indented{1}{and \\spad{p = a1 + ... + an},{}} and \"failed\" otherwise.")) (|One| (($) "1")) (|Zero| (($) "0"))) 
NIL 
NIL 
(-801 R -2669) 
((|constructor| (NIL "Tools for patterns.")) (|badValues| (((|List| |#2|) (|Pattern| |#1|)) "\\spad{badValues(p)} returns the list of \"bad values\" for \\spad{p}; \\spad{p} is not allowed to match any of its \"bad values\".")) (|addBadValue| (((|Pattern| |#1|) (|Pattern| |#1|) |#2|) "\\spad{addBadValue(p, v)} adds \\spad{v} to the list of \"bad values\" for \\spad{p}; \\spad{p} is not allowed to match any of its \"bad values\".")) (|satisfy?| (((|Boolean|) (|List| |#2|) (|Pattern| |#1|)) "\\spad{satisfy?([v1,...,vn], p)} returns \\spad{f(v1,...,vn)} where \\spad{f} is the top-level predicate attached to \\spad{p}.") (((|Boolean|) |#2| (|Pattern| |#1|)) "\\spad{satisfy?(v, p)} returns \\spad{f}(\\spad{v}) where \\spad{f} is the predicate attached to \\spad{p}.")) (|predicate| (((|Mapping| (|Boolean|) |#2|) (|Pattern| |#1|)) "\\spad{predicate(p)} returns the predicate attached to \\spad{p},{} the constant function \\spad{true} if \\spad{p} has no predicates attached to it.")) (|suchThat| (((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Symbol|)) (|Mapping| (|Boolean|) (|List| |#2|))) "\\spad{suchThat(p, [a1,...,an], f)} returns a copy of \\spad{p} with the top-level predicate set to \\spad{f(a1,...,an)}.") (((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Mapping| (|Boolean|) |#2|))) "\\spad{suchThat(p, [f1,...,fn])} makes a copy of \\spad{p} and adds the predicate \\spad{f1} and ... and fn to the copy,{} which is returned.") (((|Pattern| |#1|) (|Pattern| |#1|) (|Mapping| (|Boolean|) |#2|)) "\\spad{suchThat(p, f)} makes a copy of \\spad{p} and adds the predicate \\spad{f} to the copy,{} which is returned."))) 
NIL 
NIL 
(-802 R S) 
((|constructor| (NIL "Lifts maps to patterns.")) (|map| (((|Pattern| |#2|) (|Mapping| |#2| |#1|) (|Pattern| |#1|)) "\\spad{map(f, p)} applies \\spad{f} to all the leaves of \\spad{p} and returns the result as a pattern over \\spad{S}."))) 
NIL 
NIL 
(-803 |VarSet|) 
((|constructor| (NIL "This domain provides the internal representation of polynomials in non-commutative variables written over the Poincare-Birkhoff-Witt basis. See the \\spadtype{XPBWPolynomial} domain constructor. See Free Lie Algebras by \\spad{C}. Reutenauer (Oxford science publications). \\newline Author: Michel Petitot (petitot@lifl.fr).")) (|varList| (((|List| |#1|) $) "\\spad{varList([l1]*[l2]*...[ln])} returns the list of variables in the word \\spad{l1*l2*...*ln}.")) (|retractable?| (((|Boolean|) $) "\\spad{retractable?([l1]*[l2]*...[ln])} returns \\spad{true} iff \\spad{n} equals \\spad{1}.")) (|rest| (($ $) "\\spad{rest([l1]*[l2]*...[ln])} returns the list \\spad{l2, .... ln}.")) (|ListOfTerms| (((|List| (|LyndonWord| |#1|)) $) "\\spad{ListOfTerms([l1]*[l2]*...[ln])} returns the list of words \\spad{l1, l2, .... ln}.")) (|length| (((|NonNegativeInteger|) $) "\\spad{length([l1]*[l2]*...[ln])} returns the length of the word \\spad{l1*l2*...*ln}.")) (|first| (((|LyndonWord| |#1|) $) "\\spad{first([l1]*[l2]*...[ln])} returns the Lyndon word \\spad{l1}.")) (|coerce| (($ |#1|) "\\spad{coerce(v)} return \\spad{v}") (((|OrderedFreeMonoid| |#1|) $) "\\spad{coerce([l1]*[l2]*...[ln])} returns the word \\spad{l1*l2*...*ln},{} where \\spad{[l_i]} is the backeted form of the Lyndon word \\spad{l_i}.")) (|One| (($) "\\spad{1} returns the empty list."))) 
NIL 
NIL 
(-804 UP R) 
((|constructor| (NIL "This package \\undocumented")) (|compose| ((|#1| |#1| |#1|) "\\spad{compose(p,q)} \\undocumented"))) 
NIL 
NIL 
(-805 A T$ S) 
((|constructor| (NIL "\\indented{2}{This category captures the interface of domains with a distinguished} \\indented{2}{operation named \\spad{differentiate} for partial differentiation with} \\indented{2}{respect to some domain of variables.} See Also: \\indented{2}{DifferentialDomain,{} PartialDifferentialSpace}")) (D ((|#2| $ |#3|) "\\spad{D(x,v)} is a shorthand for \\spad{differentiate(x,v)}")) (|differentiate| ((|#2| $ |#3|) "\\spad{differentiate(x,v)} computes the partial derivative of \\spad{x} with respect to \\spad{v}."))) 
NIL 
NIL 
(-806 T$ S) 
((|constructor| (NIL "\\indented{2}{This category captures the interface of domains with a distinguished} \\indented{2}{operation named \\spad{differentiate} for partial differentiation with} \\indented{2}{respect to some domain of variables.} See Also: \\indented{2}{DifferentialDomain,{} PartialDifferentialSpace}")) (D ((|#1| $ |#2|) "\\spad{D(x,v)} is a shorthand for \\spad{differentiate(x,v)}")) (|differentiate| ((|#1| $ |#2|) "\\spad{differentiate(x,v)} computes the partial derivative of \\spad{x} with respect to \\spad{v}."))) 
NIL 
NIL 
(-807 UP -3092) 
((|constructor| (NIL "This package \\undocumented")) (|rightFactorCandidate| ((|#1| |#1| (|NonNegativeInteger|)) "\\spad{rightFactorCandidate(p,n)} \\undocumented")) (|leftFactor| (((|Union| |#1| "failed") |#1| |#1|) "\\spad{leftFactor(p,q)} \\undocumented")) (|decompose| (((|Union| (|Record| (|:| |left| |#1|) (|:| |right| |#1|)) "failed") |#1| (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{decompose(up,m,n)} \\undocumented") (((|List| |#1|) |#1|) "\\spad{decompose(up)} \\undocumented"))) 
NIL 
NIL 
(-808 R S) 
((|constructor| (NIL "A partial differential \\spad{R}-module with differentiations indexed by a parameter type \\spad{S}. \\blankline"))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-809 S) 
((|constructor| (NIL "A partial differential ring with differentiations indexed by a parameter type \\spad{S}. \\blankline"))) 
((-3991 . T)) 
NIL 
(-810 A S) 
((|constructor| (NIL "\\indented{2}{This category captures the interface of domains stable by partial} \\indented{2}{differentiation with respect to variables from some domain.} See Also: \\indented{2}{PartialDifferentialDomain}")) (D (($ $ (|List| |#2|) (|List| (|NonNegativeInteger|))) "\\spad{D(x,[s1,...,sn],[n1,...,nn])} is a shorthand for \\spad{differentiate(x,[s1,...,sn],[n1,...,nn])}.") (($ $ |#2| (|NonNegativeInteger|)) "\\spad{D(x,s,n)} is a shorthand for \\spad{differentiate(x,s,n)}.") (($ $ (|List| |#2|)) "\\spad{D(x,[s1,...sn])} is a shorthand for \\spad{differentiate(x,[s1,...sn])}.")) (|differentiate| (($ $ (|List| |#2|) (|List| (|NonNegativeInteger|))) "\\spad{differentiate(x,[s1,...,sn],[n1,...,nn])} computes multiple partial derivatives,{} \\spadignore{i.e.}") (($ $ |#2| (|NonNegativeInteger|)) "\\spad{differentiate(x,s,n)} computes multiple partial derivatives,{} \\spadignore{i.e.} \\spad{n}\\spad{-}th derivative of \\spad{x} with respect to \\spad{s}.") (($ $ (|List| |#2|)) "\\spad{differentiate(x,[s1,...sn])} computes successive partial derivatives,{} \\spadignore{i.e.} \\spad{differentiate(...differentiate(x, s1)..., sn)}."))) 
NIL 
NIL 
(-811 S) 
((|constructor| (NIL "\\indented{2}{This category captures the interface of domains stable by partial} \\indented{2}{differentiation with respect to variables from some domain.} See Also: \\indented{2}{PartialDifferentialDomain}")) (D (($ $ (|List| |#1|) (|List| (|NonNegativeInteger|))) "\\spad{D(x,[s1,...,sn],[n1,...,nn])} is a shorthand for \\spad{differentiate(x,[s1,...,sn],[n1,...,nn])}.") (($ $ |#1| (|NonNegativeInteger|)) "\\spad{D(x,s,n)} is a shorthand for \\spad{differentiate(x,s,n)}.") (($ $ (|List| |#1|)) "\\spad{D(x,[s1,...sn])} is a shorthand for \\spad{differentiate(x,[s1,...sn])}.")) (|differentiate| (($ $ (|List| |#1|) (|List| (|NonNegativeInteger|))) "\\spad{differentiate(x,[s1,...,sn],[n1,...,nn])} computes multiple partial derivatives,{} \\spadignore{i.e.}") (($ $ |#1| (|NonNegativeInteger|)) "\\spad{differentiate(x,s,n)} computes multiple partial derivatives,{} \\spadignore{i.e.} \\spad{n}\\spad{-}th derivative of \\spad{x} with respect to \\spad{s}.") (($ $ (|List| |#1|)) "\\spad{differentiate(x,[s1,...sn])} computes successive partial derivatives,{} \\spadignore{i.e.} \\spad{differentiate(...differentiate(x, s1)..., sn)}."))) 
NIL 
NIL 
(-812 S) 
((|constructor| (NIL "\\indented{1}{A PendantTree(\\spad{S})is either a leaf? and is an \\spad{S} or has} a left and a right both PendantTree(\\spad{S})'s")) (|ptree| (($ $ $) "\\spad{ptree(x,y)} \\undocumented") (($ |#1|) "\\spad{ptree(s)} is a leaf? pendant tree"))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-813 S) 
((|constructor| (NIL "Permutation(\\spad{S}) implements the group of all bijections \\indented{2}{on a set \\spad{S},{} which move only a finite number of points.} \\indented{2}{A permutation is considered as a map from \\spad{S} into \\spad{S}. In particular} \\indented{2}{multiplication is defined as composition of maps:} \\indented{2}{{\\em pi1 * pi2 = pi1 o pi2}.} \\indented{2}{The internal representation of permuatations are two lists} \\indented{2}{of equal length representing preimages and images.}")) (|coerceImages| (($ (|List| |#1|)) "\\spad{coerceImages(ls)} coerces the list {\\em ls} to a permutation whose image is given by {\\em ls} and the preimage is fixed to be {\\em [1,...,n]}. Note: {coerceImages(\\spad{ls})=coercePreimagesImages([1,{}...,{}\\spad{n}],{}\\spad{ls})}. We assume that both preimage and image do not contain repetitions.")) (|fixedPoints| (((|Set| |#1|) $) "\\spad{fixedPoints(p)} returns the points fixed by the permutation \\spad{p}.")) (|sort| (((|List| $) (|List| $)) "\\spad{sort(lp)} sorts a list of permutations {\\em lp} according to cycle structure first according to length of cycles,{} second,{} if \\spad{S} has \\spadtype{Finite} or \\spad{S} has \\spadtype{OrderedSet} according to lexicographical order of entries in cycles of equal length.")) (|odd?| (((|Boolean|) $) "\\spad{odd?(p)} returns \\spad{true} if and only if \\spad{p} is an odd permutation \\spadignore{i.e.} {\\em sign(p)} is {\\em -1}.")) (|even?| (((|Boolean|) $) "\\spad{even?(p)} returns \\spad{true} if and only if \\spad{p} is an even permutation,{} \\spadignore{i.e.} {\\em sign(p)} is 1.")) (|sign| (((|Integer|) $) "\\spad{sign(p)} returns the signum of the permutation \\spad{p},{} \\spad{+1} or \\spad{-1}.")) (|numberOfCycles| (((|NonNegativeInteger|) $) "\\spad{numberOfCycles(p)} returns the number of non-trivial cycles of the permutation \\spad{p}.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(p)} returns the order of a permutation \\spad{p} as a group element.")) (|cyclePartition| (((|Partition|) $) "\\spad{cyclePartition(p)} returns the cycle structure of a permutation \\spad{p} including cycles of length 1 only if \\spad{S} is finite.")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(p)} retuns the number of points moved by the permutation \\spad{p}.")) (|coerceListOfPairs| (($ (|List| (|List| |#1|))) "\\spad{coerceListOfPairs(lls)} coerces a list of pairs {\\em lls} to a permutation. Error: if not consistent,{} \\spadignore{i.e.} the set of the first elements coincides with the set of second elements. coerce(\\spad{p}) generates output of the permutation \\spad{p} with domain OutputForm.")) (|coerce| (($ (|List| |#1|)) "\\spad{coerce(ls)} coerces a cycle {\\em ls},{} \\spadignore{i.e.} a list with not repetitions to a permutation,{} which maps {\\em ls.i} to {\\em ls.i+1},{} indices modulo the length of the list. Error: if repetitions occur.") (($ (|List| (|List| |#1|))) "\\spad{coerce(lls)} coerces a list of cycles {\\em lls} to a permutation,{} each cycle being a list with no repetitions,{} is coerced to the permutation,{} which maps {\\em ls.i} to {\\em ls.i+1},{} indices modulo the length of the list,{} then these permutations are mutiplied. Error: if repetitions occur in one cycle.")) (|coercePreimagesImages| (($ (|List| (|List| |#1|))) "\\spad{coercePreimagesImages(lls)} coerces the representation {\\em lls} of a permutation as a list of preimages and images to a permutation. We assume that both preimage and image do not contain repetitions.")) (|listRepresentation| (((|Record| (|:| |preimage| (|List| |#1|)) (|:| |image| (|List| |#1|))) $) "\\spad{listRepresentation(p)} produces a representation {\\em rep} of the permutation \\spad{p} as a list of preimages and images,{} \\spad{i}.\\spad{e} \\spad{p} maps {\\em (rep.preimage).k} to {\\em (rep.image).k} for all indices \\spad{k}. Elements of \\spad{S} not in {\\em (rep.preimage).k} are fixed points,{} and these are the only fixed points of the permutation."))) 
((-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-756)))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-756)))) 
(-814 |n| R) 
((|constructor| (NIL "Permanent implements the functions {\\em permanent},{} the permanent for square matrices.")) (|permanent| ((|#2| (|SquareMatrix| |#1| |#2|)) "\\spad{permanent(x)} computes the permanent of a square matrix \\spad{x}. The {\\em permanent} is equivalent to the \\spadfun{determinant} except that coefficients have no change of sign. This function is much more difficult to compute than the {\\em determinant}. The formula used is by \\spad{H}.\\spad{J}. Ryser,{} improved by [Nijenhuis and Wilf,{} Ch. 19]. Note: permanent(\\spad{x}) choose one of three algorithms,{} depending on the underlying ring \\spad{R} and on \\spad{n},{} the number of rows (and columns) of x:\\begin{items} \\item 1. if 2 has an inverse in \\spad{R} we can use the algorithm of \\indented{3}{[Nijenhuis and Wilf,{} ch.19,{}\\spad{p}.158]; if 2 has no inverse,{}} \\indented{3}{some modifications are necessary:} \\item 2. if {\\em n > 6} and \\spad{R} is an integral domain with characteristic \\indented{3}{different from 2 (the algorithm works if and only 2 is not a} \\indented{3}{zero-divisor of \\spad{R} and {\\em characteristic()\\$R ~= 2},{}} \\indented{3}{but how to check that for any given \\spad{R} ?),{}} \\indented{3}{the local function {\\em permanent2} is called;} \\item 3. else,{} the local function {\\em permanent3} is called \\indented{3}{(works for all commutative rings \\spad{R}).} \\end{items}"))) 
NIL 
NIL 
(-815 S) 
((|constructor| (NIL "PermutationCategory provides a categorial environment \\indented{1}{for subgroups of bijections of a set (\\spadignore{i.e.} permutations)}")) (< (((|Boolean|) $ $) "\\spad{p < q} is an order relation on permutations. Note: this order is only total if and only if \\spad{S} is totally ordered or \\spad{S} is finite.")) (|orbit| (((|Set| |#1|) $ |#1|) "\\spad{orbit(p, el)} returns the orbit of {\\em el} under the permutation \\spad{p},{} \\spadignore{i.e.} the set which is given by applications of the powers of \\spad{p} to {\\em el}.")) (|support| (((|Set| |#1|) $) "\\spad{support p} returns the set of points not fixed by the permutation \\spad{p}.")) (|cycles| (($ (|List| (|List| |#1|))) "\\spad{cycles(lls)} coerces a list list of cycles {\\em lls} to a permutation,{} each cycle being a list with not repetitions,{} is coerced to the permutation,{} which maps {\\em ls.i} to {\\em ls.i+1},{} indices modulo the length of the list,{} then these permutations are mutiplied. Error: if repetitions occur in one cycle.")) (|cycle| (($ (|List| |#1|)) "\\spad{cycle(ls)} coerces a cycle {\\em ls},{} \\spadignore{i.e.} a list with not repetitions to a permutation,{} which maps {\\em ls.i} to {\\em ls.i+1},{} indices modulo the length of the list. Error: if repetitions occur."))) 
((-3991 . T)) 
NIL 
(-816 S) 
((|constructor| (NIL "PermutationGroup implements permutation groups acting on a set \\spad{S},{} \\spadignore{i.e.} all subgroups of the symmetric group of \\spad{S},{} represented as a list of permutations (generators). Note that therefore the objects are not members of the \\Language category \\spadtype{Group}. Using the idea of base and strong generators by Sims,{} basic routines and algorithms are implemented so that the word problem for permutation groups can be solved.")) (|initializeGroupForWordProblem| (((|Void|) $ (|Integer|) (|Integer|)) "\\spad{initializeGroupForWordProblem(gp,m,n)} initializes the group {\\em gp} for the word problem. Notes: (1) with a small integer you get shorter words,{} but the routine takes longer than the standard routine for longer words. (2) be careful: invoking this routine will destroy the possibly stored information about your group (but will recompute it again). (3) users need not call this function normally for the soultion of the word problem.") (((|Void|) $) "\\spad{initializeGroupForWordProblem(gp)} initializes the group {\\em gp} for the word problem. Notes: it calls the other function of this name with parameters 0 and 1: {\\em initializeGroupForWordProblem(gp,0,1)}. Notes: (1) be careful: invoking this routine will destroy the possibly information about your group (but will recompute it again) (2) users need not call this function normally for the soultion of the word problem.")) (<= (((|Boolean|) $ $) "\\spad{gp1 <= gp2} returns \\spad{true} if and only if {\\em gp1} is a subgroup of {\\em gp2}. Note: because of a bug in the parser you have to call this function explicitly by {\\em gp1 <=\\$(PERMGRP S) gp2}.")) (< (((|Boolean|) $ $) "\\spad{gp1 < gp2} returns \\spad{true} if and only if {\\em gp1} is a proper subgroup of {\\em gp2}.")) (|support| (((|Set| |#1|) $) "\\spad{support(gp)} returns the points moved by the group {\\em gp}.")) (|wordInGenerators| (((|List| (|NonNegativeInteger|)) (|Permutation| |#1|) $) "\\spad{wordInGenerators(p,gp)} returns the word for the permutation \\spad{p} in the original generators of the group {\\em gp},{} represented by the indices of the list,{} given by {\\em generators}.")) (|wordInStrongGenerators| (((|List| (|NonNegativeInteger|)) (|Permutation| |#1|) $) "\\spad{wordInStrongGenerators(p,gp)} returns the word for the permutation \\spad{p} in the strong generators of the group {\\em gp},{} represented by the indices of the list,{} given by {\\em strongGenerators}.")) (|member?| (((|Boolean|) (|Permutation| |#1|) $) "\\spad{member?(pp,gp)} answers the question,{} whether the permutation {\\em pp} is in the group {\\em gp} or not.")) (|orbits| (((|Set| (|Set| |#1|)) $) "\\spad{orbits(gp)} returns the orbits of the group {\\em gp},{} \\spadignore{i.e.} it partitions the (finite) of all moved points.")) (|orbit| (((|Set| (|List| |#1|)) $ (|List| |#1|)) "\\spad{orbit(gp,ls)} returns the orbit of the ordered list {\\em ls} under the group {\\em gp}. Note: return type is \\spad{L} \\spad{L} \\spad{S} temporarily because FSET \\spad{L} \\spad{S} has an error.") (((|Set| (|Set| |#1|)) $ (|Set| |#1|)) "\\spad{orbit(gp,els)} returns the orbit of the unordered set {\\em els} under the group {\\em gp}.") (((|Set| |#1|) $ |#1|) "\\spad{orbit(gp,el)} returns the orbit of the element {\\em el} under the group {\\em gp},{} \\spadignore{i.e.} the set of all points gained by applying each group element to {\\em el}.")) (|permutationGroup| (($ (|List| (|Permutation| |#1|))) "\\spad{permutationGroup(ls)} coerces a list of permutations {\\em ls} to the group generated by this list.")) (|wordsForStrongGenerators| (((|List| (|List| (|NonNegativeInteger|))) $) "\\spad{wordsForStrongGenerators(gp)} returns the words for the strong generators of the group {\\em gp} in the original generators of {\\em gp},{} represented by their indices in the list,{} given by {\\em generators}.")) (|strongGenerators| (((|List| (|Permutation| |#1|)) $) "\\spad{strongGenerators(gp)} returns strong generators for the group {\\em gp}.")) (|base| (((|List| |#1|) $) "\\spad{base(gp)} returns a base for the group {\\em gp}.")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(gp)} returns the number of points moved by all permutations of the group {\\em gp}.")) (|order| (((|NonNegativeInteger|) $) "\\spad{order(gp)} returns the order of the group {\\em gp}.")) (|random| (((|Permutation| |#1|) $) "\\spad{random(gp)} returns a random product of maximal 20 generators of the group {\\em gp}. Note: {\\em random(gp)=random(gp,20)}.") (((|Permutation| |#1|) $ (|Integer|)) "\\spad{random(gp,i)} returns a random product of maximal \\spad{i} generators of the group {\\em gp}.")) (|elt| (((|Permutation| |#1|) $ (|NonNegativeInteger|)) "\\spad{elt(gp,i)} returns the \\spad{i}-th generator of the group {\\em gp}.")) (|generators| (((|List| (|Permutation| |#1|)) $) "\\spad{generators(gp)} returns the generators of the group {\\em gp}.")) (|coerce| (($ (|List| (|Permutation| |#1|))) "\\spad{coerce(ls)} coerces a list of permutations {\\em ls} to the group generated by this list.") (((|List| (|Permutation| |#1|)) $) "\\spad{coerce(gp)} returns the generators of the group {\\em gp}."))) 
NIL 
NIL 
(-817 |p|) 
((|constructor| (NIL "PrimeField(\\spad{p}) implements the field with \\spad{p} elements if \\spad{p} is a prime number. Error: if \\spad{p} is not prime. Note: this domain does not check that argument is a prime."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| $ (QUOTE (-120))) (|HasCategory| $ (QUOTE (-118))) (|HasCategory| $ (QUOTE (-319)))) 
(-818 R E |VarSet| S) 
((|constructor| (NIL "PolynomialFactorizationByRecursion(\\spad{R},{}\\spad{E},{}\\spad{VarSet},{}\\spad{S}) is used for factorization of sparse univariate polynomials over a domain \\spad{S} of multivariate polynomials over \\spad{R}.")) (|factorSFBRlcUnit| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|List| |#3|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{factorSFBRlcUnit(p)} returns the square free factorization of polynomial \\spad{p} (see \\spadfun{factorSquareFreeByRecursion}{PolynomialFactorizationByRecursionUnivariate}) in the case where the leading coefficient of \\spad{p} is a unit.")) (|bivariateSLPEBR| (((|Union| (|List| (|SparseUnivariatePolynomial| |#4|)) "failed") (|List| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|) |#3|) "\\spad{bivariateSLPEBR(lp,p,v)} implements the bivariate case of \\spadfunFrom{solveLinearPolynomialEquationByRecursion}{PolynomialFactorizationByRecursionUnivariate}; its implementation depends on \\spad{R}")) (|randomR| ((|#1|) "\\spad{randomR produces} a random element of \\spad{R}")) (|factorSquareFreeByRecursion| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|)) "\\spad{factorSquareFreeByRecursion(p)} returns the square free factorization of \\spad{p}. This functions performs the recursion step for factorSquareFreePolynomial,{} as defined in \\spadfun{PolynomialFactorizationExplicit} category (see \\spadfun{factorSquareFreePolynomial}).")) (|factorByRecursion| (((|Factored| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|)) "\\spad{factorByRecursion(p)} factors polynomial \\spad{p}. This function performs the recursion step for factorPolynomial,{} as defined in \\spadfun{PolynomialFactorizationExplicit} category (see \\spadfun{factorPolynomial})")) (|solveLinearPolynomialEquationByRecursion| (((|Union| (|List| (|SparseUnivariatePolynomial| |#4|)) "failed") (|List| (|SparseUnivariatePolynomial| |#4|)) (|SparseUnivariatePolynomial| |#4|)) "\\spad{solveLinearPolynomialEquationByRecursion([p1,...,pn],p)} returns the list of polynomials \\spad{[q1,...,qn]} such that \\spad{sum qi/pi = p / prod pi},{} a recursion step for solveLinearPolynomialEquation as defined in \\spadfun{PolynomialFactorizationExplicit} category (see \\spadfun{solveLinearPolynomialEquation}). If no such list of \\spad{qi} exists,{} then \"failed\" is returned."))) 
NIL 
NIL 
(-819 R S) 
((|constructor| (NIL "\\indented{1}{PolynomialFactorizationByRecursionUnivariate} \\spad{R} is a \\spadfun{PolynomialFactorizationExplicit} domain,{} \\spad{S} is univariate polynomials over \\spad{R} We are interested in handling SparseUnivariatePolynomials over \\spad{S},{} is a variable we shall call \\spad{z}")) (|factorSFBRlcUnit| (((|Factored| (|SparseUnivariatePolynomial| |#2|)) (|SparseUnivariatePolynomial| |#2|)) "\\spad{factorSFBRlcUnit(p)} returns the square free factorization of polynomial \\spad{p} (see \\spadfun{factorSquareFreeByRecursion}{PolynomialFactorizationByRecursionUnivariate}) in the case where the leading coefficient of \\spad{p} is a unit.")) (|randomR| ((|#1|) "\\spad{randomR()} produces a random element of \\spad{R}")) (|factorSquareFreeByRecursion| (((|Factored| (|SparseUnivariatePolynomial| |#2|)) (|SparseUnivariatePolynomial| |#2|)) "\\spad{factorSquareFreeByRecursion(p)} returns the square free factorization of \\spad{p}. This functions performs the recursion step for factorSquareFreePolynomial,{} as defined in \\spadfun{PolynomialFactorizationExplicit} category (see \\spadfun{factorSquareFreePolynomial}).")) (|factorByRecursion| (((|Factored| (|SparseUnivariatePolynomial| |#2|)) (|SparseUnivariatePolynomial| |#2|)) "\\spad{factorByRecursion(p)} factors polynomial \\spad{p}. This function performs the recursion step for factorPolynomial,{} as defined in \\spadfun{PolynomialFactorizationExplicit} category (see \\spadfun{factorPolynomial})")) (|solveLinearPolynomialEquationByRecursion| (((|Union| (|List| (|SparseUnivariatePolynomial| |#2|)) "failed") (|List| (|SparseUnivariatePolynomial| |#2|)) (|SparseUnivariatePolynomial| |#2|)) "\\spad{solveLinearPolynomialEquationByRecursion([p1,...,pn],p)} returns the list of polynomials \\spad{[q1,...,qn]} such that \\spad{sum qi/pi = p / prod pi},{} a recursion step for solveLinearPolynomialEquation as defined in \\spadfun{PolynomialFactorizationExplicit} category (see \\spadfun{solveLinearPolynomialEquation}). If no such list of \\spad{qi} exists,{} then \"failed\" is returned."))) 
NIL 
NIL 
(-820 S) 
((|constructor| (NIL "This is the category of domains that know \"enough\" about themselves in order to factor univariate polynomials over themselves. This will be used in future releases for supporting factorization over finitely generated coefficient fields,{} it is not yet available in the current release of axiom.")) (|charthRoot| (((|Maybe| $) $) "\\spad{charthRoot(r)} returns the \\spad{p}\\spad{-}th root of \\spad{r},{} or \\spad{nothing} if none exists in the domain.")) (|conditionP| (((|Union| (|Vector| $) "failed") (|Matrix| $)) "\\spad{conditionP(m)} returns a vector of elements,{} not all zero,{} whose \\spad{p}\\spad{-}th powers (\\spad{p} is the characteristic of the domain) are a solution of the homogenous linear system represented by \\spad{m},{} or \"failed\" is there is no such vector.")) (|solveLinearPolynomialEquation| (((|Union| (|List| (|SparseUnivariatePolynomial| $)) "failed") (|List| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{solveLinearPolynomialEquation([f1, ..., fn], g)} (where the \\spad{fi} are relatively prime to each other) returns a list of \\spad{ai} such that \\spad{g/prod fi = sum ai/fi} or returns \"failed\" if no such list of \\spad{ai}'s exists.")) (|gcdPolynomial| (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)) "\\spad{gcdPolynomial(p,q)} returns the gcd of the univariate polynomials \\spad{p} qnd \\spad{q}.")) (|factorSquareFreePolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{factorSquareFreePolynomial(p)} factors the univariate polynomial \\spad{p} into irreducibles where \\spad{p} is known to be square free and primitive with respect to its main variable.")) (|factorPolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{factorPolynomial(p)} returns the factorization into irreducibles of the univariate polynomial \\spad{p}.")) (|squareFreePolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{squareFreePolynomial(p)} returns the square-free factorization of the univariate polynomial \\spad{p}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-118)))) 
(-821) 
((|constructor| (NIL "This is the category of domains that know \"enough\" about themselves in order to factor univariate polynomials over themselves. This will be used in future releases for supporting factorization over finitely generated coefficient fields,{} it is not yet available in the current release of axiom.")) (|charthRoot| (((|Maybe| $) $) "\\spad{charthRoot(r)} returns the \\spad{p}\\spad{-}th root of \\spad{r},{} or \\spad{nothing} if none exists in the domain.")) (|conditionP| (((|Union| (|Vector| $) "failed") (|Matrix| $)) "\\spad{conditionP(m)} returns a vector of elements,{} not all zero,{} whose \\spad{p}\\spad{-}th powers (\\spad{p} is the characteristic of the domain) are a solution of the homogenous linear system represented by \\spad{m},{} or \"failed\" is there is no such vector.")) (|solveLinearPolynomialEquation| (((|Union| (|List| (|SparseUnivariatePolynomial| $)) "failed") (|List| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{solveLinearPolynomialEquation([f1, ..., fn], g)} (where the \\spad{fi} are relatively prime to each other) returns a list of \\spad{ai} such that \\spad{g/prod fi = sum ai/fi} or returns \"failed\" if no such list of \\spad{ai}'s exists.")) (|gcdPolynomial| (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)) "\\spad{gcdPolynomial(p,q)} returns the gcd of the univariate polynomials \\spad{p} qnd \\spad{q}.")) (|factorSquareFreePolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{factorSquareFreePolynomial(p)} factors the univariate polynomial \\spad{p} into irreducibles where \\spad{p} is known to be square free and primitive with respect to its main variable.")) (|factorPolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{factorPolynomial(p)} returns the factorization into irreducibles of the univariate polynomial \\spad{p}.")) (|squareFreePolynomial| (((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)) "\\spad{squareFreePolynomial(p)} returns the square-free factorization of the univariate polynomial \\spad{p}."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-822 R0 -3092 UP UPUP R) 
((|constructor| (NIL "This package provides function for testing whether a divisor on a curve is a torsion divisor.")) (|torsionIfCan| (((|Union| (|Record| (|:| |order| (|NonNegativeInteger|)) (|:| |function| |#5|)) "failed") (|FiniteDivisor| |#2| |#3| |#4| |#5|)) "\\spad{torsionIfCan(f)}\\\\ undocumented")) (|torsion?| (((|Boolean|) (|FiniteDivisor| |#2| |#3| |#4| |#5|)) "\\spad{torsion?(f)} \\undocumented")) (|order| (((|Union| (|NonNegativeInteger|) "failed") (|FiniteDivisor| |#2| |#3| |#4| |#5|)) "\\spad{order(f)} \\undocumented"))) 
NIL 
NIL 
(-823 UP UPUP R) 
((|constructor| (NIL "This package provides function for testing whether a divisor on a curve is a torsion divisor.")) (|torsionIfCan| (((|Union| (|Record| (|:| |order| (|NonNegativeInteger|)) (|:| |function| |#3|)) "failed") (|FiniteDivisor| (|Fraction| (|Integer|)) |#1| |#2| |#3|)) "\\spad{torsionIfCan(f)} \\undocumented")) (|torsion?| (((|Boolean|) (|FiniteDivisor| (|Fraction| (|Integer|)) |#1| |#2| |#3|)) "\\spad{torsion?(f)} \\undocumented")) (|order| (((|Union| (|NonNegativeInteger|) "failed") (|FiniteDivisor| (|Fraction| (|Integer|)) |#1| |#2| |#3|)) "\\spad{order(f)} \\undocumented"))) 
NIL 
NIL 
(-824 UP UPUP) 
((|constructor| (NIL "\\indented{1}{Utilities for PFOQ and PFO} Author: Manuel Bronstein Date Created: 25 Aug 1988 Date Last Updated: 11 Jul 1990")) (|polyred| ((|#2| |#2|) "\\spad{polyred(u)} \\undocumented")) (|doubleDisc| (((|Integer|) |#2|) "\\spad{doubleDisc(u)} \\undocumented")) (|mix| (((|Integer|) (|List| (|Record| (|:| |den| (|Integer|)) (|:| |gcdnum| (|Integer|))))) "\\spad{mix(l)} \\undocumented")) (|badNum| (((|Integer|) |#2|) "\\spad{badNum(u)} \\undocumented") (((|Record| (|:| |den| (|Integer|)) (|:| |gcdnum| (|Integer|))) |#1|) "\\spad{badNum(p)} \\undocumented")) (|getGoodPrime| (((|PositiveInteger|) (|Integer|)) "\\spad{getGoodPrime n} returns the smallest prime not dividing \\spad{n}"))) 
NIL 
NIL 
(-825 R) 
((|constructor| (NIL "The domain \\spadtype{PartialFraction} implements partial fractions over a euclidean domain \\spad{R}. This requirement on the argument domain allows us to normalize the fractions. Of particular interest are the 2 forms for these fractions. The ``compact'' form has only one fractional term per prime in the denominator,{} while the ``p-adic'' form expands each numerator \\spad{p}-adically via the prime \\spad{p} in the denominator. For computational efficiency,{} the compact form is used,{} though the \\spad{p}-adic form may be gotten by calling the function \\spadfunFrom{padicFraction}{PartialFraction}. For a general euclidean domain,{} it is not known how to factor the denominator. Thus the function \\spadfunFrom{partialFraction}{PartialFraction} takes as its second argument an element of \\spadtype{Factored(R)}.")) (|wholePart| ((|#1| $) "\\spad{wholePart(p)} extracts the whole part of the partial fraction \\spad{p}.")) (|partialFraction| (($ |#1| (|Factored| |#1|)) "\\spad{partialFraction(numer,denom)} is the main function for constructing partial fractions. The second argument is the denominator and should be factored.")) (|padicFraction| (($ $) "\\spad{padicFraction(q)} expands the fraction \\spad{p}-adically in the primes \\spad{p} in the denominator of \\spad{q}. For example,{} \\spad{padicFraction(3/(2**2)) = 1/2 + 1/(2**2)}. Use \\spadfunFrom{compactFraction}{PartialFraction} to return to compact form.")) (|padicallyExpand| (((|SparseUnivariatePolynomial| |#1|) |#1| |#1|) "\\spad{padicallyExpand(p,x)} is a utility function that expands the second argument \\spad{x} ``p-adically'' in the first.")) (|numberOfFractionalTerms| (((|Integer|) $) "\\spad{numberOfFractionalTerms(p)} computes the number of fractional terms in \\spad{p}. This returns 0 if there is no fractional part.")) (|nthFractionalTerm| (($ $ (|Integer|)) "\\spad{nthFractionalTerm(p,n)} extracts the \\spad{n}th fractional term from the partial fraction \\spad{p}. This returns 0 if the index \\spad{n} is out of range.")) (|firstNumer| ((|#1| $) "\\spad{firstNumer(p)} extracts the numerator of the first fractional term. This returns 0 if there is no fractional part (use \\spadfunFrom{wholePart}{PartialFraction} to get the whole part).")) (|firstDenom| (((|Factored| |#1|) $) "\\spad{firstDenom(p)} extracts the denominator of the first fractional term. This returns 1 if there is no fractional part (use \\spadfunFrom{wholePart}{PartialFraction} to get the whole part).")) (|compactFraction| (($ $) "\\spad{compactFraction(p)} normalizes the partial fraction \\spad{p} to the compact representation. In this form,{} the partial fraction has only one fractional term per prime in the denominator.")) (|coerce| (($ (|Fraction| (|Factored| |#1|))) "\\spad{coerce(f)} takes a fraction with numerator and denominator in factored form and creates a partial fraction. It is necessary for the parts to be factored because it is not known in general how to factor elements of \\spad{R} and this is needed to decompose into partial fractions.") (((|Fraction| |#1|) $) "\\spad{coerce(p)} sums up the components of the partial fraction and returns a single fraction."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-826 R) 
((|constructor| (NIL "The package \\spadtype{PartialFractionPackage} gives an easier to use interfact the domain \\spadtype{PartialFraction}. The user gives a fraction of polynomials,{} and a variable and the package converts it to the proper datatype for the \\spadtype{PartialFraction} domain.")) (|partialFraction| (((|Any|) (|Polynomial| |#1|) (|Factored| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{partialFraction(num, facdenom, var)} returns the partial fraction decomposition of the rational function whose numerator is \\spad{num} and whose factored denominator is \\spad{facdenom} with respect to the variable var.") (((|Any|) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{partialFraction(rf, var)} returns the partial fraction decomposition of the rational function \\spad{rf} with respect to the variable var."))) 
NIL 
NIL 
(-827 E OV R P) 
((|gcdPrimitive| ((|#4| (|List| |#4|)) "\\spad{gcdPrimitive lp} computes the gcd of the list of primitive polynomials lp.") (((|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{gcdPrimitive(p,q)} computes the gcd of the primitive polynomials \\spad{p} and \\spad{q}.") ((|#4| |#4| |#4|) "\\spad{gcdPrimitive(p,q)} computes the gcd of the primitive polynomials \\spad{p} and \\spad{q}.")) (|gcd| (((|SparseUnivariatePolynomial| |#4|) (|List| (|SparseUnivariatePolynomial| |#4|))) "\\spad{gcd(lp)} computes the gcd of the list of polynomials \\spad{lp}.") (((|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|) (|SparseUnivariatePolynomial| |#4|)) "\\spad{gcd(p,q)} computes the gcd of the two polynomials \\spad{p} and \\spad{q}.") ((|#4| (|List| |#4|)) "\\spad{gcd(lp)} computes the gcd of the list of polynomials \\spad{lp}.") ((|#4| |#4| |#4|) "\\spad{gcd(p,q)} computes the gcd of the two polynomials \\spad{p} and \\spad{q}."))) 
NIL 
NIL 
(-828) 
((|constructor| (NIL "PermutationGroupExamples provides permutation groups for some classes of groups: symmetric,{} alternating,{} dihedral,{} cyclic,{} direct products of cyclic,{} which are in fact the finite abelian groups of symmetric groups called Young subgroups. Furthermore,{} Rubik's group as permutation group of 48 integers and a list of sporadic simple groups derived from the atlas of finite groups.")) (|youngGroup| (((|PermutationGroup| (|Integer|)) (|Partition|)) "\\spad{youngGroup(lambda)} constructs the direct product of the symmetric groups given by the parts of the partition {\\em lambda}.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{youngGroup([n1,...,nk])} constructs the direct product of the symmetric groups {\\em Sn1},{}...,{}{\\em Snk}.")) (|rubiksGroup| (((|PermutationGroup| (|Integer|))) "\\spad{rubiksGroup constructs} the permutation group representing Rubic's Cube acting on integers {\\em 10*i+j} for {\\em 1 <= i <= 6},{} {\\em 1 <= j <= 8}. The faces of Rubik's Cube are labelled in the obvious way Front,{} Right,{} Up,{} Down,{} Left,{} Back and numbered from 1 to 6 in this given ordering,{} the pieces on each face (except the unmoveable center piece) are clockwise numbered from 1 to 8 starting with the piece in the upper left corner. The moves of the cube are represented as permutations on these pieces,{} represented as a two digit integer {\\em ij} where \\spad{i} is the numer of theface (1 to 6) and \\spad{j} is the number of the piece on this face. The remaining ambiguities are resolved by looking at the 6 generators,{} which represent a 90 degree turns of the faces,{} or from the following pictorial description. Permutation group representing Rubic's Cube acting on integers 10*i+j for 1 <= \\spad{i} <= 6,{} 1 <= \\spad{j} \\spad{<=8}. \\blankline\\begin{verbatim}Rubik's Cube:   +-----+ +-- B   where: marks Side # :               / U   /|/              /     / |         F(ront)    <->    1      L -->  +-----+ R|         R(ight)    <->    2             |     |  +         U(p)       <->    3             |  F  | /          D(own)     <->    4             |     |/           L(eft)     <->    5             +-----+            B(ack)     <->    6                ^                |                DThe Cube's surface:                               The pieces on each side            +---+              (except the unmoveable center            |567|              piece) are clockwise numbered            |4U8|              from 1 to 8 starting with the            |321|              piece in the upper left        +---+---+---+          corner (see figure on the        |781|123|345|          left).  The moves of the cube        |6L2|8F4|2R6|          are represented as        |543|765|187|          permutations on these pieces.        +---+---+---+          Each of the pieces is            |123|              represented as a two digit            |8D4|              integer ij where i is the            |765|              # of the side ( 1 to 6 for            +---+              F to B (see table above ))            |567|              and j is the # of the piece.            |4B8|            |321|            +---+\\end{verbatim}")) (|janko2| (((|PermutationGroup| (|Integer|))) "\\spad{janko2 constructs} the janko group acting on the integers 1,{}...,{}100.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{janko2(li)} constructs the janko group acting on the 100 integers given in the list {\\em li}. Note: duplicates in the list will be removed. Error: if {\\em li} has less or more than 100 different entries")) (|mathieu24| (((|PermutationGroup| (|Integer|))) "\\spad{mathieu24 constructs} the mathieu group acting on the integers 1,{}...,{}24.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{mathieu24(li)} constructs the mathieu group acting on the 24 integers given in the list {\\em li}. Note: duplicates in the list will be removed. Error: if {\\em li} has less or more than 24 different entries.")) (|mathieu23| (((|PermutationGroup| (|Integer|))) "\\spad{mathieu23 constructs} the mathieu group acting on the integers 1,{}...,{}23.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{mathieu23(li)} constructs the mathieu group acting on the 23 integers given in the list {\\em li}. Note: duplicates in the list will be removed. Error: if {\\em li} has less or more than 23 different entries.")) (|mathieu22| (((|PermutationGroup| (|Integer|))) "\\spad{mathieu22 constructs} the mathieu group acting on the integers 1,{}...,{}22.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{mathieu22(li)} constructs the mathieu group acting on the 22 integers given in the list {\\em li}. Note: duplicates in the list will be removed. Error: if {\\em li} has less or more than 22 different entries.")) (|mathieu12| (((|PermutationGroup| (|Integer|))) "\\spad{mathieu12 constructs} the mathieu group acting on the integers 1,{}...,{}12.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{mathieu12(li)} constructs the mathieu group acting on the 12 integers given in the list {\\em li}. Note: duplicates in the list will be removed Error: if {\\em li} has less or more than 12 different entries.")) (|mathieu11| (((|PermutationGroup| (|Integer|))) "\\spad{mathieu11 constructs} the mathieu group acting on the integers 1,{}...,{}11.") (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{mathieu11(li)} constructs the mathieu group acting on the 11 integers given in the list {\\em li}. Note: duplicates in the list will be removed. error,{} if {\\em li} has less or more than 11 different entries.")) (|dihedralGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{dihedralGroup([i1,...,ik])} constructs the dihedral group of order 2k acting on the integers out of {\\em i1},{}...,{}{\\em ik}. Note: duplicates in the list will be removed.") (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) "\\spad{dihedralGroup(n)} constructs the dihedral group of order 2n acting on integers 1,{}...,{}\\spad{N}.")) (|cyclicGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{cyclicGroup([i1,...,ik])} constructs the cyclic group of order \\spad{k} acting on the integers {\\em i1},{}...,{}{\\em ik}. Note: duplicates in the list will be removed.") (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) "\\spad{cyclicGroup(n)} constructs the cyclic group of order \\spad{n} acting on the integers 1,{}...,{}\\spad{n}.")) (|abelianGroup| (((|PermutationGroup| (|Integer|)) (|List| (|PositiveInteger|))) "\\spad{abelianGroup([n1,...,nk])} constructs the abelian group that is the direct product of cyclic groups with order {\\em ni}.")) (|alternatingGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{alternatingGroup(li)} constructs the alternating group acting on the integers in the list {\\em li},{} generators are in general the {\\em n-2}-cycle {\\em (li.3,...,li.n)} and the 3-cycle {\\em (li.1,li.2,li.3)},{} if \\spad{n} is odd and product of the 2-cycle {\\em (li.1,li.2)} with {\\em n-2}-cycle {\\em (li.3,...,li.n)} and the 3-cycle {\\em (li.1,li.2,li.3)},{} if \\spad{n} is even. Note: duplicates in the list will be removed.") (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) "\\spad{alternatingGroup(n)} constructs the alternating group {\\em An} acting on the integers 1,{}...,{}\\spad{n},{} generators are in general the {\\em n-2}-cycle {\\em (3,...,n)} and the 3-cycle {\\em (1,2,3)} if \\spad{n} is odd and the product of the 2-cycle {\\em (1,2)} with {\\em n-2}-cycle {\\em (3,...,n)} and the 3-cycle {\\em (1,2,3)} if \\spad{n} is even.")) (|symmetricGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) "\\spad{symmetricGroup(li)} constructs the symmetric group acting on the integers in the list {\\em li},{} generators are the cycle given by {\\em li} and the 2-cycle {\\em (li.1,li.2)}. Note: duplicates in the list will be removed.") (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) "\\spad{symmetricGroup(n)} constructs the symmetric group {\\em Sn} acting on the integers 1,{}...,{}\\spad{n},{} generators are the {\\em n}-cycle {\\em (1,...,n)} and the 2-cycle {\\em (1,2)}."))) 
NIL 
NIL 
(-829 -3092) 
((|constructor| (NIL "Groebner functions for \\spad{P} \\spad{F} \\indented{2}{This package is an interface package to the groebner basis} package which allows you to compute groebner bases for polynomials in either lexicographic ordering or total degree ordering refined by reverse lex. The input is the ordinary polynomial type which is internally converted to a type with the required ordering. The resulting grobner basis is converted back to ordinary polynomials. The ordering among the variables is controlled by an explicit list of variables which is passed as a second argument. The coefficient domain is allowed to be any gcd domain,{} but the groebner basis is computed as if the polynomials were over a field.")) (|totalGroebner| (((|List| (|Polynomial| |#1|)) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|))) "\\spad{totalGroebner(lp,lv)} computes Groebner basis for the list of polynomials \\spad{lp} with the terms ordered first by total degree and then refined by reverse lexicographic ordering. The variables are ordered by their position in the list \\spad{lv}.")) (|lexGroebner| (((|List| (|Polynomial| |#1|)) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|))) "\\spad{lexGroebner(lp,lv)} computes Groebner basis for the list of polynomials \\spad{lp} in lexicographic order. The variables are ordered by their position in the list \\spad{lv}."))) 
NIL 
NIL 
(-830) 
((|constructor| (NIL "\\spadtype{PositiveInteger} provides functions for \\indented{2}{positive integers.}")) (|commutative| ((|attribute| "*") "\\spad{commutative(\"*\")} means multiplication is commutative : x*y = y*x")) (|gcd| (($ $ $) "\\spad{gcd(a,b)} computes the greatest common divisor of two positive integers \\spad{a} and \\spad{b}."))) 
(((-3996 "*") . T)) 
NIL 
(-831 R) 
((|constructor| (NIL "\\indented{1}{Provides a coercion from the symbolic fractions in \\%\\spad{pi} with} integer coefficients to any Expression type. Date Created: 21 Feb 1990 Date Last Updated: 21 Feb 1990")) (|coerce| (((|Expression| |#1|) (|Pi|)) "\\spad{coerce(f)} returns \\spad{f} as an Expression(\\spad{R})."))) 
NIL 
NIL 
(-832) 
((|constructor| (NIL "The category of constructive principal ideal domains,{} \\spadignore{i.e.} where a single generator can be constructively found for any ideal given by a finite set of generators. Note that this constructive definition only implies that finitely generated ideals are principal. It is not clear what we would mean by an infinitely generated ideal.")) (|expressIdealMember| (((|Maybe| (|List| $)) (|List| $) $) "\\spad{expressIdealMember([f1,...,fn],h)} returns a representation of \\spad{h} as a linear combination of the \\spad{fi} or \\spad{nothing} if \\spad{h} is not in the ideal generated by the \\spad{fi}.")) (|principalIdeal| (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) "\\spad{principalIdeal([f1,...,fn])} returns a record whose generator component is a generator of the ideal generated by \\spad{[f1,...,fn]} whose coef component satisfies \\spad{generator = sum (input.i * coef.i)}"))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-833 |xx| -3092) 
((|constructor| (NIL "This package exports interpolation algorithms")) (|interpolate| (((|SparseUnivariatePolynomial| |#2|) (|List| |#2|) (|List| |#2|)) "\\spad{interpolate(lf,lg)} \\undocumented") (((|UnivariatePolynomial| |#1| |#2|) (|UnivariatePolynomial| |#1| |#2|) (|List| |#2|) (|List| |#2|)) "\\spad{interpolate(u,lf,lg)} \\undocumented"))) 
NIL 
NIL 
(-834 -3092 P) 
((|constructor| (NIL "This package exports interpolation algorithms")) (|LagrangeInterpolation| ((|#2| (|List| |#1|) (|List| |#1|)) "\\spad{LagrangeInterpolation(l1,l2)} \\undocumented"))) 
NIL 
NIL 
(-835 R |Var| |Expon| GR) 
((|constructor| (NIL "Author: William Sit,{} spring 89")) (|inconsistent?| (((|Boolean|) (|List| (|Polynomial| |#1|))) "inconsistant?(pl) returns \\spad{true} if the system of equations \\spad{p} = 0 for \\spad{p} in pl is inconsistent. It is assumed that pl is a groebner basis.") (((|Boolean|) (|List| |#4|)) "inconsistant?(pl) returns \\spad{true} if the system of equations \\spad{p} = 0 for \\spad{p} in pl is inconsistent. It is assumed that pl is a groebner basis.")) (|sqfree| ((|#4| |#4|) "\\spad{sqfree(p)} returns the product of square free factors of \\spad{p}")) (|regime| (((|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|)))))))) (|Record| (|:| |det| |#4|) (|:| |rows| (|List| (|Integer|))) (|:| |cols| (|List| (|Integer|)))) (|Matrix| |#4|) (|List| (|Fraction| (|Polynomial| |#1|))) (|List| (|List| |#4|)) (|NonNegativeInteger|) (|NonNegativeInteger|) (|Integer|)) "\\spad{regime(y,c, w, p, r, rm, m)} returns a regime,{} a list of polynomials specifying the consistency conditions,{} a particular solution and basis representing the general solution of the parametric linear system \\spad{c} \\spad{z} = \\spad{w} on that regime. The regime returned depends on the subdeterminant \\spad{y}.det and the row and column indices. The solutions are simplified using the assumption that the system has rank \\spad{r} and maximum rank \\spad{rm}. The list \\spad{p} represents a list of list of factors of polynomials in a groebner basis of the ideal generated by higher order subdeterminants,{} and ius used for the simplification. The mode \\spad{m} distinguishes the cases when the system is homogeneous,{} or the right hand side is arbitrary,{} or when there is no new right hand side variables.")) (|redmat| (((|Matrix| |#4|) (|Matrix| |#4|) (|List| |#4|)) "\\spad{redmat(m,g)} returns a matrix whose entries are those of \\spad{m} modulo the ideal generated by the groebner basis \\spad{g}")) (|ParCond| (((|List| (|Record| (|:| |det| |#4|) (|:| |rows| (|List| (|Integer|))) (|:| |cols| (|List| (|Integer|))))) (|Matrix| |#4|) (|NonNegativeInteger|)) "\\spad{ParCond(m,k)} returns the list of all \\spad{k} by \\spad{k} subdeterminants in the matrix \\spad{m}")) (|overset?| (((|Boolean|) (|List| |#4|) (|List| (|List| |#4|))) "\\spad{overset?(s,sl)} returns \\spad{true} if \\spad{s} properly a sublist of a member of \\spad{sl}; otherwise it returns \\spad{false}")) (|nextSublist| (((|List| (|List| (|Integer|))) (|Integer|) (|Integer|)) "\\spad{nextSublist(n,k)} returns a list of \\spad{k}-subsets of {1,{} ...,{} \\spad{n}}.")) (|minset| (((|List| (|List| |#4|)) (|List| (|List| |#4|))) "\\spad{minset(sl)} returns the sublist of \\spad{sl} consisting of the minimal lists (with respect to inclusion) in the list \\spad{sl} of lists")) (|minrank| (((|NonNegativeInteger|) (|List| (|Record| (|:| |rank| (|NonNegativeInteger|)) (|:| |eqns| (|List| (|Record| (|:| |det| |#4|) (|:| |rows| (|List| (|Integer|))) (|:| |cols| (|List| (|Integer|)))))) (|:| |fgb| (|List| |#4|))))) "\\spad{minrank(r)} returns the minimum rank in the list \\spad{r} of regimes")) (|maxrank| (((|NonNegativeInteger|) (|List| (|Record| (|:| |rank| (|NonNegativeInteger|)) (|:| |eqns| (|List| (|Record| (|:| |det| |#4|) (|:| |rows| (|List| (|Integer|))) (|:| |cols| (|List| (|Integer|)))))) (|:| |fgb| (|List| |#4|))))) "\\spad{maxrank(r)} returns the maximum rank in the list \\spad{r} of regimes")) (|factorset| (((|List| |#4|) |#4|) "\\spad{factorset(p)} returns the set of irreducible factors of \\spad{p}.")) (|B1solve| (((|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|)))))) (|Record| (|:| |mat| (|Matrix| (|Fraction| (|Polynomial| |#1|)))) (|:| |vec| (|List| (|Fraction| (|Polynomial| |#1|)))) (|:| |rank| (|NonNegativeInteger|)) (|:| |rows| (|List| (|Integer|))) (|:| |cols| (|List| (|Integer|))))) "\\spad{B1solve(s)} solves the system (\\spad{s}.mat) \\spad{z} = \\spad{s}.vec for the variables given by the column indices of \\spad{s}.cols in terms of the other variables and the right hand side \\spad{s}.vec by assuming that the rank is \\spad{s}.rank,{} that the system is consistent,{} with the linearly independent equations indexed by the given row indices \\spad{s}.rows; the coefficients in \\spad{s}.mat involving parameters are treated as polynomials. B1solve(\\spad{s}) returns a particular solution to the system and a basis of the homogeneous system (\\spad{s}.mat) \\spad{z} = 0.")) (|redpps| (((|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|)))))) (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|)))))) (|List| |#4|)) "\\spad{redpps(s,g)} returns the simplified form of \\spad{s} after reducing modulo a groebner basis \\spad{g}")) (|ParCondList| (((|List| (|Record| (|:| |rank| (|NonNegativeInteger|)) (|:| |eqns| (|List| (|Record| (|:| |det| |#4|) (|:| |rows| (|List| (|Integer|))) (|:| |cols| (|List| (|Integer|)))))) (|:| |fgb| (|List| |#4|)))) (|Matrix| |#4|) (|NonNegativeInteger|)) "\\spad{ParCondList(c,r)} computes a list of subdeterminants of each rank >= \\spad{r} of the matrix \\spad{c} and returns a groebner basis for the ideal they generate")) (|hasoln| (((|Record| (|:| |sysok| (|Boolean|)) (|:| |z0| (|List| |#4|)) (|:| |n0| (|List| |#4|))) (|List| |#4|) (|List| |#4|)) "\\spad{hasoln(g, l)} tests whether the quasi-algebraic set defined by \\spad{p} = 0 for \\spad{p} in \\spad{g} and \\spad{q} ~= 0 for \\spad{q} in \\spad{l} is empty or not and returns a simplified definition of the quasi-algebraic set")) (|pr2dmp| ((|#4| (|Polynomial| |#1|)) "\\spad{pr2dmp(p)} converts \\spad{p} to target domain")) (|se2rfi| (((|List| (|Fraction| (|Polynomial| |#1|))) (|List| (|Symbol|))) "\\spad{se2rfi(l)} converts \\spad{l} to target domain")) (|dmp2rfi| (((|List| (|Fraction| (|Polynomial| |#1|))) (|List| |#4|)) "\\spad{dmp2rfi(l)} converts \\spad{l} to target domain") (((|Matrix| (|Fraction| (|Polynomial| |#1|))) (|Matrix| |#4|)) "\\spad{dmp2rfi(m)} converts \\spad{m} to target domain") (((|Fraction| (|Polynomial| |#1|)) |#4|) "\\spad{dmp2rfi(p)} converts \\spad{p} to target domain")) (|bsolve| (((|Record| (|:| |rgl| (|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|)))))))))) (|:| |rgsz| (|Integer|))) (|Matrix| |#4|) (|List| (|Fraction| (|Polynomial| |#1|))) (|NonNegativeInteger|) (|String|) (|Integer|)) "\\spad{bsolve(c, w, r, s, m)} returns a list of regimes and solutions of the system \\spad{c} \\spad{z} = \\spad{w} for ranks at least \\spad{r}; depending on the mode \\spad{m} chosen,{} it writes the output to a file given by the string \\spad{s}.")) (|rdregime| (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|String|)) "\\spad{rdregime(s)} reads in a list from a file with name \\spad{s}")) (|wrregime| (((|Integer|) (|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|String|)) "\\spad{wrregime(l,s)} writes a list of regimes to a file named \\spad{s} and returns the number of regimes written")) (|psolve| (((|Integer|) (|Matrix| |#4|) (|PositiveInteger|) (|String|)) "\\spad{psolve(c,k,s)} solves \\spad{c} \\spad{z} = 0 for all possible ranks >= \\spad{k} of the matrix \\spad{c},{} writes the results to a file named \\spad{s},{} and returns the number of regimes") (((|Integer|) (|Matrix| |#4|) (|List| (|Symbol|)) (|PositiveInteger|) (|String|)) "\\spad{psolve(c,w,k,s)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks >= \\spad{k} of the matrix \\spad{c} and indeterminate right hand side \\spad{w},{} writes the results to a file named \\spad{s},{} and returns the number of regimes") (((|Integer|) (|Matrix| |#4|) (|List| |#4|) (|PositiveInteger|) (|String|)) "\\spad{psolve(c,w,k,s)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks >= \\spad{k} of the matrix \\spad{c} and given right hand side \\spad{w},{} writes the results to a file named \\spad{s},{} and returns the number of regimes") (((|Integer|) (|Matrix| |#4|) (|String|)) "\\spad{psolve(c,s)} solves \\spad{c} \\spad{z} = 0 for all possible ranks of the matrix \\spad{c} and given right hand side vector \\spad{w},{} writes the results to a file named \\spad{s},{} and returns the number of regimes") (((|Integer|) (|Matrix| |#4|) (|List| (|Symbol|)) (|String|)) "\\spad{psolve(c,w,s)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks of the matrix \\spad{c} and indeterminate right hand side \\spad{w},{} writes the results to a file named \\spad{s},{} and returns the number of regimes") (((|Integer|) (|Matrix| |#4|) (|List| |#4|) (|String|)) "\\spad{psolve(c,w,s)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks of the matrix \\spad{c} and given right hand side vector \\spad{w},{} writes the results to a file named \\spad{s},{} and returns the number of regimes") (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|Matrix| |#4|) (|PositiveInteger|)) "\\spad{psolve(c)} solves the homogeneous linear system \\spad{c} \\spad{z} = 0 for all possible ranks >= \\spad{k} of the matrix \\spad{c}") (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|Matrix| |#4|) (|List| (|Symbol|)) (|PositiveInteger|)) "\\spad{psolve(c,w,k)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks >= \\spad{k} of the matrix \\spad{c} and indeterminate right hand side \\spad{w}") (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|Matrix| |#4|) (|List| |#4|) (|PositiveInteger|)) "\\spad{psolve(c,w,k)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks >= \\spad{k} of the matrix \\spad{c} and given right hand side vector \\spad{w}") (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|Matrix| |#4|)) "\\spad{psolve(c)} solves the homogeneous linear system \\spad{c} \\spad{z} = 0 for all possible ranks of the matrix \\spad{c}") (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|Matrix| |#4|) (|List| (|Symbol|))) "\\spad{psolve(c,w)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks of the matrix \\spad{c} and indeterminate right hand side \\spad{w}") (((|List| (|Record| (|:| |eqzro| (|List| |#4|)) (|:| |neqzro| (|List| |#4|)) (|:| |wcond| (|List| (|Polynomial| |#1|))) (|:| |bsoln| (|Record| (|:| |partsol| (|Vector| (|Fraction| (|Polynomial| |#1|)))) (|:| |basis| (|List| (|Vector| (|Fraction| (|Polynomial| |#1|))))))))) (|Matrix| |#4|) (|List| |#4|)) "\\spad{psolve(c,w)} solves \\spad{c} \\spad{z} = \\spad{w} for all possible ranks of the matrix \\spad{c} and given right hand side vector \\spad{w}"))) 
NIL 
NIL 
(-836) 
((|constructor| (NIL "The Plot domain supports plotting of functions defined over a real number system. A real number system is a model for the real numbers and as such may be an approximation. For example floating point numbers and infinite continued fractions. The facilities at this point are limited to 2-dimensional plots or either a single function or a parametric function.")) (|debug| (((|Boolean|) (|Boolean|)) "\\spad{debug(true)} turns debug mode on \\spad{debug(false)} turns debug mode off")) (|numFunEvals| (((|Integer|)) "\\spad{numFunEvals()} returns the number of points computed")) (|setAdaptive| (((|Boolean|) (|Boolean|)) "\\spad{setAdaptive(true)} turns adaptive plotting on \\spad{setAdaptive(false)} turns adaptive plotting off")) (|adaptive?| (((|Boolean|)) "\\spad{adaptive?()} determines whether plotting be done adaptively")) (|setScreenResolution| (((|Integer|) (|Integer|)) "\\spad{setScreenResolution(i)} sets the screen resolution to \\spad{i}")) (|screenResolution| (((|Integer|)) "\\spad{screenResolution()} returns the screen resolution")) (|setMaxPoints| (((|Integer|) (|Integer|)) "\\spad{setMaxPoints(i)} sets the maximum number of points in a plot to \\spad{i}")) (|maxPoints| (((|Integer|)) "\\spad{maxPoints()} returns the maximum number of points in a plot")) (|setMinPoints| (((|Integer|) (|Integer|)) "\\spad{setMinPoints(i)} sets the minimum number of points in a plot to \\spad{i}")) (|minPoints| (((|Integer|)) "\\spad{minPoints()} returns the minimum number of points in a plot")) (|tRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{tRange(p)} returns the range of the parameter in a parametric plot \\spad{p}")) (|refine| (($ $) "\\spad{refine(p)} performs a refinement on the plot \\spad{p}") (($ $ (|Segment| (|DoubleFloat|))) "\\spad{refine(x,r)} \\undocumented")) (|zoom| (($ $ (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{zoom(x,r,s)} \\undocumented") (($ $ (|Segment| (|DoubleFloat|))) "\\spad{zoom(x,r)} \\undocumented")) (|parametric?| (((|Boolean|) $) "\\spad{parametric? determines} whether it is a parametric plot?")) (|plotPolar| (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) "\\spad{plotPolar(f)} plots the polar curve \\spad{r = f(theta)} as theta ranges over the interval \\spad{[0,2*\\%pi]}; this is the same as the parametric curve \\spad{x = f(t) * cos(t)},{} \\spad{y = f(t) * sin(t)}.") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plotPolar(f,a..b)} plots the polar curve \\spad{r = f(theta)} as theta ranges over the interval \\spad{[a,b]}; this is the same as the parametric curve \\spad{x = f(t) * cos(t)},{} \\spad{y = f(t) * sin(t)}.")) (|pointPlot| (($ (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{pointPlot(t +-> (f(t),g(t)),a..b,c..d,e..f)} plots the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)} as \\spad{t} ranges over the interval \\spad{[a,b]}; \\spad{x}-range of \\spad{[c,d]} and \\spad{y}-range of \\spad{[e,f]} are noted in Plot object.") (($ (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{pointPlot(t +-> (f(t),g(t)),a..b)} plots the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)} as \\spad{t} ranges over the interval \\spad{[a,b]}.")) (|plot| (($ $ (|Segment| (|DoubleFloat|))) "\\spad{plot(x,r)} \\undocumented") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot(f,g,a..b,c..d,e..f)} plots the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)} as \\spad{t} ranges over the interval \\spad{[a,b]}; \\spad{x}-range of \\spad{[c,d]} and \\spad{y}-range of \\spad{[e,f]} are noted in Plot object.") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot(f,g,a..b)} plots the parametric curve \\spad{x = f(t)},{} \\spad{y = g(t)} as \\spad{t} ranges over the interval \\spad{[a,b]}.") (($ (|List| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot([f1,...,fm],a..b,c..d)} plots the functions \\spad{y = f1(x)},{}...,{} \\spad{y = fm(x)} on the interval \\spad{a..b}; \\spad{y}-range of \\spad{[c,d]} is noted in Plot object.") (($ (|List| (|Mapping| (|DoubleFloat|) (|DoubleFloat|))) (|Segment| (|DoubleFloat|))) "\\spad{plot([f1,...,fm],a..b)} plots the functions \\spad{y = f1(x)},{}...,{} \\spad{y = fm(x)} on the interval \\spad{a..b}.") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot(f,a..b,c..d)} plots the function \\spad{f(x)} on the interval \\spad{[a,b]}; \\spad{y}-range of \\spad{[c,d]} is noted in Plot object.") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot(f,a..b)} plots the function \\spad{f(x)} on the interval \\spad{[a,b]}."))) 
NIL 
NIL 
(-837 S) 
((|constructor| (NIL "\\spad{PlotFunctions1} provides facilities for plotting curves where functions SF -> SF are specified by giving an expression")) (|plotPolar| (((|Plot|) |#1| (|Symbol|)) "\\spad{plotPolar(f,theta)} plots the graph of \\spad{r = f(theta)} as \\spad{theta} ranges from 0 to 2 \\spad{pi}") (((|Plot|) |#1| (|Symbol|) (|Segment| (|DoubleFloat|))) "\\spad{plotPolar(f,theta,seg)} plots the graph of \\spad{r = f(theta)} as \\spad{theta} ranges over an interval")) (|plot| (((|Plot|) |#1| |#1| (|Symbol|) (|Segment| (|DoubleFloat|))) "\\spad{plot(f,g,t,seg)} plots the graph of \\spad{x = f(t)},{} \\spad{y = g(t)} as \\spad{t} ranges over an interval.") (((|Plot|) |#1| (|Symbol|) (|Segment| (|DoubleFloat|))) "\\spad{plot(fcn,x,seg)} plots the graph of \\spad{y = f(x)} on a interval"))) 
NIL 
NIL 
(-838) 
((|constructor| (NIL "Plot3D supports parametric plots defined over a real number system. A real number system is a model for the real numbers and as such may be an approximation. For example,{} floating point numbers and infinite continued fractions are real number systems. The facilities at this point are limited to 3-dimensional parametric plots.")) (|debug3D| (((|Boolean|) (|Boolean|)) "\\spad{debug3D(true)} turns debug mode on; debug3D(\\spad{false}) turns debug mode off.")) (|numFunEvals3D| (((|Integer|)) "\\spad{numFunEvals3D()} returns the number of points computed.")) (|setAdaptive3D| (((|Boolean|) (|Boolean|)) "\\spad{setAdaptive3D(true)} turns adaptive plotting on; setAdaptive3D(\\spad{false}) turns adaptive plotting off.")) (|adaptive3D?| (((|Boolean|)) "\\spad{adaptive3D?()} determines whether plotting be done adaptively.")) (|setScreenResolution3D| (((|Integer|) (|Integer|)) "\\spad{setScreenResolution3D(i)} sets the screen resolution for a 3d graph to \\spad{i}.")) (|screenResolution3D| (((|Integer|)) "\\spad{screenResolution3D()} returns the screen resolution for a 3d graph.")) (|setMaxPoints3D| (((|Integer|) (|Integer|)) "\\spad{setMaxPoints3D(i)} sets the maximum number of points in a plot to \\spad{i}.")) (|maxPoints3D| (((|Integer|)) "\\spad{maxPoints3D()} returns the maximum number of points in a plot.")) (|setMinPoints3D| (((|Integer|) (|Integer|)) "\\spad{setMinPoints3D(i)} sets the minimum number of points in a plot to \\spad{i}.")) (|minPoints3D| (((|Integer|)) "\\spad{minPoints3D()} returns the minimum number of points in a plot.")) (|tValues| (((|List| (|List| (|DoubleFloat|))) $) "\\spad{tValues(p)} returns a list of lists of the values of the parameter for which a point is computed,{} one list for each curve in the plot \\spad{p}.")) (|tRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{tRange(p)} returns the range of the parameter in a parametric plot \\spad{p}.")) (|refine| (($ $) "\\spad{refine(x)} \\undocumented") (($ $ (|Segment| (|DoubleFloat|))) "\\spad{refine(x,r)} \\undocumented")) (|zoom| (($ $ (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{zoom(x,r,s,t)} \\undocumented")) (|plot| (($ $ (|Segment| (|DoubleFloat|))) "\\spad{plot(x,r)} \\undocumented") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot(f1,f2,f3,f4,x,y,z,w)} \\undocumented") (($ (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Mapping| (|DoubleFloat|) (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{plot(f,g,h,a..b)} plots {/emx = \\spad{f}(\\spad{t}),{} \\spad{y} = \\spad{g}(\\spad{t}),{} \\spad{z} = \\spad{h}(\\spad{t})} as \\spad{t} ranges over {/em[a,{}\\spad{b}]}.")) (|pointPlot| (($ (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{pointPlot(f,x,y,z,w)} \\undocumented") (($ (|Mapping| (|Point| (|DoubleFloat|)) (|DoubleFloat|)) (|Segment| (|DoubleFloat|))) "\\spad{pointPlot(f,g,h,a..b)} plots {/emx = \\spad{f}(\\spad{t}),{} \\spad{y} = \\spad{g}(\\spad{t}),{} \\spad{z} = \\spad{h}(\\spad{t})} as \\spad{t} ranges over {/em[a,{}\\spad{b}]}."))) 
NIL 
NIL 
(-839) 
((|constructor| (NIL "This package exports plotting tools")) (|calcRanges| (((|List| (|Segment| (|DoubleFloat|))) (|List| (|List| (|Point| (|DoubleFloat|))))) "\\spad{calcRanges(l)} \\undocumented"))) 
NIL 
NIL 
(-840) 
((|constructor| (NIL "Attaching assertions to symbols for pattern matching. Date Created: 21 Mar 1989 Date Last Updated: 23 May 1990")) (|multiple| (((|Expression| (|Integer|)) (|Symbol|)) "\\spad{multiple(x)} tells the pattern matcher that \\spad{x} should preferably match a multi-term quantity in a sum or product. For matching on lists,{} multiple(\\spad{x}) tells the pattern matcher that \\spad{x} should match a list instead of an element of a list.")) (|optional| (((|Expression| (|Integer|)) (|Symbol|)) "\\spad{optional(x)} tells the pattern matcher that \\spad{x} can match an identity (0 in a sum,{} 1 in a product or exponentiation)..")) (|constant| (((|Expression| (|Integer|)) (|Symbol|)) "\\spad{constant(x)} tells the pattern matcher that \\spad{x} should match only the symbol 'x and no other quantity.")) (|assert| (((|Expression| (|Integer|)) (|Symbol|) (|Identifier|)) "\\spad{assert(x, s)} makes the assertion \\spad{s} about \\spad{x}."))) 
NIL 
NIL 
(-841 R -3092) 
((|constructor| (NIL "Attaching assertions to symbols for pattern matching; Date Created: 21 Mar 1989 Date Last Updated: 23 May 1990")) (|multiple| ((|#2| |#2|) "\\spad{multiple(x)} tells the pattern matcher that \\spad{x} should preferably match a multi-term quantity in a sum or product. For matching on lists,{} multiple(\\spad{x}) tells the pattern matcher that \\spad{x} should match a list instead of an element of a list. Error: if \\spad{x} is not a symbol.")) (|optional| ((|#2| |#2|) "\\spad{optional(x)} tells the pattern matcher that \\spad{x} can match an identity (0 in a sum,{} 1 in a product or exponentiation). Error: if \\spad{x} is not a symbol.")) (|constant| ((|#2| |#2|) "\\spad{constant(x)} tells the pattern matcher that \\spad{x} should match only the symbol 'x and no other quantity. Error: if \\spad{x} is not a symbol.")) (|assert| ((|#2| |#2| (|Identifier|)) "\\spad{assert(x, s)} makes the assertion \\spad{s} about \\spad{x}. Error: if \\spad{x} is not a symbol."))) 
NIL 
NIL 
(-842 S A B) 
((|constructor| (NIL "This packages provides tools for matching recursively in type towers.")) (|patternMatch| (((|PatternMatchResult| |#1| |#3|) |#2| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#3|)) "\\spad{patternMatch(expr, pat, res)} matches the pattern \\spad{pat} to the expression \\spad{expr}; res contains the variables of \\spad{pat} which are already matched and their matches. Note: this function handles type towers by changing the predicates and calling the matching function provided by \\spad{A}.")) (|fixPredicate| (((|Mapping| (|Boolean|) |#2|) (|Mapping| (|Boolean|) |#3|)) "\\spad{fixPredicate(f)} returns \\spad{g} defined by \\spad{g}(a) = \\spad{f}(a::B)."))) 
NIL 
NIL 
(-843 S R -3092) 
((|constructor| (NIL "This package provides pattern matching functions on function spaces.")) (|patternMatch| (((|PatternMatchResult| |#1| |#3|) |#3| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#3|)) "\\spad{patternMatch(expr, pat, res)} matches the pattern \\spad{pat} to the expression \\spad{expr}; res contains the variables of \\spad{pat} which are already matched and their matches."))) 
NIL 
NIL 
(-844 I) 
((|constructor| (NIL "This package provides pattern matching functions on integers.")) (|patternMatch| (((|PatternMatchResult| (|Integer|) |#1|) |#1| (|Pattern| (|Integer|)) (|PatternMatchResult| (|Integer|) |#1|)) "\\spad{patternMatch(n, pat, res)} matches the pattern \\spad{pat} to the integer \\spad{n}; res contains the variables of \\spad{pat} which are already matched and their matches."))) 
NIL 
NIL 
(-845 S E) 
((|constructor| (NIL "This package provides pattern matching functions on kernels.")) (|patternMatch| (((|PatternMatchResult| |#1| |#2|) (|Kernel| |#2|) (|Pattern| |#1|) (|PatternMatchResult| |#1| |#2|)) "\\spad{patternMatch(f(e1,...,en), pat, res)} matches the pattern \\spad{pat} to \\spad{f(e1,...,en)}; res contains the variables of \\spad{pat} which are already matched and their matches."))) 
NIL 
NIL 
(-846 S R L) 
((|constructor| (NIL "This package provides pattern matching functions on lists.")) (|patternMatch| (((|PatternMatchListResult| |#1| |#2| |#3|) |#3| (|Pattern| |#1|) (|PatternMatchListResult| |#1| |#2| |#3|)) "\\spad{patternMatch(l, pat, res)} matches the pattern \\spad{pat} to the list \\spad{l}; res contains the variables of \\spad{pat} which are already matched and their matches."))) 
NIL 
NIL 
(-847 S E V R P) 
((|constructor| (NIL "This package provides pattern matching functions on polynomials.")) (|patternMatch| (((|PatternMatchResult| |#1| |#5|) |#5| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#5|)) "\\spad{patternMatch(p, pat, res)} matches the pattern \\spad{pat} to the polynomial \\spad{p}; res contains the variables of \\spad{pat} which are already matched and their matches.") (((|PatternMatchResult| |#1| |#5|) |#5| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#5|) (|Mapping| (|PatternMatchResult| |#1| |#5|) |#3| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#5|))) "\\spad{patternMatch(p, pat, res, vmatch)} matches the pattern \\spad{pat} to the polynomial \\spad{p}. \\spad{res} contains the variables of \\spad{pat} which are already matched and their matches; vmatch is the matching function to use on the variables."))) 
NIL 
((|HasCategory| |#3| (|%list| (QUOTE -796) (|devaluate| |#1|)))) 
(-848 -2669) 
((|constructor| (NIL "Attaching predicates to symbols for pattern matching. Date Created: 21 Mar 1989 Date Last Updated: 23 May 1990")) (|suchThat| (((|Expression| (|Integer|)) (|Symbol|) (|List| (|Mapping| (|Boolean|) |#1|))) "\\spad{suchThat(x, [f1, f2, ..., fn])} attaches the predicate \\spad{f1} and \\spad{f2} and ... and fn to \\spad{x}.") (((|Expression| (|Integer|)) (|Symbol|) (|Mapping| (|Boolean|) |#1|)) "\\spad{suchThat(x, foo)} attaches the predicate foo to \\spad{x}."))) 
NIL 
NIL 
(-849 R -3092 -2669) 
((|constructor| (NIL "Attaching predicates to symbols for pattern matching. Date Created: 21 Mar 1989 Date Last Updated: 23 May 1990")) (|suchThat| ((|#2| |#2| (|List| (|Mapping| (|Boolean|) |#3|))) "\\spad{suchThat(x, [f1, f2, ..., fn])} attaches the predicate \\spad{f1} and \\spad{f2} and ... and fn to \\spad{x}. Error: if \\spad{x} is not a symbol.") ((|#2| |#2| (|Mapping| (|Boolean|) |#3|)) "\\spad{suchThat(x, foo)} attaches the predicate foo to \\spad{x}; error if \\spad{x} is not a symbol."))) 
NIL 
NIL 
(-850 S R Q) 
((|constructor| (NIL "This package provides pattern matching functions on quotients.")) (|patternMatch| (((|PatternMatchResult| |#1| |#3|) |#3| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#3|)) "\\spad{patternMatch(a/b, pat, res)} matches the pattern \\spad{pat} to the quotient \\spad{a/b}; res contains the variables of \\spad{pat} which are already matched and their matches."))) 
NIL 
NIL 
(-851 S) 
((|constructor| (NIL "This package provides pattern matching functions on symbols.")) (|patternMatch| (((|PatternMatchResult| |#1| (|Symbol|)) (|Symbol|) (|Pattern| |#1|) (|PatternMatchResult| |#1| (|Symbol|))) "\\spad{patternMatch(expr, pat, res)} matches the pattern \\spad{pat} to the expression \\spad{expr}; res contains the variables of \\spad{pat} which are already matched and their matches (necessary for recursion)."))) 
NIL 
NIL 
(-852 S R P) 
((|constructor| (NIL "This package provides tools for the pattern matcher.")) (|patternMatchTimes| (((|PatternMatchResult| |#1| |#3|) (|List| |#3|) (|List| (|Pattern| |#1|)) (|PatternMatchResult| |#1| |#3|) (|Mapping| (|PatternMatchResult| |#1| |#3|) |#3| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#3|))) "\\spad{patternMatchTimes(lsubj, lpat, res, match)} matches the product of patterns \\spad{reduce(*,lpat)} to the product of subjects \\spad{reduce(*,lsubj)}; \\spad{r} contains the previous matches and match is a pattern-matching function on \\spad{P}.")) (|patternMatch| (((|PatternMatchResult| |#1| |#3|) (|List| |#3|) (|List| (|Pattern| |#1|)) (|Mapping| |#3| (|List| |#3|)) (|PatternMatchResult| |#1| |#3|) (|Mapping| (|PatternMatchResult| |#1| |#3|) |#3| (|Pattern| |#1|) (|PatternMatchResult| |#1| |#3|))) "\\spad{patternMatch(lsubj, lpat, op, res, match)} matches the list of patterns \\spad{lpat} to the list of subjects \\spad{lsubj},{} allowing for commutativity; \\spad{op} is the operator such that \\spad{op}(\\spad{lpat}) should match \\spad{op}(\\spad{lsubj}) at the end,{} \\spad{r} contains the previous matches,{} and match is a pattern-matching function on \\spad{P}."))) 
NIL 
NIL 
(-853) 
((|constructor| (NIL "This package provides various polynomial number theoretic functions over the integers.")) (|legendre| (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|))) (|Integer|)) "\\spad{legendre(n)} returns the \\spad{n}th Legendre polynomial \\spad{P[n](x)}. Note: Legendre polynomials,{} denoted \\spad{P[n](x)},{} are computed from the two term recurrence. The generating function is: \\spad{1/sqrt(1-2*t*x+t**2) = sum(P[n](x)*t**n, n=0..infinity)}.")) (|laguerre| (((|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{laguerre(n)} returns the \\spad{n}th Laguerre polynomial \\spad{L[n](x)}. Note: Laguerre polynomials,{} denoted \\spad{L[n](x)},{} are computed from the two term recurrence. The generating function is: \\spad{exp(x*t/(t-1))/(1-t) = sum(L[n](x)*t**n/n!, n=0..infinity)}.")) (|hermite| (((|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{hermite(n)} returns the \\spad{n}th Hermite polynomial \\spad{H[n](x)}. Note: Hermite polynomials,{} denoted \\spad{H[n](x)},{} are computed from the two term recurrence. The generating function is: \\spad{exp(2*t*x-t**2) = sum(H[n](x)*t**n/n!, n=0..infinity)}.")) (|fixedDivisor| (((|Integer|) (|SparseUnivariatePolynomial| (|Integer|))) "\\spad{fixedDivisor(a)} for \\spad{a(x)} in \\spad{Z[x]} is the largest integer \\spad{f} such that \\spad{f} divides \\spad{a(x=k)} for all integers \\spad{k}. Note: fixed divisor of \\spad{a} is \\spad{reduce(gcd,[a(x=k) for k in 0..degree(a)])}.")) (|euler| (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|))) (|Integer|)) "\\spad{euler(n)} returns the \\spad{n}th Euler polynomial \\spad{E[n](x)}. Note: Euler polynomials denoted \\spad{E(n,x)} computed by solving the differential equation \\spad{differentiate(E(n,x),x) = n E(n-1,x)} where \\spad{E(0,x) = 1} and initial condition comes from \\spad{E(n) = 2**n E(n,1/2)}.")) (|cyclotomic| (((|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{cyclotomic(n)} returns the \\spad{n}th cyclotomic polynomial \\spad{phi[n](x)}. Note: \\spad{phi[n](x)} is the factor of \\spad{x**n - 1} whose roots are the primitive \\spad{n}th roots of unity.")) (|chebyshevU| (((|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{chebyshevU(n)} returns the \\spad{n}th Chebyshev polynomial \\spad{U[n](x)}. Note: Chebyshev polynomials of the second kind,{} denoted \\spad{U[n](x)},{} computed from the two term recurrence. The generating function \\spad{1/(1-2*t*x+t**2) = sum(T[n](x)*t**n, n=0..infinity)}.")) (|chebyshevT| (((|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) "\\spad{chebyshevT(n)} returns the \\spad{n}th Chebyshev polynomial \\spad{T[n](x)}. Note: Chebyshev polynomials of the first kind,{} denoted \\spad{T[n](x)},{} computed from the two term recurrence. The generating function \\spad{(1-t*x)/(1-2*t*x+t**2) = sum(T[n](x)*t**n, n=0..infinity)}.")) (|bernoulli| (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|))) (|Integer|)) "\\spad{bernoulli(n)} returns the \\spad{n}th Bernoulli polynomial \\spad{B[n](x)}. Note: Bernoulli polynomials denoted \\spad{B(n,x)} computed by solving the differential equation \\spad{differentiate(B(n,x),x) = n B(n-1,x)} where \\spad{B(0,x) = 1} and initial condition comes from \\spad{B(n) = B(n,0)}."))) 
NIL 
NIL 
(-854 R) 
((|constructor| (NIL "This domain implements points in coordinate space"))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-23))) (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#1| (QUOTE (-961))) (-12 (|HasCategory| |#1| (QUOTE (-915))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-855 |lv| R) 
((|constructor| (NIL "Package with the conversion functions among different kind of polynomials")) (|pToDmp| (((|DistributedMultivariatePolynomial| |#1| |#2|) (|Polynomial| |#2|)) "\\spad{pToDmp(p)} converts \\spad{p} from a \\spadtype{POLY} to a \\spadtype{DMP}.")) (|dmpToP| (((|Polynomial| |#2|) (|DistributedMultivariatePolynomial| |#1| |#2|)) "\\spad{dmpToP(p)} converts \\spad{p} from a \\spadtype{DMP} to a \\spadtype{POLY}.")) (|hdmpToP| (((|Polynomial| |#2|) (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) "\\spad{hdmpToP(p)} converts \\spad{p} from a \\spadtype{HDMP} to a \\spadtype{POLY}.")) (|pToHdmp| (((|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|) (|Polynomial| |#2|)) "\\spad{pToHdmp(p)} converts \\spad{p} from a \\spadtype{POLY} to a \\spadtype{HDMP}.")) (|hdmpToDmp| (((|DistributedMultivariatePolynomial| |#1| |#2|) (|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|)) "\\spad{hdmpToDmp(p)} converts \\spad{p} from a \\spadtype{HDMP} to a \\spadtype{DMP}.")) (|dmpToHdmp| (((|HomogeneousDistributedMultivariatePolynomial| |#1| |#2|) (|DistributedMultivariatePolynomial| |#1| |#2|)) "\\spad{dmpToHdmp(p)} converts \\spad{p} from a \\spadtype{DMP} to a \\spadtype{HDMP}."))) 
NIL 
NIL 
(-856 |TheField| |ThePols|) 
((|constructor| (NIL "\\axiomType{RealPolynomialUtilitiesPackage} provides common functions used by interval coding.")) (|lazyVariations| (((|NonNegativeInteger|) (|List| |#1|) (|Integer|) (|Integer|)) "\\axiom{lazyVariations(\\spad{l},{}\\spad{s1},{}sn)} is the number of sign variations in the list of non null numbers [s1::l]@sn,{}")) (|sturmVariationsOf| (((|NonNegativeInteger|) (|List| |#1|)) "\\axiom{sturmVariationsOf(\\spad{l})} is the number of sign variations in the list of numbers \\spad{l},{} note that the first term counts as a sign")) (|boundOfCauchy| ((|#1| |#2|) "\\axiom{boundOfCauchy(\\spad{p})} bounds the roots of \\spad{p}")) (|sturmSequence| (((|List| |#2|) |#2|) "\\axiom{sturmSequence(\\spad{p}) = sylvesterSequence(\\spad{p},{}p')}")) (|sylvesterSequence| (((|List| |#2|) |#2| |#2|) "\\axiom{sylvesterSequence(\\spad{p},{}\\spad{q})} is the negated remainder sequence of \\spad{p} and \\spad{q} divided by the last computed term"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-755)))) 
(-857 R) 
((|constructor| (NIL "\\indented{2}{This type is the basic representation of sparse recursive multivariate} polynomials whose variables are arbitrary symbols. The ordering is alphabetic determined by the Symbol type. The coefficient ring may be non commutative,{} but the variables are assumed to commute.")) (|integrate| (($ $ (|Symbol|)) "\\spad{integrate(p,x)} computes the integral of \\spad{p*dx},{} \\spadignore{i.e.} integrates the polynomial \\spad{p} with respect to the variable \\spad{x}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| (-1089) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| (-1089) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-1089) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-1089) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-1089) (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-312))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-858 R S) 
((|constructor| (NIL "\\indented{2}{This package takes a mapping between coefficient rings,{} and lifts} it to a mapping between polynomials over those rings.")) (|map| (((|Polynomial| |#2|) (|Mapping| |#2| |#1|) (|Polynomial| |#1|)) "\\spad{map(f, p)} produces a new polynomial as a result of applying the function \\spad{f} to every coefficient of the polynomial \\spad{p}."))) 
NIL 
NIL 
(-859 |x| R) 
((|constructor| (NIL "This package is primarily to help the interpreter do coercions. It allows you to view a polynomial as a univariate polynomial in one of its variables with coefficients which are again a polynomial in all the other variables.")) (|univariate| (((|UnivariatePolynomial| |#1| (|Polynomial| |#2|)) (|Polynomial| |#2|) (|Variable| |#1|)) "\\spad{univariate(p, x)} converts the polynomial \\spad{p} to a one of type \\spad{UnivariatePolynomial(x,Polynomial(R))},{} ie. as a member of \\spad{R[...][x]}."))) 
NIL 
NIL 
(-860 S R E |VarSet|) 
((|constructor| (NIL "The category for general multi-variate polynomials over a ring \\spad{R},{} in variables from VarSet,{} with exponents from the \\spadtype{OrderedAbelianMonoidSup}.")) (|canonicalUnitNormal| ((|attribute|) "we can choose a unique representative for each associate class. This normalization is chosen to be normalization of leading coefficient (by default).")) (|squareFreePart| (($ $) "\\spad{squareFreePart(p)} returns product of all the irreducible factors of polynomial \\spad{p} each taken with multiplicity one.")) (|squareFree| (((|Factored| $) $) "\\spad{squareFree(p)} returns the square free factorization of the polynomial \\spad{p}.")) (|primitivePart| (($ $ |#4|) "\\spad{primitivePart(p,v)} returns the unitCanonical associate of the polynomial \\spad{p} with its content with respect to the variable \\spad{v} divided out.") (($ $) "\\spad{primitivePart(p)} returns the unitCanonical associate of the polynomial \\spad{p} with its content divided out.")) (|content| (($ $ |#4|) "\\spad{content(p,v)} is the gcd of the coefficients of the polynomial \\spad{p} when \\spad{p} is viewed as a univariate polynomial with respect to the variable \\spad{v}. Thus,{} for polynomial 7*x**2*y + 14*x*y**2,{} the gcd of the coefficients with respect to \\spad{x} is 7*y.")) (|discriminant| (($ $ |#4|) "\\spad{discriminant(p,v)} returns the disriminant of the polynomial \\spad{p} with respect to the variable \\spad{v}.")) (|resultant| (($ $ $ |#4|) "\\spad{resultant(p,q,v)} returns the resultant of the polynomials \\spad{p} and \\spad{q} with respect to the variable \\spad{v}.")) (|primitiveMonomials| (((|List| $) $) "\\spad{primitiveMonomials(p)} gives the list of monomials of the polynomial \\spad{p} with their coefficients removed. Note: \\spad{primitiveMonomials(sum(a_(i) X^(i))) = [X^(1),...,X^(n)]}.")) (|variables| (((|List| |#4|) $) "\\spad{variables(p)} returns the list of those variables actually appearing in the polynomial \\spad{p}.")) (|totalDegree| (((|NonNegativeInteger|) $ (|List| |#4|)) "\\spad{totalDegree(p, lv)} returns the maximum sum (over all monomials of polynomial \\spad{p}) of the variables in the list lv.") (((|NonNegativeInteger|) $) "\\spad{totalDegree(p)} returns the largest sum over all monomials of all exponents of a monomial.")) (|isExpt| (((|Union| (|Record| (|:| |var| |#4|) (|:| |exponent| (|NonNegativeInteger|))) "failed") $) "\\spad{isExpt(p)} returns \\spad{[x, n]} if polynomial \\spad{p} has the form \\spad{x**n} and \\spad{n > 0}.")) (|isTimes| (((|Union| (|List| $) "failed") $) "\\spad{isTimes(p)} returns \\spad{[a1,...,an]} if polynomial \\spad{p = a1 ... an} and \\spad{n >= 2},{} and,{} for each \\spad{i},{} \\spad{ai} is either a nontrivial constant in \\spad{R} or else of the form \\spad{x**e},{} where \\spad{e > 0} is an integer and \\spad{x} in a member of VarSet.")) (|isPlus| (((|Union| (|List| $) "failed") $) "\\spad{isPlus(p)} returns \\spad{[m1,...,mn]} if polynomial \\spad{p = m1 + ... + mn} and \\spad{n >= 2} and each \\spad{mi} is a nonzero monomial.")) (|multivariate| (($ (|SparseUnivariatePolynomial| $) |#4|) "\\spad{multivariate(sup,v)} converts an anonymous univariable polynomial \\spad{sup} to a polynomial in the variable \\spad{v}.") (($ (|SparseUnivariatePolynomial| |#2|) |#4|) "\\spad{multivariate(sup,v)} converts an anonymous univariable polynomial \\spad{sup} to a polynomial in the variable \\spad{v}.")) (|monomial| (($ $ (|List| |#4|) (|List| (|NonNegativeInteger|))) "\\spad{monomial(a,[v1..vn],[e1..en])} returns \\spad{a*prod(vi**ei)}.") (($ $ |#4| (|NonNegativeInteger|)) "\\spad{monomial(a,x,n)} creates the monomial \\spad{a*x**n} where \\spad{a} is a polynomial,{} \\spad{x} is a variable and \\spad{n} is a nonnegative integer.")) (|monicDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $ |#4|) "\\spad{monicDivide(a,b,v)} divides the polynomial a by the polynomial \\spad{b},{} with each viewed as a univariate polynomial in \\spad{v} returning both the quotient and remainder. Error: if \\spad{b} is not monic with respect to \\spad{v}.")) (|minimumDegree| (((|List| (|NonNegativeInteger|)) $ (|List| |#4|)) "\\spad{minimumDegree(p, lv)} gives the list of minimum degrees of the polynomial \\spad{p} with respect to each of the variables in the list lv") (((|NonNegativeInteger|) $ |#4|) "\\spad{minimumDegree(p,v)} gives the minimum degree of polynomial \\spad{p} with respect to \\spad{v},{} \\spadignore{i.e.} viewed a univariate polynomial in \\spad{v}")) (|mainVariable| (((|Union| |#4| "failed") $) "\\spad{mainVariable(p)} returns the biggest variable which actually occurs in the polynomial \\spad{p},{} or \"failed\" if no variables are present. fails precisely if polynomial satisfies ground?")) (|univariate| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{univariate(p)} converts the multivariate polynomial \\spad{p},{} which should actually involve only one variable,{} into a univariate polynomial in that variable,{} whose coefficients are in the ground ring. Error: if polynomial is genuinely multivariate") (((|SparseUnivariatePolynomial| $) $ |#4|) "\\spad{univariate(p,v)} converts the multivariate polynomial \\spad{p} into a univariate polynomial in \\spad{v},{} whose coefficients are still multivariate polynomials (in all the other variables).")) (|monomials| (((|List| $) $) "\\spad{monomials(p)} returns the list of non-zero monomials of polynomial \\spad{p},{} \\spadignore{i.e.} \\spad{monomials(sum(a_(i) X^(i))) = [a_(1) X^(1),...,a_(n) X^(n)]}.")) (|coefficient| (($ $ (|List| |#4|) (|List| (|NonNegativeInteger|))) "\\spad{coefficient(p, lv, ln)} views the polynomial \\spad{p} as a polynomial in the variables of \\spad{lv} and returns the coefficient of the term \\spad{lv**ln},{} \\spadignore{i.e.} \\spad{prod(lv_i ** ln_i)}.") (($ $ |#4| (|NonNegativeInteger|)) "\\spad{coefficient(p,v,n)} views the polynomial \\spad{p} as a univariate polynomial in \\spad{v} and returns the coefficient of the \\spad{v**n} term.")) (|degree| (((|List| (|NonNegativeInteger|)) $ (|List| |#4|)) "\\spad{degree(p,lv)} gives the list of degrees of polynomial \\spad{p} with respect to each of the variables in the list \\spad{lv}.") (((|NonNegativeInteger|) $ |#4|) "\\spad{degree(p,v)} gives the degree of polynomial \\spad{p} with respect to the variable \\spad{v}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-821))) (|HasAttribute| |#2| (QUOTE -3992)) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#4| (QUOTE (-796 (-329)))) (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| |#4| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| |#4| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#4| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#4| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-553 (-473))))) 
(-861 R E |VarSet|) 
((|constructor| (NIL "The category for general multi-variate polynomials over a ring \\spad{R},{} in variables from VarSet,{} with exponents from the \\spadtype{OrderedAbelianMonoidSup}.")) (|canonicalUnitNormal| ((|attribute|) "we can choose a unique representative for each associate class. This normalization is chosen to be normalization of leading coefficient (by default).")) (|squareFreePart| (($ $) "\\spad{squareFreePart(p)} returns product of all the irreducible factors of polynomial \\spad{p} each taken with multiplicity one.")) (|squareFree| (((|Factored| $) $) "\\spad{squareFree(p)} returns the square free factorization of the polynomial \\spad{p}.")) (|primitivePart| (($ $ |#3|) "\\spad{primitivePart(p,v)} returns the unitCanonical associate of the polynomial \\spad{p} with its content with respect to the variable \\spad{v} divided out.") (($ $) "\\spad{primitivePart(p)} returns the unitCanonical associate of the polynomial \\spad{p} with its content divided out.")) (|content| (($ $ |#3|) "\\spad{content(p,v)} is the gcd of the coefficients of the polynomial \\spad{p} when \\spad{p} is viewed as a univariate polynomial with respect to the variable \\spad{v}. Thus,{} for polynomial 7*x**2*y + 14*x*y**2,{} the gcd of the coefficients with respect to \\spad{x} is 7*y.")) (|discriminant| (($ $ |#3|) "\\spad{discriminant(p,v)} returns the disriminant of the polynomial \\spad{p} with respect to the variable \\spad{v}.")) (|resultant| (($ $ $ |#3|) "\\spad{resultant(p,q,v)} returns the resultant of the polynomials \\spad{p} and \\spad{q} with respect to the variable \\spad{v}.")) (|primitiveMonomials| (((|List| $) $) "\\spad{primitiveMonomials(p)} gives the list of monomials of the polynomial \\spad{p} with their coefficients removed. Note: \\spad{primitiveMonomials(sum(a_(i) X^(i))) = [X^(1),...,X^(n)]}.")) (|variables| (((|List| |#3|) $) "\\spad{variables(p)} returns the list of those variables actually appearing in the polynomial \\spad{p}.")) (|totalDegree| (((|NonNegativeInteger|) $ (|List| |#3|)) "\\spad{totalDegree(p, lv)} returns the maximum sum (over all monomials of polynomial \\spad{p}) of the variables in the list lv.") (((|NonNegativeInteger|) $) "\\spad{totalDegree(p)} returns the largest sum over all monomials of all exponents of a monomial.")) (|isExpt| (((|Union| (|Record| (|:| |var| |#3|) (|:| |exponent| (|NonNegativeInteger|))) "failed") $) "\\spad{isExpt(p)} returns \\spad{[x, n]} if polynomial \\spad{p} has the form \\spad{x**n} and \\spad{n > 0}.")) (|isTimes| (((|Union| (|List| $) "failed") $) "\\spad{isTimes(p)} returns \\spad{[a1,...,an]} if polynomial \\spad{p = a1 ... an} and \\spad{n >= 2},{} and,{} for each \\spad{i},{} \\spad{ai} is either a nontrivial constant in \\spad{R} or else of the form \\spad{x**e},{} where \\spad{e > 0} is an integer and \\spad{x} in a member of VarSet.")) (|isPlus| (((|Union| (|List| $) "failed") $) "\\spad{isPlus(p)} returns \\spad{[m1,...,mn]} if polynomial \\spad{p = m1 + ... + mn} and \\spad{n >= 2} and each \\spad{mi} is a nonzero monomial.")) (|multivariate| (($ (|SparseUnivariatePolynomial| $) |#3|) "\\spad{multivariate(sup,v)} converts an anonymous univariable polynomial \\spad{sup} to a polynomial in the variable \\spad{v}.") (($ (|SparseUnivariatePolynomial| |#1|) |#3|) "\\spad{multivariate(sup,v)} converts an anonymous univariable polynomial \\spad{sup} to a polynomial in the variable \\spad{v}.")) (|monomial| (($ $ (|List| |#3|) (|List| (|NonNegativeInteger|))) "\\spad{monomial(a,[v1..vn],[e1..en])} returns \\spad{a*prod(vi**ei)}.") (($ $ |#3| (|NonNegativeInteger|)) "\\spad{monomial(a,x,n)} creates the monomial \\spad{a*x**n} where \\spad{a} is a polynomial,{} \\spad{x} is a variable and \\spad{n} is a nonnegative integer.")) (|monicDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $ |#3|) "\\spad{monicDivide(a,b,v)} divides the polynomial a by the polynomial \\spad{b},{} with each viewed as a univariate polynomial in \\spad{v} returning both the quotient and remainder. Error: if \\spad{b} is not monic with respect to \\spad{v}.")) (|minimumDegree| (((|List| (|NonNegativeInteger|)) $ (|List| |#3|)) "\\spad{minimumDegree(p, lv)} gives the list of minimum degrees of the polynomial \\spad{p} with respect to each of the variables in the list lv") (((|NonNegativeInteger|) $ |#3|) "\\spad{minimumDegree(p,v)} gives the minimum degree of polynomial \\spad{p} with respect to \\spad{v},{} \\spadignore{i.e.} viewed a univariate polynomial in \\spad{v}")) (|mainVariable| (((|Union| |#3| "failed") $) "\\spad{mainVariable(p)} returns the biggest variable which actually occurs in the polynomial \\spad{p},{} or \"failed\" if no variables are present. fails precisely if polynomial satisfies ground?")) (|univariate| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{univariate(p)} converts the multivariate polynomial \\spad{p},{} which should actually involve only one variable,{} into a univariate polynomial in that variable,{} whose coefficients are in the ground ring. Error: if polynomial is genuinely multivariate") (((|SparseUnivariatePolynomial| $) $ |#3|) "\\spad{univariate(p,v)} converts the multivariate polynomial \\spad{p} into a univariate polynomial in \\spad{v},{} whose coefficients are still multivariate polynomials (in all the other variables).")) (|monomials| (((|List| $) $) "\\spad{monomials(p)} returns the list of non-zero monomials of polynomial \\spad{p},{} \\spadignore{i.e.} \\spad{monomials(sum(a_(i) X^(i))) = [a_(1) X^(1),...,a_(n) X^(n)]}.")) (|coefficient| (($ $ (|List| |#3|) (|List| (|NonNegativeInteger|))) "\\spad{coefficient(p, lv, ln)} views the polynomial \\spad{p} as a polynomial in the variables of \\spad{lv} and returns the coefficient of the term \\spad{lv**ln},{} \\spadignore{i.e.} \\spad{prod(lv_i ** ln_i)}.") (($ $ |#3| (|NonNegativeInteger|)) "\\spad{coefficient(p,v,n)} views the polynomial \\spad{p} as a univariate polynomial in \\spad{v} and returns the coefficient of the \\spad{v**n} term.")) (|degree| (((|List| (|NonNegativeInteger|)) $ (|List| |#3|)) "\\spad{degree(p,lv)} gives the list of degrees of polynomial \\spad{p} with respect to each of the variables in the list \\spad{lv}.") (((|NonNegativeInteger|) $ |#3|) "\\spad{degree(p,v)} gives the degree of polynomial \\spad{p} with respect to the variable \\spad{v}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-862 E V R P -3092) 
((|constructor| (NIL "This package transforms multivariate polynomials or fractions into univariate polynomials or fractions,{} and back.")) (|isPower| (((|Union| (|Record| (|:| |val| |#5|) (|:| |exponent| (|Integer|))) "failed") |#5|) "\\spad{isPower(p)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0},{} \"failed\" otherwise.")) (|isExpt| (((|Union| (|Record| (|:| |var| |#2|) (|:| |exponent| (|Integer|))) "failed") |#5|) "\\spad{isExpt(p)} returns \\spad{[x, n]} if \\spad{p = x**n} and \\spad{n <> 0},{} \"failed\" otherwise.")) (|isTimes| (((|Union| (|List| |#5|) "failed") |#5|) "\\spad{isTimes(p)} returns \\spad{[a1,...,an]} if \\spad{p = a1 ... an} and \\spad{n > 1},{} \"failed\" otherwise.")) (|isPlus| (((|Union| (|List| |#5|) "failed") |#5|) "\\spad{isPlus(p)} returns [\\spad{m1},{}...,{}mn] if \\spad{p = m1 + ... + mn} and \\spad{n > 1},{} \"failed\" otherwise.")) (|multivariate| ((|#5| (|Fraction| (|SparseUnivariatePolynomial| |#5|)) |#2|) "\\spad{multivariate(f, v)} applies both the numerator and denominator of \\spad{f} to \\spad{v}.")) (|univariate| (((|SparseUnivariatePolynomial| |#5|) |#5| |#2| (|SparseUnivariatePolynomial| |#5|)) "\\spad{univariate(f, x, p)} returns \\spad{f} viewed as a univariate polynomial in \\spad{x},{} using the side-condition \\spad{p(x) = 0}.") (((|Fraction| (|SparseUnivariatePolynomial| |#5|)) |#5| |#2|) "\\spad{univariate(f, v)} returns \\spad{f} viewed as a univariate rational function in \\spad{v}.")) (|mainVariable| (((|Union| |#2| "failed") |#5|) "\\spad{mainVariable(f)} returns the highest variable appearing in the numerator or the denominator of \\spad{f},{} \"failed\" if \\spad{f} has no variables.")) (|variables| (((|List| |#2|) |#5|) "\\spad{variables(f)} returns the list of variables appearing in the numerator or the denominator of \\spad{f}."))) 
NIL 
NIL 
(-863 E |Vars| R P S) 
((|constructor| (NIL "This package provides a very general map function,{} which given a set \\spad{S} and polynomials over \\spad{R} with maps from the variables into \\spad{S} and the coefficients into \\spad{S},{} maps polynomials into \\spad{S}. \\spad{S} is assumed to support \\spad{+},{} \\spad{*} and \\spad{**}.")) (|map| ((|#5| (|Mapping| |#5| |#2|) (|Mapping| |#5| |#3|) |#4|) "\\spad{map(varmap, coefmap, p)} takes a \\spad{varmap},{} a mapping from the variables of polynomial \\spad{p} into \\spad{S},{} \\spad{coefmap},{} a mapping from coefficients of \\spad{p} into \\spad{S},{} and \\spad{p},{} and produces a member of \\spad{S} using the corresponding arithmetic. in \\spad{S}"))) 
NIL 
NIL 
(-864 E V R P -3092) 
((|constructor| (NIL "computes \\spad{n}-th roots of quotients of multivariate polynomials")) (|nthr| (((|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |coef| |#4|) (|:| |radicand| (|List| |#4|))) |#4| (|NonNegativeInteger|)) "\\spad{nthr(p,n)} should be local but conditional")) (|froot| (((|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |coef| |#5|) (|:| |radicand| |#5|)) |#5| (|NonNegativeInteger|)) "\\spad{froot(f, n)} returns \\spad{[m,c,r]} such that \\spad{f**(1/n) = c * r**(1/m)}.")) (|qroot| (((|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |coef| |#5|) (|:| |radicand| |#5|)) (|Fraction| (|Integer|)) (|NonNegativeInteger|)) "\\spad{qroot(f, n)} returns \\spad{[m,c,r]} such that \\spad{f**(1/n) = c * r**(1/m)}.")) (|rroot| (((|Record| (|:| |exponent| (|NonNegativeInteger|)) (|:| |coef| |#5|) (|:| |radicand| |#5|)) |#3| (|NonNegativeInteger|)) "\\spad{rroot(f, n)} returns \\spad{[m,c,r]} such that \\spad{f**(1/n) = c * r**(1/m)}.")) (|denom| ((|#4| $) "\\spad{denom(x)} \\undocumented")) (|numer| ((|#4| $) "\\spad{numer(x)} \\undocumented"))) 
NIL 
((|HasCategory| |#3| (QUOTE (-391)))) 
(-865) 
((|constructor| (NIL "This domain represents network port numbers (notable TCP and UDP).")) (|port| (($ (|SingleInteger|)) "\\spad{port(n)} constructs a PortNumber from the integer `n'."))) 
NIL 
NIL 
(-866) 
((|constructor| (NIL "PlottablePlaneCurveCategory is the category of curves in the plane which may be plotted via the graphics facilities. Functions are provided for obtaining lists of lists of points,{} representing the branches of the curve,{} and for determining the ranges of the \\spad{x}-coordinates and \\spad{y}-coordinates of the points on the curve.")) (|yRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{yRange(c)} returns the range of the \\spad{y}-coordinates of the points on the curve \\spad{c}.")) (|xRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{xRange(c)} returns the range of the \\spad{x}-coordinates of the points on the curve \\spad{c}.")) (|listBranches| (((|List| (|List| (|Point| (|DoubleFloat|)))) $) "\\spad{listBranches(c)} returns a list of lists of points,{} representing the branches of the curve \\spad{c}."))) 
NIL 
NIL 
(-867 R E) 
((|constructor| (NIL "This domain represents generalized polynomials with coefficients (from a not necessarily commutative ring),{} and terms indexed by their exponents (from an arbitrary ordered abelian monoid). This type is used,{} for example,{} by the \\spadtype{DistributedMultivariatePolynomial} domain where the exponent domain is a direct product of non negative integers.")) (|canonicalUnitNormal| ((|attribute|) "canonicalUnitNormal guarantees that the function unitCanonical returns the same representative for all associates of any particular element.")) (|fmecg| (($ $ |#2| |#1| $) "\\spad{fmecg(p1,e,r,p2)} finds \\spad{X} : \\spad{p1} - \\spad{r} * X**e * \\spad{p2}"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-104)))) (|HasAttribute| |#1| (QUOTE -3992))) 
(-868 R L) 
((|constructor| (NIL "\\spadtype{PrecomputedAssociatedEquations} stores some generic precomputations which speed up the computations of the associated equations needed for factoring operators.")) (|firstUncouplingMatrix| (((|Union| (|Matrix| |#1|) "failed") |#2| (|PositiveInteger|)) "\\spad{firstUncouplingMatrix(op, m)} returns the matrix A such that \\spad{A w = (W',W'',...,W^N)} in the corresponding associated equations for right-factors of order \\spad{m} of \\spad{op}. Returns \"failed\" if the matrix A has not been precomputed for the particular combination \\spad{degree(L), m}."))) 
NIL 
NIL 
(-869 S) 
((|constructor| (NIL "\\indented{1}{This provides a fast array type with no bound checking on elt's.} Minimum index is 0 in this type,{} cannot be changed"))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-870 A B) 
((|constructor| (NIL "\\indented{1}{This package provides tools for operating on primitive arrays} with unary and binary functions involving different underlying types")) (|map| (((|PrimitiveArray| |#2|) (|Mapping| |#2| |#1|) (|PrimitiveArray| |#1|)) "\\spad{map(f,a)} applies function \\spad{f} to each member of primitive array \\spad{a} resulting in a new primitive array over a possibly different underlying domain.")) (|reduce| ((|#2| (|Mapping| |#2| |#1| |#2|) (|PrimitiveArray| |#1|) |#2|) "\\spad{reduce(f,a,r)} applies function \\spad{f} to each successive element of the primitive array \\spad{a} and an accumulant initialized to \\spad{r}. For example,{} \\spad{reduce(_+\\$Integer,[1,2,3],0)} does \\spad{3+(2+(1+0))}. Note: third argument \\spad{r} may be regarded as the identity element for the function \\spad{f}.")) (|scan| (((|PrimitiveArray| |#2|) (|Mapping| |#2| |#1| |#2|) (|PrimitiveArray| |#1|) |#2|) "\\spad{scan(f,a,r)} successively applies \\spad{reduce(f,x,r)} to more and more leading sub-arrays \\spad{x} of primitive array \\spad{a}. More precisely,{} if \\spad{a} is \\spad{[a1,a2,...]},{} then \\spad{scan(f,a,r)} returns \\spad{[reduce(f,[a1],r),reduce(f,[a1,a2],r),...]}."))) 
NIL 
NIL 
(-871) 
((|constructor| (NIL "Category for the functions defined by integrals.")) (|integral| (($ $ (|SegmentBinding| $)) "\\spad{integral(f, x = a..b)} returns the formal definite integral of \\spad{f} dx for \\spad{x} between \\spad{a} and \\spad{b}.") (($ $ (|Symbol|)) "\\spad{integral(f, x)} returns the formal integral of \\spad{f} dx."))) 
NIL 
NIL 
(-872 -3092) 
((|constructor| (NIL "PrimitiveElement provides functions to compute primitive elements in algebraic extensions.")) (|primitiveElement| (((|Record| (|:| |coef| (|List| (|Integer|))) (|:| |poly| (|List| (|SparseUnivariatePolynomial| |#1|))) (|:| |prim| (|SparseUnivariatePolynomial| |#1|))) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|)) (|Symbol|)) "\\spad{primitiveElement([p1,...,pn], [a1,...,an], a)} returns \\spad{[[c1,...,cn], [q1,...,qn], q]} such that then \\spad{k(a1,...,an) = k(a)},{} where \\spad{a = a1 c1 + ... + an cn},{} \\spad{ai = qi(a)},{} and \\spad{q(a) = 0}. The \\spad{pi}'s are the defining polynomials for the \\spad{ai}'s. This operation uses the technique of \\spadglossSee{groebner bases}{Groebner basis}.") (((|Record| (|:| |coef| (|List| (|Integer|))) (|:| |poly| (|List| (|SparseUnivariatePolynomial| |#1|))) (|:| |prim| (|SparseUnivariatePolynomial| |#1|))) (|List| (|Polynomial| |#1|)) (|List| (|Symbol|))) "\\spad{primitiveElement([p1,...,pn], [a1,...,an])} returns \\spad{[[c1,...,cn], [q1,...,qn], q]} such that then \\spad{k(a1,...,an) = k(a)},{} where \\spad{a = a1 c1 + ... + an cn},{} \\spad{ai = qi(a)},{} and \\spad{q(a) = 0}. The \\spad{pi}'s are the defining polynomials for the \\spad{ai}'s. This operation uses the technique of \\spadglossSee{groebner bases}{Groebner basis}.") (((|Record| (|:| |coef1| (|Integer|)) (|:| |coef2| (|Integer|)) (|:| |prim| (|SparseUnivariatePolynomial| |#1|))) (|Polynomial| |#1|) (|Symbol|) (|Polynomial| |#1|) (|Symbol|)) "\\spad{primitiveElement(p1, a1, p2, a2)} returns \\spad{[c1, c2, q]} such that \\spad{k(a1, a2) = k(a)} where \\spad{a = c1 a1 + c2 a2, and q(a) = 0}. The \\spad{pi}'s are the defining polynomials for the \\spad{ai}'s. The \\spad{p2} may involve \\spad{a1},{} but \\spad{p1} must not involve \\spad{a2}. This operation uses \\spadfun{resultant}."))) 
NIL 
NIL 
(-873 I) 
((|constructor| (NIL "The \\spadtype{IntegerPrimesPackage} implements a modification of Rabin's probabilistic primality test and the utility functions \\spadfun{nextPrime},{} \\spadfun{prevPrime} and \\spadfun{primes}.")) (|primes| (((|List| |#1|) |#1| |#1|) "\\spad{primes(a,b)} returns a list of all primes \\spad{p} with \\spad{a <= p <= b}")) (|prevPrime| ((|#1| |#1|) "\\spad{prevPrime(n)} returns the largest prime strictly smaller than \\spad{n}")) (|nextPrime| ((|#1| |#1|) "\\spad{nextPrime(n)} returns the smallest prime strictly larger than \\spad{n}")) (|prime?| (((|Boolean|) |#1|) "\\spad{prime?(n)} returns \\spad{true} if \\spad{n} is prime and \\spad{false} if not. The algorithm used is Rabin's probabilistic primality test (reference: Knuth Volume 2 Semi Numerical Algorithms). If \\spad{prime? n} returns \\spad{false},{} \\spad{n} is proven composite. If \\spad{prime? n} returns \\spad{true},{} prime? may be in error however,{} the probability of error is very low. and is zero below 25*10**9 (due to a result of Pomerance et al),{} below 10**12 and 10**13 due to results of Pinch,{} and below 341550071728321 due to a result of Jaeschke. Specifically,{} this implementation does at least 10 pseudo prime tests and so the probability of error is \\spad{< 4**(-10)}. The running time of this method is cubic in the length of the input \\spad{n},{} that is \\spad{O( (log n)**3 )},{} for \\spad{n<10**20}. beyond that,{} the algorithm is quartic,{} \\spad{O( (log n)**4 )}. Two improvements due to Davenport have been incorporated which catches some trivial strong pseudo-primes,{} such as [Jaeschke,{} 1991] 1377161253229053 * 413148375987157,{} which the original algorithm regards as prime"))) 
NIL 
NIL 
(-874) 
((|constructor| (NIL "PrintPackage provides a print function for output forms.")) (|print| (((|Void|) (|OutputForm|)) "\\spad{print(o)} writes the output form \\spad{o} on standard output using the two-dimensional formatter."))) 
NIL 
NIL 
(-875 A B) 
((|constructor| (NIL "This domain implements cartesian product")) (|selectsecond| ((|#2| $) "\\spad{selectsecond(x)} \\undocumented")) (|selectfirst| ((|#1| $) "\\spad{selectfirst(x)} \\undocumented")) (|makeprod| (($ |#1| |#2|) "\\spad{makeprod(a,b)} \\undocumented"))) 
((-3991 -12 (|has| |#2| (-412)) (|has| |#1| (-412)))) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-717)))) (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-756))))) (-12 (|HasCategory| |#1| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-717)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-104)))) (-12 (|HasCategory| |#1| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-717)))) (-12 (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-21))))) (-12 (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-21)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-104)))) (-12 (|HasCategory| |#1| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-717)))) (-12 (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-21)))) (-12 (|HasCategory| |#1| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-23))))) (-12 (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#2| (QUOTE (-412)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#2| (QUOTE (-412)))) (-12 (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-663))))) (-12 (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-319)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-104)))) (-12 (|HasCategory| |#1| (QUOTE (-717))) (|HasCategory| |#2| (QUOTE (-717)))) (-12 (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-21)))) (-12 (|HasCategory| |#1| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-23)))) (-12 (|HasCategory| |#1| (QUOTE (-412))) (|HasCategory| |#2| (QUOTE (-412)))) (-12 (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-663))))) (-12 (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-663)))) (-12 (|HasCategory| |#1| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-23)))) (-12 (|HasCategory| |#1| (QUOTE (-104))) (|HasCategory| |#2| (QUOTE (-104)))) (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-756))))) 
(-876) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: October 24,{} 2007 Date Last Modified: January 18,{} 2008. An `Property' is a pair of name and value.")) (|property| (($ (|Identifier|) (|SExpression|)) "\\spad{property(n,val)} constructs a property with name `n' and value `val'.")) (|value| (((|SExpression|) $) "\\spad{value(p)} returns value of property \\spad{p}")) (|name| (((|Identifier|) $) "\\spad{name(p)} returns the name of property \\spad{p}"))) 
NIL 
NIL 
(-877 T$) 
((|constructor| (NIL "This domain implements propositional formula build over a term domain,{} that itself belongs to PropositionalLogic")) (|disjunction| (($ $ $) "\\spad{disjunction(p,q)} returns a formula denoting the disjunction of \\spad{p} and \\spad{q}.")) (|conjunction| (($ $ $) "\\spad{conjunction(p,q)} returns a formula denoting the conjunction of \\spad{p} and \\spad{q}.")) (|isEquiv| (((|Maybe| (|Pair| $ $)) $) "\\spad{isEquiv f} returns a value \\spad{v} such that \\spad{v case Pair(\\%,\\%)} holds if the formula \\spad{f} is an equivalence formula.")) (|isImplies| (((|Maybe| (|Pair| $ $)) $) "\\spad{isImplies f} returns a value \\spad{v} such that \\spad{v case Pair(\\%,\\%)} holds if the formula \\spad{f} is an implication formula.")) (|isOr| (((|Maybe| (|Pair| $ $)) $) "\\spad{isOr f} returns a value \\spad{v} such that \\spad{v case Pair(\\%,\\%)} holds if the formula \\spad{f} is a disjunction formula.")) (|isAnd| (((|Maybe| (|Pair| $ $)) $) "\\spad{isAnd f} returns a value \\spad{v} such that \\spad{v case Pair(\\%,\\%)} holds if the formula \\spad{f} is a conjunction formula.")) (|isNot| (((|Maybe| $) $) "\\spad{isNot f} returns a value \\spad{v} such that \\spad{v case \\%} holds if the formula \\spad{f} is a negation.")) (|isAtom| (((|Maybe| |#1|) $) "\\spad{isAtom f} returns a value \\spad{v} such that \\spad{v case T} holds if the formula \\spad{f} is a term."))) 
NIL 
NIL 
(-878 T$) 
((|constructor| (NIL "This package collects unary functions operating on propositional formulae.")) (|simplify| (((|PropositionalFormula| |#1|) (|PropositionalFormula| |#1|)) "\\spad{simplify f} returns a formula logically equivalent to \\spad{f} where obvious tautologies have been removed.")) (|atoms| (((|Set| |#1|) (|PropositionalFormula| |#1|)) "\\spad{atoms f} ++ returns the set of atoms appearing in the formula \\spad{f}.")) (|dual| (((|PropositionalFormula| |#1|) (|PropositionalFormula| |#1|)) "\\spad{dual f} returns the dual of the proposition \\spad{f}."))) 
NIL 
NIL 
(-879 S T$) 
((|constructor| (NIL "This package collects binary functions operating on propositional formulae.")) (|map| (((|PropositionalFormula| |#2|) (|Mapping| |#2| |#1|) (|PropositionalFormula| |#1|)) "\\spad{map(f,x)} returns a propositional formula where all atoms in \\spad{x} have been replaced by the result of applying the function \\spad{f} to them."))) 
NIL 
NIL 
(-880) 
((|constructor| (NIL "This category declares the connectives of Propositional Logic.")) (|equiv| (($ $ $) "\\spad{equiv(p,q)} returns the logical equivalence of `p',{} `q'.")) (|implies| (($ $ $) "\\spad{implies(p,q)} returns the logical implication of `q' by `p'.")) (|false| (($) "\\spad{false} is a logical constant.")) (|true| (($) "\\spad{true} is a logical constant."))) 
NIL 
NIL 
(-881 S) 
((|constructor| (NIL "A priority queue is a bag of items from an ordered set where the item extracted is always the maximum element.")) (|merge!| (($ $ $) "\\spad{merge!(q,q1)} destructively changes priority queue \\spad{q} to include the values from priority queue \\spad{q1}.")) (|merge| (($ $ $) "\\spad{merge(q1,q2)} returns combines priority queues \\spad{q1} and \\spad{q2} to return a single priority queue \\spad{q}.")) (|max| ((|#1| $) "\\spad{max(q)} returns the maximum element of priority queue \\spad{q}."))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-882 R |polR|) 
((|constructor| (NIL "This package contains some functions: \\axiomOpFrom{discriminant}{PseudoRemainderSequence},{} \\axiomOpFrom{resultant}{PseudoRemainderSequence},{} \\axiomOpFrom{subResultantGcd}{PseudoRemainderSequence},{} \\axiomOpFrom{chainSubResultants}{PseudoRemainderSequence},{} \\axiomOpFrom{degreeSubResultant}{PseudoRemainderSequence},{} \\axiomOpFrom{lastSubResultant}{PseudoRemainderSequence},{} \\axiomOpFrom{resultantEuclidean}{PseudoRemainderSequence},{} \\axiomOpFrom{subResultantGcdEuclidean}{PseudoRemainderSequence},{} \\axiomOpFrom{\\spad{semiSubResultantGcdEuclidean1}}{PseudoRemainderSequence},{} \\axiomOpFrom{\\spad{semiSubResultantGcdEuclidean2}}{PseudoRemainderSequence},{} etc. This procedures are coming from improvements of the subresultants algorithm. \\indented{2}{Version : 7} \\indented{2}{References : Lionel Ducos \"Optimizations of the subresultant algorithm\"} \\indented{2}{to appear in the Journal of Pure and Applied Algebra.} \\indented{2}{Author : Ducos Lionel \\axiom{Lionel.Ducos@mathlabo.univ-poitiers.fr}}")) (|semiResultantEuclideannaif| (((|Record| (|:| |coef2| |#2|) (|:| |resultant| |#1|)) |#2| |#2|) "\\axiom{resultantEuclidean_naif(\\spad{P},{}\\spad{Q})} returns the semi-extended resultant of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}} computed by means of the naive algorithm.")) (|resultantEuclideannaif| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |resultant| |#1|)) |#2| |#2|) "\\axiom{resultantEuclidean_naif(\\spad{P},{}\\spad{Q})} returns the extended resultant of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}} computed by means of the naive algorithm.")) (|resultantnaif| ((|#1| |#2| |#2|) "\\axiom{resultantEuclidean_naif(\\spad{P},{}\\spad{Q})} returns the resultant of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}} computed by means of the naive algorithm.")) (|nextsousResultant2| ((|#2| |#2| |#2| |#2| |#1|) "\\axiom{\\spad{nextsousResultant2}(\\spad{P},{} \\spad{Q},{} \\spad{Z},{} \\spad{s})} returns the subresultant \\axiom{S_{\\spad{e}-1}} where \\axiom{\\spad{P} ~ S_d,{} \\spad{Q} = S_{\\spad{d}-1},{} \\spad{Z} = S_e,{} \\spad{s} = lc(S_d)}")) (|Lazard2| ((|#2| |#2| |#1| |#1| (|NonNegativeInteger|)) "\\axiom{\\spad{Lazard2}(\\spad{F},{} \\spad{x},{} \\spad{y},{} \\spad{n})} computes \\axiom{(x/y)**(\\spad{n}-1) * \\spad{F}}")) (|Lazard| ((|#1| |#1| |#1| (|NonNegativeInteger|)) "\\axiom{Lazard(\\spad{x},{} \\spad{y},{} \\spad{n})} computes \\axiom{x**n/y**(\\spad{n}-1)}")) (|divide| (((|Record| (|:| |quotient| |#2|) (|:| |remainder| |#2|)) |#2| |#2|) "\\axiom{divide(\\spad{F},{}\\spad{G})} computes quotient and rest of the exact euclidean division of \\axiom{\\spad{F}} by \\axiom{\\spad{G}}.")) (|pseudoDivide| (((|Record| (|:| |coef| |#1|) (|:| |quotient| |#2|) (|:| |remainder| |#2|)) |#2| |#2|) "\\axiom{pseudoDivide(\\spad{P},{}\\spad{Q})} computes the pseudoDivide of \\axiom{\\spad{P}} by \\axiom{\\spad{Q}}.")) (|exquo| (((|Vector| |#2|) (|Vector| |#2|) |#1|) "\\axiom{\\spad{v} exquo \\spad{r}} computes the exact quotient of \\axiom{\\spad{v}} by \\axiom{\\spad{r}}")) (* (((|Vector| |#2|) |#1| (|Vector| |#2|)) "\\axiom{\\spad{r} * \\spad{v}} computes the product of \\axiom{\\spad{r}} and \\axiom{\\spad{v}}")) (|gcd| ((|#2| |#2| |#2|) "\\axiom{gcd(\\spad{P},{} \\spad{Q})} returns the gcd of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}.")) (|semiResultantReduitEuclidean| (((|Record| (|:| |coef2| |#2|) (|:| |resultantReduit| |#1|)) |#2| |#2|) "\\axiom{semiResultantReduitEuclidean(\\spad{P},{}\\spad{Q})} returns the \"reduce resultant\" and carries out the equality \\axiom{...\\spad{P} + coef2*Q = resultantReduit(\\spad{P},{}\\spad{Q})}.")) (|resultantReduitEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |resultantReduit| |#1|)) |#2| |#2|) "\\axiom{resultantReduitEuclidean(\\spad{P},{}\\spad{Q})} returns the \"reduce resultant\" and carries out the equality \\axiom{coef1*P + coef2*Q = resultantReduit(\\spad{P},{}\\spad{Q})}.")) (|resultantReduit| ((|#1| |#2| |#2|) "\\axiom{resultantReduit(\\spad{P},{}\\spad{Q})} returns the \"reduce resultant\" of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}.")) (|schema| (((|List| (|NonNegativeInteger|)) |#2| |#2|) "\\axiom{schema(\\spad{P},{}\\spad{Q})} returns the list of degrees of non zero subresultants of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}.")) (|chainSubResultants| (((|List| |#2|) |#2| |#2|) "\\axiom{chainSubResultants(\\spad{P},{} \\spad{Q})} computes the list of non zero subresultants of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}.")) (|semiDiscriminantEuclidean| (((|Record| (|:| |coef2| |#2|) (|:| |discriminant| |#1|)) |#2|) "\\axiom{discriminantEuclidean(\\spad{P})} carries out the equality \\axiom{...\\spad{P} + \\spad{coef2} * \\spad{D}(\\spad{P}) = discriminant(\\spad{P})}. Warning: \\axiom{degree(\\spad{P}) >= degree(\\spad{Q})}.")) (|discriminantEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |discriminant| |#1|)) |#2|) "\\axiom{discriminantEuclidean(\\spad{P})} carries out the equality \\axiom{\\spad{coef1} * \\spad{P} + \\spad{coef2} * \\spad{D}(\\spad{P}) = discriminant(\\spad{P})}.")) (|discriminant| ((|#1| |#2|) "\\axiom{discriminant(\\spad{P},{} \\spad{Q})} returns the discriminant of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}.")) (|semiSubResultantGcdEuclidean1| (((|Record| (|:| |coef1| |#2|) (|:| |gcd| |#2|)) |#2| |#2|) "\\axiom{\\spad{semiSubResultantGcdEuclidean1}(\\spad{P},{}\\spad{Q})} carries out the equality \\axiom{coef1*P + ? \\spad{Q} = +/- S_i(\\spad{P},{}\\spad{Q})} where the degree (not the indice) of the subresultant \\axiom{S_i(\\spad{P},{}\\spad{Q})} is the smaller as possible.")) (|semiSubResultantGcdEuclidean2| (((|Record| (|:| |coef2| |#2|) (|:| |gcd| |#2|)) |#2| |#2|) "\\axiom{\\spad{semiSubResultantGcdEuclidean2}(\\spad{P},{}\\spad{Q})} carries out the equality \\axiom{...\\spad{P} + coef2*Q = +/- S_i(\\spad{P},{}\\spad{Q})} where the degree (not the indice) of the subresultant \\axiom{S_i(\\spad{P},{}\\spad{Q})} is the smaller as possible. Warning: \\axiom{degree(\\spad{P}) >= degree(\\spad{Q})}.")) (|subResultantGcdEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |gcd| |#2|)) |#2| |#2|) "\\axiom{subResultantGcdEuclidean(\\spad{P},{}\\spad{Q})} carries out the equality \\axiom{coef1*P + coef2*Q = +/- S_i(\\spad{P},{}\\spad{Q})} where the degree (not the indice) of the subresultant \\axiom{S_i(\\spad{P},{}\\spad{Q})} is the smaller as possible.")) (|subResultantGcd| ((|#2| |#2| |#2|) "\\axiom{subResultantGcd(\\spad{P},{} \\spad{Q})} returns the gcd of two primitive polynomials \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}.")) (|semiLastSubResultantEuclidean| (((|Record| (|:| |coef2| |#2|) (|:| |subResultant| |#2|)) |#2| |#2|) "\\axiom{semiLastSubResultantEuclidean(\\spad{P},{} \\spad{Q})} computes the last non zero subresultant \\axiom{\\spad{S}} and carries out the equality \\axiom{...\\spad{P} + coef2*Q = \\spad{S}}. Warning: \\axiom{degree(\\spad{P}) >= degree(\\spad{Q})}.")) (|lastSubResultantEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |subResultant| |#2|)) |#2| |#2|) "\\axiom{lastSubResultantEuclidean(\\spad{P},{} \\spad{Q})} computes the last non zero subresultant \\axiom{\\spad{S}} and carries out the equality \\axiom{coef1*P + coef2*Q = \\spad{S}}.")) (|lastSubResultant| ((|#2| |#2| |#2|) "\\axiom{lastSubResultant(\\spad{P},{} \\spad{Q})} computes the last non zero subresultant of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}")) (|semiDegreeSubResultantEuclidean| (((|Record| (|:| |coef2| |#2|) (|:| |subResultant| |#2|)) |#2| |#2| (|NonNegativeInteger|)) "\\axiom{indiceSubResultant(\\spad{P},{} \\spad{Q},{} \\spad{i})} returns a subresultant \\axiom{\\spad{S}} of degree \\axiom{\\spad{d}} and carries out the equality \\axiom{...\\spad{P} + coef2*Q = S_i}. Warning: \\axiom{degree(\\spad{P}) >= degree(\\spad{Q})}.")) (|degreeSubResultantEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |subResultant| |#2|)) |#2| |#2| (|NonNegativeInteger|)) "\\axiom{indiceSubResultant(\\spad{P},{} \\spad{Q},{} \\spad{i})} returns a subresultant \\axiom{\\spad{S}} of degree \\axiom{\\spad{d}} and carries out the equality \\axiom{coef1*P + coef2*Q = S_i}.")) (|degreeSubResultant| ((|#2| |#2| |#2| (|NonNegativeInteger|)) "\\axiom{degreeSubResultant(\\spad{P},{} \\spad{Q},{} \\spad{d})} computes a subresultant of degree \\axiom{\\spad{d}}.")) (|semiIndiceSubResultantEuclidean| (((|Record| (|:| |coef2| |#2|) (|:| |subResultant| |#2|)) |#2| |#2| (|NonNegativeInteger|)) "\\axiom{semiIndiceSubResultantEuclidean(\\spad{P},{} \\spad{Q},{} \\spad{i})} returns the subresultant \\axiom{S_i(\\spad{P},{}\\spad{Q})} and carries out the equality \\axiom{...\\spad{P} + coef2*Q = S_i(\\spad{P},{}\\spad{Q})} Warning: \\axiom{degree(\\spad{P}) >= degree(\\spad{Q})}.")) (|indiceSubResultantEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |subResultant| |#2|)) |#2| |#2| (|NonNegativeInteger|)) "\\axiom{indiceSubResultant(\\spad{P},{} \\spad{Q},{} \\spad{i})} returns the subresultant \\axiom{S_i(\\spad{P},{}\\spad{Q})} and carries out the equality \\axiom{coef1*P + coef2*Q = S_i(\\spad{P},{}\\spad{Q})}")) (|indiceSubResultant| ((|#2| |#2| |#2| (|NonNegativeInteger|)) "\\axiom{indiceSubResultant(\\spad{P},{} \\spad{Q},{} \\spad{i})} returns the subresultant of indice \\axiom{\\spad{i}}")) (|semiResultantEuclidean1| (((|Record| (|:| |coef1| |#2|) (|:| |resultant| |#1|)) |#2| |#2|) "\\axiom{\\spad{semiResultantEuclidean1}(\\spad{P},{}\\spad{Q})} carries out the equality \\axiom{\\spad{coef1}.\\spad{P} + ? \\spad{Q} = resultant(\\spad{P},{}\\spad{Q})}.")) (|semiResultantEuclidean2| (((|Record| (|:| |coef2| |#2|) (|:| |resultant| |#1|)) |#2| |#2|) "\\axiom{\\spad{semiResultantEuclidean2}(\\spad{P},{}\\spad{Q})} carries out the equality \\axiom{...\\spad{P} + coef2*Q = resultant(\\spad{P},{}\\spad{Q})}. Warning: \\axiom{degree(\\spad{P}) >= degree(\\spad{Q})}.")) (|resultantEuclidean| (((|Record| (|:| |coef1| |#2|) (|:| |coef2| |#2|) (|:| |resultant| |#1|)) |#2| |#2|) "\\axiom{resultantEuclidean(\\spad{P},{}\\spad{Q})} carries out the equality \\axiom{coef1*P + coef2*Q = resultant(\\spad{P},{}\\spad{Q})}")) (|resultant| ((|#1| |#2| |#2|) "\\axiom{resultant(\\spad{P},{} \\spad{Q})} returns the resultant of \\axiom{\\spad{P}} and \\axiom{\\spad{Q}}"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-391)))) 
(-883) 
((|constructor| (NIL "This domain represents `pretend' expressions.")) (|target| (((|TypeAst|) $) "\\spad{target(e)} returns the target type of the conversion..")) (|expression| (((|SpadAst|) $) "\\spad{expression(e)} returns the expression being converted."))) 
NIL 
NIL 
(-884) 
((|constructor| (NIL "Partition is an OrderedCancellationAbelianMonoid which is used as the basis for symmetric polynomial representation of the sums of powers in SymmetricPolynomial. Thus,{} \\spad{(5 2 2 1)} will represent \\spad{s5 * s2**2 * s1}.")) (|conjugate| (($ $) "\\spad{conjugate(p)} returns the conjugate partition of a partition \\spad{p}")) (|pdct| (((|PositiveInteger|) $) "\\spad{pdct(a1**n1 a2**n2 ...)} returns \\spad{n1! * a1**n1 * n2! * a2**n2 * ...}. This function is used in the package \\spadtype{CycleIndicators}.")) (|powers| (((|List| (|Pair| (|PositiveInteger|) (|PositiveInteger|))) $) "\\spad{powers(x)} returns a list of pairs. The second component of each pair is the multiplicity with which the first component occurs in \\spad{li}.")) (|partitions| (((|Stream| $) (|NonNegativeInteger|)) "\\spad{partitions n} returns the stream of all partitions of size \\spad{n}.")) (|#| (((|NonNegativeInteger|) $) "\\spad{\\#x} returns the sum of all parts of the partition \\spad{x}.")) (|parts| (((|List| (|PositiveInteger|)) $) "\\spad{parts x} returns the list of decreasing integer sequence making up the partition \\spad{x}.")) (|partition| (($ (|List| (|PositiveInteger|))) "\\spad{partition(li)} converts a list of integers \\spad{li} to a partition"))) 
NIL 
NIL 
(-885 S |Coef| |Expon| |Var|) 
((|constructor| (NIL "\\spadtype{PowerSeriesCategory} is the most general power series category with exponents in an ordered abelian monoid.")) (|complete| (($ $) "\\spad{complete(f)} causes all terms of \\spad{f} to be computed. Note: this results in an infinite loop if \\spad{f} has infinitely many terms.")) (|pole?| (((|Boolean|) $) "\\spad{pole?(f)} determines if the power series \\spad{f} has a pole.")) (|variables| (((|List| |#4|) $) "\\spad{variables(f)} returns a list of the variables occuring in the power series \\spad{f}.")) (|degree| ((|#3| $) "\\spad{degree(f)} returns the exponent of the lowest order term of \\spad{f}.")) (|leadingCoefficient| ((|#2| $) "\\spad{leadingCoefficient(f)} returns the coefficient of the lowest order term of \\spad{f}")) (|leadingMonomial| (($ $) "\\spad{leadingMonomial(f)} returns the monomial of \\spad{f} of lowest order.")) (|monomial| (($ $ (|List| |#4|) (|List| |#3|)) "\\spad{monomial(a,[x1,..,xk],[n1,..,nk])} computes \\spad{a * x1**n1 * .. * xk**nk}.") (($ $ |#4| |#3|) "\\spad{monomial(a,x,n)} computes \\spad{a*x**n}."))) 
NIL 
NIL 
(-886 |Coef| |Expon| |Var|) 
((|constructor| (NIL "\\spadtype{PowerSeriesCategory} is the most general power series category with exponents in an ordered abelian monoid.")) (|complete| (($ $) "\\spad{complete(f)} causes all terms of \\spad{f} to be computed. Note: this results in an infinite loop if \\spad{f} has infinitely many terms.")) (|pole?| (((|Boolean|) $) "\\spad{pole?(f)} determines if the power series \\spad{f} has a pole.")) (|variables| (((|List| |#3|) $) "\\spad{variables(f)} returns a list of the variables occuring in the power series \\spad{f}.")) (|degree| ((|#2| $) "\\spad{degree(f)} returns the exponent of the lowest order term of \\spad{f}.")) (|leadingCoefficient| ((|#1| $) "\\spad{leadingCoefficient(f)} returns the coefficient of the lowest order term of \\spad{f}")) (|leadingMonomial| (($ $) "\\spad{leadingMonomial(f)} returns the monomial of \\spad{f} of lowest order.")) (|monomial| (($ $ (|List| |#3|) (|List| |#2|)) "\\spad{monomial(a,[x1,..,xk],[n1,..,nk])} computes \\spad{a * x1**n1 * .. * xk**nk}.") (($ $ |#3| |#2|) "\\spad{monomial(a,x,n)} computes \\spad{a*x**n}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-887) 
((|constructor| (NIL "PlottableSpaceCurveCategory is the category of curves in 3-space which may be plotted via the graphics facilities. Functions are provided for obtaining lists of lists of points,{} representing the branches of the curve,{} and for determining the ranges of the x-,{} y-,{} and \\spad{z}-coordinates of the points on the curve.")) (|zRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{zRange(c)} returns the range of the \\spad{z}-coordinates of the points on the curve \\spad{c}.")) (|yRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{yRange(c)} returns the range of the \\spad{y}-coordinates of the points on the curve \\spad{c}.")) (|xRange| (((|Segment| (|DoubleFloat|)) $) "\\spad{xRange(c)} returns the range of the \\spad{x}-coordinates of the points on the curve \\spad{c}.")) (|listBranches| (((|List| (|List| (|Point| (|DoubleFloat|)))) $) "\\spad{listBranches(c)} returns a list of lists of points,{} representing the branches of the curve \\spad{c}."))) 
NIL 
NIL 
(-888 S R E |VarSet| P) 
((|constructor| (NIL "A category for finite subsets of a polynomial ring. Such a set is only regarded as a set of polynomials and not identified to the ideal it generates. So two distinct sets may generate the same the ideal. Furthermore,{} for \\spad{R} being an integral domain,{} a set of polynomials may be viewed as a representation of the ideal it generates in the polynomial ring \\spad{(R)^(-1) P},{} or the set of its zeros (described for instance by the radical of the previous ideal,{} or a split of the associated affine variety) and so on. So this category provides operations about those different notions.")) (|triangular?| (((|Boolean|) $) "\\axiom{triangular?(ps)} returns \\spad{true} iff \\axiom{ps} is a triangular set,{} \\spadignore{i.e.} two distinct polynomials have distinct main variables and no constant lies in \\axiom{ps}.")) (|rewriteIdealWithRemainder| (((|List| |#5|) (|List| |#5|) $) "\\axiom{rewriteIdealWithRemainder(lp,{}cs)} returns \\axiom{lr} such that every polynomial in \\axiom{lr} is fully reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{cs} and \\axiom{(lp,{}cs)} and \\axiom{(lr,{}cs)} generate the same ideal in \\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}}.")) (|rewriteIdealWithHeadRemainder| (((|List| |#5|) (|List| |#5|) $) "\\axiom{rewriteIdealWithHeadRemainder(lp,{}cs)} returns \\axiom{lr} such that the leading monomial of every polynomial in \\axiom{lr} is reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{cs} and \\axiom{(lp,{}cs)} and \\axiom{(lr,{}cs)} generate the same ideal in \\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}}.")) (|remainder| (((|Record| (|:| |rnum| |#2|) (|:| |polnum| |#5|) (|:| |den| |#2|)) |#5| $) "\\axiom{remainder(a,{}ps)} returns \\axiom{[\\spad{c},{}\\spad{b},{}\\spad{r}]} such that \\axiom{\\spad{b}} is fully reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ps},{} \\axiom{r*a - c*b} lies in the ideal generated by \\axiom{ps}. Furthermore,{} if \\axiom{\\spad{R}} is a gcd-domain,{} \\axiom{\\spad{b}} is primitive.")) (|headRemainder| (((|Record| (|:| |num| |#5|) (|:| |den| |#2|)) |#5| $) "\\axiom{headRemainder(a,{}ps)} returns \\axiom{[\\spad{b},{}\\spad{r}]} such that the leading monomial of \\axiom{\\spad{b}} is reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ps} and \\axiom{r*a - \\spad{b}} lies in the ideal generated by \\axiom{ps}.")) (|roughUnitIdeal?| (((|Boolean|) $) "\\axiom{roughUnitIdeal?(ps)} returns \\spad{true} iff \\axiom{ps} contains some non null element lying in the base ring \\axiom{\\spad{R}}.")) (|roughEqualIdeals?| (((|Boolean|) $ $) "\\axiom{roughEqualIdeals?(\\spad{ps1},{}\\spad{ps2})} returns \\spad{true} iff it can proved that \\axiom{\\spad{ps1}} and \\axiom{\\spad{ps2}} generate the same ideal in \\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}} without computing Groebner bases.")) (|roughSubIdeal?| (((|Boolean|) $ $) "\\axiom{roughSubIdeal?(\\spad{ps1},{}\\spad{ps2})} returns \\spad{true} iff it can proved that all polynomials in \\axiom{\\spad{ps1}} lie in the ideal generated by \\axiom{\\spad{ps2}} in \\axiom{\\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}}} without computing Groebner bases.")) (|roughBase?| (((|Boolean|) $) "\\axiom{roughBase?(ps)} returns \\spad{true} iff for every pair \\axiom{{\\spad{p},{}\\spad{q}}} of polynomials in \\axiom{ps} their leading monomials are relatively prime.")) (|trivialIdeal?| (((|Boolean|) $) "\\axiom{trivialIdeal?(ps)} returns \\spad{true} iff \\axiom{ps} does not contain non-zero elements.")) (|sort| (((|Record| (|:| |under| $) (|:| |floor| $) (|:| |upper| $)) $ |#4|) "\\axiom{sort(\\spad{v},{}ps)} returns \\axiom{us,{}vs,{}ws} such that \\axiom{us} is \\axiom{collectUnder(ps,{}\\spad{v})},{} \\axiom{vs} is \\axiom{collect(ps,{}\\spad{v})} and \\axiom{ws} is \\axiom{collectUpper(ps,{}\\spad{v})}.")) (|collectUpper| (($ $ |#4|) "\\axiom{collectUpper(ps,{}\\spad{v})} returns the set consisting of the polynomials of \\axiom{ps} with main variable greater than \\axiom{\\spad{v}}.")) (|collect| (($ $ |#4|) "\\axiom{collect(ps,{}\\spad{v})} returns the set consisting of the polynomials of \\axiom{ps} with \\axiom{\\spad{v}} as main variable.")) (|collectUnder| (($ $ |#4|) "\\axiom{collectUnder(ps,{}\\spad{v})} returns the set consisting of the polynomials of \\axiom{ps} with main variable less than \\axiom{\\spad{v}}.")) (|mainVariable?| (((|Boolean|) |#4| $) "\\axiom{mainVariable?(\\spad{v},{}ps)} returns \\spad{true} iff \\axiom{\\spad{v}} is the main variable of some polynomial in \\axiom{ps}.")) (|mainVariables| (((|List| |#4|) $) "\\axiom{mainVariables(ps)} returns the decreasingly sorted list of the variables which are main variables of some polynomial in \\axiom{ps}.")) (|variables| (((|List| |#4|) $) "\\axiom{variables(ps)} returns the decreasingly sorted list of the variables which are variables of some polynomial in \\axiom{ps}.")) (|mvar| ((|#4| $) "\\axiom{mvar(ps)} returns the main variable of the non constant polynomial with the greatest main variable,{} if any,{} else an error is returned.")) (|retract| (($ (|List| |#5|)) "\\axiom{retract(lp)} returns an element of the domain whose elements are the members of \\axiom{lp} if such an element exists,{} otherwise an error is produced.")) (|retractIfCan| (((|Union| $ "failed") (|List| |#5|)) "\\axiom{retractIfCan(lp)} returns an element of the domain whose elements are the members of \\axiom{lp} if such an element exists,{} otherwise \\axiom{\"failed\"} is returned."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-495)))) 
(-889 R E |VarSet| P) 
((|constructor| (NIL "A category for finite subsets of a polynomial ring. Such a set is only regarded as a set of polynomials and not identified to the ideal it generates. So two distinct sets may generate the same the ideal. Furthermore,{} for \\spad{R} being an integral domain,{} a set of polynomials may be viewed as a representation of the ideal it generates in the polynomial ring \\spad{(R)^(-1) P},{} or the set of its zeros (described for instance by the radical of the previous ideal,{} or a split of the associated affine variety) and so on. So this category provides operations about those different notions.")) (|triangular?| (((|Boolean|) $) "\\axiom{triangular?(ps)} returns \\spad{true} iff \\axiom{ps} is a triangular set,{} \\spadignore{i.e.} two distinct polynomials have distinct main variables and no constant lies in \\axiom{ps}.")) (|rewriteIdealWithRemainder| (((|List| |#4|) (|List| |#4|) $) "\\axiom{rewriteIdealWithRemainder(lp,{}cs)} returns \\axiom{lr} such that every polynomial in \\axiom{lr} is fully reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{cs} and \\axiom{(lp,{}cs)} and \\axiom{(lr,{}cs)} generate the same ideal in \\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}}.")) (|rewriteIdealWithHeadRemainder| (((|List| |#4|) (|List| |#4|) $) "\\axiom{rewriteIdealWithHeadRemainder(lp,{}cs)} returns \\axiom{lr} such that the leading monomial of every polynomial in \\axiom{lr} is reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{cs} and \\axiom{(lp,{}cs)} and \\axiom{(lr,{}cs)} generate the same ideal in \\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}}.")) (|remainder| (((|Record| (|:| |rnum| |#1|) (|:| |polnum| |#4|) (|:| |den| |#1|)) |#4| $) "\\axiom{remainder(a,{}ps)} returns \\axiom{[\\spad{c},{}\\spad{b},{}\\spad{r}]} such that \\axiom{\\spad{b}} is fully reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ps},{} \\axiom{r*a - c*b} lies in the ideal generated by \\axiom{ps}. Furthermore,{} if \\axiom{\\spad{R}} is a gcd-domain,{} \\axiom{\\spad{b}} is primitive.")) (|headRemainder| (((|Record| (|:| |num| |#4|) (|:| |den| |#1|)) |#4| $) "\\axiom{headRemainder(a,{}ps)} returns \\axiom{[\\spad{b},{}\\spad{r}]} such that the leading monomial of \\axiom{\\spad{b}} is reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ps} and \\axiom{r*a - \\spad{b}} lies in the ideal generated by \\axiom{ps}.")) (|roughUnitIdeal?| (((|Boolean|) $) "\\axiom{roughUnitIdeal?(ps)} returns \\spad{true} iff \\axiom{ps} contains some non null element lying in the base ring \\axiom{\\spad{R}}.")) (|roughEqualIdeals?| (((|Boolean|) $ $) "\\axiom{roughEqualIdeals?(\\spad{ps1},{}\\spad{ps2})} returns \\spad{true} iff it can proved that \\axiom{\\spad{ps1}} and \\axiom{\\spad{ps2}} generate the same ideal in \\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}} without computing Groebner bases.")) (|roughSubIdeal?| (((|Boolean|) $ $) "\\axiom{roughSubIdeal?(\\spad{ps1},{}\\spad{ps2})} returns \\spad{true} iff it can proved that all polynomials in \\axiom{\\spad{ps1}} lie in the ideal generated by \\axiom{\\spad{ps2}} in \\axiom{\\axiom{(\\spad{R})^(\\spad{-1}) \\spad{P}}} without computing Groebner bases.")) (|roughBase?| (((|Boolean|) $) "\\axiom{roughBase?(ps)} returns \\spad{true} iff for every pair \\axiom{{\\spad{p},{}\\spad{q}}} of polynomials in \\axiom{ps} their leading monomials are relatively prime.")) (|trivialIdeal?| (((|Boolean|) $) "\\axiom{trivialIdeal?(ps)} returns \\spad{true} iff \\axiom{ps} does not contain non-zero elements.")) (|sort| (((|Record| (|:| |under| $) (|:| |floor| $) (|:| |upper| $)) $ |#3|) "\\axiom{sort(\\spad{v},{}ps)} returns \\axiom{us,{}vs,{}ws} such that \\axiom{us} is \\axiom{collectUnder(ps,{}\\spad{v})},{} \\axiom{vs} is \\axiom{collect(ps,{}\\spad{v})} and \\axiom{ws} is \\axiom{collectUpper(ps,{}\\spad{v})}.")) (|collectUpper| (($ $ |#3|) "\\axiom{collectUpper(ps,{}\\spad{v})} returns the set consisting of the polynomials of \\axiom{ps} with main variable greater than \\axiom{\\spad{v}}.")) (|collect| (($ $ |#3|) "\\axiom{collect(ps,{}\\spad{v})} returns the set consisting of the polynomials of \\axiom{ps} with \\axiom{\\spad{v}} as main variable.")) (|collectUnder| (($ $ |#3|) "\\axiom{collectUnder(ps,{}\\spad{v})} returns the set consisting of the polynomials of \\axiom{ps} with main variable less than \\axiom{\\spad{v}}.")) (|mainVariable?| (((|Boolean|) |#3| $) "\\axiom{mainVariable?(\\spad{v},{}ps)} returns \\spad{true} iff \\axiom{\\spad{v}} is the main variable of some polynomial in \\axiom{ps}.")) (|mainVariables| (((|List| |#3|) $) "\\axiom{mainVariables(ps)} returns the decreasingly sorted list of the variables which are main variables of some polynomial in \\axiom{ps}.")) (|variables| (((|List| |#3|) $) "\\axiom{variables(ps)} returns the decreasingly sorted list of the variables which are variables of some polynomial in \\axiom{ps}.")) (|mvar| ((|#3| $) "\\axiom{mvar(ps)} returns the main variable of the non constant polynomial with the greatest main variable,{} if any,{} else an error is returned.")) (|retract| (($ (|List| |#4|)) "\\axiom{retract(lp)} returns an element of the domain whose elements are the members of \\axiom{lp} if such an element exists,{} otherwise an error is produced.")) (|retractIfCan| (((|Union| $ "failed") (|List| |#4|)) "\\axiom{retractIfCan(lp)} returns an element of the domain whose elements are the members of \\axiom{lp} if such an element exists,{} otherwise \\axiom{\"failed\"} is returned."))) 
((-3994 . T)) 
NIL 
(-890 R E V P) 
((|constructor| (NIL "This package provides modest routines for polynomial system solving. The aim of many of the operations of this package is to remove certain factors in some polynomials in order to avoid unnecessary computations in algorithms involving splitting techniques by partial factorization.")) (|removeIrreducibleRedundantFactors| (((|List| |#4|) (|List| |#4|) (|List| |#4|)) "\\axiom{removeIrreducibleRedundantFactors(lp,{}lq)} returns the same as \\axiom{irreducibleFactors(concat(lp,{}lq))} assuming that \\axiom{irreducibleFactors(lp)} returns \\axiom{lp} up to replacing some polynomial \\axiom{pj} in \\axiom{lp} by some polynomial \\axiom{qj} associated to \\axiom{pj}.")) (|lazyIrreducibleFactors| (((|List| |#4|) (|List| |#4|)) "\\axiom{lazyIrreducibleFactors(lp)} returns \\axiom{lf} such that if \\axiom{lp = [\\spad{p1},{}...,{}pn]} and \\axiom{lf = [\\spad{f1},{}...,{}fm]} then \\axiom{p1*p2*...\\spad{*pn=0}} means \\axiom{f1*f2*...\\spad{*fm=0}},{} and the \\axiom{\\spad{fi}} are irreducible over \\axiom{\\spad{R}} and are pairwise distinct. The algorithm tries to avoid factorization into irreducible factors as far as possible and makes previously use of gcd techniques over \\axiom{\\spad{R}}.")) (|irreducibleFactors| (((|List| |#4|) (|List| |#4|)) "\\axiom{irreducibleFactors(lp)} returns \\axiom{lf} such that if \\axiom{lp = [\\spad{p1},{}...,{}pn]} and \\axiom{lf = [\\spad{f1},{}...,{}fm]} then \\axiom{p1*p2*...\\spad{*pn=0}} means \\axiom{f1*f2*...\\spad{*fm=0}},{} and the \\axiom{\\spad{fi}} are irreducible over \\axiom{\\spad{R}} and are pairwise distinct.")) (|removeRedundantFactorsInPols| (((|List| |#4|) (|List| |#4|) (|List| |#4|)) "\\axiom{removeRedundantFactorsInPols(lp,{}lf)} returns \\axiom{newlp} where \\axiom{newlp} is obtained from \\axiom{lp} by removing in every polynomial \\axiom{\\spad{p}} of \\axiom{lp} any non trivial factor of any polynomial \\axiom{\\spad{f}} in \\axiom{lf}. Moreover,{} squares over \\axiom{\\spad{R}} are first removed in every polynomial \\axiom{lp}.")) (|removeRedundantFactorsInContents| (((|List| |#4|) (|List| |#4|) (|List| |#4|)) "\\axiom{removeRedundantFactorsInContents(lp,{}lf)} returns \\axiom{newlp} where \\axiom{newlp} is obtained from \\axiom{lp} by removing in the content of every polynomial of \\axiom{lp} any non trivial factor of any polynomial \\axiom{\\spad{f}} in \\axiom{lf}. Moreover,{} squares over \\axiom{\\spad{R}} are first removed in the content of every polynomial of \\axiom{lp}.")) (|removeRoughlyRedundantFactorsInContents| (((|List| |#4|) (|List| |#4|) (|List| |#4|)) "\\axiom{removeRoughlyRedundantFactorsInContents(lp,{}lf)} returns \\axiom{newlp}where \\axiom{newlp} is obtained from \\axiom{lp} by removing in the content of every polynomial of \\axiom{lp} any occurence of a polynomial \\axiom{\\spad{f}} in \\axiom{lf}. Moreover,{} squares over \\axiom{\\spad{R}} are first removed in the content of every polynomial of \\axiom{lp}.")) (|univariatePolynomialsGcds| (((|List| |#4|) (|List| |#4|) (|Boolean|)) "\\axiom{univariatePolynomialsGcds(lp,{}opt)} returns the same as \\axiom{univariatePolynomialsGcds(lp)} if \\axiom{opt} is \\axiom{\\spad{false}} and if the previous operation does not return any non null and constant polynomial,{} else return \\axiom{[1]}.") (((|List| |#4|) (|List| |#4|)) "\\axiom{univariatePolynomialsGcds(lp)} returns \\axiom{lg} where \\axiom{lg} is a list of the gcds of every pair in \\axiom{lp} of univariate polynomials in the same main variable.")) (|squareFreeFactors| (((|List| |#4|) |#4|) "\\axiom{squareFreeFactors(\\spad{p})} returns the square-free factors of \\axiom{\\spad{p}} over \\axiom{\\spad{R}}")) (|rewriteIdealWithQuasiMonicGenerators| (((|List| |#4|) (|List| |#4|) (|Mapping| (|Boolean|) |#4| |#4|) (|Mapping| |#4| |#4| |#4|)) "\\axiom{rewriteIdealWithQuasiMonicGenerators(lp,{}redOp?,{}redOp)} returns \\axiom{lq} where \\axiom{lq} and \\axiom{lp} generate the same ideal in \\axiom{R^(\\spad{-1}) \\spad{P}} and \\axiom{lq} has rank not higher than the one of \\axiom{lp}. Moreover,{} \\axiom{lq} is computed by reducing \\axiom{lp} \\spad{w}.\\spad{r}.\\spad{t}. some basic set of the ideal generated by the quasi-monic polynomials in \\axiom{lp}.")) (|rewriteSetByReducingWithParticularGenerators| (((|List| |#4|) (|List| |#4|) (|Mapping| (|Boolean|) |#4|) (|Mapping| (|Boolean|) |#4| |#4|) (|Mapping| |#4| |#4| |#4|)) "\\axiom{rewriteSetByReducingWithParticularGenerators(lp,{}pred?,{}redOp?,{}redOp)} returns \\axiom{lq} where \\axiom{lq} is computed by the following algorithm. Chose a basic set \\spad{w}.\\spad{r}.\\spad{t}. the reduction-test \\axiom{redOp?} among the polynomials satisfying property \\axiom{pred?},{} if it is empty then leave,{} else reduce the other polynomials by this basic set \\spad{w}.\\spad{r}.\\spad{t}. the reduction-operation \\axiom{redOp}. Repeat while another basic set with smaller rank can be computed. See code. If \\axiom{pred?} is \\axiom{quasiMonic?} the ideal is unchanged.")) (|crushedSet| (((|List| |#4|) (|List| |#4|)) "\\axiom{crushedSet(lp)} returns \\axiom{lq} such that \\axiom{lp} and and \\axiom{lq} generate the same ideal and no rough basic sets reduce (in the sense of Groebner bases) the other polynomials in \\axiom{lq}.")) (|roughBasicSet| (((|Union| (|Record| (|:| |bas| (|GeneralTriangularSet| |#1| |#2| |#3| |#4|)) (|:| |top| (|List| |#4|))) "failed") (|List| |#4|)) "\\axiom{roughBasicSet(lp)} returns the smallest (with Ritt-Wu ordering) triangular set contained in \\axiom{lp}.")) (|interReduce| (((|List| |#4|) (|List| |#4|)) "\\axiom{interReduce(lp)} returns \\axiom{lq} such that \\axiom{lp} and \\axiom{lq} generate the same ideal and no polynomial in \\axiom{lq} is reducuble by the others in the sense of Groebner bases. Since no assumptions are required the result may depend on the ordering the reductions are performed.")) (|removeRoughlyRedundantFactorsInPol| ((|#4| |#4| (|List| |#4|)) "\\axiom{removeRoughlyRedundantFactorsInPol(\\spad{p},{}lf)} returns the same as removeRoughlyRedundantFactorsInPols([\\spad{p}],{}lf,{}\\spad{true})")) (|removeRoughlyRedundantFactorsInPols| (((|List| |#4|) (|List| |#4|) (|List| |#4|) (|Boolean|)) "\\axiom{removeRoughlyRedundantFactorsInPols(lp,{}lf,{}opt)} returns the same as \\axiom{removeRoughlyRedundantFactorsInPols(lp,{}lf)} if \\axiom{opt} is \\axiom{\\spad{false}} and if the previous operation does not return any non null and constant polynomial,{} else return \\axiom{[1]}.") (((|List| |#4|) (|List| |#4|) (|List| |#4|)) "\\axiom{removeRoughlyRedundantFactorsInPols(lp,{}lf)} returns \\axiom{newlp}where \\axiom{newlp} is obtained from \\axiom{lp} by removing in every polynomial \\axiom{\\spad{p}} of \\axiom{lp} any occurence of a polynomial \\axiom{\\spad{f}} in \\axiom{lf}. This may involve a lot of exact-quotients computations.")) (|bivariatePolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|List| |#4|)) "\\axiom{bivariatePolynomials(lp)} returns \\axiom{bps,{}nbps} where \\axiom{bps} is a list of the bivariate polynomials,{} and \\axiom{nbps} are the other ones.")) (|bivariate?| (((|Boolean|) |#4|) "\\axiom{bivariate?(\\spad{p})} returns \\spad{true} iff \\axiom{\\spad{p}} involves two and only two variables.")) (|linearPolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|List| |#4|)) "\\axiom{linearPolynomials(lp)} returns \\axiom{lps,{}nlps} where \\axiom{lps} is a list of the linear polynomials in lp,{} and \\axiom{nlps} are the other ones.")) (|linear?| (((|Boolean|) |#4|) "\\axiom{linear?(\\spad{p})} returns \\spad{true} iff \\axiom{\\spad{p}} does not lie in the base ring \\axiom{\\spad{R}} and has main degree \\axiom{1}.")) (|univariatePolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|List| |#4|)) "\\axiom{univariatePolynomials(lp)} returns \\axiom{ups,{}nups} where \\axiom{ups} is a list of the univariate polynomials,{} and \\axiom{nups} are the other ones.")) (|univariate?| (((|Boolean|) |#4|) "\\axiom{univariate?(\\spad{p})} returns \\spad{true} iff \\axiom{\\spad{p}} involves one and only one variable.")) (|quasiMonicPolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|List| |#4|)) "\\axiom{quasiMonicPolynomials(lp)} returns \\axiom{qmps,{}nqmps} where \\axiom{qmps} is a list of the quasi-monic polynomials in \\axiom{lp} and \\axiom{nqmps} are the other ones.")) (|selectAndPolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|List| (|Mapping| (|Boolean|) |#4|)) (|List| |#4|)) "\\axiom{selectAndPolynomials(lpred?,{}ps)} returns \\axiom{gps,{}bps} where \\axiom{gps} is a list of the polynomial \\axiom{\\spad{p}} in \\axiom{ps} such that \\axiom{pred?(\\spad{p})} holds for every \\axiom{pred?} in \\axiom{lpred?} and \\axiom{bps} are the other ones.")) (|selectOrPolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|List| (|Mapping| (|Boolean|) |#4|)) (|List| |#4|)) "\\axiom{selectOrPolynomials(lpred?,{}ps)} returns \\axiom{gps,{}bps} where \\axiom{gps} is a list of the polynomial \\axiom{\\spad{p}} in \\axiom{ps} such that \\axiom{pred?(\\spad{p})} holds for some \\axiom{pred?} in \\axiom{lpred?} and \\axiom{bps} are the other ones.")) (|selectPolynomials| (((|Record| (|:| |goodPols| (|List| |#4|)) (|:| |badPols| (|List| |#4|))) (|Mapping| (|Boolean|) |#4|) (|List| |#4|)) "\\axiom{selectPolynomials(pred?,{}ps)} returns \\axiom{gps,{}bps} where \\axiom{gps} is a list of the polynomial \\axiom{\\spad{p}} in \\axiom{ps} such that \\axiom{pred?(\\spad{p})} holds and \\axiom{bps} are the other ones.")) (|probablyZeroDim?| (((|Boolean|) (|List| |#4|)) "\\axiom{probablyZeroDim?(lp)} returns \\spad{true} iff the number of polynomials in \\axiom{lp} is not smaller than the number of variables occurring in these polynomials.")) (|possiblyNewVariety?| (((|Boolean|) (|List| |#4|) (|List| (|List| |#4|))) "\\axiom{possiblyNewVariety?(newlp,{}llp)} returns \\spad{true} iff for every \\axiom{lp} in \\axiom{llp} certainlySubVariety?(newlp,{}lp) does not hold.")) (|certainlySubVariety?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{certainlySubVariety?(newlp,{}lp)} returns \\spad{true} iff for every \\axiom{\\spad{p}} in \\axiom{lp} the remainder of \\axiom{\\spad{p}} by \\axiom{newlp} using the division algorithm of Groebner techniques is zero.")) (|unprotectedRemoveRedundantFactors| (((|List| |#4|) |#4| |#4|) "\\axiom{unprotectedRemoveRedundantFactors(\\spad{p},{}\\spad{q})} returns the same as \\axiom{removeRedundantFactors(\\spad{p},{}\\spad{q})} but does assume that neither \\axiom{\\spad{p}} nor \\axiom{\\spad{q}} lie in the base ring \\axiom{\\spad{R}} and assumes that \\axiom{infRittWu?(\\spad{p},{}\\spad{q})} holds. Moreover,{} if \\axiom{\\spad{R}} is gcd-domain,{} then \\axiom{\\spad{p}} and \\axiom{\\spad{q}} are assumed to be square free.")) (|removeSquaresIfCan| (((|List| |#4|) (|List| |#4|)) "\\axiom{removeSquaresIfCan(lp)} returns \\axiom{removeDuplicates [squareFreePart(\\spad{p})\\$\\spad{P} for \\spad{p} in lp]} if \\axiom{\\spad{R}} is gcd-domain else returns \\axiom{lp}.")) (|removeRedundantFactors| (((|List| |#4|) (|List| |#4|) (|List| |#4|) (|Mapping| (|List| |#4|) (|List| |#4|))) "\\axiom{removeRedundantFactors(lp,{}lq,{}remOp)} returns the same as \\axiom{concat(remOp(removeRoughlyRedundantFactorsInPols(lp,{}lq)),{}lq)} assuming that \\axiom{remOp(lq)} returns \\axiom{lq} up to similarity.") (((|List| |#4|) (|List| |#4|) (|List| |#4|)) "\\axiom{removeRedundantFactors(lp,{}lq)} returns the same as \\axiom{removeRedundantFactors(concat(lp,{}lq))} assuming that \\axiom{removeRedundantFactors(lp)} returns \\axiom{lp} up to replacing some polynomial \\axiom{pj} in \\axiom{lp} by some polynomial \\axiom{qj} associated to \\axiom{pj}.") (((|List| |#4|) (|List| |#4|) |#4|) "\\axiom{removeRedundantFactors(lp,{}\\spad{q})} returns the same as \\axiom{removeRedundantFactors(cons(\\spad{q},{}lp))} assuming that \\axiom{removeRedundantFactors(lp)} returns \\axiom{lp} up to replacing some polynomial \\axiom{pj} in \\axiom{lp} by some some polynomial \\axiom{qj} associated to \\axiom{pj}.") (((|List| |#4|) |#4| |#4|) "\\axiom{removeRedundantFactors(\\spad{p},{}\\spad{q})} returns the same as \\axiom{removeRedundantFactors([\\spad{p},{}\\spad{q}])}") (((|List| |#4|) (|List| |#4|)) "\\axiom{removeRedundantFactors(lp)} returns \\axiom{lq} such that if \\axiom{lp = [\\spad{p1},{}...,{}pn]} and \\axiom{lq = [\\spad{q1},{}...,{}qm]} then the product \\axiom{p1*p2*...*pn} vanishes iff the product \\axiom{q1*q2*...*qm} vanishes,{} and the product of degrees of the \\axiom{\\spad{qi}} is not greater than the one of the \\axiom{pj},{} and no polynomial in \\axiom{lq} divides another polynomial in \\axiom{lq}. In particular,{} polynomials lying in the base ring \\axiom{\\spad{R}} are removed. Moreover,{} \\axiom{lq} is sorted \\spad{w}.\\spad{r}.\\spad{t} \\axiom{infRittWu?}. Furthermore,{} if \\spad{R} is gcd-domain,{} the polynomials in \\axiom{lq} are pairwise without common non trivial factor."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-258)))) (|HasCategory| |#1| (QUOTE (-391)))) 
(-891 K) 
((|constructor| (NIL "PseudoLinearNormalForm provides a function for computing a block-companion form for pseudo-linear operators.")) (|companionBlocks| (((|List| (|Record| (|:| C (|Matrix| |#1|)) (|:| |g| (|Vector| |#1|)))) (|Matrix| |#1|) (|Vector| |#1|)) "\\spad{companionBlocks(m, v)} returns \\spad{[[C_1, g_1],...,[C_k, g_k]]} such that each \\spad{C_i} is a companion block and \\spad{m = diagonal(C_1,...,C_k)}.")) (|changeBase| (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|) (|Automorphism| |#1|) (|Mapping| |#1| |#1|)) "\\spad{changeBase(M, A, sig, der)}: computes the new matrix of a pseudo-linear transform given by the matrix \\spad{M} under the change of base A")) (|normalForm| (((|Record| (|:| R (|Matrix| |#1|)) (|:| A (|Matrix| |#1|)) (|:| |Ainv| (|Matrix| |#1|))) (|Matrix| |#1|) (|Automorphism| |#1|) (|Mapping| |#1| |#1|)) "\\spad{normalForm(M, sig, der)} returns \\spad{[R, A, A^{-1}]} such that the pseudo-linear operator whose matrix in the basis \\spad{y} is \\spad{M} had matrix \\spad{R} in the basis \\spad{z = A y}. \\spad{der} is a \\spad{sig}-derivation."))) 
NIL 
NIL 
(-892 |VarSet| E RC P) 
((|constructor| (NIL "This package computes square-free decomposition of multivariate polynomials over a coefficient ring which is an arbitrary gcd domain. The requirement on the coefficient domain guarantees that the \\spadfun{content} can be removed so that factors will be primitive as well as square-free. Over an infinite ring of finite characteristic,{}it may not be possible to guarantee that the factors are square-free.")) (|squareFree| (((|Factored| |#4|) |#4|) "\\spad{squareFree(p)} returns the square-free factorization of the polynomial \\spad{p}. Each factor has no repeated roots,{} and the factors are pairwise relatively prime."))) 
NIL 
NIL 
(-893 R) 
((|constructor| (NIL "PointCategory is the category of points in space which may be plotted via the graphics facilities. Functions are provided for defining points and handling elements of points.")) (|extend| (($ $ (|List| |#1|)) "\\spad{extend(x,l,r)} \\undocumented")) (|cross| (($ $ $) "\\spad{cross(p,q)} computes the cross product of the two points \\spad{p} and \\spad{q}. Error if the \\spad{p} and \\spad{q} are not 3 dimensional")) (|dimension| (((|PositiveInteger|) $) "\\spad{dimension(s)} returns the dimension of the point category \\spad{s}.")) (|point| (($ (|List| |#1|)) "\\spad{point(l)} returns a point category defined by a list \\spad{l} of elements from the domain \\spad{R}."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-894 R1 R2) 
((|constructor| (NIL "This package \\undocumented")) (|map| (((|Point| |#2|) (|Mapping| |#2| |#1|) (|Point| |#1|)) "\\spad{map(f,p)} \\undocumented"))) 
NIL 
NIL 
(-895 R) 
((|constructor| (NIL "This package \\undocumented")) (|shade| ((|#1| (|Point| |#1|)) "\\spad{shade(pt)} returns the fourth element of the two dimensional point,{} \\spad{pt},{} although no assumptions are made with regards as to how the components of higher dimensional points are interpreted. This function is defined for the convenience of the user using specifically,{} shade to express a fourth dimension.")) (|hue| ((|#1| (|Point| |#1|)) "\\spad{hue(pt)} returns the third element of the two dimensional point,{} \\spad{pt},{} although no assumptions are made with regards as to how the components of higher dimensional points are interpreted. This function is defined for the convenience of the user using specifically,{} hue to express a third dimension.")) (|color| ((|#1| (|Point| |#1|)) "\\spad{color(pt)} returns the fourth element of the point,{} \\spad{pt},{} although no assumptions are made with regards as to how the components of higher dimensional points are interpreted. This function is defined for the convenience of the user using specifically,{} color to express a fourth dimension.")) (|phiCoord| ((|#1| (|Point| |#1|)) "\\spad{phiCoord(pt)} returns the third element of the point,{} \\spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a spherical coordinate system.")) (|thetaCoord| ((|#1| (|Point| |#1|)) "\\spad{thetaCoord(pt)} returns the second element of the point,{} \\spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a spherical or a cylindrical coordinate system.")) (|rCoord| ((|#1| (|Point| |#1|)) "\\spad{rCoord(pt)} returns the first element of the point,{} \\spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a spherical or a cylindrical coordinate system.")) (|zCoord| ((|#1| (|Point| |#1|)) "\\spad{zCoord(pt)} returns the third element of the point,{} \\spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a Cartesian or a cylindrical coordinate system.")) (|yCoord| ((|#1| (|Point| |#1|)) "\\spad{yCoord(pt)} returns the second element of the point,{} \\spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a Cartesian coordinate system.")) (|xCoord| ((|#1| (|Point| |#1|)) "\\spad{xCoord(pt)} returns the first element of the point,{} \\spad{pt},{} although no assumptions are made as to the coordinate system being used. This function is defined for the convenience of the user dealing with a Cartesian coordinate system."))) 
NIL 
NIL 
(-896 K) 
((|constructor| (NIL "This is the description of any package which provides partial functions on a domain belonging to TranscendentalFunctionCategory.")) (|acschIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{acschIfCan(z)} returns acsch(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|asechIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{asechIfCan(z)} returns asech(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|acothIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{acothIfCan(z)} returns acoth(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|atanhIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{atanhIfCan(z)} returns atanh(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|acoshIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{acoshIfCan(z)} returns acosh(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|asinhIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{asinhIfCan(z)} returns asinh(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|cschIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{cschIfCan(z)} returns csch(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|sechIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{sechIfCan(z)} returns sech(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|cothIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{cothIfCan(z)} returns coth(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|tanhIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{tanhIfCan(z)} returns tanh(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|coshIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{coshIfCan(z)} returns cosh(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|sinhIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{sinhIfCan(z)} returns sinh(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|acscIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{acscIfCan(z)} returns acsc(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|asecIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{asecIfCan(z)} returns asec(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|acotIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{acotIfCan(z)} returns acot(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|atanIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{atanIfCan(z)} returns atan(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|acosIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{acosIfCan(z)} returns acos(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|asinIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{asinIfCan(z)} returns asin(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|cscIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{cscIfCan(z)} returns csc(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|secIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{secIfCan(z)} returns sec(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|cotIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{cotIfCan(z)} returns cot(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|tanIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{tanIfCan(z)} returns tan(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|cosIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{cosIfCan(z)} returns cos(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|sinIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{sinIfCan(z)} returns sin(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|logIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{logIfCan(z)} returns log(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|expIfCan| (((|Union| |#1| "failed") |#1|) "\\spad{expIfCan(z)} returns exp(\\spad{z}) if possible,{} and \"failed\" otherwise.")) (|nthRootIfCan| (((|Union| |#1| "failed") |#1| (|NonNegativeInteger|)) "\\spad{nthRootIfCan(z,n)} returns the \\spad{n}th root of \\spad{z} if possible,{} and \"failed\" otherwise."))) 
NIL 
NIL 
(-897 R E OV PPR) 
((|constructor| (NIL "This package \\undocumented{}")) (|map| ((|#4| (|Mapping| |#4| (|Polynomial| |#1|)) |#4|) "\\spad{map(f,p)} \\undocumented{}")) (|pushup| ((|#4| |#4| (|List| |#3|)) "\\spad{pushup(p,lv)} \\undocumented{}") ((|#4| |#4| |#3|) "\\spad{pushup(p,v)} \\undocumented{}")) (|pushdown| ((|#4| |#4| (|List| |#3|)) "\\spad{pushdown(p,lv)} \\undocumented{}") ((|#4| |#4| |#3|) "\\spad{pushdown(p,v)} \\undocumented{}")) (|variable| (((|Union| $ "failed") (|Symbol|)) "\\spad{variable(s)} makes an element from symbol \\spad{s} or fails")) (|convert| (((|Symbol|) $) "\\spad{convert(x)} converts \\spad{x} to a symbol"))) 
NIL 
NIL 
(-898 K R UP -3092) 
((|constructor| (NIL "In this package \\spad{K} is a finite field,{} \\spad{R} is a ring of univariate polynomials over \\spad{K},{} and \\spad{F} is a monogenic algebra over \\spad{R}. We require that \\spad{F} is monogenic,{} \\spadignore{i.e.} that \\spad{F = K[x,y]/(f(x,y))},{} because the integral basis algorithm used will factor the polynomial \\spad{f(x,y)}. The package provides a function to compute the integral closure of \\spad{R} in the quotient field of \\spad{F} as well as a function to compute a \"local integral basis\" at a specific prime.")) (|reducedDiscriminant| ((|#2| |#3|) "\\spad{reducedDiscriminant(up)} \\undocumented")) (|localIntegralBasis| (((|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|))) |#2|) "\\spad{integralBasis(p)} returns a record \\spad{[basis,basisDen,basisInv] } containing information regarding the local integral closure of \\spad{R} at the prime \\spad{p} in the quotient field of the framed algebra \\spad{F}. \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn}. If 'basis' is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the local integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of 'basis' contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix 'basisInv' contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if 'basisInv' is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|integralBasis| (((|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|)))) "\\spad{integralBasis()} returns a record \\spad{[basis,basisDen,basisInv] } containing information regarding the integral closure of \\spad{R} in the quotient field of the framed algebra \\spad{F}. \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn}. If 'basis' is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of 'basis' contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix 'basisInv' contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if 'basisInv' is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}."))) 
NIL 
NIL 
(-899 R |Var| |Expon| |Dpoly|) 
((|constructor| (NIL "\\spadtype{QuasiAlgebraicSet} constructs a domain representing quasi-algebraic sets,{} which is the intersection of a Zariski closed set,{} defined as the common zeros of a given list of polynomials (the defining polynomials for equations),{} and a principal Zariski open set,{} defined as the complement of the common zeros of a polynomial \\spad{f} (the defining polynomial for the inequation). This domain provides simplification of a user-given representation using groebner basis computations. There are two simplification routines: the first function \\spadfun{idealSimplify} uses groebner basis of ideals alone,{} while the second,{} \\spadfun{simplify} uses both groebner basis and factorization. The resulting defining equations \\spad{L} always form a groebner basis,{} and the resulting defining inequation \\spad{f} is always reduced. The function \\spadfun{simplify} may be applied several times if desired. A third simplification routine \\spadfun{radicalSimplify} is provided in \\spadtype{QuasiAlgebraicSet2} for comparison study only,{} as it is inefficient compared to the other two,{} as well as is restricted to only certain coefficient domains. For detail analysis and a comparison of the three methods,{} please consult the reference cited. \\blankline A polynomial function \\spad{q} defined on the quasi-algebraic set is equivalent to its reduced form with respect to \\spad{L}. While this may be obtained using the usual normal form algorithm,{} there is no canonical form for \\spad{q}. \\blankline The ordering in groebner basis computation is determined by the data type of the input polynomials. If it is possible we suggest to use refinements of total degree orderings.")) (|simplify| (($ $) "\\spad{simplify(s)} returns a different and presumably simpler representation of \\spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using a heuristic algorithm based on factoring.")) (|idealSimplify| (($ $) "\\spad{idealSimplify(s)} returns a different and presumably simpler representation of \\spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using Buchberger's algorithm.")) (|definingInequation| ((|#4| $) "\\spad{definingInequation(s)} returns a single defining polynomial for the inequation,{} that is,{} the Zariski open part of \\spad{s}.")) (|definingEquations| (((|List| |#4|) $) "\\spad{definingEquations(s)} returns a list of defining polynomials for equations,{} that is,{} for the Zariski closed part of \\spad{s}.")) (|empty?| (((|Boolean|) $) "\\spad{empty?(s)} returns \\spad{true} if the quasialgebraic set \\spad{s} has no points,{} and \\spad{false} otherwise.")) (|setStatus| (($ $ (|Union| (|Boolean|) #1="failed")) "\\spad{setStatus(s,t)} returns the same representation for \\spad{s},{} but asserts the following: if \\spad{t} is \\spad{true},{} then \\spad{s} is empty,{} if \\spad{t} is \\spad{false},{} then \\spad{s} is non-empty,{} and if \\spad{t} = \"failed\",{} then no assertion is made (that is,{} \"don't know\"). Note: for internal use only,{} with care.")) (|status| (((|Union| (|Boolean|) #1#) $) "\\spad{status(s)} returns \\spad{true} if the quasi-algebraic set is empty,{} \\spad{false} if it is not,{} and \"failed\" if not yet known")) (|quasiAlgebraicSet| (($ (|List| |#4|) |#4|) "\\spad{quasiAlgebraicSet(pl,q)} returns the quasi-algebraic set with defining equations \\spad{p} = 0 for \\spad{p} belonging to the list \\spad{pl},{} and defining inequation \\spad{q} ~= 0.")) (|empty| (($) "\\spad{empty()} returns the empty quasi-algebraic set"))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-258))))) 
(-900 |vl| |nv|) 
((|constructor| (NIL "\\spadtype{QuasiAlgebraicSet2} adds a function \\spadfun{radicalSimplify} which uses \\spadtype{IdealDecompositionPackage} to simplify the representation of a quasi-algebraic set. A quasi-algebraic set is the intersection of a Zariski closed set,{} defined as the common zeros of a given list of polynomials (the defining polynomials for equations),{} and a principal Zariski open set,{} defined as the complement of the common zeros of a polynomial \\spad{f} (the defining polynomial for the inequation). Quasi-algebraic sets are implemented in the domain \\spadtype{QuasiAlgebraicSet},{} where two simplification routines are provided: \\spadfun{idealSimplify} and \\spadfun{simplify}. The function \\spadfun{radicalSimplify} is added for comparison study only. Because the domain \\spadtype{IdealDecompositionPackage} provides facilities for computing with radical ideals,{} it is necessary to restrict the ground ring to the domain \\spadtype{Fraction Integer},{} and the polynomial ring to be of type \\spadtype{DistributedMultivariatePolynomial}. The routine \\spadfun{radicalSimplify} uses these to compute groebner basis of radical ideals and is inefficient and restricted when compared to the two in \\spadtype{QuasiAlgebraicSet}.")) (|radicalSimplify| (((|QuasiAlgebraicSet| (|Fraction| (|Integer|)) (|OrderedVariableList| |#1|) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|)))) (|QuasiAlgebraicSet| (|Fraction| (|Integer|)) (|OrderedVariableList| |#1|) (|DirectProduct| |#2| (|NonNegativeInteger|)) (|DistributedMultivariatePolynomial| |#1| (|Fraction| (|Integer|))))) "\\spad{radicalSimplify(s)} returns a different and presumably simpler representation of \\spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using using groebner basis of radical ideals"))) 
NIL 
NIL 
(-901 R E V P TS) 
((|constructor| (NIL "A package for removing redundant quasi-components and redundant branches when decomposing a variety by means of quasi-components of regular triangular sets. \\newline References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991} \\indented{1}{[2] \\spad{M}. MORENO MAZA \"Calculs de pgcd au-dessus des tours} \\indented{5}{d'extensions simples et resolution des systemes d'equations} \\indented{5}{algebriques\" These,{} Universite \\spad{P}.etM. Curie,{} Paris,{} 1997.} \\indented{1}{[3] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|branchIfCan| (((|Union| (|Record| (|:| |eq| (|List| |#4|)) (|:| |tower| |#5|) (|:| |ineq| (|List| |#4|))) "failed") (|List| |#4|) |#5| (|List| |#4|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{branchIfCan(leq,{}ts,{}lineq,{}\\spad{b1},{}\\spad{b2},{}\\spad{b3},{}\\spad{b4},{}\\spad{b5})} is an internal subroutine,{} exported only for developement.")) (|prepareDecompose| (((|List| (|Record| (|:| |eq| (|List| |#4|)) (|:| |tower| |#5|) (|:| |ineq| (|List| |#4|)))) (|List| |#4|) (|List| |#5|) (|Boolean|) (|Boolean|)) "\\axiom{prepareDecompose(lp,{}lts,{}\\spad{b1},{}\\spad{b2})} is an internal subroutine,{} exported only for developement.")) (|removeSuperfluousCases| (((|List| (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|))) (|List| (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|)))) "\\axiom{removeSuperfluousCases(llpwt)} is an internal subroutine,{} exported only for developement.")) (|subCase?| (((|Boolean|) (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|)) (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|))) "\\axiom{subCase?(\\spad{lpwt1},{}\\spad{lpwt2})} is an internal subroutine,{} exported only for developement.")) (|removeSuperfluousQuasiComponents| (((|List| |#5|) (|List| |#5|)) "\\axiom{removeSuperfluousQuasiComponents(lts)} removes from \\axiom{lts} any \\spad{ts} such that \\axiom{subQuasiComponent?(ts,{}us)} holds for another \\spad{us} in \\axiom{lts}.")) (|subQuasiComponent?| (((|Boolean|) |#5| (|List| |#5|)) "\\axiom{subQuasiComponent?(ts,{}lus)} returns \\spad{true} iff \\axiom{subQuasiComponent?(ts,{}us)} holds for one \\spad{us} in \\spad{lus}.") (((|Boolean|) |#5| |#5|) "\\axiom{subQuasiComponent?(ts,{}us)} returns \\spad{true} iff \\axiomOpFrom{internalSubQuasiComponent?}{QuasiComponentPackage} returs \\spad{true}.")) (|internalSubQuasiComponent?| (((|Union| (|Boolean|) "failed") |#5| |#5|) "\\axiom{internalSubQuasiComponent?(ts,{}us)} returns a boolean \\spad{b} value if the fact that the regular zero set of \\axiom{us} contains that of \\axiom{ts} can be decided (and in that case \\axiom{\\spad{b}} gives this inclusion) otherwise returns \\axiom{\"failed\"}.")) (|infRittWu?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{infRittWu?(\\spad{lp1},{}\\spad{lp2})} is an internal subroutine,{} exported only for developement.")) (|internalInfRittWu?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{internalInfRittWu?(\\spad{lp1},{}\\spad{lp2})} is an internal subroutine,{} exported only for developement.")) (|internalSubPolSet?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{internalSubPolSet?(\\spad{lp1},{}\\spad{lp2})} returns \\spad{true} iff \\axiom{\\spad{lp1}} is a sub-set of \\axiom{\\spad{lp2}} assuming that these lists are sorted increasingly \\spad{w}.\\spad{r}.\\spad{t}. \\axiomOpFrom{infRittWu?}{RecursivePolynomialCategory}.")) (|subPolSet?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{subPolSet?(\\spad{lp1},{}\\spad{lp2})} returns \\spad{true} iff \\axiom{\\spad{lp1}} is a sub-set of \\axiom{\\spad{lp2}}.")) (|subTriSet?| (((|Boolean|) |#5| |#5|) "\\axiom{subTriSet?(ts,{}us)} returns \\spad{true} iff \\axiom{ts} is a sub-set of \\axiom{us}.")) (|moreAlgebraic?| (((|Boolean|) |#5| |#5|) "\\axiom{moreAlgebraic?(ts,{}us)} returns \\spad{false} iff \\axiom{ts} and \\axiom{us} are both empty,{} or \\axiom{ts} has less elements than \\axiom{us},{} or some variable is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{us} and is not \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ts}.")) (|algebraicSort| (((|List| |#5|) (|List| |#5|)) "\\axiom{algebraicSort(lts)} sorts \\axiom{lts} \\spad{w}.\\spad{r}.\\spad{t} \\axiomOpFrom{supDimElseRittWu?}{QuasiComponentPackage}.")) (|supDimElseRittWu?| (((|Boolean|) |#5| |#5|) "\\axiom{supDimElseRittWu(ts,{}us)} returns \\spad{true} iff \\axiom{ts} has less elements than \\axiom{us} otherwise if \\axiom{ts} has higher rank than \\axiom{us} \\spad{w}.\\spad{r}.\\spad{t}. Riit and Wu ordering.")) (|stopTable!| (((|Void|)) "\\axiom{stopTableGcd!()} is an internal subroutine,{} exported only for developement.")) (|startTable!| (((|Void|) (|String|) (|String|) (|String|)) "\\axiom{startTableGcd!(\\spad{s1},{}\\spad{s2},{}\\spad{s3})} is an internal subroutine,{} exported only for developement."))) 
NIL 
NIL 
(-902) 
((|constructor| (NIL "This domain implements simple database queries")) (|value| (((|String|) $) "\\spad{value(q)} returns the value (\\spadignore{i.e.} right hand side) of \\axiom{\\spad{q}}.")) (|variable| (((|Symbol|) $) "\\spad{variable(q)} returns the variable (\\spadignore{i.e.} left hand side) of \\axiom{\\spad{q}}.")) (|equation| (($ (|Symbol|) (|String|)) "\\spad{equation(s,\"a\")} creates a new equation."))) 
NIL 
NIL 
(-903 A S) 
((|constructor| (NIL "QuotientField(\\spad{S}) is the category of fractions of an Integral Domain \\spad{S}.")) (|floor| ((|#2| $) "\\spad{floor(x)} returns the largest integral element below \\spad{x}.")) (|ceiling| ((|#2| $) "\\spad{ceiling(x)} returns the smallest integral element above \\spad{x}.")) (|random| (($) "\\spad{random()} returns a random fraction.")) (|fractionPart| (($ $) "\\spad{fractionPart(x)} returns the fractional part of \\spad{x}. \\spad{x} = wholePart(\\spad{x}) + fractionPart(\\spad{x})")) (|wholePart| ((|#2| $) "\\spad{wholePart(x)} returns the whole part of the fraction \\spad{x} \\spadignore{i.e.} the truncated quotient of the numerator by the denominator.")) (|denominator| (($ $) "\\spad{denominator(x)} is the denominator of the fraction \\spad{x} converted to \\%.")) (|numerator| (($ $) "\\spad{numerator(x)} is the numerator of the fraction \\spad{x} converted to \\%.")) (|denom| ((|#2| $) "\\spad{denom(x)} returns the denominator of the fraction \\spad{x}.")) (|numer| ((|#2| $) "\\spad{numer(x)} returns the numerator of the fraction \\spad{x}.")) (/ (($ |#2| |#2|) "\\spad{d1 / d2} returns the fraction \\spad{d1} divided by \\spad{d2}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| |#2| (QUOTE (-483))) (|HasCategory| |#2| (QUOTE (-258))) (|HasCategory| |#2| (QUOTE (-950 (-1089)))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-933))) (|HasCategory| |#2| (QUOTE (-740))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-1065)))) 
(-904 S) 
((|constructor| (NIL "QuotientField(\\spad{S}) is the category of fractions of an Integral Domain \\spad{S}.")) (|floor| ((|#1| $) "\\spad{floor(x)} returns the largest integral element below \\spad{x}.")) (|ceiling| ((|#1| $) "\\spad{ceiling(x)} returns the smallest integral element above \\spad{x}.")) (|random| (($) "\\spad{random()} returns a random fraction.")) (|fractionPart| (($ $) "\\spad{fractionPart(x)} returns the fractional part of \\spad{x}. \\spad{x} = wholePart(\\spad{x}) + fractionPart(\\spad{x})")) (|wholePart| ((|#1| $) "\\spad{wholePart(x)} returns the whole part of the fraction \\spad{x} \\spadignore{i.e.} the truncated quotient of the numerator by the denominator.")) (|denominator| (($ $) "\\spad{denominator(x)} is the denominator of the fraction \\spad{x} converted to \\%.")) (|numerator| (($ $) "\\spad{numerator(x)} is the numerator of the fraction \\spad{x} converted to \\%.")) (|denom| ((|#1| $) "\\spad{denom(x)} returns the denominator of the fraction \\spad{x}.")) (|numer| ((|#1| $) "\\spad{numer(x)} returns the numerator of the fraction \\spad{x}.")) (/ (($ |#1| |#1|) "\\spad{d1 / d2} returns the fraction \\spad{d1} divided by \\spad{d2}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-905 A B R S) 
((|constructor| (NIL "This package extends a function between integral domains to a mapping between their quotient fields.")) (|map| ((|#4| (|Mapping| |#2| |#1|) |#3|) "\\spad{map(func,frac)} applies the function \\spad{func} to the numerator and denominator of \\spad{frac}."))) 
NIL 
NIL 
(-906 |n| K) 
((|constructor| (NIL "This domain provides modest support for quadratic forms.")) (|matrix| (((|SquareMatrix| |#1| |#2|) $) "\\spad{matrix(qf)} creates a square matrix from the quadratic form \\spad{qf}.")) (|quadraticForm| (($ (|SquareMatrix| |#1| |#2|)) "\\spad{quadraticForm(m)} creates a quadratic form from a symmetric,{} square matrix \\spad{m}."))) 
NIL 
NIL 
(-907) 
((|constructor| (NIL "This domain represents the syntax of a quasiquote \\indented{2}{expression.}")) (|expression| (((|SpadAst|) $) "\\spad{expression(e)} returns the syntax for the expression being quoted."))) 
NIL 
NIL 
(-908 S) 
((|constructor| (NIL "A queue is a bag where the first item inserted is the first item extracted.")) (|back| ((|#1| $) "\\spad{back(q)} returns the element at the back of the queue. The queue \\spad{q} is unchanged by this operation. Error: if \\spad{q} is empty.")) (|front| ((|#1| $) "\\spad{front(q)} returns the element at the front of the queue. The queue \\spad{q} is unchanged by this operation. Error: if \\spad{q} is empty.")) (|length| (((|NonNegativeInteger|) $) "\\spad{length(q)} returns the number of elements in the queue. Note: \\axiom{length(\\spad{q}) = \\#q}.")) (|rotate!| (($ $) "\\spad{rotate! q} rotates queue \\spad{q} so that the element at the front of the queue goes to the back of the queue. Note: rotate! \\spad{q} is equivalent to enqueue!(dequeue!(\\spad{q})).")) (|dequeue!| ((|#1| $) "\\spad{dequeue! s} destructively extracts the first (top) element from queue \\spad{q}. The element previously second in the queue becomes the first element. Error: if \\spad{q} is empty.")) (|enqueue!| ((|#1| |#1| $) "\\spad{enqueue!(x,q)} inserts \\spad{x} into the queue \\spad{q} at the back end."))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-909 R) 
((|constructor| (NIL "\\spadtype{Quaternion} implements quaternions over a \\indented{2}{commutative ring. The main constructor function is \\spadfun{quatern}} \\indented{2}{which takes 4 arguments: the real part,{} the \\spad{i} imaginary part,{} the \\spad{j}} \\indented{2}{imaginary part and the \\spad{k} imaginary part.}"))) 
((-3987 |has| |#1| (-246)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-246))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-246))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))) (|HasCategory| |#1| (|%list| (QUOTE -241) (|devaluate| |#1|) (|devaluate| |#1|))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-973))) (|HasCategory| |#1| (QUOTE (-483)))) 
(-910 S R) 
((|constructor| (NIL "\\spadtype{QuaternionCategory} describes the category of quaternions and implements functions that are not representation specific.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(q)} returns \\spad{q} as a rational number,{} or \"failed\" if this is not possible. Note: if \\spad{rational?(q)} is \\spad{true},{} the conversion can be done and the rational number will be returned.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(q)} tries to convert \\spad{q} into a rational number. Error: if this is not possible. If \\spad{rational?(q)} is \\spad{true},{} the conversion will be done and the rational number returned.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(q)} returns {\\it \\spad{true}} if all the imaginary parts of \\spad{q} are zero and the real part can be converted into a rational number,{} and {\\it \\spad{false}} otherwise.")) (|abs| ((|#2| $) "\\spad{abs(q)} computes the absolute value of quaternion \\spad{q} (sqrt of norm).")) (|real| ((|#2| $) "\\spad{real(q)} extracts the real part of quaternion \\spad{q}.")) (|quatern| (($ |#2| |#2| |#2| |#2|) "\\spad{quatern(r,i,j,k)} constructs a quaternion from scalars.")) (|norm| ((|#2| $) "\\spad{norm(q)} computes the norm of \\spad{q} (the sum of the squares of the components).")) (|imagK| ((|#2| $) "\\spad{imagK(q)} extracts the imaginary \\spad{k} part of quaternion \\spad{q}.")) (|imagJ| ((|#2| $) "\\spad{imagJ(q)} extracts the imaginary \\spad{j} part of quaternion \\spad{q}.")) (|imagI| ((|#2| $) "\\spad{imagI(q)} extracts the imaginary \\spad{i} part of quaternion \\spad{q}.")) (|conjugate| (($ $) "\\spad{conjugate(q)} negates the imaginary parts of quaternion \\spad{q}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-483))) (|HasCategory| |#2| (QUOTE (-973))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-246)))) 
(-911 R) 
((|constructor| (NIL "\\spadtype{QuaternionCategory} describes the category of quaternions and implements functions that are not representation specific.")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) "\\spad{rationalIfCan(q)} returns \\spad{q} as a rational number,{} or \"failed\" if this is not possible. Note: if \\spad{rational?(q)} is \\spad{true},{} the conversion can be done and the rational number will be returned.")) (|rational| (((|Fraction| (|Integer|)) $) "\\spad{rational(q)} tries to convert \\spad{q} into a rational number. Error: if this is not possible. If \\spad{rational?(q)} is \\spad{true},{} the conversion will be done and the rational number returned.")) (|rational?| (((|Boolean|) $) "\\spad{rational?(q)} returns {\\it \\spad{true}} if all the imaginary parts of \\spad{q} are zero and the real part can be converted into a rational number,{} and {\\it \\spad{false}} otherwise.")) (|abs| ((|#1| $) "\\spad{abs(q)} computes the absolute value of quaternion \\spad{q} (sqrt of norm).")) (|real| ((|#1| $) "\\spad{real(q)} extracts the real part of quaternion \\spad{q}.")) (|quatern| (($ |#1| |#1| |#1| |#1|) "\\spad{quatern(r,i,j,k)} constructs a quaternion from scalars.")) (|norm| ((|#1| $) "\\spad{norm(q)} computes the norm of \\spad{q} (the sum of the squares of the components).")) (|imagK| ((|#1| $) "\\spad{imagK(q)} extracts the imaginary \\spad{k} part of quaternion \\spad{q}.")) (|imagJ| ((|#1| $) "\\spad{imagJ(q)} extracts the imaginary \\spad{j} part of quaternion \\spad{q}.")) (|imagI| ((|#1| $) "\\spad{imagI(q)} extracts the imaginary \\spad{i} part of quaternion \\spad{q}.")) (|conjugate| (($ $) "\\spad{conjugate(q)} negates the imaginary parts of quaternion \\spad{q}."))) 
((-3987 |has| |#1| (-246)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-912 QR R QS S) 
((|constructor| (NIL "\\spadtype{QuaternionCategoryFunctions2} implements functions between two quaternion domains. The function \\spadfun{map} is used by the system interpreter to coerce between quaternion types.")) (|map| ((|#3| (|Mapping| |#4| |#2|) |#1|) "\\spad{map(f,u)} maps \\spad{f} onto the component parts of the quaternion \\spad{u}."))) 
NIL 
NIL 
(-913 S) 
((|constructor| (NIL "Linked List implementation of a Queue")) (|queue| (($ (|List| |#1|)) "\\spad{queue([x,y,...,z])} creates a queue with first (top) element \\spad{x},{} second element \\spad{y},{}...,{}and last (bottom) element \\spad{z}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-914 S) 
((|constructor| (NIL "The \\spad{RadicalCategory} is a model for the rational numbers.")) (** (($ $ (|Fraction| (|Integer|))) "\\spad{x ** y} is the rational exponentiation of \\spad{x} by the power \\spad{y}.")) (|nthRoot| (($ $ (|Integer|)) "\\spad{nthRoot(x,n)} returns the \\spad{n}th root of \\spad{x}.")) (|sqrt| (($ $) "\\spad{sqrt(x)} returns the square root of \\spad{x}."))) 
NIL 
NIL 
(-915) 
((|constructor| (NIL "The \\spad{RadicalCategory} is a model for the rational numbers.")) (** (($ $ (|Fraction| (|Integer|))) "\\spad{x ** y} is the rational exponentiation of \\spad{x} by the power \\spad{y}.")) (|nthRoot| (($ $ (|Integer|)) "\\spad{nthRoot(x,n)} returns the \\spad{n}th root of \\spad{x}.")) (|sqrt| (($ $) "\\spad{sqrt(x)} returns the square root of \\spad{x}."))) 
NIL 
NIL 
(-916 -3092 UP UPUP |radicnd| |n|) 
((|constructor| (NIL "Function field defined by y**n = \\spad{f}(\\spad{x})."))) 
((-3987 |has| (-349 |#2|) (-312)) (-3992 |has| (-349 |#2|) (-312)) (-3986 |has| (-349 |#2|) (-312)) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-349 |#2|) (QUOTE (-118))) (|HasCategory| (-349 |#2|) (QUOTE (-120))) (|HasCategory| (-349 |#2|) (QUOTE (-299))) (OR (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-299)))) (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-319))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-190))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (|HasCategory| (-349 |#2|) (QUOTE (-299)))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-190))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-189))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (|HasCategory| (-349 |#2|) (QUOTE (-299)))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-299))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089)))))) (OR (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-811 (-1089)))))) (|HasCategory| (-349 |#2|) (QUOTE (-580 (-484)))) (OR (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-950 (-349 (-484)))))) (|HasCategory| (-349 |#2|) (QUOTE (-950 (-349 (-484))))) (|HasCategory| (-349 |#2|) (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-319))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-189))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-811 (-1089))))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-190))) (|HasCategory| (-349 |#2|) (QUOTE (-312)))) (-12 (|HasCategory| (-349 |#2|) (QUOTE (-312))) (|HasCategory| (-349 |#2|) (QUOTE (-809 (-1089)))))) 
(-917 |bb|) 
((|constructor| (NIL "This domain allows rational numbers to be presented as repeating decimal expansions or more generally as repeating expansions in any base.")) (|fractRadix| (($ (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{fractRadix(pre,cyc)} creates a fractional radix expansion from a list of prefix ragits and a list of cyclic ragits. For example,{} \\spad{fractRadix([1],[6])} will return \\spad{0.16666666...}.")) (|wholeRadix| (($ (|List| (|Integer|))) "\\spad{wholeRadix(l)} creates an integral radix expansion from a list of ragits. For example,{} \\spad{wholeRadix([1,3,4])} will return \\spad{134}.")) (|cycleRagits| (((|List| (|Integer|)) $) "\\spad{cycleRagits(rx)} returns the cyclic part of the ragits of the fractional part of a radix expansion. For example,{} if \\spad{x = 3/28 = 0.10 714285 714285 ...},{} then \\spad{cycleRagits(x) = [7,1,4,2,8,5]}.")) (|prefixRagits| (((|List| (|Integer|)) $) "\\spad{prefixRagits(rx)} returns the non-cyclic part of the ragits of the fractional part of a radix expansion. For example,{} if \\spad{x = 3/28 = 0.10 714285 714285 ...},{} then \\spad{prefixRagits(x)=[1,0]}.")) (|fractRagits| (((|Stream| (|Integer|)) $) "\\spad{fractRagits(rx)} returns the ragits of the fractional part of a radix expansion.")) (|wholeRagits| (((|List| (|Integer|)) $) "\\spad{wholeRagits(rx)} returns the ragits of the integer part of a radix expansion.")) (|fractionPart| (((|Fraction| (|Integer|)) $) "\\spad{fractionPart(rx)} returns the fractional part of a radix expansion."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-484) (QUOTE (-821))) (|HasCategory| (-484) (QUOTE (-950 (-1089)))) (|HasCategory| (-484) (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-120))) (|HasCategory| (-484) (QUOTE (-553 (-473)))) (|HasCategory| (-484) (QUOTE (-933))) (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756))) (OR (|HasCategory| (-484) (QUOTE (-740))) (|HasCategory| (-484) (QUOTE (-756)))) (|HasCategory| (-484) (QUOTE (-950 (-484)))) (|HasCategory| (-484) (QUOTE (-1065))) (|HasCategory| (-484) (QUOTE (-796 (-329)))) (|HasCategory| (-484) (QUOTE (-796 (-484)))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-484) (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-484) (QUOTE (-189))) (|HasCategory| (-484) (QUOTE (-811 (-1089)))) (|HasCategory| (-484) (QUOTE (-190))) (|HasCategory| (-484) (QUOTE (-809 (-1089)))) (|HasCategory| (-484) (QUOTE (-455 (-1089) (-484)))) (|HasCategory| (-484) (QUOTE (-260 (-484)))) (|HasCategory| (-484) (QUOTE (-241 (-484) (-484)))) (|HasCategory| (-484) (QUOTE (-258))) (|HasCategory| (-484) (QUOTE (-483))) (|HasCategory| (-484) (QUOTE (-580 (-484)))) (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (OR (-12 (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-484) (QUOTE (-821)))) (|HasCategory| (-484) (QUOTE (-118))))) 
(-918) 
((|constructor| (NIL "This package provides tools for creating radix expansions.")) (|radix| (((|Any|) (|Fraction| (|Integer|)) (|Integer|)) "\\spad{radix(x,b)} converts \\spad{x} to a radix expansion in base \\spad{b}."))) 
NIL 
NIL 
(-919) 
((|constructor| (NIL "Random number generators \\indented{2}{All random numbers used in the system should originate from} \\indented{2}{the same generator.\\space{2}This package is intended to be the source.}")) (|seed| (((|Integer|)) "\\spad{seed()} returns the current seed value.")) (|reseed| (((|Void|) (|Integer|)) "\\spad{reseed(n)} restarts the random number generator at \\spad{n}.")) (|size| (((|Integer|)) "\\spad{size()} is the base of the random number generator")) (|randnum| (((|Integer|) (|Integer|)) "\\spad{randnum(n)} is a random number between 0 and \\spad{n}.") (((|Integer|)) "\\spad{randnum()} is a random number between 0 and size()."))) 
NIL 
NIL 
(-920 RP) 
((|factorSquareFree| (((|Factored| |#1|) |#1|) "\\spad{factorSquareFree(p)} factors an extended squareFree polynomial \\spad{p} over the rational numbers.")) (|factor| (((|Factored| |#1|) |#1|) "\\spad{factor(p)} factors an extended polynomial \\spad{p} over the rational numbers."))) 
NIL 
NIL 
(-921 S) 
((|constructor| (NIL "rational number testing and retraction functions. Date Created: March 1990 Date Last Updated: 9 April 1991")) (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") |#1|) "\\spad{rationalIfCan(x)} returns \\spad{x} as a rational number,{} \"failed\" if \\spad{x} is not a rational number.")) (|rational?| (((|Boolean|) |#1|) "\\spad{rational?(x)} returns \\spad{true} if \\spad{x} is a rational number,{} \\spad{false} otherwise.")) (|rational| (((|Fraction| (|Integer|)) |#1|) "\\spad{rational(x)} returns \\spad{x} as a rational number; error if \\spad{x} is not a rational number."))) 
NIL 
NIL 
(-922 A S) 
((|constructor| (NIL "A recursive aggregate over a type \\spad{S} is a model for a a directed graph containing values of type \\spad{S}. Recursively,{} a recursive aggregate is a {\\em node} consisting of a \\spadfun{value} from \\spad{S} and 0 or more \\spadfun{children} which are recursive aggregates. A node with no children is called a \\spadfun{leaf} node. A recursive aggregate may be cyclic for which some operations as noted may go into an infinite loop.")) (|setvalue!| ((|#2| $ |#2|) "\\spad{setvalue!(u,x)} sets the value of node \\spad{u} to \\spad{x}.")) (|setelt| ((|#2| $ "value" |#2|) "\\spad{setelt(a,\"value\",x)} (also written \\axiom{a . value := \\spad{x}}) is equivalent to \\axiom{setvalue!(a,{}\\spad{x})}")) (|setchildren!| (($ $ (|List| $)) "\\spad{setchildren!(u,v)} replaces the current children of node \\spad{u} with the members of \\spad{v} in left-to-right order.")) (|node?| (((|Boolean|) $ $) "\\spad{node?(u,v)} tests if node \\spad{u} is contained in node \\spad{v} (either as a child,{} a child of a child,{} etc.).")) (|child?| (((|Boolean|) $ $) "\\spad{child?(u,v)} tests if node \\spad{u} is a child of node \\spad{v}.")) (|distance| (((|Integer|) $ $) "\\spad{distance(u,v)} returns the path length (an integer) from node \\spad{u} to \\spad{v}.")) (|leaves| (((|List| |#2|) $) "\\spad{leaves(t)} returns the list of values in obtained by visiting the nodes of tree \\axiom{\\spad{t}} in left-to-right order.")) (|cyclic?| (((|Boolean|) $) "\\spad{cyclic?(u)} tests if \\spad{u} has a cycle.")) (|elt| ((|#2| $ "value") "\\spad{elt(u,\"value\")} (also written: \\axiom{a. value}) is equivalent to \\axiom{value(a)}.")) (|value| ((|#2| $) "\\spad{value(u)} returns the value of the node \\spad{u}.")) (|leaf?| (((|Boolean|) $) "\\spad{leaf?(u)} tests if \\spad{u} is a terminal node.")) (|nodes| (((|List| $) $) "\\spad{nodes(u)} returns a list of all of the nodes of aggregate \\spad{u}.")) (|children| (((|List| $) $) "\\spad{children(u)} returns a list of the children of aggregate \\spad{u}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995)) (|HasCategory| |#2| (QUOTE (-1013)))) 
(-923 S) 
((|constructor| (NIL "A recursive aggregate over a type \\spad{S} is a model for a a directed graph containing values of type \\spad{S}. Recursively,{} a recursive aggregate is a {\\em node} consisting of a \\spadfun{value} from \\spad{S} and 0 or more \\spadfun{children} which are recursive aggregates. A node with no children is called a \\spadfun{leaf} node. A recursive aggregate may be cyclic for which some operations as noted may go into an infinite loop.")) (|setvalue!| ((|#1| $ |#1|) "\\spad{setvalue!(u,x)} sets the value of node \\spad{u} to \\spad{x}.")) (|setelt| ((|#1| $ "value" |#1|) "\\spad{setelt(a,\"value\",x)} (also written \\axiom{a . value := \\spad{x}}) is equivalent to \\axiom{setvalue!(a,{}\\spad{x})}")) (|setchildren!| (($ $ (|List| $)) "\\spad{setchildren!(u,v)} replaces the current children of node \\spad{u} with the members of \\spad{v} in left-to-right order.")) (|node?| (((|Boolean|) $ $) "\\spad{node?(u,v)} tests if node \\spad{u} is contained in node \\spad{v} (either as a child,{} a child of a child,{} etc.).")) (|child?| (((|Boolean|) $ $) "\\spad{child?(u,v)} tests if node \\spad{u} is a child of node \\spad{v}.")) (|distance| (((|Integer|) $ $) "\\spad{distance(u,v)} returns the path length (an integer) from node \\spad{u} to \\spad{v}.")) (|leaves| (((|List| |#1|) $) "\\spad{leaves(t)} returns the list of values in obtained by visiting the nodes of tree \\axiom{\\spad{t}} in left-to-right order.")) (|cyclic?| (((|Boolean|) $) "\\spad{cyclic?(u)} tests if \\spad{u} has a cycle.")) (|elt| ((|#1| $ "value") "\\spad{elt(u,\"value\")} (also written: \\axiom{a. value}) is equivalent to \\axiom{value(a)}.")) (|value| ((|#1| $) "\\spad{value(u)} returns the value of the node \\spad{u}.")) (|leaf?| (((|Boolean|) $) "\\spad{leaf?(u)} tests if \\spad{u} is a terminal node.")) (|nodes| (((|List| $) $) "\\spad{nodes(u)} returns a list of all of the nodes of aggregate \\spad{u}.")) (|children| (((|List| $) $) "\\spad{children(u)} returns a list of the children of aggregate \\spad{u}."))) 
NIL 
NIL 
(-924 S) 
((|constructor| (NIL "\\axiomType{RealClosedField} provides common acces functions for all real closed fields.")) (|approximate| (((|Fraction| (|Integer|)) $ $) "\\axiom{approximate(\\spad{n},{}\\spad{p})} gives an approximation of \\axiom{\\spad{n}} that has precision \\axiom{\\spad{p}}")) (|rename| (($ $ (|OutputForm|)) "\\axiom{rename(\\spad{x},{}name)} gives a new number that prints as name")) (|rename!| (($ $ (|OutputForm|)) "\\axiom{rename!(\\spad{x},{}name)} changes the way \\axiom{\\spad{x}} is printed")) (|sqrt| (($ (|Integer|)) "\\axiom{sqrt(\\spad{x})} is \\axiom{\\spad{x} ** (1/2)}") (($ (|Fraction| (|Integer|))) "\\axiom{sqrt(\\spad{x})} is \\axiom{\\spad{x} ** (1/2)}") (($ $) "\\axiom{sqrt(\\spad{x})} is \\axiom{\\spad{x} ** (1/2)}") (($ $ (|PositiveInteger|)) "\\axiom{sqrt(\\spad{x},{}\\spad{n})} is \\axiom{\\spad{x} ** (1/n)}")) (|allRootsOf| (((|List| $) (|Polynomial| (|Integer|))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|Polynomial| $)) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|SparseUnivariatePolynomial| (|Integer|))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|SparseUnivariatePolynomial| $)) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely")) (|rootOf| (((|Union| $ "failed") (|SparseUnivariatePolynomial| $) (|PositiveInteger|)) "\\axiom{rootOf(pol,{}\\spad{n})} creates the \\spad{n}th root for the order of \\axiom{pol} and gives it unique name") (((|Union| $ "failed") (|SparseUnivariatePolynomial| $) (|PositiveInteger|) (|OutputForm|)) "\\axiom{rootOf(pol,{}\\spad{n},{}name)} creates the \\spad{n}th root for the order of \\axiom{pol} and names it \\axiom{name}")) (|mainValue| (((|Union| (|SparseUnivariatePolynomial| $) "failed") $) "\\axiom{mainValue(\\spad{x})} is the expression of \\axiom{\\spad{x}} in terms of \\axiom{SparseUnivariatePolynomial(\\$)}")) (|mainDefiningPolynomial| (((|Union| (|SparseUnivariatePolynomial| $) "failed") $) "\\axiom{mainDefiningPolynomial(\\spad{x})} is the defining polynomial for the main algebraic quantity of \\axiom{\\spad{x}}")) (|mainForm| (((|Union| (|OutputForm|) "failed") $) "\\axiom{mainForm(\\spad{x})} is the main algebraic quantity name of \\axiom{\\spad{x}}"))) 
NIL 
NIL 
(-925) 
((|constructor| (NIL "\\axiomType{RealClosedField} provides common acces functions for all real closed fields.")) (|approximate| (((|Fraction| (|Integer|)) $ $) "\\axiom{approximate(\\spad{n},{}\\spad{p})} gives an approximation of \\axiom{\\spad{n}} that has precision \\axiom{\\spad{p}}")) (|rename| (($ $ (|OutputForm|)) "\\axiom{rename(\\spad{x},{}name)} gives a new number that prints as name")) (|rename!| (($ $ (|OutputForm|)) "\\axiom{rename!(\\spad{x},{}name)} changes the way \\axiom{\\spad{x}} is printed")) (|sqrt| (($ (|Integer|)) "\\axiom{sqrt(\\spad{x})} is \\axiom{\\spad{x} ** (1/2)}") (($ (|Fraction| (|Integer|))) "\\axiom{sqrt(\\spad{x})} is \\axiom{\\spad{x} ** (1/2)}") (($ $) "\\axiom{sqrt(\\spad{x})} is \\axiom{\\spad{x} ** (1/2)}") (($ $ (|PositiveInteger|)) "\\axiom{sqrt(\\spad{x},{}\\spad{n})} is \\axiom{\\spad{x} ** (1/n)}")) (|allRootsOf| (((|List| $) (|Polynomial| (|Integer|))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|Polynomial| $)) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|SparseUnivariatePolynomial| (|Integer|))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely") (((|List| $) (|SparseUnivariatePolynomial| $)) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} naming each uniquely")) (|rootOf| (((|Union| $ "failed") (|SparseUnivariatePolynomial| $) (|PositiveInteger|)) "\\axiom{rootOf(pol,{}\\spad{n})} creates the \\spad{n}th root for the order of \\axiom{pol} and gives it unique name") (((|Union| $ "failed") (|SparseUnivariatePolynomial| $) (|PositiveInteger|) (|OutputForm|)) "\\axiom{rootOf(pol,{}\\spad{n},{}name)} creates the \\spad{n}th root for the order of \\axiom{pol} and names it \\axiom{name}")) (|mainValue| (((|Union| (|SparseUnivariatePolynomial| $) "failed") $) "\\axiom{mainValue(\\spad{x})} is the expression of \\axiom{\\spad{x}} in terms of \\axiom{SparseUnivariatePolynomial(\\$)}")) (|mainDefiningPolynomial| (((|Union| (|SparseUnivariatePolynomial| $) "failed") $) "\\axiom{mainDefiningPolynomial(\\spad{x})} is the defining polynomial for the main algebraic quantity of \\axiom{\\spad{x}}")) (|mainForm| (((|Union| (|OutputForm|) "failed") $) "\\axiom{mainForm(\\spad{x})} is the main algebraic quantity name of \\axiom{\\spad{x}}"))) 
((-3987 . T) (-3992 . T) (-3986 . T) (-3989 . T) (-3988 . T) ((-3996 "*") . T) (-3991 . T)) 
NIL 
(-926 R -3092) 
((|constructor| (NIL "\\indented{1}{Risch differential equation,{} elementary case.} Author: Manuel Bronstein Date Created: 1 February 1988 Date Last Updated: 2 November 1995 Keywords: elementary,{} function,{} integration.")) (|rischDE| (((|Record| (|:| |ans| |#2|) (|:| |right| |#2|) (|:| |sol?| (|Boolean|))) (|Integer|) |#2| |#2| (|Symbol|) (|Mapping| (|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) "failed") |#2| (|List| |#2|)) (|Mapping| (|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) "failed") |#2| |#2|)) "\\spad{rischDE(n, f, g, x, lim, ext)} returns \\spad{[y, h, b]} such that \\spad{dy/dx + n df/dx y = h} and \\spad{b := h = g}. The equation \\spad{dy/dx + n df/dx y = g} has no solution if \\spad{h \\~~= g} (\\spad{y} is a partial solution in that case). Notes: \\spad{lim} is a limited integration function,{} and ext is an extended integration function."))) 
NIL 
NIL 
(-927 R -3092) 
((|constructor| (NIL "\\indented{1}{Risch differential equation,{} elementary case.} Author: Manuel Bronstein Date Created: 12 August 1992 Date Last Updated: 17 August 1992 Keywords: elementary,{} function,{} integration.")) (|rischDEsys| (((|Union| (|List| |#2|) "failed") (|Integer|) |#2| |#2| |#2| (|Symbol|) (|Mapping| (|Union| (|Record| (|:| |mainpart| |#2|) (|:| |limitedlogs| (|List| (|Record| (|:| |coeff| |#2|) (|:| |logand| |#2|))))) "failed") |#2| (|List| |#2|)) (|Mapping| (|Union| (|Record| (|:| |ratpart| |#2|) (|:| |coeff| |#2|)) "failed") |#2| |#2|)) "\\spad{rischDEsys(n, f, g_1, g_2, x,lim,ext)} returns \\spad{y_1.y_2} such that \\spad{(dy1/dx,dy2/dx) + ((0, - n df/dx),(n df/dx,0)) (y1,y2) = (g1,g2)} if \\spad{y_1,y_2} exist,{} \"failed\" otherwise. \\spad{lim} is a limited integration function,{} \\spad{ext} is an extended integration function."))) 
NIL 
NIL 
(-928 -3092 UP) 
((|constructor| (NIL "\\indented{1}{Risch differential equation,{} transcendental case.} Author: Manuel Bronstein Date Created: Jan 1988 Date Last Updated: 2 November 1995")) (|polyRDE| (((|Union| (|:| |ans| (|Record| (|:| |ans| |#2|) (|:| |nosol| (|Boolean|)))) (|:| |eq| (|Record| (|:| |b| |#2|) (|:| |c| |#2|) (|:| |m| (|Integer|)) (|:| |alpha| |#2|) (|:| |beta| |#2|)))) |#2| |#2| |#2| (|Integer|) (|Mapping| |#2| |#2|)) "\\spad{polyRDE(a, B, C, n, D)} returns either: 1. \\spad{[Q, b]} such that \\spad{degree(Q) <= n} and \\indented{3}{\\spad{a Q'+ B Q = C} if \\spad{b = true},{} \\spad{Q} is a partial solution} \\indented{3}{otherwise.} 2. \\spad{[B1, C1, m, \\alpha, \\beta]} such that any polynomial solution \\indented{3}{of degree at most \\spad{n} of \\spad{A Q' + BQ = C} must be of the form} \\indented{3}{\\spad{Q = \\alpha H + \\beta} where \\spad{degree(H) <= m} and} \\indented{3}{\\spad{H} satisfies \\spad{H' + B1 H = C1}.} \\spad{D} is the derivation to use.")) (|baseRDE| (((|Record| (|:| |ans| (|Fraction| |#2|)) (|:| |nosol| (|Boolean|))) (|Fraction| |#2|) (|Fraction| |#2|)) "\\spad{baseRDE(f, g)} returns a \\spad{[y, b]} such that \\spad{y' + fy = g} if \\spad{b = true},{} \\spad{y} is a partial solution otherwise (no solution in that case). \\spad{D} is the derivation to use.")) (|monomRDE| (((|Union| (|Record| (|:| |a| |#2|) (|:| |b| (|Fraction| |#2|)) (|:| |c| (|Fraction| |#2|)) (|:| |t| |#2|)) "failed") (|Fraction| |#2|) (|Fraction| |#2|) (|Mapping| |#2| |#2|)) "\\spad{monomRDE(f,g,D)} returns \\spad{[A, B, C, T]} such that \\spad{y' + f y = g} has a solution if and only if \\spad{y = Q / T},{} where \\spad{Q} satisfies \\spad{A Q' + B Q = C} and has no normal pole. A and \\spad{T} are polynomials and \\spad{B} and \\spad{C} have no normal poles. \\spad{D} is the derivation to use."))) 
NIL 
NIL 
(-929 -3092 UP) 
((|constructor| (NIL "\\indented{1}{Risch differential equation system,{} transcendental case.} Author: Manuel Bronstein Date Created: 17 August 1992 Date Last Updated: 3 February 1994")) (|baseRDEsys| (((|Union| (|List| (|Fraction| |#2|)) "failed") (|Fraction| |#2|) (|Fraction| |#2|) (|Fraction| |#2|)) "\\spad{baseRDEsys(f, g1, g2)} returns fractions \\spad{y_1.y_2} such that \\spad{(y1', y2') + ((0, -f), (f, 0)) (y1,y2) = (g1,g2)} if \\spad{y_1,y_2} exist,{} \"failed\" otherwise.")) (|monomRDEsys| (((|Union| (|Record| (|:| |a| |#2|) (|:| |b| (|Fraction| |#2|)) (|:| |h| |#2|) (|:| |c1| (|Fraction| |#2|)) (|:| |c2| (|Fraction| |#2|)) (|:| |t| |#2|)) "failed") (|Fraction| |#2|) (|Fraction| |#2|) (|Fraction| |#2|) (|Mapping| |#2| |#2|)) "\\spad{monomRDEsys(f,g1,g2,D)} returns \\spad{[A, B, H, C1, C2, T]} such that \\spad{(y1', y2') + ((0, -f), (f, 0)) (y1,y2) = (g1,g2)} has a solution if and only if \\spad{y1 = Q1 / T, y2 = Q2 / T},{} where \\spad{B,C1,C2,Q1,Q2} have no normal poles and satisfy A \\spad{(Q1', Q2') + ((H, -B), (B, H)) (Q1,Q2) = (C1,C2)} \\spad{D} is the derivation to use."))) 
NIL 
NIL 
(-930 S) 
((|constructor| (NIL "This package exports random distributions")) (|rdHack1| (((|Mapping| |#1|) (|Vector| |#1|) (|Vector| (|Integer|)) (|Integer|)) "\\spad{rdHack1(v,u,n)} \\undocumented")) (|weighted| (((|Mapping| |#1|) (|List| (|Record| (|:| |value| |#1|) (|:| |weight| (|Integer|))))) "\\spad{weighted(l)} \\undocumented")) (|uniform| (((|Mapping| |#1|) (|Set| |#1|)) "\\spad{uniform(s)} \\undocumented"))) 
NIL 
NIL 
(-931 F1 UP UPUP R F2) 
((|constructor| (NIL "\\indented{1}{Finds the order of a divisor over a finite field} Author: Manuel Bronstein Date Created: 1988 Date Last Updated: 8 November 1994")) (|order| (((|NonNegativeInteger|) (|FiniteDivisor| |#1| |#2| |#3| |#4|) |#3| (|Mapping| |#5| |#1|)) "\\spad{order(f,u,g)} \\undocumented"))) 
NIL 
NIL 
(-932) 
((|constructor| (NIL "This domain represents list reduction syntax.")) (|body| (((|SpadAst|) $) "\\spad{body(e)} return the list of expressions being redcued.")) (|operator| (((|SpadAst|) $) "\\spad{operator(e)} returns the magma operation being applied."))) 
NIL 
NIL 
(-933) 
((|constructor| (NIL "The category of real numeric domains,{} \\spadignore{i.e.} convertible to floats."))) 
NIL 
NIL 
(-934 |Pol|) 
((|constructor| (NIL "\\indented{2}{This package provides functions for finding the real zeros} of univariate polynomials over the integers to arbitrary user-specified precision. The results are returned as a list of isolating intervals which are expressed as records with \"left\" and \"right\" rational number components.")) (|midpoints| (((|List| (|Fraction| (|Integer|))) (|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))))) "\\spad{midpoints(isolist)} returns the list of midpoints for the list of intervals \\spad{isolist}.")) (|midpoint| (((|Fraction| (|Integer|)) (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) "\\spad{midpoint(int)} returns the midpoint of the interval \\spad{int}.")) (|refine| (((|Union| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) "failed") |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) "\\spad{refine(pol, int, range)} takes a univariate polynomial \\spad{pol} and and isolating interval \\spad{int} containing exactly one real root of \\spad{pol}; the operation returns an isolating interval which is contained within range,{} or \"failed\" if no such isolating interval exists.") (((|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) (|Fraction| (|Integer|))) "\\spad{refine(pol, int, eps)} refines the interval \\spad{int} containing exactly one root of the univariate polynomial \\spad{pol} to size less than the rational number eps.")) (|realZeros| (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) (|Fraction| (|Integer|))) "\\spad{realZeros(pol, int, eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \\spad{pol} which lie in the interval expressed by the record \\spad{int}.") (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1| (|Fraction| (|Integer|))) "\\spad{realZeros(pol, eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \\spad{pol}.") (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) "\\spad{realZeros(pol, range)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \\spad{pol} which lie in the interval expressed by the record range.") (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1|) "\\spad{realZeros(pol)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \\spad{pol}."))) 
NIL 
NIL 
(-935 |Pol|) 
((|constructor| (NIL "\\indented{2}{This package provides functions for finding the real zeros} of univariate polynomials over the rational numbers to arbitrary user-specified precision. The results are returned as a list of isolating intervals,{} expressed as records with \"left\" and \"right\" rational number components.")) (|refine| (((|Union| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) "failed") |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) "\\spad{refine(pol, int, range)} takes a univariate polynomial \\spad{pol} and and isolating interval \\spad{int} which must contain exactly one real root of \\spad{pol},{} and returns an isolating interval which is contained within range,{} or \"failed\" if no such isolating interval exists.") (((|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) (|Fraction| (|Integer|))) "\\spad{refine(pol, int, eps)} refines the interval \\spad{int} containing exactly one root of the univariate polynomial \\spad{pol} to size less than the rational number eps.")) (|realZeros| (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|)))) (|Fraction| (|Integer|))) "\\spad{realZeros(pol, int, eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \\spad{pol} which lie in the interval expressed by the record \\spad{int}.") (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1| (|Fraction| (|Integer|))) "\\spad{realZeros(pol, eps)} returns a list of intervals of length less than the rational number eps for all the real roots of the polynomial \\spad{pol}.") (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) "\\spad{realZeros(pol, range)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \\spad{pol} which lie in the interval expressed by the record range.") (((|List| (|Record| (|:| |left| (|Fraction| (|Integer|))) (|:| |right| (|Fraction| (|Integer|))))) |#1|) "\\spad{realZeros(pol)} returns a list of isolating intervals for all the real zeros of the univariate polynomial \\spad{pol}."))) 
NIL 
NIL 
(-936) 
((|constructor| (NIL "\\indented{1}{This package provides numerical solutions of systems of polynomial} equations for use in ACPLOT.")) (|realSolve| (((|List| (|List| (|Float|))) (|List| (|Polynomial| (|Integer|))) (|List| (|Symbol|)) (|Float|)) "\\spad{realSolve(lp,lv,eps)} = compute the list of the real solutions of the list \\spad{lp} of polynomials with integer coefficients with respect to the variables in \\spad{lv},{} with precision \\spad{eps}.")) (|solve| (((|List| (|Float|)) (|Polynomial| (|Integer|)) (|Float|)) "\\spad{solve(p,eps)} finds the real zeroes of a univariate integer polynomial \\spad{p} with precision \\spad{eps}.") (((|List| (|Float|)) (|Polynomial| (|Fraction| (|Integer|))) (|Float|)) "\\spad{solve(p,eps)} finds the real zeroes of a univariate rational polynomial \\spad{p} with precision \\spad{eps}."))) 
NIL 
NIL 
(-937 |TheField|) 
((|constructor| (NIL "This domain implements the real closure of an ordered field.")) (|relativeApprox| (((|Fraction| (|Integer|)) $ $) "\\axiom{relativeApprox(\\spad{n},{}\\spad{p})} gives a relative approximation of \\axiom{\\spad{n}} that has precision \\axiom{\\spad{p}}")) (|mainCharacterization| (((|Union| (|RightOpenIntervalRootCharacterization| $ (|SparseUnivariatePolynomial| $)) "failed") $) "\\axiom{mainCharacterization(\\spad{x})} is the main algebraic quantity of \\axiom{\\spad{x}} (\\axiom{SEG})")) (|algebraicOf| (($ (|RightOpenIntervalRootCharacterization| $ (|SparseUnivariatePolynomial| $)) (|OutputForm|)) "\\axiom{algebraicOf(char)} is the external number"))) 
((-3987 . T) (-3992 . T) (-3986 . T) (-3989 . T) (-3988 . T) ((-3996 "*") . T) (-3991 . T)) 
((OR (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| (-349 (-484)) (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| (-349 (-484)) (QUOTE (-950 (-349 (-484))))) (|HasCategory| (-349 (-484)) (QUOTE (-950 (-484))))) 
(-938 -3092 L) 
((|constructor| (NIL "\\spadtype{ReductionOfOrder} provides functions for reducing the order of linear ordinary differential equations once some solutions are known.")) (|ReduceOrder| (((|Record| (|:| |eq| |#2|) (|:| |op| (|List| |#1|))) |#2| (|List| |#1|)) "\\spad{ReduceOrder(op, [f1,...,fk])} returns \\spad{[op1,[g1,...,gk]]} such that for any solution \\spad{z} of \\spad{op1 z = 0},{} \\spad{y = gk \\int(g_{k-1} \\int(... \\int(g1 \\int z)...)} is a solution of \\spad{op y = 0}. Each \\spad{fi} must satisfy \\spad{op fi = 0}.") ((|#2| |#2| |#1|) "\\spad{ReduceOrder(op, s)} returns \\spad{op1} such that for any solution \\spad{z} of \\spad{op1 z = 0},{} \\spad{y = s \\int z} is a solution of \\spad{op y = 0}. \\spad{s} must satisfy \\spad{op s = 0}."))) 
NIL 
NIL 
(-939 S) 
((|constructor| (NIL "\\indented{1}{\\spadtype{Reference} is for making a changeable instance} of something.")) (= (((|Boolean|) $ $) "\\spad{a=b} tests if \\spad{a} and \\spad{b} are equal.")) (|setref| ((|#1| $ |#1|) "\\spad{setref(r,s)} reset the reference \\spad{r} to refer to \\spad{s}")) (|deref| ((|#1| $) "\\spad{deref(r)} returns the object referenced by \\spad{r}")) (|ref| (($ |#1|) "\\spad{ref(s)} creates a reference to the object \\spad{s}."))) 
NIL 
NIL 
(-940 R E V P) 
((|constructor| (NIL "This domain provides an implementation of regular chains. Moreover,{} the operation \\axiomOpFrom{zeroSetSplit}{RegularTriangularSetCategory} is an implementation of a new algorithm for solving polynomial systems by means of regular chains.\\newline References : \\indented{1}{[1] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|preprocess| (((|Record| (|:| |val| (|List| |#4|)) (|:| |towers| (|List| $))) (|List| |#4|) (|Boolean|) (|Boolean|)) "\\axiom{pre_process(lp,{}\\spad{b1},{}\\spad{b2})} is an internal subroutine,{} exported only for developement.")) (|internalZeroSetSplit| (((|List| $) (|List| |#4|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{internalZeroSetSplit(lp,{}\\spad{b1},{}\\spad{b2},{}\\spad{b3})} is an internal subroutine,{} exported only for developement.")) (|zeroSetSplit| (((|List| $) (|List| |#4|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{}\\spad{b1},{}\\spad{b2}.\\spad{b3},{}\\spad{b4})} is an internal subroutine,{} exported only for developement.") (((|List| $) (|List| |#4|) (|Boolean|) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{}clos?,{}info?)} has the same specifications as \\axiomOpFrom{zeroSetSplit}{RegularTriangularSetCategory}. Moreover,{} if \\axiom{clos?} then solves in the sense of the Zariski closure else solves in the sense of the regular zeros. If \\axiom{info?} then do print messages during the computations.")) (|internalAugment| (((|List| $) |#4| $ (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{internalAugment(\\spad{p},{}ts,{}\\spad{b1},{}\\spad{b2},{}\\spad{b3},{}\\spad{b4},{}\\spad{b5})} is an internal subroutine,{} exported only for developement."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (|HasCategory| |#4| (QUOTE (-553 (-473)))) (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-552 (-772)))) (|HasCategory| |#4| (QUOTE (-72)))) 
(-941) 
((|constructor| (NIL "Package for the computation of eigenvalues and eigenvectors. This package works for matrices with coefficients which are rational functions over the integers. (see \\spadtype{Fraction Polynomial Integer}). The eigenvalues and eigenvectors are expressed in terms of radicals.")) (|orthonormalBasis| (((|List| (|Matrix| (|Expression| (|Integer|)))) (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))) "\\spad{orthonormalBasis(m)} returns the orthogonal matrix \\spad{b} such that \\spad{b*m*(inverse b)} is diagonal. Error: if \\spad{m} is not a symmetric matrix.")) (|gramschmidt| (((|List| (|Matrix| (|Expression| (|Integer|)))) (|List| (|Matrix| (|Expression| (|Integer|))))) "\\spad{gramschmidt(lv)} converts the list of column vectors \\spad{lv} into a set of orthogonal column vectors of euclidean length 1 using the Gram-Schmidt algorithm.")) (|normalise| (((|Matrix| (|Expression| (|Integer|))) (|Matrix| (|Expression| (|Integer|)))) "\\spad{normalise(v)} returns the column vector \\spad{v} divided by its euclidean norm; when possible,{} the vector \\spad{v} is expressed in terms of radicals.")) (|eigenMatrix| (((|Union| (|Matrix| (|Expression| (|Integer|))) "failed") (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))) "\\spad{eigenMatrix(m)} returns the matrix \\spad{b} such that \\spad{b*m*(inverse b)} is diagonal,{} or \"failed\" if no such \\spad{b} exists.")) (|radicalEigenvalues| (((|List| (|Expression| (|Integer|))) (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))) "\\spad{radicalEigenvalues(m)} computes the eigenvalues of the matrix \\spad{m}; when possible,{} the eigenvalues are expressed in terms of radicals.")) (|radicalEigenvector| (((|List| (|Matrix| (|Expression| (|Integer|)))) (|Expression| (|Integer|)) (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))) "\\spad{radicalEigenvector(c,m)} computes the eigenvector(\\spad{s}) of the matrix \\spad{m} corresponding to the eigenvalue \\spad{c}; when possible,{} values are expressed in terms of radicals.")) (|radicalEigenvectors| (((|List| (|Record| (|:| |radval| (|Expression| (|Integer|))) (|:| |radmult| (|Integer|)) (|:| |radvect| (|List| (|Matrix| (|Expression| (|Integer|))))))) (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))) "\\spad{radicalEigenvectors(m)} computes the eigenvalues and the corresponding eigenvectors of the matrix \\spad{m}; when possible,{} values are expressed in terms of radicals."))) 
NIL 
NIL 
(-942 R) 
((|constructor| (NIL "\\spad{RepresentationPackage1} provides functions for representation theory for finite groups and algebras. The package creates permutation representations and uses tensor products and its symmetric and antisymmetric components to create new representations of larger degree from given ones. Note: instead of having parameters from \\spadtype{Permutation} this package allows list notation of permutations as well: \\spadignore{e.g.} \\spad{[1,4,3,2]} denotes permutes 2 and 4 and fixes 1 and 3.")) (|permutationRepresentation| (((|List| (|Matrix| (|Integer|))) (|List| (|List| (|Integer|)))) "\\spad{permutationRepresentation([pi1,...,pik],n)} returns the list of matrices {\\em [(deltai,pi1(i)),...,(deltai,pik(i))]} if the permutations {\\em pi1},{}...,{}{\\em pik} are in list notation and are permuting {\\em {1,2,...,n}}.") (((|List| (|Matrix| (|Integer|))) (|List| (|Permutation| (|Integer|))) (|Integer|)) "\\spad{permutationRepresentation([pi1,...,pik],n)} returns the list of matrices {\\em [(deltai,pi1(i)),...,(deltai,pik(i))]} (Kronecker delta) for the permutations {\\em pi1,...,pik} of {\\em {1,2,...,n}}.") (((|Matrix| (|Integer|)) (|List| (|Integer|))) "\\spad{permutationRepresentation(pi,n)} returns the matrix {\\em (deltai,pi(i))} (Kronecker delta) if the permutation {\\em pi} is in list notation and permutes {\\em {1,2,...,n}}.") (((|Matrix| (|Integer|)) (|Permutation| (|Integer|)) (|Integer|)) "\\spad{permutationRepresentation(pi,n)} returns the matrix {\\em (deltai,pi(i))} (Kronecker delta) for a permutation {\\em pi} of {\\em {1,2,...,n}}.")) (|tensorProduct| (((|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|))) "\\spad{tensorProduct([a1,...ak])} calculates the list of Kronecker products of each matrix {\\em ai} with itself for {1 <= \\spad{i} <= \\spad{k}}. Note: If the list of matrices corresponds to a group representation (repr. of generators) of one group,{} then these matrices correspond to the tensor product of the representation with itself.") (((|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{tensorProduct(a)} calculates the Kronecker product of the matrix {\\em a} with itself.") (((|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|))) "\\spad{tensorProduct([a1,...,ak],[b1,...,bk])} calculates the list of Kronecker products of the matrices {\\em ai} and {\\em bi} for {1 <= \\spad{i} <= \\spad{k}}. Note: If each list of matrices corresponds to a group representation (repr. of generators) of one group,{} then these matrices correspond to the tensor product of the two representations.") (((|Matrix| |#1|) (|Matrix| |#1|) (|Matrix| |#1|)) "\\spad{tensorProduct(a,b)} calculates the Kronecker product of the matrices {\\em a} and \\spad{b}. Note: if each matrix corresponds to a group representation (repr. of generators) of one group,{} then these matrices correspond to the tensor product of the two representations.")) (|symmetricTensors| (((|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|)) (|PositiveInteger|)) "\\spad{symmetricTensors(la,n)} applies to each \\spad{m}-by-\\spad{m} square matrix in the list {\\em la} the irreducible,{} polynomial representation of the general linear group {\\em GLm} which corresponds to the partition {\\em (n,0,...,0)} of \\spad{n}. Error: if the matrices in {\\em la} are not square matrices. Note: this corresponds to the symmetrization of the representation with the trivial representation of the symmetric group {\\em Sn}. The carrier spaces of the representation are the symmetric tensors of the \\spad{n}-fold tensor product.") (((|Matrix| |#1|) (|Matrix| |#1|) (|PositiveInteger|)) "\\spad{symmetricTensors(a,n)} applies to the \\spad{m}-by-\\spad{m} square matrix {\\em a} the irreducible,{} polynomial representation of the general linear group {\\em GLm} which corresponds to the partition {\\em (n,0,...,0)} of \\spad{n}. Error: if {\\em a} is not a square matrix. Note: this corresponds to the symmetrization of the representation with the trivial representation of the symmetric group {\\em Sn}. The carrier spaces of the representation are the symmetric tensors of the \\spad{n}-fold tensor product.")) (|createGenericMatrix| (((|Matrix| (|Polynomial| |#1|)) (|NonNegativeInteger|)) "\\spad{createGenericMatrix(m)} creates a square matrix of dimension \\spad{k} whose entry at the \\spad{i}-th row and \\spad{j}-th column is the indeterminate {\\em x[i,j]} (double subscripted).")) (|antisymmetricTensors| (((|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|)) (|PositiveInteger|)) "\\spad{antisymmetricTensors(la,n)} applies to each \\spad{m}-by-\\spad{m} square matrix in the list {\\em la} the irreducible,{} polynomial representation of the general linear group {\\em GLm} which corresponds to the partition {\\em (1,1,...,1,0,0,...,0)} of \\spad{n}. Error: if \\spad{n} is greater than \\spad{m}. Note: this corresponds to the symmetrization of the representation with the sign representation of the symmetric group {\\em Sn}. The carrier spaces of the representation are the antisymmetric tensors of the \\spad{n}-fold tensor product.") (((|Matrix| |#1|) (|Matrix| |#1|) (|PositiveInteger|)) "\\spad{antisymmetricTensors(a,n)} applies to the square matrix {\\em a} the irreducible,{} polynomial representation of the general linear group {\\em GLm},{} where \\spad{m} is the number of rows of {\\em a},{} which corresponds to the partition {\\em (1,1,...,1,0,0,...,0)} of \\spad{n}. Error: if \\spad{n} is greater than \\spad{m}. Note: this corresponds to the symmetrization of the representation with the sign representation of the symmetric group {\\em Sn}. The carrier spaces of the representation are the antisymmetric tensors of the \\spad{n}-fold tensor product."))) 
NIL 
((|HasAttribute| |#1| (QUOTE (-3996 "*")))) 
(-943 R) 
((|constructor| (NIL "\\spad{RepresentationPackage2} provides functions for working with modular representations of finite groups and algebra. The routines in this package are created,{} using ideas of \\spad{R}. Parker,{} (the meat-Axe) to get smaller representations from bigger ones,{} \\spadignore{i.e.} finding sub- and factormodules,{} or to show,{} that such the representations are irreducible. Note: most functions are randomized functions of Las Vegas type \\spadignore{i.e.} every answer is correct,{} but with small probability the algorithm fails to get an answer.")) (|scanOneDimSubspaces| (((|Vector| |#1|) (|List| (|Vector| |#1|)) (|Integer|)) "\\spad{scanOneDimSubspaces(basis,n)} gives a canonical representative of the {\\em n}\\spad{-}th one-dimensional subspace of the vector space generated by the elements of {\\em basis},{} all from {\\em R**n}. The coefficients of the representative are of shape {\\em (0,...,0,1,*,...,*)},{} {\\em *} in \\spad{R}. If the size of \\spad{R} is \\spad{q},{} then there are {\\em (q**n-1)/(q-1)} of them. We first reduce \\spad{n} modulo this number,{} then find the largest \\spad{i} such that {\\em +/[q**i for i in 0..i-1] <= n}. Subtracting this sum of powers from \\spad{n} results in an \\spad{i}-digit number to \\spad{basis} \\spad{q}. This fills the positions of the stars.")) (|meatAxe| (((|List| (|List| (|Matrix| |#1|))) (|List| (|Matrix| |#1|)) (|PositiveInteger|)) "\\spad{meatAxe(aG, numberOfTries)} calls {\\em meatAxe(aG,true,numberOfTries,7)}. Notes: 7 covers the case of three-dimensional kernels over the field with 2 elements.") (((|List| (|List| (|Matrix| |#1|))) (|List| (|Matrix| |#1|)) (|Boolean|)) "\\spad{meatAxe(aG, randomElements)} calls {\\em meatAxe(aG,false,6,7)},{} only using Parker's fingerprints,{} if {\\em randomElemnts} is \\spad{false}. If it is \\spad{true},{} it calls {\\em meatAxe(aG,true,25,7)},{} only using random elements. Note: the choice of 25 was rather arbitrary. Also,{} 7 covers the case of three-dimensional kernels over the field with 2 elements.") (((|List| (|List| (|Matrix| |#1|))) (|List| (|Matrix| |#1|))) "\\spad{meatAxe(aG)} calls {\\em meatAxe(aG,false,25,7)} returns a 2-list of representations as follows. All matrices of argument \\spad{aG} are assumed to be square and of equal size. Then \\spad{aG} generates a subalgebra,{} say \\spad{A},{} of the algebra of all square matrices of dimension \\spad{n}. {\\em V R} is an A-module in the usual way. meatAxe(\\spad{aG}) creates at most 25 random elements of the algebra,{} tests them for singularity. If singular,{} it tries at most 7 elements of its kernel to generate a proper submodule. If successful a list which contains first the list of the representations of the submodule,{} then a list of the representations of the factor module is returned. Otherwise,{} if we know that all the kernel is already scanned,{} Norton's irreducibility test can be used either to prove irreducibility or to find the splitting. Notes: the first 6 tries use Parker's fingerprints. Also,{} 7 covers the case of three-dimensional kernels over the field with 2 elements.") (((|List| (|List| (|Matrix| |#1|))) (|List| (|Matrix| |#1|)) (|Boolean|) (|Integer|) (|Integer|)) "\\spad{meatAxe(aG,randomElements,numberOfTries, maxTests)} returns a 2-list of representations as follows. All matrices of argument \\spad{aG} are assumed to be square and of equal size. Then \\spad{aG} generates a subalgebra,{} say \\spad{A},{} of the algebra of all square matrices of dimension \\spad{n}. {\\em V R} is an A-module in the usual way. meatAxe(\\spad{aG},{}\\spad{numberOfTries},{} maxTests) creates at most {\\em numberOfTries} random elements of the algebra,{} tests them for singularity. If singular,{} it tries at most {\\em maxTests} elements of its kernel to generate a proper submodule. If successful,{} a 2-list is returned: first,{} a list containing first the list of the representations of the submodule,{} then a list of the representations of the factor module. Otherwise,{} if we know that all the kernel is already scanned,{} Norton's irreducibility test can be used either to prove irreducibility or to find the splitting. If {\\em randomElements} is {\\em false},{} the first 6 tries use Parker's fingerprints.")) (|split| (((|List| (|List| (|Matrix| |#1|))) (|List| (|Matrix| |#1|)) (|Vector| (|Vector| |#1|))) "\\spad{split(aG,submodule)} uses a proper \\spad{submodule} of {\\em R**n} to create the representations of the \\spad{submodule} and of the factor module.") (((|List| (|List| (|Matrix| |#1|))) (|List| (|Matrix| |#1|)) (|Vector| |#1|)) "\\spad{split(aG, vector)} returns a subalgebra \\spad{A} of all square matrix of dimension \\spad{n} as a list of list of matrices,{} generated by the list of matrices \\spad{aG},{} where \\spad{n} denotes both the size of vector as well as the dimension of each of the square matrices. {\\em V R} is an A-module in the natural way. split(\\spad{aG},{} vector) then checks whether the cyclic submodule generated by {\\em vector} is a proper submodule of {\\em V R}. If successful,{} it returns a two-element list,{} which contains first the list of the representations of the submodule,{} then the list of the representations of the factor module. If the vector generates the whole module,{} a one-element list of the old representation is given. Note: a later version this should call the other split.")) (|isAbsolutelyIrreducible?| (((|Boolean|) (|List| (|Matrix| |#1|))) "\\spad{isAbsolutelyIrreducible?(aG)} calls {\\em isAbsolutelyIrreducible?(aG,25)}. Note: the choice of 25 was rather arbitrary.") (((|Boolean|) (|List| (|Matrix| |#1|)) (|Integer|)) "\\spad{isAbsolutelyIrreducible?(aG, numberOfTries)} uses Norton's irreducibility test to check for absolute irreduciblity,{} assuming if a one-dimensional kernel is found. As no field extension changes create \"new\" elements in a one-dimensional space,{} the criterium stays \\spad{true} for every extension. The method looks for one-dimensionals only by creating random elements (no fingerprints) since a run of {\\em meatAxe} would have proved absolute irreducibility anyway.")) (|areEquivalent?| (((|Matrix| |#1|) (|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|)) (|Integer|)) "\\spad{areEquivalent?(aG0,aG1,numberOfTries)} calls {\\em areEquivalent?(aG0,aG1,true,25)}. Note: the choice of 25 was rather arbitrary.") (((|Matrix| |#1|) (|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|))) "\\spad{areEquivalent?(aG0,aG1)} calls {\\em areEquivalent?(aG0,aG1,true,25)}. Note: the choice of 25 was rather arbitrary.") (((|Matrix| |#1|) (|List| (|Matrix| |#1|)) (|List| (|Matrix| |#1|)) (|Boolean|) (|Integer|)) "\\spad{areEquivalent?(aG0,aG1,randomelements,numberOfTries)} tests whether the two lists of matrices,{} all assumed of same square shape,{} can be simultaneously conjugated by a non-singular matrix. If these matrices represent the same group generators,{} the representations are equivalent. The algorithm tries {\\em numberOfTries} times to create elements in the generated algebras in the same fashion. If their ranks differ,{} they are not equivalent. If an isomorphism is assumed,{} then the kernel of an element of the first algebra is mapped to the kernel of the corresponding element in the second algebra. Now consider the one-dimensional ones. If they generate the whole space (\\spadignore{e.g.} irreducibility !) we use {\\em standardBasisOfCyclicSubmodule} to create the only possible transition matrix. The method checks whether the matrix conjugates all corresponding matrices from {\\em aGi}. The way to choose the singular matrices is as in {\\em meatAxe}. If the two representations are equivalent,{} this routine returns the transformation matrix {\\em TM} with {\\em aG0.i * TM = TM * aG1.i} for all \\spad{i}. If the representations are not equivalent,{} a small 0-matrix is returned. Note: the case with different sets of group generators cannot be handled.")) (|standardBasisOfCyclicSubmodule| (((|Matrix| |#1|) (|List| (|Matrix| |#1|)) (|Vector| |#1|)) "\\spad{standardBasisOfCyclicSubmodule(lm,v)} returns a matrix as follows. It is assumed that the size \\spad{n} of the vector equals the number of rows and columns of the matrices. Then the matrices generate a subalgebra,{} say \\spad{A},{} of the algebra of all square matrices of dimension \\spad{n}. {\\em V R} is an \\spad{A}-module in the natural way. standardBasisOfCyclicSubmodule(\\spad{lm},{}\\spad{v}) calculates a matrix whose non-zero column vectors are the \\spad{R}-Basis of {\\em Av} achieved in the way as described in section 6 of \\spad{R}. A. Parker's \"The Meat-Axe\". Note: in contrast to {\\em cyclicSubmodule},{} the result is not in echelon form.")) (|cyclicSubmodule| (((|Vector| (|Vector| |#1|)) (|List| (|Matrix| |#1|)) (|Vector| |#1|)) "\\spad{cyclicSubmodule(lm,v)} generates a basis as follows. It is assumed that the size \\spad{n} of the vector equals the number of rows and columns of the matrices. Then the matrices generate a subalgebra,{} say \\spad{A},{} of the algebra of all square matrices of dimension \\spad{n}. {\\em V R} is an \\spad{A}-module in the natural way. cyclicSubmodule(\\spad{lm},{}\\spad{v}) generates the \\spad{R}-Basis of {\\em Av} as described in section 6 of \\spad{R}. A. Parker's \"The Meat-Axe\". Note: in contrast to the description in \"The Meat-Axe\" and to {\\em standardBasisOfCyclicSubmodule} the result is in echelon form.")) (|createRandomElement| (((|Matrix| |#1|) (|List| (|Matrix| |#1|)) (|Matrix| |#1|)) "\\spad{createRandomElement(aG,x)} creates a random element of the group algebra generated by {\\em aG}.")) (|completeEchelonBasis| (((|Matrix| |#1|) (|Vector| (|Vector| |#1|))) "\\spad{completeEchelonBasis(lv)} completes the basis {\\em lv} assumed to be in echelon form of a subspace of {\\em R**n} (\\spad{n} the length of all the vectors in {\\em lv}) with unit vectors to a basis of {\\em R**n}. It is assumed that the argument is not an empty vector and that it is not the basis of the 0-subspace. Note: the rows of the result correspond to the vectors of the basis."))) 
NIL 
((-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-319)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-258)))) 
(-944 S) 
((|constructor| (NIL "Implements multiplication by repeated addition")) (|double| ((|#1| (|PositiveInteger|) |#1|) "\\spad{double(i, r)} multiplies \\spad{r} by \\spad{i} using repeated doubling.")) (+ (($ $ $) "\\spad{x+y} returns the sum of \\spad{x} and \\spad{y}"))) 
NIL 
NIL 
(-945 S) 
((|constructor| (NIL "Implements exponentiation by repeated squaring")) (|expt| ((|#1| |#1| (|PositiveInteger|)) "\\spad{expt(r, i)} computes r**i by repeated squaring")) (* (($ $ $) "\\spad{x*y} returns the product of \\spad{x} and \\spad{y}"))) 
NIL 
NIL 
(-946 S) 
((|constructor| (NIL "This package provides coercions for the special types \\spadtype{Exit} and \\spadtype{Void}.")) (|coerce| ((|#1| (|Exit|)) "\\spad{coerce(e)} is never really evaluated. This coercion is used for formal type correctness when a function will not return directly to its caller.") (((|Void|) |#1|) "\\spad{coerce(s)} throws all information about \\spad{s} away. This coercion allows values of any type to appear in contexts where they will not be used. For example,{} it allows the resolution of different types in the \\spad{then} and \\spad{else} branches when an \\spad{if} is in a context where the resulting value is not used."))) 
NIL 
NIL 
(-947 -3092 |Expon| |VarSet| |FPol| |LFPol|) 
((|constructor| (NIL "ResidueRing is the quotient of a polynomial ring by an ideal. The ideal is given as a list of generators. The elements of the domain are equivalence classes expressed in terms of reduced elements")) (|lift| ((|#4| $) "\\spad{lift(x)} return the canonical representative of the equivalence class \\spad{x}")) (|coerce| (($ |#4|) "\\spad{coerce(f)} produces the equivalence class of \\spad{f} in the residue ring")) (|reduce| (($ |#4|) "\\spad{reduce(f)} produces the equivalence class of \\spad{f} in the residue ring"))) 
(((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-948) 
((|constructor| (NIL "This domain represents `return' expressions.")) (|expression| (((|SpadAst|) $) "\\spad{expression(e)} returns the expression returned by `e'."))) 
NIL 
NIL 
(-949 A S) 
((|constructor| (NIL "A is retractable to \\spad{B} means that some elementsif A can be converted into elements of \\spad{B} and any element of \\spad{B} can be converted into an element of A.")) (|retract| ((|#2| $) "\\spad{retract(a)} transforms a into an element of \\spad{S} if possible. Error: if a cannot be made into an element of \\spad{S}.")) (|retractIfCan| (((|Union| |#2| "failed") $) "\\spad{retractIfCan(a)} transforms a into an element of \\spad{S} if possible. Returns \"failed\" if a cannot be made into an element of \\spad{S}."))) 
NIL 
NIL 
(-950 S) 
((|constructor| (NIL "A is retractable to \\spad{B} means that some elementsif A can be converted into elements of \\spad{B} and any element of \\spad{B} can be converted into an element of A.")) (|retract| ((|#1| $) "\\spad{retract(a)} transforms a into an element of \\spad{S} if possible. Error: if a cannot be made into an element of \\spad{S}.")) (|retractIfCan| (((|Union| |#1| "failed") $) "\\spad{retractIfCan(a)} transforms a into an element of \\spad{S} if possible. Returns \"failed\" if a cannot be made into an element of \\spad{S}."))) 
NIL 
NIL 
(-951 Q R) 
((|constructor| (NIL "RetractSolvePackage is an interface to \\spadtype{SystemSolvePackage} that attempts to retract the coefficients of the equations before solving.")) (|solveRetract| (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#2|))))) (|List| (|Polynomial| |#2|)) (|List| (|Symbol|))) "\\spad{solveRetract(lp,lv)} finds the solutions of the list \\spad{lp} of rational functions with respect to the list of symbols \\spad{lv}. The function tries to retract all the coefficients of the equations to \\spad{Q} before solving if possible."))) 
NIL 
NIL 
(-952 R) 
((|constructor| (NIL "Utilities that provide the same top-level manipulations on fractions than on polynomials.")) (|coerce| (((|Fraction| (|Polynomial| |#1|)) |#1|) "\\spad{coerce(r)} returns \\spad{r} viewed as a rational function over \\spad{R}.")) (|eval| (((|Fraction| (|Polynomial| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) "\\spad{eval(f, [v1 = g1,...,vn = gn])} returns \\spad{f} with each \\spad{vi} replaced by \\spad{gi} in parallel,{} \\spadignore{i.e.} \\spad{vi}'s appearing inside the \\spad{gi}'s are not replaced. Error: if any \\spad{vi} is not a symbol.") (((|Fraction| (|Polynomial| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|Equation| (|Fraction| (|Polynomial| |#1|)))) "\\spad{eval(f, v = g)} returns \\spad{f} with \\spad{v} replaced by \\spad{g}. Error: if \\spad{v} is not a symbol.") (((|Fraction| (|Polynomial| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|List| (|Symbol|)) (|List| (|Fraction| (|Polynomial| |#1|)))) "\\spad{eval(f, [v1,...,vn], [g1,...,gn])} returns \\spad{f} with each \\spad{vi} replaced by \\spad{gi} in parallel,{} \\spadignore{i.e.} \\spad{vi}'s appearing inside the \\spad{gi}'s are not replaced.") (((|Fraction| (|Polynomial| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|Symbol|) (|Fraction| (|Polynomial| |#1|))) "\\spad{eval(f, v, g)} returns \\spad{f} with \\spad{v} replaced by \\spad{g}.")) (|multivariate| (((|Fraction| (|Polynomial| |#1|)) (|Fraction| (|SparseUnivariatePolynomial| (|Fraction| (|Polynomial| |#1|)))) (|Symbol|)) "\\spad{multivariate(f, v)} applies both the numerator and denominator of \\spad{f} to \\spad{v}.")) (|univariate| (((|Fraction| (|SparseUnivariatePolynomial| (|Fraction| (|Polynomial| |#1|)))) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{univariate(f, v)} returns \\spad{f} viewed as a univariate rational function in \\spad{v}.")) (|mainVariable| (((|Union| (|Symbol|) "failed") (|Fraction| (|Polynomial| |#1|))) "\\spad{mainVariable(f)} returns the highest variable appearing in the numerator or the denominator of \\spad{f},{} \"failed\" if \\spad{f} has no variables.")) (|variables| (((|List| (|Symbol|)) (|Fraction| (|Polynomial| |#1|))) "\\spad{variables(f)} returns the list of variables appearing in the numerator or the denominator of \\spad{f}."))) 
NIL 
NIL 
(-953) 
((|t| (((|Mapping| (|Float|)) (|NonNegativeInteger|)) "\\spad{t(n)} \\undocumented")) (F (((|Mapping| (|Float|)) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{F(n,m)} \\undocumented")) (|Beta| (((|Mapping| (|Float|)) (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{Beta(n,m)} \\undocumented")) (|chiSquare| (((|Mapping| (|Float|)) (|NonNegativeInteger|)) "\\spad{chiSquare(n)} \\undocumented")) (|exponential| (((|Mapping| (|Float|)) (|Float|)) "\\spad{exponential(f)} \\undocumented")) (|normal| (((|Mapping| (|Float|)) (|Float|) (|Float|)) "\\spad{normal(f,g)} \\undocumented")) (|uniform| (((|Mapping| (|Float|)) (|Float|) (|Float|)) "\\spad{uniform(f,g)} \\undocumented")) (|chiSquare1| (((|Float|) (|NonNegativeInteger|)) "\\spad{chiSquare1(n)} \\undocumented")) (|exponential1| (((|Float|)) "\\spad{exponential1()} \\undocumented")) (|normal01| (((|Float|)) "\\spad{normal01()} \\undocumented")) (|uniform01| (((|Float|)) "\\spad{uniform01()} \\undocumented"))) 
NIL 
NIL 
(-954 UP) 
((|constructor| (NIL "Factorization of univariate polynomials with coefficients which are rational functions with integer coefficients.")) (|factor| (((|Factored| |#1|) |#1|) "\\spad{factor(p)} returns a prime factorisation of \\spad{p}."))) 
NIL 
NIL 
(-955 R) 
((|constructor| (NIL "\\spadtype{RationalFunctionFactorizer} contains the factor function (called factorFraction) which factors fractions of polynomials by factoring the numerator and denominator. Since any non zero fraction is a unit the usual factor operation will just return the original fraction.")) (|factorFraction| (((|Fraction| (|Factored| (|Polynomial| |#1|))) (|Fraction| (|Polynomial| |#1|))) "\\spad{factorFraction(r)} factors the numerator and the denominator of the polynomial fraction \\spad{r}."))) 
NIL 
NIL 
(-956 T$) 
((|constructor| (NIL "This category defines the common interface for RGB color models.")) (|componentUpperBound| ((|#1|) "componentUpperBound is an upper bound for all component values.")) (|blue| ((|#1| $) "\\spad{blue(c)} returns the `blue' component of `c'.")) (|green| ((|#1| $) "\\spad{green(c)} returns the `green' component of `c'.")) (|red| ((|#1| $) "\\spad{red(c)} returns the `red' component of `c'."))) 
NIL 
NIL 
(-957 T$) 
((|constructor| (NIL "This category defines the common interface for RGB color spaces.")) (|whitePoint| (($) "whitePoint is the contant indicating the white point of this color space."))) 
NIL 
NIL 
(-958 R |ls|) 
((|constructor| (NIL "A domain for regular chains (\\spadignore{i.e.} regular triangular sets) over a Gcd-Domain and with a fix list of variables. This is just a front-end for the \\spadtype{RegularTriangularSet} domain constructor.")) (|zeroSetSplit| (((|List| $) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|Boolean|) (|Boolean|)) "\\spad{zeroSetSplit(lp,clos?,info?)} returns a list \\spad{lts} of regular chains such that the union of the closures of their regular zero sets equals the affine variety associated with \\spad{lp}. Moreover,{} if \\spad{clos?} is \\spad{false} then the union of the regular zero set of the \\spad{ts} (for \\spad{ts} in \\spad{lts}) equals this variety. If \\spad{info?} is \\spad{true} then some information is displayed during the computations. See \\axiomOpFrom{zeroSetSplit}{RegularTriangularSet}."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| (-703 |#1| (-773 |#2|)) (QUOTE (-1013))) (|HasCategory| (-703 |#1| (-773 |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -703) (|devaluate| |#1|) (|%list| (QUOTE -773) (|devaluate| |#2|)))))) (|HasCategory| (-703 |#1| (-773 |#2|)) (QUOTE (-553 (-473)))) (|HasCategory| (-703 |#1| (-773 |#2|)) (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| (-773 |#2|) (QUOTE (-319))) (|HasCategory| (-703 |#1| (-773 |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-703 |#1| (-773 |#2|)) (QUOTE (-72)))) 
(-959) 
((|constructor| (NIL "This package exports integer distributions")) (|ridHack1| (((|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Integer|)) "\\spad{ridHack1(i,j,k,l)} \\undocumented")) (|geometric| (((|Mapping| (|Integer|)) |RationalNumber|) "\\spad{geometric(f)} \\undocumented")) (|poisson| (((|Mapping| (|Integer|)) |RationalNumber|) "\\spad{poisson(f)} \\undocumented")) (|binomial| (((|Mapping| (|Integer|)) (|Integer|) |RationalNumber|) "\\spad{binomial(n,f)} \\undocumented")) (|uniform| (((|Mapping| (|Integer|)) (|Segment| (|Integer|))) "\\spad{uniform(s)} \\undocumented"))) 
NIL 
NIL 
(-960 S) 
((|constructor| (NIL "The category of rings with unity,{} always associative,{} but not necessarily commutative.")) (|unitsKnown| ((|attribute|) "recip truly yields reciprocal or \"failed\" if not a unit. Note: \\spad{recip(0) = \"failed\"}.")) (|characteristic| (((|NonNegativeInteger|)) "\\spad{characteristic()} returns the characteristic of the ring this is the smallest positive integer \\spad{n} such that \\spad{n*x=0} for all \\spad{x} in the ring,{} or zero if no such \\spad{n} exists."))) 
NIL 
NIL 
(-961) 
((|constructor| (NIL "The category of rings with unity,{} always associative,{} but not necessarily commutative.")) (|unitsKnown| ((|attribute|) "recip truly yields reciprocal or \"failed\" if not a unit. Note: \\spad{recip(0) = \"failed\"}.")) (|characteristic| (((|NonNegativeInteger|)) "\\spad{characteristic()} returns the characteristic of the ring this is the smallest positive integer \\spad{n} such that \\spad{n*x=0} for all \\spad{x} in the ring,{} or zero if no such \\spad{n} exists."))) 
((-3991 . T)) 
NIL 
(-962 |xx| -3092) 
((|constructor| (NIL "This package exports rational interpolation algorithms"))) 
NIL 
NIL 
(-963 S) 
((|constructor| (NIL "\\indented{2}{A set is an \\spad{S}-right linear set if it is stable by right-dilation} \\indented{2}{by elements in the semigroup \\spad{S}.} See Also: LeftLinearSet.")) (* (($ $ |#1|) "\\spad{x*s} is the right-dilation of \\spad{x} by \\spad{s}."))) 
NIL 
NIL 
(-964 S |m| |n| R |Row| |Col|) 
((|constructor| (NIL "\\spadtype{RectangularMatrixCategory} is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \\spad{R}-modules and will be non-mutable.")) (|nullSpace| (((|List| |#6|) $) "\\spad{nullSpace(m)}+ returns a basis for the null space of the matrix \\spad{m}.")) (|nullity| (((|NonNegativeInteger|) $) "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}.")) (|rank| (((|NonNegativeInteger|) $) "\\spad{rank(m)} returns the rank of the matrix \\spad{m}.")) (|rowEchelon| (($ $) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}.")) (/ (($ $ |#4|) "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}.")) (|exquo| (((|Union| $ "failed") $ |#4|) "\\spad{exquo(m,r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\axiom{\"failed\"} if this is not possible.")) (|map| (($ (|Mapping| |#4| |#4| |#4|) $ $) "\\spad{map(f,a,b)} returns \\spad{c},{} where \\spad{c} is such that \\spad{c(i,j) = f(a(i,j),b(i,j))} for all \\spad{i},{} \\spad{j}.") (($ (|Mapping| |#4| |#4|) $) "\\spad{map(f,a)} returns \\spad{b},{} where \\spad{b(i,j) = a(i,j)} for all \\spad{i},{} \\spad{j}.")) (|column| ((|#6| $ (|Integer|)) "\\spad{column(m,j)} returns the \\spad{j}th column of the matrix \\spad{m}. Error: if the index outside the proper range.")) (|row| ((|#5| $ (|Integer|)) "\\spad{row(m,i)} returns the \\spad{i}th row of the matrix \\spad{m}. Error: if the index is outside the proper range.")) (|qelt| ((|#4| $ (|Integer|) (|Integer|)) "\\spad{qelt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Note: there is NO error check to determine if indices are in the proper ranges.")) (|elt| ((|#4| $ (|Integer|) (|Integer|) |#4|) "\\spad{elt(m,i,j,r)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m},{} if \\spad{m} has an \\spad{i}th row and a \\spad{j}th column,{} and returns \\spad{r} otherwise.") ((|#4| $ (|Integer|) (|Integer|)) "\\spad{elt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Error: if indices are outside the proper ranges.")) (|listOfLists| (((|List| (|List| |#4|)) $) "\\spad{listOfLists(m)} returns the rows of the matrix \\spad{m} as a list of lists.")) (|ncols| (((|NonNegativeInteger|) $) "\\spad{ncols(m)} returns the number of columns in the matrix \\spad{m}.")) (|nrows| (((|NonNegativeInteger|) $) "\\spad{nrows(m)} returns the number of rows in the matrix \\spad{m}.")) (|maxColIndex| (((|Integer|) $) "\\spad{maxColIndex(m)} returns the index of the 'last' column of the matrix \\spad{m}.")) (|minColIndex| (((|Integer|) $) "\\spad{minColIndex(m)} returns the index of the 'first' column of the matrix \\spad{m}.")) (|maxRowIndex| (((|Integer|) $) "\\spad{maxRowIndex(m)} returns the index of the 'last' row of the matrix \\spad{m}.")) (|minRowIndex| (((|Integer|) $) "\\spad{minRowIndex(m)} returns the index of the 'first' row of the matrix \\spad{m}.")) (|antisymmetric?| (((|Boolean|) $) "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,j] = -m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|symmetric?| (((|Boolean|) $) "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,j] = m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|diagonal?| (((|Boolean|) $) "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise.")) (|square?| (((|Boolean|) $) "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise.")) (|matrix| (($ (|List| (|List| |#4|))) "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.")) (|finiteAggregate| ((|attribute|) "matrices are finite"))) 
NIL 
((|HasCategory| |#4| (QUOTE (-258))) (|HasCategory| |#4| (QUOTE (-312))) (|HasCategory| |#4| (QUOTE (-495))) (|HasCategory| |#4| (QUOTE (-146)))) 
(-965 |m| |n| R |Row| |Col|) 
((|constructor| (NIL "\\spadtype{RectangularMatrixCategory} is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \\spad{R}-modules and will be non-mutable.")) (|nullSpace| (((|List| |#5|) $) "\\spad{nullSpace(m)}+ returns a basis for the null space of the matrix \\spad{m}.")) (|nullity| (((|NonNegativeInteger|) $) "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}.")) (|rank| (((|NonNegativeInteger|) $) "\\spad{rank(m)} returns the rank of the matrix \\spad{m}.")) (|rowEchelon| (($ $) "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}.")) (/ (($ $ |#3|) "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}.")) (|exquo| (((|Union| $ "failed") $ |#3|) "\\spad{exquo(m,r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\axiom{\"failed\"} if this is not possible.")) (|map| (($ (|Mapping| |#3| |#3| |#3|) $ $) "\\spad{map(f,a,b)} returns \\spad{c},{} where \\spad{c} is such that \\spad{c(i,j) = f(a(i,j),b(i,j))} for all \\spad{i},{} \\spad{j}.") (($ (|Mapping| |#3| |#3|) $) "\\spad{map(f,a)} returns \\spad{b},{} where \\spad{b(i,j) = a(i,j)} for all \\spad{i},{} \\spad{j}.")) (|column| ((|#5| $ (|Integer|)) "\\spad{column(m,j)} returns the \\spad{j}th column of the matrix \\spad{m}. Error: if the index outside the proper range.")) (|row| ((|#4| $ (|Integer|)) "\\spad{row(m,i)} returns the \\spad{i}th row of the matrix \\spad{m}. Error: if the index is outside the proper range.")) (|qelt| ((|#3| $ (|Integer|) (|Integer|)) "\\spad{qelt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Note: there is NO error check to determine if indices are in the proper ranges.")) (|elt| ((|#3| $ (|Integer|) (|Integer|) |#3|) "\\spad{elt(m,i,j,r)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m},{} if \\spad{m} has an \\spad{i}th row and a \\spad{j}th column,{} and returns \\spad{r} otherwise.") ((|#3| $ (|Integer|) (|Integer|)) "\\spad{elt(m,i,j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Error: if indices are outside the proper ranges.")) (|listOfLists| (((|List| (|List| |#3|)) $) "\\spad{listOfLists(m)} returns the rows of the matrix \\spad{m} as a list of lists.")) (|ncols| (((|NonNegativeInteger|) $) "\\spad{ncols(m)} returns the number of columns in the matrix \\spad{m}.")) (|nrows| (((|NonNegativeInteger|) $) "\\spad{nrows(m)} returns the number of rows in the matrix \\spad{m}.")) (|maxColIndex| (((|Integer|) $) "\\spad{maxColIndex(m)} returns the index of the 'last' column of the matrix \\spad{m}.")) (|minColIndex| (((|Integer|) $) "\\spad{minColIndex(m)} returns the index of the 'first' column of the matrix \\spad{m}.")) (|maxRowIndex| (((|Integer|) $) "\\spad{maxRowIndex(m)} returns the index of the 'last' row of the matrix \\spad{m}.")) (|minRowIndex| (((|Integer|) $) "\\spad{minRowIndex(m)} returns the index of the 'first' row of the matrix \\spad{m}.")) (|antisymmetric?| (((|Boolean|) $) "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,j] = -m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|symmetric?| (((|Boolean|) $) "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,j] = m[j,i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")) (|diagonal?| (((|Boolean|) $) "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise.")) (|square?| (((|Boolean|) $) "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise.")) (|matrix| (($ (|List| (|List| |#3|))) "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.")) (|finiteAggregate| ((|attribute|) "matrices are finite"))) 
((-3994 . T) (-3989 . T) (-3988 . T)) 
NIL 
(-966 |m| |n| R) 
((|constructor| (NIL "\\spadtype{RectangularMatrix} is a matrix domain where the number of rows and the number of columns are parameters of the domain.")) (|rectangularMatrix| (($ (|Matrix| |#3|)) "\\spad{rectangularMatrix(m)} converts a matrix of type \\spadtype{Matrix} to a matrix of type \\spad{RectangularMatrix}."))) 
((-3994 . T) (-3989 . T) (-3988 . T)) 
((|HasCategory| |#3| (QUOTE (-146))) (OR (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|))))) (|HasCategory| |#3| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-312)))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (QUOTE (-258))) (|HasCategory| |#3| (QUOTE (-495))) (-12 (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (|HasCategory| |#3| (QUOTE (-72))) (|HasCategory| |#3| (QUOTE (-552 (-772))))) 
(-967 |m| |n| R1 |Row1| |Col1| M1 R2 |Row2| |Col2| M2) 
((|constructor| (NIL "\\spadtype{RectangularMatrixCategoryFunctions2} provides functions between two matrix domains. The functions provided are \\spadfun{map} and \\spadfun{reduce}.")) (|reduce| ((|#7| (|Mapping| |#7| |#3| |#7|) |#6| |#7|) "\\spad{reduce(f,m,r)} returns a matrix \\spad{n} where \\spad{n[i,j] = f(m[i,j],r)} for all indices spad{\\spad{i}} and \\spad{j}.")) (|map| ((|#10| (|Mapping| |#7| |#3|) |#6|) "\\spad{map(f,m)} applies the function \\spad{f} to the elements of the matrix \\spad{m}."))) 
NIL 
NIL 
(-968 R) 
((|constructor| (NIL "The category of right modules over an rng (ring not necessarily with unit). This is an abelian group which supports right multiplation by elements of the rng. \\blankline"))) 
NIL 
NIL 
(-969 S) 
((|constructor| (NIL "The category of associative rings,{} not necessarily commutative,{} and not necessarily with a 1. This is a combination of an abelian group and a semigroup,{} with multiplication distributing over addition. \\blankline")) (|annihilate?| (((|Boolean|) $ $) "\\spad{annihilate?(x,y)} holds when the product of \\spad{x} and \\spad{y} is \\spad{0}."))) 
NIL 
NIL 
(-970) 
((|constructor| (NIL "The category of associative rings,{} not necessarily commutative,{} and not necessarily with a 1. This is a combination of an abelian group and a semigroup,{} with multiplication distributing over addition. \\blankline")) (|annihilate?| (((|Boolean|) $ $) "\\spad{annihilate?(x,y)} holds when the product of \\spad{x} and \\spad{y} is \\spad{0}."))) 
NIL 
NIL 
(-971 S T$) 
((|constructor| (NIL "This domain represents the notion of binding a variable to range over a specific segment (either bounded,{} or half bounded).")) (|segment| ((|#1| $) "\\spad{segment(x)} returns the segment from the right hand side of the \\spadtype{RangeBinding}. For example,{} if \\spad{x} is \\spad{v=s},{} then \\spad{segment(x)} returns \\spad{s}.")) (|variable| (((|Symbol|) $) "\\spad{variable(x)} returns the variable from the left hand side of the \\spadtype{RangeBinding}. For example,{} if \\spad{x} is \\spad{v=s},{} then \\spad{variable(x)} returns \\spad{v}.")) (|equation| (($ (|Symbol|) |#1|) "\\spad{equation(v,s)} creates a segment binding value with variable \\spad{v} and segment \\spad{s}. Note that the interpreter parses \\spad{v=s} to this form."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-1013)))) 
(-972 S) 
((|constructor| (NIL "The real number system category is intended as a model for the real numbers. The real numbers form an ordered normed field. Note that we have purposely not included \\spadtype{DifferentialRing} or the elementary functions (see \\spadtype{TranscendentalFunctionCategory}) in the definition.")) (|round| (($ $) "\\spad{round x} computes the integer closest to \\spad{x}.")) (|truncate| (($ $) "\\spad{truncate x} returns the integer between \\spad{x} and 0 closest to \\spad{x}.")) (|fractionPart| (($ $) "\\spad{fractionPart x} returns the fractional part of \\spad{x}.")) (|wholePart| (((|Integer|) $) "\\spad{wholePart x} returns the integer part of \\spad{x}.")) (|floor| (($ $) "\\spad{floor x} returns the largest integer \\spad{<= x}.")) (|ceiling| (($ $) "\\spad{ceiling x} returns the small integer \\spad{>= x}.")) (|norm| (($ $) "\\spad{norm x} returns the same as absolute value."))) 
NIL 
NIL 
(-973) 
((|constructor| (NIL "The real number system category is intended as a model for the real numbers. The real numbers form an ordered normed field. Note that we have purposely not included \\spadtype{DifferentialRing} or the elementary functions (see \\spadtype{TranscendentalFunctionCategory}) in the definition.")) (|round| (($ $) "\\spad{round x} computes the integer closest to \\spad{x}.")) (|truncate| (($ $) "\\spad{truncate x} returns the integer between \\spad{x} and 0 closest to \\spad{x}.")) (|fractionPart| (($ $) "\\spad{fractionPart x} returns the fractional part of \\spad{x}.")) (|wholePart| (((|Integer|) $) "\\spad{wholePart x} returns the integer part of \\spad{x}.")) (|floor| (($ $) "\\spad{floor x} returns the largest integer \\spad{<= x}.")) (|ceiling| (($ $) "\\spad{ceiling x} returns the small integer \\spad{>= x}.")) (|norm| (($ $) "\\spad{norm x} returns the same as absolute value."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-974 |TheField| |ThePolDom|) 
((|constructor| (NIL "\\axiomType{RightOpenIntervalRootCharacterization} provides work with interval root coding.")) (|relativeApprox| ((|#1| |#2| $ |#1|) "\\axiom{relativeApprox(exp,{}\\spad{c},{}\\spad{p}) = a} is relatively close to exp as a polynomial in \\spad{c} ip to precision \\spad{p}")) (|mightHaveRoots| (((|Boolean|) |#2| $) "\\axiom{mightHaveRoots(\\spad{p},{}\\spad{r})} is \\spad{false} if \\axiom{\\spad{p}.\\spad{r}} is not 0")) (|refine| (($ $) "\\axiom{refine(rootChar)} shrinks isolating interval around \\axiom{rootChar}")) (|middle| ((|#1| $) "\\axiom{middle(rootChar)} is the middle of the isolating interval")) (|size| ((|#1| $) "The size of the isolating interval")) (|right| ((|#1| $) "\\axiom{right(rootChar)} is the right bound of the isolating interval")) (|left| ((|#1| $) "\\axiom{left(rootChar)} is the left bound of the isolating interval"))) 
NIL 
NIL 
(-975) 
((|constructor| (NIL "\\spadtype{RomanNumeral} provides functions for converting \\indented{1}{integers to roman numerals.}")) (|roman| (($ (|Integer|)) "\\spad{roman(n)} creates a roman numeral for \\spad{n}.") (($ (|Symbol|)) "\\spad{roman(n)} creates a roman numeral for symbol \\spad{n}.")) (|noetherian| ((|attribute|) "ascending chain condition on ideals.")) (|canonicalsClosed| ((|attribute|) "two positives multiply to give positive.")) (|canonical| ((|attribute|) "mathematical equality is data structure equality."))) 
((-3982 . T) (-3986 . T) (-3981 . T) (-3992 . T) (-3993 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-976 S R E V) 
((|constructor| (NIL "A category for general multi-variate polynomials with coefficients in a ring,{} variables in an ordered set,{} and exponents from an ordered abelian monoid,{} with a \\axiomOp{sup} operation. When not constant,{} such a polynomial is viewed as a univariate polynomial in its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in the ordered set,{} so that some operations usually defined for univariate polynomials make sense here.")) (|mainSquareFreePart| (($ $) "\\axiom{mainSquareFreePart(\\spad{p})} returns the square free part of \\axiom{\\spad{p}} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\axiom{\\spad{R}}.")) (|mainPrimitivePart| (($ $) "\\axiom{mainPrimitivePart(\\spad{p})} returns the primitive part of \\axiom{\\spad{p}} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\axiom{\\spad{R}}.")) (|mainContent| (($ $) "\\axiom{mainContent(\\spad{p})} returns the content of \\axiom{\\spad{p}} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\axiom{\\spad{R}}.")) (|primitivePart!| (($ $) "\\axiom{primitivePart!(\\spad{p})} replaces \\axiom{\\spad{p}} by its primitive part.")) (|gcd| ((|#2| |#2| $) "\\axiom{gcd(\\spad{r},{}\\spad{p})} returns the gcd of \\axiom{\\spad{r}} and the content of \\axiom{\\spad{p}}.")) (|nextsubResultant2| (($ $ $ $ $) "\\axiom{\\spad{nextsubResultant2}(\\spad{p},{}\\spad{q},{}\\spad{z},{}\\spad{s})} is the multivariate version of the operation \\axiomOpFrom{\\spad{next_sousResultant2}}{PseudoRemainderSequence} from the \\axiomType{PseudoRemainderSequence} constructor.")) (|LazardQuotient2| (($ $ $ $ (|NonNegativeInteger|)) "\\axiom{\\spad{LazardQuotient2}(\\spad{p},{}a,{}\\spad{b},{}\\spad{n})} returns \\axiom{(a**(\\spad{n}-1) * \\spad{p}) exquo b**(\\spad{n}-1)} assuming that this quotient does not fail.")) (|LazardQuotient| (($ $ $ (|NonNegativeInteger|)) "\\axiom{LazardQuotient(a,{}\\spad{b},{}\\spad{n})} returns \\axiom{a**n exquo b**(\\spad{n}-1)} assuming that this quotient does not fail.")) (|lastSubResultant| (($ $ $) "\\axiom{lastSubResultant(a,{}\\spad{b})} returns the last non-zero subresultant of \\axiom{a} and \\axiom{\\spad{b}} where \\axiom{a} and \\axiom{\\spad{b}} are assumed to have the same main variable \\axiom{\\spad{v}} and are viewed as univariate polynomials in \\axiom{\\spad{v}}.")) (|subResultantChain| (((|List| $) $ $) "\\axiom{subResultantChain(a,{}\\spad{b})},{} where \\axiom{a} and \\axiom{\\spad{b}} are not contant polynomials with the same main variable,{} returns the subresultant chain of \\axiom{a} and \\axiom{\\spad{b}}.")) (|resultant| (($ $ $) "\\axiom{resultant(a,{}\\spad{b})} computes the resultant of \\axiom{a} and \\axiom{\\spad{b}} where \\axiom{a} and \\axiom{\\spad{b}} are assumed to have the same main variable \\axiom{\\spad{v}} and are viewed as univariate polynomials in \\axiom{\\spad{v}}.")) (|halfExtendedSubResultantGcd2| (((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $) "\\axiom{\\spad{halfExtendedSubResultantGcd2}(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}cb]} if \\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{}cb]} otherwise produces an error.")) (|halfExtendedSubResultantGcd1| (((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $) "\\axiom{\\spad{halfExtendedSubResultantGcd1}(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca]} if \\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{}cb]} otherwise produces an error.")) (|extendedSubResultantGcd| (((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $) "\\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[ca,{}cb,{}\\spad{r}]} such that \\axiom{\\spad{r}} is \\axiom{subResultantGcd(a,{}\\spad{b})} and we have \\axiom{ca * a + cb * cb = \\spad{r}} .")) (|subResultantGcd| (($ $ $) "\\axiom{subResultantGcd(a,{}\\spad{b})} computes a gcd of \\axiom{a} and \\axiom{\\spad{b}} where \\axiom{a} and \\axiom{\\spad{b}} are assumed to have the same main variable \\axiom{\\spad{v}} and are viewed as univariate polynomials in \\axiom{\\spad{v}} with coefficients in the fraction field of the polynomial ring generated by their other variables over \\axiom{\\spad{R}}.")) (|exactQuotient!| (($ $ $) "\\axiom{exactQuotient!(a,{}\\spad{b})} replaces \\axiom{a} by \\axiom{exactQuotient(a,{}\\spad{b})}") (($ $ |#2|) "\\axiom{exactQuotient!(\\spad{p},{}\\spad{r})} replaces \\axiom{\\spad{p}} by \\axiom{exactQuotient(\\spad{p},{}\\spad{r})}.")) (|exactQuotient| (($ $ $) "\\axiom{exactQuotient(a,{}\\spad{b})} computes the exact quotient of \\axiom{a} by \\axiom{\\spad{b}},{} which is assumed to be a divisor of \\axiom{a}. No error is returned if this exact quotient fails!") (($ $ |#2|) "\\axiom{exactQuotient(\\spad{p},{}\\spad{r})} computes the exact quotient of \\axiom{\\spad{p}} by \\axiom{\\spad{r}},{} which is assumed to be a divisor of \\axiom{\\spad{p}}. No error is returned if this exact quotient fails!")) (|primPartElseUnitCanonical!| (($ $) "\\axiom{primPartElseUnitCanonical!(\\spad{p})} replaces \\axiom{\\spad{p}} by \\axiom{primPartElseUnitCanonical(\\spad{p})}.")) (|primPartElseUnitCanonical| (($ $) "\\axiom{primPartElseUnitCanonical(\\spad{p})} returns \\axiom{primitivePart(\\spad{p})} if \\axiom{\\spad{R}} is a gcd-domain,{} otherwise \\axiom{unitCanonical(\\spad{p})}.")) (|convert| (($ (|Polynomial| |#2|)) "\\axiom{convert(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}},{} otherwise an error is produced.") (($ (|Polynomial| (|Integer|))) "\\axiom{convert(\\spad{p})} returns the same as \\axiom{retract(\\spad{p})}.") (($ (|Polynomial| (|Integer|))) "\\axiom{convert(\\spad{p})} returns the same as \\axiom{retract(\\spad{p})}") (($ (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{convert(\\spad{p})} returns the same as \\axiom{retract(\\spad{p})}.")) (|retract| (($ (|Polynomial| |#2|)) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| |#2|)) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| (|Integer|))) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| |#2|)) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| (|Integer|))) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.")) (|retractIfCan| (((|Union| $ "failed") (|Polynomial| |#2|)) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| |#2|)) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| (|Integer|))) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| |#2|)) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| (|Integer|))) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.")) (|initiallyReduce| (($ $ $) "\\axiom{initiallyReduce(a,{}\\spad{b})} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{initiallyReduced?(\\spad{r},{}\\spad{b})} holds and there exists an integer \\axiom{\\spad{e}} such that \\axiom{init(\\spad{b})^e a - \\spad{r}} is zero modulo \\axiom{\\spad{b}}.")) (|headReduce| (($ $ $) "\\axiom{headReduce(a,{}\\spad{b})} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{headReduced?(\\spad{r},{}\\spad{b})} holds and there exists an integer \\axiom{\\spad{e}} such that \\axiom{init(\\spad{b})^e a - \\spad{r}} is zero modulo \\axiom{\\spad{b}}.")) (|lazyResidueClass| (((|Record| (|:| |polnum| $) (|:| |polden| $) (|:| |power| (|NonNegativeInteger|))) $ $) "\\axiom{lazyResidueClass(a,{}\\spad{b})} returns \\axiom{[\\spad{p},{}\\spad{q},{}\\spad{n}]} where \\axiom{\\spad{p} / q**n} represents the residue class of \\axiom{a} modulo \\axiom{\\spad{b}} and \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} and \\axiom{\\spad{q}} is \\axiom{init(\\spad{b})}.")) (|monicModulo| (($ $ $) "\\axiom{monicModulo(a,{}\\spad{b})} computes \\axiom{a mod \\spad{b}},{} if \\axiom{\\spad{b}} is monic as univariate polynomial in its main variable.")) (|pseudoDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\axiom{pseudoDivide(a,{}\\spad{b})} computes \\axiom{[pquo(a,{}\\spad{b}),{}prem(a,{}\\spad{b})]},{} both polynomials viewed as univariate polynomials in the main variable of \\axiom{\\spad{b}},{} if \\axiom{\\spad{b}} is not a constant polynomial.")) (|lazyPseudoDivide| (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $ |#4|) "\\axiom{lazyPseudoDivide(a,{}\\spad{b},{}\\spad{v})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]} such that \\axiom{\\spad{r} = lazyPrem(a,{}\\spad{b},{}\\spad{v})},{} \\axiom{(c**g)*r = prem(a,{}\\spad{b},{}\\spad{v})} and \\axiom{\\spad{q}} is the pseudo-quotient computed in this lazy pseudo-division.") (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\axiom{lazyPseudoDivide(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]} such that \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{r}] = lazyPremWithDefault(a,{}\\spad{b})} and \\axiom{\\spad{q}} is the pseudo-quotient computed in this lazy pseudo-division.")) (|lazyPremWithDefault| (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |remainder| $)) $ $ |#4|) "\\axiom{lazyPremWithDefault(a,{}\\spad{b},{}\\spad{v})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{r}]} such that \\axiom{\\spad{r} = lazyPrem(a,{}\\spad{b},{}\\spad{v})} and \\axiom{(c**g)*r = prem(a,{}\\spad{b},{}\\spad{v})}.") (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |remainder| $)) $ $) "\\axiom{lazyPremWithDefault(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{r}]} such that \\axiom{\\spad{r} = lazyPrem(a,{}\\spad{b})} and \\axiom{(c**g)*r = prem(a,{}\\spad{b})}.")) (|lazyPquo| (($ $ $ |#4|) "\\axiom{lazyPquo(a,{}\\spad{b},{}\\spad{v})} returns the polynomial \\axiom{\\spad{q}} such that \\axiom{lazyPseudoDivide(a,{}\\spad{b},{}\\spad{v})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]}.") (($ $ $) "\\axiom{lazyPquo(a,{}\\spad{b})} returns the polynomial \\axiom{\\spad{q}} such that \\axiom{lazyPseudoDivide(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]}.")) (|lazyPrem| (($ $ $ |#4|) "\\axiom{lazyPrem(a,{}\\spad{b},{}\\spad{v})} returns the polynomial \\axiom{\\spad{r}} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} viewed as univariate polynomials in the variable \\axiom{\\spad{v}} such that \\axiom{\\spad{b}} divides \\axiom{init(\\spad{b})^e a - \\spad{r}} where \\axiom{\\spad{e}} is the number of steps of this pseudo-division.") (($ $ $) "\\axiom{lazyPrem(a,{}\\spad{b})} returns the polynomial \\axiom{\\spad{r}} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} and such that \\axiom{\\spad{b}} divides \\axiom{init(\\spad{b})^e a - \\spad{r}} where \\axiom{\\spad{e}} is the number of steps of this pseudo-division.")) (|pquo| (($ $ $ |#4|) "\\axiom{pquo(a,{}\\spad{b},{}\\spad{v})} computes the pseudo-quotient of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in \\axiom{\\spad{v}}.") (($ $ $) "\\axiom{pquo(a,{}\\spad{b})} computes the pseudo-quotient of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in the main variable of \\axiom{\\spad{b}}.")) (|prem| (($ $ $ |#4|) "\\axiom{prem(a,{}\\spad{b},{}\\spad{v})} computes the pseudo-remainder of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in \\axiom{\\spad{v}}.") (($ $ $) "\\axiom{prem(a,{}\\spad{b})} computes the pseudo-remainder of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in the main variable of \\axiom{\\spad{b}}.")) (|normalized?| (((|Boolean|) $ (|List| $)) "\\axiom{normalized?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{normalized?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{normalized?(a,{}\\spad{b})} returns \\spad{true} iff \\axiom{a} and its iterated initials have degree zero \\spad{w}.\\spad{r}.\\spad{t}. the main variable of \\axiom{\\spad{b}}")) (|initiallyReduced?| (((|Boolean|) $ (|List| $)) "\\axiom{initiallyReduced?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{initiallyReduced?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{initiallyReduced?(a,{}\\spad{b})} returns \\spad{false} iff there exists an iterated initial of \\axiom{a} which is not reduced \\spad{w}.\\spad{r}.\\spad{t} \\axiom{\\spad{b}}.")) (|headReduced?| (((|Boolean|) $ (|List| $)) "\\axiom{headReduced?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{headReduced?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{headReduced?(a,{}\\spad{b})} returns \\spad{true} iff \\axiom{degree(head(a),{}mvar(\\spad{b})) < mdeg(\\spad{b})}.")) (|reduced?| (((|Boolean|) $ (|List| $)) "\\axiom{reduced?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{reduced?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{reduced?(a,{}\\spad{b})} returns \\spad{true} iff \\axiom{degree(a,{}mvar(\\spad{b})) < mdeg(\\spad{b})}.")) (|supRittWu?| (((|Boolean|) $ $) "\\axiom{supRittWu?(a,{}\\spad{b})} returns \\spad{true} if \\axiom{a} is greater than \\axiom{\\spad{b}} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.")) (|infRittWu?| (((|Boolean|) $ $) "\\axiom{infRittWu?(a,{}\\spad{b})} returns \\spad{true} if \\axiom{a} is less than \\axiom{\\spad{b}} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.")) (|RittWuCompare| (((|Union| (|Boolean|) "failed") $ $) "\\axiom{RittWuCompare(a,{}\\spad{b})} returns \\axiom{\"failed\"} if \\axiom{a} and \\axiom{\\spad{b}} have same rank \\spad{w}.\\spad{r}.\\spad{t}. Ritt and Wu Wen Tsun ordering using the refinement of Lazard,{} otherwise returns \\axiom{infRittWu?(a,{}\\spad{b})}.")) (|mainMonomials| (((|List| $) $) "\\axiom{mainMonomials(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns [1],{} otherwise returns the list of the monomials of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|mainCoefficients| (((|List| $) $) "\\axiom{mainCoefficients(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns [\\spad{p}],{} otherwise returns the list of the coefficients of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|leastMonomial| (($ $) "\\axiom{leastMonomial(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns \\axiom{1},{} otherwise,{} the monomial of \\axiom{\\spad{p}} with lowest degree,{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|mainMonomial| (($ $) "\\axiom{mainMonomial(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns \\axiom{1},{} otherwise,{} \\axiom{mvar(\\spad{p})} raised to the power \\axiom{mdeg(\\spad{p})}.")) (|quasiMonic?| (((|Boolean|) $) "\\axiom{quasiMonic?(\\spad{p})} returns \\spad{false} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns \\spad{true} iff the initial of \\axiom{\\spad{p}} lies in the base ring \\axiom{\\spad{R}}.")) (|monic?| (((|Boolean|) $) "\\axiom{monic?(\\spad{p})} returns \\spad{false} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns \\spad{true} iff \\axiom{\\spad{p}} is monic as a univariate polynomial in its main variable.")) (|reductum| (($ $ |#4|) "\\axiom{reductum(\\spad{p},{}\\spad{v})} returns the reductum of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in \\axiom{\\spad{v}}.")) (|leadingCoefficient| (($ $ |#4|) "\\axiom{leadingCoefficient(\\spad{p},{}\\spad{v})} returns the leading coefficient of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as A univariate polynomial in \\axiom{\\spad{v}}.")) (|deepestInitial| (($ $) "\\axiom{deepestInitial(\\spad{p})} returns an error if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns the last term of \\axiom{iteratedInitials(\\spad{p})}.")) (|iteratedInitials| (((|List| $) $) "\\axiom{iteratedInitials(\\spad{p})} returns \\axiom{[]} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns the list of the iterated initials of \\axiom{\\spad{p}}.")) (|deepestTail| (($ $) "\\axiom{deepestTail(\\spad{p})} returns \\axiom{0} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns tail(\\spad{p}),{} if \\axiom{tail(\\spad{p})} belongs to \\axiom{\\spad{R}} or \\axiom{mvar(tail(\\spad{p})) < mvar(\\spad{p})},{} otherwise returns \\axiom{deepestTail(tail(\\spad{p}))}.")) (|tail| (($ $) "\\axiom{tail(\\spad{p})} returns its reductum,{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|head| (($ $) "\\axiom{head(\\spad{p})} returns \\axiom{\\spad{p}} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns its leading term (monomial in the AXIOM sense),{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|init| (($ $) "\\axiom{init(\\spad{p})} returns an error if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns its leading coefficient,{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|mdeg| (((|NonNegativeInteger|) $) "\\axiom{mdeg(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{0},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns \\axiom{0},{} otherwise,{} returns the degree of \\axiom{\\spad{p}} in its main variable.")) (|mvar| ((|#4| $) "\\axiom{mvar(\\spad{p})} returns an error if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in \\axiom{\\spad{V}}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (|HasCategory| |#2| (QUOTE (-483))) (|HasCategory| |#2| (QUOTE (-38 (-484)))) (|HasCategory| |#2| (QUOTE (-904 (-484)))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#4| (QUOTE (-553 (-1089))))) 
(-977 R E V) 
((|constructor| (NIL "A category for general multi-variate polynomials with coefficients in a ring,{} variables in an ordered set,{} and exponents from an ordered abelian monoid,{} with a \\axiomOp{sup} operation. When not constant,{} such a polynomial is viewed as a univariate polynomial in its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in the ordered set,{} so that some operations usually defined for univariate polynomials make sense here.")) (|mainSquareFreePart| (($ $) "\\axiom{mainSquareFreePart(\\spad{p})} returns the square free part of \\axiom{\\spad{p}} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\axiom{\\spad{R}}.")) (|mainPrimitivePart| (($ $) "\\axiom{mainPrimitivePart(\\spad{p})} returns the primitive part of \\axiom{\\spad{p}} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\axiom{\\spad{R}}.")) (|mainContent| (($ $) "\\axiom{mainContent(\\spad{p})} returns the content of \\axiom{\\spad{p}} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\axiom{\\spad{R}}.")) (|primitivePart!| (($ $) "\\axiom{primitivePart!(\\spad{p})} replaces \\axiom{\\spad{p}} by its primitive part.")) (|gcd| ((|#1| |#1| $) "\\axiom{gcd(\\spad{r},{}\\spad{p})} returns the gcd of \\axiom{\\spad{r}} and the content of \\axiom{\\spad{p}}.")) (|nextsubResultant2| (($ $ $ $ $) "\\axiom{\\spad{nextsubResultant2}(\\spad{p},{}\\spad{q},{}\\spad{z},{}\\spad{s})} is the multivariate version of the operation \\axiomOpFrom{\\spad{next_sousResultant2}}{PseudoRemainderSequence} from the \\axiomType{PseudoRemainderSequence} constructor.")) (|LazardQuotient2| (($ $ $ $ (|NonNegativeInteger|)) "\\axiom{\\spad{LazardQuotient2}(\\spad{p},{}a,{}\\spad{b},{}\\spad{n})} returns \\axiom{(a**(\\spad{n}-1) * \\spad{p}) exquo b**(\\spad{n}-1)} assuming that this quotient does not fail.")) (|LazardQuotient| (($ $ $ (|NonNegativeInteger|)) "\\axiom{LazardQuotient(a,{}\\spad{b},{}\\spad{n})} returns \\axiom{a**n exquo b**(\\spad{n}-1)} assuming that this quotient does not fail.")) (|lastSubResultant| (($ $ $) "\\axiom{lastSubResultant(a,{}\\spad{b})} returns the last non-zero subresultant of \\axiom{a} and \\axiom{\\spad{b}} where \\axiom{a} and \\axiom{\\spad{b}} are assumed to have the same main variable \\axiom{\\spad{v}} and are viewed as univariate polynomials in \\axiom{\\spad{v}}.")) (|subResultantChain| (((|List| $) $ $) "\\axiom{subResultantChain(a,{}\\spad{b})},{} where \\axiom{a} and \\axiom{\\spad{b}} are not contant polynomials with the same main variable,{} returns the subresultant chain of \\axiom{a} and \\axiom{\\spad{b}}.")) (|resultant| (($ $ $) "\\axiom{resultant(a,{}\\spad{b})} computes the resultant of \\axiom{a} and \\axiom{\\spad{b}} where \\axiom{a} and \\axiom{\\spad{b}} are assumed to have the same main variable \\axiom{\\spad{v}} and are viewed as univariate polynomials in \\axiom{\\spad{v}}.")) (|halfExtendedSubResultantGcd2| (((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $) "\\axiom{\\spad{halfExtendedSubResultantGcd2}(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}cb]} if \\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{}cb]} otherwise produces an error.")) (|halfExtendedSubResultantGcd1| (((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $) "\\axiom{\\spad{halfExtendedSubResultantGcd1}(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca]} if \\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[\\spad{g},{}ca,{}cb]} otherwise produces an error.")) (|extendedSubResultantGcd| (((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $) "\\axiom{extendedSubResultantGcd(a,{}\\spad{b})} returns \\axiom{[ca,{}cb,{}\\spad{r}]} such that \\axiom{\\spad{r}} is \\axiom{subResultantGcd(a,{}\\spad{b})} and we have \\axiom{ca * a + cb * cb = \\spad{r}} .")) (|subResultantGcd| (($ $ $) "\\axiom{subResultantGcd(a,{}\\spad{b})} computes a gcd of \\axiom{a} and \\axiom{\\spad{b}} where \\axiom{a} and \\axiom{\\spad{b}} are assumed to have the same main variable \\axiom{\\spad{v}} and are viewed as univariate polynomials in \\axiom{\\spad{v}} with coefficients in the fraction field of the polynomial ring generated by their other variables over \\axiom{\\spad{R}}.")) (|exactQuotient!| (($ $ $) "\\axiom{exactQuotient!(a,{}\\spad{b})} replaces \\axiom{a} by \\axiom{exactQuotient(a,{}\\spad{b})}") (($ $ |#1|) "\\axiom{exactQuotient!(\\spad{p},{}\\spad{r})} replaces \\axiom{\\spad{p}} by \\axiom{exactQuotient(\\spad{p},{}\\spad{r})}.")) (|exactQuotient| (($ $ $) "\\axiom{exactQuotient(a,{}\\spad{b})} computes the exact quotient of \\axiom{a} by \\axiom{\\spad{b}},{} which is assumed to be a divisor of \\axiom{a}. No error is returned if this exact quotient fails!") (($ $ |#1|) "\\axiom{exactQuotient(\\spad{p},{}\\spad{r})} computes the exact quotient of \\axiom{\\spad{p}} by \\axiom{\\spad{r}},{} which is assumed to be a divisor of \\axiom{\\spad{p}}. No error is returned if this exact quotient fails!")) (|primPartElseUnitCanonical!| (($ $) "\\axiom{primPartElseUnitCanonical!(\\spad{p})} replaces \\axiom{\\spad{p}} by \\axiom{primPartElseUnitCanonical(\\spad{p})}.")) (|primPartElseUnitCanonical| (($ $) "\\axiom{primPartElseUnitCanonical(\\spad{p})} returns \\axiom{primitivePart(\\spad{p})} if \\axiom{\\spad{R}} is a gcd-domain,{} otherwise \\axiom{unitCanonical(\\spad{p})}.")) (|convert| (($ (|Polynomial| |#1|)) "\\axiom{convert(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}},{} otherwise an error is produced.") (($ (|Polynomial| (|Integer|))) "\\axiom{convert(\\spad{p})} returns the same as \\axiom{retract(\\spad{p})}.") (($ (|Polynomial| (|Integer|))) "\\axiom{convert(\\spad{p})} returns the same as \\axiom{retract(\\spad{p})}") (($ (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{convert(\\spad{p})} returns the same as \\axiom{retract(\\spad{p})}.")) (|retract| (($ (|Polynomial| |#1|)) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| |#1|)) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| (|Integer|))) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| |#1|)) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| (|Integer|))) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.") (($ (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{retract(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if \\axiom{retractIfCan(\\spad{p})} does not return \"failed\",{} otherwise an error is produced.")) (|retractIfCan| (((|Union| $ "failed") (|Polynomial| |#1|)) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| |#1|)) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| (|Integer|))) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| |#1|)) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| (|Integer|))) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.") (((|Union| $ "failed") (|Polynomial| (|Fraction| (|Integer|)))) "\\axiom{retractIfCan(\\spad{p})} returns \\axiom{\\spad{p}} as an element of the current domain if all its variables belong to \\axiom{\\spad{V}}.")) (|initiallyReduce| (($ $ $) "\\axiom{initiallyReduce(a,{}\\spad{b})} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{initiallyReduced?(\\spad{r},{}\\spad{b})} holds and there exists an integer \\axiom{\\spad{e}} such that \\axiom{init(\\spad{b})^e a - \\spad{r}} is zero modulo \\axiom{\\spad{b}}.")) (|headReduce| (($ $ $) "\\axiom{headReduce(a,{}\\spad{b})} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{headReduced?(\\spad{r},{}\\spad{b})} holds and there exists an integer \\axiom{\\spad{e}} such that \\axiom{init(\\spad{b})^e a - \\spad{r}} is zero modulo \\axiom{\\spad{b}}.")) (|lazyResidueClass| (((|Record| (|:| |polnum| $) (|:| |polden| $) (|:| |power| (|NonNegativeInteger|))) $ $) "\\axiom{lazyResidueClass(a,{}\\spad{b})} returns \\axiom{[\\spad{p},{}\\spad{q},{}\\spad{n}]} where \\axiom{\\spad{p} / q**n} represents the residue class of \\axiom{a} modulo \\axiom{\\spad{b}} and \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} and \\axiom{\\spad{q}} is \\axiom{init(\\spad{b})}.")) (|monicModulo| (($ $ $) "\\axiom{monicModulo(a,{}\\spad{b})} computes \\axiom{a mod \\spad{b}},{} if \\axiom{\\spad{b}} is monic as univariate polynomial in its main variable.")) (|pseudoDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\axiom{pseudoDivide(a,{}\\spad{b})} computes \\axiom{[pquo(a,{}\\spad{b}),{}prem(a,{}\\spad{b})]},{} both polynomials viewed as univariate polynomials in the main variable of \\axiom{\\spad{b}},{} if \\axiom{\\spad{b}} is not a constant polynomial.")) (|lazyPseudoDivide| (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $ |#3|) "\\axiom{lazyPseudoDivide(a,{}\\spad{b},{}\\spad{v})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]} such that \\axiom{\\spad{r} = lazyPrem(a,{}\\spad{b},{}\\spad{v})},{} \\axiom{(c**g)*r = prem(a,{}\\spad{b},{}\\spad{v})} and \\axiom{\\spad{q}} is the pseudo-quotient computed in this lazy pseudo-division.") (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\axiom{lazyPseudoDivide(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]} such that \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{r}] = lazyPremWithDefault(a,{}\\spad{b})} and \\axiom{\\spad{q}} is the pseudo-quotient computed in this lazy pseudo-division.")) (|lazyPremWithDefault| (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |remainder| $)) $ $ |#3|) "\\axiom{lazyPremWithDefault(a,{}\\spad{b},{}\\spad{v})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{r}]} such that \\axiom{\\spad{r} = lazyPrem(a,{}\\spad{b},{}\\spad{v})} and \\axiom{(c**g)*r = prem(a,{}\\spad{b},{}\\spad{v})}.") (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|)) (|:| |remainder| $)) $ $) "\\axiom{lazyPremWithDefault(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{r}]} such that \\axiom{\\spad{r} = lazyPrem(a,{}\\spad{b})} and \\axiom{(c**g)*r = prem(a,{}\\spad{b})}.")) (|lazyPquo| (($ $ $ |#3|) "\\axiom{lazyPquo(a,{}\\spad{b},{}\\spad{v})} returns the polynomial \\axiom{\\spad{q}} such that \\axiom{lazyPseudoDivide(a,{}\\spad{b},{}\\spad{v})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]}.") (($ $ $) "\\axiom{lazyPquo(a,{}\\spad{b})} returns the polynomial \\axiom{\\spad{q}} such that \\axiom{lazyPseudoDivide(a,{}\\spad{b})} returns \\axiom{[\\spad{c},{}\\spad{g},{}\\spad{q},{}\\spad{r}]}.")) (|lazyPrem| (($ $ $ |#3|) "\\axiom{lazyPrem(a,{}\\spad{b},{}\\spad{v})} returns the polynomial \\axiom{\\spad{r}} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} viewed as univariate polynomials in the variable \\axiom{\\spad{v}} such that \\axiom{\\spad{b}} divides \\axiom{init(\\spad{b})^e a - \\spad{r}} where \\axiom{\\spad{e}} is the number of steps of this pseudo-division.") (($ $ $) "\\axiom{lazyPrem(a,{}\\spad{b})} returns the polynomial \\axiom{\\spad{r}} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{\\spad{b}} and such that \\axiom{\\spad{b}} divides \\axiom{init(\\spad{b})^e a - \\spad{r}} where \\axiom{\\spad{e}} is the number of steps of this pseudo-division.")) (|pquo| (($ $ $ |#3|) "\\axiom{pquo(a,{}\\spad{b},{}\\spad{v})} computes the pseudo-quotient of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in \\axiom{\\spad{v}}.") (($ $ $) "\\axiom{pquo(a,{}\\spad{b})} computes the pseudo-quotient of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in the main variable of \\axiom{\\spad{b}}.")) (|prem| (($ $ $ |#3|) "\\axiom{prem(a,{}\\spad{b},{}\\spad{v})} computes the pseudo-remainder of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in \\axiom{\\spad{v}}.") (($ $ $) "\\axiom{prem(a,{}\\spad{b})} computes the pseudo-remainder of \\axiom{a} by \\axiom{\\spad{b}},{} both viewed as univariate polynomials in the main variable of \\axiom{\\spad{b}}.")) (|normalized?| (((|Boolean|) $ (|List| $)) "\\axiom{normalized?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{normalized?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{normalized?(a,{}\\spad{b})} returns \\spad{true} iff \\axiom{a} and its iterated initials have degree zero \\spad{w}.\\spad{r}.\\spad{t}. the main variable of \\axiom{\\spad{b}}")) (|initiallyReduced?| (((|Boolean|) $ (|List| $)) "\\axiom{initiallyReduced?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{initiallyReduced?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{initiallyReduced?(a,{}\\spad{b})} returns \\spad{false} iff there exists an iterated initial of \\axiom{a} which is not reduced \\spad{w}.\\spad{r}.\\spad{t} \\axiom{\\spad{b}}.")) (|headReduced?| (((|Boolean|) $ (|List| $)) "\\axiom{headReduced?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{headReduced?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{headReduced?(a,{}\\spad{b})} returns \\spad{true} iff \\axiom{degree(head(a),{}mvar(\\spad{b})) < mdeg(\\spad{b})}.")) (|reduced?| (((|Boolean|) $ (|List| $)) "\\axiom{reduced?(\\spad{q},{}lp)} returns \\spad{true} iff \\axiom{reduced?(\\spad{q},{}\\spad{p})} holds for every \\axiom{\\spad{p}} in \\axiom{lp}.") (((|Boolean|) $ $) "\\axiom{reduced?(a,{}\\spad{b})} returns \\spad{true} iff \\axiom{degree(a,{}mvar(\\spad{b})) < mdeg(\\spad{b})}.")) (|supRittWu?| (((|Boolean|) $ $) "\\axiom{supRittWu?(a,{}\\spad{b})} returns \\spad{true} if \\axiom{a} is greater than \\axiom{\\spad{b}} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.")) (|infRittWu?| (((|Boolean|) $ $) "\\axiom{infRittWu?(a,{}\\spad{b})} returns \\spad{true} if \\axiom{a} is less than \\axiom{\\spad{b}} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard.")) (|RittWuCompare| (((|Union| (|Boolean|) "failed") $ $) "\\axiom{RittWuCompare(a,{}\\spad{b})} returns \\axiom{\"failed\"} if \\axiom{a} and \\axiom{\\spad{b}} have same rank \\spad{w}.\\spad{r}.\\spad{t}. Ritt and Wu Wen Tsun ordering using the refinement of Lazard,{} otherwise returns \\axiom{infRittWu?(a,{}\\spad{b})}.")) (|mainMonomials| (((|List| $) $) "\\axiom{mainMonomials(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns [1],{} otherwise returns the list of the monomials of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|mainCoefficients| (((|List| $) $) "\\axiom{mainCoefficients(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns [\\spad{p}],{} otherwise returns the list of the coefficients of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|leastMonomial| (($ $) "\\axiom{leastMonomial(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns \\axiom{1},{} otherwise,{} the monomial of \\axiom{\\spad{p}} with lowest degree,{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|mainMonomial| (($ $) "\\axiom{mainMonomial(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{\\spad{O}},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns \\axiom{1},{} otherwise,{} \\axiom{mvar(\\spad{p})} raised to the power \\axiom{mdeg(\\spad{p})}.")) (|quasiMonic?| (((|Boolean|) $) "\\axiom{quasiMonic?(\\spad{p})} returns \\spad{false} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns \\spad{true} iff the initial of \\axiom{\\spad{p}} lies in the base ring \\axiom{\\spad{R}}.")) (|monic?| (((|Boolean|) $) "\\axiom{monic?(\\spad{p})} returns \\spad{false} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns \\spad{true} iff \\axiom{\\spad{p}} is monic as a univariate polynomial in its main variable.")) (|reductum| (($ $ |#3|) "\\axiom{reductum(\\spad{p},{}\\spad{v})} returns the reductum of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in \\axiom{\\spad{v}}.")) (|leadingCoefficient| (($ $ |#3|) "\\axiom{leadingCoefficient(\\spad{p},{}\\spad{v})} returns the leading coefficient of \\axiom{\\spad{p}},{} where \\axiom{\\spad{p}} is viewed as A univariate polynomial in \\axiom{\\spad{v}}.")) (|deepestInitial| (($ $) "\\axiom{deepestInitial(\\spad{p})} returns an error if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns the last term of \\axiom{iteratedInitials(\\spad{p})}.")) (|iteratedInitials| (((|List| $) $) "\\axiom{iteratedInitials(\\spad{p})} returns \\axiom{[]} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns the list of the iterated initials of \\axiom{\\spad{p}}.")) (|deepestTail| (($ $) "\\axiom{deepestTail(\\spad{p})} returns \\axiom{0} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns tail(\\spad{p}),{} if \\axiom{tail(\\spad{p})} belongs to \\axiom{\\spad{R}} or \\axiom{mvar(tail(\\spad{p})) < mvar(\\spad{p})},{} otherwise returns \\axiom{deepestTail(tail(\\spad{p}))}.")) (|tail| (($ $) "\\axiom{tail(\\spad{p})} returns its reductum,{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|head| (($ $) "\\axiom{head(\\spad{p})} returns \\axiom{\\spad{p}} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns its leading term (monomial in the AXIOM sense),{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|init| (($ $) "\\axiom{init(\\spad{p})} returns an error if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns its leading coefficient,{} where \\axiom{\\spad{p}} is viewed as a univariate polynomial in its main variable.")) (|mdeg| (((|NonNegativeInteger|) $) "\\axiom{mdeg(\\spad{p})} returns an error if \\axiom{\\spad{p}} is \\axiom{0},{} otherwise,{} if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}} returns \\axiom{0},{} otherwise,{} returns the degree of \\axiom{\\spad{p}} in its main variable.")) (|mvar| ((|#3| $) "\\axiom{mvar(\\spad{p})} returns an error if \\axiom{\\spad{p}} belongs to \\axiom{\\spad{R}},{} otherwise returns its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in \\axiom{\\spad{V}}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-978) 
((|constructor| (NIL "This domain represents the `repeat' iterator syntax.")) (|body| (((|SpadAst|) $) "\\spad{body(e)} returns the body of the loop `e'.")) (|iterators| (((|List| (|SpadAst|)) $) "\\spad{iterators(e)} returns the list of iterators controlling the loop `e'."))) 
NIL 
NIL 
(-979 S |TheField| |ThePols|) 
((|constructor| (NIL "\\axiomType{RealRootCharacterizationCategory} provides common acces functions for all real root codings.")) (|relativeApprox| ((|#2| |#3| $ |#2|) "\\axiom{approximate(term,{}root,{}prec)} gives an approximation of \\axiom{term} over \\axiom{root} with precision \\axiom{prec}")) (|approximate| ((|#2| |#3| $ |#2|) "\\axiom{approximate(term,{}root,{}prec)} gives an approximation of \\axiom{term} over \\axiom{root} with precision \\axiom{prec}")) (|rootOf| (((|Union| $ "failed") |#3| (|PositiveInteger|)) "\\axiom{rootOf(pol,{}\\spad{n})} gives the \\spad{n}th root for the order of the Real Closure")) (|allRootsOf| (((|List| $) |#3|) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} in the Real Closure,{} assumed in order.")) (|definingPolynomial| ((|#3| $) "\\axiom{definingPolynomial(aRoot)} gives a polynomial such that \\axiom{definingPolynomial(aRoot).aRoot = 0}")) (|recip| (((|Union| |#3| "failed") |#3| $) "\\axiom{recip(pol,{}aRoot)} tries to inverse \\axiom{pol} interpreted as \\axiom{aRoot}")) (|positive?| (((|Boolean|) |#3| $) "\\axiom{positive?(pol,{}aRoot)} answers if \\axiom{pol} interpreted as \\axiom{aRoot} is positive")) (|negative?| (((|Boolean|) |#3| $) "\\axiom{negative?(pol,{}aRoot)} answers if \\axiom{pol} interpreted as \\axiom{aRoot} is negative")) (|zero?| (((|Boolean|) |#3| $) "\\axiom{zero?(pol,{}aRoot)} answers if \\axiom{pol} interpreted as \\axiom{aRoot} is \\axiom{0}")) (|sign| (((|Integer|) |#3| $) "\\axiom{sign(pol,{}aRoot)} gives the sign of \\axiom{pol} interpreted as \\axiom{aRoot}"))) 
NIL 
NIL 
(-980 |TheField| |ThePols|) 
((|constructor| (NIL "\\axiomType{RealRootCharacterizationCategory} provides common acces functions for all real root codings.")) (|relativeApprox| ((|#1| |#2| $ |#1|) "\\axiom{approximate(term,{}root,{}prec)} gives an approximation of \\axiom{term} over \\axiom{root} with precision \\axiom{prec}")) (|approximate| ((|#1| |#2| $ |#1|) "\\axiom{approximate(term,{}root,{}prec)} gives an approximation of \\axiom{term} over \\axiom{root} with precision \\axiom{prec}")) (|rootOf| (((|Union| $ "failed") |#2| (|PositiveInteger|)) "\\axiom{rootOf(pol,{}\\spad{n})} gives the \\spad{n}th root for the order of the Real Closure")) (|allRootsOf| (((|List| $) |#2|) "\\axiom{allRootsOf(pol)} creates all the roots of \\axiom{pol} in the Real Closure,{} assumed in order.")) (|definingPolynomial| ((|#2| $) "\\axiom{definingPolynomial(aRoot)} gives a polynomial such that \\axiom{definingPolynomial(aRoot).aRoot = 0}")) (|recip| (((|Union| |#2| "failed") |#2| $) "\\axiom{recip(pol,{}aRoot)} tries to inverse \\axiom{pol} interpreted as \\axiom{aRoot}")) (|positive?| (((|Boolean|) |#2| $) "\\axiom{positive?(pol,{}aRoot)} answers if \\axiom{pol} interpreted as \\axiom{aRoot} is positive")) (|negative?| (((|Boolean|) |#2| $) "\\axiom{negative?(pol,{}aRoot)} answers if \\axiom{pol} interpreted as \\axiom{aRoot} is negative")) (|zero?| (((|Boolean|) |#2| $) "\\axiom{zero?(pol,{}aRoot)} answers if \\axiom{pol} interpreted as \\axiom{aRoot} is \\axiom{0}")) (|sign| (((|Integer|) |#2| $) "\\axiom{sign(pol,{}aRoot)} gives the sign of \\axiom{pol} interpreted as \\axiom{aRoot}"))) 
NIL 
NIL 
(-981 R E V P TS) 
((|constructor| (NIL "A package providing a new algorithm for solving polynomial systems by means of regular chains. Two ways of solving are proposed: in the sense of Zariski closure (like in Kalkbrener's algorithm) or in the sense of the regular zeros (like in Wu,{} Wang or Lazard methods). This algorithm is valid for nay type of regular set. It does not care about the way a polynomial is added in an regular set,{} or how two quasi-components are compared (by an inclusion-test),{} or how the invertibility test is made in the tower of simple extensions associated with a regular set. These operations are realized respectively by the domain \\spad{TS} and the packages \\axiomType{QCMPACK}(\\spad{R},{}\\spad{E},{}\\spad{V},{}\\spad{P},{}TS) and \\axiomType{RSETGCD}(\\spad{R},{}\\spad{E},{}\\spad{V},{}\\spad{P},{}TS). The same way it does not care about the way univariate polynomial gcd (with coefficients in the tower of simple extensions associated with a regular set) are computed. The only requirement is that these gcd need to have invertible initials (normalized or not). WARNING. There is no need for a user to call diectly any operation of this package since they can be accessed by the domain \\axiom{TS}. Thus,{} the operations of this package are not documented.\\newline References : \\indented{1}{[1] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}"))) 
NIL 
NIL 
(-982 S R E V P) 
((|constructor| (NIL "The category of regular triangular sets,{} introduced under the name regular chains in [1] (and other papers). In [3] it is proved that regular triangular sets and towers of simple extensions of a field are equivalent notions. In the following definitions,{} all polynomials and ideals are taken from the polynomial ring \\spad{k[x1,...,xn]} where \\spad{k} is the fraction field of \\spad{R}. The triangular set \\spad{[t1,...,tm]} is regular iff for every \\spad{i} the initial of \\spad{ti+1} is invertible in the tower of simple extensions associated with \\spad{[t1,...,ti]}. A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Kalkbrener of a given ideal \\spad{I} iff the radical of \\spad{I} is equal to the intersection of the radical ideals generated by the saturated ideals of the \\spad{[T1,...,Ti]}. A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Kalkbrener of a given triangular set \\spad{T} iff it is a split of Kalkbrener of the saturated ideal of \\spad{T}. Let \\spad{K} be an algebraic closure of \\spad{k}. Assume that \\spad{V} is finite with cardinality \\spad{n} and let \\spad{A} be the affine space \\spad{K^n}. For a regular triangular set \\spad{T} let denote by \\spad{W(T)} the set of regular zeros of \\spad{T}. A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Lazard of a given subset \\spad{S} of \\spad{A} iff the union of the \\spad{W(Ti)} contains \\spad{S} and is contained in the closure of \\spad{S} (\\spad{w}.\\spad{r}.\\spad{t}. Zariski topology). A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Lazard of a given triangular set \\spad{T} if it is a split of Lazard of \\spad{W(T)}. Note that if \\spad{[T1,...,Ts]} is a split of Lazard of \\spad{T} then it is also a split of Kalkbrener of \\spad{T}. The converse is \\spad{false}. This category provides operations related to both kinds of splits,{} the former being related to ideals decomposition whereas the latter deals with varieties decomposition. See the example illustrating the \\spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets. \\newline References : \\indented{1}{[1] \\spad{M}. KALKBRENER \"Three contributions to elimination theory\"} \\indented{5}{Phd Thesis,{} University of Linz,{} Austria,{} 1991.} \\indented{1}{[2] \\spad{M}. KALKBRENER \"Algorithmic properties of polynomial rings\"} \\indented{5}{Journal of Symbol. Comp. 1998} \\indented{1}{[3] \\spad{P}. AUBRY,{} \\spad{D}. LAZARD and \\spad{M}. MORENO MAZA \"On the Theories} \\indented{5}{of Triangular Sets\" Journal of Symbol. Comp. (to appear)} \\indented{1}{[4] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|zeroSetSplit| (((|List| $) (|List| |#5|) (|Boolean|)) "\\spad{zeroSetSplit(lp,clos?)} returns \\spad{lts} a split of Kalkbrener of the radical ideal associated with \\spad{lp}. If \\spad{clos?} is \\spad{false},{} it is also a decomposition of the variety associated with \\spad{lp} into the regular zero set of the \\spad{ts} in \\spad{lts} (or,{} in other words,{} a split of Lazard of this variety). See the example illustrating the \\spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets.")) (|extend| (((|List| $) (|List| |#5|) (|List| $)) "\\spad{extend(lp,lts)} returns the same as \\spad{concat([extend(lp,ts) for ts in lts])|}") (((|List| $) (|List| |#5|) $) "\\spad{extend(lp,ts)} returns \\spad{ts} if \\spad{empty? lp} \\spad{extend(p,ts)} if \\spad{lp = [p]} else \\spad{extend(first lp, extend(rest lp, ts))}") (((|List| $) |#5| (|List| $)) "\\spad{extend(p,lts)} returns the same as \\spad{concat([extend(p,ts) for ts in lts])|}") (((|List| $) |#5| $) "\\spad{extend(p,ts)} assumes that \\spad{p} is a non-constant polynomial whose main variable is greater than any variable of \\spad{ts}. Then it returns a split of Kalkbrener of \\spad{ts+p}. This may not be \\spad{ts+p} itself,{} if for instance \\spad{ts+p} is not a regular triangular set.")) (|internalAugment| (($ (|List| |#5|) $) "\\spad{internalAugment(lp,ts)} returns \\spad{ts} if \\spad{lp} is empty otherwise returns \\spad{internalAugment(rest lp, internalAugment(first lp, ts))}") (($ |#5| $) "\\spad{internalAugment(p,ts)} assumes that \\spad{augment(p,ts)} returns a singleton and returns it.")) (|augment| (((|List| $) (|List| |#5|) (|List| $)) "\\spad{augment(lp,lts)} returns the same as \\spad{concat([augment(lp,ts) for ts in lts])}") (((|List| $) (|List| |#5|) $) "\\spad{augment(lp,ts)} returns \\spad{ts} if \\spad{empty? lp},{} \\spad{augment(p,ts)} if \\spad{lp = [p]},{} otherwise \\spad{augment(first lp, augment(rest lp, ts))}") (((|List| $) |#5| (|List| $)) "\\spad{augment(p,lts)} returns the same as \\spad{concat([augment(p,ts) for ts in lts])}") (((|List| $) |#5| $) "\\spad{augment(p,ts)} assumes that \\spad{p} is a non-constant polynomial whose main variable is greater than any variable of \\spad{ts}. This operation assumes also that if \\spad{p} is added to \\spad{ts} the resulting set,{} say \\spad{ts+p},{} is a regular triangular set. Then it returns a split of Kalkbrener of \\spad{ts+p}. This may not be \\spad{ts+p} itself,{} if for instance \\spad{ts+p} is required to be square-free.")) (|intersect| (((|List| $) |#5| (|List| $)) "\\spad{intersect(p,lts)} returns the same as \\spad{intersect([p],lts)}") (((|List| $) (|List| |#5|) (|List| $)) "\\spad{intersect(lp,lts)} returns the same as \\spad{concat([intersect(lp,ts) for ts in lts])|}") (((|List| $) (|List| |#5|) $) "\\spad{intersect(lp,ts)} returns \\spad{lts} a split of Lazard of the intersection of the affine variety associated with \\spad{lp} and the regular zero set of \\spad{ts}.") (((|List| $) |#5| $) "\\spad{intersect(p,ts)} returns the same as \\spad{intersect([p],ts)}")) (|squareFreePart| (((|List| (|Record| (|:| |val| |#5|) (|:| |tower| $))) |#5| $) "\\spad{squareFreePart(p,ts)} returns \\spad{lpwt} such that \\spad{lpwt.i.val} is a square-free polynomial \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower},{} this polynomial being associated with \\spad{p} modulo \\spad{lpwt.i.tower},{} for every \\spad{i}. Moreover,{} the list of the \\spad{lpwt.i.tower} is a split of Kalkbrener of \\spad{ts}. WARNING: This assumes that \\spad{p} is a non-constant polynomial such that if \\spad{p} is added to \\spad{ts},{} then the resulting set is a regular triangular set.")) (|lastSubResultant| (((|List| (|Record| (|:| |val| |#5|) (|:| |tower| $))) |#5| |#5| $) "\\spad{lastSubResultant(p1,p2,ts)} returns \\spad{lpwt} such that \\spad{lpwt.i.val} is a quasi-monic gcd of \\spad{p1} and \\spad{p2} \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower},{} for every \\spad{i},{} and such that the list of the \\spad{lpwt.i.tower} is a split of Kalkbrener of \\spad{ts}. Moreover,{} if \\spad{p1} and \\spad{p2} do not have a non-trivial gcd \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower} then \\spad{lpwt.i.val} is the resultant of these polynomials \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower}. This assumes that \\spad{p1} and \\spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \\spad{ts}.")) (|lastSubResultantElseSplit| (((|Union| |#5| (|List| $)) |#5| |#5| $) "\\spad{lastSubResultantElseSplit(p1,p2,ts)} returns either \\spad{g} a quasi-monic gcd of \\spad{p1} and \\spad{p2} \\spad{w}.\\spad{r}.\\spad{t}. the \\spad{ts} or a split of Kalkbrener of \\spad{ts}. This assumes that \\spad{p1} and \\spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \\spad{ts}.")) (|invertibleSet| (((|List| $) |#5| $) "\\spad{invertibleSet(p,ts)} returns a split of Kalkbrener of the quotient ideal of the ideal \\axiom{\\spad{I}} by \\spad{p} where \\spad{I} is the radical of saturated of \\spad{ts}.")) (|invertible?| (((|Boolean|) |#5| $) "\\spad{invertible?(p,ts)} returns \\spad{true} iff \\spad{p} is invertible in the tower associated with \\spad{ts}.") (((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| $))) |#5| $) "\\spad{invertible?(p,ts)} returns \\spad{lbwt} where \\spad{lbwt.i} is the result of \\spad{invertibleElseSplit?(p,lbwt.i.tower)} and the list of the \\spad{(lqrwt.i).tower} is a split of Kalkbrener of \\spad{ts}.")) (|invertibleElseSplit?| (((|Union| (|Boolean|) (|List| $)) |#5| $) "\\spad{invertibleElseSplit?(p,ts)} returns \\spad{true} (resp. \\spad{false}) if \\spad{p} is invertible in the tower associated with \\spad{ts} or returns a split of Kalkbrener of \\spad{ts}.")) (|purelyAlgebraicLeadingMonomial?| (((|Boolean|) |#5| $) "\\spad{purelyAlgebraicLeadingMonomial?(p,ts)} returns \\spad{true} iff the main variable of any non-constant iterarted initial of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}.")) (|algebraicCoefficients?| (((|Boolean|) |#5| $) "\\spad{algebraicCoefficients?(p,ts)} returns \\spad{true} iff every variable of \\spad{p} which is not the main one of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}.")) (|purelyTranscendental?| (((|Boolean|) |#5| $) "\\spad{purelyTranscendental?(p,ts)} returns \\spad{true} iff every variable of \\spad{p} is not algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}")) (|purelyAlgebraic?| (((|Boolean|) $) "\\spad{purelyAlgebraic?(ts)} returns \\spad{true} iff for every algebraic variable \\spad{v} of \\spad{ts} we have \\spad{algebraicCoefficients?(t_v,ts_v_-)} where \\spad{ts_v} is \\axiomOpFrom{select}{TriangularSetCategory}(\\spad{ts},{}\\spad{v}) and \\spad{ts_v_-} is \\axiomOpFrom{collectUnder}{TriangularSetCategory}(\\spad{ts},{}\\spad{v}).") (((|Boolean|) |#5| $) "\\spad{purelyAlgebraic?(p,ts)} returns \\spad{true} iff every variable of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}."))) 
NIL 
NIL 
(-983 R E V P) 
((|constructor| (NIL "The category of regular triangular sets,{} introduced under the name regular chains in [1] (and other papers). In [3] it is proved that regular triangular sets and towers of simple extensions of a field are equivalent notions. In the following definitions,{} all polynomials and ideals are taken from the polynomial ring \\spad{k[x1,...,xn]} where \\spad{k} is the fraction field of \\spad{R}. The triangular set \\spad{[t1,...,tm]} is regular iff for every \\spad{i} the initial of \\spad{ti+1} is invertible in the tower of simple extensions associated with \\spad{[t1,...,ti]}. A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Kalkbrener of a given ideal \\spad{I} iff the radical of \\spad{I} is equal to the intersection of the radical ideals generated by the saturated ideals of the \\spad{[T1,...,Ti]}. A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Kalkbrener of a given triangular set \\spad{T} iff it is a split of Kalkbrener of the saturated ideal of \\spad{T}. Let \\spad{K} be an algebraic closure of \\spad{k}. Assume that \\spad{V} is finite with cardinality \\spad{n} and let \\spad{A} be the affine space \\spad{K^n}. For a regular triangular set \\spad{T} let denote by \\spad{W(T)} the set of regular zeros of \\spad{T}. A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Lazard of a given subset \\spad{S} of \\spad{A} iff the union of the \\spad{W(Ti)} contains \\spad{S} and is contained in the closure of \\spad{S} (\\spad{w}.\\spad{r}.\\spad{t}. Zariski topology). A family \\spad{[T1,...,Ts]} of regular triangular sets is a split of Lazard of a given triangular set \\spad{T} if it is a split of Lazard of \\spad{W(T)}. Note that if \\spad{[T1,...,Ts]} is a split of Lazard of \\spad{T} then it is also a split of Kalkbrener of \\spad{T}. The converse is \\spad{false}. This category provides operations related to both kinds of splits,{} the former being related to ideals decomposition whereas the latter deals with varieties decomposition. See the example illustrating the \\spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets. \\newline References : \\indented{1}{[1] \\spad{M}. KALKBRENER \"Three contributions to elimination theory\"} \\indented{5}{Phd Thesis,{} University of Linz,{} Austria,{} 1991.} \\indented{1}{[2] \\spad{M}. KALKBRENER \"Algorithmic properties of polynomial rings\"} \\indented{5}{Journal of Symbol. Comp. 1998} \\indented{1}{[3] \\spad{P}. AUBRY,{} \\spad{D}. LAZARD and \\spad{M}. MORENO MAZA \"On the Theories} \\indented{5}{of Triangular Sets\" Journal of Symbol. Comp. (to appear)} \\indented{1}{[4] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|zeroSetSplit| (((|List| $) (|List| |#4|) (|Boolean|)) "\\spad{zeroSetSplit(lp,clos?)} returns \\spad{lts} a split of Kalkbrener of the radical ideal associated with \\spad{lp}. If \\spad{clos?} is \\spad{false},{} it is also a decomposition of the variety associated with \\spad{lp} into the regular zero set of the \\spad{ts} in \\spad{lts} (or,{} in other words,{} a split of Lazard of this variety). See the example illustrating the \\spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets.")) (|extend| (((|List| $) (|List| |#4|) (|List| $)) "\\spad{extend(lp,lts)} returns the same as \\spad{concat([extend(lp,ts) for ts in lts])|}") (((|List| $) (|List| |#4|) $) "\\spad{extend(lp,ts)} returns \\spad{ts} if \\spad{empty? lp} \\spad{extend(p,ts)} if \\spad{lp = [p]} else \\spad{extend(first lp, extend(rest lp, ts))}") (((|List| $) |#4| (|List| $)) "\\spad{extend(p,lts)} returns the same as \\spad{concat([extend(p,ts) for ts in lts])|}") (((|List| $) |#4| $) "\\spad{extend(p,ts)} assumes that \\spad{p} is a non-constant polynomial whose main variable is greater than any variable of \\spad{ts}. Then it returns a split of Kalkbrener of \\spad{ts+p}. This may not be \\spad{ts+p} itself,{} if for instance \\spad{ts+p} is not a regular triangular set.")) (|internalAugment| (($ (|List| |#4|) $) "\\spad{internalAugment(lp,ts)} returns \\spad{ts} if \\spad{lp} is empty otherwise returns \\spad{internalAugment(rest lp, internalAugment(first lp, ts))}") (($ |#4| $) "\\spad{internalAugment(p,ts)} assumes that \\spad{augment(p,ts)} returns a singleton and returns it.")) (|augment| (((|List| $) (|List| |#4|) (|List| $)) "\\spad{augment(lp,lts)} returns the same as \\spad{concat([augment(lp,ts) for ts in lts])}") (((|List| $) (|List| |#4|) $) "\\spad{augment(lp,ts)} returns \\spad{ts} if \\spad{empty? lp},{} \\spad{augment(p,ts)} if \\spad{lp = [p]},{} otherwise \\spad{augment(first lp, augment(rest lp, ts))}") (((|List| $) |#4| (|List| $)) "\\spad{augment(p,lts)} returns the same as \\spad{concat([augment(p,ts) for ts in lts])}") (((|List| $) |#4| $) "\\spad{augment(p,ts)} assumes that \\spad{p} is a non-constant polynomial whose main variable is greater than any variable of \\spad{ts}. This operation assumes also that if \\spad{p} is added to \\spad{ts} the resulting set,{} say \\spad{ts+p},{} is a regular triangular set. Then it returns a split of Kalkbrener of \\spad{ts+p}. This may not be \\spad{ts+p} itself,{} if for instance \\spad{ts+p} is required to be square-free.")) (|intersect| (((|List| $) |#4| (|List| $)) "\\spad{intersect(p,lts)} returns the same as \\spad{intersect([p],lts)}") (((|List| $) (|List| |#4|) (|List| $)) "\\spad{intersect(lp,lts)} returns the same as \\spad{concat([intersect(lp,ts) for ts in lts])|}") (((|List| $) (|List| |#4|) $) "\\spad{intersect(lp,ts)} returns \\spad{lts} a split of Lazard of the intersection of the affine variety associated with \\spad{lp} and the regular zero set of \\spad{ts}.") (((|List| $) |#4| $) "\\spad{intersect(p,ts)} returns the same as \\spad{intersect([p],ts)}")) (|squareFreePart| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| $))) |#4| $) "\\spad{squareFreePart(p,ts)} returns \\spad{lpwt} such that \\spad{lpwt.i.val} is a square-free polynomial \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower},{} this polynomial being associated with \\spad{p} modulo \\spad{lpwt.i.tower},{} for every \\spad{i}. Moreover,{} the list of the \\spad{lpwt.i.tower} is a split of Kalkbrener of \\spad{ts}. WARNING: This assumes that \\spad{p} is a non-constant polynomial such that if \\spad{p} is added to \\spad{ts},{} then the resulting set is a regular triangular set.")) (|lastSubResultant| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| $))) |#4| |#4| $) "\\spad{lastSubResultant(p1,p2,ts)} returns \\spad{lpwt} such that \\spad{lpwt.i.val} is a quasi-monic gcd of \\spad{p1} and \\spad{p2} \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower},{} for every \\spad{i},{} and such that the list of the \\spad{lpwt.i.tower} is a split of Kalkbrener of \\spad{ts}. Moreover,{} if \\spad{p1} and \\spad{p2} do not have a non-trivial gcd \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower} then \\spad{lpwt.i.val} is the resultant of these polynomials \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower}. This assumes that \\spad{p1} and \\spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \\spad{ts}.")) (|lastSubResultantElseSplit| (((|Union| |#4| (|List| $)) |#4| |#4| $) "\\spad{lastSubResultantElseSplit(p1,p2,ts)} returns either \\spad{g} a quasi-monic gcd of \\spad{p1} and \\spad{p2} \\spad{w}.\\spad{r}.\\spad{t}. the \\spad{ts} or a split of Kalkbrener of \\spad{ts}. This assumes that \\spad{p1} and \\spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \\spad{ts}.")) (|invertibleSet| (((|List| $) |#4| $) "\\spad{invertibleSet(p,ts)} returns a split of Kalkbrener of the quotient ideal of the ideal \\axiom{\\spad{I}} by \\spad{p} where \\spad{I} is the radical of saturated of \\spad{ts}.")) (|invertible?| (((|Boolean|) |#4| $) "\\spad{invertible?(p,ts)} returns \\spad{true} iff \\spad{p} is invertible in the tower associated with \\spad{ts}.") (((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| $))) |#4| $) "\\spad{invertible?(p,ts)} returns \\spad{lbwt} where \\spad{lbwt.i} is the result of \\spad{invertibleElseSplit?(p,lbwt.i.tower)} and the list of the \\spad{(lqrwt.i).tower} is a split of Kalkbrener of \\spad{ts}.")) (|invertibleElseSplit?| (((|Union| (|Boolean|) (|List| $)) |#4| $) "\\spad{invertibleElseSplit?(p,ts)} returns \\spad{true} (resp. \\spad{false}) if \\spad{p} is invertible in the tower associated with \\spad{ts} or returns a split of Kalkbrener of \\spad{ts}.")) (|purelyAlgebraicLeadingMonomial?| (((|Boolean|) |#4| $) "\\spad{purelyAlgebraicLeadingMonomial?(p,ts)} returns \\spad{true} iff the main variable of any non-constant iterarted initial of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}.")) (|algebraicCoefficients?| (((|Boolean|) |#4| $) "\\spad{algebraicCoefficients?(p,ts)} returns \\spad{true} iff every variable of \\spad{p} which is not the main one of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}.")) (|purelyTranscendental?| (((|Boolean|) |#4| $) "\\spad{purelyTranscendental?(p,ts)} returns \\spad{true} iff every variable of \\spad{p} is not algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}")) (|purelyAlgebraic?| (((|Boolean|) $) "\\spad{purelyAlgebraic?(ts)} returns \\spad{true} iff for every algebraic variable \\spad{v} of \\spad{ts} we have \\spad{algebraicCoefficients?(t_v,ts_v_-)} where \\spad{ts_v} is \\axiomOpFrom{select}{TriangularSetCategory}(\\spad{ts},{}\\spad{v}) and \\spad{ts_v_-} is \\axiomOpFrom{collectUnder}{TriangularSetCategory}(\\spad{ts},{}\\spad{v}).") (((|Boolean|) |#4| $) "\\spad{purelyAlgebraic?(p,ts)} returns \\spad{true} iff every variable of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-984 R E V P TS) 
((|constructor| (NIL "An internal package for computing gcds and resultants of univariate polynomials with coefficients in a tower of simple extensions of a field.\\newline References : \\indented{1}{[1] \\spad{M}. MORENO MAZA and \\spad{R}. RIOBOO \"Computations of gcd over} \\indented{5}{algebraic towers of simple extensions\" In proceedings of \\spad{AAECC11}} \\indented{5}{Paris,{} 1995.} \\indented{1}{[2] \\spad{M}. MORENO MAZA \"Calculs de pgcd au-dessus des tours} \\indented{5}{d'extensions simples et resolution des systemes d'equations} \\indented{5}{algebriques\" These,{} Universite \\spad{P}.etM. Curie,{} Paris,{} 1997.} \\indented{1}{[3] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|toseSquareFreePart| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| |#5|))) |#4| |#5|) "\\axiom{toseSquareFreePart(\\spad{p},{}ts)} has the same specifications as \\axiomOpFrom{squareFreePart}{RegularTriangularSetCategory}.")) (|toseInvertibleSet| (((|List| |#5|) |#4| |#5|) "\\axiom{toseInvertibleSet(\\spad{p1},{}\\spad{p2},{}ts)} has the same specifications as \\axiomOpFrom{invertibleSet}{RegularTriangularSetCategory}.")) (|toseInvertible?| (((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| |#5|))) |#4| |#5|) "\\axiom{toseInvertible?(\\spad{p1},{}\\spad{p2},{}ts)} has the same specifications as \\axiomOpFrom{invertible?}{RegularTriangularSetCategory}.") (((|Boolean|) |#4| |#5|) "\\axiom{toseInvertible?(\\spad{p1},{}\\spad{p2},{}ts)} has the same specifications as \\axiomOpFrom{invertible?}{RegularTriangularSetCategory}.")) (|toseLastSubResultant| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| |#5|))) |#4| |#4| |#5|) "\\axiom{toseLastSubResultant(\\spad{p1},{}\\spad{p2},{}ts)} has the same specifications as \\axiomOpFrom{lastSubResultant}{RegularTriangularSetCategory}.")) (|integralLastSubResultant| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| |#5|))) |#4| |#4| |#5|) "\\axiom{integralLastSubResultant(\\spad{p1},{}\\spad{p2},{}ts)} is an internal subroutine,{} exported only for developement.")) (|internalLastSubResultant| (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| |#5|))) (|List| (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|))) |#3| (|Boolean|)) "\\axiom{internalLastSubResultant(lpwt,{}\\spad{v},{}flag)} is an internal subroutine,{} exported only for developement.") (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| |#5|))) |#4| |#4| |#5| (|Boolean|) (|Boolean|)) "\\axiom{internalLastSubResultant(\\spad{p1},{}\\spad{p2},{}ts,{}inv?,{}break?)} is an internal subroutine,{} exported only for developement.")) (|prepareSubResAlgo| (((|List| (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|))) |#4| |#4| |#5|) "\\axiom{prepareSubResAlgo(\\spad{p1},{}\\spad{p2},{}ts)} is an internal subroutine,{} exported only for developement.")) (|stopTableInvSet!| (((|Void|)) "\\axiom{stopTableInvSet!()} is an internal subroutine,{} exported only for developement.")) (|startTableInvSet!| (((|Void|) (|String|) (|String|) (|String|)) "\\axiom{startTableInvSet!(\\spad{s1},{}\\spad{s2},{}\\spad{s3})} is an internal subroutine,{} exported only for developement.")) (|stopTableGcd!| (((|Void|)) "\\axiom{stopTableGcd!()} is an internal subroutine,{} exported only for developement.")) (|startTableGcd!| (((|Void|) (|String|) (|String|) (|String|)) "\\axiom{startTableGcd!(\\spad{s1},{}\\spad{s2},{}\\spad{s3})} is an internal subroutine,{} exported only for developement."))) 
NIL 
NIL 
(-985) 
((|constructor| (NIL "This domain represents `restrict' expressions.")) (|target| (((|TypeAst|) $) "\\spad{target(e)} returns the target type of the conversion..")) (|expression| (((|SpadAst|) $) "\\spad{expression(e)} returns the expression being converted."))) 
NIL 
NIL 
(-986) 
((|constructor| (NIL "This is the datatype of OpenAxiom runtime values. It exists solely for internal purposes.")) (|eq| (((|Boolean|) $ $) "\\spad{eq(x,y)} holds if both values \\spad{x} and \\spad{y} resides at the same address in memory."))) 
NIL 
NIL 
(-987 |Base| R -3092) 
((|constructor| (NIL "\\indented{1}{Rules for the pattern matcher} Author: Manuel Bronstein Date Created: 24 Oct 1988 Date Last Updated: 26 October 1993 Keywords: pattern,{} matching,{} rule.")) (|quotedOperators| (((|List| (|Symbol|)) $) "\\spad{quotedOperators(r)} returns the list of operators on the right hand side of \\spad{r} that are considered quoted,{} that is they are not evaluated during any rewrite,{} but just applied formally to their arguments.")) (|elt| ((|#3| $ |#3| (|PositiveInteger|)) "\\spad{elt(r,f,n)} or \\spad{r}(\\spad{f},{} \\spad{n}) applies the rule \\spad{r} to \\spad{f} at most \\spad{n} times.")) (|rhs| ((|#3| $) "\\spad{rhs(r)} returns the right hand side of the rule \\spad{r}.")) (|lhs| ((|#3| $) "\\spad{lhs(r)} returns the left hand side of the rule \\spad{r}.")) (|pattern| (((|Pattern| |#1|) $) "\\spad{pattern(r)} returns the pattern corresponding to the left hand side of the rule \\spad{r}.")) (|suchThat| (($ $ (|List| (|Symbol|)) (|Mapping| (|Boolean|) (|List| |#3|))) "\\spad{suchThat(r, [a1,...,an], f)} returns the rewrite rule \\spad{r} with the predicate \\spad{f(a1,...,an)} attached to it.")) (|rule| (($ |#3| |#3| (|List| (|Symbol|))) "\\spad{rule(f, g, [f1,...,fn])} creates the rewrite rule \\spad{f == eval(eval(g, g is f), [f1,...,fn])},{} that is a rule with left-hand side \\spad{f} and right-hand side \\spad{g}; The symbols \\spad{f1},{}...,{}fn are the operators that are considered quoted,{} that is they are not evaluated during any rewrite,{} but just applied formally to their arguments.") (($ |#3| |#3|) "\\spad{rule(f, g)} creates the rewrite rule: \\spad{f == eval(g, g is f)},{} with left-hand side \\spad{f} and right-hand side \\spad{g}."))) 
NIL 
NIL 
(-988 |f|) 
((|constructor| (NIL "This domain implements named rules")) (|name| (((|Symbol|) $) "\\spad{name(x)} returns the symbol"))) 
NIL 
NIL 
(-989 |Base| R -3092) 
((|constructor| (NIL "A ruleset is a set of pattern matching rules grouped together.")) (|elt| ((|#3| $ |#3| (|PositiveInteger|)) "\\spad{elt(r,f,n)} or \\spad{r}(\\spad{f},{} \\spad{n}) applies all the rules of \\spad{r} to \\spad{f} at most \\spad{n} times.")) (|rules| (((|List| (|RewriteRule| |#1| |#2| |#3|)) $) "\\spad{rules(r)} returns the rules contained in \\spad{r}.")) (|ruleset| (($ (|List| (|RewriteRule| |#1| |#2| |#3|))) "\\spad{ruleset([r1,...,rn])} creates the rule set \\spad{{r1,...,rn}}."))) 
NIL 
NIL 
(-990 R |ls|) 
((|constructor| (NIL "\\indented{1}{A package for computing the rational univariate representation} \\indented{1}{of a zero-dimensional algebraic variety given by a regular} \\indented{1}{triangular set. This package is essentially an interface for the} \\spadtype{InternalRationalUnivariateRepresentationPackage} constructor. It is used in the \\spadtype{ZeroDimensionalSolvePackage} for solving polynomial systems with finitely many solutions.")) (|rur| (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|)) "\\spad{rur(lp,univ?,check?)} returns the same as \\spad{rur(lp,true)}. Moreover,{} if \\spad{check?} is \\spad{true} then the result is checked.") (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|))) "\\spad{rur(lp)} returns the same as \\spad{rur(lp,true)}") (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|Boolean|)) "\\spad{rur(lp,univ?)} returns a rational univariate representation of \\spad{lp}. This assumes that \\spad{lp} defines a regular triangular \\spad{ts} whose associated variety is zero-dimensional over \\spad{R}. \\spad{rur(lp,univ?)} returns a list of items \\spad{[u,lc]} where \\spad{u} is an irreducible univariate polynomial and each \\spad{c} in \\spad{lc} involves two variables: one from \\spad{ls},{} called the coordinate of \\spad{c},{} and an extra variable which represents any root of \\spad{u}. Every root of \\spad{u} leads to a tuple of values for the coordinates of \\spad{lc}. Moreover,{} a point \\spad{x} belongs to the variety associated with \\spad{lp} iff there exists an item \\spad{[u,lc]} in \\spad{rur(lp,univ?)} and a root \\spad{r} of \\spad{u} such that \\spad{x} is given by the tuple of values for the coordinates of \\spad{lc} evaluated at \\spad{r}. If \\spad{univ?} is \\spad{true} then each polynomial \\spad{c} will have a constant leading coefficient \\spad{w}.\\spad{r}.\\spad{t}. its coordinate. See the example which illustrates the \\spadtype{ZeroDimensionalSolvePackage} package constructor."))) 
NIL 
NIL 
(-991 R UP M) 
((|constructor| (NIL "Domain which represents simple algebraic extensions of arbitrary rings. The first argument to the domain,{} \\spad{R},{} is the underlying ring,{} the second argument is a domain of univariate polynomials over \\spad{K},{} while the last argument specifies the defining minimal polynomial. The elements of the domain are canonically represented as polynomials of degree less than that of the minimal polynomial with coefficients in \\spad{R}. The second argument is both the type of the third argument and the underlying representation used by \\spadtype{SAE} itself."))) 
((-3987 |has| |#1| (-312)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-299))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-299)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-319))) (OR (-12 (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-299)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-312)))) (-12 (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-299)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-299))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-312)))) (|HasCategory| |#1| (QUOTE (-299)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-312)))) (-12 (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-312)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))))) 
(-992 UP SAE UPA) 
((|constructor| (NIL "Factorization of univariate polynomials with coefficients in an algebraic extension of the rational numbers (\\spadtype{Fraction Integer}).")) (|factor| (((|Factored| |#3|) |#3|) "\\spad{factor(p)} returns a prime factorisation of \\spad{p}."))) 
NIL 
NIL 
(-993 UP SAE UPA) 
((|constructor| (NIL "Factorization of univariate polynomials with coefficients in an algebraic extension of \\spadtype{Fraction Polynomial Integer}.")) (|factor| (((|Factored| |#3|) |#3|) "\\spad{factor(p)} returns a prime factorisation of \\spad{p}."))) 
NIL 
NIL 
(-994) 
((|constructor| (NIL "This trivial domain lets us build Univariate Polynomials in an anonymous variable"))) 
NIL 
NIL 
(-995) 
((|constructor| (NIL "This is the category of Spad syntax objects."))) 
NIL 
NIL 
(-996 S) 
((|constructor| (NIL "\\indented{1}{Cache of elements in a set} Author: Manuel Bronstein Date Created: 31 Oct 1988 Date Last Updated: 14 May 1991 \\indented{2}{A sorted cache of a cachable set \\spad{S} is a dynamic structure that} \\indented{2}{keeps the elements of \\spad{S} sorted and assigns an integer to each} \\indented{2}{element of \\spad{S} once it is in the cache. This way,{} equality and ordering} \\indented{2}{on \\spad{S} are tested directly on the integers associated with the elements} \\indented{2}{of \\spad{S},{} once they have been entered in the cache.}")) (|enterInCache| ((|#1| |#1| (|Mapping| (|Integer|) |#1| |#1|)) "\\spad{enterInCache(x, f)} enters \\spad{x} in the cache,{} calling \\spad{f(x, y)} to determine whether \\spad{x < y (f(x,y) < 0), x = y (f(x,y) = 0)},{} or \\spad{x > y (f(x,y) > 0)}. It returns \\spad{x} with an integer associated with it.") ((|#1| |#1| (|Mapping| (|Boolean|) |#1|)) "\\spad{enterInCache(x, f)} enters \\spad{x} in the cache,{} calling \\spad{f(y)} to determine whether \\spad{x} is equal to \\spad{y}. It returns \\spad{x} with an integer associated with it.")) (|cache| (((|List| |#1|)) "\\spad{cache()} returns the current cache as a list.")) (|clearCache| (((|Void|)) "\\spad{clearCache()} empties the cache."))) 
NIL 
NIL 
(-997) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: October 24,{} 2007 Date Last Modified: January 18,{} 2008. A `Scope' is a sequence of contours.")) (|currentCategoryFrame| (($) "\\spad{currentCategoryFrame()} returns the category frame currently in effect.")) (|currentScope| (($) "\\spad{currentScope()} returns the scope currently in effect")) (|pushNewContour| (($ (|Binding|) $) "\\spad{pushNewContour(b,s)} pushs a new contour with sole binding `b'.")) (|findBinding| (((|Maybe| (|Binding|)) (|Identifier|) $) "\\spad{findBinding(n,s)} returns the first binding of `n' in `s'; otherwise `nothing'.")) (|contours| (((|List| (|Contour|)) $) "\\spad{contours(s)} returns the list of contours in scope \\spad{s}.")) (|empty| (($) "\\spad{empty()} returns an empty scope."))) 
NIL 
NIL 
(-998 R) 
((|constructor| (NIL "StructuralConstantsPackage provides functions creating structural constants from a multiplication tables or a basis of a matrix algebra and other useful functions in this context.")) (|coordinates| (((|Vector| |#1|) (|Matrix| |#1|) (|List| (|Matrix| |#1|))) "\\spad{coordinates(a,[v1,...,vn])} returns the coordinates of \\spad{a} with respect to the \\spad{R}-module basis \\spad{v1},{}...,{}\\spad{vn}.")) (|structuralConstants| (((|Vector| (|Matrix| |#1|)) (|List| (|Matrix| |#1|))) "\\spad{structuralConstants(basis)} takes the \\spad{basis} of a matrix algebra,{} \\spadignore{e.g.} the result of \\spadfun{basisOfCentroid} and calculates the structural constants. Note,{} that the it is not checked,{} whether \\spad{basis} really is a \\spad{basis} of a matrix algebra.") (((|Vector| (|Matrix| (|Polynomial| |#1|))) (|List| (|Symbol|)) (|Matrix| (|Polynomial| |#1|))) "\\spad{structuralConstants(ls,mt)} determines the structural constants of an algebra with generators \\spad{ls} and multiplication table \\spad{mt},{} the entries of which must be given as linear polynomials in the indeterminates given by \\spad{ls}. The result is in particular useful \\indented{1}{as fourth argument for \\spadtype{AlgebraGivenByStructuralConstants}} \\indented{1}{and \\spadtype{GenericNonAssociativeAlgebra}.}") (((|Vector| (|Matrix| (|Fraction| (|Polynomial| |#1|)))) (|List| (|Symbol|)) (|Matrix| (|Fraction| (|Polynomial| |#1|)))) "\\spad{structuralConstants(ls,mt)} determines the structural constants of an algebra with generators \\spad{ls} and multiplication table \\spad{mt},{} the entries of which must be given as linear polynomials in the indeterminates given by \\spad{ls}. The result is in particular useful \\indented{1}{as fourth argument for \\spadtype{AlgebraGivenByStructuralConstants}} \\indented{1}{and \\spadtype{GenericNonAssociativeAlgebra}.}"))) 
NIL 
NIL 
(-999 R) 
((|constructor| (NIL "\\spadtype{SequentialDifferentialPolynomial} implements an ordinary differential polynomial ring in arbitrary number of differential indeterminates,{} with coefficients in a ring. The ranking on the differential indeterminate is sequential. \\blankline"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| (-1000 (-1089)) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| (-1000 (-1089)) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-1000 (-1089)) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-1000 (-1089)) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-1000 (-1089)) (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-190))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-1000 S) 
((|constructor| (NIL "\\spadtype{OrderlyDifferentialVariable} adds a commonly used sequential ranking to the set of derivatives of an ordered list of differential indeterminates. A sequential ranking is a ranking \\spadfun{<} of the derivatives with the property that for any derivative \\spad{v},{} there are only a finite number of derivatives \\spad{u} with \\spad{u} \\spadfun{<} \\spad{v}. This domain belongs to \\spadtype{DifferentialVariableCategory}. It defines \\spadfun{weight} to be just \\spadfun{order},{} and it defines a sequential ranking \\spadfun{<} on derivatives \\spad{u} by the lexicographic order on the pair (\\spadfun{variable}(\\spad{u}),{} \\spadfun{order}(\\spad{u}))."))) 
NIL 
NIL 
(-1001 S) 
((|constructor| (NIL "This type is used to specify a range of values from type \\spad{S}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-755))) (|HasCategory| |#1| (QUOTE (-1013)))) 
(-1002 R S) 
((|constructor| (NIL "This package provides operations for mapping functions onto segments.")) (|map| (((|List| |#2|) (|Mapping| |#2| |#1|) (|Segment| |#1|)) "\\spad{map(f,s)} expands the segment \\spad{s},{} applying \\spad{f} to each value. For example,{} if \\spad{s = l..h by k},{} then the list \\spad{[f(l), f(l+k),..., f(lN)]} is computed,{} where \\spad{lN <= h < lN+k}.") (((|Segment| |#2|) (|Mapping| |#2| |#1|) (|Segment| |#1|)) "\\spad{map(f,l..h)} returns a new segment \\spad{f(l)..f(h)}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-755)))) 
(-1003) 
((|constructor| (NIL "This domain represents segement expressions.")) (|bounds| (((|List| (|SpadAst|)) $) "\\spad{bounds(s)} returns the bounds of the segment `s'. If `s' designates an infinite interval,{} then the returns list a singleton list."))) 
NIL 
NIL 
(-1004 S) 
((|constructor| (NIL "This domain is used to provide the function argument syntax \\spad{v=a..b}. This is used,{} for example,{} by the top-level \\spadfun{draw} functions."))) 
NIL 
((|HasCategory| (-1001 |#1|) (QUOTE (-1013)))) 
(-1005 R S) 
((|constructor| (NIL "This package provides operations for mapping functions onto \\spadtype{SegmentBinding}\\spad{s}.")) (|map| (((|SegmentBinding| |#2|) (|Mapping| |#2| |#1|) (|SegmentBinding| |#1|)) "\\spad{map(f,v=a..b)} returns the value given by \\spad{v=f(a)..f(b)}."))) 
NIL 
NIL 
(-1006 S) 
((|constructor| (NIL "This category provides operations on ranges,{} or {\\em segments} as they are called.")) (|segment| (($ |#1| |#1|) "\\spad{segment(i,j)} is an alternate way to create the segment \\spad{i..j}.")) (|incr| (((|Integer|) $) "\\spad{incr(s)} returns \\spad{n},{} where \\spad{s} is a segment in which every \\spad{n}\\spad{-}th element is used. Note: \\spad{incr(l..h by n) = n}.")) (|high| ((|#1| $) "\\spad{high(s)} returns the second endpoint of \\spad{s}. Note: \\spad{high(l..h) = h}.")) (|low| ((|#1| $) "\\spad{low(s)} returns the first endpoint of \\spad{s}. Note: \\spad{low(l..h) = l}.")) (|hi| ((|#1| $) "\\spad{hi(s)} returns the second endpoint of \\spad{s}. Note: \\spad{hi(l..h) = h}.")) (|lo| ((|#1| $) "\\spad{lo(s)} returns the first endpoint of \\spad{s}. Note: \\spad{lo(l..h) = l}.")) (BY (($ $ (|Integer|)) "\\spad{s by n} creates a new segment in which only every \\spad{n}\\spad{-}th element is used.")) (SEGMENT (($ |#1| |#1|) "\\spad{l..h} creates a segment with \\spad{l} and \\spad{h} as the endpoints."))) 
NIL 
NIL 
(-1007 S L) 
((|constructor| (NIL "This category provides an interface for expanding segments to a stream of elements.")) (|map| ((|#2| (|Mapping| |#1| |#1|) $) "\\spad{map(f,l..h by k)} produces a value of type \\spad{L} by applying \\spad{f} to each of the succesive elements of the segment,{} that is,{} \\spad{[f(l), f(l+k), ..., f(lN)]},{} where \\spad{lN <= h < lN+k}.")) (|expand| ((|#2| $) "\\spad{expand(l..h by k)} creates value of type \\spad{L} with elements \\spad{l, l+k, ... lN} where \\spad{lN <= h < lN+k}. For example,{} \\spad{expand(1..5 by 2) = [1,3,5]}.") ((|#2| (|List| $)) "\\spad{expand(l)} creates a new value of type \\spad{L} in which each segment \\spad{l..h by k} is replaced with \\spad{l, l+k, ... lN},{} where \\spad{lN <= h < lN+k}. For example,{} \\spad{expand [1..4, 7..9] = [1,2,3,4,7,8,9]}."))) 
NIL 
NIL 
(-1008) 
((|constructor| (NIL "This domain represents a block of expressions.")) (|last| (((|SpadAst|) $) "\\spad{last(e)} returns the last instruction in `e'.")) (|body| (((|List| (|SpadAst|)) $) "\\spad{body(e)} returns the list of expressions in the sequence of instruction `e'."))) 
NIL 
NIL 
(-1009 S) 
((|constructor| (NIL "A set over a domain \\spad{D} models the usual mathematical notion of a finite set of elements from \\spad{D}. Sets are unordered collections of distinct elements (that is,{} order and duplication does not matter). The notation \\spad{set [a,b,c]} can be used to create a set and the usual operations such as union and intersection are available to form new sets. In our implementation,{} \\Language{} maintains the entries in sorted order. Specifically,{} the parts function returns the entries as a list in ascending order and the extract operation returns the maximum entry. Given two sets \\spad{s} and \\spad{t} where \\spad{\\#s = m} and \\spad{\\#t = n},{} the complexity of \\indented{2}{\\spad{s = t} is \\spad{O(min(n,m))}} \\indented{2}{\\spad{s < t} is \\spad{O(max(n,m))}} \\indented{2}{\\spad{union(s,t)},{} \\spad{intersect(s,t)},{} \\spad{minus(s,t)},{} \\spad{symmetricDifference(s,t)} is \\spad{O(max(n,m))}} \\indented{2}{\\spad{member(x,t)} is \\spad{O(n log n)}} \\indented{2}{\\spad{insert(x,t)} and \\spad{remove(x,t)} is \\spad{O(n)}}"))) 
((-3994 . T) (-3984 . T) (-3995 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#1| (QUOTE (-319))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-1010 A S) 
((|constructor| (NIL "A set category lists a collection of set-theoretic operations useful for both finite sets and multisets. Note however that finite sets are distinct from multisets. Although the operations defined for set categories are common to both,{} the relationship between the two cannot be described by inclusion or inheritance.")) (|union| (($ |#2| $) "\\spad{union(x,u)} returns the set aggregate \\spad{u} with the element \\spad{x} added. If \\spad{u} already contains \\spad{x},{} \\axiom{union(\\spad{x},{}\\spad{u})} returns a copy of \\spad{u}.") (($ $ |#2|) "\\spad{union(u,x)} returns the set aggregate \\spad{u} with the element \\spad{x} added. If \\spad{u} already contains \\spad{x},{} \\axiom{union(\\spad{u},{}\\spad{x})} returns a copy of \\spad{u}.") (($ $ $) "\\spad{union(u,v)} returns the set aggregate of elements which are members of either set aggregate \\spad{u} or \\spad{v}.")) (|subset?| (((|Boolean|) $ $) "\\spad{subset?(u,v)} tests if \\spad{u} is a subset of \\spad{v}. Note: equivalent to \\axiom{reduce(and,{}{member?(\\spad{x},{}\\spad{v}) for \\spad{x} in \\spad{u}},{}\\spad{true},{}\\spad{false})}.")) (|symmetricDifference| (($ $ $) "\\spad{symmetricDifference(u,v)} returns the set aggregate of elements \\spad{x} which are members of set aggregate \\spad{u} or set aggregate \\spad{v} but not both. If \\spad{u} and \\spad{v} have no elements in common,{} \\axiom{symmetricDifference(\\spad{u},{}\\spad{v})} returns a copy of \\spad{u}. Note: \\axiom{symmetricDifference(\\spad{u},{}\\spad{v}) = union(difference(\\spad{u},{}\\spad{v}),{}difference(\\spad{v},{}\\spad{u}))}")) (|difference| (($ $ |#2|) "\\spad{difference(u,x)} returns the set aggregate \\spad{u} with element \\spad{x} removed. If \\spad{u} does not contain \\spad{x},{} a copy of \\spad{u} is returned. Note: \\axiom{difference(\\spad{s},{} \\spad{x}) = difference(\\spad{s},{} {\\spad{x}})}.") (($ $ $) "\\spad{difference(u,v)} returns the set aggregate \\spad{w} consisting of elements in set aggregate \\spad{u} but not in set aggregate \\spad{v}. If \\spad{u} and \\spad{v} have no elements in common,{} \\axiom{difference(\\spad{u},{}\\spad{v})} returns a copy of \\spad{u}. Note: equivalent to the notation (not currently supported) \\axiom{{\\spad{x} for \\spad{x} in \\spad{u} | not member?(\\spad{x},{}\\spad{v})}}.")) (|intersect| (($ $ $) "\\spad{intersect(u,v)} returns the set aggregate \\spad{w} consisting of elements common to both set aggregates \\spad{u} and \\spad{v}. Note: equivalent to the notation (not currently supported) {\\spad{x} for \\spad{x} in \\spad{u} | member?(\\spad{x},{}\\spad{v})}.")) (|set| (($ (|List| |#2|)) "\\spad{set([x,y,...,z])} creates a set aggregate containing items \\spad{x},{}\\spad{y},{}...,{}\\spad{z}.") (($) "\\spad{set()}\\$\\spad{D} creates an empty set aggregate of type \\spad{D}.")) (|brace| (($ (|List| |#2|)) "\\spad{brace([x,y,...,z])} creates a set aggregate containing items \\spad{x},{}\\spad{y},{}...,{}\\spad{z}. This form is considered obsolete. Use \\axiomFun{set} instead.") (($) "\\spad{brace()}\\$\\spad{D} (otherwise written {}\\$\\spad{D}) creates an empty set aggregate of type \\spad{D}. This form is considered obsolete. Use \\axiomFun{set} instead.")) (|part?| (((|Boolean|) $ $) "\\spad{s} < \\spad{t} returns \\spad{true} if all elements of set aggregate \\spad{s} are also elements of set aggregate \\spad{t}."))) 
NIL 
NIL 
(-1011 S) 
((|constructor| (NIL "A set category lists a collection of set-theoretic operations useful for both finite sets and multisets. Note however that finite sets are distinct from multisets. Although the operations defined for set categories are common to both,{} the relationship between the two cannot be described by inclusion or inheritance.")) (|union| (($ |#1| $) "\\spad{union(x,u)} returns the set aggregate \\spad{u} with the element \\spad{x} added. If \\spad{u} already contains \\spad{x},{} \\axiom{union(\\spad{x},{}\\spad{u})} returns a copy of \\spad{u}.") (($ $ |#1|) "\\spad{union(u,x)} returns the set aggregate \\spad{u} with the element \\spad{x} added. If \\spad{u} already contains \\spad{x},{} \\axiom{union(\\spad{u},{}\\spad{x})} returns a copy of \\spad{u}.") (($ $ $) "\\spad{union(u,v)} returns the set aggregate of elements which are members of either set aggregate \\spad{u} or \\spad{v}.")) (|subset?| (((|Boolean|) $ $) "\\spad{subset?(u,v)} tests if \\spad{u} is a subset of \\spad{v}. Note: equivalent to \\axiom{reduce(and,{}{member?(\\spad{x},{}\\spad{v}) for \\spad{x} in \\spad{u}},{}\\spad{true},{}\\spad{false})}.")) (|symmetricDifference| (($ $ $) "\\spad{symmetricDifference(u,v)} returns the set aggregate of elements \\spad{x} which are members of set aggregate \\spad{u} or set aggregate \\spad{v} but not both. If \\spad{u} and \\spad{v} have no elements in common,{} \\axiom{symmetricDifference(\\spad{u},{}\\spad{v})} returns a copy of \\spad{u}. Note: \\axiom{symmetricDifference(\\spad{u},{}\\spad{v}) = union(difference(\\spad{u},{}\\spad{v}),{}difference(\\spad{v},{}\\spad{u}))}")) (|difference| (($ $ |#1|) "\\spad{difference(u,x)} returns the set aggregate \\spad{u} with element \\spad{x} removed. If \\spad{u} does not contain \\spad{x},{} a copy of \\spad{u} is returned. Note: \\axiom{difference(\\spad{s},{} \\spad{x}) = difference(\\spad{s},{} {\\spad{x}})}.") (($ $ $) "\\spad{difference(u,v)} returns the set aggregate \\spad{w} consisting of elements in set aggregate \\spad{u} but not in set aggregate \\spad{v}. If \\spad{u} and \\spad{v} have no elements in common,{} \\axiom{difference(\\spad{u},{}\\spad{v})} returns a copy of \\spad{u}. Note: equivalent to the notation (not currently supported) \\axiom{{\\spad{x} for \\spad{x} in \\spad{u} | not member?(\\spad{x},{}\\spad{v})}}.")) (|intersect| (($ $ $) "\\spad{intersect(u,v)} returns the set aggregate \\spad{w} consisting of elements common to both set aggregates \\spad{u} and \\spad{v}. Note: equivalent to the notation (not currently supported) {\\spad{x} for \\spad{x} in \\spad{u} | member?(\\spad{x},{}\\spad{v})}.")) (|set| (($ (|List| |#1|)) "\\spad{set([x,y,...,z])} creates a set aggregate containing items \\spad{x},{}\\spad{y},{}...,{}\\spad{z}.") (($) "\\spad{set()}\\$\\spad{D} creates an empty set aggregate of type \\spad{D}.")) (|brace| (($ (|List| |#1|)) "\\spad{brace([x,y,...,z])} creates a set aggregate containing items \\spad{x},{}\\spad{y},{}...,{}\\spad{z}. This form is considered obsolete. Use \\axiomFun{set} instead.") (($) "\\spad{brace()}\\$\\spad{D} (otherwise written {}\\$\\spad{D}) creates an empty set aggregate of type \\spad{D}. This form is considered obsolete. Use \\axiomFun{set} instead.")) (|part?| (((|Boolean|) $ $) "\\spad{s} < \\spad{t} returns \\spad{true} if all elements of set aggregate \\spad{s} are also elements of set aggregate \\spad{t}."))) 
((-3984 . T)) 
NIL 
(-1012 S) 
((|constructor| (NIL "\\spadtype{SetCategory} is the basic category for describing a collection of elements with \\spadop{=} (equality) and \\spadfun{coerce} to output form. \\blankline Conditional Attributes: \\indented{3}{canonical\\tab{15}data structure equality is the same as \\spadop{=}}")) (|latex| (((|String|) $) "\\spad{latex(s)} returns a LaTeX-printable output representation of \\spad{s}.")) (|hash| (((|SingleInteger|) $) "\\spad{hash(s)} calculates a hash code for \\spad{s}."))) 
NIL 
NIL 
(-1013) 
((|constructor| (NIL "\\spadtype{SetCategory} is the basic category for describing a collection of elements with \\spadop{=} (equality) and \\spadfun{coerce} to output form. \\blankline Conditional Attributes: \\indented{3}{canonical\\tab{15}data structure equality is the same as \\spadop{=}}")) (|latex| (((|String|) $) "\\spad{latex(s)} returns a LaTeX-printable output representation of \\spad{s}.")) (|hash| (((|SingleInteger|) $) "\\spad{hash(s)} calculates a hash code for \\spad{s}."))) 
NIL 
NIL 
(-1014 |m| |n|) 
((|constructor| (NIL "\\spadtype{SetOfMIntegersInOneToN} implements the subsets of \\spad{M} integers in the interval \\spad{[1..n]}")) (|delta| (((|NonNegativeInteger|) $ (|PositiveInteger|) (|PositiveInteger|)) "\\spad{delta(S,k,p)} returns the number of elements of \\spad{S} which are strictly between \\spad{p} and the k^{th} element of \\spad{S}.")) (|member?| (((|Boolean|) (|PositiveInteger|) $) "\\spad{member?(p, s)} returns \\spad{true} is \\spad{p} is in \\spad{s},{} \\spad{false} otherwise.")) (|enumerate| (((|Vector| $)) "\\spad{enumerate()} returns a vector of all the sets of \\spad{M} integers in \\spad{1..n}.")) (|setOfMinN| (($ (|List| (|PositiveInteger|))) "\\spad{setOfMinN([a_1,...,a_m])} returns the set {\\spad{a_1},{}...,{}a_m}. Error if {\\spad{a_1},{}...,{}a_m} is not a set of \\spad{M} integers in \\spad{1..n}.")) (|elements| (((|List| (|PositiveInteger|)) $) "\\spad{elements(S)} returns the list of the elements of \\spad{S} in increasing order.")) (|replaceKthElement| (((|Union| $ #1="failed") $ (|PositiveInteger|) (|PositiveInteger|)) "\\spad{replaceKthElement(S,k,p)} replaces the k^{th} element of \\spad{S} by \\spad{p},{} and returns \"failed\" if the result is not a set of \\spad{M} integers in \\spad{1..n} any more.")) (|incrementKthElement| (((|Union| $ #1#) $ (|PositiveInteger|)) "\\spad{incrementKthElement(S,k)} increments the k^{th} element of \\spad{S},{} and returns \"failed\" if the result is not a set of \\spad{M} integers in \\spad{1..n} any more."))) 
NIL 
NIL 
(-1015) 
((|constructor| (NIL "This domain allows the manipulation of the usual Lisp values."))) 
NIL 
NIL 
(-1016 |Str| |Sym| |Int| |Flt| |Expr|) 
((|constructor| (NIL "This category allows the manipulation of Lisp values while keeping the grunge fairly localized.")) (|#| (((|Integer|) $) "\\spad{\\#((a1,...,an))} returns \\spad{n}.")) (|cdr| (($ $) "\\spad{cdr((a1,...,an))} returns \\spad{(a2,...,an)}.")) (|car| (($ $) "\\spad{car((a1,...,an))} returns \\spad{a1}.")) (|expr| ((|#5| $) "\\spad{expr(s)} returns \\spad{s} as an element of Expr; Error: if \\spad{s} is not an atom that also belongs to Expr.")) (|float| ((|#4| $) "\\spad{float(s)} returns \\spad{s} as an element of Flt; Error: if \\spad{s} is not an atom that also belongs to Flt.")) (|integer| ((|#3| $) "\\spad{integer(s)} returns \\spad{s} as an element of Int. Error: if \\spad{s} is not an atom that also belongs to Int.")) (|symbol| ((|#2| $) "\\spad{symbol(s)} returns \\spad{s} as an element of Sym. Error: if \\spad{s} is not an atom that also belongs to Sym.")) (|string| ((|#1| $) "\\spad{string(s)} returns \\spad{s} as an element of Str. Error: if \\spad{s} is not an atom that also belongs to Str.")) (|destruct| (((|List| $) $) "\\spad{destruct((a1,...,an))} returns the list [\\spad{a1},{}...,{}an].")) (|float?| (((|Boolean|) $) "\\spad{float?(s)} is \\spad{true} if \\spad{s} is an atom and belong to Flt.")) (|integer?| (((|Boolean|) $) "\\spad{integer?(s)} is \\spad{true} if \\spad{s} is an atom and belong to Int.")) (|symbol?| (((|Boolean|) $) "\\spad{symbol?(s)} is \\spad{true} if \\spad{s} is an atom and belong to Sym.")) (|string?| (((|Boolean|) $) "\\spad{string?(s)} is \\spad{true} if \\spad{s} is an atom and belong to Str.")) (|list?| (((|Boolean|) $) "\\spad{list?(s)} is \\spad{true} if \\spad{s} is a Lisp list,{} possibly ().")) (|pair?| (((|Boolean|) $) "\\spad{pair?(s)} is \\spad{true} if \\spad{s} has is a non-null Lisp list.")) (|atom?| (((|Boolean|) $) "\\spad{atom?(s)} is \\spad{true} if \\spad{s} is a Lisp atom.")) (|null?| (((|Boolean|) $) "\\spad{null?(s)} is \\spad{true} if \\spad{s} is the \\spad{S}-expression ().")) (|eq| (((|Boolean|) $ $) "\\spad{eq(s, t)} is \\spad{true} if \\%peq(\\spad{s},{}\\spad{t}) is \\spad{true} for pointers."))) 
NIL 
NIL 
(-1017 |Str| |Sym| |Int| |Flt| |Expr|) 
((|constructor| (NIL "This domain allows the manipulation of Lisp values over arbitrary atomic types."))) 
NIL 
NIL 
(-1018 R E V P TS) 
((|constructor| (NIL "\\indented{2}{A internal package for removing redundant quasi-components and redundant} \\indented{2}{branches when decomposing a variety by means of quasi-components} \\indented{2}{of regular triangular sets. \\newline} References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991} \\indented{5}{Tech. Report (PoSSo project)} \\indented{1}{[2] \\spad{M}. MORENO MAZA \"Calculs de pgcd au-dessus des tours} \\indented{5}{d'extensions simples et resolution des systemes d'equations} \\indented{5}{algebriques\" These,{} Universite \\spad{P}.etM. Curie,{} Paris,{} 1997.} \\indented{1}{[3] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}")) (|branchIfCan| (((|Union| (|Record| (|:| |eq| (|List| |#4|)) (|:| |tower| |#5|) (|:| |ineq| (|List| |#4|))) "failed") (|List| |#4|) |#5| (|List| |#4|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{branchIfCan(leq,{}ts,{}lineq,{}\\spad{b1},{}\\spad{b2},{}\\spad{b3},{}\\spad{b4},{}\\spad{b5})} is an internal subroutine,{} exported only for developement.")) (|prepareDecompose| (((|List| (|Record| (|:| |eq| (|List| |#4|)) (|:| |tower| |#5|) (|:| |ineq| (|List| |#4|)))) (|List| |#4|) (|List| |#5|) (|Boolean|) (|Boolean|)) "\\axiom{prepareDecompose(lp,{}lts,{}\\spad{b1},{}\\spad{b2})} is an internal subroutine,{} exported only for developement.")) (|removeSuperfluousCases| (((|List| (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|))) (|List| (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|)))) "\\axiom{removeSuperfluousCases(llpwt)} is an internal subroutine,{} exported only for developement.")) (|subCase?| (((|Boolean|) (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|)) (|Record| (|:| |val| (|List| |#4|)) (|:| |tower| |#5|))) "\\axiom{subCase?(\\spad{lpwt1},{}\\spad{lpwt2})} is an internal subroutine,{} exported only for developement.")) (|removeSuperfluousQuasiComponents| (((|List| |#5|) (|List| |#5|)) "\\axiom{removeSuperfluousQuasiComponents(lts)} removes from \\axiom{lts} any \\spad{ts} such that \\axiom{subQuasiComponent?(ts,{}us)} holds for another \\spad{us} in \\axiom{lts}.")) (|subQuasiComponent?| (((|Boolean|) |#5| (|List| |#5|)) "\\axiom{subQuasiComponent?(ts,{}lus)} returns \\spad{true} iff \\axiom{subQuasiComponent?(ts,{}us)} holds for one \\spad{us} in \\spad{lus}.") (((|Boolean|) |#5| |#5|) "\\axiom{subQuasiComponent?(ts,{}us)} returns \\spad{true} iff \\axiomOpFrom{internalSubQuasiComponent?(ts,{}us)}{QuasiComponentPackage} returs \\spad{true}.")) (|internalSubQuasiComponent?| (((|Union| (|Boolean|) "failed") |#5| |#5|) "\\axiom{internalSubQuasiComponent?(ts,{}us)} returns a boolean \\spad{b} value if the fact the regular zero set of \\axiom{us} contains that of \\axiom{ts} can be decided (and in that case \\axiom{\\spad{b}} gives this inclusion) otherwise returns \\axiom{\"failed\"}.")) (|infRittWu?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{infRittWu?(\\spad{lp1},{}\\spad{lp2})} is an internal subroutine,{} exported only for developement.")) (|internalInfRittWu?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{internalInfRittWu?(\\spad{lp1},{}\\spad{lp2})} is an internal subroutine,{} exported only for developement.")) (|internalSubPolSet?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{internalSubPolSet?(\\spad{lp1},{}\\spad{lp2})} returns \\spad{true} iff \\axiom{\\spad{lp1}} is a sub-set of \\axiom{\\spad{lp2}} assuming that these lists are sorted increasingly \\spad{w}.\\spad{r}.\\spad{t}. \\axiomOpFrom{infRittWu?}{RecursivePolynomialCategory}.")) (|subPolSet?| (((|Boolean|) (|List| |#4|) (|List| |#4|)) "\\axiom{subPolSet?(\\spad{lp1},{}\\spad{lp2})} returns \\spad{true} iff \\axiom{\\spad{lp1}} is a sub-set of \\axiom{\\spad{lp2}}.")) (|subTriSet?| (((|Boolean|) |#5| |#5|) "\\axiom{subTriSet?(ts,{}us)} returns \\spad{true} iff \\axiom{ts} is a sub-set of \\axiom{us}.")) (|moreAlgebraic?| (((|Boolean|) |#5| |#5|) "\\axiom{moreAlgebraic?(ts,{}us)} returns \\spad{false} iff \\axiom{ts} and \\axiom{us} are both empty,{} or \\axiom{ts} has less elements than \\axiom{us},{} or some variable is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{us} and is not \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ts}.")) (|algebraicSort| (((|List| |#5|) (|List| |#5|)) "\\axiom{algebraicSort(lts)} sorts \\axiom{lts} \\spad{w}.\\spad{r}.\\spad{t} \\axiomOpFrom{supDimElseRittWu}{QuasiComponentPackage}.")) (|supDimElseRittWu?| (((|Boolean|) |#5| |#5|) "\\axiom{supDimElseRittWu(ts,{}us)} returns \\spad{true} iff \\axiom{ts} has less elements than \\axiom{us} otherwise if \\axiom{ts} has higher rank than \\axiom{us} \\spad{w}.\\spad{r}.\\spad{t}. Riit and Wu ordering.")) (|stopTable!| (((|Void|)) "\\axiom{stopTableGcd!()} is an internal subroutine,{} exported only for developement.")) (|startTable!| (((|Void|) (|String|) (|String|) (|String|)) "\\axiom{startTableGcd!(\\spad{s1},{}\\spad{s2},{}\\spad{s3})} is an internal subroutine,{} exported only for developement."))) 
NIL 
NIL 
(-1019 R E V P TS) 
((|constructor| (NIL "A internal package for computing gcds and resultants of univariate polynomials with coefficients in a tower of simple extensions of a field. There is no need to use directly this package since its main operations are available from \\spad{TS}. \\newline References : \\indented{1}{[1] \\spad{M}. MORENO MAZA and \\spad{R}. RIOBOO \"Computations of gcd over} \\indented{5}{algebraic towers of simple extensions\" In proceedings of \\spad{AAECC11}} \\indented{5}{Paris,{} 1995.} \\indented{1}{[2] \\spad{M}. MORENO MAZA \"Calculs de pgcd au-dessus des tours} \\indented{5}{d'extensions simples et resolution des systemes d'equations} \\indented{5}{algebriques\" These,{} Universite \\spad{P}.etM. Curie,{} Paris,{} 1997.} \\indented{1}{[3] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}"))) 
NIL 
NIL 
(-1020 R E V P) 
((|constructor| (NIL "The category of square-free regular triangular sets. A regular triangular set \\spad{ts} is square-free if the gcd of any polynomial \\spad{p} in \\spad{ts} and \\spad{differentiate(p,mvar(p))} \\spad{w}.\\spad{r}.\\spad{t}. \\axiomOpFrom{collectUnder}{TriangularSetCategory}(ts,{}\\axiomOpFrom{mvar}{RecursivePolynomialCategory}(\\spad{p})) has degree zero \\spad{w}.\\spad{r}.\\spad{t}. \\spad{mvar(p)}. Thus any square-free regular set defines a tower of square-free simple extensions.\\newline References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991} \\indented{1}{[2] \\spad{M}. KALKBRENER \"Algorithmic properties of polynomial rings\"} \\indented{5}{Habilitation Thesis,{} ETZH,{} Zurich,{} 1995.} \\indented{1}{[3] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}"))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-1021) 
((|constructor| (NIL "SymmetricGroupCombinatoricFunctions contains combinatoric functions concerning symmetric groups and representation theory: list young tableaus,{} improper partitions,{} subsets bijection of Coleman.")) (|unrankImproperPartitions1| (((|List| (|Integer|)) (|Integer|) (|Integer|) (|Integer|)) "\\spad{unrankImproperPartitions1(n,m,k)} computes the {\\em k}\\spad{-}th improper partition of nonnegative \\spad{n} in at most \\spad{m} nonnegative parts ordered as follows: first,{} in reverse lexicographically according to their non-zero parts,{} then according to their positions (\\spadignore{i.e.} lexicographical order using {\\em subSet}: {\\em [3,0,0] < [0,3,0] < [0,0,3] < [2,1,0] < [2,0,1] < [0,2,1] < [1,2,0] < [1,0,2] < [0,1,2] < [1,1,1]}). Note: counting of subtrees is done by {\\em numberOfImproperPartitionsInternal}.")) (|unrankImproperPartitions0| (((|List| (|Integer|)) (|Integer|) (|Integer|) (|Integer|)) "\\spad{unrankImproperPartitions0(n,m,k)} computes the {\\em k}\\spad{-}th improper partition of nonnegative \\spad{n} in \\spad{m} nonnegative parts in reverse lexicographical order. Example: {\\em [0,0,3] < [0,1,2] < [0,2,1] < [0,3,0] < [1,0,2] < [1,1,1] < [1,2,0] < [2,0,1] < [2,1,0] < [3,0,0]}. Error: if \\spad{k} is negative or too big. Note: counting of subtrees is done by \\spadfunFrom{numberOfImproperPartitions}{SymmetricGroupCombinatoricFunctions}.")) (|subSet| (((|List| (|Integer|)) (|Integer|) (|Integer|) (|Integer|)) "\\spad{subSet(n,m,k)} calculates the {\\em k}\\spad{-}th {\\em m}-subset of the set {\\em 0,1,...,(n-1)} in the lexicographic order considered as a decreasing map from {\\em 0,...,(m-1)} into {\\em 0,...,(n-1)}. See \\spad{S}.\\spad{G}. Williamson: Theorem 1.60. Error: if not {\\em (0 <= m <= n and 0 < = k < (n choose m))}.")) (|numberOfImproperPartitions| (((|Integer|) (|Integer|) (|Integer|)) "\\spad{numberOfImproperPartitions(n,m)} computes the number of partitions of the nonnegative integer \\spad{n} in \\spad{m} nonnegative parts with regarding the order (improper partitions). Example: {\\em numberOfImproperPartitions (3,3)} is 10,{} since {\\em [0,0,3], [0,1,2], [0,2,1], [0,3,0], [1,0,2], [1,1,1], [1,2,0], [2,0,1], [2,1,0], [3,0,0]} are the possibilities. Note: this operation has a recursive implementation.")) (|nextPartition| (((|Vector| (|Integer|)) (|List| (|Integer|)) (|Vector| (|Integer|)) (|Integer|)) "\\spad{nextPartition(gamma,part,number)} generates the partition of {\\em number} which follows {\\em part} according to the right-to-left lexicographical order. The partition has the property that its components do not exceed the corresponding components of {\\em gamma}. the first partition is achieved by {\\em part=[]}. Also,{} {\\em []} indicates that {\\em part} is the last partition.") (((|Vector| (|Integer|)) (|Vector| (|Integer|)) (|Vector| (|Integer|)) (|Integer|)) "\\spad{nextPartition(gamma,part,number)} generates the partition of {\\em number} which follows {\\em part} according to the right-to-left lexicographical order. The partition has the property that its components do not exceed the corresponding components of {\\em gamma}. The first partition is achieved by {\\em part=[]}. Also,{} {\\em []} indicates that {\\em part} is the last partition.")) (|nextLatticePermutation| (((|List| (|Integer|)) (|List| (|PositiveInteger|)) (|List| (|Integer|)) (|Boolean|)) "\\spad{nextLatticePermutation(lambda,lattP,constructNotFirst)} generates the lattice permutation according to the proper partition {\\em lambda} succeeding the lattice permutation {\\em lattP} in lexicographical order as long as {\\em constructNotFirst} is \\spad{true}. If {\\em constructNotFirst} is \\spad{false},{} the first lattice permutation is returned. The result {\\em nil} indicates that {\\em lattP} has no successor.")) (|nextColeman| (((|Matrix| (|Integer|)) (|List| (|Integer|)) (|List| (|Integer|)) (|Matrix| (|Integer|))) "\\spad{nextColeman(alpha,beta,C)} generates the next Coleman matrix of column sums {\\em alpha} and row sums {\\em beta} according to the lexicographical order from bottom-to-top. The first Coleman matrix is achieved by {\\em C=new(1,1,0)}. Also,{} {\\em new(1,1,0)} indicates that \\spad{C} is the last Coleman matrix.")) (|makeYoungTableau| (((|Matrix| (|Integer|)) (|List| (|PositiveInteger|)) (|List| (|Integer|))) "\\spad{makeYoungTableau(lambda,gitter)} computes for a given lattice permutation {\\em gitter} and for an improper partition {\\em lambda} the corresponding standard tableau of shape {\\em lambda}. Notes: see {\\em listYoungTableaus}. The entries are from {\\em 0,...,n-1}.")) (|listYoungTableaus| (((|List| (|Matrix| (|Integer|))) (|List| (|PositiveInteger|))) "\\spad{listYoungTableaus(lambda)} where {\\em lambda} is a proper partition generates the list of all standard tableaus of shape {\\em lambda} by means of lattice permutations. The numbers of the lattice permutation are interpreted as column labels. Hence the contents of these lattice permutations are the conjugate of {\\em lambda}. Notes: the functions {\\em nextLatticePermutation} and {\\em makeYoungTableau} are used. The entries are from {\\em 0,...,n-1}.")) (|inverseColeman| (((|List| (|Integer|)) (|List| (|Integer|)) (|List| (|Integer|)) (|Matrix| (|Integer|))) "\\spad{inverseColeman(alpha,beta,C)}: there is a bijection from the set of matrices having nonnegative entries and row sums {\\em alpha},{} column sums {\\em beta} to the set of {\\em Salpha - Sbeta} double cosets of the symmetric group {\\em Sn}. ({\\em Salpha} is the Young subgroup corresponding to the improper partition {\\em alpha}). For such a matrix \\spad{C},{} inverseColeman(\\spad{alpha},{}\\spad{beta},{}\\spad{C}) calculates the lexicographical smallest {\\em pi} in the corresponding double coset. Note: the resulting permutation {\\em pi} of {\\em {1,2,...,n}} is given in list form. Notes: the inverse of this map is {\\em coleman}. For details,{} see James/Kerber.")) (|coleman| (((|Matrix| (|Integer|)) (|List| (|Integer|)) (|List| (|Integer|)) (|List| (|Integer|))) "\\spad{coleman(alpha,beta,pi)}: there is a bijection from the set of matrices having nonnegative entries and row sums {\\em alpha},{} column sums {\\em beta} to the set of {\\em Salpha - Sbeta} double cosets of the symmetric group {\\em Sn}. ({\\em Salpha} is the Young subgroup corresponding to the improper partition {\\em alpha}). For a representing element {\\em pi} of such a double coset,{} coleman(\\spad{alpha},{}\\spad{beta},{}\\spad{pi}) generates the Coleman-matrix corresponding to {\\em alpha, beta, pi}. Note: The permutation {\\em pi} of {\\em {1,2,...,n}} has to be given in list form. Note: the inverse of this map is {\\em inverseColeman} (if {\\em pi} is the lexicographical smallest permutation in the coset). For details see James/Kerber."))) 
NIL 
NIL 
(-1022 T$) 
((|constructor| (NIL "This domain implements semigroup operations.")) (|semiGroupOperation| (($ (|Mapping| |#1| |#1| |#1|)) "\\spad{semiGroupOperation f} constructs a semigroup operation out of a binary homogeneous mapping known to be associative."))) 
(((|%Rule| |associativity| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|) (|:| |y| |#1|) (|:| |z| |#1|)) (-3056 (|f| (|f| |x| |y|) |z|) (|f| |x| (|f| |y| |z|))))) . T)) 
NIL 
(-1023 T$) 
((|constructor| (NIL "This is the category of all domains that implement semigroup operations"))) 
(((|%Rule| |associativity| (|%Forall| (|%Sequence| (|:| |f| $) (|:| |x| |#1|) (|:| |y| |#1|) (|:| |z| |#1|)) (-3056 (|f| (|f| |x| |y|) |z|) (|f| |x| (|f| |y| |z|))))) . T)) 
NIL 
(-1024 S) 
((|constructor| (NIL "the class of all multiplicative semigroups,{} \\spadignore{i.e.} a set with an associative operation \\spadop{*}. \\blankline")) (** (($ $ (|PositiveInteger|)) "\\spad{x**n} returns the repeated product of \\spad{x} \\spad{n} times,{} \\spadignore{i.e.} exponentiation.")) (* (($ $ $) "\\spad{x*y} returns the product of \\spad{x} and \\spad{y}."))) 
NIL 
NIL 
(-1025) 
((|constructor| (NIL "the class of all multiplicative semigroups,{} \\spadignore{i.e.} a set with an associative operation \\spadop{*}. \\blankline")) (** (($ $ (|PositiveInteger|)) "\\spad{x**n} returns the repeated product of \\spad{x} \\spad{n} times,{} \\spadignore{i.e.} exponentiation.")) (* (($ $ $) "\\spad{x*y} returns the product of \\spad{x} and \\spad{y}."))) 
NIL 
NIL 
(-1026 |dimtot| |dim1| S) 
((|constructor| (NIL "\\indented{2}{This type represents the finite direct or cartesian product of an} underlying ordered component type. The vectors are ordered as if they were split into two blocks. The \\spad{dim1} parameter specifies the length of the first block. The ordering is lexicographic between the blocks but acts like \\spadtype{HomogeneousDirectProduct} within each block. This type is a suitable third argument for \\spadtype{GeneralDistributedMultivariatePolynomial}."))) 
((-3988 |has| |#3| (-961)) (-3989 |has| |#3| (-961)) (-3991 |has| |#3| (-6 -3991)) (-3994 . T)) 
((OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|)))) (-12 (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|))))) (|HasCategory| |#3| (QUOTE (-552 (-772)))) (|HasCategory| |#3| (QUOTE (-312))) (OR (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-312)))) (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-717))) (OR (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-756)))) (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-319))) (OR (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-580 (-484)))) (|HasCategory| |#3| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#3| (QUOTE (-580 (-484)))) (|HasCategory| |#3| (QUOTE (-961))))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (OR (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-72))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (QUOTE (-1013)))) (OR (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961))) (|HasCategory| |#3| (QUOTE (-1013)))) (OR (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasCategory| |#3| (QUOTE (-190))) (OR (|HasCategory| |#3| (QUOTE (-190))) (-12 (|HasCategory| |#3| (QUOTE (-189))) (|HasCategory| |#3| (QUOTE (-961))))) (OR (-12 (|HasCategory| |#3| (QUOTE (-811 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasCategory| |#3| (QUOTE (-809 (-1089))))) (|HasCategory| |#3| (QUOTE (-1013))) (OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-950 (-349 (-484)))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#3| (QUOTE (-1013))))) (OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#3| (QUOTE (-21))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-717))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-756))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (-12 (|HasCategory| |#3| (QUOTE (-312))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-663))) (|HasCategory| |#3| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-961))))) (|HasCategory| (-484) (QUOTE (-756))) (-12 (|HasCategory| |#3| (QUOTE (-580 (-484)))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-189))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-811 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (OR (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-484)))) (|HasCategory| |#3| (QUOTE (-1013)))) (-12 (|HasCategory| |#3| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#3| (QUOTE (-1013)))) (|HasAttribute| |#3| (QUOTE -3991)) (-12 (|HasCategory| |#3| (QUOTE (-190))) (|HasCategory| |#3| (QUOTE (-961)))) (-12 (|HasCategory| |#3| (QUOTE (-809 (-1089)))) (|HasCategory| |#3| (QUOTE (-961)))) (|HasCategory| |#3| (QUOTE (-146))) (|HasCategory| |#3| (QUOTE (-23))) (|HasCategory| |#3| (QUOTE (-104))) (|HasCategory| |#3| (QUOTE (-25))) (|HasCategory| |#3| (QUOTE (-72))) (-12 (|HasCategory| |#3| (QUOTE (-1013))) (|HasCategory| |#3| (|%list| (QUOTE -260) (|devaluate| |#3|))))) 
(-1027 R |x|) 
((|constructor| (NIL "This package produces functions for counting etc. real roots of univariate polynomials in \\spad{x} over \\spad{R},{} which must be an OrderedIntegralDomain")) (|countRealRootsMultiple| (((|Integer|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{countRealRootsMultiple(p)} says how many real roots \\spad{p} has,{} counted with multiplicity")) (|SturmHabichtMultiple| (((|Integer|) (|UnivariatePolynomial| |#2| |#1|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{SturmHabichtMultiple(p1,p2)} computes c_{+}-c_{-} where c_{+} is the number of real roots of \\spad{p1} with \\spad{p2>0} and c_{-} is the number of real roots of \\spad{p1} with \\spad{p2<0}. If \\spad{p2=1} what you get is the number of real roots of \\spad{p1}.")) (|countRealRoots| (((|Integer|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{countRealRoots(p)} says how many real roots \\spad{p} has")) (|SturmHabicht| (((|Integer|) (|UnivariatePolynomial| |#2| |#1|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{SturmHabicht(p1,p2)} computes c_{+}-c_{-} where c_{+} is the number of real roots of \\spad{p1} with \\spad{p2>0} and c_{-} is the number of real roots of \\spad{p1} with \\spad{p2<0}. If \\spad{p2=1} what you get is the number of real roots of \\spad{p1}.")) (|SturmHabichtCoefficients| (((|List| |#1|) (|UnivariatePolynomial| |#2| |#1|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{SturmHabichtCoefficients(p1,p2)} computes the principal Sturm-Habicht coefficients of \\spad{p1} and \\spad{p2}")) (|SturmHabichtSequence| (((|List| (|UnivariatePolynomial| |#2| |#1|)) (|UnivariatePolynomial| |#2| |#1|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{SturmHabichtSequence(p1,p2)} computes the Sturm-Habicht sequence of \\spad{p1} and \\spad{p2}")) (|subresultantSequence| (((|List| (|UnivariatePolynomial| |#2| |#1|)) (|UnivariatePolynomial| |#2| |#1|) (|UnivariatePolynomial| |#2| |#1|)) "\\spad{subresultantSequence(p1,p2)} computes the (standard) subresultant sequence of \\spad{p1} and \\spad{p2}"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-391)))) 
(-1028) 
((|constructor| (NIL "This is the datatype for operation signatures as \\indented{2}{used by the compiler and the interpreter.\\space{2}Note that this domain} \\indented{2}{differs from SignatureAst.} See also: ConstructorCall,{} Domain.")) (|source| (((|List| (|Syntax|)) $) "\\spad{source(s)} returns the list of parameter types of `s'.")) (|target| (((|Syntax|) $) "\\spad{target(s)} returns the target type of the signature `s'.")) (|signature| (($ (|List| (|Syntax|)) (|Syntax|)) "\\spad{signature(s,t)} constructs a Signature object with parameter types indicaded by `s',{} and return type indicated by `t'."))) 
NIL 
NIL 
(-1029) 
((|constructor| (NIL "This domain represents a signature AST. A signature AST \\indented{2}{is a description of an exported operation,{} \\spadignore{e.g.} its name,{} result} \\indented{2}{type,{} and the list of its argument types.}")) (|signature| (((|Signature|) $) "\\spad{signature(s)} returns AST of the declared signature for `s'.")) (|name| (((|Identifier|) $) "\\spad{name(s)} returns the name of the signature `s'.")) (|signatureAst| (($ (|Identifier|) (|Signature|)) "\\spad{signatureAst(n,s,t)} builds the signature AST n: \\spad{s} -> \\spad{t}"))) 
NIL 
NIL 
(-1030 R -3092) 
((|constructor| (NIL "This package provides functions to determine the sign of an elementary function around a point or infinity.")) (|sign| (((|Union| (|Integer|) #1="failed") |#2| (|Symbol|) |#2| (|String|)) "\\spad{sign(f, x, a, s)} returns the sign of \\spad{f} as \\spad{x} nears \\spad{a} from below if \\spad{s} is \"left\",{} or above if \\spad{s} is \"right\".") (((|Union| (|Integer|) #1#) |#2| (|Symbol|) (|OrderedCompletion| |#2|)) "\\spad{sign(f, x, a)} returns the sign of \\spad{f} as \\spad{x} nears \\spad{a},{} from both sides if \\spad{a} is finite.") (((|Union| (|Integer|) #1#) |#2|) "\\spad{sign(f)} returns the sign of \\spad{f} if it is constant everywhere."))) 
NIL 
NIL 
(-1031 R) 
((|constructor| (NIL "Find the sign of a rational function around a point or infinity.")) (|sign| (((|Union| (|Integer|) #1="failed") (|Fraction| (|Polynomial| |#1|)) (|Symbol|) (|Fraction| (|Polynomial| |#1|)) (|String|)) "\\spad{sign(f, x, a, s)} returns the sign of \\spad{f} as \\spad{x} nears \\spad{a} from the left (below) if \\spad{s} is the string \\spad{\"left\"},{} or from the right (above) if \\spad{s} is the string \\spad{\"right\"}.") (((|Union| (|Integer|) #1#) (|Fraction| (|Polynomial| |#1|)) (|Symbol|) (|OrderedCompletion| (|Fraction| (|Polynomial| |#1|)))) "\\spad{sign(f, x, a)} returns the sign of \\spad{f} as \\spad{x} approaches \\spad{a},{} from both sides if \\spad{a} is finite.") (((|Union| (|Integer|) #1#) (|Fraction| (|Polynomial| |#1|))) "\\spad{sign f} returns the sign of \\spad{f} if it is constant everywhere."))) 
NIL 
NIL 
(-1032) 
((|constructor| (NIL "\\indented{1}{Package to allow simplify to be called on AlgebraicNumbers} by converting to EXPR(INT)")) (|simplify| (((|Expression| (|Integer|)) (|AlgebraicNumber|)) "\\spad{simplify(an)} applies simplifications to \\spad{an}"))) 
NIL 
NIL 
(-1033) 
((|constructor| (NIL "SingleInteger is intended to support machine integer arithmetic.")) (|xor| (($ $ $) "\\spad{xor(n,m)} returns the bit-by-bit logical {\\em xor} of the single integers \\spad{n} and \\spad{m}.")) (|noetherian| ((|attribute|) "\\spad{noetherian} all ideals are finitely generated (in fact principal).")) (|canonicalsClosed| ((|attribute|) "\\spad{canonicalClosed} means two positives multiply to give positive.")) (|canonical| ((|attribute|) "\\spad{canonical} means that mathematical equality is implied by data structure equality."))) 
((-3982 . T) (-3986 . T) (-3981 . T) (-3992 . T) (-3993 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1034 S) 
((|constructor| (NIL "A stack is a bag where the last item inserted is the first item extracted.")) (|depth| (((|NonNegativeInteger|) $) "\\spad{depth(s)} returns the number of elements of stack \\spad{s}. Note: \\axiom{depth(\\spad{s}) = \\#s}.")) (|top| ((|#1| $) "\\spad{top(s)} returns the top element \\spad{x} from \\spad{s}; \\spad{s} remains unchanged. Note: Use \\axiom{pop!(\\spad{s})} to obtain \\spad{x} and remove it from \\spad{s}.")) (|pop!| ((|#1| $) "\\spad{pop!(s)} returns the top element \\spad{x},{} destructively removing \\spad{x} from \\spad{s}. Note: Use \\axiom{top(\\spad{s})} to obtain \\spad{x} without removing it from \\spad{s}. Error: if \\spad{s} is empty.")) (|push!| ((|#1| |#1| $) "\\spad{push!(x,s)} pushes \\spad{x} onto stack \\spad{s},{} \\spadignore{i.e.} destructively changing \\spad{s} so as to have a new first (top) element \\spad{x}. Afterwards,{} pop!(\\spad{s}) produces \\spad{x} and pop!(\\spad{s}) produces the original \\spad{s}."))) 
((-3994 . T) (-3995 . T)) 
NIL 
(-1035 S |ndim| R |Row| |Col|) 
((|constructor| (NIL "\\spadtype{SquareMatrixCategory} is a general square matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col.")) (** (($ $ (|Integer|)) "\\spad{m**n} computes an integral power of the matrix \\spad{m}. Error: if the matrix is not invertible.")) (|inverse| (((|Union| $ "failed") $) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m},{} if that matrix is invertible and returns \"failed\" otherwise.")) (|minordet| ((|#3| $) "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors.")) (|determinant| ((|#3| $) "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}.")) (* ((|#4| |#4| $) "\\spad{r * x} is the product of the row vector \\spad{r} and the matrix \\spad{x}. Error: if the dimensions are incompatible.") ((|#5| $ |#5|) "\\spad{x * c} is the product of the matrix \\spad{x} and the column vector \\spad{c}. Error: if the dimensions are incompatible.")) (|diagonalProduct| ((|#3| $) "\\spad{diagonalProduct(m)} returns the product of the elements on the diagonal of the matrix \\spad{m}.")) (|trace| ((|#3| $) "\\spad{trace(m)} returns the trace of the matrix \\spad{m}. this is the sum of the elements on the diagonal of the matrix \\spad{m}.")) (|diagonal| ((|#4| $) "\\spad{diagonal(m)} returns a row consisting of the elements on the diagonal of the matrix \\spad{m}.")) (|diagonalMatrix| (($ (|List| |#3|)) "\\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \\spad{l} on the diagonal.")) (|scalarMatrix| (($ |#3|) "\\spad{scalarMatrix(r)} returns an \\spad{n}-by-\\spad{n} matrix with \\spad{r}'s on the diagonal and zeroes elsewhere."))) 
NIL 
((|HasCategory| |#3| (QUOTE (-312))) (|HasAttribute| |#3| (QUOTE (-3996 "*"))) (|HasCategory| |#3| (QUOTE (-146)))) 
(-1036 |ndim| R |Row| |Col|) 
((|constructor| (NIL "\\spadtype{SquareMatrixCategory} is a general square matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col.")) (** (($ $ (|Integer|)) "\\spad{m**n} computes an integral power of the matrix \\spad{m}. Error: if the matrix is not invertible.")) (|inverse| (((|Union| $ "failed") $) "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m},{} if that matrix is invertible and returns \"failed\" otherwise.")) (|minordet| ((|#2| $) "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors.")) (|determinant| ((|#2| $) "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}.")) (* ((|#3| |#3| $) "\\spad{r * x} is the product of the row vector \\spad{r} and the matrix \\spad{x}. Error: if the dimensions are incompatible.") ((|#4| $ |#4|) "\\spad{x * c} is the product of the matrix \\spad{x} and the column vector \\spad{c}. Error: if the dimensions are incompatible.")) (|diagonalProduct| ((|#2| $) "\\spad{diagonalProduct(m)} returns the product of the elements on the diagonal of the matrix \\spad{m}.")) (|trace| ((|#2| $) "\\spad{trace(m)} returns the trace of the matrix \\spad{m}. this is the sum of the elements on the diagonal of the matrix \\spad{m}.")) (|diagonal| ((|#3| $) "\\spad{diagonal(m)} returns a row consisting of the elements on the diagonal of the matrix \\spad{m}.")) (|diagonalMatrix| (($ (|List| |#2|)) "\\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \\spad{l} on the diagonal.")) (|scalarMatrix| (($ |#2|) "\\spad{scalarMatrix(r)} returns an \\spad{n}-by-\\spad{n} matrix with \\spad{r}'s on the diagonal and zeroes elsewhere."))) 
((-3994 . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1037 R |Row| |Col| M) 
((|constructor| (NIL "\\spadtype{SmithNormalForm} is a package which provides some standard canonical forms for matrices.")) (|diophantineSystem| (((|Record| (|:| |particular| (|Union| |#3| "failed")) (|:| |basis| (|List| |#3|))) |#4| |#3|) "\\spad{diophantineSystem(A,B)} returns a particular integer solution and an integer basis of the equation \\spad{AX = B}.")) (|completeSmith| (((|Record| (|:| |Smith| |#4|) (|:| |leftEqMat| |#4|) (|:| |rightEqMat| |#4|)) |#4|) "\\spad{completeSmith} returns a record that contains the Smith normal form \\spad{H} of the matrix and the left and right equivalence matrices \\spad{U} and \\spad{V} such that U*m*v = \\spad{H}")) (|smith| ((|#4| |#4|) "\\spad{smith(m)} returns the Smith Normal form of the matrix \\spad{m}.")) (|completeHermite| (((|Record| (|:| |Hermite| |#4|) (|:| |eqMat| |#4|)) |#4|) "\\spad{completeHermite} returns a record that contains the Hermite normal form \\spad{H} of the matrix and the equivalence matrix \\spad{U} such that U*m = \\spad{H}")) (|hermite| ((|#4| |#4|) "\\spad{hermite(m)} returns the Hermite normal form of the matrix \\spad{m}."))) 
NIL 
NIL 
(-1038 R |VarSet|) 
((|constructor| (NIL "\\indented{2}{This type is the basic representation of sparse recursive multivariate} polynomials. It is parameterized by the coefficient ring and the variable set which may be infinite. The variable ordering is determined by the variable set parameter. The coefficient ring may be non-commutative,{} but the variables are assumed to commute."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| |#2| (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| |#2| (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-312))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-1039 |Coef| |Var| SMP) 
((|constructor| (NIL "This domain provides multivariate Taylor series with variables from an arbitrary ordered set. A Taylor series is represented by a stream of polynomials from the polynomial domain SMP. The \\spad{n}th element of the stream is a form of degree \\spad{n}. SMTS is an internal domain.")) (|fintegrate| (($ (|Mapping| $) |#2| |#1|) "\\spad{fintegrate(f,v,c)} is the integral of \\spad{f()} with respect \\indented{1}{to \\spad{v} and having \\spad{c} as the constant of integration.} \\indented{1}{The evaluation of \\spad{f()} is delayed.}")) (|integrate| (($ $ |#2| |#1|) "\\spad{integrate(s,v,c)} is the integral of \\spad{s} with respect \\indented{1}{to \\spad{v} and having \\spad{c} as the constant of integration.}")) (|csubst| (((|Mapping| (|Stream| |#3|) |#3|) (|List| |#2|) (|List| (|Stream| |#3|))) "\\spad{csubst(a,b)} is for internal use only")) (* (($ |#3| $) "\\spad{smp*ts} multiplies a TaylorSeries by a monomial SMP.")) (|coerce| (($ |#3|) "\\spad{coerce(poly)} regroups the terms by total degree and forms a series.") (($ |#2|) "\\spad{coerce(var)} converts a variable to a Taylor series")) (|coefficient| ((|#3| $ (|NonNegativeInteger|)) "\\spad{coefficient(s, n)} gives the terms of total degree \\spad{n}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-1040 R E V P) 
((|constructor| (NIL "The category of square-free and normalized triangular sets. Thus,{} up to the primitivity axiom of [1],{} these sets are Lazard triangular sets.\\newline References : \\indented{1}{[1] \\spad{D}. LAZARD \"A new method for solving algebraic systems of} \\indented{5}{positive dimension\" Discr. App. Math. 33:147-160,{}1991}"))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-1041 UP -3092) 
((|constructor| (NIL "This package factors the formulas out of the general solve code,{} allowing their recursive use over different domains. Care is taken to introduce few radicals so that radical extension domains can more easily simplify the results.")) (|aQuartic| ((|#2| |#2| |#2| |#2| |#2| |#2|) "\\spad{aQuartic(f,g,h,i,k)} \\undocumented")) (|aCubic| ((|#2| |#2| |#2| |#2| |#2|) "\\spad{aCubic(f,g,h,j)} \\undocumented")) (|aQuadratic| ((|#2| |#2| |#2| |#2|) "\\spad{aQuadratic(f,g,h)} \\undocumented")) (|aLinear| ((|#2| |#2| |#2|) "\\spad{aLinear(f,g)} \\undocumented")) (|quartic| (((|List| |#2|) |#2| |#2| |#2| |#2| |#2|) "\\spad{quartic(f,g,h,i,j)} \\undocumented") (((|List| |#2|) |#1|) "\\spad{quartic(u)} \\undocumented")) (|cubic| (((|List| |#2|) |#2| |#2| |#2| |#2|) "\\spad{cubic(f,g,h,i)} \\undocumented") (((|List| |#2|) |#1|) "\\spad{cubic(u)} \\undocumented")) (|quadratic| (((|List| |#2|) |#2| |#2| |#2|) "\\spad{quadratic(f,g,h)} \\undocumented") (((|List| |#2|) |#1|) "\\spad{quadratic(u)} \\undocumented")) (|linear| (((|List| |#2|) |#2| |#2|) "\\spad{linear(f,g)} \\undocumented") (((|List| |#2|) |#1|) "\\spad{linear(u)} \\undocumented")) (|mapSolve| (((|Record| (|:| |solns| (|List| |#2|)) (|:| |maps| (|List| (|Record| (|:| |arg| |#2|) (|:| |res| |#2|))))) |#1| (|Mapping| |#2| |#2|)) "\\spad{mapSolve(u,f)} \\undocumented")) (|particularSolution| ((|#2| |#1|) "\\spad{particularSolution(u)} \\undocumented")) (|solve| (((|List| |#2|) |#1|) "\\spad{solve(u)} \\undocumented"))) 
NIL 
NIL 
(-1042 R) 
((|constructor| (NIL "This package tries to find solutions expressed in terms of radicals for systems of equations of rational functions with coefficients in an integral domain \\spad{R}.")) (|contractSolve| (((|SuchThat| (|List| (|Expression| |#1|)) (|List| (|Equation| (|Expression| |#1|)))) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{contractSolve(rf,x)} finds the solutions expressed in terms of radicals of the equation \\spad{rf} = 0 with respect to the symbol \\spad{x},{} where \\spad{rf} is a rational function. The result contains new symbols for common subexpressions in order to reduce the size of the output.") (((|SuchThat| (|List| (|Expression| |#1|)) (|List| (|Equation| (|Expression| |#1|)))) (|Equation| (|Fraction| (|Polynomial| |#1|))) (|Symbol|)) "\\spad{contractSolve(eq,x)} finds the solutions expressed in terms of radicals of the equation of rational functions \\spad{eq} with respect to the symbol \\spad{x}. The result contains new symbols for common subexpressions in order to reduce the size of the output.")) (|radicalRoots| (((|List| (|List| (|Expression| |#1|))) (|List| (|Fraction| (|Polynomial| |#1|))) (|List| (|Symbol|))) "\\spad{radicalRoots(lrf,lvar)} finds the roots expressed in terms of radicals of the list of rational functions \\spad{lrf} with respect to the list of symbols \\spad{lvar}.") (((|List| (|Expression| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{radicalRoots(rf,x)} finds the roots expressed in terms of radicals of the rational function \\spad{rf} with respect to the symbol \\spad{x}.")) (|radicalSolve| (((|List| (|List| (|Equation| (|Expression| |#1|)))) (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) "\\spad{radicalSolve(leq)} finds the solutions expressed in terms of radicals of the system of equations of rational functions \\spad{leq} with respect to the unique symbol \\spad{x} appearing in \\spad{leq}.") (((|List| (|List| (|Equation| (|Expression| |#1|)))) (|List| (|Equation| (|Fraction| (|Polynomial| |#1|)))) (|List| (|Symbol|))) "\\spad{radicalSolve(leq,lvar)} finds the solutions expressed in terms of radicals of the system of equations of rational functions \\spad{leq} with respect to the list of symbols \\spad{lvar}.") (((|List| (|List| (|Equation| (|Expression| |#1|)))) (|List| (|Fraction| (|Polynomial| |#1|)))) "\\spad{radicalSolve(lrf)} finds the solutions expressed in terms of radicals of the system of equations \\spad{lrf} = 0,{} where \\spad{lrf} is a system of univariate rational functions.") (((|List| (|List| (|Equation| (|Expression| |#1|)))) (|List| (|Fraction| (|Polynomial| |#1|))) (|List| (|Symbol|))) "\\spad{radicalSolve(lrf,lvar)} finds the solutions expressed in terms of radicals of the system of equations \\spad{lrf} = 0 with respect to the list of symbols \\spad{lvar},{} where \\spad{lrf} is a list of rational functions.") (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Fraction| (|Polynomial| |#1|)))) "\\spad{radicalSolve(eq)} finds the solutions expressed in terms of radicals of the equation of rational functions \\spad{eq} with respect to the unique symbol \\spad{x} appearing in \\spad{eq}.") (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Fraction| (|Polynomial| |#1|))) (|Symbol|)) "\\spad{radicalSolve(eq,x)} finds the solutions expressed in terms of radicals of the equation of rational functions \\spad{eq} with respect to the symbol \\spad{x}.") (((|List| (|Equation| (|Expression| |#1|))) (|Fraction| (|Polynomial| |#1|))) "\\spad{radicalSolve(rf)} finds the solutions expressed in terms of radicals of the equation \\spad{rf} = 0,{} where \\spad{rf} is a univariate rational function.") (((|List| (|Equation| (|Expression| |#1|))) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{radicalSolve(rf,x)} finds the solutions expressed in terms of radicals of the equation \\spad{rf} = 0 with respect to the symbol \\spad{x},{} where \\spad{rf} is a rational function."))) 
NIL 
NIL 
(-1043 R) 
((|constructor| (NIL "This package finds the function \\spad{func3} where \\spad{func1} and \\spad{func2} \\indented{1}{are given and\\space{2}\\spad{func1} = \\spad{func3}(\\spad{func2}) .\\space{2}If there is no solution then} \\indented{1}{function \\spad{func1} will be returned.} \\indented{1}{An example would be\\space{2}\\spad{func1:= 8*X**3+32*X**2-14*X ::EXPR INT} and} \\indented{1}{\\spad{func2:=2*X ::EXPR INT} convert them via univariate} \\indented{1}{to FRAC SUP EXPR INT and then the solution is \\spad{func3:=X**3+X**2-X}} \\indented{1}{of type FRAC SUP EXPR INT}")) (|unvectorise| (((|Fraction| (|SparseUnivariatePolynomial| (|Expression| |#1|))) (|Vector| (|Expression| |#1|)) (|Fraction| (|SparseUnivariatePolynomial| (|Expression| |#1|))) (|Integer|)) "\\spad{unvectorise(vect, var, n)} returns \\spad{vect(1) + vect(2)*var + ... + vect(n+1)*var**(n)} where \\spad{vect} is the vector of the coefficients of the polynomail ,{} \\spad{var} the new variable and \\spad{n} the degree.")) (|decomposeFunc| (((|Fraction| (|SparseUnivariatePolynomial| (|Expression| |#1|))) (|Fraction| (|SparseUnivariatePolynomial| (|Expression| |#1|))) (|Fraction| (|SparseUnivariatePolynomial| (|Expression| |#1|))) (|Fraction| (|SparseUnivariatePolynomial| (|Expression| |#1|)))) "\\spad{decomposeFunc(func1, func2, newvar)} returns a function \\spad{func3} where \\spad{func1} = \\spad{func3}(\\spad{func2}) and expresses it in the new variable newvar. If there is no solution then \\spad{func1} will be returned."))) 
NIL 
NIL 
(-1044 R) 
((|constructor| (NIL "This package tries to find solutions of equations of type Expression(\\spad{R}). This means expressions involving transcendental,{} exponential,{} logarithmic and nthRoot functions. After trying to transform different kernels to one kernel by applying several rules,{} it calls zerosOf for the SparseUnivariatePolynomial in the remaining kernel. For example the expression \\spad{sin(x)*cos(x)-2} will be transformed to \\indented{3}{\\spad{-2 tan(x/2)**4 -2 tan(x/2)**3 -4 tan(x/2)**2 +2 tan(x/2) -2}} by using the function normalize and then to \\indented{3}{\\spad{-2 tan(x)**2 + tan(x) -2}} with help of subsTan. This function tries to express the given function in terms of \\spad{tan(x/2)} to express in terms of \\spad{tan(x)} . Other examples are the expressions \\spad{sqrt(x+1)+sqrt(x+7)+1} or \\indented{1}{\\spad{sqrt(sin(x))+1} .}")) (|solve| (((|List| (|List| (|Equation| (|Expression| |#1|)))) (|List| (|Equation| (|Expression| |#1|))) (|List| (|Symbol|))) "\\spad{solve(leqs, lvar)} returns a list of solutions to the list of equations \\spad{leqs} with respect to the list of symbols lvar.") (((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|) (|Symbol|)) "\\spad{solve(expr,x)} finds the solutions of the equation \\spad{expr} = 0 with respect to the symbol \\spad{x} where \\spad{expr} is a function of type Expression(\\spad{R}).") (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|)) (|Symbol|)) "\\spad{solve(eq,x)} finds the solutions of the equation \\spad{eq} where \\spad{eq} is an equation of functions of type Expression(\\spad{R}) with respect to the symbol \\spad{x}.") (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|))) "\\spad{solve(eq)} finds the solutions of the equation \\spad{eq} where \\spad{eq} is an equation of functions of type Expression(\\spad{R}) with respect to the unique symbol \\spad{x} appearing in \\spad{eq}.") (((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|)) "\\spad{solve(expr)} finds the solutions of the equation \\spad{expr} = 0 where \\spad{expr} is a function of type Expression(\\spad{R}) with respect to the unique symbol \\spad{x} appearing in eq."))) 
NIL 
NIL 
(-1045 S A) 
((|constructor| (NIL "This package exports sorting algorithnms")) (|insertionSort!| ((|#2| |#2|) "\\spad{insertionSort! }\\undocumented") ((|#2| |#2| (|Mapping| (|Boolean|) |#1| |#1|)) "\\spad{insertionSort!(a,f)} \\undocumented")) (|bubbleSort!| ((|#2| |#2|) "\\spad{bubbleSort!(a)} \\undocumented") ((|#2| |#2| (|Mapping| (|Boolean|) |#1| |#1|)) "\\spad{bubbleSort!(a,f)} \\undocumented"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-756)))) 
(-1046 R) 
((|constructor| (NIL "The domain ThreeSpace is used for creating three dimensional objects using functions for defining points,{} curves,{} polygons,{} constructs and the subspaces containing them."))) 
NIL 
NIL 
(-1047 R) 
((|constructor| (NIL "The category ThreeSpaceCategory is used for creating three dimensional objects using functions for defining points,{} curves,{} polygons,{} constructs and the subspaces containing them.")) (|coerce| (((|OutputForm|) $) "\\spad{coerce(s)} returns the \\spadtype{ThreeSpace} \\spad{s} to Output format.")) (|subspace| (((|SubSpace| 3 |#1|) $) "\\spad{subspace(s)} returns the \\spadtype{SubSpace} which holds all the point information in the \\spadtype{ThreeSpace},{} \\spad{s}.")) (|check| (($ $) "\\spad{check(s)} returns lllpt,{} list of lists of lists of point information about the \\spadtype{ThreeSpace} \\spad{s}.")) (|objects| (((|Record| (|:| |points| (|NonNegativeInteger|)) (|:| |curves| (|NonNegativeInteger|)) (|:| |polygons| (|NonNegativeInteger|)) (|:| |constructs| (|NonNegativeInteger|))) $) "\\spad{objects(s)} returns the \\spadtype{ThreeSpace},{} \\spad{s},{} in the form of a 3D object record containing information on the number of points,{} curves,{} polygons and constructs comprising the \\spadtype{ThreeSpace}..")) (|lprop| (((|List| (|SubSpaceComponentProperty|)) $) "\\spad{lprop(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a list of subspace component properties,{} and if so,{} returns the list; An error is signaled otherwise.")) (|llprop| (((|List| (|List| (|SubSpaceComponentProperty|))) $) "\\spad{llprop(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a list of curves which are lists of the subspace component properties of the curves,{} and if so,{} returns the list of lists; An error is signaled otherwise.")) (|lllp| (((|List| (|List| (|List| (|Point| |#1|)))) $) "\\spad{lllp(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a list of components,{} which are lists of curves,{} which are lists of points,{} and if so,{} returns the list of lists of lists; An error is signaled otherwise.")) (|lllip| (((|List| (|List| (|List| (|NonNegativeInteger|)))) $) "\\spad{lllip(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a list of components,{} which are lists of curves,{} which are lists of indices to points,{} and if so,{} returns the list of lists of lists; An error is signaled otherwise.")) (|lp| (((|List| (|Point| |#1|)) $) "\\spad{lp(s)} returns the list of points component which the \\spadtype{ThreeSpace},{} \\spad{s},{} contains; these points are used by reference,{} \\spadignore{i.e.} the component holds indices referring to the points rather than the points themselves. This allows for sharing of the points.")) (|mesh?| (((|Boolean|) $) "\\spad{mesh?(s)} returns \\spad{true} if the \\spadtype{ThreeSpace} \\spad{s} is composed of one component,{} a mesh comprising a list of curves which are lists of points,{} or returns \\spad{false} if otherwise")) (|mesh| (((|List| (|List| (|Point| |#1|))) $) "\\spad{mesh(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a single surface component defined by a list curves which contain lists of points,{} and if so,{} returns the list of lists of points; An error is signaled otherwise.") (($ (|List| (|List| (|Point| |#1|))) (|Boolean|) (|Boolean|)) "\\spad{mesh([[p0],[p1],...,[pn]], close1, close2)} creates a surface defined over a list of curves,{} \\spad{p0} through pn,{} which are lists of points; the booleans \\spad{close1} and \\spad{close2} indicate how the surface is to be closed: \\spad{close1} set to \\spad{true} means that each individual list (a curve) is to be closed (that is,{} the last point of the list is to be connected to the first point); \\spad{close2} set to \\spad{true} means that the boundary at one end of the surface is to be connected to the boundary at the other end (the boundaries are defined as the first list of points (curve) and the last list of points (curve)); the \\spadtype{ThreeSpace} containing this surface is returned.") (($ (|List| (|List| (|Point| |#1|)))) "\\spad{mesh([[p0],[p1],...,[pn]])} creates a surface defined by a list of curves which are lists,{} \\spad{p0} through pn,{} of points,{} and returns a \\spadtype{ThreeSpace} whose component is the surface.") (($ $ (|List| (|List| (|List| |#1|))) (|Boolean|) (|Boolean|)) "\\spad{mesh(s,[ [[r10]...,[r1m]], [[r20]...,[r2m]],..., [[rn0]...,[rnm]] ], close1, close2)} adds a surface component to the \\spadtype{ThreeSpace} \\spad{s},{} which is defined over a rectangular domain of size WxH where \\spad{W} is the number of lists of points from the domain \\spad{PointDomain(R)} and \\spad{H} is the number of elements in each of those lists; the booleans \\spad{close1} and \\spad{close2} indicate how the surface is to be closed: if \\spad{close1} is \\spad{true} this means that each individual list (a curve) is to be closed (\\spadignore{i.e.} the last point of the list is to be connected to the first point); if \\spad{close2} is \\spad{true},{} this means that the boundary at one end of the surface is to be connected to the boundary at the other end (the boundaries are defined as the first list of points (curve) and the last list of points (curve)).") (($ $ (|List| (|List| (|Point| |#1|))) (|Boolean|) (|Boolean|)) "\\spad{mesh(s,[[p0],[p1],...,[pn]], close1, close2)} adds a surface component to the \\spadtype{ThreeSpace},{} which is defined over a list of curves,{} in which each of these curves is a list of points. The boolean arguments \\spad{close1} and \\spad{close2} indicate how the surface is to be closed. Argument \\spad{close1} equal \\spad{true} means that each individual list (a curve) is to be closed,{} \\spadignore{i.e.} the last point of the list is to be connected to the first point. Argument \\spad{close2} equal \\spad{true} means that the boundary at one end of the surface is to be connected to the boundary at the other end,{} \\spadignore{i.e.} the boundaries are defined as the first list of points (curve) and the last list of points (curve).") (($ $ (|List| (|List| (|List| |#1|))) (|List| (|SubSpaceComponentProperty|)) (|SubSpaceComponentProperty|)) "\\spad{mesh(s,[ [[r10]...,[r1m]], [[r20]...,[r2m]],..., [[rn0]...,[rnm]] ], [props], prop)} adds a surface component to the \\spadtype{ThreeSpace} \\spad{s},{} which is defined over a rectangular domain of size WxH where \\spad{W} is the number of lists of points from the domain \\spad{PointDomain(R)} and \\spad{H} is the number of elements in each of those lists; lprops is the list of the subspace component properties for each curve list,{} and prop is the subspace component property by which the points are defined.") (($ $ (|List| (|List| (|Point| |#1|))) (|List| (|SubSpaceComponentProperty|)) (|SubSpaceComponentProperty|)) "\\spad{mesh(s,[[p0],[p1],...,[pn]],[props],prop)} adds a surface component,{} defined over a list curves which contains lists of points,{} to the \\spadtype{ThreeSpace} \\spad{s}; props is a list which contains the subspace component properties for each surface parameter,{} and \\spad{prop} is the subspace component property by which the points are defined.")) (|polygon?| (((|Boolean|) $) "\\spad{polygon?(s)} returns \\spad{true} if the \\spadtype{ThreeSpace} \\spad{s} contains a single polygon component,{} or \\spad{false} otherwise.")) (|polygon| (((|List| (|Point| |#1|)) $) "\\spad{polygon(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a single polygon component defined by a list of points,{} and if so,{} returns the list of points; An error is signaled otherwise.") (($ (|List| (|Point| |#1|))) "\\spad{polygon([p0,p1,...,pn])} creates a polygon defined by a list of points,{} \\spad{p0} through pn,{} and returns a \\spadtype{ThreeSpace} whose component is the polygon.") (($ $ (|List| (|List| |#1|))) "\\spad{polygon(s,[[r0],[r1],...,[rn]])} adds a polygon component defined by a list of points \\spad{r0} through \\spad{rn},{} which are lists of elements from the domain \\spad{PointDomain(m,R)} to the \\spadtype{ThreeSpace} \\spad{s},{} where \\spad{m} is the dimension of the points and \\spad{R} is the \\spadtype{Ring} over which the points are defined.") (($ $ (|List| (|Point| |#1|))) "\\spad{polygon(s,[p0,p1,...,pn])} adds a polygon component defined by a list of points,{} \\spad{p0} throught pn,{} to the \\spadtype{ThreeSpace} \\spad{s}.")) (|closedCurve?| (((|Boolean|) $) "\\spad{closedCurve?(s)} returns \\spad{true} if the \\spadtype{ThreeSpace} \\spad{s} contains a single closed curve component,{} \\spadignore{i.e.} the first element of the curve is also the last element,{} or \\spad{false} otherwise.")) (|closedCurve| (((|List| (|Point| |#1|)) $) "\\spad{closedCurve(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a single closed curve component defined by a list of points in which the first point is also the last point,{} all of which are from the domain \\spad{PointDomain(m,R)} and if so,{} returns the list of points. An error is signaled otherwise.") (($ (|List| (|Point| |#1|))) "\\spad{closedCurve(lp)} sets a list of points defined by the first element of \\spad{lp} through the last element of \\spad{lp} and back to the first elelment again and returns a \\spadtype{ThreeSpace} whose component is the closed curve defined by \\spad{lp}.") (($ $ (|List| (|List| |#1|))) "\\spad{closedCurve(s,[[lr0],[lr1],...,[lrn],[lr0]])} adds a closed curve component defined by a list of points \\spad{lr0} through \\spad{lrn},{} which are lists of elements from the domain \\spad{PointDomain(m,R)},{} where \\spad{R} is the \\spadtype{Ring} over which the point elements are defined and \\spad{m} is the dimension of the points,{} in which the last element of the list of points contains a copy of the first element list,{} \\spad{lr0}. The closed curve is added to the \\spadtype{ThreeSpace},{} \\spad{s}.") (($ $ (|List| (|Point| |#1|))) "\\spad{closedCurve(s,[p0,p1,...,pn,p0])} adds a closed curve component which is a list of points defined by the first element \\spad{p0} through the last element \\spad{pn} and back to the first element \\spad{p0} again,{} to the \\spadtype{ThreeSpace} \\spad{s}.")) (|curve?| (((|Boolean|) $) "\\spad{curve?(s)} queries whether the \\spadtype{ThreeSpace},{} \\spad{s},{} is a curve,{} \\spadignore{i.e.} has one component,{} a list of list of points,{} and returns \\spad{true} if it is,{} or \\spad{false} otherwise.")) (|curve| (((|List| (|Point| |#1|)) $) "\\spad{curve(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a single curve defined by a list of points and if so,{} returns the curve,{} \\spadignore{i.e.} list of points. An error is signaled otherwise.") (($ (|List| (|Point| |#1|))) "\\spad{curve([p0,p1,p2,...,pn])} creates a space curve defined by the list of points \\spad{p0} through \\spad{pn},{} and returns the \\spadtype{ThreeSpace} whose component is the curve.") (($ $ (|List| (|List| |#1|))) "\\spad{curve(s,[[p0],[p1],...,[pn]])} adds a space curve which is a list of points \\spad{p0} through pn defined by lists of elements from the domain \\spad{PointDomain(m,R)},{} where \\spad{R} is the \\spadtype{Ring} over which the point elements are defined and \\spad{m} is the dimension of the points,{} to the \\spadtype{ThreeSpace} \\spad{s}.") (($ $ (|List| (|Point| |#1|))) "\\spad{curve(s,[p0,p1,...,pn])} adds a space curve component defined by a list of points \\spad{p0} through \\spad{pn},{} to the \\spadtype{ThreeSpace} \\spad{s}.")) (|point?| (((|Boolean|) $) "\\spad{point?(s)} queries whether the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of a single component which is a point and returns the boolean result.")) (|point| (((|Point| |#1|) $) "\\spad{point(s)} checks to see if the \\spadtype{ThreeSpace},{} \\spad{s},{} is composed of only a single point and if so,{} returns the point. An error is signaled otherwise.") (($ (|Point| |#1|)) "\\spad{point(p)} returns a \\spadtype{ThreeSpace} object which is composed of one component,{} the point \\spad{p}.") (($ $ (|NonNegativeInteger|)) "\\spad{point(s,i)} adds a point component which is placed into a component list of the \\spadtype{ThreeSpace},{} \\spad{s},{} at the index given by \\spad{i}.") (($ $ (|List| |#1|)) "\\spad{point(s,[x,y,z])} adds a point component defined by a list of elements which are from the \\spad{PointDomain(R)} to the \\spadtype{ThreeSpace},{} \\spad{s},{} where \\spad{R} is the \\spadtype{Ring} over which the point elements are defined.") (($ $ (|Point| |#1|)) "\\spad{point(s,p)} adds a point component defined by the point,{} \\spad{p},{} specified as a list from \\spad{List(R)},{} to the \\spadtype{ThreeSpace},{} \\spad{s},{} where \\spad{R} is the \\spadtype{Ring} over which the point is defined.")) (|modifyPointData| (($ $ (|NonNegativeInteger|) (|Point| |#1|)) "\\spad{modifyPointData(s,i,p)} changes the point at the indexed location \\spad{i} in the \\spadtype{ThreeSpace},{} \\spad{s},{} to that of point \\spad{p}. This is useful for making changes to a point which has been transformed.")) (|enterPointData| (((|NonNegativeInteger|) $ (|List| (|Point| |#1|))) "\\spad{enterPointData(s,[p0,p1,...,pn])} adds a list of points from \\spad{p0} through pn to the \\spadtype{ThreeSpace},{} \\spad{s},{} and returns the index,{} to the starting point of the list.")) (|copy| (($ $) "\\spad{copy(s)} returns a new \\spadtype{ThreeSpace} that is an exact copy of \\spad{s}.")) (|composites| (((|List| $) $) "\\spad{composites(s)} takes the \\spadtype{ThreeSpace} \\spad{s},{} and creates a list containing a unique \\spadtype{ThreeSpace} for each single composite of \\spad{s}. If \\spad{s} has no composites defined (composites need to be explicitly created),{} the list returned is empty. Note that not all the components need to be part of a composite.")) (|components| (((|List| $) $) "\\spad{components(s)} takes the \\spadtype{ThreeSpace} \\spad{s},{} and creates a list containing a unique \\spadtype{ThreeSpace} for each single component of \\spad{s}. If \\spad{s} has no components defined,{} the list returned is empty.")) (|composite| (($ (|List| $)) "\\spad{composite([s1,s2,...,sn])} will create a new \\spadtype{ThreeSpace} that is a union of all the components from each \\spadtype{ThreeSpace} in the parameter list,{} grouped as a composite.")) (|merge| (($ $ $) "\\spad{merge(s1,s2)} will create a new \\spadtype{ThreeSpace} that has the components of \\spad{s1} and \\spad{s2}; Groupings of components into composites are maintained.") (($ (|List| $)) "\\spad{merge([s1,s2,...,sn])} will create a new \\spadtype{ThreeSpace} that has the components of all the ones in the list; Groupings of components into composites are maintained.")) (|numberOfComposites| (((|NonNegativeInteger|) $) "\\spad{numberOfComposites(s)} returns the number of supercomponents,{} or composites,{} in the \\spadtype{ThreeSpace},{} \\spad{s}; Composites are arbitrary groupings of otherwise distinct and unrelated components; A \\spadtype{ThreeSpace} need not have any composites defined at all and,{} outside of the requirement that no component can belong to more than one composite at a time,{} the definition and interpretation of composites are unrestricted.")) (|numberOfComponents| (((|NonNegativeInteger|) $) "\\spad{numberOfComponents(s)} returns the number of distinct object components in the indicated \\spadtype{ThreeSpace},{} \\spad{s},{} such as points,{} curves,{} polygons,{} and constructs.")) (|create3Space| (($ (|SubSpace| 3 |#1|)) "\\spad{create3Space(s)} creates a \\spadtype{ThreeSpace} object containing objects pre-defined within some \\spadtype{SubSpace} \\spad{s}.") (($) "\\spad{create3Space()} creates a \\spadtype{ThreeSpace} object capable of holding point,{} curve,{} mesh components and any combination."))) 
NIL 
NIL 
(-1048) 
((|constructor| (NIL "This domain represents a kind of base domain \\indented{2}{for Spad syntax domain.\\space{2}It merely exists as a kind of} \\indented{2}{of abstract base in object-oriented programming language.} \\indented{2}{However,{} this is not an abstract class.}"))) 
NIL 
NIL 
(-1049) 
((|constructor| (NIL "\\indented{1}{This package provides a simple Spad algebra parser.} Related Constructors: Syntax. See Also: Syntax.")) (|parse| (((|List| (|Syntax|)) (|String|)) "\\spad{parse(f)} parses the source file \\spad{f} (supposedly containing Spad algebras) and returns a List Syntax. The filename \\spad{f} is supposed to have the proper extension. Note that this function has the side effect of executing any system command contained in the file \\spad{f},{} even if it might not be meaningful."))) 
NIL 
NIL 
(-1050) 
((|constructor| (NIL "This category describes the exported \\indented{2}{signatures of the SpadAst domain.}")) (|autoCoerce| (((|Integer|) $) "\\spad{autoCoerce(s)} returns the Integer view of `s'. Left at the discretion of the compiler.") (((|String|) $) "\\spad{autoCoerce(s)} returns the String view of `s'. Left at the discretion of the compiler.") (((|Identifier|) $) "\\spad{autoCoerce(s)} returns the Identifier view of `s'. Left at the discretion of the compiler.") (((|IsAst|) $) "\\spad{autoCoerce(s)} returns the IsAst view of `s'. Left at the discretion of the compiler.") (((|HasAst|) $) "\\spad{autoCoerce(s)} returns the HasAst view of `s'. Left at the discretion of the compiler.") (((|CaseAst|) $) "\\spad{autoCoerce(s)} returns the CaseAst view of `s'. Left at the discretion of the compiler.") (((|ColonAst|) $) "\\spad{autoCoerce(s)} returns the ColoonAst view of `s'. Left at the discretion of the compiler.") (((|SuchThatAst|) $) "\\spad{autoCoerce(s)} returns the SuchThatAst view of `s'. Left at the discretion of the compiler.") (((|LetAst|) $) "\\spad{autoCoerce(s)} returns the LetAst view of `s'. Left at the discretion of the compiler.") (((|SequenceAst|) $) "\\spad{autoCoerce(s)} returns the SequenceAst view of `s'. Left at the discretion of the compiler.") (((|SegmentAst|) $) "\\spad{autoCoerce(s)} returns the SegmentAst view of `s'. Left at the discretion of the compiler.") (((|RestrictAst|) $) "\\spad{autoCoerce(s)} returns the RestrictAst view of `s'. Left at the discretion of the compiler.") (((|PretendAst|) $) "\\spad{autoCoerce(s)} returns the PretendAst view of `s'. Left at the discretion of the compiler.") (((|CoerceAst|) $) "\\spad{autoCoerce(s)} returns the CoerceAst view of `s'. Left at the discretion of the compiler.") (((|ReturnAst|) $) "\\spad{autoCoerce(s)} returns the ReturnAst view of `s'. Left at the discretion of the compiler.") (((|ExitAst|) $) "\\spad{autoCoerce(s)} returns the ExitAst view of `s'. Left at the discretion of the compiler.") (((|ConstructAst|) $) "\\spad{autoCoerce(s)} returns the ConstructAst view of `s'. Left at the discretion of the compiler.") (((|CollectAst|) $) "\\spad{autoCoerce(s)} returns the CollectAst view of `s'. Left at the discretion of the compiler.") (((|StepAst|) $) "\\spad{autoCoerce(s)} returns the InAst view of \\spad{s}. Left at the discretion of the compiler.") (((|InAst|) $) "\\spad{autoCoerce(s)} returns the InAst view of `s'. Left at the discretion of the compiler.") (((|WhileAst|) $) "\\spad{autoCoerce(s)} returns the WhileAst view of `s'. Left at the discretion of the compiler.") (((|RepeatAst|) $) "\\spad{autoCoerce(s)} returns the RepeatAst view of `s'. Left at the discretion of the compiler.") (((|IfAst|) $) "\\spad{autoCoerce(s)} returns the IfAst view of `s'. Left at the discretion of the compiler.") (((|MappingAst|) $) "\\spad{autoCoerce(s)} returns the MappingAst view of `s'. Left at the discretion of the compiler.") (((|AttributeAst|) $) "\\spad{autoCoerce(s)} returns the AttributeAst view of `s'. Left at the discretion of the compiler.") (((|SignatureAst|) $) "\\spad{autoCoerce(s)} returns the SignatureAst view of `s'. Left at the discretion of the compiler.") (((|CapsuleAst|) $) "\\spad{autoCoerce(s)} returns the CapsuleAst view of `s'. Left at the discretion of the compiler.") (((|JoinAst|) $) "\\spad{autoCoerce(s)} returns the \\spadype{JoinAst} view of of the AST object \\spad{s}. Left at the discretion of the compiler.") (((|CategoryAst|) $) "\\spad{autoCoerce(s)} returns the CategoryAst view of `s'. Left at the discretion of the compiler.") (((|WhereAst|) $) "\\spad{autoCoerce(s)} returns the WhereAst view of `s'. Left at the discretion of the compiler.") (((|MacroAst|) $) "\\spad{autoCoerce(s)} returns the MacroAst view of `s'. Left at the discretion of the compiler.") (((|DefinitionAst|) $) "\\spad{autoCoerce(s)} returns the DefinitionAst view of `s'. Left at the discretion of the compiler.") (((|ImportAst|) $) "\\spad{autoCoerce(s)} returns the ImportAst view of `s'. Left at the discretion of the compiler.")) (|case| (((|Boolean|) $ (|[\|\|]| (|Integer|))) "\\spad{s case Integer} holds if `s' represents an integer literal.") (((|Boolean|) $ (|[\|\|]| (|String|))) "\\spad{s case String} holds if `s' represents a string literal.") (((|Boolean|) $ (|[\|\|]| (|Identifier|))) "\\spad{s case Identifier} holds if `s' represents an identifier.") (((|Boolean|) $ (|[\|\|]| (|IsAst|))) "\\spad{s case IsAst} holds if `s' represents an is-expression.") (((|Boolean|) $ (|[\|\|]| (|HasAst|))) "\\spad{s case HasAst} holds if `s' represents a has-expression.") (((|Boolean|) $ (|[\|\|]| (|CaseAst|))) "\\spad{s case CaseAst} holds if `s' represents a case-expression.") (((|Boolean|) $ (|[\|\|]| (|ColonAst|))) "\\spad{s case ColonAst} holds if `s' represents a colon-expression.") (((|Boolean|) $ (|[\|\|]| (|SuchThatAst|))) "\\spad{s case SuchThatAst} holds if `s' represents a qualified-expression.") (((|Boolean|) $ (|[\|\|]| (|LetAst|))) "\\spad{s case LetAst} holds if `s' represents an assignment-expression.") (((|Boolean|) $ (|[\|\|]| (|SequenceAst|))) "\\spad{s case SequenceAst} holds if `s' represents a sequence-of-statements.") (((|Boolean|) $ (|[\|\|]| (|SegmentAst|))) "\\spad{s case SegmentAst} holds if `s' represents a segment-expression.") (((|Boolean|) $ (|[\|\|]| (|RestrictAst|))) "\\spad{s case RestrictAst} holds if `s' represents a restrict-expression.") (((|Boolean|) $ (|[\|\|]| (|PretendAst|))) "\\spad{s case PretendAst} holds if `s' represents a pretend-expression.") (((|Boolean|) $ (|[\|\|]| (|CoerceAst|))) "\\spad{s case ReturnAst} holds if `s' represents a coerce-expression.") (((|Boolean|) $ (|[\|\|]| (|ReturnAst|))) "\\spad{s case ReturnAst} holds if `s' represents a return-statement.") (((|Boolean|) $ (|[\|\|]| (|ExitAst|))) "\\spad{s case ExitAst} holds if `s' represents an exit-expression.") (((|Boolean|) $ (|[\|\|]| (|ConstructAst|))) "\\spad{s case ConstructAst} holds if `s' represents a list-expression.") (((|Boolean|) $ (|[\|\|]| (|CollectAst|))) "\\spad{s case CollectAst} holds if `s' represents a list-comprehension.") (((|Boolean|) $ (|[\|\|]| (|StepAst|))) "\\spad{s case StepAst} holds if \\spad{s} represents an arithmetic progression iterator.") (((|Boolean|) $ (|[\|\|]| (|InAst|))) "\\spad{s case InAst} holds if `s' represents a in-iterator") (((|Boolean|) $ (|[\|\|]| (|WhileAst|))) "\\spad{s case WhileAst} holds if `s' represents a while-iterator") (((|Boolean|) $ (|[\|\|]| (|RepeatAst|))) "\\spad{s case RepeatAst} holds if `s' represents an repeat-loop.") (((|Boolean|) $ (|[\|\|]| (|IfAst|))) "\\spad{s case IfAst} holds if `s' represents an if-statement.") (((|Boolean|) $ (|[\|\|]| (|MappingAst|))) "\\spad{s case MappingAst} holds if `s' represents a mapping type.") (((|Boolean|) $ (|[\|\|]| (|AttributeAst|))) "\\spad{s case AttributeAst} holds if `s' represents an attribute.") (((|Boolean|) $ (|[\|\|]| (|SignatureAst|))) "\\spad{s case SignatureAst} holds if `s' represents a signature export.") (((|Boolean|) $ (|[\|\|]| (|CapsuleAst|))) "\\spad{s case CapsuleAst} holds if `s' represents a domain capsule.") (((|Boolean|) $ (|[\|\|]| (|JoinAst|))) "\\spad{s case JoinAst} holds is the syntax object \\spad{s} denotes the join of several categories.") (((|Boolean|) $ (|[\|\|]| (|CategoryAst|))) "\\spad{s case CategoryAst} holds if `s' represents an unnamed category.") (((|Boolean|) $ (|[\|\|]| (|WhereAst|))) "\\spad{s case WhereAst} holds if `s' represents an expression with local definitions.") (((|Boolean|) $ (|[\|\|]| (|MacroAst|))) "\\spad{s case MacroAst} holds if `s' represents a macro definition.") (((|Boolean|) $ (|[\|\|]| (|DefinitionAst|))) "\\spad{s case DefinitionAst} holds if `s' represents a definition.") (((|Boolean|) $ (|[\|\|]| (|ImportAst|))) "\\spad{s case ImportAst} holds if `s' represents an `import' statement."))) 
NIL 
NIL 
(-1051) 
((|constructor| (NIL "SpecialOutputPackage allows FORTRAN,{} Tex and \\indented{2}{Script Formula Formatter output from programs.}")) (|outputAsTex| (((|Void|) (|List| (|OutputForm|))) "\\spad{outputAsTex(l)} sends (for each expression in the list \\spad{l}) output in Tex format to the destination as defined by \\spadsyscom{set output tex}.") (((|Void|) (|OutputForm|)) "\\spad{outputAsTex(o)} sends output \\spad{o} in Tex format to the destination defined by \\spadsyscom{set output tex}.")) (|outputAsScript| (((|Void|) (|List| (|OutputForm|))) "\\spad{outputAsScript(l)} sends (for each expression in the list \\spad{l}) output in Script Formula Formatter format to the destination defined. by \\spadsyscom{set output forumula}.") (((|Void|) (|OutputForm|)) "\\spad{outputAsScript(o)} sends output \\spad{o} in Script Formula Formatter format to the destination defined by \\spadsyscom{set output formula}.")) (|outputAsFortran| (((|Void|) (|List| (|OutputForm|))) "\\spad{outputAsFortran(l)} sends (for each expression in the list \\spad{l}) output in FORTRAN format to the destination defined by \\spadsyscom{set output fortran}.") (((|Void|) (|OutputForm|)) "\\spad{outputAsFortran(o)} sends output \\spad{o} in FORTRAN format.") (((|Void|) (|String|) (|OutputForm|)) "\\spad{outputAsFortran(v,o)} sends output \\spad{v} = \\spad{o} in FORTRAN format to the destination defined by \\spadsyscom{set output fortran}."))) 
NIL 
NIL 
(-1052) 
((|constructor| (NIL "Category for the other special functions.")) (|airyBi| (($ $) "\\spad{airyBi(x)} is the Airy function \\spad{Bi(x)}.")) (|airyAi| (($ $) "\\spad{airyAi(x)} is the Airy function \\spad{Ai(x)}.")) (|besselK| (($ $ $) "\\spad{besselK(v,z)} is the modified Bessel function of the second kind.")) (|besselI| (($ $ $) "\\spad{besselI(v,z)} is the modified Bessel function of the first kind.")) (|besselY| (($ $ $) "\\spad{besselY(v,z)} is the Bessel function of the second kind.")) (|besselJ| (($ $ $) "\\spad{besselJ(v,z)} is the Bessel function of the first kind.")) (|polygamma| (($ $ $) "\\spad{polygamma(k,x)} is the \\spad{k-th} derivative of \\spad{digamma(x)},{} (often written \\spad{psi(k,x)} in the literature).")) (|digamma| (($ $) "\\spad{digamma(x)} is the logarithmic derivative of \\spad{Gamma(x)} (often written \\spad{psi(x)} in the literature).")) (|Beta| (($ $ $) "\\spad{Beta(x,y)} is \\spad{Gamma(x) * Gamma(y)/Gamma(x+y)}.")) (|Gamma| (($ $ $) "\\spad{Gamma(a,x)} is the incomplete Gamma function.") (($ $) "\\spad{Gamma(x)} is the Euler Gamma function.")) (|abs| (($ $) "\\spad{abs(x)} returns the absolute value of \\spad{x}."))) 
NIL 
NIL 
(-1053 V C) 
((|constructor| (NIL "This domain exports a modest implementation for the vertices of splitting trees. These vertices are called here splitting nodes. Every of these nodes store 3 informations. The first one is its value,{} that is the current expression to evaluate. The second one is its condition,{} that is the hypothesis under which the value has to be evaluated. The last one is its status,{} that is a boolean flag which is \\spad{true} iff the value is the result of its evaluation under its condition. Two splitting vertices are equal iff they have the sane values and the same conditions (so their status do not matter).")) (|subNode?| (((|Boolean|) $ $ (|Mapping| (|Boolean|) |#2| |#2|)) "\\axiom{subNode?(\\spad{n1},{}\\spad{n2},{}\\spad{o2})} returns \\spad{true} iff \\axiom{value(\\spad{n1}) = value(\\spad{n2})} and \\axiom{\\spad{o2}(condition(\\spad{n1}),{}condition(\\spad{n2}))}")) (|infLex?| (((|Boolean|) $ $ (|Mapping| (|Boolean|) |#1| |#1|) (|Mapping| (|Boolean|) |#2| |#2|)) "\\axiom{infLex?(\\spad{n1},{}\\spad{n2},{}\\spad{o1},{}\\spad{o2})} returns \\spad{true} iff \\axiom{\\spad{o1}(value(\\spad{n1}),{}value(\\spad{n2}))} or \\axiom{value(\\spad{n1}) = value(\\spad{n2})} and \\axiom{\\spad{o2}(condition(\\spad{n1}),{}condition(\\spad{n2}))}.")) (|setEmpty!| (($ $) "\\axiom{setEmpty!(\\spad{n})} replaces \\spad{n} by \\axiom{empty()\\$\\%}.")) (|setStatus!| (($ $ (|Boolean|)) "\\axiom{setStatus!(\\spad{n},{}\\spad{b})} returns \\spad{n} whose status has been replaced by \\spad{b} if it is not empty,{} else an error is produced.")) (|setCondition!| (($ $ |#2|) "\\axiom{setCondition!(\\spad{n},{}\\spad{t})} returns \\spad{n} whose condition has been replaced by \\spad{t} if it is not empty,{} else an error is produced.")) (|setValue!| (($ $ |#1|) "\\axiom{setValue!(\\spad{n},{}\\spad{v})} returns \\spad{n} whose value has been replaced by \\spad{v} if it is not empty,{} else an error is produced.")) (|copy| (($ $) "\\axiom{copy(\\spad{n})} returns a copy of \\spad{n}.")) (|construct| (((|List| $) |#1| (|List| |#2|)) "\\axiom{construct(\\spad{v},{}lt)} returns the same as \\axiom{[construct(\\spad{v},{}\\spad{t}) for \\spad{t} in lt]}") (((|List| $) (|List| (|Record| (|:| |val| |#1|) (|:| |tower| |#2|)))) "\\axiom{construct(lvt)} returns the same as \\axiom{[construct(vt.val,{}vt.tower) for vt in lvt]}") (($ (|Record| (|:| |val| |#1|) (|:| |tower| |#2|))) "\\axiom{construct(vt)} returns the same as \\axiom{construct(vt.val,{}vt.tower)}") (($ |#1| |#2|) "\\axiom{construct(\\spad{v},{}\\spad{t})} returns the same as \\axiom{construct(\\spad{v},{}\\spad{t},{}\\spad{false})}") (($ |#1| |#2| (|Boolean|)) "\\axiom{construct(\\spad{v},{}\\spad{t},{}\\spad{b})} returns the non-empty node with value \\spad{v},{} condition \\spad{t} and flag \\spad{b}")) (|status| (((|Boolean|) $) "\\axiom{status(\\spad{n})} returns the status of the node \\spad{n}.")) (|condition| ((|#2| $) "\\axiom{condition(\\spad{n})} returns the condition of the node \\spad{n}.")) (|value| ((|#1| $) "\\axiom{value(\\spad{n})} returns the value of the node \\spad{n}.")) (|empty?| (((|Boolean|) $) "\\axiom{empty?(\\spad{n})} returns \\spad{true} iff the node \\spad{n} is \\axiom{empty()\\$\\%}.")) (|empty| (($) "\\axiom{empty()} returns the same as \\axiom{[empty()\\$\\spad{V},{}empty()\\$\\spad{C},{}\\spad{false}]\\$\\%}"))) 
NIL 
NIL 
(-1054 V C) 
((|constructor| (NIL "This domain exports a modest implementation of splitting trees. Spliiting trees are needed when the evaluation of some quantity under some hypothesis requires to split the hypothesis into sub-cases. For instance by adding some new hypothesis on one hand and its negation on another hand. The computations are terminated is a splitting tree \\axiom{a} when \\axiom{status(value(a))} is \\axiom{\\spad{true}}. Thus,{} if for the splitting tree \\axiom{a} the flag \\axiom{status(value(a))} is \\axiom{\\spad{true}},{} then \\axiom{status(value(\\spad{d}))} is \\axiom{\\spad{true}} for any subtree \\axiom{\\spad{d}} of \\axiom{a}. This property of splitting trees is called the termination condition. If no vertex in a splitting tree \\axiom{a} is equal to another,{} \\axiom{a} is said to satisfy the no-duplicates condition. The splitting tree \\axiom{a} will satisfy this condition if nodes are added to \\axiom{a} by mean of \\axiom{splitNodeOf!} and if \\axiom{construct} is only used to create the root of \\axiom{a} with no children.")) (|splitNodeOf!| (($ $ $ (|List| (|SplittingNode| |#1| |#2|)) (|Mapping| (|Boolean|) |#2| |#2|)) "\\axiom{splitNodeOf!(\\spad{l},{}a,{}ls,{}sub?)} returns \\axiom{a} where the children list of \\axiom{\\spad{l}} has been set to \\axiom{[[\\spad{s}]\\$\\% for \\spad{s} in ls | not subNodeOf?(\\spad{s},{}a,{}sub?)]}. Thus,{} if \\axiom{\\spad{l}} is not a node of \\axiom{a},{} this latter splitting tree is unchanged.") (($ $ $ (|List| (|SplittingNode| |#1| |#2|))) "\\axiom{splitNodeOf!(\\spad{l},{}a,{}ls)} returns \\axiom{a} where the children list of \\axiom{\\spad{l}} has been set to \\axiom{[[\\spad{s}]\\$\\% for \\spad{s} in ls | not nodeOf?(\\spad{s},{}a)]}. Thus,{} if \\axiom{\\spad{l}} is not a node of \\axiom{a},{} this latter splitting tree is unchanged.")) (|remove!| (($ (|SplittingNode| |#1| |#2|) $) "\\axiom{remove!(\\spad{s},{}a)} replaces a by remove(\\spad{s},{}a)")) (|remove| (($ (|SplittingNode| |#1| |#2|) $) "\\axiom{remove(\\spad{s},{}a)} returns the splitting tree obtained from a by removing every sub-tree \\axiom{\\spad{b}} such that \\axiom{value(\\spad{b})} and \\axiom{\\spad{s}} have the same value,{} condition and status.")) (|subNodeOf?| (((|Boolean|) (|SplittingNode| |#1| |#2|) $ (|Mapping| (|Boolean|) |#2| |#2|)) "\\axiom{subNodeOf?(\\spad{s},{}a,{}sub?)} returns \\spad{true} iff for some node \\axiom{\\spad{n}} in \\axiom{a} we have \\axiom{\\spad{s} = \\spad{n}} or \\axiom{status(\\spad{n})} and \\axiom{subNode?(\\spad{s},{}\\spad{n},{}sub?)}.")) (|nodeOf?| (((|Boolean|) (|SplittingNode| |#1| |#2|) $) "\\axiom{nodeOf?(\\spad{s},{}a)} returns \\spad{true} iff some node of \\axiom{a} is equal to \\axiom{\\spad{s}}")) (|result| (((|List| (|Record| (|:| |val| |#1|) (|:| |tower| |#2|))) $) "\\axiom{result(a)} where \\axiom{ls} is the leaves list of \\axiom{a} returns \\axiom{[[value(\\spad{s}),{}condition(\\spad{s})]\\$VT for \\spad{s} in ls]} if the computations are terminated in \\axiom{a} else an error is produced.")) (|conditions| (((|List| |#2|) $) "\\axiom{conditions(a)} returns the list of the conditions of the leaves of a")) (|construct| (($ |#1| |#2| |#1| (|List| |#2|)) "\\axiom{construct(\\spad{v1},{}\\spad{t},{}\\spad{v2},{}lt)} creates a splitting tree with value (\\spadignore{i.e.} root vertex) given by \\axiom{[\\spad{v},{}\\spad{t}]\\$\\spad{S}} and with children list given by \\axiom{[[[\\spad{v},{}\\spad{t}]\\$\\spad{S}]\\$\\% for \\spad{s} in ls]}.") (($ |#1| |#2| (|List| (|SplittingNode| |#1| |#2|))) "\\axiom{construct(\\spad{v},{}\\spad{t},{}ls)} creates a splitting tree with value (\\spadignore{i.e.} root vertex) given by \\axiom{[\\spad{v},{}\\spad{t}]\\$\\spad{S}} and with children list given by \\axiom{[[\\spad{s}]\\$\\% for \\spad{s} in ls]}.") (($ |#1| |#2| (|List| $)) "\\axiom{construct(\\spad{v},{}\\spad{t},{}la)} creates a splitting tree with value (\\spadignore{i.e.} root vertex) given by \\axiom{[\\spad{v},{}\\spad{t}]\\$\\spad{S}} and with \\axiom{la} as children list.") (($ (|SplittingNode| |#1| |#2|)) "\\axiom{construct(\\spad{s})} creates a splitting tree with value (\\spadignore{i.e.} root vertex) given by \\axiom{\\spad{s}} and no children. Thus,{} if the status of \\axiom{\\spad{s}} is \\spad{false},{} \\axiom{[\\spad{s}]} represents the starting point of the evaluation \\axiom{value(\\spad{s})} under the hypothesis \\axiom{condition(\\spad{s})}.")) (|updateStatus!| (($ $) "\\axiom{updateStatus!(a)} returns a where the status of the vertices are updated to satisfy the \"termination condition\".")) (|extractSplittingLeaf| (((|Union| $ "failed") $) "\\axiom{extractSplittingLeaf(a)} returns the left most leaf (as a tree) whose status is \\spad{false} if any,{} else \"failed\" is returned."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-1053 |#1| |#2|) (|%list| (QUOTE -260) (|%list| (QUOTE -1053) (|devaluate| |#1|) (|devaluate| |#2|)))) (|HasCategory| (-1053 |#1| |#2|) (QUOTE (-1013)))) (|HasCategory| (-1053 |#1| |#2|) (QUOTE (-1013))) (OR (|HasCategory| (-1053 |#1| |#2|) (QUOTE (-72))) (|HasCategory| (-1053 |#1| |#2|) (QUOTE (-1013)))) (|HasCategory| (-1053 |#1| |#2|) (QUOTE (-552 (-772)))) (|HasCategory| (-1053 |#1| |#2|) (QUOTE (-72)))) 
(-1055 |ndim| R) 
((|constructor| (NIL "\\spadtype{SquareMatrix} is a matrix domain of square matrices,{} where the number of rows (= number of columns) is a parameter of the type.")) (|unitsKnown| ((|attribute|) "the invertible matrices are simply the matrices whose determinants are units in the Ring \\spad{R}.")) (|central| ((|attribute|) "the elements of the Ring \\spad{R},{} viewed as diagonal matrices,{} commute with all matrices and,{} indeed,{} are the only matrices which commute with all matrices.")) (|squareMatrix| (($ (|Matrix| |#2|)) "\\spad{squareMatrix(m)} converts a matrix of type \\spadtype{Matrix} to a matrix of type \\spadtype{SquareMatrix}.")) (|transpose| (($ $) "\\spad{transpose(m)} returns the transpose of the matrix \\spad{m}.")) (|new| (($ |#2|) "\\spad{new(c)} constructs a new \\spadtype{SquareMatrix} object of dimension \\spad{ndim} with initial entries equal to \\spad{c}."))) 
((-3991 . T) (-3983 |has| |#2| (-6 (-3996 "*"))) (-3994 . T) (-3988 . T) (-3989 . T)) 
((|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-189))) (|HasAttribute| |#2| (QUOTE (-3996 #1="*"))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|))))) (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| |#2| (QUOTE (-258))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-312))) (OR (|HasAttribute| |#2| (QUOTE (-3996 #1#))) (|HasCategory| |#2| (QUOTE (-190))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-72))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| |#2| (QUOTE (-146)))) 
(-1056 S) 
((|constructor| (NIL "A string aggregate is a category for strings,{} that is,{} one dimensional arrays of characters.")) (|elt| (($ $ $) "\\spad{elt(s,t)} returns the concatenation of \\spad{s} and \\spad{t}. It is provided to allow juxtaposition of strings to work as concatenation. For example,{} \\axiom{\"smoo\" \"shed\"} returns \\axiom{\"smooshed\"}.")) (|rightTrim| (($ $ (|CharacterClass|)) "\\spad{rightTrim(s,cc)} returns \\spad{s} with all trailing occurences of characters in \\spad{cc} deleted. For example,{} \\axiom{rightTrim(\"(abc)\",{} charClass \"()\")} returns \\axiom{\"(abc\"}.") (($ $ (|Character|)) "\\spad{rightTrim(s,c)} returns \\spad{s} with all trailing occurrences of \\spad{c} deleted. For example,{} \\axiom{rightTrim(\" abc \",{} char \" \")} returns \\axiom{\" abc\"}.")) (|leftTrim| (($ $ (|CharacterClass|)) "\\spad{leftTrim(s,cc)} returns \\spad{s} with all leading characters in \\spad{cc} deleted. For example,{} \\axiom{leftTrim(\"(abc)\",{} charClass \"()\")} returns \\axiom{\"abc)\"}.") (($ $ (|Character|)) "\\spad{leftTrim(s,c)} returns \\spad{s} with all leading characters \\spad{c} deleted. For example,{} \\axiom{leftTrim(\" abc \",{} char \" \")} returns \\axiom{\"abc \"}.")) (|trim| (($ $ (|CharacterClass|)) "\\spad{trim(s,cc)} returns \\spad{s} with all characters in \\spad{cc} deleted from right and left ends. For example,{} \\axiom{trim(\"(abc)\",{} charClass \"()\")} returns \\axiom{\"abc\"}.") (($ $ (|Character|)) "\\spad{trim(s,c)} returns \\spad{s} with all characters \\spad{c} deleted from right and left ends. For example,{} \\axiom{trim(\" abc \",{} char \" \")} returns \\axiom{\"abc\"}.")) (|split| (((|List| $) $ (|CharacterClass|)) "\\spad{split(s,cc)} returns a list of substrings delimited by characters in \\spad{cc}.") (((|List| $) $ (|Character|)) "\\spad{split(s,c)} returns a list of substrings delimited by character \\spad{c}.")) (|coerce| (($ (|Character|)) "\\spad{coerce(c)} returns \\spad{c} as a string \\spad{s} with the character \\spad{c}.")) (|position| (((|Integer|) (|CharacterClass|) $ (|Integer|)) "\\spad{position(cc,t,i)} returns the position \\axiom{\\spad{j} >= \\spad{i}} in \\spad{t} of the first character belonging to \\spad{cc}.") (((|Integer|) $ $ (|Integer|)) "\\spad{position(s,t,i)} returns the position \\spad{j} of the substring \\spad{s} in string \\spad{t},{} where \\axiom{\\spad{j} >= \\spad{i}} is required.")) (|replace| (($ $ (|UniversalSegment| (|Integer|)) $) "\\spad{replace(s,i..j,t)} replaces the substring \\axiom{\\spad{s}(\\spad{i}..\\spad{j})} of \\spad{s} by string \\spad{t}.")) (|match?| (((|Boolean|) $ $ (|Character|)) "\\spad{match?(s,t,c)} tests if \\spad{s} matches \\spad{t} except perhaps for multiple and consecutive occurrences of character \\spad{c}. Typically \\spad{c} is the blank character.")) (|match| (((|NonNegativeInteger|) $ $ (|Character|)) "\\spad{match(p,s,wc)} tests if pattern \\axiom{\\spad{p}} matches subject \\axiom{\\spad{s}} where \\axiom{\\spad{wc}} is a wild card character. If no match occurs,{} the index \\axiom{0} is returned; otheriwse,{} the value returned is the first index of the first character in the subject matching the subject (excluding that matched by an initial wild-card). For example,{} \\axiom{match(\"*to*\",{}\"yorktown\",{}\"*\")} returns \\axiom{5} indicating a successful match starting at index \\axiom{5} of \\axiom{\"yorktown\"}.")) (|substring?| (((|Boolean|) $ $ (|Integer|)) "\\spad{substring?(s,t,i)} tests if \\spad{s} is a substring of \\spad{t} beginning at index \\spad{i}. Note: \\axiom{substring?(\\spad{s},{}\\spad{t},{}0) = prefix?(\\spad{s},{}\\spad{t})}.")) (|suffix?| (((|Boolean|) $ $) "\\spad{suffix?(s,t)} tests if the string \\spad{s} is the final substring of \\spad{t}. Note: \\axiom{suffix?(\\spad{s},{}\\spad{t}) == reduce(and,{}[\\spad{s}.\\spad{i} = \\spad{t}.(\\spad{n} - \\spad{m} + \\spad{i}) for \\spad{i} in 0..maxIndex \\spad{s}])} where \\spad{m} and \\spad{n} denote the maxIndex of \\spad{s} and \\spad{t} respectively.")) (|prefix?| (((|Boolean|) $ $) "\\spad{prefix?(s,t)} tests if the string \\spad{s} is the initial substring of \\spad{t}. Note: \\axiom{prefix?(\\spad{s},{}\\spad{t}) == reduce(and,{}[\\spad{s}.\\spad{i} = \\spad{t}.\\spad{i} for \\spad{i} in 0..maxIndex \\spad{s}])}.")) (|upperCase!| (($ $) "\\spad{upperCase!(s)} destructively replaces the alphabetic characters in \\spad{s} by upper case characters.")) (|upperCase| (($ $) "\\spad{upperCase(s)} returns the string with all characters in upper case.")) (|lowerCase!| (($ $) "\\spad{lowerCase!(s)} destructively replaces the alphabetic characters in \\spad{s} by lower case.")) (|lowerCase| (($ $) "\\spad{lowerCase(s)} returns the string with all characters in lower case."))) 
NIL 
NIL 
(-1057) 
((|constructor| (NIL "A string aggregate is a category for strings,{} that is,{} one dimensional arrays of characters.")) (|elt| (($ $ $) "\\spad{elt(s,t)} returns the concatenation of \\spad{s} and \\spad{t}. It is provided to allow juxtaposition of strings to work as concatenation. For example,{} \\axiom{\"smoo\" \"shed\"} returns \\axiom{\"smooshed\"}.")) (|rightTrim| (($ $ (|CharacterClass|)) "\\spad{rightTrim(s,cc)} returns \\spad{s} with all trailing occurences of characters in \\spad{cc} deleted. For example,{} \\axiom{rightTrim(\"(abc)\",{} charClass \"()\")} returns \\axiom{\"(abc\"}.") (($ $ (|Character|)) "\\spad{rightTrim(s,c)} returns \\spad{s} with all trailing occurrences of \\spad{c} deleted. For example,{} \\axiom{rightTrim(\" abc \",{} char \" \")} returns \\axiom{\" abc\"}.")) (|leftTrim| (($ $ (|CharacterClass|)) "\\spad{leftTrim(s,cc)} returns \\spad{s} with all leading characters in \\spad{cc} deleted. For example,{} \\axiom{leftTrim(\"(abc)\",{} charClass \"()\")} returns \\axiom{\"abc)\"}.") (($ $ (|Character|)) "\\spad{leftTrim(s,c)} returns \\spad{s} with all leading characters \\spad{c} deleted. For example,{} \\axiom{leftTrim(\" abc \",{} char \" \")} returns \\axiom{\"abc \"}.")) (|trim| (($ $ (|CharacterClass|)) "\\spad{trim(s,cc)} returns \\spad{s} with all characters in \\spad{cc} deleted from right and left ends. For example,{} \\axiom{trim(\"(abc)\",{} charClass \"()\")} returns \\axiom{\"abc\"}.") (($ $ (|Character|)) "\\spad{trim(s,c)} returns \\spad{s} with all characters \\spad{c} deleted from right and left ends. For example,{} \\axiom{trim(\" abc \",{} char \" \")} returns \\axiom{\"abc\"}.")) (|split| (((|List| $) $ (|CharacterClass|)) "\\spad{split(s,cc)} returns a list of substrings delimited by characters in \\spad{cc}.") (((|List| $) $ (|Character|)) "\\spad{split(s,c)} returns a list of substrings delimited by character \\spad{c}.")) (|coerce| (($ (|Character|)) "\\spad{coerce(c)} returns \\spad{c} as a string \\spad{s} with the character \\spad{c}.")) (|position| (((|Integer|) (|CharacterClass|) $ (|Integer|)) "\\spad{position(cc,t,i)} returns the position \\axiom{\\spad{j} >= \\spad{i}} in \\spad{t} of the first character belonging to \\spad{cc}.") (((|Integer|) $ $ (|Integer|)) "\\spad{position(s,t,i)} returns the position \\spad{j} of the substring \\spad{s} in string \\spad{t},{} where \\axiom{\\spad{j} >= \\spad{i}} is required.")) (|replace| (($ $ (|UniversalSegment| (|Integer|)) $) "\\spad{replace(s,i..j,t)} replaces the substring \\axiom{\\spad{s}(\\spad{i}..\\spad{j})} of \\spad{s} by string \\spad{t}.")) (|match?| (((|Boolean|) $ $ (|Character|)) "\\spad{match?(s,t,c)} tests if \\spad{s} matches \\spad{t} except perhaps for multiple and consecutive occurrences of character \\spad{c}. Typically \\spad{c} is the blank character.")) (|match| (((|NonNegativeInteger|) $ $ (|Character|)) "\\spad{match(p,s,wc)} tests if pattern \\axiom{\\spad{p}} matches subject \\axiom{\\spad{s}} where \\axiom{\\spad{wc}} is a wild card character. If no match occurs,{} the index \\axiom{0} is returned; otheriwse,{} the value returned is the first index of the first character in the subject matching the subject (excluding that matched by an initial wild-card). For example,{} \\axiom{match(\"*to*\",{}\"yorktown\",{}\"*\")} returns \\axiom{5} indicating a successful match starting at index \\axiom{5} of \\axiom{\"yorktown\"}.")) (|substring?| (((|Boolean|) $ $ (|Integer|)) "\\spad{substring?(s,t,i)} tests if \\spad{s} is a substring of \\spad{t} beginning at index \\spad{i}. Note: \\axiom{substring?(\\spad{s},{}\\spad{t},{}0) = prefix?(\\spad{s},{}\\spad{t})}.")) (|suffix?| (((|Boolean|) $ $) "\\spad{suffix?(s,t)} tests if the string \\spad{s} is the final substring of \\spad{t}. Note: \\axiom{suffix?(\\spad{s},{}\\spad{t}) == reduce(and,{}[\\spad{s}.\\spad{i} = \\spad{t}.(\\spad{n} - \\spad{m} + \\spad{i}) for \\spad{i} in 0..maxIndex \\spad{s}])} where \\spad{m} and \\spad{n} denote the maxIndex of \\spad{s} and \\spad{t} respectively.")) (|prefix?| (((|Boolean|) $ $) "\\spad{prefix?(s,t)} tests if the string \\spad{s} is the initial substring of \\spad{t}. Note: \\axiom{prefix?(\\spad{s},{}\\spad{t}) == reduce(and,{}[\\spad{s}.\\spad{i} = \\spad{t}.\\spad{i} for \\spad{i} in 0..maxIndex \\spad{s}])}.")) (|upperCase!| (($ $) "\\spad{upperCase!(s)} destructively replaces the alphabetic characters in \\spad{s} by upper case characters.")) (|upperCase| (($ $) "\\spad{upperCase(s)} returns the string with all characters in upper case.")) (|lowerCase!| (($ $) "\\spad{lowerCase!(s)} destructively replaces the alphabetic characters in \\spad{s} by lower case.")) (|lowerCase| (($ $) "\\spad{lowerCase(s)} returns the string with all characters in lower case."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-1058 R E V P TS) 
((|constructor| (NIL "A package providing a new algorithm for solving polynomial systems by means of regular chains. Two ways of solving are provided: in the sense of Zariski closure (like in Kalkbrener's algorithm) or in the sense of the regular zeros (like in Wu,{} Wang or Lazard- Moreno methods). This algorithm is valid for nay type of regular set. It does not care about the way a polynomial is added in an regular set,{} or how two quasi-components are compared (by an inclusion-test),{} or how the invertibility test is made in the tower of simple extensions associated with a regular set. These operations are realized respectively by the domain \\spad{TS} and the packages \\spad{QCMPPK(R,E,V,P,TS)} and \\spad{RSETGCD(R,E,V,P,TS)}. The same way it does not care about the way univariate polynomial gcds (with coefficients in the tower of simple extensions associated with a regular set) are computed. The only requirement is that these gcds need to have invertible initials (normalized or not). WARNING. There is no need for a user to call diectly any operation of this package since they can be accessed by the domain \\axiomType{TS}. Thus,{} the operations of this package are not documented.\\newline References : \\indented{1}{[1] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.}"))) 
NIL 
NIL 
(-1059 R E V P) 
((|constructor| (NIL "This domain provides an implementation of square-free regular chains. Moreover,{} the operation \\axiomOpFrom{zeroSetSplit}{SquareFreeRegularTriangularSetCategory} is an implementation of a new algorithm for solving polynomial systems by means of regular chains.\\newline References : \\indented{1}{[1] \\spad{M}. MORENO MAZA \"A new algorithm for computing triangular} \\indented{5}{decomposition of algebraic varieties\" NAG Tech. Rep. 4/98.} \\indented{2}{Version: 2}")) (|preprocess| (((|Record| (|:| |val| (|List| |#4|)) (|:| |towers| (|List| $))) (|List| |#4|) (|Boolean|) (|Boolean|)) "\\axiom{pre_process(lp,{}\\spad{b1},{}\\spad{b2})} is an internal subroutine,{} exported only for developement.")) (|internalZeroSetSplit| (((|List| $) (|List| |#4|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{internalZeroSetSplit(lp,{}\\spad{b1},{}\\spad{b2},{}\\spad{b3})} is an internal subroutine,{} exported only for developement.")) (|zeroSetSplit| (((|List| $) (|List| |#4|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{}\\spad{b1},{}\\spad{b2}.\\spad{b3},{}\\spad{b4})} is an internal subroutine,{} exported only for developement.") (((|List| $) (|List| |#4|) (|Boolean|) (|Boolean|)) "\\axiom{zeroSetSplit(lp,{}clos?,{}info?)} has the same specifications as \\axiomOpFrom{zeroSetSplit}{RegularTriangularSetCategory} from \\spadtype{RegularTriangularSetCategory} Moreover,{} if \\axiom{clos?} then solves in the sense of the Zariski closure else solves in the sense of the regular zeros. If \\axiom{info?} then do print messages during the computations.")) (|internalAugment| (((|List| $) |#4| $ (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|) (|Boolean|)) "\\axiom{internalAugment(\\spad{p},{}ts,{}\\spad{b1},{}\\spad{b2},{}\\spad{b3},{}\\spad{b4},{}\\spad{b5})} is an internal subroutine,{} exported only for developement."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (|HasCategory| |#4| (QUOTE (-553 (-473)))) (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-552 (-772)))) (|HasCategory| |#4| (QUOTE (-72)))) 
(-1060) 
((|constructor| (NIL "The category of all semiring structures,{} \\spadignore{e.g.} triples (\\spad{D},{}+,{}*) such that (\\spad{D},{}+) is an Abelian monoid and (\\spad{D},{}*) is a monoid with the following laws:"))) 
NIL 
NIL 
(-1061 S) 
((|constructor| (NIL "Linked List implementation of a Stack")) (|stack| (($ (|List| |#1|)) "\\spad{stack([x,y,...,z])} creates a stack with first (top) element \\spad{x},{} second element \\spad{y},{}...,{}and last element \\spad{z}."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-1062 A S) 
((|constructor| (NIL "A stream aggregate is a linear aggregate which possibly has an infinite number of elements. A basic domain constructor which builds stream aggregates is \\spadtype{Stream}. From streams,{} a number of infinite structures such power series can be built. A stream aggregate may also be infinite since it may be cyclic. For example,{} see \\spadtype{DecimalExpansion}.")) (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) "\\spad{size?(u,n)} tests if \\spad{u} has exactly \\spad{n} elements.")) (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) "\\spad{more?(u,n)} tests if \\spad{u} has greater than \\spad{n} elements.")) (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) "\\spad{less?(u,n)} tests if \\spad{u} has less than \\spad{n} elements.")) (|possiblyInfinite?| (((|Boolean|) $) "\\spad{possiblyInfinite?(s)} tests if the stream \\spad{s} could possibly have an infinite number of elements. Note: for many datatypes,{} \\axiom{possiblyInfinite?(\\spad{s}) = not explictlyFinite?(\\spad{s})}.")) (|explicitlyFinite?| (((|Boolean|) $) "\\spad{explicitlyFinite?(s)} tests if the stream has a finite number of elements,{} and \\spad{false} otherwise. Note: for many datatypes,{} \\axiom{explicitlyFinite?(\\spad{s}) = not possiblyInfinite?(\\spad{s})}."))) 
NIL 
NIL 
(-1063 S) 
((|constructor| (NIL "A stream aggregate is a linear aggregate which possibly has an infinite number of elements. A basic domain constructor which builds stream aggregates is \\spadtype{Stream}. From streams,{} a number of infinite structures such power series can be built. A stream aggregate may also be infinite since it may be cyclic. For example,{} see \\spadtype{DecimalExpansion}.")) (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) "\\spad{size?(u,n)} tests if \\spad{u} has exactly \\spad{n} elements.")) (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) "\\spad{more?(u,n)} tests if \\spad{u} has greater than \\spad{n} elements.")) (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) "\\spad{less?(u,n)} tests if \\spad{u} has less than \\spad{n} elements.")) (|possiblyInfinite?| (((|Boolean|) $) "\\spad{possiblyInfinite?(s)} tests if the stream \\spad{s} could possibly have an infinite number of elements. Note: for many datatypes,{} \\axiom{possiblyInfinite?(\\spad{s}) = not explictlyFinite?(\\spad{s})}.")) (|explicitlyFinite?| (((|Boolean|) $) "\\spad{explicitlyFinite?(s)} tests if the stream has a finite number of elements,{} and \\spad{false} otherwise. Note: for many datatypes,{} \\axiom{explicitlyFinite?(\\spad{s}) = not possiblyInfinite?(\\spad{s})}."))) 
NIL 
NIL 
(-1064 |Key| |Ent| |dent|) 
((|constructor| (NIL "A sparse table has a default entry,{} which is returned if no other value has been explicitly stored for a key."))) 
((-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) 
(-1065) 
((|constructor| (NIL "A class of objects which can be 'stepped through'. Repeated applications of \\spadfun{nextItem} is guaranteed never to return duplicate items and only return \"failed\" after exhausting all elements of the domain. This assumes that the sequence starts with \\spad{init()}. For non-fiinite domains,{} repeated application of \\spadfun{nextItem} is not required to reach all possible domain elements starting from any initial element. \\blankline")) (|nextItem| (((|Maybe| $) $) "\\spad{nextItem(x)} returns the next item,{} or \\spad{failed} if domain is exhausted.")) (|init| (($) "\\spad{init()} chooses an initial object for stepping."))) 
NIL 
NIL 
(-1066) 
((|constructor| (NIL "This domain represents an arithmetic progression iterator syntax.")) (|step| (((|SpadAst|) $) "\\spad{step(i)} returns the Spad AST denoting the step of the arithmetic progression represented by the iterator \\spad{i}.")) (|upperBound| (((|Maybe| (|SpadAst|)) $) "If the set of values assumed by the iteration variable is bounded from above,{} \\spad{upperBound(i)} returns the upper bound. Otherwise,{} its returns \\spad{nothing}.")) (|lowerBound| (((|SpadAst|) $) "\\spad{lowerBound(i)} returns the lower bound on the values assumed by the iteration variable.")) (|iterationVar| (((|Identifier|) $) "\\spad{iterationVar(i)} returns the name of the iterating variable of the arithmetic progression iterator \\spad{i}."))) 
NIL 
NIL 
(-1067 |Coef|) 
((|constructor| (NIL "This package computes infinite products of Taylor series over an integral domain of characteristic 0. Here Taylor series are represented by streams of Taylor coefficients.")) (|generalInfiniteProduct| (((|Stream| |#1|) (|Stream| |#1|) (|Integer|) (|Integer|)) "\\spad{generalInfiniteProduct(f(x),a,d)} computes \\spad{product(n=a,a+d,a+2*d,...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|oddInfiniteProduct| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{oddInfiniteProduct(f(x))} computes \\spad{product(n=1,3,5...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|evenInfiniteProduct| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{evenInfiniteProduct(f(x))} computes \\spad{product(n=2,4,6...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1.")) (|infiniteProduct| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{infiniteProduct(f(x))} computes \\spad{product(n=1,2,3...,f(x**n))}. The series \\spad{f(x)} should have constant coefficient 1."))) 
NIL 
NIL 
(-1068 S) 
((|constructor| (NIL "A stream is an implementation of an infinite sequence using a list of terms that have been computed and a function closure to compute additional terms when needed.")) (|filterUntil| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{filterUntil(p,s)} returns \\spad{[x0,x1,...,x(n)]} where \\spad{s = [x0,x1,x2,..]} and \\spad{n} is the smallest index such that \\spad{p(xn) = true}.")) (|filterWhile| (($ (|Mapping| (|Boolean|) |#1|) $) "\\spad{filterWhile(p,s)} returns \\spad{[x0,x1,...,x(n-1)]} where \\spad{s = [x0,x1,x2,..]} and \\spad{n} is the smallest index such that \\spad{p(xn) = false}.")) (|generate| (($ (|Mapping| |#1| |#1|) |#1|) "\\spad{generate(f,x)} creates an infinite stream whose first element is \\spad{x} and whose \\spad{n}th element (\\spad{n > 1}) is \\spad{f} applied to the previous element. Note: \\spad{generate(f,x) = [x,f(x),f(f(x)),...]}.") (($ (|Mapping| |#1|)) "\\spad{generate(f)} creates an infinite stream all of whose elements are equal to \\spad{f()}. Note: \\spad{generate(f) = [f(),f(),f(),...]}.")) (|setrest!| (($ $ (|Integer|) $) "\\spad{setrest!(x,n,y)} sets rest(\\spad{x},{}\\spad{n}) to \\spad{y}. The function will expand cycles if necessary.")) (|showAll?| (((|Boolean|)) "\\spad{showAll?()} returns \\spad{true} if all computed entries of streams will be displayed.")) (|showAllElements| (((|OutputForm|) $) "\\spad{showAllElements(s)} creates an output form which displays all computed elements.")) (|output| (((|Void|) (|Integer|) $) "\\spad{output(n,st)} computes and displays the first \\spad{n} entries of \\spad{st}.")) (|cons| (($ |#1| $) "\\spad{cons(a,s)} returns a stream whose \\spad{first} is \\spad{a} and whose \\spad{rest} is \\spad{s}. Note: \\spad{cons(a,s) = concat(a,s)}.")) (|delay| (($ (|Mapping| $)) "\\spad{delay(f)} creates a stream with a lazy evaluation defined by function \\spad{f}. Caution: This function can only be called in compiled code.")) (|findCycle| (((|Record| (|:| |cycle?| (|Boolean|)) (|:| |prefix| (|NonNegativeInteger|)) (|:| |period| (|NonNegativeInteger|))) (|NonNegativeInteger|) $) "\\spad{findCycle(n,st)} determines if \\spad{st} is periodic within \\spad{n}.")) (|repeating?| (((|Boolean|) (|List| |#1|) $) "\\spad{repeating?(l,s)} returns \\spad{true} if a stream \\spad{s} is periodic with period \\spad{l},{} and \\spad{false} otherwise.")) (|repeating| (($ (|List| |#1|)) "\\spad{repeating(l)} is a repeating stream whose period is the list \\spad{l}.")) (|shallowlyMutable| ((|attribute|) "one may destructively alter a stream by assigning new values to its entries."))) 
((-3995 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-1069 S) 
((|constructor| (NIL "Functions defined on streams with entries in one set.")) (|concat| (((|Stream| |#1|) (|Stream| (|Stream| |#1|))) "\\spad{concat(u)} returns the left-to-right concatentation of the streams in \\spad{u}. Note: \\spad{concat(u) = reduce(concat,u)}."))) 
NIL 
NIL 
(-1070 A B) 
((|constructor| (NIL "Functions defined on streams with entries in two sets.")) (|reduce| ((|#2| |#2| (|Mapping| |#2| |#1| |#2|) (|Stream| |#1|)) "\\spad{reduce(b,f,u)},{} where \\spad{u} is a finite stream \\spad{[x0,x1,...,xn]},{} returns the value \\spad{r(n)} computed as follows: \\spad{r0 = f(x0,b), r1 = f(x1,r0),..., r(n) = f(xn,r(n-1))}.")) (|scan| (((|Stream| |#2|) |#2| (|Mapping| |#2| |#1| |#2|) (|Stream| |#1|)) "\\spad{scan(b,h,[x0,x1,x2,...])} returns \\spad{[y0,y1,y2,...]},{} where \\spad{y0 = h(x0,b)},{} \\spad{y1 = h(x1,y0)},{}\\spad{...} \\spad{yn = h(xn,y(n-1))}.")) (|map| (((|Stream| |#2|) (|Mapping| |#2| |#1|) (|Stream| |#1|)) "\\spad{map(f,s)} returns a stream whose elements are the function \\spad{f} applied to the corresponding elements of \\spad{s}. Note: \\spad{map(f,[x0,x1,x2,...]) = [f(x0),f(x1),f(x2),..]}."))) 
NIL 
NIL 
(-1071 A B C) 
((|constructor| (NIL "Functions defined on streams with entries in three sets.")) (|map| (((|Stream| |#3|) (|Mapping| |#3| |#1| |#2|) (|Stream| |#1|) (|Stream| |#2|)) "\\spad{map(f,st1,st2)} returns the stream whose elements are the function \\spad{f} applied to the corresponding elements of \\spad{st1} and \\spad{st2}. Note: \\spad{map(f,[x0,x1,x2,..],[y0,y1,y2,..]) = [f(x0,y0),f(x1,y1),..]}."))) 
NIL 
NIL 
(-1072) 
((|constructor| (NIL "This is the domain of character strings.")) (|string| (($ (|Identifier|)) "\\spad{string id} is the string representation of the identifier \\spad{id}") (($ (|DoubleFloat|)) "\\spad{string f} returns the decimal representation of \\spad{f} in a string") (($ (|Integer|)) "\\spad{string i} returns the decimal representation of \\spad{i} in a string"))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| (-117) (QUOTE (-260 (-117)))) (|HasCategory| (-117) (QUOTE (-756)))) (-12 (|HasCategory| (-117) (QUOTE (-260 (-117)))) (|HasCategory| (-117) (QUOTE (-1013))))) (|HasCategory| (-117) (QUOTE (-552 (-772)))) (|HasCategory| (-117) (QUOTE (-553 (-473)))) (OR (|HasCategory| (-117) (QUOTE (-756))) (|HasCategory| (-117) (QUOTE (-1013)))) (|HasCategory| (-117) (QUOTE (-756))) (OR (|HasCategory| (-117) (QUOTE (-72))) (|HasCategory| (-117) (QUOTE (-756))) (|HasCategory| (-117) (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| (-117) (QUOTE (-1013))) (|HasCategory| (-117) (QUOTE (-72))) (-12 (|HasCategory| (-117) (QUOTE (-260 (-117)))) (|HasCategory| (-117) (QUOTE (-1013))))) 
(-1073 |Entry|) 
((|constructor| (NIL "This domain provides tables where the keys are strings. A specialized hash function for strings is used."))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (QUOTE (|:| -3859 (-1072))) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#1|))))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-1013)))) (OR (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-1013)))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-1013))) (|HasCategory| (-1072) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-72)))) (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 (-1072)) (|:| |entry| |#1|)) (QUOTE (-72)))) 
(-1074 A) 
((|constructor| (NIL "StreamTaylorSeriesOperations implements Taylor series arithmetic,{} where a Taylor series is represented by a stream of its coefficients.")) (|power| (((|Stream| |#1|) |#1| (|Stream| |#1|)) "\\spad{power(a,f)} returns the power series \\spad{f} raised to the power \\spad{a}.")) (|lazyGintegrate| (((|Stream| |#1|) (|Mapping| |#1| (|Integer|)) |#1| (|Mapping| (|Stream| |#1|))) "\\spad{lazyGintegrate(f,r,g)} is used for fixed point computations.")) (|mapdiv| (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{mapdiv([a0,a1,..],[b0,b1,..])} returns \\spad{[a0/b0,a1/b1,..]}.")) (|powern| (((|Stream| |#1|) (|Fraction| (|Integer|)) (|Stream| |#1|)) "\\spad{powern(r,f)} raises power series \\spad{f} to the power \\spad{r}.")) (|nlde| (((|Stream| |#1|) (|Stream| (|Stream| |#1|))) "\\spad{nlde(u)} solves a first order non-linear differential equation described by \\spad{u} of the form \\spad{[[b<0,0>,b<0,1>,...],[b<1,0>,b<1,1>,.],...]}. the differential equation has the form \\spad{y' = sum(i=0 to infinity,j=0 to infinity,b<i,j>*(x**i)*(y**j))}.")) (|lazyIntegrate| (((|Stream| |#1|) |#1| (|Mapping| (|Stream| |#1|))) "\\spad{lazyIntegrate(r,f)} is a local function used for fixed point computations.")) (|integrate| (((|Stream| |#1|) |#1| (|Stream| |#1|)) "\\spad{integrate(r,a)} returns the integral of the power series \\spad{a} with respect to the power series variableintegration where \\spad{r} denotes the constant of integration. Thus \\spad{integrate(a,[a0,a1,a2,...]) = [a,a0,a1/2,a2/3,...]}.")) (|invmultisect| (((|Stream| |#1|) (|Integer|) (|Integer|) (|Stream| |#1|)) "\\spad{invmultisect(a,b,st)} substitutes \\spad{x**((a+b)*n)} for \\spad{x**n} and multiplies by \\spad{x**b}.")) (|multisect| (((|Stream| |#1|) (|Integer|) (|Integer|) (|Stream| |#1|)) "\\spad{multisect(a,b,st)} selects the coefficients of \\spad{x**((a+b)*n+a)},{} and changes them to \\spad{x**n}.")) (|generalLambert| (((|Stream| |#1|) (|Stream| |#1|) (|Integer|) (|Integer|)) "\\spad{generalLambert(f(x),a,d)} returns \\spad{f(x**a) + f(x**(a + d)) + f(x**(a + 2 d)) + ...}. \\spad{f(x)} should have zero constant coefficient and \\spad{a} and \\spad{d} should be positive.")) (|evenlambert| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{evenlambert(st)} computes \\spad{f(x**2) + f(x**4) + f(x**6) + ...} if \\spad{st} is a stream representing \\spad{f(x)}. This function is used for computing infinite products. If \\spad{f(x)} is a power series with constant coefficient 1,{} then \\spad{prod(f(x**(2*n)),n=1..infinity) = exp(evenlambert(log(f(x))))}.")) (|oddlambert| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{oddlambert(st)} computes \\spad{f(x) + f(x**3) + f(x**5) + ...} if \\spad{st} is a stream representing \\spad{f(x)}. This function is used for computing infinite products. If \\spad{f}(\\spad{x}) is a power series with constant coefficient 1 then \\spad{prod(f(x**(2*n-1)),n=1..infinity) = exp(oddlambert(log(f(x))))}.")) (|lambert| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{lambert(st)} computes \\spad{f(x) + f(x**2) + f(x**3) + ...} if \\spad{st} is a stream representing \\spad{f(x)}. This function is used for computing infinite products. If \\spad{f(x)} is a power series with constant coefficient 1 then \\spad{prod(f(x**n),n = 1..infinity) = exp(lambert(log(f(x))))}.")) (|addiag| (((|Stream| |#1|) (|Stream| (|Stream| |#1|))) "\\spad{addiag(x)} performs diagonal addition of a stream of streams. if \\spad{x} = \\spad{[[a<0,0>,a<0,1>,..],[a<1,0>,a<1,1>,..],[a<2,0>,a<2,1>,..],..]} and \\spad{addiag(x) = [b<0,b<1>,...], then b<k> = sum(i+j=k,a<i,j>)}.")) (|revert| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{revert(a)} computes the inverse of a power series \\spad{a} with respect to composition. the series should have constant coefficient 0 and first order coefficient should be invertible.")) (|lagrange| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{lagrange(g)} produces the power series for \\spad{f} where \\spad{f} is implicitly defined as \\spad{f(z) = z*g(f(z))}.")) (|compose| (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{compose(a,b)} composes the power series \\spad{a} with the power series \\spad{b}.")) (|eval| (((|Stream| |#1|) (|Stream| |#1|) |#1|) "\\spad{eval(a,r)} returns a stream of partial sums of the power series \\spad{a} evaluated at the power series variable equal to \\spad{r}.")) (|coerce| (((|Stream| |#1|) |#1|) "\\spad{coerce(r)} converts a ring element \\spad{r} to a stream with one element.")) (|gderiv| (((|Stream| |#1|) (|Mapping| |#1| (|Integer|)) (|Stream| |#1|)) "\\spad{gderiv(f,[a0,a1,a2,..])} returns \\spad{[f(0)*a0,f(1)*a1,f(2)*a2,..]}.")) (|deriv| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{deriv(a)} returns the derivative of the power series with respect to the power series variable. Thus \\spad{deriv([a0,a1,a2,...])} returns \\spad{[a1,2 a2,3 a3,...]}.")) (|mapmult| (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{mapmult([a0,a1,..],[b0,b1,..])} returns \\spad{[a0*b0,a1*b1,..]}.")) (|int| (((|Stream| |#1|) |#1|) "\\spad{int(r)} returns [\\spad{r},{}\\spad{r+1},{}\\spad{r+2},{}...],{} where \\spad{r} is a ring element.")) (|oddintegers| (((|Stream| (|Integer|)) (|Integer|)) "\\spad{oddintegers(n)} returns \\spad{[n,n+2,n+4,...]}.")) (|integers| (((|Stream| (|Integer|)) (|Integer|)) "\\spad{integers(n)} returns \\spad{[n,n+1,n+2,...]}.")) (|monom| (((|Stream| |#1|) |#1| (|Integer|)) "\\spad{monom(deg,coef)} is a monomial of degree \\spad{deg} with coefficient \\spad{coef}.")) (|recip| (((|Union| (|Stream| |#1|) "failed") (|Stream| |#1|)) "\\spad{recip(a)} returns the power series reciprocal of \\spad{a},{} or \"failed\" if not possible.")) (/ (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{a / b} returns the power series quotient of \\spad{a} by \\spad{b}. An error message is returned if \\spad{b} is not invertible. This function is used in fixed point computations.")) (|exquo| (((|Union| (|Stream| |#1|) "failed") (|Stream| |#1|) (|Stream| |#1|)) "\\spad{exquo(a,b)} returns the power series quotient of \\spad{a} by \\spad{b},{} if the quotient exists,{} and \"failed\" otherwise")) (* (((|Stream| |#1|) (|Stream| |#1|) |#1|) "\\spad{a * r} returns the power series scalar multiplication of \\spad{a} by r: \\spad{[a0,a1,...] * r = [a0 * r,a1 * r,...]}") (((|Stream| |#1|) |#1| (|Stream| |#1|)) "\\spad{r * a} returns the power series scalar multiplication of \\spad{r} by \\spad{a}: \\spad{r * [a0,a1,...] = [r * a0,r * a1,...]}") (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{a * b} returns the power series (Cauchy) product of \\spad{a} and b: \\spad{[a0,a1,...] * [b0,b1,...] = [c0,c1,...]} where \\spad{ck = sum(i + j = k,ai * bk)}.")) (- (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{- a} returns the power series negative of \\spad{a}: \\spad{- [a0,a1,...] = [- a0,- a1,...]}") (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{a - b} returns the power series difference of \\spad{a} and \\spad{b}: \\spad{[a0,a1,..] - [b0,b1,..] = [a0 - b0,a1 - b1,..]}")) (+ (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{a + b} returns the power series sum of \\spad{a} and \\spad{b}: \\spad{[a0,a1,..] + [b0,b1,..] = [a0 + b0,a1 + b1,..]}"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) 
(-1075 |Coef|) 
((|constructor| (NIL "StreamTranscendentalFunctions implements transcendental functions on Taylor series,{} where a Taylor series is represented by a stream of its coefficients.")) (|acsch| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acsch(st)} computes the inverse hyperbolic cosecant of a power series \\spad{st}.")) (|asech| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asech(st)} computes the inverse hyperbolic secant of a power series \\spad{st}.")) (|acoth| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acoth(st)} computes the inverse hyperbolic cotangent of a power series \\spad{st}.")) (|atanh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{atanh(st)} computes the inverse hyperbolic tangent of a power series \\spad{st}.")) (|acosh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acosh(st)} computes the inverse hyperbolic cosine of a power series \\spad{st}.")) (|asinh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asinh(st)} computes the inverse hyperbolic sine of a power series \\spad{st}.")) (|csch| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{csch(st)} computes the hyperbolic cosecant of a power series \\spad{st}.")) (|sech| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sech(st)} computes the hyperbolic secant of a power series \\spad{st}.")) (|coth| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{coth(st)} computes the hyperbolic cotangent of a power series \\spad{st}.")) (|tanh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{tanh(st)} computes the hyperbolic tangent of a power series \\spad{st}.")) (|cosh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{cosh(st)} computes the hyperbolic cosine of a power series \\spad{st}.")) (|sinh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sinh(st)} computes the hyperbolic sine of a power series \\spad{st}.")) (|sinhcosh| (((|Record| (|:| |sinh| (|Stream| |#1|)) (|:| |cosh| (|Stream| |#1|))) (|Stream| |#1|)) "\\spad{sinhcosh(st)} returns a record containing the hyperbolic sine and cosine of a power series \\spad{st}.")) (|acsc| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acsc(st)} computes arccosecant of a power series \\spad{st}.")) (|asec| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asec(st)} computes arcsecant of a power series \\spad{st}.")) (|acot| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acot(st)} computes arccotangent of a power series \\spad{st}.")) (|atan| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{atan(st)} computes arctangent of a power series \\spad{st}.")) (|acos| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acos(st)} computes arccosine of a power series \\spad{st}.")) (|asin| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asin(st)} computes arcsine of a power series \\spad{st}.")) (|csc| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{csc(st)} computes cosecant of a power series \\spad{st}.")) (|sec| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sec(st)} computes secant of a power series \\spad{st}.")) (|cot| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{cot(st)} computes cotangent of a power series \\spad{st}.")) (|tan| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{tan(st)} computes tangent of a power series \\spad{st}.")) (|cos| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{cos(st)} computes cosine of a power series \\spad{st}.")) (|sin| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sin(st)} computes sine of a power series \\spad{st}.")) (|sincos| (((|Record| (|:| |sin| (|Stream| |#1|)) (|:| |cos| (|Stream| |#1|))) (|Stream| |#1|)) "\\spad{sincos(st)} returns a record containing the sine and cosine of a power series \\spad{st}.")) (** (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{st1 ** st2} computes the power of a power series \\spad{st1} by another power series \\spad{st2}.")) (|log| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{log(st)} computes the log of a power series.")) (|exp| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{exp(st)} computes the exponential of a power series \\spad{st}."))) 
NIL 
NIL 
(-1076 |Coef|) 
((|constructor| (NIL "StreamTranscendentalFunctionsNonCommutative implements transcendental functions on Taylor series over a non-commutative ring,{} where a Taylor series is represented by a stream of its coefficients.")) (|acsch| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acsch(st)} computes the inverse hyperbolic cosecant of a power series \\spad{st}.")) (|asech| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asech(st)} computes the inverse hyperbolic secant of a power series \\spad{st}.")) (|acoth| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acoth(st)} computes the inverse hyperbolic cotangent of a power series \\spad{st}.")) (|atanh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{atanh(st)} computes the inverse hyperbolic tangent of a power series \\spad{st}.")) (|acosh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acosh(st)} computes the inverse hyperbolic cosine of a power series \\spad{st}.")) (|asinh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asinh(st)} computes the inverse hyperbolic sine of a power series \\spad{st}.")) (|csch| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{csch(st)} computes the hyperbolic cosecant of a power series \\spad{st}.")) (|sech| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sech(st)} computes the hyperbolic secant of a power series \\spad{st}.")) (|coth| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{coth(st)} computes the hyperbolic cotangent of a power series \\spad{st}.")) (|tanh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{tanh(st)} computes the hyperbolic tangent of a power series \\spad{st}.")) (|cosh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{cosh(st)} computes the hyperbolic cosine of a power series \\spad{st}.")) (|sinh| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sinh(st)} computes the hyperbolic sine of a power series \\spad{st}.")) (|acsc| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acsc(st)} computes arccosecant of a power series \\spad{st}.")) (|asec| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asec(st)} computes arcsecant of a power series \\spad{st}.")) (|acot| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acot(st)} computes arccotangent of a power series \\spad{st}.")) (|atan| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{atan(st)} computes arctangent of a power series \\spad{st}.")) (|acos| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{acos(st)} computes arccosine of a power series \\spad{st}.")) (|asin| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{asin(st)} computes arcsine of a power series \\spad{st}.")) (|csc| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{csc(st)} computes cosecant of a power series \\spad{st}.")) (|sec| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sec(st)} computes secant of a power series \\spad{st}.")) (|cot| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{cot(st)} computes cotangent of a power series \\spad{st}.")) (|tan| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{tan(st)} computes tangent of a power series \\spad{st}.")) (|cos| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{cos(st)} computes cosine of a power series \\spad{st}.")) (|sin| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{sin(st)} computes sine of a power series \\spad{st}.")) (** (((|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) "\\spad{st1 ** st2} computes the power of a power series \\spad{st1} by another power series \\spad{st2}.")) (|log| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{log(st)} computes the log of a power series.")) (|exp| (((|Stream| |#1|) (|Stream| |#1|)) "\\spad{exp(st)} computes the exponential of a power series \\spad{st}."))) 
NIL 
NIL 
(-1077 R UP) 
((|constructor| (NIL "This package computes the subresultants of two polynomials which is needed for the `Lazard Rioboo' enhancement to Tragers integrations formula For efficiency reasons this has been rewritten to call Lionel Ducos package which is currently the best one. \\blankline")) (|primitivePart| ((|#2| |#2| |#1|) "\\spad{primitivePart(p, q)} reduces the coefficient of \\spad{p} modulo \\spad{q},{} takes the primitive part of the result,{} and ensures that the leading coefficient of that result is monic.")) (|subresultantVector| (((|PrimitiveArray| |#2|) |#2| |#2|) "\\spad{subresultantVector(p, q)} returns \\spad{[p0,...,pn]} where \\spad{pi} is the \\spad{i}-th subresultant of \\spad{p} and \\spad{q}. In particular,{} \\spad{p0 = resultant(p, q)}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-258)))) 
(-1078 |n| R) 
((|constructor| (NIL "This domain \\undocumented")) (|pointData| (((|List| (|Point| |#2|)) $) "\\spad{pointData(s)} returns the list of points from the point data field of the 3 dimensional subspace \\spad{s}.")) (|parent| (($ $) "\\spad{parent(s)} returns the subspace which is the parent of the indicated 3 dimensional subspace \\spad{s}. If \\spad{s} is the top level subspace an error message is returned.")) (|level| (((|NonNegativeInteger|) $) "\\spad{level(s)} returns a non negative integer which is the current level field of the indicated 3 dimensional subspace \\spad{s}.")) (|extractProperty| (((|SubSpaceComponentProperty|) $) "\\spad{extractProperty(s)} returns the property of domain \\spadtype{SubSpaceComponentProperty} of the indicated 3 dimensional subspace \\spad{s}.")) (|extractClosed| (((|Boolean|) $) "\\spad{extractClosed(s)} returns the \\spadtype{Boolean} value of the closed property for the indicated 3 dimensional subspace \\spad{s}. If the property is closed,{} \\spad{True} is returned,{} otherwise \\spad{False} is returned.")) (|extractIndex| (((|NonNegativeInteger|) $) "\\spad{extractIndex(s)} returns a non negative integer which is the current index of the 3 dimensional subspace \\spad{s}.")) (|extractPoint| (((|Point| |#2|) $) "\\spad{extractPoint(s)} returns the point which is given by the current index location into the point data field of the 3 dimensional subspace \\spad{s}.")) (|traverse| (($ $ (|List| (|NonNegativeInteger|))) "\\spad{traverse(s,li)} follows the branch list of the 3 dimensional subspace,{} \\spad{s},{} along the path dictated by the list of non negative integers,{} \\spad{li},{} which points to the component which has been traversed to. The subspace,{} \\spad{s},{} is returned,{} where \\spad{s} is now the subspace pointed to by \\spad{li}.")) (|defineProperty| (($ $ (|List| (|NonNegativeInteger|)) (|SubSpaceComponentProperty|)) "\\spad{defineProperty(s,li,p)} defines the component property in the 3 dimensional subspace,{} \\spad{s},{} to be that of \\spad{p},{} where \\spad{p} is of the domain \\spadtype{SubSpaceComponentProperty}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component whose property is being defined. The subspace,{} \\spad{s},{} is returned with the component property definition.")) (|closeComponent| (($ $ (|List| (|NonNegativeInteger|)) (|Boolean|)) "\\spad{closeComponent(s,li,b)} sets the property of the component in the 3 dimensional subspace,{} \\spad{s},{} to be closed if \\spad{b} is \\spad{true},{} or open if \\spad{b} is \\spad{false}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component whose closed property is to be set. The subspace,{} \\spad{s},{} is returned with the component property modification.")) (|modifyPoint| (($ $ (|NonNegativeInteger|) (|Point| |#2|)) "\\spad{modifyPoint(s,ind,p)} modifies the point referenced by the index location,{} \\spad{ind},{} by replacing it with the point,{} \\spad{p} in the 3 dimensional subspace,{} \\spad{s}. An error message occurs if \\spad{s} is empty,{} otherwise the subspace \\spad{s} is returned with the point modification.") (($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) "\\spad{modifyPoint(s,li,i)} replaces an existing point in the 3 dimensional subspace,{} \\spad{s},{} with the 4 dimensional point indicated by the index location,{} \\spad{i}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the existing point is to be modified. An error message occurs if \\spad{s} is empty,{} otherwise the subspace \\spad{s} is returned with the point modification.") (($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)) "\\spad{modifyPoint(s,li,p)} replaces an existing point in the 3 dimensional subspace,{} \\spad{s},{} with the 4 dimensional point,{} \\spad{p}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the existing point is to be modified. An error message occurs if \\spad{s} is empty,{} otherwise the subspace \\spad{s} is returned with the point modification.")) (|addPointLast| (($ $ $ (|Point| |#2|) (|NonNegativeInteger|)) "\\spad{addPointLast(s,s2,li,p)} adds the 4 dimensional point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s}. \\spad{s2} point to the end of the subspace \\spad{s}. \\spad{n} is the path in the \\spad{s2} component. The subspace \\spad{s} is returned with the additional point.")) (|addPoint2| (($ $ (|Point| |#2|)) "\\spad{addPoint2(s,p)} adds the 4 dimensional point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s}. The subspace \\spad{s} is returned with the additional point.")) (|addPoint| (((|NonNegativeInteger|) $ (|Point| |#2|)) "\\spad{addPoint(s,p)} adds the point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s},{} and returns the new total number of points in \\spad{s}.") (($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) "\\spad{addPoint(s,li,i)} adds the 4 dimensional point indicated by the index location,{} \\spad{i},{} to the 3 dimensional subspace,{} \\spad{s}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the point is to be added. It's length should range from 0 to \\spad{n - 1} where \\spad{n} is the dimension of the subspace. If the length is \\spad{n - 1},{} then a specific lowest level component is being referenced. If it is less than \\spad{n - 1},{} then some higher level component (0 indicates top level component) is being referenced and a component of that level with the desired point is created. The subspace \\spad{s} is returned with the additional point.") (($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)) "\\spad{addPoint(s,li,p)} adds the 4 dimensional point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the point is to be added. It's length should range from 0 to \\spad{n - 1} where \\spad{n} is the dimension of the subspace. If the length is \\spad{n - 1},{} then a specific lowest level component is being referenced. If it is less than \\spad{n - 1},{} then some higher level component (0 indicates top level component) is being referenced and a component of that level with the desired point is created. The subspace \\spad{s} is returned with the additional point.")) (|separate| (((|List| $) $) "\\spad{separate(s)} makes each of the components of the \\spadtype{SubSpace},{} \\spad{s},{} into a list of separate and distinct subspaces and returns the list.")) (|merge| (($ (|List| $)) "\\spad{merge(ls)} a list of subspaces,{} \\spad{ls},{} into one subspace.") (($ $ $) "\\spad{merge(s1,s2)} the subspaces \\spad{s1} and \\spad{s2} into a single subspace.")) (|deepCopy| (($ $) "\\spad{deepCopy(x)} \\undocumented")) (|shallowCopy| (($ $) "\\spad{shallowCopy(x)} \\undocumented")) (|numberOfChildren| (((|NonNegativeInteger|) $) "\\spad{numberOfChildren(x)} \\undocumented")) (|children| (((|List| $) $) "\\spad{children(x)} \\undocumented")) (|child| (($ $ (|NonNegativeInteger|)) "\\spad{child(x,n)} \\undocumented")) (|birth| (($ $) "\\spad{birth(x)} \\undocumented")) (|subspace| (($) "\\spad{subspace()} \\undocumented")) (|new| (($) "\\spad{new()} \\undocumented")) (|internal?| (((|Boolean|) $) "\\spad{internal?(x)} \\undocumented")) (|root?| (((|Boolean|) $) "\\spad{root?(x)} \\undocumented")) (|leaf?| (((|Boolean|) $) "\\spad{leaf?(x)} \\undocumented"))) 
NIL 
NIL 
(-1079 S1 S2) 
((|constructor| (NIL "This domain implements \"such that\" forms")) (|rhs| ((|#2| $) "\\spad{rhs(f)} returns the right side of \\spad{f}")) (|lhs| ((|#1| $) "\\spad{lhs(f)} returns the left side of \\spad{f}")) (|construct| (($ |#1| |#2|) "\\spad{construct(s,t)} makes a form s:t"))) 
NIL 
NIL 
(-1080) 
((|constructor| (NIL "This domain represents the filter iterator syntax.")) (|predicate| (((|SpadAst|) $) "\\spad{predicate(e)} returns the syntax object for the predicate in the filter iterator syntax `e'."))) 
NIL 
NIL 
(-1081 |Coef| |var| |cen|) 
((|constructor| (NIL "Sparse Laurent series in one variable \\indented{2}{\\spadtype{SparseUnivariateLaurentSeries} is a domain representing Laurent} \\indented{2}{series in one variable with coefficients in an arbitrary ring.\\space{2}The} \\indented{2}{parameters of the type specify the coefficient ring,{} the power series} \\indented{2}{variable,{} and the center of the power series expansion.\\space{2}For example,{}} \\indented{2}{\\spad{SparseUnivariateLaurentSeries(Integer,x,3)} represents Laurent} \\indented{2}{series in \\spad{(x - 3)} with integer coefficients.}")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (|coerce| (($ (|Variable| |#2|)) "\\spad{coerce(var)} converts the series variable \\spad{var} into a Laurent series."))) 
(((-3996 "*") OR (-2562 (|has| |#1| (-312)) (|has| (-1088 |#1| |#2| |#3|) (-740))) (|has| |#1| (-146)) (-2562 (|has| |#1| (-312)) (|has| (-1088 |#1| |#2| |#3|) (-821)))) (-3987 OR (-2562 (|has| |#1| (-312)) (|has| (-1088 |#1| |#2| |#3|) (-740))) (|has| |#1| (-495)) (-2562 (|has| |#1| (-312)) (|has| (-1088 |#1| |#2| |#3|) (-821)))) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-740)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-120)))) (|HasCategory| |#1| (QUOTE (-120)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-190)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-190)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-189)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|))))) (|HasCategory| (-484) (QUOTE (-1025))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-312))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-950 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-553 (-473))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-933)))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-740)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-740)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-756))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-1065)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (|%list| (QUOTE -241) (|%list| (QUOTE -1088) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|)) (|%list| (QUOTE -1088) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (|%list| (QUOTE -260) (|%list| (QUOTE -1088) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (|%list| (QUOTE -455) (QUOTE (-1089)) (|%list| (QUOTE -1088) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-796 (-329))))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-483)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-258)))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-821))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-118))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-740)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-740)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-146)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-189)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-756)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-120)))) (|HasCategory| |#1| (QUOTE (-120)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-821)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-118)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-1088 |#1| |#2| |#3|) (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-1082 R -3092) 
((|constructor| (NIL "computes sums of top-level expressions.")) (|sum| ((|#2| |#2| (|SegmentBinding| |#2|)) "\\spad{sum(f(n), n = a..b)} returns \\spad{f}(a) + \\spad{f}(\\spad{a+1}) + ... + \\spad{f}(\\spad{b}).") ((|#2| |#2| (|Symbol|)) "\\spad{sum(a(n), n)} returns A(\\spad{n}) such that A(\\spad{n+1}) - A(\\spad{n}) = a(\\spad{n})."))) 
NIL 
NIL 
(-1083 R) 
((|constructor| (NIL "Computes sums of rational functions.")) (|sum| (((|Union| (|Fraction| (|Polynomial| |#1|)) (|Expression| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|SegmentBinding| (|Fraction| (|Polynomial| |#1|)))) "\\spad{sum(f(n), n = a..b)} returns \\spad{f(a) + f(a+1) + ... f(b)}.") (((|Fraction| (|Polynomial| |#1|)) (|Polynomial| |#1|) (|SegmentBinding| (|Polynomial| |#1|))) "\\spad{sum(f(n), n = a..b)} returns \\spad{f(a) + f(a+1) + ... f(b)}.") (((|Union| (|Fraction| (|Polynomial| |#1|)) (|Expression| |#1|)) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{sum(a(n), n)} returns \\spad{A} which is the indefinite sum of \\spad{a} with respect to upward difference on \\spad{n},{} \\spadignore{i.e.} \\spad{A(n+1) - A(n) = a(n)}.") (((|Fraction| (|Polynomial| |#1|)) (|Polynomial| |#1|) (|Symbol|)) "\\spad{sum(a(n), n)} returns \\spad{A} which is the indefinite sum of \\spad{a} with respect to upward difference on \\spad{n},{} \\spadignore{i.e.} \\spad{A(n+1) - A(n) = a(n)}."))) 
NIL 
NIL 
(-1084 R) 
((|constructor| (NIL "This domain represents univariate polynomials over arbitrary (not necessarily commutative) coefficient rings. The variable is unspecified so that the variable displays as \\spad{?} on output. If it is necessary to specify the variable name,{} use type \\spadtype{UnivariatePolynomial}. The representation is sparse in the sense that only non-zero terms are represented.")) (|fmecg| (($ $ (|NonNegativeInteger|) |#1| $) "\\spad{fmecg(p1,e,r,p2)} finds \\spad{X} : \\spad{p1} - \\spad{r} * X**e * \\spad{p2}")) (|outputForm| (((|OutputForm|) $ (|OutputForm|)) "\\spad{outputForm(p,var)} converts the SparseUnivariatePolynomial \\spad{p} to an output form (see \\spadtype{OutputForm}) printed as a polynomial in the output form variable."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3990 |has| |#1| (-312)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-329)))) (|HasCategory| (-994) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#1| (QUOTE (-796 (-484)))) (|HasCategory| (-994) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-553 (-473)))) (|HasCategory| (-994) (QUOTE (-553 (-473))))) (|HasCategory| |#1| (QUOTE (-580 (-484)))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-821)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (|HasCategory| |#1| (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-1065))) (|HasCategory| |#1| (QUOTE (-811 (-1089)))) (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasCategory| |#1| (QUOTE (-189))) (|HasCategory| |#1| (QUOTE (-190))) (|HasAttribute| |#1| (QUOTE -3992)) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-1085 R S) 
((|constructor| (NIL "This package lifts a mapping from coefficient rings \\spad{R} to \\spad{S} to a mapping from sparse univariate polynomial over \\spad{R} to a sparse univariate polynomial over \\spad{S}. Note that the mapping is assumed to send zero to zero,{} since it will only be applied to the non-zero coefficients of the polynomial.")) (|map| (((|SparseUnivariatePolynomial| |#2|) (|Mapping| |#2| |#1|) (|SparseUnivariatePolynomial| |#1|)) "\\spad{map(func, poly)} creates a new polynomial by applying \\spad{func} to every non-zero coefficient of the polynomial poly."))) 
NIL 
NIL 
(-1086 E OV R P) 
((|constructor| (NIL "\\indented{1}{SupFractionFactorize} contains the factor function for univariate polynomials over the quotient field of a ring \\spad{S} such that the package MultivariateFactorize works for \\spad{S}")) (|squareFree| (((|Factored| (|SparseUnivariatePolynomial| (|Fraction| |#4|))) (|SparseUnivariatePolynomial| (|Fraction| |#4|))) "\\spad{squareFree(p)} returns the square-free factorization of the univariate polynomial \\spad{p} with coefficients which are fractions of polynomials over \\spad{R}. Each factor has no repeated roots and the factors are pairwise relatively prime.")) (|factor| (((|Factored| (|SparseUnivariatePolynomial| (|Fraction| |#4|))) (|SparseUnivariatePolynomial| (|Fraction| |#4|))) "\\spad{factor(p)} factors the univariate polynomial \\spad{p} with coefficients which are fractions of polynomials over \\spad{R}."))) 
NIL 
NIL 
(-1087 |Coef| |var| |cen|) 
((|constructor| (NIL "Sparse Puiseux series in one variable \\indented{2}{\\spadtype{SparseUnivariatePuiseuxSeries} is a domain representing Puiseux} \\indented{2}{series in one variable with coefficients in an arbitrary ring.\\space{2}The} \\indented{2}{parameters of the type specify the coefficient ring,{} the power series} \\indented{2}{variable,{} and the center of the power series expansion.\\space{2}For example,{}} \\indented{2}{\\spad{SparseUnivariatePuiseuxSeries(Integer,x,3)} represents Puiseux} \\indented{2}{series in \\spad{(x - 3)} with \\spadtype{Integer} coefficients.}")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|)))) (|HasCategory| (-349 (-484)) (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|))))))) 
(-1088 |Coef| |var| |cen|) 
((|constructor| (NIL "Sparse Taylor series in one variable \\indented{2}{\\spadtype{SparseUnivariateTaylorSeries} is a domain representing Taylor} \\indented{2}{series in one variable with coefficients in an arbitrary ring.\\space{2}The} \\indented{2}{parameters of the type specify the coefficient ring,{} the power series} \\indented{2}{variable,{} and the center of the power series expansion.\\space{2}For example,{}} \\indented{2}{\\spadtype{SparseUnivariateTaylorSeries}(Integer,{}\\spad{x},{}3) represents Taylor} \\indented{2}{series in \\spad{(x - 3)} with \\spadtype{Integer} coefficients.}")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x),x)} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (|univariatePolynomial| (((|UnivariatePolynomial| |#2| |#1|) $ (|NonNegativeInteger|)) "\\spad{univariatePolynomial(f,k)} returns a univariate polynomial \\indented{1}{consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.}")) (|coerce| (($ (|Variable| |#2|)) "\\spad{coerce(var)} converts the series variable \\spad{var} into a \\indented{1}{Taylor series.}") (($ (|UnivariatePolynomial| |#2| |#1|)) "\\spad{coerce(p)} converts a univariate polynomial \\spad{p} in the variable \\spad{var} to a univariate Taylor series in \\spad{var}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-694)) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-694)) (|devaluate| |#1|)))) (|HasCategory| (-694) (QUOTE (-1025))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-694))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-694))))) (|HasCategory| |#1| (QUOTE (-312))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|))))))) 
(-1089) 
((|constructor| (NIL "Basic and scripted symbols.")) (|sample| (($) "\\spad{sample()} returns a sample of \\%")) (|list| (((|List| $) $) "\\spad{list(sy)} takes a scripted symbol and produces a list of the name followed by the scripts.")) (|string| (((|String|) $) "\\spad{string(s)} converts the symbol \\spad{s} to a string. Error: if the symbol is subscripted.")) (|elt| (($ $ (|List| (|OutputForm|))) "\\spad{elt(s,[a1,...,an])} or \\spad{s}([\\spad{a1},{}...,{}an]) returns \\spad{s} subscripted by \\spad{[a1,...,an]}.")) (|argscript| (($ $ (|List| (|OutputForm|))) "\\spad{argscript(s, [a1,...,an])} returns \\spad{s} arg-scripted by \\spad{[a1,...,an]}.")) (|superscript| (($ $ (|List| (|OutputForm|))) "\\spad{superscript(s, [a1,...,an])} returns \\spad{s} superscripted by \\spad{[a1,...,an]}.")) (|subscript| (($ $ (|List| (|OutputForm|))) "\\spad{subscript(s, [a1,...,an])} returns \\spad{s} subscripted by \\spad{[a1,...,an]}.")) (|script| (($ $ (|Record| (|:| |sub| (|List| (|OutputForm|))) (|:| |sup| (|List| (|OutputForm|))) (|:| |presup| (|List| (|OutputForm|))) (|:| |presub| (|List| (|OutputForm|))) (|:| |args| (|List| (|OutputForm|))))) "\\spad{script(s, [a,b,c,d,e])} returns \\spad{s} with subscripts a,{} superscripts \\spad{b},{} pre-superscripts \\spad{c},{} pre-subscripts \\spad{d},{} and argument-scripts \\spad{e}.") (($ $ (|List| (|List| (|OutputForm|)))) "\\spad{script(s, [a,b,c,d,e])} returns \\spad{s} with subscripts a,{} superscripts \\spad{b},{} pre-superscripts \\spad{c},{} pre-subscripts \\spad{d},{} and argument-scripts \\spad{e}. Omitted components are taken to be empty. For example,{} \\spad{script(s, [a,b,c])} is equivalent to \\spad{script(s,[a,b,c,[],[]])}.")) (|scripts| (((|Record| (|:| |sub| (|List| (|OutputForm|))) (|:| |sup| (|List| (|OutputForm|))) (|:| |presup| (|List| (|OutputForm|))) (|:| |presub| (|List| (|OutputForm|))) (|:| |args| (|List| (|OutputForm|)))) $) "\\spad{scripts(s)} returns all the scripts of \\spad{s}.")) (|scripted?| (((|Boolean|) $) "\\spad{scripted?(s)} is \\spad{true} if \\spad{s} has been given any scripts.")) (|name| (($ $) "\\spad{name(s)} returns \\spad{s} without its scripts.")) (|resetNew| (((|Void|)) "\\spad{resetNew()} resets the internals counters that new() and new(\\spad{s}) use to return distinct symbols every time.")) (|new| (($ $) "\\spad{new(s)} returns a new symbol whose name starts with \\%\\spad{s}.") (($) "\\spad{new()} returns a new symbol whose name starts with \\%."))) 
NIL 
NIL 
(-1090 R) 
((|constructor| (NIL "Computes all the symmetric functions in \\spad{n} variables.")) (|symFunc| (((|Vector| |#1|) |#1| (|PositiveInteger|)) "\\spad{symFunc(r, n)} returns the vector of the elementary symmetric functions in \\spad{[r,r,...,r]} \\spad{n} times.") (((|Vector| |#1|) (|List| |#1|)) "\\spad{symFunc([r1,...,rn])} returns the vector of the elementary symmetric functions in the \\spad{ri's}: \\spad{[r1 + ... + rn, r1 r2 + ... + r(n-1) rn, ..., r1 r2 ... rn]}."))) 
NIL 
NIL 
(-1091 R) 
((|constructor| (NIL "This domain implements symmetric polynomial"))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-6 -3992)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#1| (QUOTE (-950 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-950 (-484)))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-391))) (-12 (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| (-884) (QUOTE (-104)))) (|HasAttribute| |#1| (QUOTE -3992))) 
(-1092) 
((|constructor| (NIL "Creates and manipulates one global symbol table for FORTRAN code generation,{} containing details of types,{} dimensions,{} and argument lists.")) (|symbolTableOf| (((|SymbolTable|) (|Symbol|) $) "\\spad{symbolTableOf(f,tab)} returns the symbol table of \\spad{f}")) (|argumentListOf| (((|List| (|Symbol|)) (|Symbol|) $) "\\spad{argumentListOf(f,tab)} returns the argument list of \\spad{f}")) (|returnTypeOf| (((|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1="void")) (|Symbol|) $) "\\spad{returnTypeOf(f,tab)} returns the type of the object returned by \\spad{f}")) (|empty| (($) "\\spad{empty()} creates a new,{} empty symbol table.")) (|printTypes| (((|Void|) (|Symbol|)) "\\spad{printTypes(tab)} produces FORTRAN type declarations from \\spad{tab},{} on the current FORTRAN output stream")) (|printHeader| (((|Void|)) "\\spad{printHeader()} produces the FORTRAN header for the current subprogram in the global symbol table on the current FORTRAN output stream.") (((|Void|) (|Symbol|)) "\\spad{printHeader(f)} produces the FORTRAN header for subprogram \\spad{f} in the global symbol table on the current FORTRAN output stream.") (((|Void|) (|Symbol|) $) "\\spad{printHeader(f,tab)} produces the FORTRAN header for subprogram \\spad{f} in symbol table \\spad{tab} on the current FORTRAN output stream.")) (|returnType!| (((|Void|) (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))) "\\spad{returnType!(t)} declares that the return type of he current subprogram in the global symbol table is \\spad{t}.") (((|Void|) (|Symbol|) (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))) "\\spad{returnType!(f,t)} declares that the return type of subprogram \\spad{f} in the global symbol table is \\spad{t}.") (((|Void|) (|Symbol|) (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)) $) "\\spad{returnType!(f,t,tab)} declares that the return type of subprogram \\spad{f} in symbol table \\spad{tab} is \\spad{t}.")) (|argumentList!| (((|Void|) (|List| (|Symbol|))) "\\spad{argumentList!(l)} declares that the argument list for the current subprogram in the global symbol table is \\spad{l}.") (((|Void|) (|Symbol|) (|List| (|Symbol|))) "\\spad{argumentList!(f,l)} declares that the argument list for subprogram \\spad{f} in the global symbol table is \\spad{l}.") (((|Void|) (|Symbol|) (|List| (|Symbol|)) $) "\\spad{argumentList!(f,l,tab)} declares that the argument list for subprogram \\spad{f} in symbol table \\spad{tab} is \\spad{l}.")) (|endSubProgram| (((|Symbol|)) "\\spad{endSubProgram()} asserts that we are no longer processing the current subprogram.")) (|currentSubProgram| (((|Symbol|)) "\\spad{currentSubProgram()} returns the name of the current subprogram being processed")) (|newSubProgram| (((|Void|) (|Symbol|)) "\\spad{newSubProgram(f)} asserts that from now on type declarations are part of subprogram \\spad{f}.")) (|declare!| (((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|)) "\\spad{declare!(u,t,asp)} declares the parameter \\spad{u} to have type \\spad{t} in \\spad{asp}.") (((|FortranType|) (|Symbol|) (|FortranType|)) "\\spad{declare!(u,t)} declares the parameter \\spad{u} to have type \\spad{t} in the current level of the symbol table.") (((|FortranType|) (|List| (|Symbol|)) (|FortranType|) (|Symbol|) $) "\\spad{declare!(u,t,asp,tab)} declares the parameters \\spad{u} of subprogram \\spad{asp} to have type \\spad{t} in symbol table \\spad{tab}.") (((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|) $) "\\spad{declare!(u,t,asp,tab)} declares the parameter \\spad{u} of subprogram \\spad{asp} to have type \\spad{t} in symbol table \\spad{tab}.")) (|clearTheSymbolTable| (((|Void|) (|Symbol|)) "\\spad{clearTheSymbolTable(x)} removes the symbol \\spad{x} from the table") (((|Void|)) "\\spad{clearTheSymbolTable()} clears the current symbol table.")) (|showTheSymbolTable| (($) "\\spad{showTheSymbolTable()} returns the current symbol table."))) 
NIL 
NIL 
(-1093) 
((|constructor| (NIL "Create and manipulate a symbol table for generated FORTRAN code")) (|symbolTable| (($ (|List| (|Record| (|:| |key| (|Symbol|)) (|:| |entry| (|FortranType|))))) "\\spad{symbolTable(l)} creates a symbol table from the elements of \\spad{l}.")) (|printTypes| (((|Void|) $) "\\spad{printTypes(tab)} produces FORTRAN type declarations from \\spad{tab},{} on the current FORTRAN output stream")) (|newTypeLists| (((|SExpression|) $) "\\spad{newTypeLists(x)} \\undocumented")) (|typeLists| (((|List| (|List| (|Union| (|:| |name| (|Symbol|)) (|:| |bounds| (|List| (|Union| (|:| S (|Symbol|)) (|:| P (|Polynomial| (|Integer|))))))))) $) "\\spad{typeLists(tab)} returns a list of lists of types of objects in \\spad{tab}")) (|externalList| (((|List| (|Symbol|)) $) "\\spad{externalList(tab)} returns a list of all the external symbols in \\spad{tab}")) (|typeList| (((|List| (|Union| (|:| |name| (|Symbol|)) (|:| |bounds| (|List| (|Union| (|:| S (|Symbol|)) (|:| P (|Polynomial| (|Integer|)))))))) (|FortranScalarType|) $) "\\spad{typeList(t,tab)} returns a list of all the objects of type \\spad{t} in \\spad{tab}")) (|parametersOf| (((|List| (|Symbol|)) $) "\\spad{parametersOf(tab)} returns a list of all the symbols declared in \\spad{tab}")) (|fortranTypeOf| (((|FortranType|) (|Symbol|) $) "\\spad{fortranTypeOf(u,tab)} returns the type of \\spad{u} in \\spad{tab}")) (|declare!| (((|FortranType|) (|Symbol|) (|FortranType|) $) "\\spad{declare!(u,t,tab)} creates a new entry in \\spad{tab},{} declaring \\spad{u} to be of type \\spad{t}") (((|FortranType|) (|List| (|Symbol|)) (|FortranType|) $) "\\spad{declare!(l,t,tab)} creates new entrys in \\spad{tab},{} declaring each of \\spad{l} to be of type \\spad{t}")) (|empty| (($) "\\spad{empty()} returns a new,{} empty symbol table")) (|coerce| (((|Table| (|Symbol|) (|FortranType|)) $) "\\spad{coerce(x)} returns a table view of \\spad{x}"))) 
NIL 
NIL 
(-1094) 
((|constructor| (NIL "\\indented{1}{This domain provides a simple domain,{} general enough for} \\indented{2}{building complete representation of Spad programs as objects} \\indented{2}{of a term algebra built from ground terms of type integers,{} foats,{}} \\indented{2}{identifiers,{} and strings.} \\indented{2}{This domain differs from InputForm in that it represents} \\indented{2}{any entity in a Spad program,{} not just expressions.\\space{2}Furthermore,{}} \\indented{2}{while InputForm may contain atoms like vectors and other Lisp} \\indented{2}{objects,{} the Syntax domain is supposed to contain only that} \\indented{2}{initial algebra build from the primitives listed above.} Related Constructors: \\indented{2}{Integer,{} DoubleFloat,{} Identifier,{} String,{} SExpression.} See Also: SExpression,{} InputForm. The equality supported by this domain is structural.")) (|case| (((|Boolean|) $ (|[\|\|]| (|String|))) "\\spad{x case String} is \\spad{true} if `x' really is a String") (((|Boolean|) $ (|[\|\|]| (|Identifier|))) "\\spad{x case Identifier} is \\spad{true} if `x' really is an Identifier") (((|Boolean|) $ (|[\|\|]| (|DoubleFloat|))) "\\spad{x case DoubleFloat} is \\spad{true} if `x' really is a DoubleFloat") (((|Boolean|) $ (|[\|\|]| (|Integer|))) "\\spad{x case Integer} is \\spad{true} if `x' really is an Integer")) (|compound?| (((|Boolean|) $) "\\spad{compound? x} is \\spad{true} when `x' is not an atomic syntax.")) (|getOperands| (((|List| $) $) "\\spad{getOperands(x)} returns the list of operands to the operator in `x'.")) (|getOperator| (((|Union| (|Integer|) (|DoubleFloat|) (|Identifier|) (|String|) $) $) "\\spad{getOperator(x)} returns the operator,{} or tag,{} of the syntax `x'. The value returned is itself a syntax if `x' really is an application of a function symbol as opposed to being an atomic ground term.")) (|nil?| (((|Boolean|) $) "\\spad{nil?(s)} is \\spad{true} when `s' is a syntax for the constant nil.")) (|buildSyntax| (($ $ (|List| $)) "\\spad{buildSyntax(op, [a1, ..., an])} builds a syntax object for \\spad{op}(\\spad{a1},{}...,{}an).") (($ (|Identifier|) (|List| $)) "\\spad{buildSyntax(op, [a1, ..., an])} builds a syntax object for \\spad{op}(\\spad{a1},{}...,{}an).")) (|autoCoerce| (((|String|) $) "\\spad{autoCoerce(s)} forcibly extracts a string value from the syntax `s'; no check performed. To be called only at the discretion of the compiler.") (((|Identifier|) $) "\\spad{autoCoerce(s)} forcibly extracts an identifier from the Syntax domain `s'; no check performed. To be called only at at the discretion of the compiler.") (((|DoubleFloat|) $) "\\spad{autoCoerce(s)} forcibly extracts a float value from the syntax `s'; no check performed. To be called only at the discretion of the compiler") (((|Integer|) $) "\\spad{autoCoerce(s)} forcibly extracts an integer value from the syntax `s'; no check performed. To be called only at the discretion of the compiler.")) (|coerce| (((|String|) $) "\\spad{coerce(s)} extracts a string value from the syntax `s'.") (((|Identifier|) $) "\\spad{coerce(s)} extracts an identifier from the syntax `s'.") (((|DoubleFloat|) $) "\\spad{coerce(s)} extracts a float value from the syntax `s'.") (((|Integer|) $) "\\spad{coerce(s)} extracts and integer value from the syntax `s'")) (|convert| (($ (|SExpression|)) "\\spad{convert(s)} converts an \\spad{s}-expression to Syntax. Note,{} when `s' is not an atom,{} it is expected that it designates a proper list,{} \\spadignore{e.g.} a sequence of cons cells ending with nil.") (((|SExpression|) $) "\\spad{convert(s)} returns the \\spad{s}-expression representation of a syntax."))) 
NIL 
NIL 
(-1095 N) 
((|constructor| (NIL "This domain implements sized (signed) integer datatypes parameterized by the precision (or width) of the underlying representation. The intent is that they map directly to the hosting hardware natural integer datatypes. Consequently,{} natural values for \\spad{N} are: 8,{} 16,{} 32,{} 64,{} etc. These datatypes are mostly useful for system programming tasks,{} \\spadignore{i.e.} interfacting with the hosting operating system,{} reading/writing external binary format files.")) (|sample| (($) "\\spad{sample} gives a sample datum of this type."))) 
NIL 
NIL 
(-1096 N) 
((|constructor| (NIL "This domain implements sized (unsigned) integer datatypes parameterized by the precision (or width) of the underlying representation. The intent is that they map directly to the hosting hardware natural integer datatypes. Consequently,{} natural values for \\spad{N} are: 8,{} 16,{} 32,{} 64,{} etc. These datatypes are mostly useful for system programming tasks,{} \\spadignore{i.e.} interfacting with the hosting operating system,{} reading/writing external binary format files.")) (|sample| (($) "\\spad{sample} gives a sample datum of type Byte.")) (|bitior| (($ $ $) "\\spad{bitior(x,y)} returns the bitwise `inclusive or' of `x' and `y'.")) (|bitand| (($ $ $) "\\spad{bitand(x,y)} returns the bitwise `and' of `x' and `y'."))) 
NIL 
NIL 
(-1097) 
((|constructor| (NIL "This domain is a datatype system-level pointer values."))) 
NIL 
NIL 
(-1098 R) 
((|triangularSystems| (((|List| (|List| (|Polynomial| |#1|))) (|List| (|Fraction| (|Polynomial| |#1|))) (|List| (|Symbol|))) "\\spad{triangularSystems(lf,lv)} solves the system of equations defined by \\spad{lf} with respect to the list of symbols \\spad{lv}; the system of equations is obtaining by equating to zero the list of rational functions \\spad{lf}. The output is a list of solutions where each solution is expressed as a \"reduced\" triangular system of polynomials.")) (|solve| (((|List| (|Equation| (|Fraction| (|Polynomial| |#1|)))) (|Equation| (|Fraction| (|Polynomial| |#1|)))) "\\spad{solve(eq)} finds the solutions of the equation \\spad{eq} with respect to the unique variable appearing in \\spad{eq}.") (((|List| (|Equation| (|Fraction| (|Polynomial| |#1|)))) (|Fraction| (|Polynomial| |#1|))) "\\spad{solve(p)} finds the solution of a rational function \\spad{p} = 0 with respect to the unique variable appearing in \\spad{p}.") (((|List| (|Equation| (|Fraction| (|Polynomial| |#1|)))) (|Equation| (|Fraction| (|Polynomial| |#1|))) (|Symbol|)) "\\spad{solve(eq,v)} finds the solutions of the equation \\spad{eq} with respect to the variable \\spad{v}.") (((|List| (|Equation| (|Fraction| (|Polynomial| |#1|)))) (|Fraction| (|Polynomial| |#1|)) (|Symbol|)) "\\spad{solve(p,v)} solves the equation \\spad{p=0},{} where \\spad{p} is a rational function with respect to the variable \\spad{v}.") (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) "\\spad{solve(le)} finds the solutions of the list \\spad{le} of equations of rational functions with respect to all symbols appearing in \\spad{le}.") (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Fraction| (|Polynomial| |#1|)))) "\\spad{solve(lp)} finds the solutions of the list \\spad{lp} of rational functions with respect to all symbols appearing in \\spad{lp}.") (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Equation| (|Fraction| (|Polynomial| |#1|)))) (|List| (|Symbol|))) "\\spad{solve(le,lv)} finds the solutions of the list \\spad{le} of equations of rational functions with respect to the list of symbols \\spad{lv}.") (((|List| (|List| (|Equation| (|Fraction| (|Polynomial| |#1|))))) (|List| (|Fraction| (|Polynomial| |#1|))) (|List| (|Symbol|))) "\\spad{solve(lp,lv)} finds the solutions of the list \\spad{lp} of rational functions with respect to the list of symbols \\spad{lv}."))) 
NIL 
NIL 
(-1099) 
((|constructor| (NIL "The package \\spadtype{System} provides information about the runtime system and its characteristics.")) (|loadNativeModule| (((|Void|) (|String|)) "\\spad{loadNativeModule(path)} loads the native modile designated by \\spadvar{\\spad{path}}.")) (|nativeModuleExtension| (((|String|)) "\\spad{nativeModuleExtension} is a string representation of a filename extension for native modules.")) (|hostByteOrder| (((|ByteOrder|)) "\\sapd{hostByteOrder}")) (|hostPlatform| (((|String|)) "\\spad{hostPlatform} is a string `triplet' description of the platform hosting the running OpenAxiom system.")) (|rootDirectory| (((|String|)) "\\spad{rootDirectory()} returns the pathname of the root directory for the running OpenAxiom system."))) 
NIL 
NIL 
(-1100 S) 
((|constructor| (NIL "TableauBumpers implements the Schenstead-Knuth correspondence between sequences and pairs of Young tableaux. The 2 Young tableaux are represented as a single tableau with pairs as components.")) (|mr| (((|Record| (|:| |f1| (|List| |#1|)) (|:| |f2| (|List| (|List| (|List| |#1|)))) (|:| |f3| (|List| (|List| |#1|))) (|:| |f4| (|List| (|List| (|List| |#1|))))) (|List| (|List| (|List| |#1|)))) "\\spad{mr(t)} is an auxiliary function which finds the position of the maximum element of a tableau \\spad{t} which is in the lowest row,{} producing a record of results")) (|maxrow| (((|Record| (|:| |f1| (|List| |#1|)) (|:| |f2| (|List| (|List| (|List| |#1|)))) (|:| |f3| (|List| (|List| |#1|))) (|:| |f4| (|List| (|List| (|List| |#1|))))) (|List| |#1|) (|List| (|List| (|List| |#1|))) (|List| (|List| |#1|)) (|List| (|List| (|List| |#1|))) (|List| (|List| (|List| |#1|))) (|List| (|List| (|List| |#1|)))) "\\spad{maxrow(a,b,c,d,e)} is an auxiliary function for mr")) (|inverse| (((|List| |#1|) (|List| |#1|)) "\\spad{inverse(ls)} forms the inverse of a sequence \\spad{ls}")) (|slex| (((|List| (|List| |#1|)) (|List| |#1|)) "\\spad{slex(ls)} sorts the argument sequence \\spad{ls},{} then zips (see \\spadfunFrom{map}{\\spad{ListFunctions3}}) the original argument sequence with the sorted result to a list of pairs")) (|lex| (((|List| (|List| |#1|)) (|List| (|List| |#1|))) "\\spad{lex(ls)} sorts a list of pairs to lexicographic order")) (|tab| (((|Tableau| (|List| |#1|)) (|List| |#1|)) "\\spad{tab(ls)} creates a tableau from \\spad{ls} by first creating a list of pairs using \\spadfunFrom{slex}{TableauBumpers},{} then creating a tableau using \\spadfunFrom{\\spad{tab1}}{TableauBumpers}.")) (|tab1| (((|List| (|List| (|List| |#1|))) (|List| (|List| |#1|))) "\\spad{tab1(lp)} creates a tableau from a list of pairs \\spad{lp}")) (|bat| (((|List| (|List| |#1|)) (|Tableau| (|List| |#1|))) "\\spad{bat(ls)} unbumps a tableau \\spad{ls}")) (|bat1| (((|List| (|List| |#1|)) (|List| (|List| (|List| |#1|)))) "\\spad{bat1(llp)} unbumps a tableau \\spad{llp}. Operation \\spad{bat1} is the inverse of \\spad{tab1}.")) (|untab| (((|List| (|List| |#1|)) (|List| (|List| |#1|)) (|List| (|List| (|List| |#1|)))) "\\spad{untab(lp,llp)} is an auxiliary function which unbumps a tableau \\spad{llp},{} using \\spad{lp} to accumulate pairs")) (|bumptab1| (((|List| (|List| (|List| |#1|))) (|List| |#1|) (|List| (|List| (|List| |#1|)))) "\\spad{bumptab1(pr,t)} bumps a tableau \\spad{t} with a pair \\spad{pr} using comparison function \\spadfun{<},{} returning a new tableau")) (|bumptab| (((|List| (|List| (|List| |#1|))) (|Mapping| (|Boolean|) |#1| |#1|) (|List| |#1|) (|List| (|List| (|List| |#1|)))) "\\spad{bumptab(cf,pr,t)} bumps a tableau \\spad{t} with a pair \\spad{pr} using comparison function \\spad{cf},{} returning a new tableau")) (|bumprow| (((|Record| (|:| |fs| (|Boolean|)) (|:| |sd| (|List| |#1|)) (|:| |td| (|List| (|List| |#1|)))) (|Mapping| (|Boolean|) |#1| |#1|) (|List| |#1|) (|List| (|List| |#1|))) "\\spad{bumprow(cf,pr,r)} is an auxiliary function which bumps a row \\spad{r} with a pair \\spad{pr} using comparison function \\spad{cf},{} and returns a record"))) 
NIL 
NIL 
(-1101 |Key| |Entry|) 
((|constructor| (NIL "This is the general purpose table type. The keys are hashed to look up the entries. This creates a \\spadtype{HashTable} if equal for the Key domain is consistent with Lisp EQUAL otherwise an \\spadtype{AssociationList}"))) 
((-3994 . T) (-3995 . T)) 
((-12 (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (|%list| (QUOTE -260) (|%list| (QUOTE -2) (|%list| (QUOTE |:|) (QUOTE -3859) (|devaluate| |#1|)) (|%list| (QUOTE |:|) (QUOTE |entry|) (|devaluate| |#2|))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013)))) (OR (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| |#2| (QUOTE (-552 (-772))))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-553 (-473)))) (-12 (|HasCategory| |#2| (QUOTE (-1013))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#2| (QUOTE (-1013))) (OR (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) (|HasCategory| |#2| (QUOTE (-72))) (|HasCategory| |#2| (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-552 (-772)))) (|HasCategory| (-2 (|:| -3859 |#1|) (|:| |entry| |#2|)) (QUOTE (-72)))) 
(-1102 S) 
((|constructor| (NIL "\\indented{1}{The tableau domain is for printing Young tableaux,{} and} coercions to and from List List \\spad{S} where \\spad{S} is a set.")) (|coerce| (((|OutputForm|) $) "\\spad{coerce(t)} converts a tableau \\spad{t} to an output form.")) (|listOfLists| (((|List| (|List| |#1|)) $) "\\spad{listOfLists t} converts a tableau \\spad{t} to a list of lists.")) (|tableau| (($ (|List| (|List| |#1|))) "\\spad{tableau(ll)} converts a list of lists \\spad{ll} to a tableau."))) 
NIL 
NIL 
(-1103 S) 
((|constructor| (NIL "\\indented{1}{Author: Gabriel Dos Reis} Date Created: April 17,{} 2010 Date Last Modified: April 17,{} 2010")) (|operator| (($ |#1| (|Arity|)) "\\spad{operator(n,a)} returns an operator named \\spad{n} and with arity \\spad{a}."))) 
NIL 
NIL 
(-1104 R) 
((|constructor| (NIL "Expands tangents of sums and scalar products.")) (|tanNa| ((|#1| |#1| (|Integer|)) "\\spad{tanNa(a, n)} returns \\spad{f(a)} such that if \\spad{a = tan(u)} then \\spad{f(a) = tan(n * u)}.")) (|tanAn| (((|SparseUnivariatePolynomial| |#1|) |#1| (|PositiveInteger|)) "\\spad{tanAn(a, n)} returns \\spad{P(x)} such that if \\spad{a = tan(u)} then \\spad{P(tan(u/n)) = 0}.")) (|tanSum| ((|#1| (|List| |#1|)) "\\spad{tanSum([a1,...,an])} returns \\spad{f(a1,...,an)} such that if \\spad{ai = tan(ui)} then \\spad{f(a1,...,an) = tan(u1 + ... + un)}."))) 
NIL 
NIL 
(-1105 S |Key| |Entry|) 
((|constructor| (NIL "A table aggregate is a model of a table,{} \\spadignore{i.e.} a discrete many-to-one mapping from keys to entries.")) (|map| (($ (|Mapping| |#3| |#3| |#3|) $ $) "\\spad{map(fn,t1,t2)} creates a new table \\spad{t} from given tables \\spad{t1} and \\spad{t2} with elements \\spad{fn}(\\spad{x},{}\\spad{y}) where \\spad{x} and \\spad{y} are corresponding elements from \\spad{t1} and \\spad{t2} respectively.")) (|table| (($ (|List| (|Record| (|:| |key| |#2|) (|:| |entry| |#3|)))) "\\spad{table([x,y,...,z])} creates a table consisting of entries \\axiom{\\spad{x},{}\\spad{y},{}...,{}\\spad{z}}.") (($) "\\spad{table()}\\$\\spad{T} creates an empty table of type \\spad{T}.")) (|setelt| ((|#3| $ |#2| |#3|) "\\spad{setelt(t,k,e)} (also written \\axiom{\\spad{t}.\\spad{k} := \\spad{e}}) is equivalent to \\axiom{(insert([\\spad{k},{}\\spad{e}],{}\\spad{t}); \\spad{e})}."))) 
NIL 
NIL 
(-1106 |Key| |Entry|) 
((|constructor| (NIL "A table aggregate is a model of a table,{} \\spadignore{i.e.} a discrete many-to-one mapping from keys to entries.")) (|map| (($ (|Mapping| |#2| |#2| |#2|) $ $) "\\spad{map(fn,t1,t2)} creates a new table \\spad{t} from given tables \\spad{t1} and \\spad{t2} with elements \\spad{fn}(\\spad{x},{}\\spad{y}) where \\spad{x} and \\spad{y} are corresponding elements from \\spad{t1} and \\spad{t2} respectively.")) (|table| (($ (|List| (|Record| (|:| |key| |#1|) (|:| |entry| |#2|)))) "\\spad{table([x,y,...,z])} creates a table consisting of entries \\axiom{\\spad{x},{}\\spad{y},{}...,{}\\spad{z}}.") (($) "\\spad{table()}\\$\\spad{T} creates an empty table of type \\spad{T}.")) (|setelt| ((|#2| $ |#1| |#2|) "\\spad{setelt(t,k,e)} (also written \\axiom{\\spad{t}.\\spad{k} := \\spad{e}}) is equivalent to \\axiom{(insert([\\spad{k},{}\\spad{e}],{}\\spad{t}); \\spad{e})}."))) 
((-3995 . T)) 
NIL 
(-1107 |Key| |Entry|) 
((|constructor| (NIL "\\axiom{TabulatedComputationPackage(Key ,{}Entry)} provides some modest support for dealing with operations with type \\axiom{Key -> Entry}. The result of such operations can be stored and retrieved with this package by using a hash-table. The user does not need to worry about the management of this hash-table. However,{} onnly one hash-table is built by calling \\axiom{TabulatedComputationPackage(Key ,{}Entry)}.")) (|insert!| (((|Void|) |#1| |#2|) "\\axiom{insert!(\\spad{x},{}\\spad{y})} stores the item whose key is \\axiom{\\spad{x}} and whose entry is \\axiom{\\spad{y}}.")) (|extractIfCan| (((|Union| |#2| "failed") |#1|) "\\axiom{extractIfCan(\\spad{x})} searches the item whose key is \\axiom{\\spad{x}}.")) (|makingStats?| (((|Boolean|)) "\\axiom{makingStats?()} returns \\spad{true} iff the statisitics process is running.")) (|printingInfo?| (((|Boolean|)) "\\axiom{printingInfo?()} returns \\spad{true} iff messages are printed when manipulating items from the hash-table.")) (|usingTable?| (((|Boolean|)) "\\axiom{usingTable?()} returns \\spad{true} iff the hash-table is used")) (|clearTable!| (((|Void|)) "\\axiom{clearTable!()} clears the hash-table and assumes that it will no longer be used.")) (|printStats!| (((|Void|)) "\\axiom{printStats!()} prints the statistics.")) (|startStats!| (((|Void|) (|String|)) "\\axiom{startStats!(\\spad{x})} initializes the statisitics process and sets the comments to display when statistics are printed")) (|printInfo!| (((|Void|) (|String|) (|String|)) "\\axiom{printInfo!(\\spad{x},{}\\spad{y})} initializes the mesages to be printed when manipulating items from the hash-table. If a key is retrieved then \\axiom{\\spad{x}} is displayed. If an item is stored then \\axiom{\\spad{y}} is displayed.")) (|initTable!| (((|Void|)) "\\axiom{initTable!()} initializes the hash-table."))) 
NIL 
NIL 
(-1108) 
((|constructor| (NIL "\\spadtype{TexFormat} provides a coercion from \\spadtype{OutputForm} to \\TeX{} format. The particular dialect of \\TeX{} used is \\LaTeX{}. The basic object consists of three parts: a prologue,{} a tex part and an epilogue. The functions \\spadfun{prologue},{} \\spadfun{tex} and \\spadfun{epilogue} extract these parts,{} respectively. The main guts of the expression go into the tex part. The other parts can be set (\\spadfun{setPrologue!},{} \\spadfun{setEpilogue!}) so that contain the appropriate tags for printing. For example,{} the prologue and epilogue might simply contain ``\\verb+\\[+'' and ``\\verb+\\]+'',{} respectively,{} so that the TeX section will be printed in LaTeX display math mode.")) (|setPrologue!| (((|List| (|String|)) $ (|List| (|String|))) "\\spad{setPrologue!(t,strings)} sets the prologue section of a TeX form \\spad{t} to \\spad{strings}.")) (|setTex!| (((|List| (|String|)) $ (|List| (|String|))) "\\spad{setTex!(t,strings)} sets the TeX section of a TeX form \\spad{t} to \\spad{strings}.")) (|setEpilogue!| (((|List| (|String|)) $ (|List| (|String|))) "\\spad{setEpilogue!(t,strings)} sets the epilogue section of a TeX form \\spad{t} to \\spad{strings}.")) (|prologue| (((|List| (|String|)) $) "\\spad{prologue(t)} extracts the prologue section of a TeX form \\spad{t}.")) (|new| (($) "\\spad{new()} create a new,{} empty object. Use \\spadfun{setPrologue!},{} \\spadfun{setTex!} and \\spadfun{setEpilogue!} to set the various components of this object.")) (|tex| (((|List| (|String|)) $) "\\spad{tex(t)} extracts the TeX section of a TeX form \\spad{t}.")) (|epilogue| (((|List| (|String|)) $) "\\spad{epilogue(t)} extracts the epilogue section of a TeX form \\spad{t}.")) (|display| (((|Void|) $) "\\spad{display(t)} outputs the TeX formatted code \\spad{t} so that each line has length less than or equal to the value set by the system command \\spadsyscom{set output length}.") (((|Void|) $ (|Integer|)) "\\spad{display(t,width)} outputs the TeX formatted code \\spad{t} so that each line has length less than or equal to \\spadvar{\\spad{width}}.")) (|convert| (($ (|OutputForm|) (|Integer|) (|OutputForm|)) "\\spad{convert(o,step,type)} changes \\spad{o} in standard output format to TeX format and also adds the given \\spad{step} number and \\spad{type}. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter \\spad{step} numbers.") (($ (|OutputForm|) (|Integer|)) "\\spad{convert(o,step)} changes \\spad{o} in standard output format to TeX format and also adds the given \\spad{step} number. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter \\spad{step} numbers."))) 
NIL 
NIL 
(-1109 S) 
((|constructor| (NIL "\\spadtype{TexFormat1} provides a utility coercion for changing to TeX format anything that has a coercion to the standard output format.")) (|coerce| (((|TexFormat|) |#1|) "\\spad{coerce(s)} provides a direct coercion from a domain \\spad{S} to TeX format. This allows the user to skip the step of first manually coercing the object to standard output format before it is coerced to TeX format."))) 
NIL 
NIL 
(-1110) 
((|constructor| (NIL "This domain provides an implementation of text files. Text is stored in these files using the native character set of the computer.")) (|endOfFile?| (((|Boolean|) $) "\\spad{endOfFile?(f)} tests whether the file \\spad{f} is positioned after the end of all text. If the file is open for output,{} then this test is always \\spad{true}.")) (|readIfCan!| (((|Union| (|String|) "failed") $) "\\spad{readIfCan!(f)} returns a string of the contents of a line from file \\spad{f},{} if possible. If \\spad{f} is not readable or if it is positioned at the end of file,{} then \\spad{\"failed\"} is returned.")) (|readLineIfCan!| (((|Union| (|String|) "failed") $) "\\spad{readLineIfCan!(f)} returns a string of the contents of a line from file \\spad{f},{} if possible. If \\spad{f} is not readable or if it is positioned at the end of file,{} then \\spad{\"failed\"} is returned.")) (|readLine!| (((|String|) $) "\\spad{readLine!(f)} returns a string of the contents of a line from the file \\spad{f}.")) (|writeLine!| (((|String|) $) "\\spad{writeLine!(f)} finishes the current line in the file \\spad{f}. An empty string is returned. The call \\spad{writeLine!(f)} is equivalent to \\spad{writeLine!(f,\"\")}.") (((|String|) $ (|String|)) "\\spad{writeLine!(f,s)} writes the contents of the string \\spad{s} and finishes the current line in the file \\spad{f}. The value of \\spad{s} is returned."))) 
NIL 
NIL 
(-1111 R) 
((|constructor| (NIL "Tools for the sign finding utilities.")) (|direction| (((|Integer|) (|String|)) "\\spad{direction(s)} \\undocumented")) (|nonQsign| (((|Union| (|Integer|) "failed") |#1|) "\\spad{nonQsign(r)} \\undocumented")) (|sign| (((|Union| (|Integer|) "failed") |#1|) "\\spad{sign(r)} \\undocumented"))) 
NIL 
NIL 
(-1112) 
((|constructor| (NIL "This package exports a function for making a \\spadtype{ThreeSpace}")) (|createThreeSpace| (((|ThreeSpace| (|DoubleFloat|))) "\\spad{createThreeSpace()} creates a \\spadtype{ThreeSpace(DoubleFloat)} object capable of holding point,{} curve,{} mesh components and any combination."))) 
NIL 
NIL 
(-1113 S) 
((|constructor| (NIL "Category for the transcendental elementary functions.")) (|pi| (($) "\\spad{pi()} returns the constant \\spad{pi}."))) 
NIL 
NIL 
(-1114) 
((|constructor| (NIL "Category for the transcendental elementary functions.")) (|pi| (($) "\\spad{pi()} returns the constant \\spad{pi}."))) 
NIL 
NIL 
(-1115 S) 
((|constructor| (NIL "\\spadtype{Tree(S)} is a basic domains of tree structures. Each tree is either empty or else is a {\\it node} consisting of a value and a list of (sub)trees.")) (|cyclicParents| (((|List| $) $) "\\spad{cyclicParents(t)} returns a list of cycles that are parents of \\spad{t}.")) (|cyclicEqual?| (((|Boolean|) $ $) "\\spad{cyclicEqual?(t1, t2)} tests of two cyclic trees have the same structure.")) (|cyclicEntries| (((|List| $) $) "\\spad{cyclicEntries(t)} returns a list of top-level cycles in tree \\spad{t}.")) (|cyclicCopy| (($ $) "\\spad{cyclicCopy(l)} makes a copy of a (possibly) cyclic tree \\spad{l}.")) (|cyclic?| (((|Boolean|) $) "\\spad{cyclic?(t)} tests if \\spad{t} is a cyclic tree.")) (|tree| (($ |#1|) "\\spad{tree(nd)} creates a tree with value \\spad{nd},{} and no children") (($ (|List| |#1|)) "\\spad{tree(ls)} creates a tree from a list of elements of \\spad{s}.") (($ |#1| (|List| $)) "\\spad{tree(nd,ls)} creates a tree with value \\spad{nd},{} and children \\spad{ls}."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (|HasCategory| |#1| (QUOTE (-1013))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-72)))) 
(-1116 S) 
((|constructor| (NIL "Category for the trigonometric functions.")) (|tan| (($ $) "\\spad{tan(x)} returns the tangent of \\spad{x}.")) (|sin| (($ $) "\\spad{sin(x)} returns the sine of \\spad{x}.")) (|sec| (($ $) "\\spad{sec(x)} returns the secant of \\spad{x}.")) (|csc| (($ $) "\\spad{csc(x)} returns the cosecant of \\spad{x}.")) (|cot| (($ $) "\\spad{cot(x)} returns the cotangent of \\spad{x}.")) (|cos| (($ $) "\\spad{cos(x)} returns the cosine of \\spad{x}."))) 
NIL 
NIL 
(-1117) 
((|constructor| (NIL "Category for the trigonometric functions.")) (|tan| (($ $) "\\spad{tan(x)} returns the tangent of \\spad{x}.")) (|sin| (($ $) "\\spad{sin(x)} returns the sine of \\spad{x}.")) (|sec| (($ $) "\\spad{sec(x)} returns the secant of \\spad{x}.")) (|csc| (($ $) "\\spad{csc(x)} returns the cosecant of \\spad{x}.")) (|cot| (($ $) "\\spad{cot(x)} returns the cotangent of \\spad{x}.")) (|cos| (($ $) "\\spad{cos(x)} returns the cosine of \\spad{x}."))) 
NIL 
NIL 
(-1118 R -3092) 
((|constructor| (NIL "\\spadtype{TrigonometricManipulations} provides transformations from trigonometric functions to complex exponentials and logarithms,{} and back.")) (|complexForm| (((|Complex| |#2|) |#2|) "\\spad{complexForm(f)} returns \\spad{[real f, imag f]}.")) (|real?| (((|Boolean|) |#2|) "\\spad{real?(f)} returns \\spad{true} if \\spad{f = real f}.")) (|imag| ((|#2| |#2|) "\\spad{imag(f)} returns the imaginary part of \\spad{f} where \\spad{f} is a complex function.")) (|real| ((|#2| |#2|) "\\spad{real(f)} returns the real part of \\spad{f} where \\spad{f} is a complex function.")) (|trigs| ((|#2| |#2|) "\\spad{trigs(f)} rewrites all the complex logs and exponentials appearing in \\spad{f} in terms of trigonometric functions.")) (|complexElementary| ((|#2| |#2| (|Symbol|)) "\\spad{complexElementary(f, x)} rewrites the kernels of \\spad{f} involving \\spad{x} in terms of the 2 fundamental complex transcendental elementary functions: \\spad{log, exp}.") ((|#2| |#2|) "\\spad{complexElementary(f)} rewrites \\spad{f} in terms of the 2 fundamental complex transcendental elementary functions: \\spad{log, exp}.")) (|complexNormalize| ((|#2| |#2| (|Symbol|)) "\\spad{complexNormalize(f, x)} rewrites \\spad{f} using the least possible number of complex independent kernels involving \\spad{x}.") ((|#2| |#2|) "\\spad{complexNormalize(f)} rewrites \\spad{f} using the least possible number of complex independent kernels."))) 
NIL 
NIL 
(-1119 R |Row| |Col| M) 
((|constructor| (NIL "This package provides functions that compute \"fraction-free\" inverses of upper and lower triangular matrices over a integral domain. By \"fraction-free inverses\" we mean the following: given a matrix \\spad{B} with entries in \\spad{R} and an element \\spad{d} of \\spad{R} such that \\spad{d} * inv(\\spad{B}) also has entries in \\spad{R},{} we return \\spad{d} * inv(\\spad{B}). Thus,{} it is not necessary to pass to the quotient field in any of our computations.")) (|LowTriBddDenomInv| ((|#4| |#4| |#1|) "\\spad{LowTriBddDenomInv(B,d)} returns \\spad{M},{} where \\spad{B} is a non-singular lower triangular matrix and \\spad{d} is an element of \\spad{R} such that \\spad{M = d * inv(B)} has entries in \\spad{R}.")) (|UpTriBddDenomInv| ((|#4| |#4| |#1|) "\\spad{UpTriBddDenomInv(B,d)} returns \\spad{M},{} where \\spad{B} is a non-singular upper triangular matrix and \\spad{d} is an element of \\spad{R} such that \\spad{M = d * inv(B)} has entries in \\spad{R}."))) 
NIL 
NIL 
(-1120 R -3092) 
((|constructor| (NIL "TranscendentalManipulations provides functions to simplify and expand expressions involving transcendental operators.")) (|expandTrigProducts| ((|#2| |#2|) "\\spad{expandTrigProducts(e)} replaces \\axiom{sin(\\spad{x})*sin(\\spad{y})} by \\spad{(cos(x-y)-cos(x+y))/2},{} \\axiom{cos(\\spad{x})*cos(\\spad{y})} by \\spad{(cos(x-y)+cos(x+y))/2},{} and \\axiom{sin(\\spad{x})*cos(\\spad{y})} by \\spad{(sin(x-y)+sin(x+y))/2}. Note that this operation uses the pattern matcher and so is relatively expensive. To avoid getting into an infinite loop the transformations are applied at most ten times.")) (|removeSinhSq| ((|#2| |#2|) "\\spad{removeSinhSq(f)} converts every \\spad{sinh(u)**2} appearing in \\spad{f} into \\spad{1 - cosh(x)**2},{} and also reduces higher powers of \\spad{sinh(u)} with that formula.")) (|removeCoshSq| ((|#2| |#2|) "\\spad{removeCoshSq(f)} converts every \\spad{cosh(u)**2} appearing in \\spad{f} into \\spad{1 - sinh(x)**2},{} and also reduces higher powers of \\spad{cosh(u)} with that formula.")) (|removeSinSq| ((|#2| |#2|) "\\spad{removeSinSq(f)} converts every \\spad{sin(u)**2} appearing in \\spad{f} into \\spad{1 - cos(x)**2},{} and also reduces higher powers of \\spad{sin(u)} with that formula.")) (|removeCosSq| ((|#2| |#2|) "\\spad{removeCosSq(f)} converts every \\spad{cos(u)**2} appearing in \\spad{f} into \\spad{1 - sin(x)**2},{} and also reduces higher powers of \\spad{cos(u)} with that formula.")) (|coth2tanh| ((|#2| |#2|) "\\spad{coth2tanh(f)} converts every \\spad{coth(u)} appearing in \\spad{f} into \\spad{1/tanh(u)}.")) (|cot2tan| ((|#2| |#2|) "\\spad{cot2tan(f)} converts every \\spad{cot(u)} appearing in \\spad{f} into \\spad{1/tan(u)}.")) (|tanh2coth| ((|#2| |#2|) "\\spad{tanh2coth(f)} converts every \\spad{tanh(u)} appearing in \\spad{f} into \\spad{1/coth(u)}.")) (|tan2cot| ((|#2| |#2|) "\\spad{tan2cot(f)} converts every \\spad{tan(u)} appearing in \\spad{f} into \\spad{1/cot(u)}.")) (|tanh2trigh| ((|#2| |#2|) "\\spad{tanh2trigh(f)} converts every \\spad{tanh(u)} appearing in \\spad{f} into \\spad{sinh(u)/cosh(u)}.")) (|tan2trig| ((|#2| |#2|) "\\spad{tan2trig(f)} converts every \\spad{tan(u)} appearing in \\spad{f} into \\spad{sin(u)/cos(u)}.")) (|sinh2csch| ((|#2| |#2|) "\\spad{sinh2csch(f)} converts every \\spad{sinh(u)} appearing in \\spad{f} into \\spad{1/csch(u)}.")) (|sin2csc| ((|#2| |#2|) "\\spad{sin2csc(f)} converts every \\spad{sin(u)} appearing in \\spad{f} into \\spad{1/csc(u)}.")) (|sech2cosh| ((|#2| |#2|) "\\spad{sech2cosh(f)} converts every \\spad{sech(u)} appearing in \\spad{f} into \\spad{1/cosh(u)}.")) (|sec2cos| ((|#2| |#2|) "\\spad{sec2cos(f)} converts every \\spad{sec(u)} appearing in \\spad{f} into \\spad{1/cos(u)}.")) (|csch2sinh| ((|#2| |#2|) "\\spad{csch2sinh(f)} converts every \\spad{csch(u)} appearing in \\spad{f} into \\spad{1/sinh(u)}.")) (|csc2sin| ((|#2| |#2|) "\\spad{csc2sin(f)} converts every \\spad{csc(u)} appearing in \\spad{f} into \\spad{1/sin(u)}.")) (|coth2trigh| ((|#2| |#2|) "\\spad{coth2trigh(f)} converts every \\spad{coth(u)} appearing in \\spad{f} into \\spad{cosh(u)/sinh(u)}.")) (|cot2trig| ((|#2| |#2|) "\\spad{cot2trig(f)} converts every \\spad{cot(u)} appearing in \\spad{f} into \\spad{cos(u)/sin(u)}.")) (|cosh2sech| ((|#2| |#2|) "\\spad{cosh2sech(f)} converts every \\spad{cosh(u)} appearing in \\spad{f} into \\spad{1/sech(u)}.")) (|cos2sec| ((|#2| |#2|) "\\spad{cos2sec(f)} converts every \\spad{cos(u)} appearing in \\spad{f} into \\spad{1/sec(u)}.")) (|expandLog| ((|#2| |#2|) "\\spad{expandLog(f)} converts every \\spad{log(a/b)} appearing in \\spad{f} into \\spad{log(a) - log(b)},{} and every \\spad{log(a*b)} into \\spad{log(a) + log(b)}..")) (|expandPower| ((|#2| |#2|) "\\spad{expandPower(f)} converts every power \\spad{(a/b)**c} appearing in \\spad{f} into \\spad{a**c * b**(-c)}.")) (|simplifyLog| ((|#2| |#2|) "\\spad{simplifyLog(f)} converts every \\spad{log(a) - log(b)} appearing in \\spad{f} into \\spad{log(a/b)},{} every \\spad{log(a) + log(b)} into \\spad{log(a*b)} and every \\spad{n*log(a)} into \\spad{log(a^n)}.")) (|simplifyExp| ((|#2| |#2|) "\\spad{simplifyExp(f)} converts every product \\spad{exp(a)*exp(b)} appearing in \\spad{f} into \\spad{exp(a+b)}.")) (|htrigs| ((|#2| |#2|) "\\spad{htrigs(f)} converts all the exponentials in \\spad{f} into hyperbolic sines and cosines.")) (|simplify| ((|#2| |#2|) "\\spad{simplify(f)} performs the following simplifications on f:\\begin{items} \\item 1. rewrites trigs and hyperbolic trigs in terms of \\spad{sin} ,{}\\spad{cos},{} \\spad{sinh},{} \\spad{cosh}. \\item 2. rewrites \\spad{sin**2} and \\spad{sinh**2} in terms of \\spad{cos} and \\spad{cosh},{} \\item 3. rewrites \\spad{exp(a)*exp(b)} as \\spad{exp(a+b)}. \\item 4. rewrites \\spad{(a**(1/n))**m * (a**(1/s))**t} as a single power of a single radical of \\spad{a}. \\end{items}")) (|expand| ((|#2| |#2|) "\\spad{expand(f)} performs the following expansions on f:\\begin{items} \\item 1. logs of products are expanded into sums of logs,{} \\item 2. trigonometric and hyperbolic trigonometric functions of sums are expanded into sums of products of trigonometric and hyperbolic trigonometric functions. \\item 3. formal powers of the form \\spad{(a/b)**c} are expanded into \\spad{a**c * b**(-c)}. \\end{items}"))) 
NIL 
((-12 (|HasCategory| |#1| (|%list| (QUOTE -553) (|%list| (QUOTE -800) (|devaluate| |#1|)))) (|HasCategory| |#1| (|%list| (QUOTE -796) (|devaluate| |#1|))) (|HasCategory| |#2| (|%list| (QUOTE -553) (|%list| (QUOTE -800) (|devaluate| |#1|)))) (|HasCategory| |#2| (|%list| (QUOTE -796) (|devaluate| |#1|))))) 
(-1121 |Coef|) 
((|constructor| (NIL "\\spadtype{TaylorSeries} is a general multivariate Taylor series domain over the ring Coef and with variables of type Symbol.")) (|fintegrate| (($ (|Mapping| $) (|Symbol|) |#1|) "\\spad{fintegrate(f,v,c)} is the integral of \\spad{f()} with respect \\indented{1}{to \\spad{v} and having \\spad{c} as the constant of integration.} \\indented{1}{The evaluation of \\spad{f()} is delayed.}")) (|integrate| (($ $ (|Symbol|) |#1|) "\\spad{integrate(s,v,c)} is the integral of \\spad{s} with respect \\indented{1}{to \\spad{v} and having \\spad{c} as the constant of integration.}")) (|coerce| (($ (|Polynomial| |#1|)) "\\spad{coerce(s)} regroups terms of \\spad{s} by total degree \\indented{1}{and forms a series.}") (($ (|Symbol|)) "\\spad{coerce(s)} converts a variable to a Taylor series")) (|coefficient| (((|Polynomial| |#1|) $ (|NonNegativeInteger|)) "\\spad{coefficient(s, n)} gives the terms of total degree \\spad{n}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-120))) (|HasCategory| |#1| (QUOTE (-118))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-1122 S R E V P) 
((|constructor| (NIL "The category of triangular sets of multivariate polynomials with coefficients in an integral domain. Let \\axiom{\\spad{R}} be an integral domain and \\axiom{\\spad{V}} a finite ordered set of variables,{} say \\axiom{\\spad{X1} < \\spad{X2} < ... < Xn}. A set \\axiom{\\spad{S}} of polynomials in \\axiom{\\spad{R}[\\spad{X1},{}\\spad{X2},{}...,{}Xn]} is triangular if no elements of \\axiom{\\spad{S}} lies in \\axiom{\\spad{R}},{} and if two distinct elements of \\axiom{\\spad{S}} have distinct main variables. Note that the empty set is a triangular set. A triangular set is not necessarily a (lexicographical) Groebner basis and the notion of reduction related to triangular sets is based on the recursive view of polynomials. We recall this notion here and refer to [1] for more details. A polynomial \\axiom{\\spad{P}} is reduced \\spad{w}.\\spad{r}.\\spad{t} a non-constant polynomial \\axiom{\\spad{Q}} if the degree of \\axiom{\\spad{P}} in the main variable of \\axiom{\\spad{Q}} is less than the main degree of \\axiom{\\spad{Q}}. A polynomial \\axiom{\\spad{P}} is reduced \\spad{w}.\\spad{r}.\\spad{t} a triangular set \\axiom{\\spad{T}} if it is reduced \\spad{w}.\\spad{r}.\\spad{t}. every polynomial of \\axiom{\\spad{T}}. \\newline References : \\indented{1}{[1] \\spad{P}. AUBRY,{} \\spad{D}. LAZARD and \\spad{M}. MORENO MAZA \"On the Theories} \\indented{5}{of Triangular Sets\" Journal of Symbol. Comp. (to appear)}")) (|coHeight| (((|NonNegativeInteger|) $) "\\axiom{coHeight(ts)} returns \\axiom{size()\\$\\spad{V}} minus \\axiom{\\#ts}.")) (|extend| (($ $ |#5|) "\\axiom{extend(ts,{}\\spad{p})} returns a triangular set which encodes the simple extension by \\axiom{\\spad{p}} of the extension of the base field defined by \\axiom{ts},{} according to the properties of triangular sets of the current category If the required properties do not hold an error is returned.")) (|extendIfCan| (((|Union| $ "failed") $ |#5|) "\\axiom{extendIfCan(ts,{}\\spad{p})} returns a triangular set which encodes the simple extension by \\axiom{\\spad{p}} of the extension of the base field defined by \\axiom{ts},{} according to the properties of triangular sets of the current domain. If the required properties do not hold then \"failed\" is returned. This operation encodes in some sense the properties of the triangular sets of the current category. Is is used to implement the \\axiom{construct} operation to guarantee that every triangular set build from a list of polynomials has the required properties.")) (|select| (((|Union| |#5| "failed") $ |#4|) "\\axiom{select(ts,{}\\spad{v})} returns the polynomial of \\axiom{ts} with \\axiom{\\spad{v}} as main variable,{} if any.")) (|algebraic?| (((|Boolean|) |#4| $) "\\axiom{algebraic?(\\spad{v},{}ts)} returns \\spad{true} iff \\axiom{\\spad{v}} is the main variable of some polynomial in \\axiom{ts}.")) (|algebraicVariables| (((|List| |#4|) $) "\\axiom{algebraicVariables(ts)} returns the decreasingly sorted list of the main variables of the polynomials of \\axiom{ts}.")) (|rest| (((|Union| $ "failed") $) "\\axiom{rest(ts)} returns the polynomials of \\axiom{ts} with smaller main variable than \\axiom{mvar(ts)} if \\axiom{ts} is not empty,{} otherwise returns \"failed\"")) (|last| (((|Union| |#5| "failed") $) "\\axiom{last(ts)} returns the polynomial of \\axiom{ts} with smallest main variable if \\axiom{ts} is not empty,{} otherwise returns \\axiom{\"failed\"}.")) (|first| (((|Union| |#5| "failed") $) "\\axiom{first(ts)} returns the polynomial of \\axiom{ts} with greatest main variable if \\axiom{ts} is not empty,{} otherwise returns \\axiom{\"failed\"}.")) (|zeroSetSplitIntoTriangularSystems| (((|List| (|Record| (|:| |close| $) (|:| |open| (|List| |#5|)))) (|List| |#5|)) "\\axiom{zeroSetSplitIntoTriangularSystems(lp)} returns a list of triangular systems \\axiom{[[\\spad{ts1},{}\\spad{qs1}],{}...,{}[tsn,{}qsn]]} such that the zero set of \\axiom{lp} is the union of the closures of the \\axiom{W_i} where \\axiom{W_i} consists of the zeros of \\axiom{ts} which do not cancel any polynomial in \\axiom{qsi}.")) (|zeroSetSplit| (((|List| $) (|List| |#5|)) "\\axiom{zeroSetSplit(lp)} returns a list \\axiom{lts} of triangular sets such that the zero set of \\axiom{lp} is the union of the closures of the regular zero sets of the members of \\axiom{lts}.")) (|reduceByQuasiMonic| ((|#5| |#5| $) "\\axiom{reduceByQuasiMonic(\\spad{p},{}ts)} returns the same as \\axiom{remainder(\\spad{p},{}collectQuasiMonic(ts)).polnum}.")) (|collectQuasiMonic| (($ $) "\\axiom{collectQuasiMonic(ts)} returns the subset of \\axiom{ts} consisting of the polynomials with initial in \\axiom{\\spad{R}}.")) (|removeZero| ((|#5| |#5| $) "\\axiom{removeZero(\\spad{p},{}ts)} returns \\axiom{0} if \\axiom{\\spad{p}} reduces to \\axiom{0} by pseudo-division \\spad{w}.\\spad{r}.\\spad{t} \\axiom{ts} otherwise returns a polynomial \\axiom{\\spad{q}} computed from \\axiom{\\spad{p}} by removing any coefficient in \\axiom{\\spad{p}} reducing to \\axiom{0}.")) (|initiallyReduce| ((|#5| |#5| $) "\\axiom{initiallyReduce(\\spad{p},{}ts)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{initiallyReduced?(\\spad{r},{}ts)} holds and there exists some product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}.")) (|headReduce| ((|#5| |#5| $) "\\axiom{headReduce(\\spad{p},{}ts)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{headReduce?(\\spad{r},{}ts)} holds and there exists some product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}.")) (|stronglyReduce| ((|#5| |#5| $) "\\axiom{stronglyReduce(\\spad{p},{}ts)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{stronglyReduced?(\\spad{r},{}ts)} holds and there exists some product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}.")) (|rewriteSetWithReduction| (((|List| |#5|) (|List| |#5|) $ (|Mapping| |#5| |#5| |#5|) (|Mapping| (|Boolean|) |#5| |#5|)) "\\axiom{rewriteSetWithReduction(lp,{}ts,{}redOp,{}redOp?)} returns a list \\axiom{lq} of polynomials such that \\axiom{[reduce(\\spad{p},{}ts,{}redOp,{}redOp?) for \\spad{p} in lp]} and \\axiom{lp} have the same zeros inside the regular zero set of \\axiom{ts}. Moreover,{} for every polynomial \\axiom{\\spad{q}} in \\axiom{lq} and every polynomial \\axiom{\\spad{t}} in \\axiom{ts} \\axiom{redOp?(\\spad{q},{}\\spad{t})} holds and there exists a polynomial \\axiom{\\spad{p}} in the ideal generated by \\axiom{lp} and a product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}. The operation \\axiom{redOp} must satisfy the following conditions. For every \\axiom{\\spad{p}} and \\axiom{\\spad{q}} we have \\axiom{redOp?(redOp(\\spad{p},{}\\spad{q}),{}\\spad{q})} and there exists an integer \\axiom{\\spad{e}} and a polynomial \\axiom{\\spad{f}} such that \\axiom{init(\\spad{q})^e*p = f*q + redOp(\\spad{p},{}\\spad{q})}.")) (|reduce| ((|#5| |#5| $ (|Mapping| |#5| |#5| |#5|) (|Mapping| (|Boolean|) |#5| |#5|)) "\\axiom{reduce(\\spad{p},{}ts,{}redOp,{}redOp?)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{redOp?(\\spad{r},{}\\spad{p})} holds for every \\axiom{\\spad{p}} of \\axiom{ts} and there exists some product \\axiom{\\spad{h}} of the initials of the members of \\axiom{ts} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}. The operation \\axiom{redOp} must satisfy the following conditions. For every \\axiom{\\spad{p}} and \\axiom{\\spad{q}} we have \\axiom{redOp?(redOp(\\spad{p},{}\\spad{q}),{}\\spad{q})} and there exists an integer \\axiom{\\spad{e}} and a polynomial \\axiom{\\spad{f}} such that \\axiom{init(\\spad{q})^e*p = f*q + redOp(\\spad{p},{}\\spad{q})}.")) (|autoReduced?| (((|Boolean|) $ (|Mapping| (|Boolean|) |#5| (|List| |#5|))) "\\axiom{autoReduced?(ts,{}redOp?)} returns \\spad{true} iff every element of \\axiom{ts} is reduced \\spad{w}.\\spad{r}.\\spad{t} to every other in the sense of \\axiom{redOp?}")) (|initiallyReduced?| (((|Boolean|) $) "\\spad{initiallyReduced?(ts)} returns \\spad{true} iff for every element \\axiom{\\spad{p}} of \\axiom{\\spad{ts}} \\axiom{\\spad{p}} and all its iterated initials are reduced \\spad{w}.\\spad{r}.\\spad{t}. to the other elements of \\axiom{\\spad{ts}} with the same main variable.") (((|Boolean|) |#5| $) "\\axiom{initiallyReduced?(\\spad{p},{}ts)} returns \\spad{true} iff \\axiom{\\spad{p}} and all its iterated initials are reduced \\spad{w}.\\spad{r}.\\spad{t}. to the elements of \\axiom{ts} with the same main variable.")) (|headReduced?| (((|Boolean|) $) "\\spad{headReduced?(ts)} returns \\spad{true} iff the head of every element of \\axiom{\\spad{ts}} is reduced \\spad{w}.\\spad{r}.\\spad{t} to any other element of \\axiom{\\spad{ts}}.") (((|Boolean|) |#5| $) "\\axiom{headReduced?(\\spad{p},{}ts)} returns \\spad{true} iff the head of \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ts}.")) (|stronglyReduced?| (((|Boolean|) $) "\\axiom{stronglyReduced?(ts)} returns \\spad{true} iff every element of \\axiom{ts} is reduced \\spad{w}.\\spad{r}.\\spad{t} to any other element of \\axiom{ts}.") (((|Boolean|) |#5| $) "\\axiom{stronglyReduced?(\\spad{p},{}ts)} returns \\spad{true} iff \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ts}.")) (|reduced?| (((|Boolean|) |#5| $ (|Mapping| (|Boolean|) |#5| |#5|)) "\\axiom{reduced?(\\spad{p},{}ts,{}redOp?)} returns \\spad{true} iff \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. in the sense of the operation \\axiom{redOp?},{} that is if for every \\axiom{\\spad{t}} in \\axiom{ts} \\axiom{redOp?(\\spad{p},{}\\spad{t})} holds.")) (|normalized?| (((|Boolean|) $) "\\axiom{normalized?(ts)} returns \\spad{true} iff for every axiom{\\spad{p}} in axiom{ts} we have \\axiom{normalized?(\\spad{p},{}us)} where \\axiom{us} is \\axiom{collectUnder(ts,{}mvar(\\spad{p}))}.") (((|Boolean|) |#5| $) "\\axiom{normalized?(\\spad{p},{}ts)} returns \\spad{true} iff \\axiom{\\spad{p}} and all its iterated initials have degree zero \\spad{w}.\\spad{r}.\\spad{t}. the main variables of the polynomials of \\axiom{ts}")) (|quasiComponent| (((|Record| (|:| |close| (|List| |#5|)) (|:| |open| (|List| |#5|))) $) "\\axiom{quasiComponent(ts)} returns \\axiom{[lp,{}lq]} where \\axiom{lp} is the list of the members of \\axiom{ts} and \\axiom{lq}is \\axiom{initials(ts)}.")) (|degree| (((|NonNegativeInteger|) $) "\\axiom{degree(ts)} returns the product of main degrees of the members of \\axiom{ts}.")) (|initials| (((|List| |#5|) $) "\\axiom{initials(ts)} returns the list of the non-constant initials of the members of \\axiom{ts}.")) (|basicSet| (((|Union| (|Record| (|:| |bas| $) (|:| |top| (|List| |#5|))) "failed") (|List| |#5|) (|Mapping| (|Boolean|) |#5|) (|Mapping| (|Boolean|) |#5| |#5|)) "\\axiom{basicSet(ps,{}pred?,{}redOp?)} returns the same as \\axiom{basicSet(qs,{}redOp?)} where \\axiom{qs} consists of the polynomials of \\axiom{ps} satisfying property \\axiom{pred?}.") (((|Union| (|Record| (|:| |bas| $) (|:| |top| (|List| |#5|))) "failed") (|List| |#5|) (|Mapping| (|Boolean|) |#5| |#5|)) "\\axiom{basicSet(ps,{}redOp?)} returns \\axiom{[bs,{}ts]} where \\axiom{concat(bs,{}ts)} is \\axiom{ps} and \\axiom{bs} is a basic set in Wu Wen Tsun sense of \\axiom{ps} \\spad{w}.\\spad{r}.\\spad{t} the reduction-test \\axiom{redOp?},{} if no non-zero constant polynomial lie in \\axiom{ps},{} otherwise \\axiom{\"failed\"} is returned.")) (|infRittWu?| (((|Boolean|) $ $) "\\axiom{infRittWu?(\\spad{ts1},{}\\spad{ts2})} returns \\spad{true} iff \\axiom{\\spad{ts2}} has higher rank than \\axiom{\\spad{ts1}} in Wu Wen Tsun sense."))) 
NIL 
((|HasCategory| |#4| (QUOTE (-319)))) 
(-1123 R E V P) 
((|constructor| (NIL "The category of triangular sets of multivariate polynomials with coefficients in an integral domain. Let \\axiom{\\spad{R}} be an integral domain and \\axiom{\\spad{V}} a finite ordered set of variables,{} say \\axiom{\\spad{X1} < \\spad{X2} < ... < Xn}. A set \\axiom{\\spad{S}} of polynomials in \\axiom{\\spad{R}[\\spad{X1},{}\\spad{X2},{}...,{}Xn]} is triangular if no elements of \\axiom{\\spad{S}} lies in \\axiom{\\spad{R}},{} and if two distinct elements of \\axiom{\\spad{S}} have distinct main variables. Note that the empty set is a triangular set. A triangular set is not necessarily a (lexicographical) Groebner basis and the notion of reduction related to triangular sets is based on the recursive view of polynomials. We recall this notion here and refer to [1] for more details. A polynomial \\axiom{\\spad{P}} is reduced \\spad{w}.\\spad{r}.\\spad{t} a non-constant polynomial \\axiom{\\spad{Q}} if the degree of \\axiom{\\spad{P}} in the main variable of \\axiom{\\spad{Q}} is less than the main degree of \\axiom{\\spad{Q}}. A polynomial \\axiom{\\spad{P}} is reduced \\spad{w}.\\spad{r}.\\spad{t} a triangular set \\axiom{\\spad{T}} if it is reduced \\spad{w}.\\spad{r}.\\spad{t}. every polynomial of \\axiom{\\spad{T}}. \\newline References : \\indented{1}{[1] \\spad{P}. AUBRY,{} \\spad{D}. LAZARD and \\spad{M}. MORENO MAZA \"On the Theories} \\indented{5}{of Triangular Sets\" Journal of Symbol. Comp. (to appear)}")) (|coHeight| (((|NonNegativeInteger|) $) "\\axiom{coHeight(ts)} returns \\axiom{size()\\$\\spad{V}} minus \\axiom{\\#ts}.")) (|extend| (($ $ |#4|) "\\axiom{extend(ts,{}\\spad{p})} returns a triangular set which encodes the simple extension by \\axiom{\\spad{p}} of the extension of the base field defined by \\axiom{ts},{} according to the properties of triangular sets of the current category If the required properties do not hold an error is returned.")) (|extendIfCan| (((|Union| $ "failed") $ |#4|) "\\axiom{extendIfCan(ts,{}\\spad{p})} returns a triangular set which encodes the simple extension by \\axiom{\\spad{p}} of the extension of the base field defined by \\axiom{ts},{} according to the properties of triangular sets of the current domain. If the required properties do not hold then \"failed\" is returned. This operation encodes in some sense the properties of the triangular sets of the current category. Is is used to implement the \\axiom{construct} operation to guarantee that every triangular set build from a list of polynomials has the required properties.")) (|select| (((|Union| |#4| "failed") $ |#3|) "\\axiom{select(ts,{}\\spad{v})} returns the polynomial of \\axiom{ts} with \\axiom{\\spad{v}} as main variable,{} if any.")) (|algebraic?| (((|Boolean|) |#3| $) "\\axiom{algebraic?(\\spad{v},{}ts)} returns \\spad{true} iff \\axiom{\\spad{v}} is the main variable of some polynomial in \\axiom{ts}.")) (|algebraicVariables| (((|List| |#3|) $) "\\axiom{algebraicVariables(ts)} returns the decreasingly sorted list of the main variables of the polynomials of \\axiom{ts}.")) (|rest| (((|Union| $ "failed") $) "\\axiom{rest(ts)} returns the polynomials of \\axiom{ts} with smaller main variable than \\axiom{mvar(ts)} if \\axiom{ts} is not empty,{} otherwise returns \"failed\"")) (|last| (((|Union| |#4| "failed") $) "\\axiom{last(ts)} returns the polynomial of \\axiom{ts} with smallest main variable if \\axiom{ts} is not empty,{} otherwise returns \\axiom{\"failed\"}.")) (|first| (((|Union| |#4| "failed") $) "\\axiom{first(ts)} returns the polynomial of \\axiom{ts} with greatest main variable if \\axiom{ts} is not empty,{} otherwise returns \\axiom{\"failed\"}.")) (|zeroSetSplitIntoTriangularSystems| (((|List| (|Record| (|:| |close| $) (|:| |open| (|List| |#4|)))) (|List| |#4|)) "\\axiom{zeroSetSplitIntoTriangularSystems(lp)} returns a list of triangular systems \\axiom{[[\\spad{ts1},{}\\spad{qs1}],{}...,{}[tsn,{}qsn]]} such that the zero set of \\axiom{lp} is the union of the closures of the \\axiom{W_i} where \\axiom{W_i} consists of the zeros of \\axiom{ts} which do not cancel any polynomial in \\axiom{qsi}.")) (|zeroSetSplit| (((|List| $) (|List| |#4|)) "\\axiom{zeroSetSplit(lp)} returns a list \\axiom{lts} of triangular sets such that the zero set of \\axiom{lp} is the union of the closures of the regular zero sets of the members of \\axiom{lts}.")) (|reduceByQuasiMonic| ((|#4| |#4| $) "\\axiom{reduceByQuasiMonic(\\spad{p},{}ts)} returns the same as \\axiom{remainder(\\spad{p},{}collectQuasiMonic(ts)).polnum}.")) (|collectQuasiMonic| (($ $) "\\axiom{collectQuasiMonic(ts)} returns the subset of \\axiom{ts} consisting of the polynomials with initial in \\axiom{\\spad{R}}.")) (|removeZero| ((|#4| |#4| $) "\\axiom{removeZero(\\spad{p},{}ts)} returns \\axiom{0} if \\axiom{\\spad{p}} reduces to \\axiom{0} by pseudo-division \\spad{w}.\\spad{r}.\\spad{t} \\axiom{ts} otherwise returns a polynomial \\axiom{\\spad{q}} computed from \\axiom{\\spad{p}} by removing any coefficient in \\axiom{\\spad{p}} reducing to \\axiom{0}.")) (|initiallyReduce| ((|#4| |#4| $) "\\axiom{initiallyReduce(\\spad{p},{}ts)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{initiallyReduced?(\\spad{r},{}ts)} holds and there exists some product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}.")) (|headReduce| ((|#4| |#4| $) "\\axiom{headReduce(\\spad{p},{}ts)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{headReduce?(\\spad{r},{}ts)} holds and there exists some product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}.")) (|stronglyReduce| ((|#4| |#4| $) "\\axiom{stronglyReduce(\\spad{p},{}ts)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{stronglyReduced?(\\spad{r},{}ts)} holds and there exists some product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}.")) (|rewriteSetWithReduction| (((|List| |#4|) (|List| |#4|) $ (|Mapping| |#4| |#4| |#4|) (|Mapping| (|Boolean|) |#4| |#4|)) "\\axiom{rewriteSetWithReduction(lp,{}ts,{}redOp,{}redOp?)} returns a list \\axiom{lq} of polynomials such that \\axiom{[reduce(\\spad{p},{}ts,{}redOp,{}redOp?) for \\spad{p} in lp]} and \\axiom{lp} have the same zeros inside the regular zero set of \\axiom{ts}. Moreover,{} for every polynomial \\axiom{\\spad{q}} in \\axiom{lq} and every polynomial \\axiom{\\spad{t}} in \\axiom{ts} \\axiom{redOp?(\\spad{q},{}\\spad{t})} holds and there exists a polynomial \\axiom{\\spad{p}} in the ideal generated by \\axiom{lp} and a product \\axiom{\\spad{h}} of \\axiom{initials(ts)} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}. The operation \\axiom{redOp} must satisfy the following conditions. For every \\axiom{\\spad{p}} and \\axiom{\\spad{q}} we have \\axiom{redOp?(redOp(\\spad{p},{}\\spad{q}),{}\\spad{q})} and there exists an integer \\axiom{\\spad{e}} and a polynomial \\axiom{\\spad{f}} such that \\axiom{init(\\spad{q})^e*p = f*q + redOp(\\spad{p},{}\\spad{q})}.")) (|reduce| ((|#4| |#4| $ (|Mapping| |#4| |#4| |#4|) (|Mapping| (|Boolean|) |#4| |#4|)) "\\axiom{reduce(\\spad{p},{}ts,{}redOp,{}redOp?)} returns a polynomial \\axiom{\\spad{r}} such that \\axiom{redOp?(\\spad{r},{}\\spad{p})} holds for every \\axiom{\\spad{p}} of \\axiom{ts} and there exists some product \\axiom{\\spad{h}} of the initials of the members of \\axiom{ts} such that \\axiom{h*p - \\spad{r}} lies in the ideal generated by \\axiom{ts}. The operation \\axiom{redOp} must satisfy the following conditions. For every \\axiom{\\spad{p}} and \\axiom{\\spad{q}} we have \\axiom{redOp?(redOp(\\spad{p},{}\\spad{q}),{}\\spad{q})} and there exists an integer \\axiom{\\spad{e}} and a polynomial \\axiom{\\spad{f}} such that \\axiom{init(\\spad{q})^e*p = f*q + redOp(\\spad{p},{}\\spad{q})}.")) (|autoReduced?| (((|Boolean|) $ (|Mapping| (|Boolean|) |#4| (|List| |#4|))) "\\axiom{autoReduced?(ts,{}redOp?)} returns \\spad{true} iff every element of \\axiom{ts} is reduced \\spad{w}.\\spad{r}.\\spad{t} to every other in the sense of \\axiom{redOp?}")) (|initiallyReduced?| (((|Boolean|) $) "\\spad{initiallyReduced?(ts)} returns \\spad{true} iff for every element \\axiom{\\spad{p}} of \\axiom{\\spad{ts}} \\axiom{\\spad{p}} and all its iterated initials are reduced \\spad{w}.\\spad{r}.\\spad{t}. to the other elements of \\axiom{\\spad{ts}} with the same main variable.") (((|Boolean|) |#4| $) "\\axiom{initiallyReduced?(\\spad{p},{}ts)} returns \\spad{true} iff \\axiom{\\spad{p}} and all its iterated initials are reduced \\spad{w}.\\spad{r}.\\spad{t}. to the elements of \\axiom{ts} with the same main variable.")) (|headReduced?| (((|Boolean|) $) "\\spad{headReduced?(ts)} returns \\spad{true} iff the head of every element of \\axiom{\\spad{ts}} is reduced \\spad{w}.\\spad{r}.\\spad{t} to any other element of \\axiom{\\spad{ts}}.") (((|Boolean|) |#4| $) "\\axiom{headReduced?(\\spad{p},{}ts)} returns \\spad{true} iff the head of \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ts}.")) (|stronglyReduced?| (((|Boolean|) $) "\\axiom{stronglyReduced?(ts)} returns \\spad{true} iff every element of \\axiom{ts} is reduced \\spad{w}.\\spad{r}.\\spad{t} to any other element of \\axiom{ts}.") (((|Boolean|) |#4| $) "\\axiom{stronglyReduced?(\\spad{p},{}ts)} returns \\spad{true} iff \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\axiom{ts}.")) (|reduced?| (((|Boolean|) |#4| $ (|Mapping| (|Boolean|) |#4| |#4|)) "\\axiom{reduced?(\\spad{p},{}ts,{}redOp?)} returns \\spad{true} iff \\axiom{\\spad{p}} is reduced \\spad{w}.\\spad{r}.\\spad{t}. in the sense of the operation \\axiom{redOp?},{} that is if for every \\axiom{\\spad{t}} in \\axiom{ts} \\axiom{redOp?(\\spad{p},{}\\spad{t})} holds.")) (|normalized?| (((|Boolean|) $) "\\axiom{normalized?(ts)} returns \\spad{true} iff for every axiom{\\spad{p}} in axiom{ts} we have \\axiom{normalized?(\\spad{p},{}us)} where \\axiom{us} is \\axiom{collectUnder(ts,{}mvar(\\spad{p}))}.") (((|Boolean|) |#4| $) "\\axiom{normalized?(\\spad{p},{}ts)} returns \\spad{true} iff \\axiom{\\spad{p}} and all its iterated initials have degree zero \\spad{w}.\\spad{r}.\\spad{t}. the main variables of the polynomials of \\axiom{ts}")) (|quasiComponent| (((|Record| (|:| |close| (|List| |#4|)) (|:| |open| (|List| |#4|))) $) "\\axiom{quasiComponent(ts)} returns \\axiom{[lp,{}lq]} where \\axiom{lp} is the list of the members of \\axiom{ts} and \\axiom{lq}is \\axiom{initials(ts)}.")) (|degree| (((|NonNegativeInteger|) $) "\\axiom{degree(ts)} returns the product of main degrees of the members of \\axiom{ts}.")) (|initials| (((|List| |#4|) $) "\\axiom{initials(ts)} returns the list of the non-constant initials of the members of \\axiom{ts}.")) (|basicSet| (((|Union| (|Record| (|:| |bas| $) (|:| |top| (|List| |#4|))) "failed") (|List| |#4|) (|Mapping| (|Boolean|) |#4|) (|Mapping| (|Boolean|) |#4| |#4|)) "\\axiom{basicSet(ps,{}pred?,{}redOp?)} returns the same as \\axiom{basicSet(qs,{}redOp?)} where \\axiom{qs} consists of the polynomials of \\axiom{ps} satisfying property \\axiom{pred?}.") (((|Union| (|Record| (|:| |bas| $) (|:| |top| (|List| |#4|))) "failed") (|List| |#4|) (|Mapping| (|Boolean|) |#4| |#4|)) "\\axiom{basicSet(ps,{}redOp?)} returns \\axiom{[bs,{}ts]} where \\axiom{concat(bs,{}ts)} is \\axiom{ps} and \\axiom{bs} is a basic set in Wu Wen Tsun sense of \\axiom{ps} \\spad{w}.\\spad{r}.\\spad{t} the reduction-test \\axiom{redOp?},{} if no non-zero constant polynomial lie in \\axiom{ps},{} otherwise \\axiom{\"failed\"} is returned.")) (|infRittWu?| (((|Boolean|) $ $) "\\axiom{infRittWu?(\\spad{ts1},{}\\spad{ts2})} returns \\spad{true} iff \\axiom{\\spad{ts2}} has higher rank than \\axiom{\\spad{ts1}} in Wu Wen Tsun sense."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-1124 |Curve|) 
((|constructor| (NIL "\\indented{2}{Package for constructing tubes around 3-dimensional parametric curves.} Domain of tubes around 3-dimensional parametric curves.")) (|tube| (($ |#1| (|List| (|List| (|Point| (|DoubleFloat|)))) (|Boolean|)) "\\spad{tube(c,ll,b)} creates a tube of the domain \\spadtype{TubePlot} from a space curve \\spad{c} of the category \\spadtype{PlottableSpaceCurveCategory},{} a list of lists of points (loops) \\spad{ll} and a boolean \\spad{b} which if \\spad{true} indicates a closed tube,{} or if \\spad{false} an open tube.")) (|setClosed| (((|Boolean|) $ (|Boolean|)) "\\spad{setClosed(t,b)} declares the given tube plot \\spad{t} to be closed if \\spad{b} is \\spad{true},{} or if \\spad{b} is \\spad{false},{} \\spad{t} is set to be open.")) (|open?| (((|Boolean|) $) "\\spad{open?(t)} tests whether the given tube plot \\spad{t} is open.")) (|closed?| (((|Boolean|) $) "\\spad{closed?(t)} tests whether the given tube plot \\spad{t} is closed.")) (|listLoops| (((|List| (|List| (|Point| (|DoubleFloat|)))) $) "\\spad{listLoops(t)} returns the list of lists of points,{} or the 'loops',{} of the given tube plot \\spad{t}.")) (|getCurve| ((|#1| $) "\\spad{getCurve(t)} returns the \\spadtype{PlottableSpaceCurveCategory} representing the parametric curve of the given tube plot \\spad{t}."))) 
NIL 
NIL 
(-1125) 
((|constructor| (NIL "Tools for constructing tubes around 3-dimensional parametric curves.")) (|loopPoints| (((|List| (|Point| (|DoubleFloat|))) (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)) (|DoubleFloat|) (|List| (|List| (|DoubleFloat|)))) "\\spad{loopPoints(p,n,b,r,lls)} creates and returns a list of points which form the loop with radius \\spad{r},{} around the center point indicated by the point \\spad{p},{} with the principal normal vector of the space curve at point \\spad{p} given by the point(vector) \\spad{n},{} and the binormal vector given by the point(vector) \\spad{b},{} and a list of lists,{} \\spad{lls},{} which is the \\spadfun{cosSinInfo} of the number of points defining the loop.")) (|cosSinInfo| (((|List| (|List| (|DoubleFloat|))) (|Integer|)) "\\spad{cosSinInfo(n)} returns the list of lists of values for \\spad{n},{} in the form: \\spad{[[cos(n - 1) a,sin(n - 1) a],...,[cos 2 a,sin 2 a],[cos a,sin a]]} where \\spad{a = 2 pi/n}. Note: \\spad{n} should be greater than 2.")) (|unitVector| (((|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|))) "\\spad{unitVector(p)} creates the unit vector of the point \\spad{p} and returns the result as a point. Note: \\spad{unitVector(p) = p/|p|}.")) (|cross| (((|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|))) "\\spad{cross(p,q)} computes the cross product of the two points \\spad{p} and \\spad{q} using only the first three coordinates,{} and keeping the color of the first point \\spad{p}. The result is returned as a point.")) (|dot| (((|DoubleFloat|) (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|))) "\\spad{dot(p,q)} computes the dot product of the two points \\spad{p} and \\spad{q} using only the first three coordinates,{} and returns the resulting \\spadtype{DoubleFloat}.")) (- (((|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|))) "\\spad{p - q} computes and returns a point whose coordinates are the differences of the coordinates of two points \\spad{p} and \\spad{q},{} using the color,{} or fourth coordinate,{} of the first point \\spad{p} as the color also of the point \\spad{q}.")) (+ (((|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|)) (|Point| (|DoubleFloat|))) "\\spad{p + q} computes and returns a point whose coordinates are the sums of the coordinates of the two points \\spad{p} and \\spad{q},{} using the color,{} or fourth coordinate,{} of the first point \\spad{p} as the color also of the point \\spad{q}.")) (* (((|Point| (|DoubleFloat|)) (|DoubleFloat|) (|Point| (|DoubleFloat|))) "\\spad{s * p} returns a point whose coordinates are the scalar multiple of the point \\spad{p} by the scalar \\spad{s},{} preserving the color,{} or fourth coordinate,{} of \\spad{p}.")) (|point| (((|Point| (|DoubleFloat|)) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|)) "\\spad{point(x1,x2,x3,c)} creates and returns a point from the three specified coordinates \\spad{x1},{} \\spad{x2},{} \\spad{x3},{} and also a fourth coordinate,{} \\spad{c},{} which is generally used to specify the color of the point."))) 
NIL 
NIL 
(-1126 S) 
((|constructor| (NIL "\\indented{1}{This domain is used to interface with the interpreter's notion} of comma-delimited sequences of values.")) (|length| (((|NonNegativeInteger|) $) "\\spad{length(x)} returns the number of elements in tuple \\spad{x}")) (|select| ((|#1| $ (|NonNegativeInteger|)) "\\spad{select(x,n)} returns the \\spad{n}-th element of tuple \\spad{x}. tuples are 0-based"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-552 (-772))))) 
(-1127 -3092) 
((|constructor| (NIL "A basic package for the factorization of bivariate polynomials over a finite field. The functions here represent the base step for the multivariate factorizer.")) (|twoFactor| (((|Factored| (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|))) (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|)) (|Integer|)) "\\spad{twoFactor(p,n)} returns the factorisation of polynomial \\spad{p},{} a sparse univariate polynomial (sup) over a sup over \\spad{F}. Also,{} \\spad{p} is assumed primitive and square-free and \\spad{n} is the degree of the inner variable of \\spad{p} (maximum of the degrees of the coefficients of \\spad{p}).")) (|generalSqFr| (((|Factored| (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|))) (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|))) "\\spad{generalSqFr(p)} returns the square-free factorisation of polynomial \\spad{p},{} a sparse univariate polynomial (sup) over a sup over \\spad{F}.")) (|generalTwoFactor| (((|Factored| (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|))) (|SparseUnivariatePolynomial| (|SparseUnivariatePolynomial| |#1|))) "\\spad{generalTwoFactor(p)} returns the factorisation of polynomial \\spad{p},{} a sparse univariate polynomial (sup) over a sup over \\spad{F}."))) 
NIL 
NIL 
(-1128) 
((|constructor| (NIL "The fundamental Type."))) 
NIL 
NIL 
(-1129) 
((|constructor| (NIL "This domain represents a type AST."))) 
NIL 
NIL 
(-1130 S) 
((|constructor| (NIL "Provides functions to force a partial ordering on any set.")) (|more?| (((|Boolean|) |#1| |#1|) "\\spad{more?(a, b)} compares \\spad{a} and \\spad{b} in the partial ordering induced by setOrder,{} and uses the ordering on \\spad{S} if \\spad{a} and \\spad{b} are not comparable in the partial ordering.")) (|userOrdered?| (((|Boolean|)) "\\spad{userOrdered?()} tests if the partial ordering induced by \\spadfunFrom{setOrder}{UserDefinedPartialOrdering} is not empty.")) (|largest| ((|#1| (|List| |#1|)) "\\spad{largest l} returns the largest element of \\spad{l} where the partial ordering induced by setOrder is completed into a total one by the ordering on \\spad{S}.") ((|#1| (|List| |#1|) (|Mapping| (|Boolean|) |#1| |#1|)) "\\spad{largest(l, fn)} returns the largest element of \\spad{l} where the partial ordering induced by setOrder is completed into a total one by fn.")) (|less?| (((|Boolean|) |#1| |#1| (|Mapping| (|Boolean|) |#1| |#1|)) "\\spad{less?(a, b, fn)} compares \\spad{a} and \\spad{b} in the partial ordering induced by setOrder,{} and returns \\spad{fn(a, b)} if \\spad{a} and \\spad{b} are not comparable in that ordering.") (((|Union| (|Boolean|) "failed") |#1| |#1|) "\\spad{less?(a, b)} compares \\spad{a} and \\spad{b} in the partial ordering induced by setOrder.")) (|getOrder| (((|Record| (|:| |low| (|List| |#1|)) (|:| |high| (|List| |#1|)))) "\\spad{getOrder()} returns \\spad{[[b1,...,bm], [a1,...,an]]} such that the partial ordering on \\spad{S} was given by \\spad{setOrder([b1,...,bm],[a1,...,an])}.")) (|setOrder| (((|Void|) (|List| |#1|) (|List| |#1|)) "\\spad{setOrder([b1,...,bm], [a1,...,an])} defines a partial ordering on \\spad{S} given by: \\indented{3}{(1)\\space{2}\\spad{b1 < b2 < ... < bm < a1 < a2 < ... < an}.} \\indented{3}{(2)\\space{2}\\spad{bj < c < ai}\\space{2}for \\spad{c} not among the \\spad{ai}'s and bj's.} \\indented{3}{(3)\\space{2}undefined on \\spad{(c,d)} if neither is among the \\spad{ai}'s,{}bj's.}") (((|Void|) (|List| |#1|)) "\\spad{setOrder([a1,...,an])} defines a partial ordering on \\spad{S} given by: \\indented{3}{(1)\\space{2}\\spad{a1 < a2 < ... < an}.} \\indented{3}{(2)\\space{2}\\spad{b < ai\\space{3}for i = 1..n} and \\spad{b} not among the \\spad{ai}'s.} \\indented{3}{(3)\\space{2}undefined on \\spad{(b, c)} if neither is among the \\spad{ai}'s.}"))) 
NIL 
((|HasCategory| |#1| (QUOTE (-756)))) 
(-1131) 
((|constructor| (NIL "This packages provides functions to allow the user to select the ordering on the variables and operators for displaying polynomials,{} fractions and expressions. The ordering affects the display only and not the computations.")) (|resetVariableOrder| (((|Void|)) "\\spad{resetVariableOrder()} cancels any previous use of setVariableOrder and returns to the default system ordering.")) (|getVariableOrder| (((|Record| (|:| |high| (|List| (|Symbol|))) (|:| |low| (|List| (|Symbol|))))) "\\spad{getVariableOrder()} returns \\spad{[[b1,...,bm], [a1,...,an]]} such that the ordering on the variables was given by \\spad{setVariableOrder([b1,...,bm], [a1,...,an])}.")) (|setVariableOrder| (((|Void|) (|List| (|Symbol|)) (|List| (|Symbol|))) "\\spad{setVariableOrder([b1,...,bm], [a1,...,an])} defines an ordering on the variables given by \\spad{b1 > b2 > ... > bm >} other variables \\spad{> a1 > a2 > ... > an}.") (((|Void|) (|List| (|Symbol|))) "\\spad{setVariableOrder([a1,...,an])} defines an ordering on the variables given by \\spad{a1 > a2 > ... > an > other variables}."))) 
NIL 
NIL 
(-1132 S) 
((|constructor| (NIL "A constructive unique factorization domain,{} \\spadignore{i.e.} where we can constructively factor members into a product of a finite number of irreducible elements.")) (|factor| (((|Factored| $) $) "\\spad{factor(x)} returns the factorization of \\spad{x} into irreducibles.")) (|squareFreePart| (($ $) "\\spad{squareFreePart(x)} returns a product of prime factors of \\spad{x} each taken with multiplicity one.")) (|squareFree| (((|Factored| $) $) "\\spad{squareFree(x)} returns the square-free factorization of \\spad{x} \\spadignore{i.e.} such that the factors are pairwise relatively prime and each has multiple prime factors.")) (|prime?| (((|Boolean|) $) "\\spad{prime?(x)} tests if \\spad{x} can never be written as the product of two non-units of the ring,{} \\spadignore{i.e.} \\spad{x} is an irreducible element."))) 
NIL 
NIL 
(-1133) 
((|constructor| (NIL "A constructive unique factorization domain,{} \\spadignore{i.e.} where we can constructively factor members into a product of a finite number of irreducible elements.")) (|factor| (((|Factored| $) $) "\\spad{factor(x)} returns the factorization of \\spad{x} into irreducibles.")) (|squareFreePart| (($ $) "\\spad{squareFreePart(x)} returns a product of prime factors of \\spad{x} each taken with multiplicity one.")) (|squareFree| (((|Factored| $) $) "\\spad{squareFree(x)} returns the square-free factorization of \\spad{x} \\spadignore{i.e.} such that the factors are pairwise relatively prime and each has multiple prime factors.")) (|prime?| (((|Boolean|) $) "\\spad{prime?(x)} tests if \\spad{x} can never be written as the product of two non-units of the ring,{} \\spadignore{i.e.} \\spad{x} is an irreducible element."))) 
((-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1134) 
((|constructor| (NIL "This domain is a datatype for (unsigned) integer values of precision 16 bits."))) 
NIL 
NIL 
(-1135) 
((|constructor| (NIL "This domain is a datatype for (unsigned) integer values of precision 32 bits."))) 
NIL 
NIL 
(-1136) 
((|constructor| (NIL "This domain is a datatype for (unsigned) integer values of precision 64 bits."))) 
NIL 
NIL 
(-1137) 
((|constructor| (NIL "This domain is a datatype for (unsigned) integer values of precision 8 bits."))) 
NIL 
NIL 
(-1138 |Coef| |var| |cen|) 
((|constructor| (NIL "Dense Laurent series in one variable \\indented{2}{\\spadtype{UnivariateLaurentSeries} is a domain representing Laurent} \\indented{2}{series in one variable with coefficients in an arbitrary ring.\\space{2}The} \\indented{2}{parameters of the type specify the coefficient ring,{} the power series} \\indented{2}{variable,{} and the center of the power series expansion.\\space{2}For example,{}} \\indented{2}{\\spad{UnivariateLaurentSeries(Integer,x,3)} represents Laurent series in} \\indented{2}{\\spad{(x - 3)} with integer coefficients.}")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (|coerce| (($ (|Variable| |#2|)) "\\spad{coerce(var)} converts the series variable \\spad{var} into a Laurent series."))) 
(((-3996 "*") OR (-2562 (|has| |#1| (-312)) (|has| (-1168 |#1| |#2| |#3|) (-740))) (|has| |#1| (-146)) (-2562 (|has| |#1| (-312)) (|has| (-1168 |#1| |#2| |#3|) (-821)))) (-3987 OR (-2562 (|has| |#1| (-312)) (|has| (-1168 |#1| |#2| |#3|) (-740))) (|has| |#1| (-495)) (-2562 (|has| |#1| (-312)) (|has| (-1168 |#1| |#2| |#3|) (-821)))) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-120)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-740)))) (|HasCategory| |#1| (QUOTE (-120)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-190)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-190)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-189)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|))))) (|HasCategory| (-484) (QUOTE (-1025))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-312))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-950 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-553 (-473))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-933)))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-740)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-740)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-756))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-950 (-484))))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-1065)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (|%list| (QUOTE -241) (|%list| (QUOTE -1168) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|)) (|%list| (QUOTE -1168) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (|%list| (QUOTE -260) (|%list| (QUOTE -1168) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (|%list| (QUOTE -455) (QUOTE (-1089)) (|%list| (QUOTE -1168) (|devaluate| |#1|) (|devaluate| |#2|) (|devaluate| |#3|))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-796 (-329))))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-483)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-258)))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-821))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-118))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-740)))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-740)))) (|HasCategory| |#1| (QUOTE (-146)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-189)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-756)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-120)))) (|HasCategory| |#1| (QUOTE (-120)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-821)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-118)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| $ (QUOTE (-118))) (|HasCategory| (-1168 |#1| |#2| |#3|) (QUOTE (-821)))) (|HasCategory| |#1| (QUOTE (-118))))) 
(-1139 |Coef1| |Coef2| |var1| |var2| |cen1| |cen2|) 
((|constructor| (NIL "Mapping package for univariate Laurent series \\indented{2}{This package allows one to apply a function to the coefficients of} \\indented{2}{a univariate Laurent series.}")) (|map| (((|UnivariateLaurentSeries| |#2| |#4| |#6|) (|Mapping| |#2| |#1|) (|UnivariateLaurentSeries| |#1| |#3| |#5|)) "\\spad{map(f,g(x))} applies the map \\spad{f} to the coefficients of the Laurent series \\spad{g(x)}."))) 
NIL 
NIL 
(-1140 |Coef|) 
((|constructor| (NIL "\\spadtype{UnivariateLaurentSeriesCategory} is the category of Laurent series in one variable.")) (|integrate| (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 1. We may integrate a series when we can divide coefficients by integers.")) (|rationalFunction| (((|Fraction| (|Polynomial| |#1|)) $ (|Integer|) (|Integer|)) "\\spad{rationalFunction(f,k1,k2)} returns a rational function consisting of the sum of all terms of \\spad{f} of degree \\spad{d} with \\spad{k1 <= d <= k2}.") (((|Fraction| (|Polynomial| |#1|)) $ (|Integer|)) "\\spad{rationalFunction(f,k)} returns a rational function consisting of the sum of all terms of \\spad{f} of degree <= \\spad{k}.")) (|multiplyCoefficients| (($ (|Mapping| |#1| (|Integer|)) $) "\\spad{multiplyCoefficients(f,sum(n = n0..infinity,a[n] * x**n)) = sum(n = 0..infinity,f(n) * a[n] * x**n)}. This function is used when Puiseux series are represented by a Laurent series and an exponent.")) (|series| (($ (|Stream| (|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|)))) "\\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1141 S |Coef| UTS) 
((|constructor| (NIL "This is a category of univariate Laurent series constructed from univariate Taylor series. A Laurent series is represented by a pair \\spad{[n,f(x)]},{} where \\spad{n} is an arbitrary integer and \\spad{f(x)} is a Taylor series. This pair represents the Laurent series \\spad{x**n * f(x)}.")) (|taylorIfCan| (((|Union| |#3| "failed") $) "\\spad{taylorIfCan(f(x))} converts the Laurent series \\spad{f(x)} to a Taylor series,{} if possible. If this is not possible,{} \"failed\" is returned.")) (|taylor| ((|#3| $) "\\spad{taylor(f(x))} converts the Laurent series \\spad{f}(\\spad{x}) to a Taylor series,{} if possible. Error: if this is not possible.")) (|removeZeroes| (($ (|Integer|) $) "\\spad{removeZeroes(n,f(x))} removes up to \\spad{n} leading zeroes from the Laurent series \\spad{f(x)}. A Laurent series is represented by (1) an exponent and (2) a Taylor series which may have leading zero coefficients. When the Taylor series has a leading zero coefficient,{} the 'leading zero' is removed from the Laurent series as follows: the series is rewritten by increasing the exponent by 1 and dividing the Taylor series by its variable.") (($ $) "\\spad{removeZeroes(f(x))} removes leading zeroes from the representation of the Laurent series \\spad{f(x)}. A Laurent series is represented by (1) an exponent and (2) a Taylor series which may have leading zero coefficients. When the Taylor series has a leading zero coefficient,{} the 'leading zero' is removed from the Laurent series as follows: the series is rewritten by increasing the exponent by 1 and dividing the Taylor series by its variable. Note: \\spad{removeZeroes(f)} removes all leading zeroes from \\spad{f}")) (|taylorRep| ((|#3| $) "\\spad{taylorRep(f(x))} returns \\spad{g(x)},{} where \\spad{f = x**n * g(x)} is represented by \\spad{[n,g(x)]}.")) (|degree| (((|Integer|) $) "\\spad{degree(f(x))} returns the degree of the lowest order term of \\spad{f(x)},{} which may have zero as a coefficient.")) (|laurent| (($ (|Integer|) |#3|) "\\spad{laurent(n,f(x))} returns \\spad{x**n * f(x)}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-312)))) 
(-1142 |Coef| UTS) 
((|constructor| (NIL "This is a category of univariate Laurent series constructed from univariate Taylor series. A Laurent series is represented by a pair \\spad{[n,f(x)]},{} where \\spad{n} is an arbitrary integer and \\spad{f(x)} is a Taylor series. This pair represents the Laurent series \\spad{x**n * f(x)}.")) (|taylorIfCan| (((|Union| |#2| "failed") $) "\\spad{taylorIfCan(f(x))} converts the Laurent series \\spad{f(x)} to a Taylor series,{} if possible. If this is not possible,{} \"failed\" is returned.")) (|taylor| ((|#2| $) "\\spad{taylor(f(x))} converts the Laurent series \\spad{f}(\\spad{x}) to a Taylor series,{} if possible. Error: if this is not possible.")) (|removeZeroes| (($ (|Integer|) $) "\\spad{removeZeroes(n,f(x))} removes up to \\spad{n} leading zeroes from the Laurent series \\spad{f(x)}. A Laurent series is represented by (1) an exponent and (2) a Taylor series which may have leading zero coefficients. When the Taylor series has a leading zero coefficient,{} the 'leading zero' is removed from the Laurent series as follows: the series is rewritten by increasing the exponent by 1 and dividing the Taylor series by its variable.") (($ $) "\\spad{removeZeroes(f(x))} removes leading zeroes from the representation of the Laurent series \\spad{f(x)}. A Laurent series is represented by (1) an exponent and (2) a Taylor series which may have leading zero coefficients. When the Taylor series has a leading zero coefficient,{} the 'leading zero' is removed from the Laurent series as follows: the series is rewritten by increasing the exponent by 1 and dividing the Taylor series by its variable. Note: \\spad{removeZeroes(f)} removes all leading zeroes from \\spad{f}")) (|taylorRep| ((|#2| $) "\\spad{taylorRep(f(x))} returns \\spad{g(x)},{} where \\spad{f = x**n * g(x)} is represented by \\spad{[n,g(x)]}.")) (|degree| (((|Integer|) $) "\\spad{degree(f(x))} returns the degree of the lowest order term of \\spad{f(x)},{} which may have zero as a coefficient.")) (|laurent| (($ (|Integer|) |#2|) "\\spad{laurent(n,f(x))} returns \\spad{x**n * f(x)}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1143 |Coef| UTS) 
((|constructor| (NIL "This package enables one to construct a univariate Laurent series domain from a univariate Taylor series domain. Univariate Laurent series are represented by a pair \\spad{[n,f(x)]},{} where \\spad{n} is an arbitrary integer and \\spad{f(x)} is a Taylor series. This pair represents the Laurent series \\spad{x**n * f(x)}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-118))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-118))))) (OR (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-120)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-740))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-809 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (OR (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-190))))) (OR (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-190)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-189))))) (|HasCategory| (-484) (QUOTE (-1025))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-312))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-821)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-553 (-473))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-933)))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-740)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-740)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-756))))) (OR (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-950 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-1065)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -241) (|devaluate| |#2|) (|devaluate| |#2|)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -260) (|devaluate| |#2|)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (|%list| (QUOTE -455) (QUOTE (-1089)) (|devaluate| |#2|)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-580 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-796 (-329))))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-484))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-756)))) (|HasCategory| |#2| (QUOTE (-821))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-483)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-258)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-118))) (OR (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-189))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-484)) (|devaluate| |#1|)))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-811 (-1089))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-189)))) (OR (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-120))))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#1| (QUOTE (-118))) (-12 (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-118)))))) 
(-1144 ZP) 
((|constructor| (NIL "Package for the factorization of univariate polynomials with integer coefficients. The factorization is done by \"lifting\" (HENSEL) the factorization over a finite field.")) (|henselFact| (((|Record| (|:| |contp| (|Integer|)) (|:| |factors| (|List| (|Record| (|:| |irr| |#1|) (|:| |pow| (|Integer|)))))) |#1| (|Boolean|)) "\\spad{henselFact(m,flag)} returns the factorization of \\spad{m},{} FinalFact is a Record \\spad{s}.\\spad{t}. FinalFact.contp=content \\spad{m},{} FinalFact.factors=List of irreducible factors of \\spad{m} with exponent ,{} if \\spad{flag} =true the polynomial is assumed square free.")) (|factorSquareFree| (((|Factored| |#1|) |#1|) "\\spad{factorSquareFree(m)} returns the factorization of \\spad{m} square free polynomial")) (|factor| (((|Factored| |#1|) |#1|) "\\spad{factor(m)} returns the factorization of \\spad{m}"))) 
NIL 
NIL 
(-1145 S) 
((|constructor| (NIL "This domain provides segments which may be half open. That is,{} ranges of the form \\spad{a..} or \\spad{a..b}.")) (|hasHi| (((|Boolean|) $) "\\spad{hasHi(s)} tests whether the segment \\spad{s} has an upper bound.")) (|coerce| (($ (|Segment| |#1|)) "\\spad{coerce(x)} allows \\spadtype{Segment} values to be used as \\%.")) (|segment| (($ |#1|) "\\spad{segment(l)} is an alternate way to construct the segment \\spad{l..}.")) (SEGMENT (($ |#1|) "\\spad{l..} produces a half open segment,{} that is,{} one with no upper bound."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-755))) (|HasCategory| |#1| (QUOTE (-1013)))) 
(-1146 R S) 
((|constructor| (NIL "This package provides operations for mapping functions onto segments.")) (|map| (((|Stream| |#2|) (|Mapping| |#2| |#1|) (|UniversalSegment| |#1|)) "\\spad{map(f,s)} expands the segment \\spad{s},{} applying \\spad{f} to each value.") (((|UniversalSegment| |#2|) (|Mapping| |#2| |#1|) (|UniversalSegment| |#1|)) "\\spad{map(f,seg)} returns the new segment obtained by applying \\spad{f} to the endpoints of \\spad{seg}."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-755)))) 
(-1147 |x| R) 
((|constructor| (NIL "This domain represents univariate polynomials in some symbol over arbitrary (not necessarily commutative) coefficient rings. The representation is sparse in the sense that only non-zero terms are represented.")) (|fmecg| (($ $ (|NonNegativeInteger|) |#2| $) "\\spad{fmecg(p1,e,r,p2)} finds \\spad{X} : \\spad{p1} - \\spad{r} * X**e * \\spad{p2}"))) 
(((-3996 "*") |has| |#2| (-146)) (-3987 |has| |#2| (-495)) (-3990 |has| |#2| (-312)) (-3992 |has| |#2| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-495)))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-329)))) (|HasCategory| (-994) (QUOTE (-796 (-329))))) (-12 (|HasCategory| |#2| (QUOTE (-796 (-484)))) (|HasCategory| (-994) (QUOTE (-796 (-484))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-329))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-329)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-800 (-484))))) (|HasCategory| (-994) (QUOTE (-553 (-800 (-484)))))) (-12 (|HasCategory| |#2| (QUOTE (-553 (-473)))) (|HasCategory| (-994) (QUOTE (-553 (-473))))) (|HasCategory| |#2| (QUOTE (-580 (-484)))) (|HasCategory| |#2| (QUOTE (-120))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-484)))) (OR (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484)))))) (|HasCategory| |#2| (QUOTE (-950 (-349 (-484))))) (OR (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-821)))) (OR (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-821)))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-1065))) (|HasCategory| |#2| (QUOTE (-811 (-1089)))) (|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasCategory| |#2| (QUOTE (-189))) (|HasCategory| |#2| (QUOTE (-190))) (|HasAttribute| |#2| (QUOTE -3992)) (|HasCategory| |#2| (QUOTE (-391))) (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (OR (-12 (|HasCategory| |#2| (QUOTE (-821))) (|HasCategory| $ (QUOTE (-118)))) (|HasCategory| |#2| (QUOTE (-118))))) 
(-1148 |x| R |y| S) 
((|constructor| (NIL "This package lifts a mapping from coefficient rings \\spad{R} to \\spad{S} to a mapping from \\spadtype{UnivariatePolynomial}(\\spad{x},{}\\spad{R}) to \\spadtype{UnivariatePolynomial}(\\spad{y},{}\\spad{S}). Note that the mapping is assumed to send zero to zero,{} since it will only be applied to the non-zero coefficients of the polynomial.")) (|map| (((|UnivariatePolynomial| |#3| |#4|) (|Mapping| |#4| |#2|) (|UnivariatePolynomial| |#1| |#2|)) "\\spad{map(func, poly)} creates a new polynomial by applying \\spad{func} to every non-zero coefficient of the polynomial poly."))) 
NIL 
NIL 
(-1149 R Q UP) 
((|constructor| (NIL "UnivariatePolynomialCommonDenominator provides functions to compute the common denominator of the coefficients of univariate polynomials over the quotient field of a gcd domain.")) (|splitDenominator| (((|Record| (|:| |num| |#3|) (|:| |den| |#1|)) |#3|) "\\spad{splitDenominator(q)} returns \\spad{[p, d]} such that \\spad{q = p/d} and \\spad{d} is a common denominator for the coefficients of \\spad{q}.")) (|clearDenominator| ((|#3| |#3|) "\\spad{clearDenominator(q)} returns \\spad{p} such that \\spad{q = p/d} where \\spad{d} is a common denominator for the coefficients of \\spad{q}.")) (|commonDenominator| ((|#1| |#3|) "\\spad{commonDenominator(q)} returns a common denominator \\spad{d} for the coefficients of \\spad{q}."))) 
NIL 
NIL 
(-1150 R UP) 
((|constructor| (NIL "UnivariatePolynomialDecompositionPackage implements functional decomposition of univariate polynomial with coefficients in an \\spad{IntegralDomain} of \\spad{CharacteristicZero}.")) (|monicCompleteDecompose| (((|List| |#2|) |#2|) "\\spad{monicCompleteDecompose(f)} returns a list of factors of \\spad{f} for the functional decomposition ([ \\spad{f1},{} ...,{} fn ] means \\spad{f} = \\spad{f1} \\spad{o} ... \\spad{o} fn).")) (|monicDecomposeIfCan| (((|Union| (|Record| (|:| |left| |#2|) (|:| |right| |#2|)) "failed") |#2|) "\\spad{monicDecomposeIfCan(f)} returns a functional decomposition of the monic polynomial \\spad{f} of \"failed\" if it has not found any.")) (|leftFactorIfCan| (((|Union| |#2| "failed") |#2| |#2|) "\\spad{leftFactorIfCan(f,h)} returns the left factor (\\spad{g} in \\spad{f} = \\spad{g} \\spad{o} \\spad{h}) of the functional decomposition of the polynomial \\spad{f} with given \\spad{h} or \\spad{\"failed\"} if \\spad{g} does not exist.")) (|rightFactorIfCan| (((|Union| |#2| "failed") |#2| (|NonNegativeInteger|) |#1|) "\\spad{rightFactorIfCan(f,d,c)} returns a candidate to be the right factor (\\spad{h} in \\spad{f} = \\spad{g} \\spad{o} \\spad{h}) of degree \\spad{d} with leading coefficient \\spad{c} of a functional decomposition of the polynomial \\spad{f} or \\spad{\"failed\"} if no such candidate.")) (|monicRightFactorIfCan| (((|Union| |#2| "failed") |#2| (|NonNegativeInteger|)) "\\spad{monicRightFactorIfCan(f,d)} returns a candidate to be the monic right factor (\\spad{h} in \\spad{f} = \\spad{g} \\spad{o} \\spad{h}) of degree \\spad{d} of a functional decomposition of the polynomial \\spad{f} or \\spad{\"failed\"} if no such candidate."))) 
NIL 
NIL 
(-1151 R UP) 
((|constructor| (NIL "UnivariatePolynomialDivisionPackage provides a division for non monic univarite polynomials with coefficients in an \\spad{IntegralDomain}.")) (|divideIfCan| (((|Union| (|Record| (|:| |quotient| |#2|) (|:| |remainder| |#2|)) "failed") |#2| |#2|) "\\spad{divideIfCan(f,g)} returns quotient and remainder of the division of \\spad{f} by \\spad{g} or \"failed\" if it has not succeeded."))) 
NIL 
NIL 
(-1152 R U) 
((|constructor| (NIL "This package implements Karatsuba's trick for multiplying (large) univariate polynomials. It could be improved with a version doing the work on place and also with a special case for squares. We've done this in Basicmath,{} but we believe that this out of the scope of AXIOM.")) (|karatsuba| ((|#2| |#2| |#2| (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{karatsuba(a,b,l,k)} returns \\spad{a*b} by applying Karatsuba's trick provided that both \\spad{a} and \\spad{b} have at least \\spad{l} terms and \\spad{k > 0} holds and by calling \\spad{noKaratsuba} otherwise. The other multiplications are performed by recursive calls with the same third argument and \\spad{k-1} as fourth argument.")) (|karatsubaOnce| ((|#2| |#2| |#2|) "\\spad{karatsuba(a,b)} returns \\spad{a*b} by applying Karatsuba's trick once. The other multiplications are performed by calling \\spad{*} from \\spad{U}.")) (|noKaratsuba| ((|#2| |#2| |#2|) "\\spad{noKaratsuba(a,b)} returns \\spad{a*b} without using Karatsuba's trick at all."))) 
NIL 
NIL 
(-1153 S R) 
((|constructor| (NIL "The category of univariate polynomials over a ring \\spad{R}. No particular model is assumed - implementations can be either sparse or dense.")) (|integrate| (($ $) "\\spad{integrate(p)} integrates the univariate polynomial \\spad{p} with respect to its distinguished variable.")) (|additiveValuation| ((|attribute|) "euclideanSize(a*b) = euclideanSize(a) + euclideanSize(\\spad{b})")) (|separate| (((|Record| (|:| |primePart| $) (|:| |commonPart| $)) $ $) "\\spad{separate(p, q)} returns \\spad{[a, b]} such that polynomial \\spad{p = a b} and \\spad{a} is relatively prime to \\spad{q}.")) (|pseudoDivide| (((|Record| (|:| |coef| |#2|) (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{pseudoDivide(p,q)} returns \\spad{[c, q, r]},{} when \\spad{p' := p*lc(q)**(deg p - deg q + 1) = c * p} is pseudo right-divided by \\spad{q},{} \\spadignore{i.e.} \\spad{p' = s q + r}.")) (|pseudoQuotient| (($ $ $) "\\spad{pseudoQuotient(p,q)} returns \\spad{r},{} the quotient when \\spad{p' := p*lc(q)**(deg p - deg q + 1)} is pseudo right-divided by \\spad{q},{} \\spadignore{i.e.} \\spad{p' = s q + r}.")) (|composite| (((|Union| (|Fraction| $) "failed") (|Fraction| $) $) "\\spad{composite(f, q)} returns \\spad{h} if \\spad{f} = \\spad{h}(\\spad{q}),{} and \"failed\" is no such \\spad{h} exists.") (((|Union| $ "failed") $ $) "\\spad{composite(p, q)} returns \\spad{h} if \\spad{p = h(q)},{} and \"failed\" no such \\spad{h} exists.")) (|subResultantGcd| (($ $ $) "\\spad{subResultantGcd(p,q)} computes the gcd of the polynomials \\spad{p} and \\spad{q} using the SubResultant GCD algorithm.")) (|order| (((|NonNegativeInteger|) $ $) "\\spad{order(p, q)} returns the largest \\spad{n} such that \\spad{q**n} divides polynomial \\spad{p} \\spadignore{i.e.} the order of \\spad{p(x)} at \\spad{q(x)=0}.")) (|elt| ((|#2| (|Fraction| $) |#2|) "\\spad{elt(a,r)} evaluates the fraction of univariate polynomials \\spad{a} with the distinguished variable replaced by the constant \\spad{r}.") (((|Fraction| $) (|Fraction| $) (|Fraction| $)) "\\spad{elt(a,b)} evaluates the fraction of univariate polynomials \\spad{a} with the distinguished variable replaced by \\spad{b}.")) (|resultant| ((|#2| $ $) "\\spad{resultant(p,q)} returns the resultant of the polynomials \\spad{p} and \\spad{q}.")) (|discriminant| ((|#2| $) "\\spad{discriminant(p)} returns the discriminant of the polynomial \\spad{p}.")) (|differentiate| (($ $ (|Mapping| |#2| |#2|) $) "\\spad{differentiate(p, d, x')} extends the \\spad{R}-derivation \\spad{d} to an extension \\spad{D} in \\spad{R[x]} where Dx is given by x',{} and returns \\spad{Dp}.")) (|pseudoRemainder| (($ $ $) "\\spad{pseudoRemainder(p,q)} = \\spad{r},{} for polynomials \\spad{p} and \\spad{q},{} returns the remainder when \\spad{p' := p*lc(q)**(deg p - deg q + 1)} is pseudo right-divided by \\spad{q},{} \\spadignore{i.e.} \\spad{p' = s q + r}.")) (|shiftLeft| (($ $ (|NonNegativeInteger|)) "\\spad{shiftLeft(p,n)} returns \\spad{p * monomial(1,n)}")) (|shiftRight| (($ $ (|NonNegativeInteger|)) "\\spad{shiftRight(p,n)} returns \\spad{monicDivide(p,monomial(1,n)).quotient}")) (|karatsubaDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ (|NonNegativeInteger|)) "\\spad{karatsubaDivide(p,n)} returns the same as \\spad{monicDivide(p,monomial(1,n))}")) (|monicDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{monicDivide(p,q)} divide the polynomial \\spad{p} by the monic polynomial \\spad{q},{} returning the pair \\spad{[quotient, remainder]}. Error: if \\spad{q} isn't monic.")) (|divideExponents| (((|Union| $ "failed") $ (|NonNegativeInteger|)) "\\spad{divideExponents(p,n)} returns a new polynomial resulting from dividing all exponents of the polynomial \\spad{p} by the non negative integer \\spad{n},{} or \"failed\" if some exponent is not exactly divisible by \\spad{n}.")) (|multiplyExponents| (($ $ (|NonNegativeInteger|)) "\\spad{multiplyExponents(p,n)} returns a new polynomial resulting from multiplying all exponents of the polynomial \\spad{p} by the non negative integer \\spad{n}.")) (|unmakeSUP| (($ (|SparseUnivariatePolynomial| |#2|)) "\\spad{unmakeSUP(sup)} converts \\spad{sup} of type \\spadtype{SparseUnivariatePolynomial(R)} to be a member of the given type. Note: converse of makeSUP.")) (|makeSUP| (((|SparseUnivariatePolynomial| |#2|) $) "\\spad{makeSUP(p)} converts the polynomial \\spad{p} to be of type SparseUnivariatePolynomial over the same coefficients.")) (|vectorise| (((|Vector| |#2|) $ (|NonNegativeInteger|)) "\\spad{vectorise(p, n)} returns \\spad{[a0,...,a(n-1)]} where \\spad{p = a0 + a1*x + ... + a(n-1)*x**(n-1)} + higher order terms. The degree of polynomial \\spad{p} can be different from \\spad{n-1}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-312))) (|HasCategory| |#2| (QUOTE (-391))) (|HasCategory| |#2| (QUOTE (-495))) (|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-1065)))) 
(-1154 R) 
((|constructor| (NIL "The category of univariate polynomials over a ring \\spad{R}. No particular model is assumed - implementations can be either sparse or dense.")) (|integrate| (($ $) "\\spad{integrate(p)} integrates the univariate polynomial \\spad{p} with respect to its distinguished variable.")) (|additiveValuation| ((|attribute|) "euclideanSize(a*b) = euclideanSize(a) + euclideanSize(\\spad{b})")) (|separate| (((|Record| (|:| |primePart| $) (|:| |commonPart| $)) $ $) "\\spad{separate(p, q)} returns \\spad{[a, b]} such that polynomial \\spad{p = a b} and \\spad{a} is relatively prime to \\spad{q}.")) (|pseudoDivide| (((|Record| (|:| |coef| |#1|) (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{pseudoDivide(p,q)} returns \\spad{[c, q, r]},{} when \\spad{p' := p*lc(q)**(deg p - deg q + 1) = c * p} is pseudo right-divided by \\spad{q},{} \\spadignore{i.e.} \\spad{p' = s q + r}.")) (|pseudoQuotient| (($ $ $) "\\spad{pseudoQuotient(p,q)} returns \\spad{r},{} the quotient when \\spad{p' := p*lc(q)**(deg p - deg q + 1)} is pseudo right-divided by \\spad{q},{} \\spadignore{i.e.} \\spad{p' = s q + r}.")) (|composite| (((|Union| (|Fraction| $) "failed") (|Fraction| $) $) "\\spad{composite(f, q)} returns \\spad{h} if \\spad{f} = \\spad{h}(\\spad{q}),{} and \"failed\" is no such \\spad{h} exists.") (((|Union| $ "failed") $ $) "\\spad{composite(p, q)} returns \\spad{h} if \\spad{p = h(q)},{} and \"failed\" no such \\spad{h} exists.")) (|subResultantGcd| (($ $ $) "\\spad{subResultantGcd(p,q)} computes the gcd of the polynomials \\spad{p} and \\spad{q} using the SubResultant GCD algorithm.")) (|order| (((|NonNegativeInteger|) $ $) "\\spad{order(p, q)} returns the largest \\spad{n} such that \\spad{q**n} divides polynomial \\spad{p} \\spadignore{i.e.} the order of \\spad{p(x)} at \\spad{q(x)=0}.")) (|elt| ((|#1| (|Fraction| $) |#1|) "\\spad{elt(a,r)} evaluates the fraction of univariate polynomials \\spad{a} with the distinguished variable replaced by the constant \\spad{r}.") (((|Fraction| $) (|Fraction| $) (|Fraction| $)) "\\spad{elt(a,b)} evaluates the fraction of univariate polynomials \\spad{a} with the distinguished variable replaced by \\spad{b}.")) (|resultant| ((|#1| $ $) "\\spad{resultant(p,q)} returns the resultant of the polynomials \\spad{p} and \\spad{q}.")) (|discriminant| ((|#1| $) "\\spad{discriminant(p)} returns the discriminant of the polynomial \\spad{p}.")) (|differentiate| (($ $ (|Mapping| |#1| |#1|) $) "\\spad{differentiate(p, d, x')} extends the \\spad{R}-derivation \\spad{d} to an extension \\spad{D} in \\spad{R[x]} where Dx is given by x',{} and returns \\spad{Dp}.")) (|pseudoRemainder| (($ $ $) "\\spad{pseudoRemainder(p,q)} = \\spad{r},{} for polynomials \\spad{p} and \\spad{q},{} returns the remainder when \\spad{p' := p*lc(q)**(deg p - deg q + 1)} is pseudo right-divided by \\spad{q},{} \\spadignore{i.e.} \\spad{p' = s q + r}.")) (|shiftLeft| (($ $ (|NonNegativeInteger|)) "\\spad{shiftLeft(p,n)} returns \\spad{p * monomial(1,n)}")) (|shiftRight| (($ $ (|NonNegativeInteger|)) "\\spad{shiftRight(p,n)} returns \\spad{monicDivide(p,monomial(1,n)).quotient}")) (|karatsubaDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ (|NonNegativeInteger|)) "\\spad{karatsubaDivide(p,n)} returns the same as \\spad{monicDivide(p,monomial(1,n))}")) (|monicDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) "\\spad{monicDivide(p,q)} divide the polynomial \\spad{p} by the monic polynomial \\spad{q},{} returning the pair \\spad{[quotient, remainder]}. Error: if \\spad{q} isn't monic.")) (|divideExponents| (((|Union| $ "failed") $ (|NonNegativeInteger|)) "\\spad{divideExponents(p,n)} returns a new polynomial resulting from dividing all exponents of the polynomial \\spad{p} by the non negative integer \\spad{n},{} or \"failed\" if some exponent is not exactly divisible by \\spad{n}.")) (|multiplyExponents| (($ $ (|NonNegativeInteger|)) "\\spad{multiplyExponents(p,n)} returns a new polynomial resulting from multiplying all exponents of the polynomial \\spad{p} by the non negative integer \\spad{n}.")) (|unmakeSUP| (($ (|SparseUnivariatePolynomial| |#1|)) "\\spad{unmakeSUP(sup)} converts \\spad{sup} of type \\spadtype{SparseUnivariatePolynomial(R)} to be a member of the given type. Note: converse of makeSUP.")) (|makeSUP| (((|SparseUnivariatePolynomial| |#1|) $) "\\spad{makeSUP(p)} converts the polynomial \\spad{p} to be of type SparseUnivariatePolynomial over the same coefficients.")) (|vectorise| (((|Vector| |#1|) $ (|NonNegativeInteger|)) "\\spad{vectorise(p, n)} returns \\spad{[a0,...,a(n-1)]} where \\spad{p = a0 + a1*x + ... + a(n-1)*x**(n-1)} + higher order terms. The degree of polynomial \\spad{p} can be different from \\spad{n-1}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3990 |has| |#1| (-312)) (-3992 |has| |#1| (-6 -3992)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-1155 R PR S PS) 
((|constructor| (NIL "Mapping from polynomials over \\spad{R} to polynomials over \\spad{S} given a map from \\spad{R} to \\spad{S} assumed to send zero to zero.")) (|map| ((|#4| (|Mapping| |#3| |#1|) |#2|) "\\spad{map(f, p)} takes a function \\spad{f} from \\spad{R} to \\spad{S},{} and applies it to each (non-zero) coefficient of a polynomial \\spad{p} over \\spad{R},{} getting a new polynomial over \\spad{S}. Note: since the map is not applied to zero elements,{} it may map zero to zero."))) 
NIL 
NIL 
(-1156 S |Coef| |Expon|) 
((|constructor| (NIL "\\spadtype{UnivariatePowerSeriesCategory} is the most general univariate power series category with exponents in an ordered abelian monoid. Note: this category exports a substitution function if it is possible to multiply exponents. Note: this category exports a derivative operation if it is possible to multiply coefficients by exponents.")) (|eval| (((|Stream| |#2|) $ |#2|) "\\spad{eval(f,a)} evaluates a power series at a value in the ground ring by returning a stream of partial sums.")) (|extend| (($ $ |#3|) "\\spad{extend(f,n)} causes all terms of \\spad{f} of degree <= \\spad{n} to be computed.")) (|approximate| ((|#2| $ |#3|) "\\spad{approximate(f)} returns a truncated power series with the series variable viewed as an element of the coefficient domain.")) (|truncate| (($ $ |#3| |#3|) "\\spad{truncate(f,k1,k2)} returns a (finite) power series consisting of the sum of all terms of \\spad{f} of degree \\spad{d} with \\spad{k1 <= d <= k2}.") (($ $ |#3|) "\\spad{truncate(f,k)} returns a (finite) power series consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.")) (|order| ((|#3| $ |#3|) "\\spad{order(f,n) = min(m,n)},{} where \\spad{m} is the degree of the lowest order non-zero term in \\spad{f}.") ((|#3| $) "\\spad{order(f)} is the degree of the lowest order non-zero term in \\spad{f}. This will result in an infinite loop if \\spad{f} has no non-zero terms.")) (|multiplyExponents| (($ $ (|PositiveInteger|)) "\\spad{multiplyExponents(f,n)} multiplies all exponents of the power series \\spad{f} by the positive integer \\spad{n}.")) (|center| ((|#2| $) "\\spad{center(f)} returns the point about which the series \\spad{f} is expanded.")) (|variable| (((|Symbol|) $) "\\spad{variable(f)} returns the (unique) power series variable of the power series \\spad{f}.")) (|terms| (((|Stream| (|Record| (|:| |k| |#3|) (|:| |c| |#2|))) $) "\\spad{terms(f(x))} returns a stream of non-zero terms,{} where a a term is an exponent-coefficient pair. The terms in the stream are ordered by increasing order of exponents."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-809 (-1089)))) (|HasSignature| |#2| (|%list| (QUOTE *) (|%list| (|devaluate| |#2|) (|devaluate| |#3|) (|devaluate| |#2|)))) (|HasCategory| |#3| (QUOTE (-1025))) (|HasSignature| |#2| (|%list| (QUOTE **) (|%list| (|devaluate| |#2|) (|devaluate| |#2|) (|devaluate| |#3|)))) (|HasSignature| |#2| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#2|) (QUOTE (-1089)))))) 
(-1157 |Coef| |Expon|) 
((|constructor| (NIL "\\spadtype{UnivariatePowerSeriesCategory} is the most general univariate power series category with exponents in an ordered abelian monoid. Note: this category exports a substitution function if it is possible to multiply exponents. Note: this category exports a derivative operation if it is possible to multiply coefficients by exponents.")) (|eval| (((|Stream| |#1|) $ |#1|) "\\spad{eval(f,a)} evaluates a power series at a value in the ground ring by returning a stream of partial sums.")) (|extend| (($ $ |#2|) "\\spad{extend(f,n)} causes all terms of \\spad{f} of degree <= \\spad{n} to be computed.")) (|approximate| ((|#1| $ |#2|) "\\spad{approximate(f)} returns a truncated power series with the series variable viewed as an element of the coefficient domain.")) (|truncate| (($ $ |#2| |#2|) "\\spad{truncate(f,k1,k2)} returns a (finite) power series consisting of the sum of all terms of \\spad{f} of degree \\spad{d} with \\spad{k1 <= d <= k2}.") (($ $ |#2|) "\\spad{truncate(f,k)} returns a (finite) power series consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.")) (|order| ((|#2| $ |#2|) "\\spad{order(f,n) = min(m,n)},{} where \\spad{m} is the degree of the lowest order non-zero term in \\spad{f}.") ((|#2| $) "\\spad{order(f)} is the degree of the lowest order non-zero term in \\spad{f}. This will result in an infinite loop if \\spad{f} has no non-zero terms.")) (|multiplyExponents| (($ $ (|PositiveInteger|)) "\\spad{multiplyExponents(f,n)} multiplies all exponents of the power series \\spad{f} by the positive integer \\spad{n}.")) (|center| ((|#1| $) "\\spad{center(f)} returns the point about which the series \\spad{f} is expanded.")) (|variable| (((|Symbol|) $) "\\spad{variable(f)} returns the (unique) power series variable of the power series \\spad{f}.")) (|terms| (((|Stream| (|Record| (|:| |k| |#2|) (|:| |c| |#1|))) $) "\\spad{terms(f(x))} returns a stream of non-zero terms,{} where a a term is an exponent-coefficient pair. The terms in the stream are ordered by increasing order of exponents."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1158 RC P) 
((|constructor| (NIL "This package provides for square-free decomposition of univariate polynomials over arbitrary rings,{} \\spadignore{i.e.} a partial factorization such that each factor is a product of irreducibles with multiplicity one and the factors are pairwise relatively prime. If the ring has characteristic zero,{} the result is guaranteed to satisfy this condition. If the ring is an infinite ring of finite characteristic,{} then it may not be possible to decide when polynomials contain factors which are \\spad{p}th powers. In this case,{} the flag associated with that polynomial is set to \"nil\" (meaning that that polynomials are not guaranteed to be square-free).")) (|BumInSepFFE| (((|Record| (|:| |flg| (|Union| #1="nil" #2="sqfr" #3="irred" #4="prime")) (|:| |fctr| |#2|) (|:| |xpnt| (|Integer|))) (|Record| (|:| |flg| (|Union| #1# #2# #3# #4#)) (|:| |fctr| |#2|) (|:| |xpnt| (|Integer|)))) "\\spad{BumInSepFFE(f)} is a local function,{} exported only because it has multiple conditional definitions.")) (|squareFreePart| ((|#2| |#2|) "\\spad{squareFreePart(p)} returns a polynomial which has the same irreducible factors as the univariate polynomial \\spad{p},{} but each factor has multiplicity one.")) (|squareFree| (((|Factored| |#2|) |#2|) "\\spad{squareFree(p)} computes the square-free factorization of the univariate polynomial \\spad{p}. Each factor has no repeated roots,{} and the factors are pairwise relatively prime.")) (|gcd| (($ $ $) "\\spad{gcd(p,q)} computes the greatest-common-divisor of \\spad{p} and \\spad{q}."))) 
NIL 
NIL 
(-1159 |Coef| |var| |cen|) 
((|constructor| (NIL "Dense Puiseux series in one variable \\indented{2}{\\spadtype{UnivariatePuiseuxSeries} is a domain representing Puiseux} \\indented{2}{series in one variable with coefficients in an arbitrary ring.\\space{2}The} \\indented{2}{parameters of the type specify the coefficient ring,{} the power series} \\indented{2}{variable,{} and the center of the power series expansion.\\space{2}For example,{}} \\indented{2}{\\spad{UnivariatePuiseuxSeries(Integer,x,3)} represents Puiseux series in} \\indented{2}{\\spad{(x - 3)} with \\spadtype{Integer} coefficients.}")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|)))) (|HasCategory| (-349 (-484)) (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|))))))) 
(-1160 |Coef1| |Coef2| |var1| |var2| |cen1| |cen2|) 
((|constructor| (NIL "Mapping package for univariate Puiseux series. This package allows one to apply a function to the coefficients of a univariate Puiseux series.")) (|map| (((|UnivariatePuiseuxSeries| |#2| |#4| |#6|) (|Mapping| |#2| |#1|) (|UnivariatePuiseuxSeries| |#1| |#3| |#5|)) "\\spad{map(f,g(x))} applies the map \\spad{f} to the coefficients of the Puiseux series \\spad{g(x)}."))) 
NIL 
NIL 
(-1161 |Coef|) 
((|constructor| (NIL "\\spadtype{UnivariatePuiseuxSeriesCategory} is the category of Puiseux series in one variable.")) (|integrate| (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $ (|Symbol|)) "\\spad{integrate(f(x),var)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{var}.") (($ $) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 1. We may integrate a series when we can divide coefficients by rational numbers.")) (|multiplyExponents| (($ $ (|Fraction| (|Integer|))) "\\spad{multiplyExponents(f,r)} multiplies all exponents of the power series \\spad{f} by the positive rational number \\spad{r}.")) (|series| (($ (|NonNegativeInteger|) (|Stream| (|Record| (|:| |k| (|Fraction| (|Integer|))) (|:| |c| |#1|)))) "\\spad{series(n,st)} creates a series from a common denomiator and a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents and \\spad{n} should be a common denominator for the exponents in the stream of terms."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1162 S |Coef| ULS) 
((|constructor| (NIL "This is a category of univariate Puiseux series constructed from univariate Laurent series. A Puiseux series is represented by a pair \\spad{[r,f(x)]},{} where \\spad{r} is a positive rational number and \\spad{f(x)} is a Laurent series. This pair represents the Puiseux series \\spad{f(x^r)}.")) (|laurentIfCan| (((|Union| |#3| "failed") $) "\\spad{laurentIfCan(f(x))} converts the Puiseux series \\spad{f(x)} to a Laurent series if possible. If this is not possible,{} \"failed\" is returned.")) (|laurent| ((|#3| $) "\\spad{laurent(f(x))} converts the Puiseux series \\spad{f(x)} to a Laurent series if possible. Error: if this is not possible.")) (|degree| (((|Fraction| (|Integer|)) $) "\\spad{degree(f(x))} returns the degree of the leading term of the Puiseux series \\spad{f(x)},{} which may have zero as a coefficient.")) (|laurentRep| ((|#3| $) "\\spad{laurentRep(f(x))} returns \\spad{g(x)} where the Puiseux series \\spad{f(x) = g(x^r)} is represented by \\spad{[r,g(x)]}.")) (|rationalPower| (((|Fraction| (|Integer|)) $) "\\spad{rationalPower(f(x))} returns \\spad{r} where the Puiseux series \\spad{f(x) = g(x^r)}.")) (|puiseux| (($ (|Fraction| (|Integer|)) |#3|) "\\spad{puiseux(r,f(x))} returns \\spad{f(x^r)}."))) 
NIL 
NIL 
(-1163 |Coef| ULS) 
((|constructor| (NIL "This is a category of univariate Puiseux series constructed from univariate Laurent series. A Puiseux series is represented by a pair \\spad{[r,f(x)]},{} where \\spad{r} is a positive rational number and \\spad{f(x)} is a Laurent series. This pair represents the Puiseux series \\spad{f(x^r)}.")) (|laurentIfCan| (((|Union| |#2| "failed") $) "\\spad{laurentIfCan(f(x))} converts the Puiseux series \\spad{f(x)} to a Laurent series if possible. If this is not possible,{} \"failed\" is returned.")) (|laurent| ((|#2| $) "\\spad{laurent(f(x))} converts the Puiseux series \\spad{f(x)} to a Laurent series if possible. Error: if this is not possible.")) (|degree| (((|Fraction| (|Integer|)) $) "\\spad{degree(f(x))} returns the degree of the leading term of the Puiseux series \\spad{f(x)},{} which may have zero as a coefficient.")) (|laurentRep| ((|#2| $) "\\spad{laurentRep(f(x))} returns \\spad{g(x)} where the Puiseux series \\spad{f(x) = g(x^r)} is represented by \\spad{[r,g(x)]}.")) (|rationalPower| (((|Fraction| (|Integer|)) $) "\\spad{rationalPower(f(x))} returns \\spad{r} where the Puiseux series \\spad{f(x) = g(x^r)}.")) (|puiseux| (($ (|Fraction| (|Integer|)) |#2|) "\\spad{puiseux(r,f(x))} returns \\spad{f(x^r)}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1164 |Coef| ULS) 
((|constructor| (NIL "This package enables one to construct a univariate Puiseux series domain from a univariate Laurent series domain. Univariate Puiseux series are represented by a pair \\spad{[r,f(x)]},{} where \\spad{r} is a positive rational number and \\spad{f(x)} is a Laurent series. This pair represents the Puiseux series \\spad{f(x^r)}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3992 |has| |#1| (-312)) (-3986 |has| |#1| (-312)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#1| (QUOTE (-146))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484))) (|devaluate| |#1|)))) (|HasCategory| (-349 (-484)) (QUOTE (-1025))) (|HasCategory| |#1| (QUOTE (-312))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (OR (|HasCategory| |#1| (QUOTE (-312))) (|HasCategory| |#1| (QUOTE (-495)))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (|%list| (QUOTE -349) (QUOTE (-484)))))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|)))))) (|HasCategory| |#1| (QUOTE (-38 (-349 (-484)))))) 
(-1165 R FE |var| |cen|) 
((|constructor| (NIL "UnivariatePuiseuxSeriesWithExponentialSingularity is a domain used to represent functions with essential singularities. Objects in this domain are sums,{} where each term in the sum is a univariate Puiseux series times the exponential of a univariate Puiseux series. Thus,{} the elements of this domain are sums of expressions of the form \\spad{g(x) * exp(f(x))},{} where \\spad{g}(\\spad{x}) is a univariate Puiseux series and \\spad{f}(\\spad{x}) is a univariate Puiseux series with no terms of non-negative degree.")) (|dominantTerm| (((|Union| (|Record| (|:| |%term| (|Record| (|:| |%coef| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|:| |%expon| (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|:| |%expTerms| (|List| (|Record| (|:| |k| (|Fraction| (|Integer|))) (|:| |c| |#2|)))))) (|:| |%type| (|String|))) "failed") $) "\\spad{dominantTerm(f(var))} returns the term that dominates the limiting behavior of \\spad{f(var)} as \\spad{var -> cen+} together with a \\spadtype{String} which briefly describes that behavior. The value of the \\spadtype{String} will be \\spad{\"zero\"} (resp. \\spad{\"infinity\"}) if the term tends to zero (resp. infinity) exponentially and will \\spad{\"series\"} if the term is a Puiseux series.")) (|limitPlus| (((|Union| (|OrderedCompletion| |#2|) "failed") $) "\\spad{limitPlus(f(var))} returns \\spad{limit(var -> cen+,f(var))}."))) 
(((-3996 "*") |has| (-1159 |#2| |#3| |#4|) (-146)) (-3987 |has| (-1159 |#2| |#3| |#4|) (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-38 (-349 (-484))))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-118))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-120))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-146))) (OR (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-38 (-349 (-484))))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-950 (-349 (-484)))))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-950 (-349 (-484))))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-950 (-484)))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-312))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-391))) (|HasCategory| (-1159 |#2| |#3| |#4|) (QUOTE (-495)))) 
(-1166 A S) 
((|constructor| (NIL "A unary-recursive aggregate is a one where nodes may have either 0 or 1 children. This aggregate models,{} though not precisely,{} a linked list possibly with a single cycle. A node with one children models a non-empty list,{} with the \\spadfun{value} of the list designating the head,{} or \\spadfun{first},{} of the list,{} and the child designating the tail,{} or \\spadfun{rest},{} of the list. A node with no child then designates the empty list. Since these aggregates are recursive aggregates,{} they may be cyclic.")) (|split!| (($ $ (|Integer|)) "\\spad{split!(u,n)} splits \\spad{u} into two aggregates: \\axiom{\\spad{v} = rest(\\spad{u},{}\\spad{n})} and \\axiom{\\spad{w} = first(\\spad{u},{}\\spad{n})},{} returning \\axiom{\\spad{v}}. Note: afterwards \\axiom{rest(\\spad{u},{}\\spad{n})} returns \\axiom{empty()}.")) (|setlast!| ((|#2| $ |#2|) "\\spad{setlast!(u,x)} destructively changes the last element of \\spad{u} to \\spad{x}.")) (|setrest!| (($ $ $) "\\spad{setrest!(u,v)} destructively changes the rest of \\spad{u} to \\spad{v}.")) (|setelt| ((|#2| $ "last" |#2|) "\\spad{setelt(u,\"last\",x)} (also written: \\axiom{\\spad{u}.last := \\spad{b}}) is equivalent to \\axiom{setlast!(\\spad{u},{}\\spad{v})}.") (($ $ "rest" $) "\\spad{setelt(u,\"rest\",v)} (also written: \\axiom{\\spad{u}.rest := \\spad{v}}) is equivalent to \\axiom{setrest!(\\spad{u},{}\\spad{v})}.") ((|#2| $ "first" |#2|) "\\spad{setelt(u,\"first\",x)} (also written: \\axiom{\\spad{u}.first := \\spad{x}}) is equivalent to \\axiom{setfirst!(\\spad{u},{}\\spad{x})}.")) (|setfirst!| ((|#2| $ |#2|) "\\spad{setfirst!(u,x)} destructively changes the first element of a to \\spad{x}.")) (|cycleSplit!| (($ $) "\\spad{cycleSplit!(u)} splits the aggregate by dropping off the cycle. The value returned is the cycle entry,{} or nil if none exists. For example,{} if \\axiom{\\spad{w} = concat(\\spad{u},{}\\spad{v})} is the cyclic list where \\spad{v} is the head of the cycle,{} \\axiom{cycleSplit!(\\spad{w})} will drop \\spad{v} off \\spad{w} thus destructively changing \\spad{w} to \\spad{u},{} and returning \\spad{v}.")) (|concat!| (($ $ |#2|) "\\spad{concat!(u,x)} destructively adds element \\spad{x} to the end of \\spad{u}. Note: \\axiom{concat!(a,{}\\spad{x}) = setlast!(a,{}[\\spad{x}])}.") (($ $ $) "\\spad{concat!(u,v)} destructively concatenates \\spad{v} to the end of \\spad{u}. Note: \\axiom{concat!(\\spad{u},{}\\spad{v}) = setlast!(\\spad{u},{}\\spad{v})}.")) (|cycleTail| (($ $) "\\spad{cycleTail(u)} returns the last node in the cycle,{} or empty if none exists.")) (|cycleLength| (((|NonNegativeInteger|) $) "\\spad{cycleLength(u)} returns the length of a top-level cycle contained in aggregate \\spad{u},{} or 0 is \\spad{u} has no such cycle.")) (|cycleEntry| (($ $) "\\spad{cycleEntry(u)} returns the head of a top-level cycle contained in aggregate \\spad{u},{} or \\axiom{empty()} if none exists.")) (|third| ((|#2| $) "\\spad{third(u)} returns the third element of \\spad{u}. Note: \\axiom{third(\\spad{u}) = first(rest(rest(\\spad{u})))}.")) (|second| ((|#2| $) "\\spad{second(u)} returns the second element of \\spad{u}. Note: \\axiom{second(\\spad{u}) = first(rest(\\spad{u}))}.")) (|tail| (($ $) "\\spad{tail(u)} returns the last node of \\spad{u}. Note: if \\spad{u} is \\axiom{shallowlyMutable},{} \\axiom{setrest(tail(\\spad{u}),{}\\spad{v}) = concat(\\spad{u},{}\\spad{v})}.")) (|last| (($ $ (|NonNegativeInteger|)) "\\spad{last(u,n)} returns a copy of the last \\spad{n} (\\axiom{\\spad{n} >= 0}) nodes of \\spad{u}. Note: \\axiom{last(\\spad{u},{}\\spad{n})} is a list of \\spad{n} elements.") ((|#2| $) "\\spad{last(u)} resturn the last element of \\spad{u}. Note: for lists,{} \\axiom{last(\\spad{u}) = \\spad{u} . (maxIndex \\spad{u}) = \\spad{u} . (\\# \\spad{u} - 1)}.")) (|rest| (($ $ (|NonNegativeInteger|)) "\\spad{rest(u,n)} returns the \\axiom{\\spad{n}}th (\\spad{n} >= 0) node of \\spad{u}. Note: \\axiom{rest(\\spad{u},{}0) = \\spad{u}}.") (($ $) "\\spad{rest(u)} returns an aggregate consisting of all but the first element of \\spad{u} (equivalently,{} the next node of \\spad{u}).")) (|elt| ((|#2| $ "last") "\\spad{elt(u,\"last\")} (also written: \\axiom{\\spad{u} . last}) is equivalent to last \\spad{u}.") (($ $ "rest") "\\spad{elt(\\%,\"rest\")} (also written: \\axiom{\\spad{u}.rest}) is equivalent to \\axiom{rest \\spad{u}}.") ((|#2| $ "first") "\\spad{elt(u,\"first\")} (also written: \\axiom{\\spad{u} . first}) is equivalent to first \\spad{u}.")) (|first| (($ $ (|NonNegativeInteger|)) "\\spad{first(u,n)} returns a copy of the first \\spad{n} (\\axiom{\\spad{n} >= 0}) elements of \\spad{u}.") ((|#2| $) "\\spad{first(u)} returns the first element of \\spad{u} (equivalently,{} the value at the current node).")) (|concat| (($ |#2| $) "\\spad{concat(x,u)} returns aggregate consisting of \\spad{x} followed by the elements of \\spad{u}. Note: if \\axiom{\\spad{v} = concat(\\spad{x},{}\\spad{u})} then \\axiom{\\spad{x} = first \\spad{v}} and \\axiom{\\spad{u} = rest \\spad{v}}.") (($ $ $) "\\spad{concat(u,v)} returns an aggregate \\spad{w} consisting of the elements of \\spad{u} followed by the elements of \\spad{v}. Note: \\axiom{\\spad{v} = rest(\\spad{w},{}\\#a)}."))) 
NIL 
((|HasAttribute| |#1| (QUOTE -3995))) 
(-1167 S) 
((|constructor| (NIL "A unary-recursive aggregate is a one where nodes may have either 0 or 1 children. This aggregate models,{} though not precisely,{} a linked list possibly with a single cycle. A node with one children models a non-empty list,{} with the \\spadfun{value} of the list designating the head,{} or \\spadfun{first},{} of the list,{} and the child designating the tail,{} or \\spadfun{rest},{} of the list. A node with no child then designates the empty list. Since these aggregates are recursive aggregates,{} they may be cyclic.")) (|split!| (($ $ (|Integer|)) "\\spad{split!(u,n)} splits \\spad{u} into two aggregates: \\axiom{\\spad{v} = rest(\\spad{u},{}\\spad{n})} and \\axiom{\\spad{w} = first(\\spad{u},{}\\spad{n})},{} returning \\axiom{\\spad{v}}. Note: afterwards \\axiom{rest(\\spad{u},{}\\spad{n})} returns \\axiom{empty()}.")) (|setlast!| ((|#1| $ |#1|) "\\spad{setlast!(u,x)} destructively changes the last element of \\spad{u} to \\spad{x}.")) (|setrest!| (($ $ $) "\\spad{setrest!(u,v)} destructively changes the rest of \\spad{u} to \\spad{v}.")) (|setelt| ((|#1| $ "last" |#1|) "\\spad{setelt(u,\"last\",x)} (also written: \\axiom{\\spad{u}.last := \\spad{b}}) is equivalent to \\axiom{setlast!(\\spad{u},{}\\spad{v})}.") (($ $ "rest" $) "\\spad{setelt(u,\"rest\",v)} (also written: \\axiom{\\spad{u}.rest := \\spad{v}}) is equivalent to \\axiom{setrest!(\\spad{u},{}\\spad{v})}.") ((|#1| $ "first" |#1|) "\\spad{setelt(u,\"first\",x)} (also written: \\axiom{\\spad{u}.first := \\spad{x}}) is equivalent to \\axiom{setfirst!(\\spad{u},{}\\spad{x})}.")) (|setfirst!| ((|#1| $ |#1|) "\\spad{setfirst!(u,x)} destructively changes the first element of a to \\spad{x}.")) (|cycleSplit!| (($ $) "\\spad{cycleSplit!(u)} splits the aggregate by dropping off the cycle. The value returned is the cycle entry,{} or nil if none exists. For example,{} if \\axiom{\\spad{w} = concat(\\spad{u},{}\\spad{v})} is the cyclic list where \\spad{v} is the head of the cycle,{} \\axiom{cycleSplit!(\\spad{w})} will drop \\spad{v} off \\spad{w} thus destructively changing \\spad{w} to \\spad{u},{} and returning \\spad{v}.")) (|concat!| (($ $ |#1|) "\\spad{concat!(u,x)} destructively adds element \\spad{x} to the end of \\spad{u}. Note: \\axiom{concat!(a,{}\\spad{x}) = setlast!(a,{}[\\spad{x}])}.") (($ $ $) "\\spad{concat!(u,v)} destructively concatenates \\spad{v} to the end of \\spad{u}. Note: \\axiom{concat!(\\spad{u},{}\\spad{v}) = setlast!(\\spad{u},{}\\spad{v})}.")) (|cycleTail| (($ $) "\\spad{cycleTail(u)} returns the last node in the cycle,{} or empty if none exists.")) (|cycleLength| (((|NonNegativeInteger|) $) "\\spad{cycleLength(u)} returns the length of a top-level cycle contained in aggregate \\spad{u},{} or 0 is \\spad{u} has no such cycle.")) (|cycleEntry| (($ $) "\\spad{cycleEntry(u)} returns the head of a top-level cycle contained in aggregate \\spad{u},{} or \\axiom{empty()} if none exists.")) (|third| ((|#1| $) "\\spad{third(u)} returns the third element of \\spad{u}. Note: \\axiom{third(\\spad{u}) = first(rest(rest(\\spad{u})))}.")) (|second| ((|#1| $) "\\spad{second(u)} returns the second element of \\spad{u}. Note: \\axiom{second(\\spad{u}) = first(rest(\\spad{u}))}.")) (|tail| (($ $) "\\spad{tail(u)} returns the last node of \\spad{u}. Note: if \\spad{u} is \\axiom{shallowlyMutable},{} \\axiom{setrest(tail(\\spad{u}),{}\\spad{v}) = concat(\\spad{u},{}\\spad{v})}.")) (|last| (($ $ (|NonNegativeInteger|)) "\\spad{last(u,n)} returns a copy of the last \\spad{n} (\\axiom{\\spad{n} >= 0}) nodes of \\spad{u}. Note: \\axiom{last(\\spad{u},{}\\spad{n})} is a list of \\spad{n} elements.") ((|#1| $) "\\spad{last(u)} resturn the last element of \\spad{u}. Note: for lists,{} \\axiom{last(\\spad{u}) = \\spad{u} . (maxIndex \\spad{u}) = \\spad{u} . (\\# \\spad{u} - 1)}.")) (|rest| (($ $ (|NonNegativeInteger|)) "\\spad{rest(u,n)} returns the \\axiom{\\spad{n}}th (\\spad{n} >= 0) node of \\spad{u}. Note: \\axiom{rest(\\spad{u},{}0) = \\spad{u}}.") (($ $) "\\spad{rest(u)} returns an aggregate consisting of all but the first element of \\spad{u} (equivalently,{} the next node of \\spad{u}).")) (|elt| ((|#1| $ "last") "\\spad{elt(u,\"last\")} (also written: \\axiom{\\spad{u} . last}) is equivalent to last \\spad{u}.") (($ $ "rest") "\\spad{elt(\\%,\"rest\")} (also written: \\axiom{\\spad{u}.rest}) is equivalent to \\axiom{rest \\spad{u}}.") ((|#1| $ "first") "\\spad{elt(u,\"first\")} (also written: \\axiom{\\spad{u} . first}) is equivalent to first \\spad{u}.")) (|first| (($ $ (|NonNegativeInteger|)) "\\spad{first(u,n)} returns a copy of the first \\spad{n} (\\axiom{\\spad{n} >= 0}) elements of \\spad{u}.") ((|#1| $) "\\spad{first(u)} returns the first element of \\spad{u} (equivalently,{} the value at the current node).")) (|concat| (($ |#1| $) "\\spad{concat(x,u)} returns aggregate consisting of \\spad{x} followed by the elements of \\spad{u}. Note: if \\axiom{\\spad{v} = concat(\\spad{x},{}\\spad{u})} then \\axiom{\\spad{x} = first \\spad{v}} and \\axiom{\\spad{u} = rest \\spad{v}}.") (($ $ $) "\\spad{concat(u,v)} returns an aggregate \\spad{w} consisting of the elements of \\spad{u} followed by the elements of \\spad{v}. Note: \\axiom{\\spad{v} = rest(\\spad{w},{}\\#a)}."))) 
NIL 
NIL 
(-1168 |Coef| |var| |cen|) 
((|constructor| (NIL "Dense Taylor series in one variable \\spadtype{UnivariateTaylorSeries} is a domain representing Taylor series in one variable with coefficients in an arbitrary ring. The parameters of the type specify the coefficient ring,{} the power series variable,{} and the center of the power series expansion. For example,{} \\spadtype{UnivariateTaylorSeries}(Integer,{}\\spad{x},{}3) represents Taylor series in \\spad{(x - 3)} with \\spadtype{Integer} coefficients.")) (|integrate| (($ $ (|Variable| |#2|)) "\\spad{integrate(f(x),x)} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (|invmultisect| (($ (|Integer|) (|Integer|) $) "\\spad{invmultisect(a,b,f(x))} substitutes \\spad{x^((a+b)*n)} \\indented{1}{for \\spad{x^n} and multiples by \\spad{x^b}.}")) (|multisect| (($ (|Integer|) (|Integer|) $) "\\spad{multisect(a,b,f(x))} selects the coefficients of \\indented{1}{\\spad{x^((a+b)*n+a)},{} and changes this monomial to \\spad{x^n}.}")) (|revert| (($ $) "\\spad{revert(f(x))} returns a Taylor series \\spad{g(x)} such that \\spad{f(g(x)) = g(f(x)) = x}. Series \\spad{f(x)} should have constant coefficient 0 and invertible 1st order coefficient.")) (|generalLambert| (($ $ (|Integer|) (|Integer|)) "\\spad{generalLambert(f(x),a,d)} returns \\spad{f(x^a) + f(x^(a + d)) + \\indented{1}{f(x^(a + 2 d)) + ... }. \\spad{f(x)} should have zero constant} \\indented{1}{coefficient and \\spad{a} and \\spad{d} should be positive.}")) (|evenlambert| (($ $) "\\spad{evenlambert(f(x))} returns \\spad{f(x^2) + f(x^4) + f(x^6) + ...}. \\indented{1}{\\spad{f(x)} should have a zero constant coefficient.} \\indented{1}{This function is used for computing infinite products.} \\indented{1}{If \\spad{f(x)} is a Taylor series with constant term 1,{} then} \\indented{1}{\\spad{product(n=1..infinity,f(x^(2*n))) = exp(log(evenlambert(f(x))))}.}")) (|oddlambert| (($ $) "\\spad{oddlambert(f(x))} returns \\spad{f(x) + f(x^3) + f(x^5) + ...}. \\indented{1}{\\spad{f(x)} should have a zero constant coefficient.} \\indented{1}{This function is used for computing infinite products.} \\indented{1}{If \\spad{f(x)} is a Taylor series with constant term 1,{} then} \\indented{1}{\\spad{product(n=1..infinity,f(x^(2*n-1)))=exp(log(oddlambert(f(x))))}.}")) (|lambert| (($ $) "\\spad{lambert(f(x))} returns \\spad{f(x) + f(x^2) + f(x^3) + ...}. \\indented{1}{This function is used for computing infinite products.} \\indented{1}{\\spad{f(x)} should have zero constant coefficient.} \\indented{1}{If \\spad{f(x)} is a Taylor series with constant term 1,{} then} \\indented{1}{\\spad{product(n = 1..infinity,f(x^n)) = exp(log(lambert(f(x))))}.}")) (|lagrange| (($ $) "\\spad{lagrange(g(x))} produces the Taylor series for \\spad{f(x)} \\indented{1}{where \\spad{f(x)} is implicitly defined as \\spad{f(x) = x*g(f(x))}.}")) (|univariatePolynomial| (((|UnivariatePolynomial| |#2| |#1|) $ (|NonNegativeInteger|)) "\\spad{univariatePolynomial(f,k)} returns a univariate polynomial \\indented{1}{consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.}")) (|coerce| (($ (|Variable| |#2|)) "\\spad{coerce(var)} converts the series variable \\spad{var} into a \\indented{1}{Taylor series.}") (($ (|UnivariatePolynomial| |#2| |#1|)) "\\spad{coerce(p)} converts a univariate polynomial \\spad{p} in the variable \\spad{var} to a univariate Taylor series in \\spad{var}."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-495))) (OR (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-495)))) (|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-118))) (|HasCategory| |#1| (QUOTE (-120))) (-12 (|HasCategory| |#1| (QUOTE (-809 (-1089)))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-694)) (|devaluate| |#1|))))) (|HasSignature| |#1| (|%list| (QUOTE *) (|%list| (|devaluate| |#1|) (QUOTE (-694)) (|devaluate| |#1|)))) (|HasCategory| (-694) (QUOTE (-1025))) (-12 (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-694))))) (|HasSignature| |#1| (|%list| (QUOTE -3945) (|%list| (|devaluate| |#1|) (QUOTE (-1089)))))) (|HasSignature| |#1| (|%list| (QUOTE **) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-694))))) (|HasCategory| |#1| (QUOTE (-312))) (OR (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#1| (QUOTE (-29 (-484)))) (|HasCategory| |#1| (QUOTE (-871))) (|HasCategory| |#1| (QUOTE (-1114)))) (-12 (|HasCategory| |#1| (QUOTE (-38 (-349 (-484))))) (|HasSignature| |#1| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#1|) (|devaluate| |#1|) (QUOTE (-1089))))) (|HasSignature| |#1| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#1|))))))) 
(-1169 |Coef1| |Coef2| UTS1 UTS2) 
((|constructor| (NIL "Mapping package for univariate Taylor series. \\indented{2}{This package allows one to apply a function to the coefficients of} \\indented{2}{a univariate Taylor series.}")) (|map| ((|#4| (|Mapping| |#2| |#1|) |#3|) "\\spad{map(f,g(x))} applies the map \\spad{f} to the coefficients of \\indented{1}{the Taylor series \\spad{g(x)}.}"))) 
NIL 
NIL 
(-1170 S |Coef|) 
((|constructor| (NIL "\\spadtype{UnivariateTaylorSeriesCategory} is the category of Taylor series in one variable.")) (|integrate| (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (** (($ $ |#2|) "\\spad{f(x) ** a} computes a power of a power series. When the coefficient ring is a field,{} we may raise a series to an exponent from the coefficient ring provided that the constant coefficient of the series is 1.")) (|polynomial| (((|Polynomial| |#2|) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{polynomial(f,k1,k2)} returns a polynomial consisting of the sum of all terms of \\spad{f} of degree \\spad{d} with \\spad{k1 <= d <= k2}.") (((|Polynomial| |#2|) $ (|NonNegativeInteger|)) "\\spad{polynomial(f,k)} returns a polynomial consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.")) (|multiplyCoefficients| (($ (|Mapping| |#2| (|Integer|)) $) "\\spad{multiplyCoefficients(f,sum(n = 0..infinity,a[n] * x**n))} returns \\spad{sum(n = 0..infinity,f(n) * a[n] * x**n)}. This function is used when Laurent series are represented by a Taylor series and an order.")) (|quoByVar| (($ $) "\\spad{quoByVar(a0 + a1 x + a2 x**2 + ...)} returns \\spad{a1 + a2 x + a3 x**2 + ...} Thus,{} this function substracts the constant term and divides by the series variable. This function is used when Laurent series are represented by a Taylor series and an order.")) (|coefficients| (((|Stream| |#2|) $) "\\spad{coefficients(a0 + a1 x + a2 x**2 + ...)} returns a stream of coefficients: \\spad{[a0,a1,a2,...]}. The entries of the stream may be zero.")) (|series| (($ (|Stream| |#2|)) "\\spad{series([a0,a1,a2,...])} is the Taylor series \\spad{a0 + a1 x + a2 x**2 + ...}.") (($ (|Stream| (|Record| (|:| |k| (|NonNegativeInteger|)) (|:| |c| |#2|)))) "\\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-29 (-484)))) (|HasCategory| |#2| (QUOTE (-871))) (|HasCategory| |#2| (QUOTE (-1114))) (|HasSignature| |#2| (|%list| (QUOTE -3081) (|%list| (|%list| (QUOTE -583) (QUOTE (-1089))) (|devaluate| |#2|)))) (|HasSignature| |#2| (|%list| (QUOTE -3811) (|%list| (|devaluate| |#2|) (|devaluate| |#2|) (QUOTE (-1089))))) (|HasCategory| |#2| (QUOTE (-38 (-349 (-484))))) (|HasCategory| |#2| (QUOTE (-312)))) 
(-1171 |Coef|) 
((|constructor| (NIL "\\spadtype{UnivariateTaylorSeriesCategory} is the category of Taylor series in one variable.")) (|integrate| (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $ (|Symbol|)) "\\spad{integrate(f(x),y)} returns an anti-derivative of the power series \\spad{f(x)} with respect to the variable \\spad{y}.") (($ $) "\\spad{integrate(f(x))} returns an anti-derivative of the power series \\spad{f(x)} with constant coefficient 0. We may integrate a series when we can divide coefficients by integers.")) (** (($ $ |#1|) "\\spad{f(x) ** a} computes a power of a power series. When the coefficient ring is a field,{} we may raise a series to an exponent from the coefficient ring provided that the constant coefficient of the series is 1.")) (|polynomial| (((|Polynomial| |#1|) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{polynomial(f,k1,k2)} returns a polynomial consisting of the sum of all terms of \\spad{f} of degree \\spad{d} with \\spad{k1 <= d <= k2}.") (((|Polynomial| |#1|) $ (|NonNegativeInteger|)) "\\spad{polynomial(f,k)} returns a polynomial consisting of the sum of all terms of \\spad{f} of degree \\spad{<= k}.")) (|multiplyCoefficients| (($ (|Mapping| |#1| (|Integer|)) $) "\\spad{multiplyCoefficients(f,sum(n = 0..infinity,a[n] * x**n))} returns \\spad{sum(n = 0..infinity,f(n) * a[n] * x**n)}. This function is used when Laurent series are represented by a Taylor series and an order.")) (|quoByVar| (($ $) "\\spad{quoByVar(a0 + a1 x + a2 x**2 + ...)} returns \\spad{a1 + a2 x + a3 x**2 + ...} Thus,{} this function substracts the constant term and divides by the series variable. This function is used when Laurent series are represented by a Taylor series and an order.")) (|coefficients| (((|Stream| |#1|) $) "\\spad{coefficients(a0 + a1 x + a2 x**2 + ...)} returns a stream of coefficients: \\spad{[a0,a1,a2,...]}. The entries of the stream may be zero.")) (|series| (($ (|Stream| |#1|)) "\\spad{series([a0,a1,a2,...])} is the Taylor series \\spad{a0 + a1 x + a2 x**2 + ...}.") (($ (|Stream| (|Record| (|:| |k| (|NonNegativeInteger|)) (|:| |c| |#1|)))) "\\spad{series(st)} creates a series from a stream of non-zero terms,{} where a term is an exponent-coefficient pair. The terms in the stream should be ordered by increasing order of exponents."))) 
(((-3996 "*") |has| |#1| (-146)) (-3987 |has| |#1| (-495)) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1172 |Coef| UTS) 
((|constructor| (NIL "\\indented{1}{This package provides Taylor series solutions to regular} linear or non-linear ordinary differential equations of arbitrary order.")) (|mpsode| (((|List| |#2|) (|List| |#1|) (|List| (|Mapping| |#2| (|List| |#2|)))) "\\spad{mpsode(r,f)} solves the system of differential equations \\spad{dy[i]/dx =f[i] [x,y[1],y[2],...,y[n]]},{} \\spad{y[i](a) = r[i]} for \\spad{i} in 1..\\spad{n}.")) (|ode| ((|#2| (|Mapping| |#2| (|List| |#2|)) (|List| |#1|)) "\\spad{ode(f,cl)} is the solution to \\spad{y<n>=f(y,y',..,y<n-1>)} such that \\spad{y<i>(a) = cl.i} for \\spad{i} in 1..\\spad{n}.")) (|ode2| ((|#2| (|Mapping| |#2| |#2| |#2|) |#1| |#1|) "\\spad{ode2(f,c0,c1)} is the solution to \\spad{y'' = f(y,y')} such that \\spad{y(a) = c0} and \\spad{y'(a) = c1}.")) (|ode1| ((|#2| (|Mapping| |#2| |#2|) |#1|) "\\spad{ode1(f,c)} is the solution to \\spad{y' = f(y)} such that \\spad{y(a) = c}.")) (|fixedPointExquo| ((|#2| |#2| |#2|) "\\spad{fixedPointExquo(f,g)} computes the exact quotient of \\spad{f} and \\spad{g} using a fixed point computation.")) (|stFuncN| (((|Mapping| (|Stream| |#1|) (|List| (|Stream| |#1|))) (|Mapping| |#2| (|List| |#2|))) "\\spad{stFuncN(f)} is a local function xported due to compiler problem. This function is of no interest to the top-level user.")) (|stFunc2| (((|Mapping| (|Stream| |#1|) (|Stream| |#1|) (|Stream| |#1|)) (|Mapping| |#2| |#2| |#2|)) "\\spad{stFunc2(f)} is a local function exported due to compiler problem. This function is of no interest to the top-level user.")) (|stFunc1| (((|Mapping| (|Stream| |#1|) (|Stream| |#1|)) (|Mapping| |#2| |#2|)) "\\spad{stFunc1(f)} is a local function exported due to compiler problem. This function is of no interest to the top-level user."))) 
NIL 
NIL 
(-1173 -3092 UP L UTS) 
((|constructor| (NIL "\\spad{RUTSodetools} provides tools to interface with the series \\indented{1}{ODE solver when presented with linear ODEs.}")) (RF2UTS ((|#4| (|Fraction| |#2|)) "\\spad{RF2UTS(f)} converts \\spad{f} to a Taylor series.")) (LODO2FUN (((|Mapping| |#4| (|List| |#4|)) |#3|) "\\spad{LODO2FUN(op)} returns the function to pass to the series ODE solver in order to solve \\spad{op y = 0}.")) (UTS2UP ((|#2| |#4| (|NonNegativeInteger|)) "\\spad{UTS2UP(s, n)} converts the first \\spad{n} terms of \\spad{s} to a univariate polynomial.")) (UP2UTS ((|#4| |#2|) "\\spad{UP2UTS(p)} converts \\spad{p} to a Taylor series."))) 
NIL 
((|HasCategory| |#1| (QUOTE (-495)))) 
(-1174) 
((|constructor| (NIL "The category of domains that act like unions. UnionType,{} like Type or Category,{} acts mostly as a take that communicates `union-like' intended semantics to the compiler. A domain \\spad{D} that satifies UnionType should provide definitions for `case' operators,{} with corresponding `autoCoerce' operators."))) 
NIL 
NIL 
(-1175 |sym|) 
((|constructor| (NIL "This domain implements variables")) (|variable| (((|Symbol|)) "\\spad{variable()} returns the symbol")) (|coerce| (((|Symbol|) $) "\\spad{coerce(x)} returns the symbol"))) 
NIL 
NIL 
(-1176 S R) 
((|constructor| (NIL "\\spadtype{VectorCategory} represents the type of vector like objects,{} \\spadignore{i.e.} finite sequences indexed by some finite segment of the integers. The operations available on vectors depend on the structure of the underlying components. Many operations from the component domain are defined for vectors componentwise. It can by assumed that extraction or updating components can be done in constant time.")) (|magnitude| ((|#2| $) "\\spad{magnitude(v)} computes the sqrt(dot(\\spad{v},{}\\spad{v})),{} \\spadignore{i.e.} the length")) (|length| ((|#2| $) "\\spad{length(v)} computes the sqrt(dot(\\spad{v},{}\\spad{v})),{} \\spadignore{i.e.} the magnitude")) (|cross| (($ $ $) "vectorProduct(\\spad{u},{}\\spad{v}) constructs the cross product of \\spad{u} and \\spad{v}. Error: if \\spad{u} and \\spad{v} are not of length 3.")) (|outerProduct| (((|Matrix| |#2|) $ $) "\\spad{outerProduct(u,v)} constructs the matrix whose (\\spad{i},{}\\spad{j})\\spad{'}th element is \\spad{u}(\\spad{i})*v(\\spad{j}).")) (|dot| ((|#2| $ $) "\\spad{dot(x,y)} computes the inner product of the two vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length.")) (* (($ $ |#2|) "\\spad{y * r} multiplies each component of the vector \\spad{y} by the element \\spad{r}.") (($ |#2| $) "\\spad{r * y} multiplies the element \\spad{r} times each component of the vector \\spad{y}.") (($ (|Integer|) $) "\\spad{n * y} multiplies each component of the vector \\spad{y} by the integer \\spad{n}.")) (- (($ $ $) "\\spad{x - y} returns the component-wise difference of the vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length.") (($ $) "\\spad{-x} negates all components of the vector \\spad{x}.")) (|zero| (($ (|NonNegativeInteger|)) "\\spad{zero(n)} creates a zero vector of length \\spad{n}.")) (+ (($ $ $) "\\spad{x + y} returns the component-wise sum of the vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-915))) (|HasCategory| |#2| (QUOTE (-961))) (|HasCategory| |#2| (QUOTE (-663))) (|HasCategory| |#2| (QUOTE (-21))) (|HasCategory| |#2| (QUOTE (-23))) (|HasCategory| |#2| (QUOTE (-25)))) 
(-1177 R) 
((|constructor| (NIL "\\spadtype{VectorCategory} represents the type of vector like objects,{} \\spadignore{i.e.} finite sequences indexed by some finite segment of the integers. The operations available on vectors depend on the structure of the underlying components. Many operations from the component domain are defined for vectors componentwise. It can by assumed that extraction or updating components can be done in constant time.")) (|magnitude| ((|#1| $) "\\spad{magnitude(v)} computes the sqrt(dot(\\spad{v},{}\\spad{v})),{} \\spadignore{i.e.} the length")) (|length| ((|#1| $) "\\spad{length(v)} computes the sqrt(dot(\\spad{v},{}\\spad{v})),{} \\spadignore{i.e.} the magnitude")) (|cross| (($ $ $) "vectorProduct(\\spad{u},{}\\spad{v}) constructs the cross product of \\spad{u} and \\spad{v}. Error: if \\spad{u} and \\spad{v} are not of length 3.")) (|outerProduct| (((|Matrix| |#1|) $ $) "\\spad{outerProduct(u,v)} constructs the matrix whose (\\spad{i},{}\\spad{j})\\spad{'}th element is \\spad{u}(\\spad{i})*v(\\spad{j}).")) (|dot| ((|#1| $ $) "\\spad{dot(x,y)} computes the inner product of the two vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length.")) (* (($ $ |#1|) "\\spad{y * r} multiplies each component of the vector \\spad{y} by the element \\spad{r}.") (($ |#1| $) "\\spad{r * y} multiplies the element \\spad{r} times each component of the vector \\spad{y}.") (($ (|Integer|) $) "\\spad{n * y} multiplies each component of the vector \\spad{y} by the integer \\spad{n}.")) (- (($ $ $) "\\spad{x - y} returns the component-wise difference of the vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length.") (($ $) "\\spad{-x} negates all components of the vector \\spad{x}.")) (|zero| (($ (|NonNegativeInteger|)) "\\spad{zero(n)} creates a zero vector of length \\spad{n}.")) (+ (($ $ $) "\\spad{x + y} returns the component-wise sum of the vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length."))) 
((-3995 . T) (-3994 . T)) 
NIL 
(-1178 R) 
((|constructor| (NIL "This type represents vector like objects with varying lengths and indexed by a finite segment of integers starting at 1.")) (|vector| (($ (|List| |#1|)) "\\spad{vector(l)} converts the list \\spad{l} to a vector."))) 
((-3995 . T) (-3994 . T)) 
((OR (-12 (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|)))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) (|HasCategory| |#1| (QUOTE (-552 (-772)))) (|HasCategory| |#1| (QUOTE (-553 (-473)))) (OR (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| |#1| (QUOTE (-756))) (OR (|HasCategory| |#1| (QUOTE (-72))) (|HasCategory| |#1| (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013)))) (|HasCategory| (-484) (QUOTE (-756))) (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-25))) (|HasCategory| |#1| (QUOTE (-23))) (|HasCategory| |#1| (QUOTE (-21))) (|HasCategory| |#1| (QUOTE (-663))) (|HasCategory| |#1| (QUOTE (-961))) (-12 (|HasCategory| |#1| (QUOTE (-915))) (|HasCategory| |#1| (QUOTE (-961)))) (|HasCategory| |#1| (QUOTE (-72))) (-12 (|HasCategory| |#1| (QUOTE (-1013))) (|HasCategory| |#1| (|%list| (QUOTE -260) (|devaluate| |#1|))))) 
(-1179 A B) 
((|constructor| (NIL "\\indented{2}{This package provides operations which all take as arguments} vectors of elements of some type \\spad{A} and functions from \\spad{A} to another of type \\spad{B}. The operations all iterate over their vector argument and either return a value of type \\spad{B} or a vector over \\spad{B}.")) (|map| (((|Union| (|Vector| |#2|) "failed") (|Mapping| (|Union| |#2| "failed") |#1|) (|Vector| |#1|)) "\\spad{map(f, v)} applies the function \\spad{f} to every element of the vector \\spad{v} producing a new vector containing the values or \\spad{\"failed\"}.") (((|Vector| |#2|) (|Mapping| |#2| |#1|) (|Vector| |#1|)) "\\spad{map(f, v)} applies the function \\spad{f} to every element of the vector \\spad{v} producing a new vector containing the values.")) (|reduce| ((|#2| (|Mapping| |#2| |#1| |#2|) (|Vector| |#1|) |#2|) "\\spad{reduce(func,vec,ident)} combines the elements in \\spad{vec} using the binary function \\spad{func}. Argument \\spad{ident} is returned if \\spad{vec} is empty.")) (|scan| (((|Vector| |#2|) (|Mapping| |#2| |#1| |#2|) (|Vector| |#1|) |#2|) "\\spad{scan(func,vec,ident)} creates a new vector whose elements are the result of applying reduce to the binary function \\spad{func},{} increasing initial subsequences of the vector \\spad{vec},{} and the element \\spad{ident}."))) 
NIL 
NIL 
(-1180) 
((|constructor| (NIL "ViewportPackage provides functions for creating GraphImages and TwoDimensionalViewports from lists of lists of points.")) (|coerce| (((|TwoDimensionalViewport|) (|GraphImage|)) "\\spad{coerce(gi)} converts the indicated \\spadtype{GraphImage},{} \\spad{gi},{} into the \\spadtype{TwoDimensionalViewport} form.")) (|drawCurves| (((|TwoDimensionalViewport|) (|List| (|List| (|Point| (|DoubleFloat|)))) (|List| (|DrawOption|))) "\\spad{drawCurves([[p0],[p1],...,[pn]],[options])} creates a \\spadtype{TwoDimensionalViewport} from the list of lists of points,{} \\spad{p0} throught pn,{} using the options specified in the list \\spad{options}.") (((|TwoDimensionalViewport|) (|List| (|List| (|Point| (|DoubleFloat|)))) (|Palette|) (|Palette|) (|PositiveInteger|) (|List| (|DrawOption|))) "\\spad{drawCurves([[p0],[p1],...,[pn]],ptColor,lineColor,ptSize,[options])} creates a \\spadtype{TwoDimensionalViewport} from the list of lists of points,{} \\spad{p0} throught pn,{} using the options specified in the list \\spad{options}. The point color is specified by \\spad{ptColor},{} the line color is specified by \\spad{lineColor},{} and the point size is specified by \\spad{ptSize}.")) (|graphCurves| (((|GraphImage|) (|List| (|List| (|Point| (|DoubleFloat|)))) (|List| (|DrawOption|))) "\\spad{graphCurves([[p0],[p1],...,[pn]],[options])} creates a \\spadtype{GraphImage} from the list of lists of points,{} \\spad{p0} throught pn,{} using the options specified in the list \\spad{options}.") (((|GraphImage|) (|List| (|List| (|Point| (|DoubleFloat|))))) "\\spad{graphCurves([[p0],[p1],...,[pn]])} creates a \\spadtype{GraphImage} from the list of lists of points indicated by \\spad{p0} through pn.") (((|GraphImage|) (|List| (|List| (|Point| (|DoubleFloat|)))) (|Palette|) (|Palette|) (|PositiveInteger|) (|List| (|DrawOption|))) "\\spad{graphCurves([[p0],[p1],...,[pn]],ptColor,lineColor,ptSize,[options])} creates a \\spadtype{GraphImage} from the list of lists of points,{} \\spad{p0} throught pn,{} using the options specified in the list \\spad{options}. The graph point color is specified by \\spad{ptColor},{} the graph line color is specified by \\spad{lineColor},{} and the size of the points is specified by \\spad{ptSize}."))) 
NIL 
NIL 
(-1181) 
((|constructor| (NIL "TwoDimensionalViewport creates viewports to display graphs.")) (|coerce| (((|OutputForm|) $) "\\spad{coerce(v)} returns the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport} as output of the domain \\spadtype{OutputForm}.")) (|key| (((|Integer|) $) "\\spad{key(v)} returns the process ID number of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport}.")) (|reset| (((|Void|) $) "\\spad{reset(v)} sets the current state of the graph characteristics of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} back to their initial settings.")) (|write| (((|String|) $ (|String|) (|List| (|String|))) "\\spad{write(v,s,lf)} takes the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} and creates a directory indicated by \\spad{s},{} which contains the graph data files for \\spad{v} and the optional file types indicated by the list \\spad{lf}.") (((|String|) $ (|String|) (|String|)) "\\spad{write(v,s,f)} takes the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} and creates a directory indicated by \\spad{s},{} which contains the graph data files for \\spad{v} and an optional file type \\spad{f}.") (((|String|) $ (|String|)) "\\spad{write(v,s)} takes the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} and creates a directory indicated by \\spad{s},{} which contains the graph data files for \\spad{v}.")) (|resize| (((|Void|) $ (|PositiveInteger|) (|PositiveInteger|)) "\\spad{resize(v,w,h)} displays the two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} with a width of \\spad{w} and a height of \\spad{h},{} keeping the upper left-hand corner position unchanged.")) (|update| (((|Void|) $ (|GraphImage|) (|PositiveInteger|)) "\\spad{update(v,gr,n)} drops the graph \\spad{gr} in slot \\spad{n} of viewport \\spad{v}. The graph \\spad{gr} must have been transmitted already and acquired an integer key.")) (|move| (((|Void|) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{move(v,x,y)} displays the two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} with the upper left-hand corner of the viewport window at the screen coordinate position \\spad{x},{} \\spad{y}.")) (|show| (((|Void|) $ (|PositiveInteger|) (|String|)) "\\spad{show(v,n,s)} displays the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the graph if \\spad{s} is \"off\".")) (|translate| (((|Void|) $ (|PositiveInteger|) (|Float|) (|Float|)) "\\spad{translate(v,n,dx,dy)} displays the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} translated by \\spad{dx} in the \\spad{x}-coordinate direction from the center of the viewport,{} and by \\spad{dy} in the \\spad{y}-coordinate direction from the center. Setting \\spad{dx} and \\spad{dy} to \\spad{0} places the center of the graph at the center of the viewport.")) (|scale| (((|Void|) $ (|PositiveInteger|) (|Float|) (|Float|)) "\\spad{scale(v,n,sx,sy)} displays the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} scaled by the factor \\spad{sx} in the \\spad{x}-coordinate direction and by the factor \\spad{sy} in the \\spad{y}-coordinate direction.")) (|dimensions| (((|Void|) $ (|NonNegativeInteger|) (|NonNegativeInteger|) (|PositiveInteger|) (|PositiveInteger|)) "\\spad{dimensions(v,x,y,width,height)} sets the position of the upper left-hand corner of the two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} to the window coordinate \\spad{x},{} \\spad{y},{} and sets the dimensions of the window to that of \\spad{width},{} \\spad{height}. The new dimensions are not displayed until the function \\spadfun{makeViewport2D} is executed again for \\spad{v}.")) (|close| (((|Void|) $) "\\spad{close(v)} closes the viewport window of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} and terminates the corresponding process ID.")) (|controlPanel| (((|Void|) $ (|String|)) "\\spad{controlPanel(v,s)} displays the control panel of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or hides the control panel if \\spad{s} is \"off\".")) (|connect| (((|Void|) $ (|PositiveInteger|) (|String|)) "\\spad{connect(v,n,s)} displays the lines connecting the graph points in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the lines if \\spad{s} is \"off\".")) (|region| (((|Void|) $ (|PositiveInteger|) (|String|)) "\\spad{region(v,n,s)} displays the bounding box of the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the bounding box if \\spad{s} is \"off\".")) (|points| (((|Void|) $ (|PositiveInteger|) (|String|)) "\\spad{points(v,n,s)} displays the points of the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the points if \\spad{s} is \"off\".")) (|units| (((|Void|) $ (|PositiveInteger|) (|Palette|)) "\\spad{units(v,n,c)} displays the units of the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} with the units color set to the given palette color \\spad{c}.") (((|Void|) $ (|PositiveInteger|) (|String|)) "\\spad{units(v,n,s)} displays the units of the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the units if \\spad{s} is \"off\".")) (|axes| (((|Void|) $ (|PositiveInteger|) (|Palette|)) "\\spad{axes(v,n,c)} displays the axes of the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} with the axes color set to the given palette color \\spad{c}.") (((|Void|) $ (|PositiveInteger|) (|String|)) "\\spad{axes(v,n,s)} displays the axes of the graph in field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the axes if \\spad{s} is \"off\".")) (|getGraph| (((|GraphImage|) $ (|PositiveInteger|)) "\\spad{getGraph(v,n)} returns the graph which is of the domain \\spadtype{GraphImage} which is located in graph field \\spad{n} of the given two-dimensional viewport,{} \\spad{v},{} which is of the domain \\spadtype{TwoDimensionalViewport}.")) (|putGraph| (((|Void|) $ (|GraphImage|) (|PositiveInteger|)) "\\spad{putGraph(v,gi,n)} sets the graph field indicated by \\spad{n},{} of the indicated two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport},{} to be the graph,{} \\spad{gi} of domain \\spadtype{GraphImage}. The contents of viewport,{} \\spad{v},{} will contain \\spad{gi} when the function \\spadfun{makeViewport2D} is called to create the an updated viewport \\spad{v}.")) (|title| (((|Void|) $ (|String|)) "\\spad{title(v,s)} changes the title which is shown in the two-dimensional viewport window,{} \\spad{v} of domain \\spadtype{TwoDimensionalViewport}.")) (|graphs| (((|Vector| (|Union| (|GraphImage|) "undefined")) $) "\\spad{graphs(v)} returns a vector,{} or list,{} which is a union of all the graphs,{} of the domain \\spadtype{GraphImage},{} which are allocated for the two-dimensional viewport,{} \\spad{v},{} of domain \\spadtype{TwoDimensionalViewport}. Those graphs which have no data are labeled \"undefined\",{} otherwise their contents are shown.")) (|graphStates| (((|Vector| (|Record| (|:| |scaleX| (|DoubleFloat|)) (|:| |scaleY| (|DoubleFloat|)) (|:| |deltaX| (|DoubleFloat|)) (|:| |deltaY| (|DoubleFloat|)) (|:| |points| (|Integer|)) (|:| |connect| (|Integer|)) (|:| |spline| (|Integer|)) (|:| |axes| (|Integer|)) (|:| |axesColor| (|Palette|)) (|:| |units| (|Integer|)) (|:| |unitsColor| (|Palette|)) (|:| |showing| (|Integer|)))) $) "\\spad{graphStates(v)} returns and shows a listing of a record containing the current state of the characteristics of each of the ten graph records in the given two-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{TwoDimensionalViewport}.")) (|graphState| (((|Void|) $ (|PositiveInteger|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|) (|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Palette|) (|Integer|) (|Palette|) (|Integer|)) "\\spad{graphState(v,num,sX,sY,dX,dY,pts,lns,box,axes,axesC,un,unC,cP)} sets the state of the characteristics for the graph indicated by \\spad{num} in the given two-dimensional viewport \\spad{v},{} of domain \\spadtype{TwoDimensionalViewport},{} to the values given as parameters. The scaling of the graph in the \\spad{x} and \\spad{y} component directions is set to be \\spad{sX} and \\spad{sY}; the window translation in the \\spad{x} and \\spad{y} component directions is set to be \\spad{dX} and \\spad{dY}; The graph points,{} lines,{} bounding \\spad{box},{} \\spad{axes},{} or units will be shown in the viewport if their given parameters \\spad{pts},{} \\spad{lns},{} \\spad{box},{} \\spad{axes} or \\spad{un} are set to be \\spad{1},{} but will not be shown if they are set to \\spad{0}. The color of the \\spad{axes} and the color of the units are indicated by the palette colors \\spad{axesC} and \\spad{unC} respectively. To display the control panel when the viewport window is displayed,{} set \\spad{cP} to \\spad{1},{} otherwise set it to \\spad{0}.")) (|options| (($ $ (|List| (|DrawOption|))) "\\spad{options(v,lopt)} takes the given two-dimensional viewport,{} \\spad{v},{} of the domain \\spadtype{TwoDimensionalViewport} and returns \\spad{v} with it's draw options modified to be those which are indicated in the given list,{} \\spad{lopt} of domain \\spadtype{DrawOption}.") (((|List| (|DrawOption|)) $) "\\spad{options(v)} takes the given two-dimensional viewport,{} \\spad{v},{} of the domain \\spadtype{TwoDimensionalViewport} and returns a list containing the draw options from the domain \\spadtype{DrawOption} for \\spad{v}.")) (|makeViewport2D| (($ (|GraphImage|) (|List| (|DrawOption|))) "\\spad{makeViewport2D(gi,lopt)} creates and displays a viewport window of the domain \\spadtype{TwoDimensionalViewport} whose graph field is assigned to be the given graph,{} \\spad{gi},{} of domain \\spadtype{GraphImage},{} and whose options field is set to be the list of options,{} \\spad{lopt} of domain \\spadtype{DrawOption}.") (($ $) "\\spad{makeViewport2D(v)} takes the given two-dimensional viewport,{} \\spad{v},{} of the domain \\spadtype{TwoDimensionalViewport} and displays a viewport window on the screen which contains the contents of \\spad{v}.")) (|viewport2D| (($) "\\spad{viewport2D()} returns an undefined two-dimensional viewport of the domain \\spadtype{TwoDimensionalViewport} whose contents are empty.")) (|getPickedPoints| (((|List| (|Point| (|DoubleFloat|))) $) "\\spad{getPickedPoints(x)} returns a list of small floats for the points the user interactively picked on the viewport for full integration into the system,{} some design issues need to be addressed: \\spadignore{e.g.} how to go through the GraphImage interface,{} how to default to graphs,{} etc."))) 
NIL 
NIL 
(-1182) 
((|key| (((|Integer|) $) "\\spad{key(v)} returns the process ID number of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport}.")) (|close| (((|Void|) $) "\\spad{close(v)} closes the viewport window of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} and terminates the corresponding process ID.")) (|write| (((|String|) $ (|String|) (|List| (|String|))) "\\spad{write(v,s,lf)} takes the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} and creates a directory indicated by \\spad{s},{} which contains the graph data file for \\spad{v} and the optional file types indicated by the list \\spad{lf}.") (((|String|) $ (|String|) (|String|)) "\\spad{write(v,s,f)} takes the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} and creates a directory indicated by \\spad{s},{} which contains the graph data file for \\spad{v} and an optional file type \\spad{f}.") (((|String|) $ (|String|)) "\\spad{write(v,s)} takes the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} and creates a directory indicated by \\spad{s},{} which contains the graph data file for \\spad{v}.")) (|colorDef| (((|Void|) $ (|Color|) (|Color|)) "\\spad{colorDef(v,c1,c2)} sets the range of colors along the colormap so that the lower end of the colormap is defined by \\spad{c1} and the top end of the colormap is defined by \\spad{c2},{} for the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport}.")) (|reset| (((|Void|) $) "\\spad{reset(v)} sets the current state of the graph characteristics of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} back to their initial settings.")) (|intensity| (((|Void|) $ (|Float|)) "\\spad{intensity(v,i)} sets the intensity of the light source to \\spad{i},{} for the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport}.")) (|lighting| (((|Void|) $ (|Float|) (|Float|) (|Float|)) "\\spad{lighting(v,x,y,z)} sets the position of the light source to the coordinates \\spad{x},{} \\spad{y},{} and \\spad{z} and displays the graph for the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport}.")) (|clipSurface| (((|Void|) $ (|String|)) "\\spad{clipSurface(v,s)} displays the graph with the specified clipping region removed if \\spad{s} is \"on\",{} or displays the graph without clipping implemented if \\spad{s} is \"off\",{} for the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport}.")) (|showClipRegion| (((|Void|) $ (|String|)) "\\spad{showClipRegion(v,s)} displays the clipping region of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the region if \\spad{s} is \"off\".")) (|showRegion| (((|Void|) $ (|String|)) "\\spad{showRegion(v,s)} displays the bounding box of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the box if \\spad{s} is \"off\".")) (|hitherPlane| (((|Void|) $ (|Float|)) "\\spad{hitherPlane(v,h)} sets the hither clipping plane of the graph to \\spad{h},{} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}.")) (|eyeDistance| (((|Void|) $ (|Float|)) "\\spad{eyeDistance(v,d)} sets the distance of the observer from the center of the graph to \\spad{d},{} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}.")) (|perspective| (((|Void|) $ (|String|)) "\\spad{perspective(v,s)} displays the graph in perspective if \\spad{s} is \"on\",{} or does not display perspective if \\spad{s} is \"off\" for the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport}.")) (|translate| (((|Void|) $ (|Float|) (|Float|)) "\\spad{translate(v,dx,dy)} sets the horizontal viewport offset to \\spad{dx} and the vertical viewport offset to \\spad{dy},{} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}.")) (|zoom| (((|Void|) $ (|Float|) (|Float|) (|Float|)) "\\spad{zoom(v,sx,sy,sz)} sets the graph scaling factors for the \\spad{x}-coordinate axis to \\spad{sx},{} the \\spad{y}-coordinate axis to \\spad{sy} and the \\spad{z}-coordinate axis to \\spad{sz} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}.") (((|Void|) $ (|Float|)) "\\spad{zoom(v,s)} sets the graph scaling factor to \\spad{s},{} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}.")) (|rotate| (((|Void|) $ (|Integer|) (|Integer|)) "\\spad{rotate(v,th,phi)} rotates the graph to the longitudinal view angle \\spad{th} degrees and the latitudinal view angle \\spad{phi} degrees for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}. The new rotation position is not displayed until the function \\spadfun{makeViewport3D} is executed again for \\spad{v}.") (((|Void|) $ (|Float|) (|Float|)) "\\spad{rotate(v,th,phi)} rotates the graph to the longitudinal view angle \\spad{th} radians and the latitudinal view angle \\spad{phi} radians for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}.")) (|drawStyle| (((|Void|) $ (|String|)) "\\spad{drawStyle(v,s)} displays the surface for the given three-dimensional viewport \\spad{v} which is of domain \\spadtype{ThreeDimensionalViewport} in the style of drawing indicated by \\spad{s}. If \\spad{s} is not a valid drawing style the style is wireframe by default. Possible styles are \\spad{\"shade\"},{} \\spad{\"solid\"} or \\spad{\"opaque\"},{} \\spad{\"smooth\"},{} and \\spad{\"wireMesh\"}.")) (|outlineRender| (((|Void|) $ (|String|)) "\\spad{outlineRender(v,s)} displays the polygon outline showing either triangularized surface or a quadrilateral surface outline depending on the whether the \\spadfun{diagonals} function has been set,{} for the given three-dimensional viewport \\spad{v} which is of domain \\spadtype{ThreeDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the polygon outline if \\spad{s} is \"off\".")) (|diagonals| (((|Void|) $ (|String|)) "\\spad{diagonals(v,s)} displays the diagonals of the polygon outline showing a triangularized surface instead of a quadrilateral surface outline,{} for the given three-dimensional viewport \\spad{v} which is of domain \\spadtype{ThreeDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the diagonals if \\spad{s} is \"off\".")) (|axes| (((|Void|) $ (|String|)) "\\spad{axes(v,s)} displays the axes of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} if \\spad{s} is \"on\",{} or does not display the axes if \\spad{s} is \"off\".")) (|controlPanel| (((|Void|) $ (|String|)) "\\spad{controlPanel(v,s)} displays the control panel of the given three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} if \\spad{s} is \"on\",{} or hides the control panel if \\spad{s} is \"off\".")) (|viewpoint| (((|Void|) $ (|Float|) (|Float|) (|Float|)) "\\spad{viewpoint(v,rotx,roty,rotz)} sets the rotation about the \\spad{x}-axis to be \\spad{rotx} radians,{} sets the rotation about the \\spad{y}-axis to be \\spad{roty} radians,{} and sets the rotation about the \\spad{z}-axis to be \\spad{rotz} radians,{} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport} and displays \\spad{v} with the new view position.") (((|Void|) $ (|Float|) (|Float|)) "\\spad{viewpoint(v,th,phi)} sets the longitudinal view angle to \\spad{th} radians and the latitudinal view angle to \\spad{phi} radians for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}. The new viewpoint position is not displayed until the function \\spadfun{makeViewport3D} is executed again for \\spad{v}.") (((|Void|) $ (|Integer|) (|Integer|) (|Float|) (|Float|) (|Float|)) "\\spad{viewpoint(v,th,phi,s,dx,dy)} sets the longitudinal view angle to \\spad{th} degrees,{} the latitudinal view angle to \\spad{phi} degrees,{} the scale factor to \\spad{s},{} the horizontal viewport offset to \\spad{dx},{} and the vertical viewport offset to \\spad{dy} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}. The new viewpoint position is not displayed until the function \\spadfun{makeViewport3D} is executed again for \\spad{v}.") (((|Void|) $ (|Record| (|:| |theta| (|DoubleFloat|)) (|:| |phi| (|DoubleFloat|)) (|:| |scale| (|DoubleFloat|)) (|:| |scaleX| (|DoubleFloat|)) (|:| |scaleY| (|DoubleFloat|)) (|:| |scaleZ| (|DoubleFloat|)) (|:| |deltaX| (|DoubleFloat|)) (|:| |deltaY| (|DoubleFloat|)))) "\\spad{viewpoint(v,viewpt)} sets the viewpoint for the viewport. The viewport record consists of the latitudal and longitudal angles,{} the zoom factor,{} the \\spad{X},{} \\spad{Y},{} and \\spad{Z} scales,{} and the \\spad{X} and \\spad{Y} displacements.") (((|Record| (|:| |theta| (|DoubleFloat|)) (|:| |phi| (|DoubleFloat|)) (|:| |scale| (|DoubleFloat|)) (|:| |scaleX| (|DoubleFloat|)) (|:| |scaleY| (|DoubleFloat|)) (|:| |scaleZ| (|DoubleFloat|)) (|:| |deltaX| (|DoubleFloat|)) (|:| |deltaY| (|DoubleFloat|))) $) "\\spad{viewpoint(v)} returns the current viewpoint setting of the given viewport,{} \\spad{v}. This function is useful in the situation where the user has created a viewport,{} proceeded to interact with it via the control panel and desires to save the values of the viewpoint as the default settings for another viewport to be created using the system.") (((|Void|) $ (|Float|) (|Float|) (|Float|) (|Float|) (|Float|)) "\\spad{viewpoint(v,th,phi,s,dx,dy)} sets the longitudinal view angle to \\spad{th} radians,{} the latitudinal view angle to \\spad{phi} radians,{} the scale factor to \\spad{s},{} the horizontal viewport offset to \\spad{dx},{} and the vertical viewport offset to \\spad{dy} for the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport}. The new viewpoint position is not displayed until the function \\spadfun{makeViewport3D} is executed again for \\spad{v}.")) (|dimensions| (((|Void|) $ (|NonNegativeInteger|) (|NonNegativeInteger|) (|PositiveInteger|) (|PositiveInteger|)) "\\spad{dimensions(v,x,y,width,height)} sets the position of the upper left-hand corner of the three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} to the window coordinate \\spad{x},{} \\spad{y},{} and sets the dimensions of the window to that of \\spad{width},{} \\spad{height}. The new dimensions are not displayed until the function \\spadfun{makeViewport3D} is executed again for \\spad{v}.")) (|title| (((|Void|) $ (|String|)) "\\spad{title(v,s)} changes the title which is shown in the three-dimensional viewport window,{} \\spad{v} of domain \\spadtype{ThreeDimensionalViewport}.")) (|resize| (((|Void|) $ (|PositiveInteger|) (|PositiveInteger|)) "\\spad{resize(v,w,h)} displays the three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} with a width of \\spad{w} and a height of \\spad{h},{} keeping the upper left-hand corner position unchanged.")) (|move| (((|Void|) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) "\\spad{move(v,x,y)} displays the three-dimensional viewport,{} \\spad{v},{} which is of domain \\spadtype{ThreeDimensionalViewport},{} with the upper left-hand corner of the viewport window at the screen coordinate position \\spad{x},{} \\spad{y}.")) (|options| (($ $ (|List| (|DrawOption|))) "\\spad{options(v,lopt)} takes the viewport,{} \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport} and sets the draw options being used by \\spad{v} to those indicated in the list,{} \\spad{lopt},{} which is a list of options from the domain \\spad{DrawOption}.") (((|List| (|DrawOption|)) $) "\\spad{options(v)} takes the viewport,{} \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport} and returns a list of all the draw options from the domain \\spad{DrawOption} which are being used by \\spad{v}.")) (|modifyPointData| (((|Void|) $ (|NonNegativeInteger|) (|Point| (|DoubleFloat|))) "\\spad{modifyPointData(v,ind,pt)} takes the viewport,{} \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport},{} and places the data point,{} \\spad{pt} into the list of points database of \\spad{v} at the index location given by \\spad{ind}.")) (|subspace| (($ $ (|ThreeSpace| (|DoubleFloat|))) "\\spad{subspace(v,sp)} places the contents of the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport},{} in the subspace \\spad{sp},{} which is of the domain \\spad{ThreeSpace}.") (((|ThreeSpace| (|DoubleFloat|)) $) "\\spad{subspace(v)} returns the contents of the viewport \\spad{v},{} which is of the domain \\spadtype{ThreeDimensionalViewport},{} as a subspace of the domain \\spad{ThreeSpace}.")) (|makeViewport3D| (($ (|ThreeSpace| (|DoubleFloat|)) (|List| (|DrawOption|))) "\\spad{makeViewport3D(sp,lopt)} takes the given space,{} \\spad{sp} which is of the domain \\spadtype{ThreeSpace} and displays a viewport window on the screen which contains the contents of \\spad{sp},{} and whose draw options are indicated by the list \\spad{lopt},{} which is a list of options from the domain \\spad{DrawOption}.") (($ (|ThreeSpace| (|DoubleFloat|)) (|String|)) "\\spad{makeViewport3D(sp,s)} takes the given space,{} \\spad{sp} which is of the domain \\spadtype{ThreeSpace} and displays a viewport window on the screen which contains the contents of \\spad{sp},{} and whose title is given by \\spad{s}.") (($ $) "\\spad{makeViewport3D(v)} takes the given three-dimensional viewport,{} \\spad{v},{} of the domain \\spadtype{ThreeDimensionalViewport} and displays a viewport window on the screen which contains the contents of \\spad{v}.")) (|viewport3D| (($) "\\spad{viewport3D()} returns an undefined three-dimensional viewport of the domain \\spadtype{ThreeDimensionalViewport} whose contents are empty.")) (|viewDeltaYDefault| (((|Float|) (|Float|)) "\\spad{viewDeltaYDefault(dy)} sets the current default vertical offset from the center of the viewport window to be \\spad{dy} and returns \\spad{dy}.") (((|Float|)) "\\spad{viewDeltaYDefault()} returns the current default vertical offset from the center of the viewport window.")) (|viewDeltaXDefault| (((|Float|) (|Float|)) "\\spad{viewDeltaXDefault(dx)} sets the current default horizontal offset from the center of the viewport window to be \\spad{dx} and returns \\spad{dx}.") (((|Float|)) "\\spad{viewDeltaXDefault()} returns the current default horizontal offset from the center of the viewport window.")) (|viewZoomDefault| (((|Float|) (|Float|)) "\\spad{viewZoomDefault(s)} sets the current default graph scaling value to \\spad{s} and returns \\spad{s}.") (((|Float|)) "\\spad{viewZoomDefault()} returns the current default graph scaling value.")) (|viewPhiDefault| (((|Float|) (|Float|)) "\\spad{viewPhiDefault(p)} sets the current default latitudinal view angle in radians to the value \\spad{p} and returns \\spad{p}.") (((|Float|)) "\\spad{viewPhiDefault()} returns the current default latitudinal view angle in radians.")) (|viewThetaDefault| (((|Float|) (|Float|)) "\\spad{viewThetaDefault(t)} sets the current default longitudinal view angle in radians to the value \\spad{t} and returns \\spad{t}.") (((|Float|)) "\\spad{viewThetaDefault()} returns the current default longitudinal view angle in radians."))) 
NIL 
NIL 
(-1183) 
((|constructor| (NIL "ViewportDefaultsPackage describes default and user definable values for graphics")) (|tubeRadiusDefault| (((|DoubleFloat|)) "\\spad{tubeRadiusDefault()} returns the radius used for a 3D tube plot.") (((|DoubleFloat|) (|Float|)) "\\spad{tubeRadiusDefault(r)} sets the default radius for a 3D tube plot to \\spad{r}.")) (|tubePointsDefault| (((|PositiveInteger|)) "\\spad{tubePointsDefault()} returns the number of points to be used when creating the circle to be used in creating a 3D tube plot.") (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{tubePointsDefault(i)} sets the number of points to use when creating the circle to be used in creating a 3D tube plot to \\spad{i}.")) (|var2StepsDefault| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{var2StepsDefault(i)} sets the number of steps to take when creating a 3D mesh in the direction of the first defined free variable to \\spad{i} (a free variable is considered defined when its range is specified (\\spadignore{e.g.} \\spad{x=0}..10)).") (((|PositiveInteger|)) "\\spad{var2StepsDefault()} is the current setting for the number of steps to take when creating a 3D mesh in the direction of the first defined free variable (a free variable is considered defined when its range is specified (\\spadignore{e.g.} \\spad{x=0}..10)).")) (|var1StepsDefault| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{var1StepsDefault(i)} sets the number of steps to take when creating a 3D mesh in the direction of the first defined free variable to \\spad{i} (a free variable is considered defined when its range is specified (\\spadignore{e.g.} \\spad{x=0}..10)).") (((|PositiveInteger|)) "\\spad{var1StepsDefault()} is the current setting for the number of steps to take when creating a 3D mesh in the direction of the first defined free variable (a free variable is considered defined when its range is specified (\\spadignore{e.g.} \\spad{x=0}..10)).")) (|viewWriteAvailable| (((|List| (|String|))) "\\spad{viewWriteAvailable()} returns a list of available methods for writing,{} such as BITMAP,{} POSTSCRIPT,{} etc.")) (|viewWriteDefault| (((|List| (|String|)) (|List| (|String|))) "\\spad{viewWriteDefault(l)} sets the default list of things to write in a viewport data file to the strings in \\spad{l}; a viewAlone file is always genereated.") (((|List| (|String|))) "\\spad{viewWriteDefault()} returns the list of things to write in a viewport data file; a viewAlone file is always generated.")) (|viewDefaults| (((|Void|)) "\\spad{viewDefaults()} resets all the default graphics settings.")) (|viewSizeDefault| (((|List| (|PositiveInteger|)) (|List| (|PositiveInteger|))) "\\spad{viewSizeDefault([w,h])} sets the default viewport width to \\spad{w} and height to \\spad{h}.") (((|List| (|PositiveInteger|))) "\\spad{viewSizeDefault()} returns the default viewport width and height.")) (|viewPosDefault| (((|List| (|NonNegativeInteger|)) (|List| (|NonNegativeInteger|))) "\\spad{viewPosDefault([x,y])} sets the default \\spad{X} and \\spad{Y} position of a viewport window unless overriden explicityly,{} newly created viewports will have th \\spad{X} and \\spad{Y} coordinates \\spad{x},{} \\spad{y}.") (((|List| (|NonNegativeInteger|))) "\\spad{viewPosDefault()} returns the default \\spad{X} and \\spad{Y} position of a viewport window unless overriden explicityly,{} newly created viewports will have this \\spad{X} and \\spad{Y} coordinate.")) (|pointSizeDefault| (((|PositiveInteger|) (|PositiveInteger|)) "\\spad{pointSizeDefault(i)} sets the default size of the points in a 2D viewport to \\spad{i}.") (((|PositiveInteger|)) "\\spad{pointSizeDefault()} returns the default size of the points in a 2D viewport.")) (|unitsColorDefault| (((|Palette|) (|Palette|)) "\\spad{unitsColorDefault(p)} sets the default color of the unit ticks in a 2D viewport to the palette \\spad{p}.") (((|Palette|)) "\\spad{unitsColorDefault()} returns the default color of the unit ticks in a 2D viewport.")) (|axesColorDefault| (((|Palette|) (|Palette|)) "\\spad{axesColorDefault(p)} sets the default color of the axes in a 2D viewport to the palette \\spad{p}.") (((|Palette|)) "\\spad{axesColorDefault()} returns the default color of the axes in a 2D viewport.")) (|lineColorDefault| (((|Palette|) (|Palette|)) "\\spad{lineColorDefault(p)} sets the default color of lines connecting points in a 2D viewport to the palette \\spad{p}.") (((|Palette|)) "\\spad{lineColorDefault()} returns the default color of lines connecting points in a 2D viewport.")) (|pointColorDefault| (((|Palette|) (|Palette|)) "\\spad{pointColorDefault(p)} sets the default color of points in a 2D viewport to the palette \\spad{p}.") (((|Palette|)) "\\spad{pointColorDefault()} returns the default color of points in a 2D viewport."))) 
NIL 
NIL 
(-1184) 
((|constructor| (NIL "This type is used when no value is needed,{} \\spadignore{e.g.} in the \\spad{then} part of a one armed \\spad{if}. All values can be coerced to type Void. Once a value has been coerced to Void,{} it cannot be recovered.")) (|void| (($) "\\spad{void()} produces a void object."))) 
NIL 
NIL 
(-1185 A S) 
((|constructor| (NIL "Vector Spaces (not necessarily finite dimensional) over a field.")) (|dimension| (((|CardinalNumber|)) "\\spad{dimension()} returns the dimensionality of the vector space.")) (/ (($ $ |#2|) "\\spad{x/y} divides the vector \\spad{x} by the scalar \\spad{y}."))) 
NIL 
NIL 
(-1186 S) 
((|constructor| (NIL "Vector Spaces (not necessarily finite dimensional) over a field.")) (|dimension| (((|CardinalNumber|)) "\\spad{dimension()} returns the dimensionality of the vector space.")) (/ (($ $ |#1|) "\\spad{x/y} divides the vector \\spad{x} by the scalar \\spad{y}."))) 
((-3989 . T) (-3988 . T)) 
NIL 
(-1187 R) 
((|constructor| (NIL "This package implements the Weierstrass preparation theorem \\spad{f} or multivariate power series. weierstrass(\\spad{v},{}\\spad{p}) where \\spad{v} is a variable,{} and \\spad{p} is a TaylorSeries(\\spad{R}) in which the terms of lowest degree \\spad{s} must include c*v**s where \\spad{c} is a constant,{}\\spad{s>0},{} is a list of TaylorSeries coefficients A[\\spad{i}] of the equivalent polynomial A = A[0] + A[1]*v + A[2]\\spad{*v**2} + ... + A[\\spad{s}-1]*v**(\\spad{s}-1) + v**s such that p=A*B ,{} \\spad{B} being a TaylorSeries of minimum degree 0")) (|qqq| (((|Mapping| (|Stream| (|TaylorSeries| |#1|)) (|Stream| (|TaylorSeries| |#1|))) (|NonNegativeInteger|) (|TaylorSeries| |#1|) (|Stream| (|TaylorSeries| |#1|))) "\\spad{qqq(n,s,st)} is used internally.")) (|weierstrass| (((|List| (|TaylorSeries| |#1|)) (|Symbol|) (|TaylorSeries| |#1|)) "\\spad{weierstrass(v,ts)} where \\spad{v} is a variable and \\spad{ts} is \\indented{1}{a TaylorSeries,{} impements the Weierstrass Preparation} \\indented{1}{Theorem. The result is a list of TaylorSeries that} \\indented{1}{are the coefficients of the equivalent series.}")) (|clikeUniv| (((|Mapping| (|SparseUnivariatePolynomial| (|Polynomial| |#1|)) (|Polynomial| |#1|)) (|Symbol|)) "\\spad{clikeUniv(v)} is used internally.")) (|sts2stst| (((|Stream| (|Stream| (|Polynomial| |#1|))) (|Symbol|) (|Stream| (|Polynomial| |#1|))) "\\spad{sts2stst(v,s)} is used internally.")) (|cfirst| (((|Mapping| (|Stream| (|Polynomial| |#1|)) (|Stream| (|Polynomial| |#1|))) (|NonNegativeInteger|)) "\\spad{cfirst n} is used internally.")) (|crest| (((|Mapping| (|Stream| (|Polynomial| |#1|)) (|Stream| (|Polynomial| |#1|))) (|NonNegativeInteger|)) "\\spad{crest n} is used internally."))) 
NIL 
NIL 
(-1188 K R UP -3092) 
((|constructor| (NIL "In this package \\spad{K} is a finite field,{} \\spad{R} is a ring of univariate polynomials over \\spad{K},{} and \\spad{F} is a framed algebra over \\spad{R}. The package provides a function to compute the integral closure of \\spad{R} in the quotient field of \\spad{F} as well as a function to compute a \"local integral basis\" at a specific prime.")) (|localIntegralBasis| (((|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|))) |#2|) "\\spad{integralBasis(p)} returns a record \\spad{[basis,basisDen,basisInv]} containing information regarding the local integral closure of \\spad{R} at the prime \\spad{p} in the quotient field of \\spad{F},{} where \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the local integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of \\spad{basis} contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}.")) (|integralBasis| (((|Record| (|:| |basis| (|Matrix| |#2|)) (|:| |basisDen| |#2|) (|:| |basisInv| (|Matrix| |#2|)))) "\\spad{integralBasis()} returns a record \\spad{[basis,basisDen,basisInv]} containing information regarding the integral closure of \\spad{R} in the quotient field of \\spad{F},{} where \\spad{F} is a framed algebra with \\spad{R}-module basis \\spad{w1,w2,...,wn}. If \\spad{basis} is the matrix \\spad{(aij, i = 1..n, j = 1..n)},{} then the \\spad{i}th element of the integral basis is \\spad{vi = (1/basisDen) * sum(aij * wj, j = 1..n)},{} \\spadignore{i.e.} the \\spad{i}th row of \\spad{basis} contains the coordinates of the \\spad{i}th basis vector. Similarly,{} the \\spad{i}th row of the matrix \\spad{basisInv} contains the coordinates of \\spad{wi} with respect to the basis \\spad{v1,...,vn}: if \\spad{basisInv} is the matrix \\spad{(bij, i = 1..n, j = 1..n)},{} then \\spad{wi = sum(bij * vj, j = 1..n)}."))) 
NIL 
NIL 
(-1189) 
((|constructor| (NIL "This domain represents the syntax of a `where' expression.")) (|qualifier| (((|SpadAst|) $) "\\spad{qualifier(e)} returns the qualifier of the expression `e'.")) (|mainExpression| (((|SpadAst|) $) "\\spad{mainExpression(e)} returns the main expression of the `where' expression `e'."))) 
NIL 
NIL 
(-1190) 
((|constructor| (NIL "This domain represents the `while' iterator syntax.")) (|condition| (((|SpadAst|) $) "\\spad{condition(i)} returns the condition of the while iterator `i'."))) 
NIL 
NIL 
(-1191 R |VarSet| E P |vl| |wl| |wtlevel|) 
((|constructor| (NIL "This domain represents truncated weighted polynomials over a general (not necessarily commutative) polynomial type. The variables must be specified,{} as must the weights. The representation is sparse in the sense that only non-zero terms are represented.")) (|changeWeightLevel| (((|Void|) (|NonNegativeInteger|)) "\\spad{changeWeightLevel(n)} changes the weight level to the new value given: NB: previously calculated terms are not affected")) (/ (((|Union| $ "failed") $ $) "\\spad{x/y} division (only works if minimum weight of divisor is zero,{} and if \\spad{R} is a Field)"))) 
((-3989 |has| |#1| (-146)) (-3988 |has| |#1| (-146)) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312)))) 
(-1192 R E V P) 
((|constructor| (NIL "A domain constructor of the category \\axiomType{GeneralTriangularSet}. The only requirement for a list of polynomials to be a member of such a domain is the following: no polynomial is constant and two distinct polynomials have distinct main variables. Such a triangular set may not be auto-reduced or consistent. The \\axiomOpFrom{construct}{WuWenTsunTriangularSet} operation does not check the previous requirement. Triangular sets are stored as sorted lists \\spad{w}.\\spad{r}.\\spad{t}. the main variables of their members. Furthermore,{} this domain exports operations dealing with the characteristic set method of Wu Wen Tsun and some optimizations mainly proposed by Dong Ming Wang.\\newline References : \\indented{1}{[1] \\spad{W}. \\spad{T}. WU \"A Zero Structure Theorem for polynomial equations solving\"} \\indented{6}{MM Research Preprints,{} 1987.} \\indented{1}{[2] \\spad{D}. \\spad{M}. WANG \"An implementation of the characteristic set method in Maple\"} \\indented{6}{Proc. \\spad{DISCO'92}. Bath,{} England.}")) (|characteristicSerie| (((|List| $) (|List| |#4|)) "\\axiom{characteristicSerie(ps)} returns the same as \\axiom{characteristicSerie(ps,{}initiallyReduced?,{}initiallyReduce)}.") (((|List| $) (|List| |#4|) (|Mapping| (|Boolean|) |#4| |#4|) (|Mapping| |#4| |#4| |#4|)) "\\axiom{characteristicSerie(ps,{}redOp?,{}redOp)} returns a list \\axiom{lts} of triangular sets such that the zero set of \\axiom{ps} is the union of the regular zero sets of the members of \\axiom{lts}. This is made by the Ritt and Wu Wen Tsun process applying the operation \\axiom{characteristicSet(ps,{}redOp?,{}redOp)} to compute characteristic sets in Wu Wen Tsun sense.")) (|characteristicSet| (((|Union| $ "failed") (|List| |#4|)) "\\axiom{characteristicSet(ps)} returns the same as \\axiom{characteristicSet(ps,{}initiallyReduced?,{}initiallyReduce)}.") (((|Union| $ "failed") (|List| |#4|) (|Mapping| (|Boolean|) |#4| |#4|) (|Mapping| |#4| |#4| |#4|)) "\\axiom{characteristicSet(ps,{}redOp?,{}redOp)} returns a non-contradictory characteristic set of \\axiom{ps} in Wu Wen Tsun sense \\spad{w}.\\spad{r}.\\spad{t} the reduction-test \\axiom{redOp?} (using \\axiom{redOp} to reduce polynomials \\spad{w}.\\spad{r}.\\spad{t} a \\axiom{redOp?} basic set),{} if no non-zero constant polynomial appear during those reductions,{} else \\axiom{\"failed\"} is returned. The operations \\axiom{redOp} and \\axiom{redOp?} must satisfy the following conditions: \\axiom{redOp?(redOp(\\spad{p},{}\\spad{q}),{}\\spad{q})} holds for every polynomials \\axiom{\\spad{p},{}\\spad{q}} and there exists an integer \\axiom{\\spad{e}} and a polynomial \\axiom{\\spad{f}} such that we have \\axiom{init(\\spad{q})^e*p = f*q + redOp(\\spad{p},{}\\spad{q})}.")) (|medialSet| (((|Union| $ "failed") (|List| |#4|)) "\\axiom{medial(ps)} returns the same as \\axiom{medialSet(ps,{}initiallyReduced?,{}initiallyReduce)}.") (((|Union| $ "failed") (|List| |#4|) (|Mapping| (|Boolean|) |#4| |#4|) (|Mapping| |#4| |#4| |#4|)) "\\axiom{medialSet(ps,{}redOp?,{}redOp)} returns \\axiom{bs} a basic set (in Wu Wen Tsun sense \\spad{w}.\\spad{r}.\\spad{t} the reduction-test \\axiom{redOp?}) of some set generating the same ideal as \\axiom{ps} (with rank not higher than any basic set of \\axiom{ps}),{} if no non-zero constant polynomials appear during the computatioms,{} else \\axiom{\"failed\"} is returned. In the former case,{} \\axiom{bs} has to be understood as a candidate for being a characteristic set of \\axiom{ps}. In the original algorithm,{} \\axiom{bs} is simply a basic set of \\axiom{ps}."))) 
((-3995 . T) (-3994 . T)) 
((-12 (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#4| (|%list| (QUOTE -260) (|devaluate| |#4|)))) (|HasCategory| |#4| (QUOTE (-553 (-473)))) (|HasCategory| |#4| (QUOTE (-1013))) (|HasCategory| |#1| (QUOTE (-495))) (|HasCategory| |#3| (QUOTE (-319))) (|HasCategory| |#4| (QUOTE (-552 (-772)))) (|HasCategory| |#4| (QUOTE (-72)))) 
(-1193 R) 
((|constructor| (NIL "This is the category of algebras over non-commutative rings. It is used by constructors of non-commutative algebras such as: \\indented{4}{\\spadtype{XPolynomialRing}.} \\indented{4}{\\spadtype{XFreeAlgebra}} Author: Michel Petitot (petitot@lifl.fr)"))) 
((-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1194 |vl| R) 
((|constructor| (NIL "\\indented{2}{This type supports distributed multivariate polynomials} whose variables do not commute. The coefficient ring may be non-commutative too. However,{} coefficients and variables commute."))) 
((-3991 . T) (-3987 |has| |#2| (-6 -3987)) (-3989 . T) (-3988 . T)) 
((|HasCategory| |#2| (QUOTE (-146))) (|HasAttribute| |#2| (QUOTE -3987))) 
(-1195 R |VarSet| XPOLY) 
((|constructor| (NIL "This package provides computations of logarithms and exponentials for polynomials in non-commutative variables. \\newline Author: Michel Petitot (petitot@lifl.fr).")) (|Hausdorff| ((|#3| |#3| |#3| (|NonNegativeInteger|)) "\\axiom{Hausdorff(a,{}\\spad{b},{}\\spad{n})} returns log(exp(a)*exp(\\spad{b})) truncated at order \\axiom{\\spad{n}}.")) (|log| ((|#3| |#3| (|NonNegativeInteger|)) "\\axiom{log(\\spad{p},{} \\spad{n})} returns the logarithm of \\axiom{\\spad{p}} truncated at order \\axiom{\\spad{n}}.")) (|exp| ((|#3| |#3| (|NonNegativeInteger|)) "\\axiom{exp(\\spad{p},{} \\spad{n})} returns the exponential of \\axiom{\\spad{p}} truncated at order \\axiom{\\spad{n}}."))) 
NIL 
NIL 
(-1196 S -3092) 
((|constructor| (NIL "ExtensionField {\\em F} is the category of fields which extend the field \\spad{F}")) (|Frobenius| (($ $ (|NonNegativeInteger|)) "\\spad{Frobenius(a,s)} returns \\spad{a**(q**s)} where \\spad{q} is the size()\\$\\spad{F}.") (($ $) "\\spad{Frobenius(a)} returns \\spad{a ** q} where \\spad{q} is the \\spad{size()\\$F}.")) (|transcendenceDegree| (((|NonNegativeInteger|)) "\\spad{transcendenceDegree()} returns the transcendence degree of the field extension,{} 0 if the extension is algebraic.")) (|extensionDegree| (((|OnePointCompletion| (|PositiveInteger|))) "\\spad{extensionDegree()} returns the degree of the field extension if the extension is algebraic,{} and \\spad{infinity} if it is not.")) (|degree| (((|OnePointCompletion| (|PositiveInteger|)) $) "\\spad{degree(a)} returns the degree of minimal polynomial of an element \\spad{a} if \\spad{a} is algebraic with respect to the ground field \\spad{F},{} and \\spad{infinity} otherwise.")) (|inGroundField?| (((|Boolean|) $) "\\spad{inGroundField?(a)} tests whether an element \\spad{a} is already in the ground field \\spad{F}.")) (|transcendent?| (((|Boolean|) $) "\\spad{transcendent?(a)} tests whether an element \\spad{a} is transcendent with respect to the ground field \\spad{F}.")) (|algebraic?| (((|Boolean|) $) "\\spad{algebraic?(a)} tests whether an element \\spad{a} is algebraic with respect to the ground field \\spad{F}."))) 
NIL 
((|HasCategory| |#2| (QUOTE (-319))) (|HasCategory| |#2| (QUOTE (-118))) (|HasCategory| |#2| (QUOTE (-120)))) 
(-1197 -3092) 
((|constructor| (NIL "ExtensionField {\\em F} is the category of fields which extend the field \\spad{F}")) (|Frobenius| (($ $ (|NonNegativeInteger|)) "\\spad{Frobenius(a,s)} returns \\spad{a**(q**s)} where \\spad{q} is the size()\\$\\spad{F}.") (($ $) "\\spad{Frobenius(a)} returns \\spad{a ** q} where \\spad{q} is the \\spad{size()\\$F}.")) (|transcendenceDegree| (((|NonNegativeInteger|)) "\\spad{transcendenceDegree()} returns the transcendence degree of the field extension,{} 0 if the extension is algebraic.")) (|extensionDegree| (((|OnePointCompletion| (|PositiveInteger|))) "\\spad{extensionDegree()} returns the degree of the field extension if the extension is algebraic,{} and \\spad{infinity} if it is not.")) (|degree| (((|OnePointCompletion| (|PositiveInteger|)) $) "\\spad{degree(a)} returns the degree of minimal polynomial of an element \\spad{a} if \\spad{a} is algebraic with respect to the ground field \\spad{F},{} and \\spad{infinity} otherwise.")) (|inGroundField?| (((|Boolean|) $) "\\spad{inGroundField?(a)} tests whether an element \\spad{a} is already in the ground field \\spad{F}.")) (|transcendent?| (((|Boolean|) $) "\\spad{transcendent?(a)} tests whether an element \\spad{a} is transcendent with respect to the ground field \\spad{F}.")) (|algebraic?| (((|Boolean|) $) "\\spad{algebraic?(a)} tests whether an element \\spad{a} is algebraic with respect to the ground field \\spad{F}."))) 
((-3986 . T) (-3992 . T) (-3987 . T) ((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
(-1198 |vl| R) 
((|constructor| (NIL "This category specifies opeations for polynomials and formal series with non-commutative variables.")) (|varList| (((|List| |#1|) $) "\\spad{varList(x)} returns the list of variables which appear in \\spad{x}.")) (|map| (($ (|Mapping| |#2| |#2|) $) "\\spad{map(fn,x)} returns \\spad{Sum(fn(r_i) w_i)} if \\spad{x} writes \\spad{Sum(r_i w_i)}.")) (|sh| (($ $ (|NonNegativeInteger|)) "\\spad{sh(x,n)} returns the shuffle power of \\spad{x} to the \\spad{n}.") (($ $ $) "\\spad{sh(x,y)} returns the shuffle-product of \\spad{x} by \\spad{y}. This multiplication is associative and commutative.")) (|quasiRegular| (($ $) "\\spad{quasiRegular(x)} return \\spad{x} minus its constant term.")) (|quasiRegular?| (((|Boolean|) $) "\\spad{quasiRegular?(x)} return \\spad{true} if \\spad{constant(x)} is zero.")) (|constant| ((|#2| $) "\\spad{constant(x)} returns the constant term of \\spad{x}.")) (|constant?| (((|Boolean|) $) "\\spad{constant?(x)} returns \\spad{true} if \\spad{x} is constant.")) (|coerce| (($ |#1|) "\\spad{coerce(v)} returns \\spad{v}.")) (|mirror| (($ $) "\\spad{mirror(x)} returns \\spad{Sum(r_i mirror(w_i))} if \\spad{x} writes \\spad{Sum(r_i w_i)}.")) (|monomial?| (((|Boolean|) $) "\\spad{monomial?(x)} returns \\spad{true} if \\spad{x} is a monomial")) (|monom| (($ (|OrderedFreeMonoid| |#1|) |#2|) "\\spad{monom(w,r)} returns the product of the word \\spad{w} by the coefficient \\spad{r}.")) (|rquo| (($ $ $) "\\spad{rquo(x,y)} returns the right simplification of \\spad{x} by \\spad{y}.") (($ $ (|OrderedFreeMonoid| |#1|)) "\\spad{rquo(x,w)} returns the right simplification of \\spad{x} by \\spad{w}.") (($ $ |#1|) "\\spad{rquo(x,v)} returns the right simplification of \\spad{x} by the variable \\spad{v}.")) (|lquo| (($ $ $) "\\spad{lquo(x,y)} returns the left simplification of \\spad{x} by \\spad{y}.") (($ $ (|OrderedFreeMonoid| |#1|)) "\\spad{lquo(x,w)} returns the left simplification of \\spad{x} by the word \\spad{w}.") (($ $ |#1|) "\\spad{lquo(x,v)} returns the left simplification of \\spad{x} by the variable \\spad{v}.")) (|coef| ((|#2| $ $) "\\spad{coef(x,y)} returns scalar product of \\spad{x} by \\spad{y},{} the set of words being regarded as an orthogonal basis.") ((|#2| $ (|OrderedFreeMonoid| |#1|)) "\\spad{coef(x,w)} returns the coefficient of the word \\spad{w} in \\spad{x}.")) (|mindegTerm| (((|Record| (|:| |k| (|OrderedFreeMonoid| |#1|)) (|:| |c| |#2|)) $) "\\spad{mindegTerm(x)} returns the term whose word is \\spad{mindeg(x)}.")) (|mindeg| (((|OrderedFreeMonoid| |#1|) $) "\\spad{mindeg(x)} returns the little word which appears in \\spad{x}. Error if \\spad{x=0}.")) (* (($ $ |#2|) "\\spad{x * r} returns the product of \\spad{x} by \\spad{r}. Usefull if \\spad{R} is a non-commutative Ring.") (($ |#1| $) "\\spad{v * x} returns the product of a variable \\spad{x} by \\spad{x}."))) 
((-3987 |has| |#2| (-6 -3987)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-1199 |VarSet| R) 
((|constructor| (NIL "This domain constructor implements polynomials in non-commutative variables written in the Poincare-Birkhoff-Witt basis from the Lyndon basis. These polynomials can be used to compute Baker-Campbell-Hausdorff relations. \\newline Author: Michel Petitot (petitot@lifl.fr).")) (|log| (($ $ (|NonNegativeInteger|)) "\\axiom{log(\\spad{p},{}\\spad{n})} returns the logarithm of \\axiom{\\spad{p}} (truncated up to order \\axiom{\\spad{n}}).")) (|exp| (($ $ (|NonNegativeInteger|)) "\\axiom{exp(\\spad{p},{}\\spad{n})} returns the exponential of \\axiom{\\spad{p}} (truncated up to order \\axiom{\\spad{n}}).")) (|product| (($ $ $ (|NonNegativeInteger|)) "\\axiom{product(a,{}\\spad{b},{}\\spad{n})} returns \\axiom{a*b} (truncated up to order \\axiom{\\spad{n}}).")) (|LiePolyIfCan| (((|Union| (|LiePolynomial| |#1| |#2|) "failed") $) "\\axiom{LiePolyIfCan(\\spad{p})} return \\axiom{\\spad{p}} if \\axiom{\\spad{p}} is a Lie polynomial.")) (|coerce| (((|XRecursivePolynomial| |#1| |#2|) $) "\\axiom{coerce(\\spad{p})} returns \\axiom{\\spad{p}} as a recursive polynomial.") (((|XDistributedPolynomial| |#1| |#2|) $) "\\axiom{coerce(\\spad{p})} returns \\axiom{\\spad{p}} as a distributed polynomial.") (($ (|LiePolynomial| |#1| |#2|)) "\\axiom{coerce(\\spad{p})} returns \\axiom{\\spad{p}}."))) 
((-3987 |has| |#2| (-6 -3987)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-146))) (|HasCategory| |#2| (QUOTE (-654 (-349 (-484))))) (|HasAttribute| |#2| (QUOTE -3987))) 
(-1200 R) 
((|constructor| (NIL "\\indented{2}{This type supports multivariate polynomials} whose set of variables is \\spadtype{Symbol}. The representation is recursive. The coefficient ring may be non-commutative and the variables do not commute. However,{} coefficients and variables commute."))) 
((-3987 |has| |#1| (-6 -3987)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasAttribute| |#1| (QUOTE -3987))) 
(-1201 |vl| R) 
((|constructor| (NIL "The Category of polynomial rings with non-commutative variables. The coefficient ring may be non-commutative too. However coefficients commute with vaiables.")) (|trunc| (($ $ (|NonNegativeInteger|)) "\\spad{trunc(p,n)} returns the polynomial \\spad{p} truncated at order \\spad{n}.")) (|degree| (((|NonNegativeInteger|) $) "\\spad{degree(p)} returns the degree of \\spad{p}. \\indented{1}{Note that the degree of a word is its length.}")) (|maxdeg| (((|OrderedFreeMonoid| |#1|) $) "\\spad{maxdeg(p)} returns the greatest leading word in the support of \\spad{p}."))) 
((-3987 |has| |#2| (-6 -3987)) (-3989 . T) (-3988 . T) (-3991 . T)) 
NIL 
(-1202 R E) 
((|constructor| (NIL "This domain represents generalized polynomials with coefficients (from a not necessarily commutative ring),{} and words belonging to an arbitrary \\spadtype{OrderedMonoid}. This type is used,{} for instance,{} by the \\spadtype{XDistributedPolynomial} domain constructor where the Monoid is free.")) (|canonicalUnitNormal| ((|attribute|) "canonicalUnitNormal guarantees that the function unitCanonical returns the same representative for all associates of any particular element.")) (/ (($ $ |#1|) "\\spad{p/r} returns \\spad{p*(1/r)}.")) (|map| (($ (|Mapping| |#1| |#1|) $) "\\spad{map(fn,x)} returns \\spad{Sum(fn(r_i) w_i)} if \\spad{x} writes \\spad{Sum(r_i w_i)}.")) (|quasiRegular| (($ $) "\\spad{quasiRegular(x)} return \\spad{x} minus its constant term.")) (|quasiRegular?| (((|Boolean|) $) "\\spad{quasiRegular?(x)} return \\spad{true} if \\spad{constant(p)} is zero.")) (|constant| ((|#1| $) "\\spad{constant(p)} return the constant term of \\spad{p}.")) (|constant?| (((|Boolean|) $) "\\spad{constant?(p)} tests whether the polynomial \\spad{p} belongs to the coefficient ring.")) (|coef| ((|#1| $ |#2|) "\\spad{coef(p,e)} extracts the coefficient of the monomial \\spad{e}. Returns zero if \\spad{e} is not present.")) (|reductum| (($ $) "\\spad{reductum(p)} returns \\spad{p} minus its leading term. An error is produced if \\spad{p} is zero.")) (|mindeg| ((|#2| $) "\\spad{mindeg(p)} returns the smallest word occurring in the polynomial \\spad{p} with a non-zero coefficient. An error is produced if \\spad{p} is zero.")) (|maxdeg| ((|#2| $) "\\spad{maxdeg(p)} returns the greatest word occurring in the polynomial \\spad{p} with a non-zero coefficient. An error is produced if \\spad{p} is zero.")) (|#| (((|NonNegativeInteger|) $) "\\spad{\\# p} returns the number of terms in \\spad{p}.")) (* (($ $ |#1|) "\\spad{p*r} returns the product of \\spad{p} by \\spad{r}."))) 
((-3991 . T) (-3992 |has| |#1| (-6 -3992)) (-3987 |has| |#1| (-6 -3987)) (-3989 . T) (-3988 . T)) 
((|HasCategory| |#1| (QUOTE (-146))) (|HasCategory| |#1| (QUOTE (-312))) (|HasAttribute| |#1| (QUOTE -3991)) (|HasAttribute| |#1| (QUOTE -3992)) (|HasAttribute| |#1| (QUOTE -3987))) 
(-1203 |VarSet| R) 
((|constructor| (NIL "\\indented{2}{This type supports multivariate polynomials} whose variables do not commute. The representation is recursive. The coefficient ring may be non-commutative. Coefficients and variables commute.")) (|RemainderList| (((|List| (|Record| (|:| |k| |#1|) (|:| |c| $))) $) "\\spad{RemainderList(p)} returns the regular part of \\spad{p} as a list of terms.")) (|unexpand| (($ (|XDistributedPolynomial| |#1| |#2|)) "\\spad{unexpand(p)} returns \\spad{p} in recursive form.")) (|expand| (((|XDistributedPolynomial| |#1| |#2|) $) "\\spad{expand(p)} returns \\spad{p} in distributed form."))) 
((-3987 |has| |#2| (-6 -3987)) (-3989 . T) (-3988 . T) (-3991 . T)) 
((|HasCategory| |#2| (QUOTE (-146))) (|HasAttribute| |#2| (QUOTE -3987))) 
(-1204) 
((|constructor| (NIL "This domain provides representations of Young diagrams.")) (|shape| (((|Partition|) $) "\\spad{shape x} returns the partition shaping \\spad{x}.")) (|youngDiagram| (($ (|List| (|PositiveInteger|))) "\\spad{youngDiagram l} returns an object representing a Young diagram with shape given by the list of integers \\spad{l}"))) 
NIL 
NIL 
(-1205 A) 
((|constructor| (NIL "This package implements fixed-point computations on streams.")) (Y (((|List| (|Stream| |#1|)) (|Mapping| (|List| (|Stream| |#1|)) (|List| (|Stream| |#1|))) (|Integer|)) "\\spad{Y(g,n)} computes a fixed point of the function \\spad{g},{} where \\spad{g} takes a list of \\spad{n} streams and returns a list of \\spad{n} streams.") (((|Stream| |#1|) (|Mapping| (|Stream| |#1|) (|Stream| |#1|))) "\\spad{Y(f)} computes a fixed point of the function \\spad{f}."))) 
NIL 
NIL 
(-1206 R |ls| |ls2|) 
((|constructor| (NIL "A package for computing symbolically the complex and real roots of zero-dimensional algebraic systems over the integer or rational numbers. Complex roots are given by means of univariate representations of irreducible regular chains. Real roots are given by means of tuples of coordinates lying in the \\spadtype{RealClosure} of the coefficient ring. This constructor takes three arguments. The first one \\spad{R} is the coefficient ring. The second one \\spad{ls} is the list of variables involved in the systems to solve. The third one must be \\spad{concat(ls,s)} where \\spad{s} is an additional symbol used for the univariate representations. WARNING: The third argument is not checked. All operations are based on triangular decompositions. The default is to compute these decompositions directly from the input system by using the \\spadtype{RegularChain} domain constructor. The lexTriangular algorithm can also be used for computing these decompositions (see the \\spadtype{LexTriangularPackage} package constructor). For that purpose,{} the operations \\axiomOpFrom{univariateSolve}{ZeroDimensionalSolvePackage},{} \\axiomOpFrom{realSolve}{ZeroDimensionalSolvePackage} and \\axiomOpFrom{positiveSolve}{ZeroDimensionalSolvePackage} admit an optional argument. \\newline Author: Marc Moreno Maza.")) (|convert| (((|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#3|))) (|SquareFreeRegularTriangularSet| |#1| (|IndexedExponents| (|OrderedVariableList| |#3|)) (|OrderedVariableList| |#3|) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#3|)))) "\\spad{convert(st)} returns the members of \\spad{st}.") (((|SparseUnivariatePolynomial| (|RealClosure| (|Fraction| |#1|))) (|SparseUnivariatePolynomial| |#1|)) "\\spad{convert(u)} converts \\spad{u}.") (((|Polynomial| (|RealClosure| (|Fraction| |#1|))) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#3|))) "\\spad{convert(q)} converts \\spad{q}.") (((|Polynomial| (|RealClosure| (|Fraction| |#1|))) (|Polynomial| |#1|)) "\\spad{convert(p)} converts \\spad{p}.") (((|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#3|)) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) "\\spad{convert(q)} converts \\spad{q}.")) (|squareFree| (((|List| (|SquareFreeRegularTriangularSet| |#1| (|IndexedExponents| (|OrderedVariableList| |#3|)) (|OrderedVariableList| |#3|) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#3|)))) (|RegularChain| |#1| |#2|)) "\\spad{squareFree(ts)} returns the square-free factorization of \\spad{ts}. Moreover,{} each factor is a Lazard triangular set and the decomposition is a Kalkbrener split of \\spad{ts},{} which is enough here for the matter of solving zero-dimensional algebraic systems. WARNING: \\spad{ts} is not checked to be zero-dimensional.")) (|positiveSolve| (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|))) "\\spad{positiveSolve(lp)} returns the same as \\spad{positiveSolve(lp,false,false)}.") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|)) (|Boolean|)) "\\spad{positiveSolve(lp)} returns the same as \\spad{positiveSolve(lp,info?,false)}.") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|)) "\\spad{positiveSolve(lp,info?,lextri?)} returns the set of the points in the variety associated with \\spad{lp} whose coordinates are (real) strictly positive. Moreover,{} if \\spad{info?} is \\spad{true} then some information is displayed during decomposition into regular chains. If \\spad{lextri?} is \\spad{true} then the lexTriangular algorithm is called from the \\spadtype{LexTriangularPackage} constructor (see \\axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(\\spad{lp},{}\\spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \\axiomOpFrom{zeroSetSplit}{RegularChain} from \\spadtype{RegularChain}. WARNING: For each set of coordinates given by \\spad{positiveSolve(lp,info?,lextri?)} the ordering of the indeterminates is reversed \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ls}.") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|RegularChain| |#1| |#2|)) "\\spad{positiveSolve(ts)} returns the points of the regular set of \\spad{ts} with (real) strictly positive coordinates.")) (|realSolve| (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|))) "\\spad{realSolve(lp)} returns the same as \\spad{realSolve(ts,false,false,false)}") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|)) (|Boolean|)) "\\spad{realSolve(ts,info?)} returns the same as \\spad{realSolve(ts,info?,false,false)}.") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|)) "\\spad{realSolve(ts,info?,check?)} returns the same as \\spad{realSolve(ts,info?,check?,false)}.") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|) (|Boolean|)) "\\spad{realSolve(ts,info?,check?,lextri?)} returns the set of the points in the variety associated with \\spad{lp} whose coordinates are all real. Moreover,{} if \\spad{info?} is \\spad{true} then some information is displayed during decomposition into regular chains. If \\spad{check?} is \\spad{true} then the result is checked. If \\spad{lextri?} is \\spad{true} then the lexTriangular algorithm is called from the \\spadtype{LexTriangularPackage} constructor (see \\axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(lp,{}\\spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \\axiomOpFrom{zeroSetSplit}{RegularChain} from \\spadtype{RegularChain}. WARNING: For each set of coordinates given by \\spad{realSolve(ts,info?,check?,lextri?)} the ordering of the indeterminates is reversed \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ls}.") (((|List| (|List| (|RealClosure| (|Fraction| |#1|)))) (|RegularChain| |#1| |#2|)) "\\spad{realSolve(ts)} returns the set of the points in the regular zero set of \\spad{ts} whose coordinates are all real. WARNING: For each set of coordinates given by \\spad{realSolve(ts)} the ordering of the indeterminates is reversed \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ls}.")) (|univariateSolve| (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|))) "\\spad{univariateSolve(lp)} returns the same as \\spad{univariateSolve(lp,false,false,false)}.") (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|Boolean|)) "\\spad{univariateSolve(lp,info?)} returns the same as \\spad{univariateSolve(lp,info?,false,false)}.") (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|)) "\\spad{univariateSolve(lp,info?,check?)} returns the same as \\spad{univariateSolve(lp,info?,check?,false)}.") (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|) (|Boolean|)) "\\spad{univariateSolve(lp,info?,check?,lextri?)} returns a univariate representation of the variety associated with \\spad{lp}. Moreover,{} if \\spad{info?} is \\spad{true} then some information is displayed during the decomposition into regular chains. If \\spad{check?} is \\spad{true} then the result is checked. See \\axiomOpFrom{rur}{RationalUnivariateRepresentationPackage}(\\spad{lp},{}\\spad{true}). If \\spad{lextri?} is \\spad{true} then the lexTriangular algorithm is called from the \\spadtype{LexTriangularPackage} constructor (see \\axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(\\spad{lp},{}\\spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \\axiomOpFrom{zeroSetSplit}{RegularChain} from \\spadtype{RegularChain}.") (((|List| (|Record| (|:| |complexRoots| (|SparseUnivariatePolynomial| |#1|)) (|:| |coordinates| (|List| (|Polynomial| |#1|))))) (|RegularChain| |#1| |#2|)) "\\spad{univariateSolve(ts)} returns a univariate representation of \\spad{ts}. See \\axiomOpFrom{rur}{RationalUnivariateRepresentationPackage}(lp,{}\\spad{true}).")) (|triangSolve| (((|List| (|RegularChain| |#1| |#2|)) (|List| (|Polynomial| |#1|))) "\\spad{triangSolve(lp)} returns the same as \\spad{triangSolve(lp,false,false)}") (((|List| (|RegularChain| |#1| |#2|)) (|List| (|Polynomial| |#1|)) (|Boolean|)) "\\spad{triangSolve(lp,info?)} returns the same as \\spad{triangSolve(lp,false)}") (((|List| (|RegularChain| |#1| |#2|)) (|List| (|Polynomial| |#1|)) (|Boolean|) (|Boolean|)) "\\spad{triangSolve(lp,info?,lextri?)} decomposes the variety associated with \\axiom{\\spad{lp}} into regular chains. Thus a point belongs to this variety iff it is a regular zero of a regular set in in the output. Note that \\axiom{\\spad{lp}} needs to generate a zero-dimensional ideal. If \\axiom{\\spad{lp}} is not zero-dimensional then the result is only a decomposition of its zero-set in the sense of the closure (\\spad{w}.\\spad{r}.\\spad{t}. Zarisky topology). Moreover,{} if \\spad{info?} is \\spad{true} then some information is displayed during the computations. See \\axiomOpFrom{zeroSetSplit}{RegularTriangularSetCategory}(\\spad{lp},{}\\spad{true},{}\\spad{info?}). If \\spad{lextri?} is \\spad{true} then the lexTriangular algorithm is called from the \\spadtype{LexTriangularPackage} constructor (see \\axiomOpFrom{zeroSetSplit}{LexTriangularPackage}(\\spad{lp},{}\\spad{false})). Otherwise,{} the triangular decomposition is computed directly from the input system by using the \\axiomOpFrom{zeroSetSplit}{RegularChain} from \\spadtype{RegularChain}."))) 
NIL 
NIL 
(-1207 R) 
((|constructor| (NIL "Test for linear dependence over the integers.")) (|solveLinearlyOverQ| (((|Union| (|Vector| (|Fraction| (|Integer|))) "failed") (|Vector| |#1|) |#1|) "\\spad{solveLinearlyOverQ([v1,...,vn], u)} returns \\spad{[c1,...,cn]} such that \\spad{c1*v1 + ... + cn*vn = u},{} \"failed\" if no such rational numbers \\spad{ci}'s exist.")) (|linearDependenceOverZ| (((|Union| (|Vector| (|Integer|)) "failed") (|Vector| |#1|)) "\\spad{linearlyDependenceOverZ([v1,...,vn])} returns \\spad{[c1,...,cn]} if \\spad{c1*v1 + ... + cn*vn = 0} and not all the \\spad{ci}'s are 0,{} \"failed\" if the \\spad{vi}'s are linearly independent over the integers.")) (|linearlyDependentOverZ?| (((|Boolean|) (|Vector| |#1|)) "\\spad{linearlyDependentOverZ?([v1,...,vn])} returns \\spad{true} if the \\spad{vi}'s are linearly dependent over the integers,{} \\spad{false} otherwise."))) 
NIL 
NIL 
(-1208 |p|) 
((|constructor| (NIL "IntegerMod(\\spad{n}) creates the ring of integers reduced modulo the integer \\spad{n}."))) 
(((-3996 "*") . T) (-3988 . T) (-3989 . T) (-3991 . T)) 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
NIL 
((-3 NIL 1961936 1961941 1961946 1961951) (-2 NIL 1961916 1961921 1961926 1961931) (-1 NIL 1961896 1961901 1961906 1961911) (0 NIL 1961876 1961881 1961886 1961891) (-1208 "ZMOD.spad" 1961685 1961698 1961814 1961871) (-1207 "ZLINDEP.spad" 1960783 1960794 1961675 1961680) (-1206 "ZDSOLVE.spad" 1950744 1950766 1960773 1960778) (-1205 "YSTREAM.spad" 1950239 1950250 1950734 1950739) (-1204 "YDIAGRAM.spad" 1949873 1949882 1950229 1950234) (-1203 "XRPOLY.spad" 1949093 1949113 1949729 1949798) (-1202 "XPR.spad" 1946888 1946901 1948811 1948910) (-1201 "XPOLYC.spad" 1946207 1946223 1946814 1946883) (-1200 "XPOLY.spad" 1945762 1945773 1946063 1946132) (-1199 "XPBWPOLY.spad" 1944233 1944253 1945568 1945637) (-1198 "XFALG.spad" 1941281 1941297 1944159 1944228) (-1197 "XF.spad" 1939744 1939759 1941183 1941276) (-1196 "XF.spad" 1938187 1938204 1939628 1939633) (-1195 "XEXPPKG.spad" 1937446 1937472 1938177 1938182) (-1194 "XDPOLY.spad" 1937060 1937076 1937302 1937371) (-1193 "XALG.spad" 1936728 1936739 1937016 1937055) (-1192 "WUTSET.spad" 1932731 1932748 1936362 1936389) (-1191 "WP.spad" 1931938 1931982 1932589 1932656) (-1190 "WHILEAST.spad" 1931736 1931745 1931928 1931933) (-1189 "WHEREAST.spad" 1931407 1931416 1931726 1931731) (-1188 "WFFINTBS.spad" 1929070 1929092 1931397 1931402) (-1187 "WEIER.spad" 1927292 1927303 1929060 1929065) (-1186 "VSPACE.spad" 1926965 1926976 1927260 1927287) (-1185 "VSPACE.spad" 1926658 1926671 1926955 1926960) (-1184 "VOID.spad" 1926335 1926344 1926648 1926653) (-1183 "VIEWDEF.spad" 1921536 1921545 1926325 1926330) (-1182 "VIEW3D.spad" 1905497 1905506 1921526 1921531) (-1181 "VIEW2D.spad" 1893396 1893405 1905487 1905492) (-1180 "VIEW.spad" 1891116 1891125 1893386 1893391) (-1179 "VECTOR2.spad" 1889755 1889768 1891106 1891111) (-1178 "VECTOR.spad" 1888474 1888485 1888725 1888752) (-1177 "VECTCAT.spad" 1886386 1886397 1888442 1888469) (-1176 "VECTCAT.spad" 1884107 1884120 1886165 1886170) (-1175 "VARIABLE.spad" 1883887 1883902 1884097 1884102) (-1174 "UTYPE.spad" 1883531 1883540 1883877 1883882) (-1173 "UTSODETL.spad" 1882826 1882850 1883487 1883492) (-1172 "UTSODE.spad" 1881042 1881062 1882816 1882821) (-1171 "UTSCAT.spad" 1878521 1878537 1880940 1881037) (-1170 "UTSCAT.spad" 1875668 1875686 1878089 1878094) (-1169 "UTS2.spad" 1875263 1875298 1875658 1875663) (-1168 "UTS.spad" 1870275 1870303 1873795 1873892) (-1167 "URAGG.spad" 1864996 1865007 1870265 1870270) (-1166 "URAGG.spad" 1859681 1859694 1864952 1864957) (-1165 "UPXSSING.spad" 1857449 1857475 1858885 1859018) (-1164 "UPXSCONS.spad" 1855267 1855287 1855640 1855789) (-1163 "UPXSCCA.spad" 1853838 1853858 1855113 1855262) (-1162 "UPXSCCA.spad" 1852551 1852573 1853828 1853833) (-1161 "UPXSCAT.spad" 1851140 1851156 1852397 1852546) (-1160 "UPXS2.spad" 1850683 1850736 1851130 1851135) (-1159 "UPXS.spad" 1848038 1848066 1848874 1849023) (-1158 "UPSQFREE.spad" 1846453 1846467 1848028 1848033) (-1157 "UPSCAT.spad" 1844248 1844272 1846351 1846448) (-1156 "UPSCAT.spad" 1841744 1841770 1843849 1843854) (-1155 "UPOLYC2.spad" 1841215 1841234 1841734 1841739) (-1154 "UPOLYC.spad" 1836295 1836306 1841057 1841210) (-1153 "UPOLYC.spad" 1831293 1831306 1836057 1836062) (-1152 "UPMP.spad" 1830225 1830238 1831283 1831288) (-1151 "UPDIVP.spad" 1829790 1829804 1830215 1830220) (-1150 "UPDECOMP.spad" 1828051 1828065 1829780 1829785) (-1149 "UPCDEN.spad" 1827268 1827284 1828041 1828046) (-1148 "UP2.spad" 1826632 1826653 1827258 1827263) (-1147 "UP.spad" 1824102 1824117 1824489 1824642) (-1146 "UNISEG2.spad" 1823599 1823612 1824058 1824063) (-1145 "UNISEG.spad" 1822952 1822963 1823518 1823523) (-1144 "UNIFACT.spad" 1822055 1822067 1822942 1822947) (-1143 "ULSCONS.spad" 1815901 1815921 1816271 1816420) (-1142 "ULSCCAT.spad" 1813638 1813658 1815747 1815896) (-1141 "ULSCCAT.spad" 1811483 1811505 1813594 1813599) (-1140 "ULSCAT.spad" 1809723 1809739 1811329 1811478) (-1139 "ULS2.spad" 1809237 1809290 1809713 1809718) (-1138 "ULS.spad" 1801270 1801298 1802215 1802638) (-1137 "UINT8.spad" 1801147 1801156 1801260 1801265) (-1136 "UINT64.spad" 1801023 1801032 1801137 1801142) (-1135 "UINT32.spad" 1800899 1800908 1801013 1801018) (-1134 "UINT16.spad" 1800775 1800784 1800889 1800894) (-1133 "UFD.spad" 1799840 1799849 1800701 1800770) (-1132 "UFD.spad" 1798967 1798978 1799830 1799835) (-1131 "UDVO.spad" 1797848 1797857 1798957 1798962) (-1130 "UDPO.spad" 1795429 1795440 1797804 1797809) (-1129 "TYPEAST.spad" 1795348 1795357 1795419 1795424) (-1128 "TYPE.spad" 1795280 1795289 1795338 1795343) (-1127 "TWOFACT.spad" 1793932 1793947 1795270 1795275) (-1126 "TUPLE.spad" 1793439 1793450 1793844 1793849) (-1125 "TUBETOOL.spad" 1790306 1790315 1793429 1793434) (-1124 "TUBE.spad" 1788953 1788970 1790296 1790301) (-1123 "TSETCAT.spad" 1777024 1777041 1788921 1788948) (-1122 "TSETCAT.spad" 1765081 1765100 1776980 1776985) (-1121 "TS.spad" 1763709 1763725 1764675 1764772) (-1120 "TRMANIP.spad" 1758073 1758090 1763397 1763402) (-1119 "TRIMAT.spad" 1757036 1757061 1758063 1758068) (-1118 "TRIGMNIP.spad" 1755563 1755580 1757026 1757031) (-1117 "TRIGCAT.spad" 1755075 1755084 1755553 1755558) (-1116 "TRIGCAT.spad" 1754585 1754596 1755065 1755070) (-1115 "TREE.spad" 1753225 1753236 1754257 1754284) (-1114 "TRANFUN.spad" 1753064 1753073 1753215 1753220) (-1113 "TRANFUN.spad" 1752901 1752912 1753054 1753059) (-1112 "TOPSP.spad" 1752575 1752584 1752891 1752896) (-1111 "TOOLSIGN.spad" 1752238 1752249 1752565 1752570) (-1110 "TEXTFILE.spad" 1750799 1750808 1752228 1752233) (-1109 "TEX1.spad" 1750355 1750366 1750789 1750794) (-1108 "TEX.spad" 1747549 1747558 1750345 1750350) (-1107 "TBCMPPK.spad" 1745650 1745673 1747539 1747544) (-1106 "TBAGG.spad" 1744708 1744731 1745630 1745645) (-1105 "TBAGG.spad" 1743774 1743799 1744698 1744703) (-1104 "TANEXP.spad" 1743182 1743193 1743764 1743769) (-1103 "TALGOP.spad" 1742906 1742917 1743172 1743177) (-1102 "TABLEAU.spad" 1742387 1742398 1742896 1742901) (-1101 "TABLE.spad" 1740662 1740685 1740932 1740959) (-1100 "TABLBUMP.spad" 1737441 1737452 1740652 1740657) (-1099 "SYSTEM.spad" 1736669 1736678 1737431 1737436) (-1098 "SYSSOLP.spad" 1734152 1734163 1736659 1736664) (-1097 "SYSPTR.spad" 1734051 1734060 1734142 1734147) (-1096 "SYSNNI.spad" 1733274 1733285 1734041 1734046) (-1095 "SYSINT.spad" 1732678 1732689 1733264 1733269) (-1094 "SYNTAX.spad" 1729012 1729021 1732668 1732673) (-1093 "SYMTAB.spad" 1727080 1727089 1729002 1729007) (-1092 "SYMS.spad" 1723109 1723118 1727070 1727075) (-1091 "SYMPOLY.spad" 1722242 1722253 1722324 1722451) (-1090 "SYMFUNC.spad" 1721743 1721754 1722232 1722237) (-1089 "SYMBOL.spad" 1719238 1719247 1721733 1721738) (-1088 "SUTS.spad" 1716351 1716379 1717770 1717867) (-1087 "SUPXS.spad" 1713693 1713721 1714542 1714691) (-1086 "SUPFRACF.spad" 1712798 1712816 1713683 1713688) (-1085 "SUP2.spad" 1712190 1712203 1712788 1712793) (-1084 "SUP.spad" 1709274 1709285 1710047 1710200) (-1083 "SUMRF.spad" 1708248 1708259 1709264 1709269) (-1082 "SUMFS.spad" 1707877 1707894 1708238 1708243) (-1081 "SULS.spad" 1699897 1699925 1700855 1701278) (-1080 "syntax.spad" 1699666 1699675 1699887 1699892) (-1079 "SUCH.spad" 1699356 1699371 1699656 1699661) (-1078 "SUBSPACE.spad" 1691487 1691502 1699346 1699351) (-1077 "SUBRESP.spad" 1690657 1690671 1691443 1691448) (-1076 "STTFNC.spad" 1687125 1687141 1690647 1690652) (-1075 "STTF.spad" 1683224 1683240 1687115 1687120) (-1074 "STTAYLOR.spad" 1675901 1675912 1683131 1683136) (-1073 "STRTBL.spad" 1674288 1674305 1674437 1674464) (-1072 "STRING.spad" 1673156 1673165 1673541 1673568) (-1071 "STREAM3.spad" 1672729 1672744 1673146 1673151) (-1070 "STREAM2.spad" 1671857 1671870 1672719 1672724) (-1069 "STREAM1.spad" 1671563 1671574 1671847 1671852) (-1068 "STREAM.spad" 1668559 1668570 1671166 1671181) (-1067 "STINPROD.spad" 1667495 1667511 1668549 1668554) (-1066 "STEPAST.spad" 1666729 1666738 1667485 1667490) (-1065 "STEP.spad" 1666046 1666055 1666719 1666724) (-1064 "STBL.spad" 1664436 1664464 1664603 1664618) (-1063 "STAGG.spad" 1663135 1663146 1664426 1664431) (-1062 "STAGG.spad" 1661832 1661845 1663125 1663130) (-1061 "STACK.spad" 1661254 1661265 1661504 1661531) (-1060 "SRING.spad" 1661014 1661023 1661244 1661249) (-1059 "SREGSET.spad" 1658746 1658763 1660648 1660675) (-1058 "SRDCMPK.spad" 1657323 1657343 1658736 1658741) (-1057 "SRAGG.spad" 1652506 1652515 1657291 1657318) (-1056 "SRAGG.spad" 1647709 1647720 1652496 1652501) (-1055 "SQMATRIX.spad" 1645386 1645404 1646302 1646389) (-1054 "SPLTREE.spad" 1640128 1640141 1644924 1644951) (-1053 "SPLNODE.spad" 1636748 1636761 1640118 1640123) (-1052 "SPFCAT.spad" 1635557 1635566 1636738 1636743) (-1051 "SPECOUT.spad" 1634109 1634118 1635547 1635552) (-1050 "SPADXPT.spad" 1626200 1626209 1634099 1634104) (-1049 "spad-parser.spad" 1625665 1625674 1626190 1626195) (-1048 "SPADAST.spad" 1625366 1625375 1625655 1625660) (-1047 "SPACEC.spad" 1609581 1609592 1625356 1625361) (-1046 "SPACE3.spad" 1609357 1609368 1609571 1609576) (-1045 "SORTPAK.spad" 1608906 1608919 1609313 1609318) (-1044 "SOLVETRA.spad" 1606669 1606680 1608896 1608901) (-1043 "SOLVESER.spad" 1605125 1605136 1606659 1606664) (-1042 "SOLVERAD.spad" 1601151 1601162 1605115 1605120) (-1041 "SOLVEFOR.spad" 1599613 1599631 1601141 1601146) (-1040 "SNTSCAT.spad" 1599213 1599230 1599581 1599608) (-1039 "SMTS.spad" 1597530 1597556 1598807 1598904) (-1038 "SMP.spad" 1595338 1595358 1595728 1595855) (-1037 "SMITH.spad" 1594183 1594208 1595328 1595333) (-1036 "SMATCAT.spad" 1592301 1592331 1594127 1594178) (-1035 "SMATCAT.spad" 1590351 1590383 1592179 1592184) (-1034 "SKAGG.spad" 1589320 1589331 1590319 1590346) (-1033 "SINT.spad" 1588619 1588628 1589186 1589315) (-1032 "SIMPAN.spad" 1588347 1588356 1588609 1588614) (-1031 "SIGNRF.spad" 1587472 1587483 1588337 1588342) (-1030 "SIGNEF.spad" 1586758 1586775 1587462 1587467) (-1029 "syntax.spad" 1586175 1586184 1586748 1586753) (-1028 "SIG.spad" 1585537 1585546 1586165 1586170) (-1027 "SHP.spad" 1583481 1583496 1585493 1585498) (-1026 "SHDP.spad" 1572974 1573001 1573491 1573588) (-1025 "SGROUP.spad" 1572582 1572591 1572964 1572969) (-1024 "SGROUP.spad" 1572188 1572199 1572572 1572577) (-1023 "catdef.spad" 1571898 1571910 1572009 1572183) (-1022 "catdef.spad" 1571454 1571466 1571719 1571893) (-1021 "SGCF.spad" 1564593 1564602 1571444 1571449) (-1020 "SFRTCAT.spad" 1563539 1563556 1564561 1564588) (-1019 "SFRGCD.spad" 1562602 1562622 1563529 1563534) (-1018 "SFQCMPK.spad" 1557415 1557435 1562592 1562597) (-1017 "SEXOF.spad" 1557258 1557298 1557405 1557410) (-1016 "SEXCAT.spad" 1555086 1555126 1557248 1557253) (-1015 "SEX.spad" 1554978 1554987 1555076 1555081) (-1014 "SETMN.spad" 1553438 1553455 1554968 1554973) (-1013 "SETCAT.spad" 1552923 1552932 1553428 1553433) (-1012 "SETCAT.spad" 1552406 1552417 1552913 1552918) (-1011 "SETAGG.spad" 1548955 1548966 1552386 1552401) (-1010 "SETAGG.spad" 1545512 1545525 1548945 1548950) (-1009 "SET.spad" 1543821 1543832 1544918 1544957) (-1008 "syntax.spad" 1543524 1543533 1543811 1543816) (-1007 "SEGXCAT.spad" 1542680 1542693 1543514 1543519) (-1006 "SEGCAT.spad" 1541605 1541616 1542670 1542675) (-1005 "SEGBIND2.spad" 1541303 1541316 1541595 1541600) (-1004 "SEGBIND.spad" 1541061 1541072 1541250 1541255) (-1003 "SEGAST.spad" 1540791 1540800 1541051 1541056) (-1002 "SEG2.spad" 1540226 1540239 1540747 1540752) (-1001 "SEG.spad" 1540039 1540050 1540145 1540150) (-1000 "SDVAR.spad" 1539315 1539326 1540029 1540034) (-999 "SDPOL.spad" 1537008 1537018 1537298 1537425) (-998 "SCPKG.spad" 1535098 1535108 1536998 1537003) (-997 "SCOPE.spad" 1534276 1534284 1535088 1535093) (-996 "SCACHE.spad" 1532973 1532983 1534266 1534271) (-995 "SASTCAT.spad" 1532883 1532891 1532963 1532968) (-994 "SAOS.spad" 1532756 1532764 1532873 1532878) (-993 "SAERFFC.spad" 1532470 1532489 1532746 1532751) (-992 "SAEFACT.spad" 1532172 1532191 1532460 1532465) (-991 "SAE.spad" 1529823 1529838 1530433 1530568) (-990 "RURPK.spad" 1527483 1527498 1529813 1529818) (-989 "RULESET.spad" 1526937 1526960 1527473 1527478) (-988 "RULECOLD.spad" 1526790 1526802 1526927 1526932) (-987 "RULE.spad" 1525039 1525062 1526780 1526785) (-986 "RTVALUE.spad" 1524775 1524783 1525029 1525034) (-985 "syntax.spad" 1524493 1524501 1524765 1524770) (-984 "RSETGCD.spad" 1520936 1520955 1524483 1524488) (-983 "RSETCAT.spad" 1510905 1510921 1520904 1520931) (-982 "RSETCAT.spad" 1500894 1500912 1510895 1510900) (-981 "RSDCMPK.spad" 1499395 1499414 1500884 1500889) (-980 "RRCC.spad" 1497780 1497809 1499385 1499390) (-979 "RRCC.spad" 1496163 1496194 1497770 1497775) (-978 "RPTAST.spad" 1495866 1495874 1496153 1496158) (-977 "RPOLCAT.spad" 1475371 1475385 1495734 1495861) (-976 "RPOLCAT.spad" 1454669 1454685 1475034 1475039) (-975 "ROMAN.spad" 1453998 1454006 1454535 1454664) (-974 "ROIRC.spad" 1453079 1453110 1453988 1453993) (-973 "RNS.spad" 1452056 1452064 1452981 1453074) (-972 "RNS.spad" 1451119 1451129 1452046 1452051) (-971 "RNGBIND.spad" 1450280 1450293 1451074 1451079) (-970 "RNG.spad" 1449889 1449897 1450270 1450275) (-969 "RNG.spad" 1449496 1449506 1449879 1449884) (-968 "RMODULE.spad" 1449278 1449288 1449486 1449491) (-967 "RMCAT2.spad" 1448699 1448755 1449268 1449273) (-966 "RMATRIX.spad" 1447509 1447527 1447851 1447890) (-965 "RMATCAT.spad" 1443089 1443119 1447465 1447504) (-964 "RMATCAT.spad" 1438559 1438591 1442937 1442942) (-963 "RLINSET.spad" 1438264 1438274 1438549 1438554) (-962 "RINTERP.spad" 1438153 1438172 1438254 1438259) (-961 "RING.spad" 1437624 1437632 1438133 1438148) (-960 "RING.spad" 1437103 1437113 1437614 1437619) (-959 "RIDIST.spad" 1436496 1436504 1437093 1437098) (-958 "RGCHAIN.spad" 1435051 1435066 1435944 1435971) (-957 "RGBCSPC.spad" 1434841 1434852 1435041 1435046) (-956 "RGBCMDL.spad" 1434404 1434415 1434831 1434836) (-955 "RFFACTOR.spad" 1433867 1433877 1434394 1434399) (-954 "RFFACT.spad" 1433603 1433614 1433857 1433862) (-953 "RFDIST.spad" 1432600 1432608 1433593 1433598) (-952 "RF.spad" 1430275 1430285 1432590 1432595) (-951 "RETSOL.spad" 1429695 1429707 1430265 1430270) (-950 "RETRACT.spad" 1429124 1429134 1429685 1429690) (-949 "RETRACT.spad" 1428551 1428563 1429114 1429119) (-948 "RETAST.spad" 1428364 1428372 1428541 1428546) (-947 "RESRING.spad" 1427712 1427758 1428302 1428359) (-946 "RESLATC.spad" 1427037 1427047 1427702 1427707) (-945 "REPSQ.spad" 1426769 1426779 1427027 1427032) (-944 "REPDB.spad" 1426477 1426487 1426759 1426764) (-943 "REP2.spad" 1416192 1416202 1426319 1426324) (-942 "REP1.spad" 1410413 1410423 1416142 1416147) (-941 "REP.spad" 1407968 1407976 1410403 1410408) (-940 "REGSET.spad" 1405794 1405810 1407602 1407629) (-939 "REF.spad" 1405313 1405323 1405784 1405789) (-938 "REDORDER.spad" 1404520 1404536 1405303 1405308) (-937 "RECLOS.spad" 1403417 1403436 1404120 1404213) (-936 "REALSOLV.spad" 1402558 1402566 1403407 1403412) (-935 "REAL0Q.spad" 1399857 1399871 1402548 1402553) (-934 "REAL0.spad" 1396702 1396716 1399847 1399852) (-933 "REAL.spad" 1396575 1396583 1396692 1396697) (-932 "RDUCEAST.spad" 1396297 1396305 1396565 1396570) (-931 "RDIV.spad" 1395953 1395977 1396287 1396292) (-930 "RDIST.spad" 1395521 1395531 1395943 1395948) (-929 "RDETRS.spad" 1394386 1394403 1395511 1395516) (-928 "RDETR.spad" 1392526 1392543 1394376 1394381) (-927 "RDEEFS.spad" 1391626 1391642 1392516 1392521) (-926 "RDEEF.spad" 1390637 1390653 1391616 1391621) (-925 "RCFIELD.spad" 1387856 1387864 1390539 1390632) (-924 "RCFIELD.spad" 1385161 1385171 1387846 1387851) (-923 "RCAGG.spad" 1383098 1383108 1385151 1385156) (-922 "RCAGG.spad" 1380962 1380974 1383017 1383022) (-921 "RATRET.spad" 1380323 1380333 1380952 1380957) (-920 "RATFACT.spad" 1380016 1380027 1380313 1380318) (-919 "RANDSRC.spad" 1379336 1379344 1380006 1380011) (-918 "RADUTIL.spad" 1379093 1379101 1379326 1379331) (-917 "RADIX.spad" 1376138 1376151 1377683 1377776) (-916 "RADFF.spad" 1374055 1374091 1374173 1374329) (-915 "RADCAT.spad" 1373651 1373659 1374045 1374050) (-914 "RADCAT.spad" 1373245 1373255 1373641 1373646) (-913 "QUEUE.spad" 1372659 1372669 1372917 1372944) (-912 "QUATCT2.spad" 1372280 1372298 1372649 1372654) (-911 "QUATCAT.spad" 1370451 1370461 1372210 1372275) (-910 "QUATCAT.spad" 1368387 1368399 1370148 1370153) (-909 "QUAT.spad" 1366994 1367004 1367336 1367401) (-908 "QUAGG.spad" 1365828 1365838 1366962 1366989) (-907 "QQUTAST.spad" 1365597 1365605 1365818 1365823) (-906 "QFORM.spad" 1365216 1365230 1365587 1365592) (-905 "QFCAT2.spad" 1364909 1364925 1365206 1365211) (-904 "QFCAT.spad" 1363612 1363622 1364811 1364904) (-903 "QFCAT.spad" 1361948 1361960 1363149 1363154) (-902 "QEQUAT.spad" 1361507 1361515 1361938 1361943) (-901 "QCMPACK.spad" 1356422 1356441 1361497 1361502) (-900 "QALGSET2.spad" 1354418 1354436 1356412 1356417) (-899 "QALGSET.spad" 1350523 1350555 1354332 1354337) (-898 "PWFFINTB.spad" 1347939 1347960 1350513 1350518) (-897 "PUSHVAR.spad" 1347278 1347297 1347929 1347934) (-896 "PTRANFN.spad" 1343414 1343424 1347268 1347273) (-895 "PTPACK.spad" 1340502 1340512 1343404 1343409) (-894 "PTFUNC2.spad" 1340325 1340339 1340492 1340497) (-893 "PTCAT.spad" 1339580 1339590 1340293 1340320) (-892 "PSQFR.spad" 1338895 1338919 1339570 1339575) (-891 "PSEUDLIN.spad" 1337781 1337791 1338885 1338890) (-890 "PSETPK.spad" 1324486 1324502 1337659 1337664) (-889 "PSETCAT.spad" 1318886 1318909 1324466 1324481) (-888 "PSETCAT.spad" 1313260 1313285 1318842 1318847) (-887 "PSCURVE.spad" 1312259 1312267 1313250 1313255) (-886 "PSCAT.spad" 1311042 1311071 1312157 1312254) (-885 "PSCAT.spad" 1309915 1309946 1311032 1311037) (-884 "PRTITION.spad" 1308613 1308621 1309905 1309910) (-883 "PRTDAST.spad" 1308332 1308340 1308603 1308608) (-882 "PRS.spad" 1297950 1297967 1308288 1308293) (-881 "PRQAGG.spad" 1297385 1297395 1297918 1297945) (-880 "PROPLOG.spad" 1296989 1296997 1297375 1297380) (-879 "PROPFUN2.spad" 1296612 1296625 1296979 1296984) (-878 "PROPFUN1.spad" 1296018 1296029 1296602 1296607) (-877 "PROPFRML.spad" 1294586 1294597 1296008 1296013) (-876 "PROPERTY.spad" 1294082 1294090 1294576 1294581) (-875 "PRODUCT.spad" 1291779 1291791 1292063 1292118) (-874 "PRINT.spad" 1291531 1291539 1291769 1291774) (-873 "PRIMES.spad" 1289792 1289802 1291521 1291526) (-872 "PRIMELT.spad" 1287913 1287927 1289782 1289787) (-871 "PRIMCAT.spad" 1287556 1287564 1287903 1287908) (-870 "PRIMARR2.spad" 1286323 1286335 1287546 1287551) (-869 "PRIMARR.spad" 1285378 1285388 1285548 1285575) (-868 "PREASSOC.spad" 1284760 1284772 1285368 1285373) (-867 "PR.spad" 1283278 1283290 1283977 1284104) (-866 "PPCURVE.spad" 1282415 1282423 1283268 1283273) (-865 "PORTNUM.spad" 1282206 1282214 1282405 1282410) (-864 "POLYROOT.spad" 1281055 1281077 1282162 1282167) (-863 "POLYLIFT.spad" 1280320 1280343 1281045 1281050) (-862 "POLYCATQ.spad" 1278446 1278468 1280310 1280315) (-861 "POLYCAT.spad" 1271948 1271969 1278314 1278441) (-860 "POLYCAT.spad" 1264970 1264993 1271338 1271343) (-859 "POLY2UP.spad" 1264422 1264436 1264960 1264965) (-858 "POLY2.spad" 1264019 1264031 1264412 1264417) (-857 "POLY.spad" 1261687 1261697 1262202 1262329) (-856 "POLUTIL.spad" 1260652 1260681 1261643 1261648) (-855 "POLTOPOL.spad" 1259400 1259415 1260642 1260647) (-854 "POINT.spad" 1258283 1258293 1258370 1258397) (-853 "PNTHEORY.spad" 1254985 1254993 1258273 1258278) (-852 "PMTOOLS.spad" 1253760 1253774 1254975 1254980) (-851 "PMSYM.spad" 1253309 1253319 1253750 1253755) (-850 "PMQFCAT.spad" 1252900 1252914 1253299 1253304) (-849 "PMPREDFS.spad" 1252362 1252384 1252890 1252895) (-848 "PMPRED.spad" 1251849 1251863 1252352 1252357) (-847 "PMPLCAT.spad" 1250926 1250944 1251778 1251783) (-846 "PMLSAGG.spad" 1250511 1250525 1250916 1250921) (-845 "PMKERNEL.spad" 1250090 1250102 1250501 1250506) (-844 "PMINS.spad" 1249670 1249680 1250080 1250085) (-843 "PMFS.spad" 1249247 1249265 1249660 1249665) (-842 "PMDOWN.spad" 1248537 1248551 1249237 1249242) (-841 "PMASSFS.spad" 1247512 1247528 1248527 1248532) (-840 "PMASS.spad" 1246530 1246538 1247502 1247507) (-839 "PLOTTOOL.spad" 1246310 1246318 1246520 1246525) (-838 "PLOT3D.spad" 1242774 1242782 1246300 1246305) (-837 "PLOT1.spad" 1241947 1241957 1242764 1242769) (-836 "PLOT.spad" 1236870 1236878 1241937 1241942) (-835 "PLEQN.spad" 1224272 1224299 1236860 1236865) (-834 "PINTERPA.spad" 1224056 1224072 1224262 1224267) (-833 "PINTERP.spad" 1223678 1223697 1224046 1224051) (-832 "PID.spad" 1222652 1222660 1223604 1223673) (-831 "PICOERCE.spad" 1222309 1222319 1222642 1222647) (-830 "PI.spad" 1221926 1221934 1222283 1222304) (-829 "PGROEB.spad" 1220535 1220549 1221916 1221921) (-828 "PGE.spad" 1212208 1212216 1220525 1220530) (-827 "PGCD.spad" 1211162 1211179 1212198 1212203) (-826 "PFRPAC.spad" 1210311 1210321 1211152 1211157) (-825 "PFR.spad" 1207014 1207024 1210213 1210306) (-824 "PFOTOOLS.spad" 1206272 1206288 1207004 1207009) (-823 "PFOQ.spad" 1205642 1205660 1206262 1206267) (-822 "PFO.spad" 1205061 1205088 1205632 1205637) (-821 "PFECAT.spad" 1202771 1202779 1204987 1205056) (-820 "PFECAT.spad" 1200509 1200519 1202727 1202732) (-819 "PFBRU.spad" 1198397 1198409 1200499 1200504) (-818 "PFBR.spad" 1195957 1195980 1198387 1198392) (-817 "PF.spad" 1195531 1195543 1195762 1195855) (-816 "PERMGRP.spad" 1190301 1190311 1195521 1195526) (-815 "PERMCAT.spad" 1188962 1188972 1190281 1190296) (-814 "PERMAN.spad" 1187518 1187532 1188952 1188957) (-813 "PERM.spad" 1183328 1183338 1187351 1187366) (-812 "PENDTREE.spad" 1182742 1182752 1183022 1183027) (-811 "PDSPC.spad" 1181555 1181565 1182732 1182737) (-810 "PDSPC.spad" 1180366 1180378 1181545 1181550) (-809 "PDRING.spad" 1180208 1180218 1180346 1180361) (-808 "PDMOD.spad" 1180024 1180036 1180176 1180203) (-807 "PDECOMP.spad" 1179494 1179511 1180014 1180019) (-806 "PDDOM.spad" 1178932 1178945 1179484 1179489) (-805 "PDDOM.spad" 1178368 1178383 1178922 1178927) (-804 "PCOMP.spad" 1178221 1178234 1178358 1178363) (-803 "PBWLB.spad" 1176819 1176836 1178211 1178216) (-802 "PATTERN2.spad" 1176557 1176569 1176809 1176814) (-801 "PATTERN1.spad" 1174901 1174917 1176547 1176552) (-800 "PATTERN.spad" 1169476 1169486 1174891 1174896) (-799 "PATRES2.spad" 1169148 1169162 1169466 1169471) (-798 "PATRES.spad" 1166731 1166743 1169138 1169143) (-797 "PATMATCH.spad" 1164972 1165003 1166483 1166488) (-796 "PATMAB.spad" 1164401 1164411 1164962 1164967) (-795 "PATLRES.spad" 1163487 1163501 1164391 1164396) (-794 "PATAB.spad" 1163251 1163261 1163477 1163482) (-793 "PARTPERM.spad" 1161307 1161315 1163241 1163246) (-792 "PARSURF.spad" 1160741 1160769 1161297 1161302) (-791 "PARSU2.spad" 1160538 1160554 1160731 1160736) (-790 "script-parser.spad" 1160058 1160066 1160528 1160533) (-789 "PARSCURV.spad" 1159492 1159520 1160048 1160053) (-788 "PARSC2.spad" 1159283 1159299 1159482 1159487) (-787 "PARPCURV.spad" 1158745 1158773 1159273 1159278) (-786 "PARPC2.spad" 1158536 1158552 1158735 1158740) (-785 "PARAMAST.spad" 1157664 1157672 1158526 1158531) (-784 "PAN2EXPR.spad" 1157076 1157084 1157654 1157659) (-783 "PALETTE.spad" 1156190 1156198 1157066 1157071) (-782 "PAIR.spad" 1155264 1155277 1155833 1155838) (-781 "PADICRC.spad" 1152669 1152687 1153832 1153925) (-780 "PADICRAT.spad" 1150729 1150741 1150942 1151035) (-779 "PADICCT.spad" 1149278 1149290 1150655 1150724) (-778 "PADIC.spad" 1148981 1148993 1149204 1149273) (-777 "PADEPAC.spad" 1147670 1147689 1148971 1148976) (-776 "PADE.spad" 1146422 1146438 1147660 1147665) (-775 "OWP.spad" 1145670 1145700 1146280 1146347) (-774 "OVERSET.spad" 1145243 1145251 1145660 1145665) (-773 "OVAR.spad" 1145024 1145047 1145233 1145238) (-772 "OUTFORM.spad" 1134432 1134440 1145014 1145019) (-771 "OUTBFILE.spad" 1133866 1133874 1134422 1134427) (-770 "OUTBCON.spad" 1132936 1132944 1133856 1133861) (-769 "OUTBCON.spad" 1132004 1132014 1132926 1132931) (-768 "OUT.spad" 1131122 1131130 1131994 1131999) (-767 "OSI.spad" 1130597 1130605 1131112 1131117) (-766 "OSGROUP.spad" 1130515 1130523 1130587 1130592) (-765 "ORTHPOL.spad" 1129026 1129036 1130458 1130463) (-764 "OREUP.spad" 1128520 1128548 1128747 1128786) (-763 "ORESUP.spad" 1127862 1127886 1128241 1128280) (-762 "OREPCTO.spad" 1125751 1125763 1127782 1127787) (-761 "OREPCAT.spad" 1119938 1119948 1125707 1125746) (-760 "OREPCAT.spad" 1114015 1114027 1119786 1119791) (-759 "ORDTYPE.spad" 1113252 1113260 1114005 1114010) (-758 "ORDTYPE.spad" 1112487 1112497 1113242 1113247) (-757 "ORDSTRCT.spad" 1112273 1112288 1112436 1112441) (-756 "ORDSET.spad" 1111973 1111981 1112263 1112268) (-755 "ORDRING.spad" 1111790 1111798 1111953 1111968) (-754 "ORDMON.spad" 1111645 1111653 1111780 1111785) (-753 "ORDFUNS.spad" 1110777 1110793 1111635 1111640) (-752 "ORDFIN.spad" 1110597 1110605 1110767 1110772) (-751 "ORDCOMP2.spad" 1109890 1109902 1110587 1110592) (-750 "ORDCOMP.spad" 1108416 1108426 1109498 1109527) (-749 "OPSIG.spad" 1108078 1108086 1108406 1108411) (-748 "OPQUERY.spad" 1107659 1107667 1108068 1108073) (-747 "OPERCAT.spad" 1107125 1107135 1107649 1107654) (-746 "OPERCAT.spad" 1106589 1106601 1107115 1107120) (-745 "OP.spad" 1106331 1106341 1106411 1106478) (-744 "ONECOMP2.spad" 1105755 1105767 1106321 1106326) (-743 "ONECOMP.spad" 1104561 1104571 1105363 1105392) (-742 "OMSAGG.spad" 1104349 1104359 1104517 1104556) (-741 "OMLO.spad" 1103782 1103794 1104235 1104274) (-740 "OINTDOM.spad" 1103545 1103553 1103708 1103777) (-739 "OFMONOID.spad" 1101684 1101694 1103501 1103506) (-738 "ODVAR.spad" 1100945 1100955 1101674 1101679) (-737 "ODR.spad" 1100589 1100615 1100757 1100906) (-736 "ODPOL.spad" 1098237 1098247 1098577 1098704) (-735 "ODP.spad" 1087874 1087894 1088247 1088344) (-734 "ODETOOLS.spad" 1086523 1086542 1087864 1087869) (-733 "ODESYS.spad" 1084217 1084234 1086513 1086518) (-732 "ODERTRIC.spad" 1080250 1080267 1084174 1084179) (-731 "ODERED.spad" 1079649 1079673 1080240 1080245) (-730 "ODERAT.spad" 1077282 1077299 1079639 1079644) (-729 "ODEPRRIC.spad" 1074375 1074397 1077272 1077277) (-728 "ODEPRIM.spad" 1071773 1071795 1074365 1074370) (-727 "ODEPAL.spad" 1071159 1071183 1071763 1071768) (-726 "ODEINT.spad" 1070594 1070610 1071149 1071154) (-725 "ODEEF.spad" 1066089 1066105 1070584 1070589) (-724 "ODECONST.spad" 1065634 1065652 1066079 1066084) (-723 "OCTCT2.spad" 1065275 1065293 1065624 1065629) (-722 "OCT.spad" 1063590 1063600 1064304 1064343) (-721 "OCAMON.spad" 1063438 1063446 1063580 1063585) (-720 "OC.spad" 1061234 1061244 1063394 1063433) (-719 "OC.spad" 1058769 1058781 1060931 1060936) (-718 "OASGP.spad" 1058584 1058592 1058759 1058764) (-717 "OAMONS.spad" 1058106 1058114 1058574 1058579) (-716 "OAMON.spad" 1057864 1057872 1058096 1058101) (-715 "OAMON.spad" 1057620 1057630 1057854 1057859) (-714 "OAGROUP.spad" 1057158 1057166 1057610 1057615) (-713 "OAGROUP.spad" 1056694 1056704 1057148 1057153) (-712 "NUMTUBE.spad" 1056285 1056301 1056684 1056689) (-711 "NUMQUAD.spad" 1044261 1044269 1056275 1056280) (-710 "NUMODE.spad" 1035613 1035621 1044251 1044256) (-709 "NUMFMT.spad" 1034453 1034461 1035603 1035608) (-708 "NUMERIC.spad" 1026568 1026578 1034259 1034264) (-707 "NTSCAT.spad" 1025076 1025092 1026536 1026563) (-706 "NTPOLFN.spad" 1024653 1024663 1025019 1025024) (-705 "NSUP2.spad" 1024045 1024057 1024643 1024648) (-704 "NSUP.spad" 1017482 1017492 1021902 1022055) (-703 "NSMP.spad" 1014394 1014413 1014686 1014813) (-702 "NREP.spad" 1012796 1012810 1014384 1014389) (-701 "NPCOEF.spad" 1012042 1012062 1012786 1012791) (-700 "NORMRETR.spad" 1011640 1011679 1012032 1012037) (-699 "NORMPK.spad" 1009582 1009601 1011630 1011635) (-698 "NORMMA.spad" 1009270 1009296 1009572 1009577) (-697 "NONE1.spad" 1008946 1008956 1009260 1009265) (-696 "NONE.spad" 1008687 1008695 1008936 1008941) (-695 "NODE1.spad" 1008174 1008190 1008677 1008682) (-694 "NNI.spad" 1007069 1007077 1008148 1008169) (-693 "NLINSOL.spad" 1005695 1005705 1007059 1007064) (-692 "NFINTBAS.spad" 1003255 1003272 1005685 1005690) (-691 "NETCLT.spad" 1003229 1003240 1003245 1003250) (-690 "NCODIV.spad" 1001453 1001469 1003219 1003224) (-689 "NCNTFRAC.spad" 1001095 1001109 1001443 1001448) (-688 "NCEP.spad" 999261 999275 1001085 1001090) (-687 "NASRING.spad" 998865 998873 999251 999256) (-686 "NASRING.spad" 998467 998477 998855 998860) (-685 "NARNG.spad" 997867 997875 998457 998462) (-684 "NARNG.spad" 997265 997275 997857 997862) (-683 "NAALG.spad" 996830 996840 997233 997260) (-682 "NAALG.spad" 996415 996427 996820 996825) (-681 "MULTSQFR.spad" 993373 993390 996405 996410) (-680 "MULTFACT.spad" 992756 992773 993363 993368) (-679 "MTSCAT.spad" 990850 990871 992654 992751) (-678 "MTHING.spad" 990509 990519 990840 990845) (-677 "MSYSCMD.spad" 989943 989951 990499 990504) (-676 "MSETAGG.spad" 989788 989798 989911 989938) (-675 "MSET.spad" 987734 987744 989482 989521) (-674 "MRING.spad" 984711 984723 987442 987509) (-673 "MRF2.spad" 984273 984287 984701 984706) (-672 "MRATFAC.spad" 983819 983836 984263 984268) (-671 "MPRFF.spad" 981859 981878 983809 983814) (-670 "MPOLY.spad" 979663 979678 980022 980149) (-669 "MPCPF.spad" 978927 978946 979653 979658) (-668 "MPC3.spad" 978744 978784 978917 978922) (-667 "MPC2.spad" 978398 978431 978734 978739) (-666 "MONOTOOL.spad" 976749 976766 978388 978393) (-665 "catdef.spad" 976182 976193 976403 976744) (-664 "catdef.spad" 975580 975591 975836 976177) (-663 "MONOID.spad" 974901 974909 975570 975575) (-662 "MONOID.spad" 974220 974230 974891 974896) (-661 "MONOGEN.spad" 972968 972981 974080 974215) (-660 "MONOGEN.spad" 971738 971753 972852 972857) (-659 "MONADWU.spad" 969818 969826 971728 971733) (-658 "MONADWU.spad" 967896 967906 969808 969813) (-657 "MONAD.spad" 967056 967064 967886 967891) (-656 "MONAD.spad" 966214 966224 967046 967051) (-655 "MOEBIUS.spad" 964950 964964 966194 966209) (-654 "MODULE.spad" 964820 964830 964918 964945) (-653 "MODULE.spad" 964710 964722 964810 964815) (-652 "MODRING.spad" 964045 964084 964690 964705) (-651 "MODOP.spad" 962702 962714 963867 963934) (-650 "MODMONOM.spad" 962433 962451 962692 962697) (-649 "MODMON.spad" 959503 959515 960218 960371) (-648 "MODFIELD.spad" 958865 958904 959405 959498) (-647 "MMLFORM.spad" 957725 957733 958855 958860) (-646 "MMAP.spad" 957467 957501 957715 957720) (-645 "MLO.spad" 955926 955936 957423 957462) (-644 "MLIFT.spad" 954538 954555 955916 955921) (-643 "MKUCFUNC.spad" 954073 954091 954528 954533) (-642 "MKRECORD.spad" 953661 953674 954063 954068) (-641 "MKFUNC.spad" 953068 953078 953651 953656) (-640 "MKFLCFN.spad" 952036 952046 953058 953063) (-639 "MKBCFUNC.spad" 951531 951549 952026 952031) (-638 "MHROWRED.spad" 950042 950052 951521 951526) (-637 "MFINFACT.spad" 949442 949464 950032 950037) (-636 "MESH.spad" 947237 947245 949432 949437) (-635 "MDDFACT.spad" 945456 945466 947227 947232) (-634 "MDAGG.spad" 944747 944757 945436 945451) (-633 "MCDEN.spad" 943957 943969 944737 944742) (-632 "MAYBE.spad" 943257 943268 943947 943952) (-631 "MATSTOR.spad" 940573 940583 943247 943252) (-630 "MATRIX.spad" 939352 939362 939836 939863) (-629 "MATLIN.spad" 936720 936744 939236 939241) (-628 "MATCAT2.spad" 936002 936050 936710 936715) (-627 "MATCAT.spad" 927698 927720 935970 935997) (-626 "MATCAT.spad" 919266 919290 927540 927545) (-625 "MAPPKG3.spad" 918181 918195 919256 919261) (-624 "MAPPKG2.spad" 917519 917531 918171 918176) (-623 "MAPPKG1.spad" 916347 916357 917509 917514) (-622 "MAPPAST.spad" 915686 915694 916337 916342) (-621 "MAPHACK3.spad" 915498 915512 915676 915681) (-620 "MAPHACK2.spad" 915267 915279 915488 915493) (-619 "MAPHACK1.spad" 914911 914921 915257 915262) (-618 "MAGMA.spad" 912717 912734 914901 914906) (-617 "MACROAST.spad" 912312 912320 912707 912712) (-616 "LZSTAGG.spad" 909566 909576 912302 912307) (-615 "LZSTAGG.spad" 906818 906830 909556 909561) (-614 "LWORD.spad" 903563 903580 906808 906813) (-613 "LSTAST.spad" 903347 903355 903553 903558) (-612 "LSQM.spad" 901625 901639 902019 902070) (-611 "LSPP.spad" 901160 901177 901615 901620) (-610 "LSMP1.spad" 899003 899017 901150 901155) (-609 "LSMP.spad" 897860 897888 898993 898998) (-608 "LSAGG.spad" 897529 897539 897828 897855) (-607 "LSAGG.spad" 897218 897230 897519 897524) (-606 "LPOLY.spad" 896180 896199 897074 897143) (-605 "LPEFRAC.spad" 895451 895461 896170 896175) (-604 "LOGIC.spad" 895053 895061 895441 895446) (-603 "LOGIC.spad" 894653 894663 895043 895048) (-602 "LODOOPS.spad" 893583 893595 894643 894648) (-601 "LODOF.spad" 892629 892646 893540 893545) (-600 "LODOCAT.spad" 891295 891305 892585 892624) (-599 "LODOCAT.spad" 889959 889971 891251 891256) (-598 "LODO2.spad" 889273 889285 889680 889719) (-597 "LODO1.spad" 888714 888724 888994 889033) (-596 "LODO.spad" 888139 888155 888435 888474) (-595 "LODEEF.spad" 886941 886959 888129 888134) (-594 "LO.spad" 886342 886356 886875 886902) (-593 "LNAGG.spad" 882529 882539 886332 886337) (-592 "LNAGG.spad" 878680 878692 882485 882490) (-591 "LMOPS.spad" 875448 875465 878670 878675) (-590 "LMODULE.spad" 875232 875242 875438 875443) (-589 "LMDICT.spad" 874613 874623 874861 874888) (-588 "LLINSET.spad" 874320 874330 874603 874608) (-587 "LITERAL.spad" 874226 874237 874310 874315) (-586 "LIST3.spad" 873537 873551 874216 874221) (-585 "LIST2MAP.spad" 870464 870476 873527 873532) (-584 "LIST2.spad" 869166 869178 870454 870459) (-583 "LIST.spad" 867048 867058 868391 868418) (-582 "LINSET.spad" 866827 866837 867038 867043) (-581 "LINFORM.spad" 866290 866302 866795 866822) (-580 "LINEXP.spad" 865033 865043 866280 866285) (-579 "LINELT.spad" 864404 864416 864916 864943) (-578 "LINDEP.spad" 863253 863265 864316 864321) (-577 "LINBASIS.spad" 862889 862904 863243 863248) (-576 "LIMITRF.spad" 860836 860846 862879 862884) (-575 "LIMITPS.spad" 859746 859759 860826 860831) (-574 "LIECAT.spad" 859230 859240 859672 859741) (-573 "LIECAT.spad" 858742 858754 859186 859191) (-572 "LIE.spad" 856746 856758 858020 858162) (-571 "LIB.spad" 854917 854925 855363 855378) (-570 "LGROBP.spad" 852270 852289 854907 854912) (-569 "LFCAT.spad" 851329 851337 852260 852265) (-568 "LF.spad" 850284 850300 851319 851324) (-567 "LEXTRIPK.spad" 845907 845922 850274 850279) (-566 "LEXP.spad" 843926 843953 845887 845902) (-565 "LETAST.spad" 843625 843633 843916 843921) (-564 "LEADCDET.spad" 842031 842048 843615 843620) (-563 "LAZM3PK.spad" 840775 840797 842021 842026) (-562 "LAUPOL.spad" 839442 839455 840342 840411) (-561 "LAPLACE.spad" 839025 839041 839432 839437) (-560 "LALG.spad" 838801 838811 839005 839020) (-559 "LALG.spad" 838585 838597 838791 838796) (-558 "LA.spad" 838025 838039 838507 838546) (-557 "KVTFROM.spad" 837768 837778 838015 838020) (-556 "KTVLOGIC.spad" 837312 837320 837758 837763) (-555 "KRCFROM.spad" 837058 837068 837302 837307) (-554 "KOVACIC.spad" 835789 835806 837048 837053) (-553 "KONVERT.spad" 835511 835521 835779 835784) (-552 "KOERCE.spad" 835248 835258 835501 835506) (-551 "KERNEL2.spad" 834951 834963 835238 835243) (-550 "KERNEL.spad" 833671 833681 834800 834805) (-549 "KDAGG.spad" 832780 832802 833651 833666) (-548 "KDAGG.spad" 831897 831921 832770 832775) (-547 "KAFILE.spad" 830787 830803 831022 831049) (-546 "JVMOP.spad" 830700 830708 830777 830782) (-545 "JVMMDACC.spad" 829754 829762 830690 830695) (-544 "JVMFDACC.spad" 829070 829078 829744 829749) (-543 "JVMCSTTG.spad" 827799 827807 829060 829065) (-542 "JVMCFACC.spad" 827245 827253 827789 827794) (-541 "JVMBCODE.spad" 827156 827164 827235 827240) (-540 "JORDAN.spad" 824973 824985 826434 826576) (-539 "JOINAST.spad" 824675 824683 824963 824968) (-538 "IXAGG.spad" 822808 822832 824665 824670) (-537 "IXAGG.spad" 820796 820822 822655 822660) (-536 "ITUPLE.spad" 819972 819982 820786 820791) (-535 "ITRIGMNP.spad" 818819 818838 819962 819967) (-534 "ITFUN3.spad" 818325 818339 818809 818814) (-533 "ITFUN2.spad" 818069 818081 818315 818320) (-532 "ITFORM.spad" 817424 817432 818059 818064) (-531 "ITAYLOR.spad" 815418 815433 817288 817385) (-530 "ISUPS.spad" 807867 807882 814404 814501) (-529 "ISUMP.spad" 807368 807384 807857 807862) (-528 "ISAST.spad" 807087 807095 807358 807363) (-527 "IRURPK.spad" 805804 805823 807077 807082) (-526 "IRSN.spad" 803808 803816 805794 805799) (-525 "IRRF2F.spad" 802301 802311 803764 803769) (-524 "IRREDFFX.spad" 801902 801913 802291 802296) (-523 "IROOT.spad" 800241 800251 801892 801897) (-522 "IRFORM.spad" 799565 799573 800231 800236) (-521 "IR2F.spad" 798779 798795 799555 799560) (-520 "IR2.spad" 797807 797823 798769 798774) (-519 "IR.spad" 795643 795657 797689 797716) (-518 "IPRNTPK.spad" 795403 795411 795633 795638) (-517 "IPF.spad" 794968 794980 795208 795301) (-516 "IPADIC.spad" 794737 794763 794894 794963) (-515 "IP4ADDR.spad" 794294 794302 794727 794732) (-514 "IOMODE.spad" 793816 793824 794284 794289) (-513 "IOBFILE.spad" 793201 793209 793806 793811) (-512 "IOBCON.spad" 793066 793074 793191 793196) (-511 "INVLAPLA.spad" 792715 792731 793056 793061) (-510 "INTTR.spad" 786109 786126 792705 792710) (-509 "INTTOOLS.spad" 783917 783933 785736 785741) (-508 "INTSLPE.spad" 783245 783253 783907 783912) (-507 "INTRVL.spad" 782811 782821 783159 783240) (-506 "INTRF.spad" 781243 781257 782801 782806) (-505 "INTRET.spad" 780675 780685 781233 781238) (-504 "INTRAT.spad" 779410 779427 780665 780670) (-503 "INTPM.spad" 777873 777889 779131 779136) (-502 "INTPAF.spad" 775749 775767 777802 777807) (-501 "INTHERTR.spad" 775023 775040 775739 775744) (-500 "INTHERAL.spad" 774693 774717 775013 775018) (-499 "INTHEORY.spad" 771132 771140 774683 774688) (-498 "INTG0.spad" 764896 764914 771061 771066) (-497 "INTFACT.spad" 763963 763973 764886 764891) (-496 "INTEF.spad" 762374 762390 763953 763958) (-495 "INTDOM.spad" 760997 761005 762300 762369) (-494 "INTDOM.spad" 759682 759692 760987 760992) (-493 "INTCAT.spad" 757949 757959 759596 759677) (-492 "INTBIT.spad" 757456 757464 757939 757944) (-491 "INTALG.spad" 756644 756671 757446 757451) (-490 "INTAF.spad" 756144 756160 756634 756639) (-489 "INTABL.spad" 754526 754557 754689 754716) (-488 "INT8.spad" 754406 754414 754516 754521) (-487 "INT64.spad" 754285 754293 754396 754401) (-486 "INT32.spad" 754164 754172 754275 754280) (-485 "INT16.spad" 754043 754051 754154 754159) (-484 "INT.spad" 753569 753577 753909 754038) (-483 "INS.spad" 751072 751080 753471 753564) (-482 "INS.spad" 748661 748671 751062 751067) (-481 "INPSIGN.spad" 748131 748144 748651 748656) (-480 "INPRODPF.spad" 747227 747246 748121 748126) (-479 "INPRODFF.spad" 746315 746339 747217 747222) (-478 "INNMFACT.spad" 745290 745307 746305 746310) (-477 "INMODGCD.spad" 744794 744824 745280 745285) (-476 "INFSP.spad" 743091 743113 744784 744789) (-475 "INFPROD0.spad" 742171 742190 743081 743086) (-474 "INFORM1.spad" 741796 741806 742161 742166) (-473 "INFORM.spad" 739007 739015 741786 741791) (-472 "INFINITY.spad" 738559 738567 738997 739002) (-471 "INETCLTS.spad" 738536 738544 738549 738554) (-470 "INEP.spad" 737082 737104 738526 738531) (-469 "INDE.spad" 736731 736748 736992 736997) (-468 "INCRMAPS.spad" 736168 736178 736721 736726) (-467 "INBFILE.spad" 735264 735272 736158 736163) (-466 "INBFF.spad" 731114 731125 735254 735259) (-465 "INBCON.spad" 729380 729388 731104 731109) (-464 "INBCON.spad" 727644 727654 729370 729375) (-463 "INAST.spad" 727305 727313 727634 727639) (-462 "IMPTAST.spad" 727013 727021 727295 727300) (-461 "IMATQF.spad" 726107 726151 726969 726974) (-460 "IMATLIN.spad" 724728 724752 726063 726068) (-459 "IFF.spad" 724141 724157 724412 724505) (-458 "IFAST.spad" 723755 723763 724131 724136) (-457 "IFARRAY.spad" 721282 721297 722980 723007) (-456 "IFAMON.spad" 721144 721161 721238 721243) (-455 "IEVALAB.spad" 720557 720569 721134 721139) (-454 "IEVALAB.spad" 719968 719982 720547 720552) (-453 "indexedp.spad" 719524 719536 719958 719963) (-452 "IDPOAMS.spad" 719202 719214 719436 719441) (-451 "IDPOAM.spad" 718844 718856 719114 719119) (-450 "IDPO.spad" 718258 718270 718756 718761) (-449 "IDPC.spad" 716973 716985 718248 718253) (-448 "IDPAM.spad" 716640 716652 716885 716890) (-447 "IDPAG.spad" 716309 716321 716552 716557) (-446 "IDENT.spad" 715961 715969 716299 716304) (-445 "catdef.spad" 715732 715743 715844 715956) (-444 "IDECOMP.spad" 712971 712989 715722 715727) (-443 "IDEAL.spad" 707933 707972 712919 712924) (-442 "ICDEN.spad" 707146 707162 707923 707928) (-441 "ICARD.spad" 706539 706547 707136 707141) (-440 "IBPTOOLS.spad" 705146 705163 706529 706534) (-439 "IBITS.spad" 704659 704672 704792 704819) (-438 "IBATOOL.spad" 701644 701663 704649 704654) (-437 "IBACHIN.spad" 700151 700166 701634 701639) (-436 "array2.spad" 699636 699658 699823 699850) (-435 "IARRAY1.spad" 698715 698730 698861 698888) (-434 "IAN.spad" 697097 697105 698546 698639) (-433 "IALGFACT.spad" 696708 696741 697087 697092) (-432 "HYPCAT.spad" 696132 696140 696698 696703) (-431 "HYPCAT.spad" 695554 695564 696122 696127) (-430 "HOSTNAME.spad" 695370 695378 695544 695549) (-429 "HOMOTOP.spad" 695113 695123 695360 695365) (-428 "HOAGG.spad" 692395 692405 695103 695108) (-427 "HOAGG.spad" 689427 689439 692137 692142) (-426 "HEXADEC.spad" 687652 687660 688017 688110) (-425 "HEUGCD.spad" 686743 686754 687642 687647) (-424 "HELLFDIV.spad" 686349 686373 686733 686738) (-423 "HEAP.spad" 685806 685816 686021 686048) (-422 "HEADAST.spad" 685347 685355 685796 685801) (-421 "HDP.spad" 674980 674996 675357 675454) (-420 "HDMP.spad" 672527 672542 673143 673270) (-419 "HB.spad" 670802 670810 672517 672522) (-418 "HASHTBL.spad" 669136 669167 669347 669374) (-417 "HASAST.spad" 668852 668860 669126 669131) (-416 "HACKPI.spad" 668343 668351 668754 668847) (-415 "GTSET.spad" 667270 667286 667977 668004) (-414 "GSTBL.spad" 665653 665688 665827 665842) (-413 "GSERIES.spad" 663025 663052 663844 663993) (-412 "GROUP.spad" 662298 662306 663005 663020) (-411 "GROUP.spad" 661579 661589 662288 662293) (-410 "GROEBSOL.spad" 660073 660094 661569 661574) (-409 "GRMOD.spad" 658654 658666 660063 660068) (-408 "GRMOD.spad" 657233 657247 658644 658649) (-407 "GRIMAGE.spad" 650146 650154 657223 657228) (-406 "GRDEF.spad" 648525 648533 650136 650141) (-405 "GRAY.spad" 646996 647004 648515 648520) (-404 "GRALG.spad" 646091 646103 646986 646991) (-403 "GRALG.spad" 645184 645198 646081 646086) (-402 "GPOLSET.spad" 644642 644665 644854 644881) (-401 "GOSPER.spad" 643919 643937 644632 644637) (-400 "GMODPOL.spad" 643067 643094 643887 643914) (-399 "GHENSEL.spad" 642150 642164 643057 643062) (-398 "GENUPS.spad" 638443 638456 642140 642145) (-397 "GENUFACT.spad" 638020 638030 638433 638438) (-396 "GENPGCD.spad" 637622 637639 638010 638015) (-395 "GENMFACT.spad" 637074 637093 637612 637617) (-394 "GENEEZ.spad" 635033 635046 637064 637069) (-393 "GDMP.spad" 632422 632439 633196 633323) (-392 "GCNAALG.spad" 626345 626372 632216 632283) (-391 "GCDDOM.spad" 625537 625545 626271 626340) (-390 "GCDDOM.spad" 624791 624801 625527 625532) (-389 "GBINTERN.spad" 620811 620849 624781 624786) (-388 "GBF.spad" 616594 616632 620801 620806) (-387 "GBEUCLID.spad" 614476 614514 616584 616589) (-386 "GB.spad" 612002 612040 614432 614437) (-385 "GAUSSFAC.spad" 611315 611323 611992 611997) (-384 "GALUTIL.spad" 609641 609651 611271 611276) (-383 "GALPOLYU.spad" 608095 608108 609631 609636) (-382 "GALFACTU.spad" 606308 606327 608085 608090) (-381 "GALFACT.spad" 596521 596532 606298 606303) (-380 "FUNDESC.spad" 596199 596207 596511 596516) (-379 "FUNCTION.spad" 596048 596060 596189 596194) (-378 "FT.spad" 594348 594356 596038 596043) (-377 "FSUPFACT.spad" 593262 593281 594298 594303) (-376 "FST.spad" 591348 591356 593252 593257) (-375 "FSRED.spad" 590828 590844 591338 591343) (-374 "FSPRMELT.spad" 589694 589710 590785 590790) (-373 "FSPECF.spad" 587785 587801 589684 589689) (-372 "FSINT.spad" 587445 587461 587775 587780) (-371 "FSERIES.spad" 586636 586648 587265 587364) (-370 "FSCINT.spad" 585953 585969 586626 586631) (-369 "FSAGG2.spad" 584688 584704 585943 585948) (-368 "FSAGG.spad" 583805 583815 584644 584683) (-367 "FSAGG.spad" 582884 582896 583725 583730) (-366 "FS2UPS.spad" 577399 577433 582874 582879) (-365 "FS2EXPXP.spad" 576540 576563 577389 577394) (-364 "FS2.spad" 576195 576211 576530 576535) (-363 "FS.spad" 570467 570477 575974 576190) (-362 "FS.spad" 564541 564553 570050 570055) (-361 "FRUTIL.spad" 563495 563505 564531 564536) (-360 "FRNAALG.spad" 558772 558782 563437 563490) (-359 "FRNAALG.spad" 554061 554073 558728 558733) (-358 "FRNAAF2.spad" 553509 553527 554051 554056) (-357 "FRMOD.spad" 552917 552947 553438 553443) (-356 "FRIDEAL2.spad" 552521 552553 552907 552912) (-355 "FRIDEAL.spad" 551746 551767 552501 552516) (-354 "FRETRCT.spad" 551265 551275 551736 551741) (-353 "FRETRCT.spad" 550691 550703 551164 551169) (-352 "FRAMALG.spad" 549071 549084 550647 550686) (-351 "FRAMALG.spad" 547483 547498 549061 549066) (-350 "FRAC2.spad" 547088 547100 547473 547478) (-349 "FRAC.spad" 545075 545085 545462 545635) (-348 "FR2.spad" 544411 544423 545065 545070) (-347 "FR.spad" 538199 538209 543472 543541) (-346 "FPS.spad" 535038 535046 538089 538194) (-345 "FPS.spad" 531905 531915 534958 534963) (-344 "FPC.spad" 530951 530959 531807 531900) (-343 "FPC.spad" 530083 530093 530941 530946) (-342 "FPATMAB.spad" 529845 529855 530073 530078) (-341 "FPARFRAC.spad" 528687 528704 529835 529840) (-340 "FORDER.spad" 528378 528402 528677 528682) (-339 "FNLA.spad" 527802 527824 528346 528373) (-338 "FNCAT.spad" 526397 526405 527792 527797) (-337 "FNAME.spad" 526289 526297 526387 526392) (-336 "FMONOID.spad" 525970 525980 526245 526250) (-335 "FMONCAT.spad" 523139 523149 525960 525965) (-334 "FMCAT.spad" 520815 520833 523107 523134) (-333 "FM1.spad" 520180 520192 520749 520776) (-332 "FM.spad" 519795 519807 520034 520061) (-331 "FLOATRP.spad" 517538 517552 519785 519790) (-330 "FLOATCP.spad" 514977 514991 517528 517533) (-329 "FLOAT.spad" 512068 512076 514843 514972) (-328 "FLINEXP.spad" 511790 511800 512058 512063) (-327 "FLINEXP.spad" 511469 511481 511739 511744) (-326 "FLASORT.spad" 510795 510807 511459 511464) (-325 "FLALG.spad" 508465 508484 510721 510790) (-324 "FLAGG2.spad" 507182 507198 508455 508460) (-323 "FLAGG.spad" 504248 504258 507162 507177) (-322 "FLAGG.spad" 501215 501227 504131 504136) (-321 "FINRALG.spad" 499300 499313 501171 501210) (-320 "FINRALG.spad" 497311 497326 499184 499189) (-319 "FINITE.spad" 496463 496471 497301 497306) (-318 "FINITE.spad" 495613 495623 496453 496458) (-317 "aggcat.spad" 493789 493799 495603 495608) (-316 "FINAALG.spad" 482974 482984 493731 493784) (-315 "FINAALG.spad" 472171 472183 482930 482935) (-314 "FILECAT.spad" 470705 470722 472161 472166) (-313 "FILE.spad" 470288 470298 470695 470700) (-312 "FIELD.spad" 469694 469702 470190 470283) (-311 "FIELD.spad" 469186 469196 469684 469689) (-310 "FGROUP.spad" 467849 467859 469166 469181) (-309 "FGLMICPK.spad" 466644 466659 467839 467844) (-308 "FFX.spad" 466030 466045 466363 466456) (-307 "FFSLPE.spad" 465541 465562 466020 466025) (-306 "FFPOLY2.spad" 464601 464618 465531 465536) (-305 "FFPOLY.spad" 455943 455954 464591 464596) (-304 "FFP.spad" 455351 455371 455662 455755) (-303 "FFNBX.spad" 453874 453894 455070 455163) (-302 "FFNBP.spad" 452398 452415 453593 453686) (-301 "FFNB.spad" 450866 450887 452082 452175) (-300 "FFINTBAS.spad" 448380 448399 450856 450861) (-299 "FFIELDC.spad" 445965 445973 448282 448375) (-298 "FFIELDC.spad" 443636 443646 445955 445960) (-297 "FFHOM.spad" 442408 442425 443626 443631) (-296 "FFF.spad" 439851 439862 442398 442403) (-295 "FFCGX.spad" 438709 438729 439570 439663) (-294 "FFCGP.spad" 437609 437629 438428 438521) (-293 "FFCG.spad" 436404 436425 437293 437386) (-292 "FFCAT2.spad" 436151 436191 436394 436399) (-291 "FFCAT.spad" 429316 429338 435990 436146) (-290 "FFCAT.spad" 422560 422584 429236 429241) (-289 "FF.spad" 422011 422027 422244 422337) (-288 "FEVALAB.spad" 421719 421729 422001 422006) (-287 "FEVALAB.spad" 421203 421215 421487 421492) (-286 "FDIVCAT.spad" 419299 419323 421193 421198) (-285 "FDIVCAT.spad" 417393 417419 419289 419294) (-284 "FDIV2.spad" 417049 417089 417383 417388) (-283 "FDIV.spad" 416507 416531 417039 417044) (-282 "FCTRDATA.spad" 415515 415523 416497 416502) (-281 "FCOMP.spad" 414894 414904 415505 415510) (-280 "FAXF.spad" 407929 407943 414796 414889) (-279 "FAXF.spad" 401016 401032 407885 407890) (-278 "FARRAY.spad" 399208 399218 400241 400268) (-277 "FAMR.spad" 397352 397364 399106 399203) (-276 "FAMR.spad" 395480 395494 397236 397241) (-275 "FAMONOID.spad" 395164 395174 395434 395439) (-274 "FAMONC.spad" 393484 393496 395154 395159) (-273 "FAGROUP.spad" 393124 393134 393380 393407) (-272 "FACUTIL.spad" 391336 391353 393114 393119) (-271 "FACTFUNC.spad" 390538 390548 391326 391331) (-270 "EXPUPXS.spad" 387430 387453 388729 388878) (-269 "EXPRTUBE.spad" 384718 384726 387420 387425) (-268 "EXPRODE.spad" 381886 381902 384708 384713) (-267 "EXPR2UPS.spad" 378008 378021 381876 381881) (-266 "EXPR2.spad" 377713 377725 377998 378003) (-265 "EXPR.spad" 373358 373368 374072 374359) (-264 "EXPEXPAN.spad" 370303 370328 370935 371028) (-263 "EXITAST.spad" 370039 370047 370293 370298) (-262 "EXIT.spad" 369710 369718 370029 370034) (-261 "EVALCYC.spad" 369170 369184 369700 369705) (-260 "EVALAB.spad" 368750 368760 369160 369165) (-259 "EVALAB.spad" 368328 368340 368740 368745) (-258 "EUCDOM.spad" 365918 365926 368254 368323) (-257 "EUCDOM.spad" 363570 363580 365908 365913) (-256 "ES2.spad" 363083 363099 363560 363565) (-255 "ES1.spad" 362653 362669 363073 363078) (-254 "ES.spad" 355524 355532 362643 362648) (-253 "ES.spad" 348316 348326 355437 355442) (-252 "ERROR.spad" 345643 345651 348306 348311) (-251 "EQTBL.spad" 343979 344001 344188 344215) (-250 "EQ2.spad" 343697 343709 343969 343974) (-249 "EQ.spad" 338603 338613 341398 341504) (-248 "EP.spad" 334929 334939 338593 338598) (-247 "ENV.spad" 333607 333615 334919 334924) (-246 "ENTIRER.spad" 333275 333283 333551 333602) (-245 "ENTIRER.spad" 332987 332997 333265 333270) (-244 "EMR.spad" 332275 332316 332913 332982) (-243 "ELTAGG.spad" 330529 330548 332265 332270) (-242 "ELTAGG.spad" 328747 328768 330485 330490) (-241 "ELTAB.spad" 328222 328235 328737 328742) (-240 "ELFUTS.spad" 327657 327676 328212 328217) (-239 "ELEMFUN.spad" 327346 327354 327647 327652) (-238 "ELEMFUN.spad" 327033 327043 327336 327341) (-237 "ELAGG.spad" 325004 325014 327013 327028) (-236 "ELAGG.spad" 322912 322924 324923 324928) (-235 "ELABOR.spad" 322258 322266 322902 322907) (-234 "ELABEXPR.spad" 321190 321198 322248 322253) (-233 "EFUPXS.spad" 317966 317996 321146 321151) (-232 "EFULS.spad" 314802 314825 317922 317927) (-231 "EFSTRUC.spad" 312817 312833 314792 314797) (-230 "EF.spad" 307593 307609 312807 312812) (-229 "EAB.spad" 305893 305901 307583 307588) (-228 "DVARCAT.spad" 302899 302909 305883 305888) (-227 "DVARCAT.spad" 299903 299915 302889 302894) (-226 "DSMP.spad" 297636 297650 297941 298068) (-225 "DSEXT.spad" 296938 296948 297626 297631) (-224 "DSEXT.spad" 296160 296172 296850 296855) (-223 "DROPT1.spad" 295825 295835 296150 296155) (-222 "DROPT0.spad" 290690 290698 295815 295820) (-221 "DROPT.spad" 284649 284657 290680 290685) (-220 "DRAWPT.spad" 282822 282830 284639 284644) (-219 "DRAWHACK.spad" 282130 282140 282812 282817) (-218 "DRAWCX.spad" 279608 279616 282120 282125) (-217 "DRAWCURV.spad" 279155 279170 279598 279603) (-216 "DRAWCFUN.spad" 268687 268695 279145 279150) (-215 "DRAW.spad" 261563 261576 268677 268682) (-214 "DQAGG.spad" 259741 259751 261531 261558) (-213 "DPOLCAT.spad" 255098 255114 259609 259736) (-212 "DPOLCAT.spad" 250541 250559 255054 255059) (-211 "DPMO.spad" 243244 243260 243382 243588) (-210 "DPMM.spad" 235960 235978 236085 236291) (-209 "DOMTMPLT.spad" 235731 235739 235950 235955) (-208 "DOMCTOR.spad" 235486 235494 235721 235726) (-207 "DOMAIN.spad" 234597 234605 235476 235481) (-206 "DMP.spad" 232190 232205 232760 232887) (-205 "DMEXT.spad" 232057 232067 232158 232185) (-204 "DLP.spad" 231417 231427 232047 232052) (-203 "DLIST.spad" 230038 230048 230642 230669) (-202 "DLAGG.spad" 228455 228465 230028 230033) (-201 "DIVRING.spad" 227997 228005 228399 228450) (-200 "DIVRING.spad" 227583 227593 227987 227992) (-199 "DISPLAY.spad" 225773 225781 227573 227578) (-198 "DIRPROD2.spad" 224591 224609 225763 225768) (-197 "DIRPROD.spad" 213961 213977 214601 214698) (-196 "DIRPCAT.spad" 213156 213172 213859 213956) (-195 "DIRPCAT.spad" 211977 211995 212682 212687) (-194 "DIOSP.spad" 210802 210810 211967 211972) (-193 "DIOPS.spad" 209798 209808 210782 210797) (-192 "DIOPS.spad" 208768 208780 209754 209759) (-191 "catdef.spad" 208626 208634 208758 208763) (-190 "DIFRING.spad" 208464 208472 208606 208621) (-189 "DIFFSPC.spad" 208043 208051 208454 208459) (-188 "DIFFSPC.spad" 207620 207630 208033 208038) (-187 "DIFFMOD.spad" 207109 207119 207588 207615) (-186 "DIFFDOM.spad" 206274 206285 207099 207104) (-185 "DIFFDOM.spad" 205437 205450 206264 206269) (-184 "DIFEXT.spad" 205256 205266 205417 205432) (-183 "DIAGG.spad" 204886 204896 205236 205251) (-182 "DIAGG.spad" 204524 204536 204876 204881) (-181 "DHMATRIX.spad" 202901 202911 204046 204073) (-180 "DFSFUN.spad" 196541 196549 202891 202896) (-179 "DFLOAT.spad" 193148 193156 196431 196536) (-178 "DFINTTLS.spad" 191379 191395 193138 193143) (-177 "DERHAM.spad" 189293 189325 191359 191374) (-176 "DEQUEUE.spad" 188682 188692 188965 188992) (-175 "DEGRED.spad" 188299 188313 188672 188677) (-174 "DEFINTRF.spad" 185881 185891 188289 188294) (-173 "DEFINTEF.spad" 184419 184435 185871 185876) (-172 "DEFAST.spad" 183803 183811 184409 184414) (-171 "DECIMAL.spad" 182032 182040 182393 182486) (-170 "DDFACT.spad" 179853 179870 182022 182027) (-169 "DBLRESP.spad" 179453 179477 179843 179848) (-168 "DBASIS.spad" 179079 179094 179443 179448) (-167 "DBASE.spad" 177743 177753 179069 179074) (-166 "DATAARY.spad" 177229 177242 177733 177738) (-165 "CYCLOTOM.spad" 176735 176743 177219 177224) (-164 "CYCLES.spad" 173527 173535 176725 176730) (-163 "CVMP.spad" 172944 172954 173517 173522) (-162 "CTRIGMNP.spad" 171444 171460 172934 172939) (-161 "CTORKIND.spad" 171047 171055 171434 171439) (-160 "CTORCAT.spad" 170288 170296 171037 171042) (-159 "CTORCAT.spad" 169527 169537 170278 170283) (-158 "CTORCALL.spad" 169116 169126 169517 169522) (-157 "CTOR.spad" 168807 168815 169106 169111) (-156 "CSTTOOLS.spad" 168052 168065 168797 168802) (-155 "CRFP.spad" 161824 161837 168042 168047) (-154 "CRCEAST.spad" 161544 161552 161814 161819) (-153 "CRAPACK.spad" 160611 160621 161534 161539) (-152 "CPMATCH.spad" 160112 160127 160533 160538) (-151 "CPIMA.spad" 159817 159836 160102 160107) (-150 "COORDSYS.spad" 154826 154836 159807 159812) (-149 "CONTOUR.spad" 154253 154261 154816 154821) (-148 "CONTFRAC.spad" 150003 150013 154155 154248) (-147 "CONDUIT.spad" 149761 149769 149993 149998) (-146 "COMRING.spad" 149435 149443 149699 149756) (-145 "COMPPROP.spad" 148953 148961 149425 149430) (-144 "COMPLPAT.spad" 148720 148735 148943 148948) (-143 "COMPLEX2.spad" 148435 148447 148710 148715) (-142 "COMPLEX.spad" 144141 144151 144385 144643) (-141 "COMPILER.spad" 143690 143698 144131 144136) (-140 "COMPFACT.spad" 143292 143306 143680 143685) (-139 "COMPCAT.spad" 141367 141377 143029 143287) (-138 "COMPCAT.spad" 139183 139195 140847 140852) (-137 "COMMUPC.spad" 138931 138949 139173 139178) (-136 "COMMONOP.spad" 138464 138472 138921 138926) (-135 "COMMAAST.spad" 138227 138235 138454 138459) (-134 "COMM.spad" 138038 138046 138217 138222) (-133 "COMBOPC.spad" 136961 136969 138028 138033) (-132 "COMBINAT.spad" 135728 135738 136951 136956) (-131 "COMBF.spad" 133150 133166 135718 135723) (-130 "COLOR.spad" 131987 131995 133140 133145) (-129 "COLONAST.spad" 131653 131661 131977 131982) (-128 "CMPLXRT.spad" 131364 131381 131643 131648) (-127 "CLLCTAST.spad" 131026 131034 131354 131359) (-126 "CLIP.spad" 127134 127142 131016 131021) (-125 "CLIF.spad" 125789 125805 127090 127129) (-124 "CLAGG.spad" 122326 122336 125779 125784) (-123 "CLAGG.spad" 118747 118759 122202 122207) (-122 "CINTSLPE.spad" 118102 118115 118737 118742) (-121 "CHVAR.spad" 116240 116262 118092 118097) (-120 "CHARZ.spad" 116155 116163 116220 116235) (-119 "CHARPOL.spad" 115681 115691 116145 116150) (-118 "CHARNZ.spad" 115443 115451 115661 115676) (-117 "CHAR.spad" 112811 112819 115433 115438) (-116 "CFCAT.spad" 112139 112147 112801 112806) (-115 "CDEN.spad" 111359 111373 112129 112134) (-114 "CCLASS.spad" 109539 109547 110801 110840) (-113 "CATEGORY.spad" 108613 108621 109529 109534) (-112 "CATCTOR.spad" 108504 108512 108603 108608) (-111 "CATAST.spad" 108130 108138 108494 108499) (-110 "CASEAST.spad" 107844 107852 108120 108125) (-109 "CARTEN2.spad" 107234 107261 107834 107839) (-108 "CARTEN.spad" 102986 103010 107224 107229) (-107 "CARD.spad" 100281 100289 102960 102981) (-106 "CAPSLAST.spad" 100063 100071 100271 100276) (-105 "CACHSET.spad" 99687 99695 100053 100058) (-104 "CABMON.spad" 99242 99250 99677 99682) (-103 "BYTEORD.spad" 98917 98925 99232 99237) (-102 "BYTEBUF.spad" 96884 96892 98170 98197) (-101 "BYTE.spad" 96359 96367 96874 96879) (-100 "BTREE.spad" 95497 95507 96031 96058) (-99 "BTOURN.spad" 94568 94577 95169 95196) (-98 "BTCAT.spad" 93961 93970 94536 94563) (-97 "BTCAT.spad" 93374 93385 93951 93956) (-96 "BTAGG.spad" 92841 92848 93342 93369) (-95 "BTAGG.spad" 92328 92337 92831 92836) (-94 "BSTREE.spad" 91135 91144 92000 92027) (-93 "BRILL.spad" 89341 89351 91125 91130) (-92 "BRAGG.spad" 88298 88307 89331 89336) (-91 "BRAGG.spad" 87219 87230 88254 88259) (-90 "BPADICRT.spad" 85279 85290 85525 85618) (-89 "BPADIC.spad" 84952 84963 85205 85274) (-88 "BOUNDZRO.spad" 84609 84625 84942 84947) (-87 "BOP1.spad" 82068 82077 84599 84604) (-86 "BOP.spad" 77211 77218 82058 82063) (-85 "BOOLEAN.spad" 76760 76767 77201 77206) (-84 "BOOLE.spad" 76411 76418 76750 76755) (-83 "BOOLE.spad" 76060 76069 76401 76406) (-82 "BMODULE.spad" 75773 75784 76028 76055) (-81 "BITS.spad" 75205 75212 75419 75446) (-80 "catdef.spad" 75088 75098 75195 75200) (-79 "catdef.spad" 74839 74849 75078 75083) (-78 "BINDING.spad" 74261 74268 74829 74834) (-77 "BINARY.spad" 72496 72503 72851 72944) (-76 "BGAGG.spad" 71702 71711 72476 72491) (-75 "BGAGG.spad" 70916 70927 71692 71697) (-74 "BEZOUT.spad" 70057 70083 70866 70871) (-73 "BBTREE.spad" 67000 67009 69729 69756) (-72 "BASTYPE.spad" 66500 66507 66990 66995) (-71 "BASTYPE.spad" 65998 66007 66490 66495) (-70 "BALFACT.spad" 65458 65470 65988 65993) (-69 "AUTOMOR.spad" 64909 64918 65438 65453) (-68 "ATTREG.spad" 61632 61639 64661 64904) (-67 "ATTRAST.spad" 61349 61356 61622 61627) (-66 "ATRIG.spad" 60819 60826 61339 61344) (-65 "ATRIG.spad" 60287 60296 60809 60814) (-64 "ASTCAT.spad" 60191 60198 60277 60282) (-63 "ASTCAT.spad" 60093 60102 60181 60186) (-62 "ASTACK.spad" 59497 59506 59765 59792) (-61 "ASSOCEQ.spad" 58331 58342 59453 59458) (-60 "ARRAY2.spad" 57854 57863 58003 58030) (-59 "ARRAY12.spad" 56567 56578 57844 57849) (-58 "ARRAY1.spad" 55446 55455 55792 55819) (-57 "ARR2CAT.spad" 51340 51361 55414 55441) (-56 "ARR2CAT.spad" 47254 47277 51330 51335) (-55 "ARITY.spad" 46626 46633 47244 47249) (-54 "APPRULE.spad" 45910 45932 46616 46621) (-53 "APPLYORE.spad" 45529 45542 45900 45905) (-52 "ANY1.spad" 44600 44609 45519 45524) (-51 "ANY.spad" 43451 43458 44590 44595) (-50 "ANTISYM.spad" 41896 41912 43431 43446) (-49 "ANON.spad" 41605 41612 41886 41891) (-48 "AN.spad" 40073 40080 41436 41529) (-47 "AMR.spad" 38258 38269 39971 40068) (-46 "AMR.spad" 36306 36319 38021 38026) (-45 "ALIST.spad" 33544 33565 33894 33921) (-44 "ALGSC.spad" 32679 32705 33416 33469) (-43 "ALGPKG.spad" 28462 28473 32635 32640) (-42 "ALGMFACT.spad" 27655 27669 28452 28457) (-41 "ALGMANIP.spad" 25156 25171 27499 27504) (-40 "ALGFF.spad" 22974 23001 23191 23347) (-39 "ALGFACT.spad" 22093 22103 22964 22969) (-38 "ALGEBRA.spad" 21926 21935 22049 22088) (-37 "ALGEBRA.spad" 21791 21802 21916 21921) (-36 "ALAGG.spad" 21303 21324 21759 21786) (-35 "AHYP.spad" 20684 20691 21293 21298) (-34 "AGG.spad" 19393 19400 20674 20679) (-33 "AGG.spad" 18066 18075 19349 19354) (-32 "AF.spad" 16511 16526 18015 18020) (-31 "ADDAST.spad" 16197 16204 16501 16506) (-30 "ACPLOT.spad" 15074 15081 16187 16192) (-29 "ACFS.spad" 12931 12940 14976 15069) (-28 "ACFS.spad" 10874 10885 12921 12926) (-27 "ACF.spad" 7628 7635 10776 10869) (-26 "ACF.spad" 4468 4477 7618 7623) (-25 "ABELSG.spad" 4009 4016 4458 4463) (-24 "ABELSG.spad" 3548 3557 3999 4004) (-23 "ABELMON.spad" 2976 2983 3538 3543) (-22 "ABELMON.spad" 2402 2411 2966 2971) (-21 "ABELGRP.spad" 2067 2074 2392 2397) (-20 "ABELGRP.spad" 1730 1739 2057 2062) (-19 "A1AGG.spad" 870 879 1698 1725) (-18 "A1AGG.spad" 30 41 860 865)) 