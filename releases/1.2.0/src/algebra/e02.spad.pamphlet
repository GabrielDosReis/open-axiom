\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra e02.spad}
\author{Godfrey Nolan, Mike Dewar}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{package NAGE02 NagFittingPackage}
<<package NAGE02 NagFittingPackage>>=
)abbrev package NAGE02 NagFittingPackage
++ Author: Godfrey Nolan and Mike Dewar
++ Date Created: Jan 1994
++ Date Last Updated: Thu May 12 17:44:59 1994
++Description:
++This package uses the NAG Library to find a
++function which approximates a set of data points. Typically the
++data contain random errors, as of experimental measurement, which
++need to be smoothed out. To seek an approximation to the data, it
++is first necessary to specify for the approximating function a
++mathematical form (a polynomial, for example) which contains a
++number of unspecified coefficients: the appropriate fitting
++routine then derives for the coefficients the values which
++provide the best fit of that particular form. The package deals
++mainly with curve and surface fitting (i.e., fitting with
++functions of one and of two variables) when a polynomial or a
++cubic spline is used as the fitting function, since these cover
++the most common needs. However, fitting with other functions
++and/or more variables can be undertaken by means of general
++linear or nonlinear routines (some of which are contained in
++other packages) depending on whether the coefficients in the
++function occur linearly or nonlinearly. Cases where a graph
++rather than a set of data points is given can be treated simply
++by first reading a suitable set of points from the graph.
++The package also contains routines for evaluating,
++differentiating and integrating polynomial and spline curves and
++surfaces, once the numerical values of their coefficients have
++been determined.
++See \downlink{Manual Page}{manpageXXe02}.


NagFittingPackage(): Exports == Implementation where
  S ==> Symbol
  FOP ==> FortranOutputStackPackage

  Exports ==> with
    e02adf : (Integer,Integer,Integer,Matrix DoubleFloat,_
	Matrix DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02adf(m,kplus1,nrows,x,y,w,ifail)
     ++ computes weighted least-squares polynomial approximations 
     ++ to an arbitrary set of data points.
     ++ See \downlink{Manual Page}{manpageXXe02adf}.
    e02aef : (Integer,Matrix DoubleFloat,DoubleFloat,Integer) -> Result 
     ++ e02aef(nplus1,a,xcap,ifail)
     ++ evaluates a polynomial from its Chebyshev-series 
     ++ representation.
     ++ See \downlink{Manual Page}{manpageXXe02aef}.
    e02agf : (Integer,Integer,Integer,DoubleFloat,_
	DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Integer,Matrix DoubleFloat,Matrix DoubleFloat,Integer,Matrix Integer,Integer,Integer,Integer) -> Result 
     ++ e02agf(m,kplus1,nrows,xmin,xmax,x,y,w,mf,xf,yf,lyf,ip,lwrk,liwrk,ifail)
     ++ computes constrained weighted least-squares polynomial 
     ++ approximations in Chebyshev-series form to an arbitrary set of 
     ++ data points. The values of the approximations and any number of 
     ++ their derivatives can be specified at selected points.
     ++ See \downlink{Manual Page}{manpageXXe02agf}.
    e02ahf : (Integer,DoubleFloat,DoubleFloat,Matrix DoubleFloat,_
	Integer,Integer,Integer,Integer,Integer) -> Result 
     ++ e02ahf(np1,xmin,xmax,a,ia1,la,iadif1,ladif,ifail)
     ++ determines the coefficients in the Chebyshev-series 
     ++ representation of the derivative of a polynomial given in 
     ++ Chebyshev-series form.
     ++ See \downlink{Manual Page}{manpageXXe02ahf}.
    e02ajf : (Integer,DoubleFloat,DoubleFloat,Matrix DoubleFloat,_
	Integer,Integer,DoubleFloat,Integer,Integer,Integer) -> Result 
     ++ e02ajf(np1,xmin,xmax,a,ia1,la,qatm1,iaint1,laint,ifail)
     ++ determines the coefficients in the Chebyshev-series 
     ++ representation of the indefinite integral of a polynomial given 
     ++ in Chebyshev-series form.
     ++ See \downlink{Manual Page}{manpageXXe02ajf}.
    e02akf : (Integer,DoubleFloat,DoubleFloat,Matrix DoubleFloat,_
	Integer,Integer,DoubleFloat,Integer) -> Result 
     ++ e02akf(np1,xmin,xmax,a,ia1,la,x,ifail)
     ++ evaluates a polynomial from its Chebyshev-series 
     ++ representation, allowing an arbitrary index increment for 
     ++ accessing the array of coefficients.
     ++ See \downlink{Manual Page}{manpageXXe02akf}.
    e02baf : (Integer,Integer,Matrix DoubleFloat,Matrix DoubleFloat,_
	Matrix DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02baf(m,ncap7,x,y,w,lamda,ifail)
     ++ computes a weighted least-squares approximation to an 
     ++ arbitrary set of data points by a cubic splines 
     ++ prescribed by the user. Cubic spline can also be 
     ++ carried out.
     ++ See \downlink{Manual Page}{manpageXXe02baf}.
    e02bbf : (Integer,Matrix DoubleFloat,Matrix DoubleFloat,DoubleFloat,_
	Integer) -> Result 
     ++ e02bbf(ncap7,lamda,c,x,ifail)
     ++ evaluates a cubic spline representation.
     ++ See \downlink{Manual Page}{manpageXXe02bbf}.
    e02bcf : (Integer,Matrix DoubleFloat,Matrix DoubleFloat,DoubleFloat,_
	Integer,Integer) -> Result 
     ++ e02bcf(ncap7,lamda,c,x,left,ifail)
     ++ evaluates a cubic spline and its first three derivatives 
     ++ from its B-spline representation.
     ++ See \downlink{Manual Page}{manpageXXe02bcf}.
    e02bdf : (Integer,Matrix DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02bdf(ncap7,lamda,c,ifail)
     ++ computes the definite integral from its 
     ++ B-spline representation.
     ++ See \downlink{Manual Page}{manpageXXe02bdf}.
    e02bef : (String,Integer,Matrix DoubleFloat,Matrix DoubleFloat,_
	Matrix DoubleFloat,DoubleFloat,Integer,Integer,Integer,Matrix DoubleFloat,Integer,Matrix DoubleFloat,Matrix Integer) -> Result 
     ++ e02bef(start,m,x,y,w,s,nest,lwrk,n,lamda,ifail,wrk,iwrk)
     ++ computes a cubic spline approximation to an arbitrary set 
     ++ of data points. The knot are located 
     ++ automatically, but a single parameter must be specified to 
     ++ control the trade-off between closeness of fit and smoothness of 
     ++ fit.
     ++ See \downlink{Manual Page}{manpageXXe02bef}.
    e02daf : (Integer,Integer,Integer,Matrix DoubleFloat,_
	Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Matrix Integer,Integer,Integer,Integer,DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02daf(m,px,py,x,y,f,w,mu,point,npoint,nc,nws,eps,lamda,ifail)
     ++ forms a minimal, weighted least-squares bicubic spline 
     ++ surface fit with prescribed knots to a given set of data points.
     ++ See \downlink{Manual Page}{manpageXXe02daf}.
    e02dcf : (String,Integer,Matrix DoubleFloat,Integer,_
	Matrix DoubleFloat,Matrix DoubleFloat,DoubleFloat,Integer,Integer,Integer,Integer,Integer,Matrix DoubleFloat,Integer,Matrix DoubleFloat,Matrix DoubleFloat,Matrix Integer,Integer) -> Result 
     ++ e02dcf(start,mx,x,my,y,f,s,nxest,nyest,lwrk,liwrk,nx,lamda,ny,mu,wrk,iwrk,ifail)
     ++ computes a bicubic spline approximation to a set of data 
     ++ values, given on a rectangular grid in the x-y plane. The knots 
     ++ of the spline are located automatically, but a single parameter 
     ++ must be specified to control the trade-off between closeness of 
     ++ fit and smoothness of fit.
     ++ See \downlink{Manual Page}{manpageXXe02dcf}.
    e02ddf : (String,Integer,Matrix DoubleFloat,Matrix DoubleFloat,_
	Matrix DoubleFloat,Matrix DoubleFloat,DoubleFloat,Integer,Integer,Integer,Integer,Integer,Matrix DoubleFloat,Integer,Matrix DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02ddf(start,m,x,y,f,w,s,nxest,nyest,lwrk,liwrk,nx,lamda,ny,mu,wrk,ifail)
     ++ computes a bicubic spline approximation to a set of 
     ++ scattered data are located 
     ++ automatically, but a single parameter must be specified to 
     ++ control the trade-off between closeness of fit and smoothness of 
     ++ fit.
     ++ See \downlink{Manual Page}{manpageXXe02ddf}.
    e02def : (Integer,Integer,Integer,Matrix DoubleFloat,_
	Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02def(m,px,py,x,y,lamda,mu,c,ifail)
     ++ calculates values of a bicubic spline 
     ++ representation.
     ++ See \downlink{Manual Page}{manpageXXe02def}.
    e02dff : (Integer,Integer,Integer,Integer,_
	Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Matrix DoubleFloat,Integer,Integer,Integer) -> Result 
     ++ e02dff(mx,my,px,py,x,y,lamda,mu,c,lwrk,liwrk,ifail)
     ++ calculates values of a bicubic spline 
     ++ representation. The spline is evaluated at all points on a 
     ++ rectangular grid.
     ++ See \downlink{Manual Page}{manpageXXe02dff}.
    e02gaf : (Integer,Integer,Integer,DoubleFloat,_
	Matrix DoubleFloat,Matrix DoubleFloat,Integer) -> Result 
     ++ e02gaf(m,la,nplus2,toler,a,b,ifail)
     ++ calculates an l  solution to an over-determined system of 
     ++                       1                                         
     ++ linear equations.
     ++ See \downlink{Manual Page}{manpageXXe02gaf}.
    e02zaf : (Integer,Integer,Matrix DoubleFloat,Matrix DoubleFloat,_
	Integer,Matrix DoubleFloat,Matrix DoubleFloat,Integer,Integer,Integer) -> Result 
     ++ e02zaf(px,py,lamda,mu,m,x,y,npoint,nadres,ifail)
     ++ sorts two-dimensional data into rectangular panels.
     ++ See \downlink{Manual Page}{manpageXXe02zaf}.
  Implementation ==> add

    import Lisp
    import DoubleFloat
    import Any
    import Record
    import Integer
    import Matrix DoubleFloat
    import Boolean
    import NAGLinkSupportPackage
    import AnyFunctions1(Integer)
    import AnyFunctions1(Matrix DoubleFloat)
    import AnyFunctions1(DoubleFloat)
    import AnyFunctions1(Matrix Integer)
    import AnyFunctions1(String)


    e02adf(mArg:Integer,kplus1Arg:Integer,nrowsArg:Integer,_
	xArg:Matrix DoubleFloat,yArg:Matrix DoubleFloat,wArg:Matrix DoubleFloat,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02adf",_
	["m"::S,"kplus1"::S,"nrows"::S,"ifail"::S,"x"::S,"y"::S,"w"::S,"a"::S,"s"::S_
	,"work1"::S,"work2"::S]$Lisp,_
	["a"::S,"s"::S,"work1"::S,"work2"::S]$Lisp,_
	[["double"::S,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp_
	,["w"::S,"m"::S]$Lisp,["a"::S,"nrows"::S,"kplus1"::S]$Lisp,["s"::S,"kplus1"::S]$Lisp,["work1"::S,["*"::S,3$Lisp,"m"::S]$Lisp]$Lisp_
	,["work2"::S,["*"::S,2$Lisp,"kplus1"::S]$Lisp]$Lisp]$Lisp_
	,["integer"::S,"m"::S,"kplus1"::S,"nrows"::S_
	,"ifail"::S]$Lisp_
	]$Lisp,_
	["a"::S,"s"::S,"ifail"::S]$Lisp,_
	[([mArg::Any,kplus1Arg::Any,nrowsArg::Any,ifailArg::Any,xArg::Any,yArg::Any,wArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02aef(nplus1Arg:Integer,aArg:Matrix DoubleFloat,xcapArg:DoubleFloat,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02aef",_
	["nplus1"::S,"xcap"::S,"p"::S,"ifail"::S,"a"::S]$Lisp,_
	["p"::S]$Lisp,_
	[["double"::S,["a"::S,"nplus1"::S]$Lisp,"xcap"::S_
	,"p"::S]$Lisp_
	,["integer"::S,"nplus1"::S,"ifail"::S]$Lisp_
	]$Lisp,_
	["p"::S,"ifail"::S]$Lisp,_
	[([nplus1Arg::Any,xcapArg::Any,ifailArg::Any,aArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02agf(mArg:Integer,kplus1Arg:Integer,nrowsArg:Integer,_
	xminArg:DoubleFloat,xmaxArg:DoubleFloat,xArg:Matrix DoubleFloat,_
	yArg:Matrix DoubleFloat,wArg:Matrix DoubleFloat,mfArg:Integer,_
	xfArg:Matrix DoubleFloat,yfArg:Matrix DoubleFloat,lyfArg:Integer,_
	ipArg:Matrix Integer,lwrkArg:Integer,liwrkArg:Integer,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02agf",_
	["m"::S,"kplus1"::S,"nrows"::S,"xmin"::S,"xmax"::S_
	,"mf"::S,"lyf"::S,"lwrk"::S,"liwrk"::S,"np1"::S_
	,"ifail"::S,"x"::S,"y"::S,"w"::S,"xf"::S,"yf"::S_
	,"ip"::S,"a"::S,"s"::S,"wrk"::S,"iwrk"::S_
	]$Lisp,_
	["a"::S,"s"::S,"np1"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	[["double"::S,"xmin"::S,"xmax"::S,["x"::S,"m"::S]$Lisp_
	,["y"::S,"m"::S]$Lisp,["w"::S,"m"::S]$Lisp,["xf"::S,"mf"::S]$Lisp,["yf"::S,"lyf"::S]$Lisp,["a"::S,"nrows"::S,"kplus1"::S]$Lisp_
	,["s"::S,"kplus1"::S]$Lisp,["wrk"::S,"lwrk"::S]$Lisp]$Lisp_
	,["integer"::S,"m"::S,"kplus1"::S,"nrows"::S_
	,"mf"::S,"lyf"::S,["ip"::S,"mf"::S]$Lisp,"lwrk"::S,"liwrk"::S,"np1"::S,"ifail"::S,["iwrk"::S,"liwrk"::S]$Lisp]$Lisp_
	]$Lisp,_
	["a"::S,"s"::S,"np1"::S,"wrk"::S,"ifail"::S]$Lisp,_
	[([mArg::Any,kplus1Arg::Any,nrowsArg::Any,xminArg::Any,xmaxArg::Any,mfArg::Any,lyfArg::Any,lwrkArg::Any,liwrkArg::Any,ifailArg::Any,xArg::Any,yArg::Any,wArg::Any,xfArg::Any,yfArg::Any,ipArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02ahf(np1Arg:Integer,xminArg:DoubleFloat,xmaxArg:DoubleFloat,_
	aArg:Matrix DoubleFloat,ia1Arg:Integer,laArg:Integer,_
	iadif1Arg:Integer,ladifArg:Integer,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02ahf",_
	["np1"::S,"xmin"::S,"xmax"::S,"ia1"::S,"la"::S_
	,"iadif1"::S,"ladif"::S,"patm1"::S,"ifail"::S,"a"::S,"adif"::S]$Lisp,_
	["patm1"::S,"adif"::S]$Lisp,_
	[["double"::S,"xmin"::S,"xmax"::S,["a"::S,"la"::S]$Lisp_
	,"patm1"::S,["adif"::S,"ladif"::S]$Lisp]$Lisp_
	,["integer"::S,"np1"::S,"ia1"::S,"la"::S,"iadif1"::S_
	,"ladif"::S,"ifail"::S]$Lisp_
	]$Lisp,_
	["patm1"::S,"adif"::S,"ifail"::S]$Lisp,_
	[([np1Arg::Any,xminArg::Any,xmaxArg::Any,ia1Arg::Any,laArg::Any,iadif1Arg::Any,ladifArg::Any,ifailArg::Any,aArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02ajf(np1Arg:Integer,xminArg:DoubleFloat,xmaxArg:DoubleFloat,_
	aArg:Matrix DoubleFloat,ia1Arg:Integer,laArg:Integer,_
	qatm1Arg:DoubleFloat,iaint1Arg:Integer,laintArg:Integer,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02ajf",_
	["np1"::S,"xmin"::S,"xmax"::S,"ia1"::S,"la"::S_
	,"qatm1"::S,"iaint1"::S,"laint"::S,"ifail"::S,"a"::S,"aint"::S]$Lisp,_
	["aint"::S]$Lisp,_
	[["double"::S,"xmin"::S,"xmax"::S,["a"::S,"la"::S]$Lisp_
	,"qatm1"::S,["aint"::S,"laint"::S]$Lisp]$Lisp_
	,["integer"::S,"np1"::S,"ia1"::S,"la"::S,"iaint1"::S_
	,"laint"::S,"ifail"::S]$Lisp_
	]$Lisp,_
	["aint"::S,"ifail"::S]$Lisp,_
	[([np1Arg::Any,xminArg::Any,xmaxArg::Any,ia1Arg::Any,laArg::Any,qatm1Arg::Any,iaint1Arg::Any,laintArg::Any,ifailArg::Any,aArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02akf(np1Arg:Integer,xminArg:DoubleFloat,xmaxArg:DoubleFloat,_
	aArg:Matrix DoubleFloat,ia1Arg:Integer,laArg:Integer,_
	xArg:DoubleFloat,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02akf",_
	["np1"::S,"xmin"::S,"xmax"::S,"ia1"::S,"la"::S_
	,"x"::S,"result"::S,"ifail"::S,"a"::S]$Lisp,_
	["result"::S]$Lisp,_
	[["double"::S,"xmin"::S,"xmax"::S,["a"::S,"la"::S]$Lisp_
	,"x"::S,"result"::S]$Lisp_
	,["integer"::S,"np1"::S,"ia1"::S,"la"::S,"ifail"::S_
	]$Lisp_
	]$Lisp,_
	["result"::S,"ifail"::S]$Lisp,_
	[([np1Arg::Any,xminArg::Any,xmaxArg::Any,ia1Arg::Any,laArg::Any,xArg::Any,ifailArg::Any,aArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02baf(mArg:Integer,ncap7Arg:Integer,xArg:Matrix DoubleFloat,_
	yArg:Matrix DoubleFloat,wArg:Matrix DoubleFloat,lamdaArg:Matrix DoubleFloat,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02baf",_
	["m"::S,"ncap7"::S,"ss"::S,"ifail"::S,"x"::S,"y"::S,"w"::S,"c"::S,"lamda"::S_
	,"work1"::S,"work2"::S]$Lisp,_
	["c"::S,"ss"::S,"work1"::S,"work2"::S]$Lisp,_
	[["double"::S,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp_
	,["w"::S,"m"::S]$Lisp,["c"::S,"ncap7"::S]$Lisp,"ss"::S,["lamda"::S,"ncap7"::S]$Lisp,["work1"::S,"m"::S]$Lisp_
	,["work2"::S,["*"::S,4$Lisp,"ncap7"::S]$Lisp]$Lisp]$Lisp_
	,["integer"::S,"m"::S,"ncap7"::S,"ifail"::S_
	]$Lisp_
	]$Lisp,_
	["c"::S,"ss"::S,"lamda"::S,"ifail"::S]$Lisp,_
	[([mArg::Any,ncap7Arg::Any,ifailArg::Any,xArg::Any,yArg::Any,wArg::Any,lamdaArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02bbf(ncap7Arg:Integer,lamdaArg:Matrix DoubleFloat,cArg:Matrix DoubleFloat,_
	xArg:DoubleFloat,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02bbf",_
	["ncap7"::S,"x"::S,"s"::S,"ifail"::S,"lamda"::S,"c"::S]$Lisp,_
	["s"::S]$Lisp,_
	[["double"::S,["lamda"::S,"ncap7"::S]$Lisp_
	,["c"::S,"ncap7"::S]$Lisp,"x"::S,"s"::S]$Lisp_
	,["integer"::S,"ncap7"::S,"ifail"::S]$Lisp_
	]$Lisp,_
	["s"::S,"ifail"::S]$Lisp,_
	[([ncap7Arg::Any,xArg::Any,ifailArg::Any,lamdaArg::Any,cArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02bcf(ncap7Arg:Integer,lamdaArg:Matrix DoubleFloat,cArg:Matrix DoubleFloat,_
	xArg:DoubleFloat,leftArg:Integer,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02bcf",_
	["ncap7"::S,"x"::S,"left"::S,"ifail"::S,"lamda"::S,"c"::S,"s"::S]$Lisp,_
	["s"::S]$Lisp,_
	[["double"::S,["lamda"::S,"ncap7"::S]$Lisp_
	,["c"::S,"ncap7"::S]$Lisp,"x"::S,["s"::S,4$Lisp]$Lisp]$Lisp_
	,["integer"::S,"ncap7"::S,"left"::S,"ifail"::S_
	]$Lisp_
	]$Lisp,_
	["s"::S,"ifail"::S]$Lisp,_
	[([ncap7Arg::Any,xArg::Any,leftArg::Any,ifailArg::Any,lamdaArg::Any,cArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02bdf(ncap7Arg:Integer,lamdaArg:Matrix DoubleFloat,cArg:Matrix DoubleFloat,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02bdf",_
	["ncap7"::S,"defint"::S,"ifail"::S,"lamda"::S,"c"::S]$Lisp,_
	["defint"::S]$Lisp,_
	[["double"::S,["lamda"::S,"ncap7"::S]$Lisp_
	,["c"::S,"ncap7"::S]$Lisp,"defint"::S]$Lisp_
	,["integer"::S,"ncap7"::S,"ifail"::S]$Lisp_
	]$Lisp,_
	["defint"::S,"ifail"::S]$Lisp,_
	[([ncap7Arg::Any,ifailArg::Any,lamdaArg::Any,cArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02bef(startArg:String,mArg:Integer,xArg:Matrix DoubleFloat,_
	yArg:Matrix DoubleFloat,wArg:Matrix DoubleFloat,sArg:DoubleFloat,_
	nestArg:Integer,lwrkArg:Integer,nArg:Integer,_
	lamdaArg:Matrix DoubleFloat,ifailArg:Integer,wrkArg:Matrix DoubleFloat,_
	iwrkArg:Matrix Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02bef",_
	["start"::S,"m"::S,"s"::S,"nest"::S,"lwrk"::S_
	,"fp"::S,"n"::S,"ifail"::S,"x"::S,"y"::S,"w"::S,"c"::S,"lamda"::S_
	,"wrk"::S,"iwrk"::S]$Lisp,_
	["c"::S,"fp"::S]$Lisp,_
	[["double"::S,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp_
	,["w"::S,"m"::S]$Lisp,"s"::S,["c"::S,"nest"::S]$Lisp,"fp"::S,["lamda"::S,"nest"::S]$Lisp,["wrk"::S,"lwrk"::S]$Lisp_
	]$Lisp_
	,["integer"::S,"m"::S,"nest"::S,"lwrk"::S,"n"::S_
	,"ifail"::S,["iwrk"::S,"nest"::S]$Lisp]$Lisp_
	,["character"::S,"start"::S]$Lisp_
	]$Lisp,_
	["c"::S,"fp"::S,"n"::S,"lamda"::S,"ifail"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	[([startArg::Any,mArg::Any,sArg::Any,nestArg::Any,lwrkArg::Any,nArg::Any,ifailArg::Any,xArg::Any,yArg::Any,wArg::Any,lamdaArg::Any,wrkArg::Any,iwrkArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02daf(mArg:Integer,pxArg:Integer,pyArg:Integer,_
	xArg:Matrix DoubleFloat,yArg:Matrix DoubleFloat,fArg:Matrix DoubleFloat,_
	wArg:Matrix DoubleFloat,muArg:Matrix DoubleFloat,pointArg:Matrix Integer,_
	npointArg:Integer,ncArg:Integer,nwsArg:Integer,_
	epsArg:DoubleFloat,lamdaArg:Matrix DoubleFloat,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02daf",_
	["m"::S,"px"::S,"py"::S,"npoint"::S,"nc"::S_
	,"nws"::S,"eps"::S,"sigma"::S,"rank"::S,"ifail"::S_
	,"x"::S,"y"::S,"f"::S,"w"::S,"mu"::S_
	,"point"::S,"dl"::S,"c"::S,"lamda"::S,"ws"::S_
	]$Lisp,_
	["dl"::S,"c"::S,"sigma"::S,"rank"::S,"ws"::S]$Lisp,_
	[["double"::S,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp_
	,["f"::S,"m"::S]$Lisp,["w"::S,"m"::S]$Lisp,["mu"::S,"py"::S]$Lisp,"eps"::S,["dl"::S,"nc"::S]$Lisp,["c"::S,"nc"::S]$Lisp_
	,"sigma"::S,["lamda"::S,"px"::S]$Lisp,["ws"::S,"nws"::S]$Lisp]$Lisp_
	,["integer"::S,"m"::S,"px"::S,"py"::S,["point"::S,"npoint"::S]$Lisp_
	,"npoint"::S,"nc"::S,"nws"::S,"rank"::S,"ifail"::S]$Lisp_
	]$Lisp,_
	["dl"::S,"c"::S,"sigma"::S,"rank"::S,"lamda"::S,"ifail"::S]$Lisp,_
	[([mArg::Any,pxArg::Any,pyArg::Any,npointArg::Any,ncArg::Any,nwsArg::Any,epsArg::Any,ifailArg::Any,xArg::Any,yArg::Any,fArg::Any,wArg::Any,muArg::Any,pointArg::Any,lamdaArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02dcf(startArg:String,mxArg:Integer,xArg:Matrix DoubleFloat,_
	myArg:Integer,yArg:Matrix DoubleFloat,fArg:Matrix DoubleFloat,_
	sArg:DoubleFloat,nxestArg:Integer,nyestArg:Integer,_
	lwrkArg:Integer,liwrkArg:Integer,nxArg:Integer,_
	lamdaArg:Matrix DoubleFloat,nyArg:Integer,muArg:Matrix DoubleFloat,_
	wrkArg:Matrix DoubleFloat,iwrkArg:Matrix Integer,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02dcf",_
	["start"::S,"mx"::S,"my"::S,"s"::S,"nxest"::S_
	,"nyest"::S,"lwrk"::S,"liwrk"::S,"fp"::S,"nx"::S_
	,"ny"::S,"ifail"::S,"x"::S,"y"::S,"f"::S,"c"::S,"lamda"::S_
	,"mu"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	["c"::S,"fp"::S]$Lisp,_
	[["double"::S,["x"::S,"mx"::S]$Lisp,["y"::S,"my"::S]$Lisp_
	,["f"::S,["*"::S,"mx"::S,"my"::S]$Lisp]$Lisp,"s"::S,["c"::S,["*"::S,["-"::S,"nxest"::S,4$Lisp]$Lisp,["-"::S,"nyest"::S,4$Lisp]$Lisp]$Lisp]$Lisp_
	,"fp"::S,["lamda"::S,"nxest"::S]$Lisp,["mu"::S,"nyest"::S]$Lisp,["wrk"::S,"lwrk"::S]$Lisp_
	]$Lisp_
	,["integer"::S,"mx"::S,"my"::S,"nxest"::S,"nyest"::S_
	,"lwrk"::S,"liwrk"::S,"nx"::S,"ny"::S,["iwrk"::S,"liwrk"::S]$Lisp,"ifail"::S]$Lisp_
	,["character"::S,"start"::S]$Lisp_
	]$Lisp,_
	["c"::S,"fp"::S,"nx"::S,"lamda"::S,"ny"::S,"mu"::S,"wrk"::S,"iwrk"::S,"ifail"::S]$Lisp,_
	[([startArg::Any,mxArg::Any,myArg::Any,sArg::Any,nxestArg::Any,nyestArg::Any,lwrkArg::Any,liwrkArg::Any,nxArg::Any,nyArg::Any,ifailArg::Any,xArg::Any,yArg::Any,fArg::Any,lamdaArg::Any,muArg::Any,wrkArg::Any,iwrkArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02ddf(startArg:String,mArg:Integer,xArg:Matrix DoubleFloat,_
	yArg:Matrix DoubleFloat,fArg:Matrix DoubleFloat,wArg:Matrix DoubleFloat,_
	sArg:DoubleFloat,nxestArg:Integer,nyestArg:Integer,_
	lwrkArg:Integer,liwrkArg:Integer,nxArg:Integer,_
	lamdaArg:Matrix DoubleFloat,nyArg:Integer,muArg:Matrix DoubleFloat,_
	wrkArg:Matrix DoubleFloat,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02ddf",_
	["start"::S,"m"::S,"s"::S,"nxest"::S,"nyest"::S_
	,"lwrk"::S,"liwrk"::S,"fp"::S,"rank"::S,"nx"::S_
	,"ny"::S,"ifail"::S,"x"::S,"y"::S,"f"::S,"w"::S,"c"::S_
	,"iwrk"::S,"lamda"::S,"mu"::S,"wrk"::S]$Lisp,_
	["c"::S,"fp"::S,"rank"::S,"iwrk"::S]$Lisp,_
	[["double"::S,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp_
	,["f"::S,"m"::S]$Lisp,["w"::S,"m"::S]$Lisp,"s"::S,["c"::S,["*"::S,["-"::S,"nxest"::S,4$Lisp]$Lisp,["-"::S,"nyest"::S,4$Lisp]$Lisp]$Lisp]$Lisp_
	,"fp"::S,["lamda"::S,"nxest"::S]$Lisp,["mu"::S,"nyest"::S]$Lisp,["wrk"::S,"lwrk"::S]$Lisp_
	]$Lisp_
	,["integer"::S,"m"::S,"nxest"::S,"nyest"::S_
	,"lwrk"::S,"liwrk"::S,"rank"::S,["iwrk"::S,"liwrk"::S]$Lisp,"nx"::S,"ny"::S,"ifail"::S]$Lisp_
	,["character"::S,"start"::S]$Lisp_
	]$Lisp,_
	["c"::S,"fp"::S,"rank"::S,"iwrk"::S,"nx"::S,"lamda"::S,"ny"::S,"mu"::S,"wrk"::S,"ifail"::S]$Lisp,_
	[([startArg::Any,mArg::Any,sArg::Any,nxestArg::Any,nyestArg::Any,lwrkArg::Any,liwrkArg::Any,nxArg::Any,nyArg::Any,ifailArg::Any,xArg::Any,yArg::Any,fArg::Any,wArg::Any,lamdaArg::Any,muArg::Any,wrkArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02def(mArg:Integer,pxArg:Integer,pyArg:Integer,_
	xArg:Matrix DoubleFloat,yArg:Matrix DoubleFloat,lamdaArg:Matrix DoubleFloat,_
	muArg:Matrix DoubleFloat,cArg:Matrix DoubleFloat,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02def",_
	["m"::S,"px"::S,"py"::S,"ifail"::S,"x"::S,"y"::S,"lamda"::S,"mu"::S,"c"::S_
	,"ff"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	["ff"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	[["double"::S,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp_
	,["lamda"::S,"px"::S]$Lisp,["mu"::S,"py"::S]$Lisp,["c"::S,["*"::S,["-"::S,"px"::S,4$Lisp]$Lisp,["-"::S,"py"::S,4$Lisp]$Lisp]$Lisp]$Lisp_
	,["ff"::S,"m"::S]$Lisp,["wrk"::S,["-"::S,"py"::S,4$Lisp]$Lisp]$Lisp]$Lisp_
	,["integer"::S,"m"::S,"px"::S,"py"::S,"ifail"::S_
	,["iwrk"::S,["-"::S,"py"::S,4$Lisp]$Lisp]$Lisp]$Lisp_
	]$Lisp,_
	["ff"::S,"ifail"::S]$Lisp,_
	[([mArg::Any,pxArg::Any,pyArg::Any,ifailArg::Any,xArg::Any,yArg::Any,lamdaArg::Any,muArg::Any,cArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02dff(mxArg:Integer,myArg:Integer,pxArg:Integer,_
	pyArg:Integer,xArg:Matrix DoubleFloat,yArg:Matrix DoubleFloat,_
	lamdaArg:Matrix DoubleFloat,muArg:Matrix DoubleFloat,cArg:Matrix DoubleFloat,_
	lwrkArg:Integer,liwrkArg:Integer,ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02dff",_
	["mx"::S,"my"::S,"px"::S,"py"::S,"lwrk"::S_
	,"liwrk"::S,"ifail"::S,"x"::S,"y"::S,"lamda"::S,"mu"::S,"c"::S_
	,"ff"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	["ff"::S,"wrk"::S,"iwrk"::S]$Lisp,_
	[["double"::S,["x"::S,"mx"::S]$Lisp,["y"::S,"my"::S]$Lisp_
	,["lamda"::S,"px"::S]$Lisp,["mu"::S,"py"::S]$Lisp,["c"::S,["*"::S,["-"::S,"px"::S,4$Lisp]$Lisp,["-"::S,"py"::S,4$Lisp]$Lisp]$Lisp]$Lisp_
	,["ff"::S,["*"::S,"mx"::S,"my"::S]$Lisp]$Lisp,["wrk"::S,"lwrk"::S]$Lisp]$Lisp_
	,["integer"::S,"mx"::S,"my"::S,"px"::S,"py"::S_
	,"lwrk"::S,"liwrk"::S,"ifail"::S,["iwrk"::S,"liwrk"::S]$Lisp]$Lisp_
	]$Lisp,_
	["ff"::S,"ifail"::S]$Lisp,_
	[([mxArg::Any,myArg::Any,pxArg::Any,pyArg::Any,lwrkArg::Any,liwrkArg::Any,ifailArg::Any,xArg::Any,yArg::Any,lamdaArg::Any,muArg::Any,cArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02gaf(mArg:Integer,laArg:Integer,nplus2Arg:Integer,_
	tolerArg:DoubleFloat,aArg:Matrix DoubleFloat,bArg:Matrix DoubleFloat,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02gaf",_
	["m"::S,"la"::S,"nplus2"::S,"toler"::S,"resid"::S_
	,"irank"::S,"iter"::S,"ifail"::S,"x"::S,"a"::S,"b"::S,"iwork"::S]$Lisp,_
	["x"::S,"resid"::S,"irank"::S,"iter"::S,"iwork"::S]$Lisp,_
	[["double"::S,"toler"::S,["x"::S,"nplus2"::S]$Lisp_
	,"resid"::S,["a"::S,"la"::S,"nplus2"::S]$Lisp,["b"::S,"m"::S]$Lisp]$Lisp_
	,["integer"::S,"m"::S,"la"::S,"nplus2"::S,"irank"::S_
	,"iter"::S,"ifail"::S,["iwork"::S,"m"::S]$Lisp]$Lisp_
	]$Lisp,_
	["x"::S,"resid"::S,"irank"::S,"iter"::S,"a"::S,"b"::S,"ifail"::S]$Lisp,_
	[([mArg::Any,laArg::Any,nplus2Arg::Any,tolerArg::Any,ifailArg::Any,aArg::Any,bArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

    e02zaf(pxArg:Integer,pyArg:Integer,lamdaArg:Matrix DoubleFloat,_
	muArg:Matrix DoubleFloat,mArg:Integer,xArg:Matrix DoubleFloat,_
	yArg:Matrix DoubleFloat,npointArg:Integer,nadresArg:Integer,_
	ifailArg:Integer): Result == 
	[(invokeNagman(NIL$Lisp,_
	"e02zaf",_
	["px"::S,"py"::S,"m"::S,"npoint"::S,"nadres"::S_
	,"ifail"::S,"lamda"::S,"mu"::S,"x"::S,"y"::S,"point"::S_
	,"adres"::S]$Lisp,_
	["point"::S,"adres"::S]$Lisp,_
	[["double"::S,["lamda"::S,"px"::S]$Lisp,["mu"::S,"py"::S]$Lisp_
	,["x"::S,"m"::S]$Lisp,["y"::S,"m"::S]$Lisp]$Lisp_
	,["integer"::S,"px"::S,"py"::S,"m"::S,"npoint"::S_
	,"nadres"::S,["point"::S,"npoint"::S]$Lisp,"ifail"::S,["adres"::S,"nadres"::S]$Lisp]$Lisp_
	]$Lisp,_
	["point"::S,"ifail"::S]$Lisp,_
	[([pxArg::Any,pyArg::Any,mArg::Any,npointArg::Any,nadresArg::Any,ifailArg::Any,lamdaArg::Any,muArg::Any,xArg::Any,yArg::Any ])_
	@List Any]$Lisp)$Lisp)_
	pretend List (Record(key:Symbol,entry:Any))]$Result

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<package NAGE02 NagFittingPackage>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
