%!PS-Adobe-2.0
%%DocumentFonts: Times-Roman
%%Creator: Axiom
%%CreationDate: today
%%Pages: 1
%%processing (hard) limit: 250 pts or 500 values for the operand stack.
%%EndComments

%------------------------------- prologue -------------------------------%
%-------------------------- support procedures --------------------------%

%--------- first create user dictionary with 100 entries max ------------%
%          (number can be changed to accomodate definitions)             %

100	dict	begin		%% using 100 entries in top level dictionary

/FontHeight     12 def

/inch
        {       72 mul }
        def

% yVal and hVal are necessary because the Xwindow display origin
% is at the upper left corner, while the postscript display
% origin is at the lower left hand corner.

/yVal		%% get Y value -- make upper left corner origin
        {       maxY sub abs }	%% maxY is viewWindow height
        def

/hVal		%% get H value -- used for displaying title text
        {       maxH sub abs }	%% maxH is viewWindow height+titleWindow height
        def

% loads in the font

/loadFont
        {       /Times-Roman findfont FontHeight scalefont setfont }
        def

% draws a rectangle with input operand: 
%		height
%		width
% notice that this function does not "draw" or ink the rectangle.
/drawRect
	{	1 index 1 add 0 rlineto		%% draw first side
                0 exch 1 add neg rlineto	%% draw second side
                1 add neg 0 rlineto		%% draw third side
                closepath }			%% draw fourth side
        def

% create a rectangle with input operand in the view window: 
%		y
%		x
%		height
%		width
% notice that this function does not "draw" or ink the rectangle.
/rectangle
        {       yVal moveto			%% set currentpoint for line
		drawRect }			%% draws the rectangle
        def

% These are global variables that every draw procedure uses
% THe operand should be as follows:
%		viewWindow width
%		viewWindow height
%		title height
/setDim
        {       /maxX exch def			%% width of display
                /maxY exch def			%% height of display
		/titleH exch def		%% height of title
		/maxH maxY titleH add def	%% height of display + title
        } def

%-------------------------- major procedures --------------------------%

/title		%% draws a rectangle around the title of picture
	{	gsave
		newpath
		moveto				%% lower left of title
                titleH 1 add 0 exch rlineto	%% draw first side
                1 add 0 rlineto			%% draw second side
                1 add neg 0 exch rlineto
		begin installGC stroke end	%% draw third side
		grestore }
	def

/drawFrame      %% draw display frame
        {	gsave
                newpath
                maxX maxY 0 0 rectangle
		begin installGC stroke end
                grestore }
        def

% updates the foreground color of existing graphics-context dictionary:
%		foreground color
%		dictionary name
/setForeground
	{	/FGcolor exch put }
	def

% updates the background color of existing graphics-context dictionary:
%		background color
%		dictionary name
/setBackground
	{	/BGcolor exch put }
	def

% updates the line width, line style, cap style, join style of
% existing graphics-context dictionary:
%		dictionary name
%		join style
%		cap style
%		line width
/setLineAttributes
	{	begin
		/JoinStyle exch def
		/CapStyle  exch def
		/LineWidth exch def
		end }
	def

% creates a graphics context dictionary with the following information:
%		/dictionary name
%		foreground color
%		background color
%		line width
%		cap style
%		join style
% this creates different graphical contexts for different drawing functions.
/makeDict
	{	5 dict 2 copy def begin	pop %% with dict name on top of stack
		/FGcolor   exch def	%% define drawing attributes
		/BGcolor   exch def	%% not heavily used
		/LineWidth exch def
		/CapStyle  exch def
		/JoinStyle exch def
		end }
	def

% makes the current dictionary attributes effective
% this function takes the values in the current dictionary to set the context
% these are the values currently being used: foreground, cap, join, and width
/installGC
	{
		FGcolor currentgray ne
		{FGcolor setgray} if		%% foreground color
		CapStyle currentlinecap ne
		{CapStyle setlinecap} if	%% cap style
		JoinStyle currentlinejoin ne
		{JoinStyle setlinejoin} if	%% join style
		LineWidth currentlinewidth ne
		{LineWidth setlinewidth} if }	%% line width
	def

% operand stack configuration in order to use psDrawFilled:
%		psFillPoly
%		XPoint[0].y
%		XPoint[0].x
%		n
%		...
%		XPoint[n].y
%		XPoint[n].x
%		graphics-context dictionary
% this draws a polygon by connecting all the points and fills the
% region with foreground color

/psFillPoly
        {	gsave
                newpath
                yVal moveto
                1 sub {
                        yVal lineto
                } repeat
		closepath
		begin installGC fill end	%% fills with foreground color
                grestore }
        def

% operand stack configuration in order to use psDrawLine:
%		psDrawLine
%		y0
%		x0
%		y1
%		x1
%		graphics-context dictionary
% this draws a line from (x0, y0) to (x1, y1).

/psDrawLine
        {	gsave
                newpath
                yVal moveto
                yVal lineto
		begin installGC stroke end
		grestore }
        def

% operand stack configuration in order to use psDrawLines:
%		psDrawLines
%		points[0].y
%		points[0].x
%		n
%		...
%		points[n].y
%		points[n].x
%		graphics-context dictionary
% this draws lines connecting all the points.

/psDrawLines
        {	gsave
                newpath
                yVal moveto
                1 sub {
                        yVal lineto
                } repeat
		begin installGC stroke end
		grestore }
        def

% operand stack configuration in order to use psDrawStr:
%		psDrawStr
%		y
%		x
%		string
%		graphics-context dictionary
% this function draws a text string at (x,y).

/psDrawStr
        {	gsave
		newpath
                loadFont
                yVal moveto
		exch begin installGC show end
                grestore }
        def

%-------------------------- script --------------------------%

% 1 inch 1 inch translate

   mark					%% mark bottom of our stack

	0	0	1
	1072693248	0	/globalGC1	makeDict
	0	0	1
	1072693248	0	/globalGC2	makeDict
	0	0	1
	1072693248	0	/trashGC	makeDict
	0	0	1
	1072693248	0	/componentGC	makeDict
	0	0	1
	1072693248	0	/opaqueGC	makeDict
	0	0	1
	1072693248	0	/renderGC	makeDict
	0	0	1
	1072693248	0	/globGC	makeDict
	0	0	1
	1072693248	0	/anotherGC	makeDict
	1	0	1
	1072693248	0	/renderGC	makeDict

    gsave	% save graphics state for clipping path

	1.000000	1.000000	scale

	24	303	300	setDim
	maxX maxY	0 0	rectangle	clip	% set clip path

	globalGC1	0.000000	setForeground
	globGC	0.000000	setForeground
	globalGC1	69	199	213	97	psDrawLine
	globGC	(X)	64	204	psDrawStr
	globalGC1	107.000000	setForeground
	globGC	107.000000	setForeground
	globalGC1	0.000000	setForeground
	globGC	0.000000	setForeground
	globalGC1	230	199	86	97	psDrawLine
	globGC	(Y)	235	204	psDrawStr
	globalGC1	107.000000	setForeground
	globGC	107.000000	setForeground
	globalGC1	0.000000	setForeground
	globGC	0.000000	setForeground
	globalGC1	149	57	149	203	psDrawLine
	globGC	(Z)	154	52	psDrawStr
	globalGC1	107.000000	setForeground
	globGC	107.000000	setForeground
	0	0	1	renderGC	setLineAttributes
	renderGC	0.000000	setForeground
	renderGC	0.750000	setForeground
	renderGC
	149	123
	43	195
	256	195
	4	149	123	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	149	123
	43	195
	256	195
	4	149	123	psDrawLines
	renderGC	0.437500	setForeground
	renderGC
	149	123
	8	71
	43	195
	4	149	123	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	149	123
	8	71
	43	195
	4	149	123	psDrawLines
	renderGC	0.500000	setForeground
	renderGC
	149	4
	8	71
	149	123
	4	149	4	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	149	4
	8	71
	149	123
	4	149	4	psDrawLines
	renderGC	0.687500	setForeground
	renderGC
	256	195
	149	4
	149	123
	4	256	195	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	256	195
	149	4
	149	123
	4	256	195	psDrawLines
	renderGC	0.687500	setForeground
	renderGC
	256	195
	43	195
	149	298
	4	256	195	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	256	195
	43	195
	149	298
	4	256	195	psDrawLines
	renderGC	0.750000	setForeground
	renderGC
	291	71
	149	4
	256	195
	4	291	71	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	291	71
	149	4
	256	195
	4	291	71	psDrawLines
	renderGC	0.625000	setForeground
	renderGC
	149	298
	291	71
	256	195
	4	149	298	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	149	298
	291	71
	256	195
	4	149	298	psDrawLines
	renderGC	0.812500	setForeground
	renderGC
	43	195
	149	180
	149	298
	4	43	195	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	43	195
	149	180
	149	298
	4	43	195	psDrawLines
	renderGC	0.625000	setForeground
	renderGC
	8	71
	149	180
	43	195
	4	8	71	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	8	71
	149	180
	43	195
	4	8	71	psDrawLines
	renderGC	0.500000	setForeground
	renderGC
	149	4
	149	180
	8	71
	4	149	4	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	149	4
	149	180
	8	71
	4	149	4	psDrawLines
	renderGC	0.687500	setForeground
	renderGC
	291	71
	149	180
	149	4
	4	291	71	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	291	71
	149	180
	149	4
	4	291	71	psDrawLines
	renderGC	0.687500	setForeground
	renderGC
	149	180
	291	71
	149	298
	4	149	180	psFillPoly
	renderGC	0.000000	setForeground
	renderGC
	149	180
	291	71
	149	298
	4	149	180	psDrawLines

    grestore	% restore graphics state


   cleartomark					%% clearing operand stack

end		%% pops mainDict from dictionary stack

showpage

%-------------------------- end --------------------------%
