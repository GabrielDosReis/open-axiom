%!IBM Personal Pageprinter (4216) Adapter Program V1.0
%%DocumentFonts: Times-Roman
%%Creator: Axiom
%%CreationDate: today
%%Pages: 1
%%processing (hard) limit: 250 pts or 500 values for the operand stack.
%%EndComments

%------------------------------- prologue -------------------------------%
%-------------------------- support procedures --------------------------%

%--------- first create user dictionary with 100 entries max ------------%
%          (number can be changed to accomodate definitions)             %

100	dict	begin		%% using 100 entries in top level dictionary

/FontHeight     12 def

/inch
        {       72 mul }
        def

% yVal and hVal are necessary because the Xwindow display origin
% is at the upper left corner, while the postscript display
% origin is at the lower left hand corner.

/yVal		%% get Y value -- make upper left corner origin
        {       maxY sub abs }	%% maxY is viewWindow height
        def

/hVal		%% get H value -- used for displaying title text
        {       maxH sub abs }	%% maxH is viewWindow height+titleWindow height
        def

% loads in the font

/loadFont
        {       /Times-Roman findfont FontHeight scalefont setfont }
        def

% draws a rectangle with input operand: 
%		height
%		width
% notice that this function does not "draw" or ink the rectangle.
/drawRect
	{	1 index 1 add 0 rlineto		%% draw first side
                0 exch 1 add neg rlineto	%% draw second side
                1 add neg 0 rlineto		%% draw third side
                closepath }			%% draw fourth side
        def

% create a rectangle with input operand in the view window: 
%		y
%		x
%		height
%		width
% notice that this function does not "draw" or ink the rectangle.
/rectangle
        {       yVal moveto			%% set currentpoint for line
		drawRect }			%% draws the rectangle
        def

% These are global variables that every draw procedure uses
% THe operand should be as follows:
%		viewWindow width
%		viewWindow height
%		title height
/setDim
        {       /maxX exch def			%% width of display
                /maxY exch def			%% height of display
		/titleH exch def		%% height of title
		/maxH maxY titleH add def	%% height of display + title
        } def

%-------------------------- major procedures --------------------------%

/title		%% draws a rectangle around the title of picture
	{	gsave
		newpath
		moveto				%% lower left of title
                titleH 1 add 0 exch rlineto	%% draw first side
                1 add 0 rlineto			%% draw second side
                1 add neg 0 exch rlineto
		begin installGC stroke end	%% draw third side
		grestore }
	def

/drawFrame      %% draw display frame
        {	gsave
                newpath
                maxX maxY 0 0 rectangle
		begin installGC stroke end
                grestore }
        def

% updates the foreground color of existing graphics-context dictionary:
%		foreground color
%		dictionary name
/setForeground
	{	/FGcolor exch put }
	def

% updates the background color of existing graphics-context dictionary:
%		background color
%		dictionary name
/setBackground
	{	/BGcolor exch put }
	def

% updates the line width, line style, cap style, join style of
% existing graphics-context dictionary:
%		dictionary name
%		join style
%		cap style
%		line width
/setLineAttributes
	{	begin
		/JoinStyle exch def
		/CapStyle  exch def
		/LineWidth exch def
		end }
	def

% creates a graphics context dictionary with the following information:
%		/dictionary name
%		foreground color
%		background color
%		line width
%		cap style
%		join style
% this creates different graphical contexts for different drawing functions.
/makeDict
	{	5 dict 2 copy def begin	pop %% with dict name on top of stack
		/FGcolor   exch def	%% define drawing attributes
		/BGcolor   exch def	%% not heavily used
		/LineWidth exch def
		/CapStyle  exch def
		/JoinStyle exch def
		end }
	def

% makes the current dictionary attributes effective
% this function takes the values in the current dictionary to set the context
% these are the values currently being used: foreground, cap, join, and width
/installGC
	{
		FGcolor currentgray ne
		{FGcolor setgray} if		%% foreground color
		CapStyle currentlinecap ne
		{CapStyle setlinecap} if	%% cap style
		JoinStyle currentlinejoin ne
		{JoinStyle setlinejoin} if	%% join style
		LineWidth currentlinewidth ne
		{LineWidth setlinewidth} if }	%% line width
	def

% operand stack configuration in order to use psDrawLine:
%		psDrawLine
%		y0
%		x0
%		y1
%		x1
%		graphics-context dictionary
% this draws a line from (x0, y0) to (x1, y1).

/psDrawLine
        {	gsave
                newpath
                yVal moveto
                yVal lineto
		begin installGC stroke end
		grestore }
        def

% operand stack configuration in order to use psDrawIStr:
%		psDrawIStr
%		window type: title or window
%		string
%		y
%		x
%		graphics-context dictionary
% it draws a text string in foreground color on top of bounding box of
% string, which is in background color.

/psDrawIStr
        {	gsave
		newpath					%% for rectangle
                loadFont

		/window exch def			%% get window type

                %% draw bounding box with background color
                /str exch def				%% get text string
                str stringwidth pop 1 sub               %% width
                FontHeight 1 sub                        %% height
                currentfont begin			%% get font height
                        FontBBox
                end
                /ypos exch def pop			%% define ypos
                neg ypos add /offset exch def pop
                /offset ypos offset div FontHeight mul def %% define offset
                /h exch def /w exch def			%% define h
                /y0 exch def				%% define y0
                /x0 exch def				%% define x0
                w h x0 y0 offset sub
		window (title) eq
		{hVal moveto drawRect}			%% draws in title window
		{rectangle} ifelse			%% draws in view window
		begin
                BGcolor setgray fill	%% set background box color

		x0 y0
		window (title) eq 
                {hVal}					%% print title text
                {yVal} ifelse				%% print window text
		moveto str 
                FGcolor setgray show			%% set text color
		end
                grestore }
        def

% operand stack configuration in order to use psFillArc:
%		psFillArc
%		y center of rectangle
%		x center of rectangle
%		angle2
%		angle1
%		width
%		height
%		y
%		x
%		graphics-context dictionary
% this draws and fills an arc whose origin is at x, y, and whose width
% and height specifies the rectangle which encases the arc.
% Origin is at upper left corner of rectangle.
% This function uses "scale" to make cricles and ellipses.
/psFillArc
        {	gsave
                newpath
		yVal moveto
                /sfactor 4 index 4 index div def
                1 sfactor scale
                6 5 roll			%%	 x on top of stack
                3 index 2 div add               %% define x origin
                6 5 roll			%%	 y on top of stack
                6 5 roll			%%	 h on top of stack
                2 div add yVal sfactor div      %% define y origin
                5 4 roll			%%	 w on top of stack
                2 div                           %% define radius
                5 3 roll			%%	 a1 a2 now on top
                1 index add
                arcn                            %% draw clockwise arc
                begin installGC fill end	%% fills with foreground color
                grestore }
        def

%-------------------------- script --------------------------%

% 1 inch 1 inch translate

   mark					%% mark bottom of our stack

	0	0	1
	1072693248	0	/globalGC1	makeDict
	0	0	1
	1072693248	0	/globalGC2	makeDict
	0	0	1
	1072693248	0	/trashGC	makeDict
	0	0	1
	1072693248	0	/globGC	makeDict
	0	0	1
	1072693248	0	/anotherGC	makeDict
	0	0	1
	1072693248	0	/graphGC	makeDict
	0	0	1
	1072693248	0	/unitGC	makeDict

    gsave	% save graphics state for clipping path

	24	259	256	setDim
	maxX maxY	0 0	rectangle	clip	% set clip path

	globalGC1	256	92	0	92	psDrawLine
	globalGC1	129	259	129	0	psDrawLine
	unitGC	185	94	185	90	psDrawLine
	unitGC	173	107	(1.00)	(window)	psDrawIStr
	unitGC	241	94	241	90	psDrawLine
	unitGC	229	107	(2.00)	(window)	psDrawIStr
	unitGC	73	94	73	90	psDrawLine
	unitGC	58	107	(-1.00)	(window)	psDrawIStr
	unitGC	16	94	16	90	psDrawLine
	unitGC	1	107	(-2.00)	(window)	psDrawIStr
	unitGC	131	17	127	17	psDrawLine
	unitGC	93	22	(1.00)	(window)	psDrawIStr
	unitGC	131	166	127	166	psDrawLine
	unitGC	84	171	(-1.00)	(window)	psDrawIStr
	unitGC	131	240	127	240	psDrawLine
	unitGC	84	245	(-2.00)	(window)	psDrawIStr
	globalGC1	96 68	3 3	0 360	97 69	psFillArc
	globalGC1	97	69	97	69	psDrawLine
	globalGC1	96 68	3 3	0 360	97 69	psFillArc
	globalGC1	90	71	97	69	psDrawLine
	globalGC1	89 70	3 3	0 360	90 71	psFillArc
	globalGC1	83	75	90	71	psDrawLine
	globalGC1	82 74	3 3	0 360	83 75	psFillArc
	globalGC1	77	84	83	75	psDrawLine
	globalGC1	76 83	3 3	0 360	77 84	psFillArc
	globalGC1	73	93	77	84	psDrawLine
	globalGC1	72 92	3 3	0 360	73 93	psFillArc
	globalGC1	70	102	73	93	psDrawLine
	globalGC1	69 101	3 3	0 360	70 102	psFillArc
	globalGC1	68	111	70	102	psDrawLine
	globalGC1	67 110	3 3	0 360	68 111	psFillArc
	globalGC1	67	120	68	111	psDrawLine
	globalGC1	66 119	3 3	0 360	67 120	psFillArc
	globalGC1	67	129	67	120	psDrawLine
	globalGC1	66 128	3 3	0 360	67 129	psFillArc
	globalGC1	67	129	67	129	psDrawLine
	globalGC1	66 128	3 3	0 360	67 129	psFillArc
	globalGC1	67	138	67	129	psDrawLine
	globalGC1	66 137	3 3	0 360	67 138	psFillArc
	globalGC1	68	147	67	138	psDrawLine
	globalGC1	67 146	3 3	0 360	68 147	psFillArc
	globalGC1	70	156	68	147	psDrawLine
	globalGC1	69 155	3 3	0 360	70 156	psFillArc
	globalGC1	73	165	70	156	psDrawLine
	globalGC1	72 164	3 3	0 360	73 165	psFillArc
	globalGC1	77	174	73	165	psDrawLine
	globalGC1	76 173	3 3	0 360	77 174	psFillArc
	globalGC1	83	183	77	174	psDrawLine
	globalGC1	82 182	3 3	0 360	83 183	psFillArc
	globalGC1	90	187	83	183	psDrawLine
	globalGC1	89 186	3 3	0 360	90 187	psFillArc
	globalGC1	97	189	90	187	psDrawLine
	globalGC1	96 188	3 3	0 360	97 189	psFillArc
	globalGC1	110	185	97	189	psDrawLine
	globalGC1	109 184	3 3	0 360	110 185	psFillArc
	globalGC1	116	180	110	185	psDrawLine
	globalGC1	115 179	3 3	0 360	116 180	psFillArc
	globalGC1	123	174	116	180	psDrawLine
	globalGC1	122 173	3 3	0 360	123 174	psFillArc
	globalGC1	130	165	123	174	psDrawLine
	globalGC1	129 164	3 3	0 360	130 165	psFillArc
	globalGC1	136	156	130	165	psDrawLine
	globalGC1	135 155	3 3	0 360	136 156	psFillArc
	globalGC1	140	147	136	156	psDrawLine
	globalGC1	139 146	3 3	0 360	140 147	psFillArc
	globalGC1	143	138	140	147	psDrawLine
	globalGC1	142 137	3 3	0 360	143 138	psFillArc
	globalGC1	144	129	143	138	psDrawLine
	globalGC1	143 128	3 3	0 360	144 129	psFillArc
	globalGC1	143	120	144	129	psDrawLine
	globalGC1	142 119	3 3	0 360	143 120	psFillArc
	globalGC1	141	111	143	120	psDrawLine
	globalGC1	140 110	3 3	0 360	141 111	psFillArc
	globalGC1	136	102	141	111	psDrawLine
	globalGC1	135 101	3 3	0 360	136 102	psFillArc
	globalGC1	131	93	136	102	psDrawLine
	globalGC1	130 92	3 3	0 360	131 93	psFillArc
	globalGC1	124	85	131	93	psDrawLine
	globalGC1	123 84	3 3	0 360	124 85	psFillArc
	globalGC1	117	78	124	85	psDrawLine
	globalGC1	116 77	3 3	0 360	117 78	psFillArc
	globalGC1	110	74	117	78	psDrawLine
	globalGC1	109 73	3 3	0 360	110 74	psFillArc
	globalGC1	104	70	110	74	psDrawLine
	globalGC1	103 69	3 3	0 360	104 70	psFillArc
	globalGC1	97	69	104	70	psDrawLine
	globalGC1	96 68	3 3	0 360	97 69	psFillArc
	globalGC1	214 16	3 3	0 360	215 17	psFillArc
	globalGC1	215	17	215	17	psDrawLine
	globalGC1	214 16	3 3	0 360	215 17	psFillArc
	globalGC1	213	21	215	17	psDrawLine
	globalGC1	212 20	3 3	0 360	213 21	psFillArc
	globalGC1	209	30	213	21	psDrawLine
	globalGC1	208 29	3 3	0 360	209 30	psFillArc
	globalGC1	206	39	209	30	psDrawLine
	globalGC1	205 38	3 3	0 360	206 39	psFillArc
	globalGC1	202	48	206	39	psDrawLine
	globalGC1	201 47	3 3	0 360	202 48	psFillArc
	globalGC1	199	57	202	48	psDrawLine
	globalGC1	198 56	3 3	0 360	199 57	psFillArc
	globalGC1	195	66	199	57	psDrawLine
	globalGC1	194 65	3 3	0 360	195 66	psFillArc
	globalGC1	192	75	195	66	psDrawLine
	globalGC1	191 74	3 3	0 360	192 75	psFillArc
	globalGC1	188	84	192	75	psDrawLine
	globalGC1	187 83	3 3	0 360	188 84	psFillArc
	globalGC1	185	93	188	84	psDrawLine
	globalGC1	184 92	3 3	0 360	185 93	psFillArc
	globalGC1	182	102	185	93	psDrawLine
	globalGC1	181 101	3 3	0 360	182 102	psFillArc
	globalGC1	179	111	182	102	psDrawLine
	globalGC1	178 110	3 3	0 360	179 111	psFillArc
	globalGC1	177	120	179	111	psDrawLine
	globalGC1	176 119	3 3	0 360	177 120	psFillArc
	globalGC1	176	129	177	120	psDrawLine
	globalGC1	175 128	3 3	0 360	176 129	psFillArc
	globalGC1	178	142	176	129	psDrawLine
	globalGC1	177 141	3 3	0 360	178 142	psFillArc
	globalGC1	180	151	178	142	psDrawLine
	globalGC1	179 150	3 3	0 360	180 151	psFillArc
	globalGC1	183	160	180	151	psDrawLine
	globalGC1	182 159	3 3	0 360	183 160	psFillArc
	globalGC1	186	169	183	160	psDrawLine
	globalGC1	185 168	3 3	0 360	186 169	psFillArc
	globalGC1	190	178	186	169	psDrawLine
	globalGC1	189 177	3 3	0 360	190 178	psFillArc
	globalGC1	194	187	190	178	psDrawLine
	globalGC1	193 186	3 3	0 360	194 187	psFillArc
	globalGC1	197	196	194	187	psDrawLine
	globalGC1	196 195	3 3	0 360	197 196	psFillArc
	globalGC1	201	205	197	196	psDrawLine
	globalGC1	200 204	3 3	0 360	201 205	psFillArc
	globalGC1	204	214	201	205	psDrawLine
	globalGC1	203 213	3 3	0 360	204 214	psFillArc
	globalGC1	208	223	204	214	psDrawLine
	globalGC1	207 222	3 3	0 360	208 223	psFillArc
	globalGC1	211	232	208	223	psDrawLine
	globalGC1	210 231	3 3	0 360	211 232	psFillArc
	globalGC1	215	241	211	232	psDrawLine
	globalGC1	214 240	3 3	0 360	215 241	psFillArc

    grestore	% restore graphics state


   cleartomark					%% clearing operand stack

end		%% pops mainDict from dictionary stack

showpage

%-------------------------- end --------------------------%
