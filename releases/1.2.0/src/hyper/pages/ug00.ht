% Copyright The Numerical Algorithms Group Limited 1992-94. All rights reserved.
% !! DO NOT MODIFY THIS FILE BY HAND !! Created by ht.awk.

\texht{\setcounter{chapter}{-1}}{} % 

%
\newcommand{\ugWhatsNewTwoTwoTitle}{What's New in \Language{} Version 2.2}
\newcommand{\ugWhatsNewTwoTwoNumber}{0.}
%
% =====================================================================
\begin{page}{ugWhatsNewTwoTwoPage}{0. What's New in \Language{} Version 2.2}
% =====================================================================
\beginscroll

\beginmenu
    \menudownlink{{0.1. \axiomxl{} compiler - Enhancements and Additions}}{ugTwoTwoAldorPage}
    \menudownlink{{0.2. New polynomial domains and algorithms}}{ugTwoTwoPolynomialsPage}
    \menudownlink{{0.3. Enhancements to HyperDoc and Graphics}}{ugTwoTwoHyperdocPage}
    \menudownlink{{0.4. Enhancements to NAGLink}}{ugTwoTwoNAGLinkPage}
    \menudownlink{{0.5. Enhancements to the Lisp system}}{ugTwoTwoCCLPage}
\endmenu
\endscroll
\autobuttons
\end{page}
%
%
\newcommand{\ugTwoTwoAldorTitle}{\axiomxl{} compiler - Enhancements and Additions}
\newcommand{\ugTwoTwoAldorNumber}{0.1.}
%
% =====================================================================
\begin{page}{ugTwoTwoAldorPage}{0.1. \axiomxl{} compiler - Enhancements and Additions}
% =====================================================================
\beginscroll

Numerous bug fixes and improvements have been implemented in version 1.1.12
of \axiomxl{} which is included in this release. You may also notice the name
{\it Aldor} being used when referring to \axiomxl{}.

The format of {\bf .ao} files has changed somewhat so you need
to recompile your {\bf .as} source files.

An updated User's Guide is included for on-line use. We provide
TeX {\bf .dvi} format (including hyper-references), Acrobat {\bf .pdf}
format, PostScript {\bf .ps} format and plain ASCII {bf .txt}. 
An up-to-date {\bf .dvi}
viewer should be able to allow you to follow the cross-references.
These files can be found in 
{\bf \env{AXIOM}/compiler/doc/axlugII.*}.

An exception mechanism has been implemented. You can now throw and 
catch exceptions which are fully-fledged domains that can carry information.
See Chapter 31 in the on-line guide for details.

Support for linking with Fortran-77 code has been added. You can call
Fortran-77 code from {\it Aldor}  and vice-versa. See Chapter 32
in the on-line guide for details.

The \spad{ref} keyword has been added. You must use \spad{_ref} to 
enable use as an identifier.

A generic configurable C compiler and linker driver i{\bf unicl} has been 
implemented. You can now select C compiler and linker options with
greater ease and you can give names to specific configurations. 
See Chapter 28 in the on-line guide for details.

There is now support for accessing IEEE floating-point rounding modes
and exception flags. You must ensure however that your C compiler 
and linker will respect the IEEE standard by enabling the appropriate
options through {\bf unicl}. 
See BasicIeeeControlPackage (26.7) in the on-line guide.

Special runtime libraries ({\bf libfoam-gmp.a}) have been prepared to enable
a drop-in replacement of Aldor's big-integer arithmetic with the GNU gmp
big-integer library. The executable script {\bf axiomxl.gmp} (in the same place
as {\bf axiomxl}) expects the {\bf GmpDir} environment variable to be set 
to the directory where a compiled GNU gmp library resides ({\bf libgmp.a}) and 
arranges for the appropriate libraries to be linked in when generating 
a stand-alone executable. 

The language-defined type TrailingArray has been introduced. See 
TrailingArray (13.7) in the on-line guide.

The supplied library {\bf libaxllib.al}, supporting stand-alone programs, 
has been updated. Automatically
generated documentation can be found in Chapters 25 and 26 of the on-line
guide.



\endscroll
\autobuttons
\end{page}
%
%
\newcommand{\ugTwoTwoPolynomialsTitle}{New polynomial domains and algorithms}
\newcommand{\ugTwoTwoPolynomialsNumber}{0.2.}
%
% =====================================================================
\begin{page}{ugTwoTwoPolynomialsPage}{0.2. New polynomial domains and algorithms}
% =====================================================================
\beginscroll

Univariate polynomial factorisation over the integers has been 
enhanced by updates to the \spadtype{GaloisGroupFactorizer} type
and friends from Frederic Lehobey (Frederic.Lehobey@lifl.fr, University of 
Lille I, France).

The package constructor \spadtype{PseudoRemainderSequence}
provides efficient algorithms by Lionel Ducos 
(Lionel.Ducos@mathlabo.univ-poitiers.fr, University of Poitiers, France) 
for computing sub-resultants.
This leads to a speed up in many places in \Language{} where 
sub-resultants are computed (polynomial system solving, 
algebraic factorization, integration).

Based on this package, the domain constructor 
\spadtype{NewSparseUnivariatePolynomial}
extends the constructor \spadtype{SparseUnivariatePolynomial}.
In a similar way, the \spadtype{NewSparseMultivariatePolynomial} extends
the constructor \spadtype{SparseUnivariatePolynomial};
it also provides some additional operations related 
to polynomial system solving by means of triangular sets.

Several domain constructors implement
regular triangular sets (or regular chains).
Among them \spadtype{RegularTriangularSet}
and \spadtype{SquareFreeRegularTriangularSet}.
They also implement an algorithm by Marc Moreno Maza (marc@nag.co.uk, NAG)
for computing triangular decompositions of polynomial systems.
This method is refined in the package \spadtype{LazardSetSolvingPackage}
in order to produce decompositions by means of Lazard triangular sets.
For the case of polynomial systems with finitely many solutions,
these decompositions can also be computed by
the package \spadtype{LexTriangularPackage}.

The domain constructor \spadtype{RealClosure} by Renaud Rioboo
(Renaud.Rioboo@lip6.fr, University of Paris 6, France)
provides the real closure of an ordered field.
The implementation is based on interval arithmetic.
Moreover, the design of this constructor and its related 
packages allows an easy use of other codings for real algebraic numbers.

Based on triangular decompositions and the \spadtype{RealClosure} constructor,
the package \spadtype{ZeroDimensionalSolvePackage}
provides operations for computing symbolically the real or complex roots
of polynomial systems with finitely many solutions.

Polynomial arithmetic with non-commutative variables 
has been improved too by a contribution of Michel Petitot
(Michel.Petitot@lifl.fr, University of Lille I, France).
The domain constructors \spadtype{XRecursivePolynomial}
and \spadtype{XDistributedPolynomial} provide
recursive and distributed representations for these polynomials.
They are the non-commutative equivalents for
the \spadtype{SparseMultivariatePolynomial} 
and \spadtype{DistributedMultivariatePolynomial} constructors.
The constructor \spadtype{LiePolynomial} implement Lie
polynomials in the Lyndon basis.
The constructor \spadtype{XPBWPolynomial} manage polynomials
with non-commutative variables in
the \texht{Poincar\'e}{Poincare\space{-1}'}-Birkhoff-Witt basis from the Lyndon basis.
This allows to compute in the Lie Group associated with a
free nilpotent Lie algebra by using the \spadtype{LieExponentials}
domain constructor.



\endscroll
\autobuttons
\end{page}
%
%
\newcommand{\ugTwoTwoHyperdocTitle}{Enhancements to HyperDoc and Graphics}
\newcommand{\ugTwoTwoHyperdocNumber}{0.3.}
%
% =====================================================================
\begin{page}{ugTwoTwoHyperdocPage}{0.3. Enhancements to HyperDoc and Graphics}
% =====================================================================
\beginscroll

From this version of AXIOM onwards, the pixmap format used to save graphics
images in color and to display them in HyperDoc has been changed to the 
industry-standard XPM format. See {\tt ftp://koala.inria.fr/pub/xpm}.

\endscroll
\autobuttons
\end{page}
%
%
\newcommand{\ugTwoTwoNAGLinkTitle}{Enhancements to NAGLink}
\newcommand{\ugTwoTwoNAGLinkNumber}{0.4.}
%
% =====================================================================
\begin{page}{ugTwoTwoNAGLinkPage}{0.4. Enhancements to NAGLink}
% =====================================================================
\beginscroll

This version of AXIOM incorporates the AXIOM/NAG Numerical Analyst (ANNA)
software developed in the University of Bath. ANNA is an expert system which 
uses AXIOM algebra functionality in choosing the most appropriate NAG Fortran Library
routine for a particular problem. Documentation is provided on-line on the main HyperDoc page.


 
\endscroll
\autobuttons
\end{page}
%
%
\newcommand{\ugTwoTwoCCLTitle}{Enhancements to the Lisp system}
\newcommand{\ugTwoTwoCCLNumber}{0.5.}
%
% =====================================================================
\begin{page}{ugTwoTwoCCLPage}{0.5. Enhancements to the Lisp system}
% =====================================================================
\beginscroll

In this version of AXIOM, certain Library operations have been accelerated by converting 
their Lisp implementations into kernel operations implemented directly in C. Here is a list
of the accelerated operations. The given names encode the abbreviated type the operation 
comes from, the name of the operation and, in the case of exported functions, an encoded
signature and numerical index. 

\begin{verbatim}
|A1AGG-;=;2AB;28|
|A1AGG-;copy;2A;19|
|A1AGG-;sort!;M2A;2|
|ABELGRP-;*;Nni2S;3|
|ABELGRP-;-;3S;1|
|ABELMON-;*;Pi2S;2|
|ABELMON-;zero?;SB;1|
|AGG-;empty?;SB;3|
|AGG-;size?;SNniB;6|
|ALIST;keys;$L;6|
|ALIST;search;Key$U;15|
|ARR2CAT-;copy;2S;10|
|BOP;<;2$B;29|
|BOP;=;2$B;27|
|BOP;has?;$SB;9|
|BOP;is?;$SB;1|
|BOP;name;$S;2|
|BOP;properties;$Al;3|
|BOP;property;$SU;7|
|BOP;weight;$Nni;28|
|COMPCAT-;*;R2S;18|
|COMPCAT-;-;2S;17|
|COMPCAT-;=;2SB;15|
|COMPCAT-;exquo;SRU;46|
|COMPCAT-;recip;SU;48|
|COMPCAT-;rem;3S;53|
|COMPCAT-;unitNormal;SR;49|
|COMPLEX;*;3$;10|
|COMPLEX;+;3$;9|
|COMPLEX;coerce;R$;5|
|COMPLEX;exquo;2$U;11|
|COMPLEX;one?;$B;4|
|COMPLEX;zero?;$B;3|
|DIRPROD;<;2$B;18|
|DIRPROD;subtractIfCan;2$U;14|
|ELAGG-;removeDuplicates;2A;12|
|ELTAGG-;qelt;SDomIm;1|
|ELTAGG-;qsetelt!;SDom2Im;2|
|EUCDOM-;gcd;3S;5|
|EUCDOM-;unitNormalizeIdealElt|
|EXPR;*;3$;11|
|EXPR;+;3$;12|
|EXPR;-;2$;8|
|EXPR;/;3$;14|
|EXPR;=;2$B;21|
|EXPR;algkernels!0|
|EXPR;algkernels|
|EXPR;coerce;I$;10|
|EXPR;coerce;Smp$;24|
|EXPR;commonk0|
|EXPR;commonk|
|EXPR;denom;$Smp;23|
|EXPR;numer;$Smp;22|
|EXPR;reduc|
|EXPR;zero?;$B;7|
|FACUTIL;lowerPolynomial;SupSup;1|
|FAMR-;coefficients;SL;4|
|FAMR-;ground;SR;2|
|FFP;*;3$;21|
|FFP;+;3$;22|
|FFP;-;3$;23|
|FFP;=;2$B;24|
|FIELD-;/;3S;11|
|FIELD-;inv;2S;4|
|FLAGG-;sort!;2A;8|
|FLAGG-;sort;M2A;6|
|FLASORT;QuickSort|
|FLASORT;partition|
|FLASORT;quickSort;M2V;1|
|FM;*;R2$;1|
|FRAC;*;3$;18|
|FRAC;*;I2$;19|
|FRAC;+;3$;16|
|FRAC;=;2$B;22|
|FRAC;cancelGcd|
|FRAC;coerce;S$;1|
|FRAC;normalize|
|FRAC;one?;$B;23|
|FRAC;recip;$U;13|
|FRAC;zero?;$B;2|
|FSAGG-;brace;LA;3|
|GDMP;univariate;$OvlSup;21|
|HDP;<;2$B;1|
|IARRAY1;#;$Nni;1|
|IARRAY1;elt;$IS;16|
|IARRAY1;fill!;$S$;2|
|IARRAY1;map;M3$;8|
|IARRAY1;maxIndex;$I;13|
|IARRAY1;minIndex;$I;3|
|IARRAY1;new;NniS$;5|
|IARRAY1;qelt;$IS;14|
|IARRAY1;qsetelt!;$I2S;15|
|IARRAY1;setelt;$I2S;17|
|IDPAM;+;3$;4|
|IDPAM;map;M2$;7|
|IDPAM;monomial;AS$;6|
|IDPO;=;2$B;1|
|IFARRAY;#;$Nni;4|
|IFARRAY;concat!;$S$;21|
|IFARRAY;elt;$IS;17|
|IFARRAY;empty;$;3|
|IFARRAY;growAndFill|
|IFARRAY;growWith|
|IFARRAY;maxIndex;$I;6|
|IFARRAY;minIndex;$I;7|
|IFARRAY;new;NniS$;8|
|IFARRAY;removeDuplicates!;2$;30|
|IFARRAY;setelt;$I2S;18|
|IIARRAY2;elt;$2IR;11|
|IIARRAY2;empty?;$B;1|
|IIARRAY2;maxColIndex;$I;7|
|IIARRAY2;maxRowIndex;$I;6|
|IIARRAY2;minColIndex;$I;5|
|IIARRAY2;minRowIndex;$I;4|
|IIARRAY2;ncols;$Nni;9|
|IIARRAY2;nrows;$Nni;8|
|IIARRAY2;qelt;$2IR;10|
|IIARRAY2;qsetelt!;$2I2R;12|
|ILIST;concat!;3$;25|
|ILIST;copy;2$;20|
|ILIST;empty;$;6|
|ILIST;first;$S;4|
|ILIST;member?;S$B;24|
|ILIST;mergeSort|
|ILIST;minIndex;$I;18|
|ILIST;removeDuplicates!;2$;26|
|ILIST;rest;$Nni$;19|
|ILIST;sort!;M2$;27|
|ILIST;split!;$I$;29|
|IMATLIN;rowEchelon;2M;3|
|INS-;symmetricRemainder;3S;27|
|INT;exquo;2$U;44|
|INT;one?;$B;2|
|INT;positiveRemainder;3$;23|
|INT;unitNormal;$R;47|
|INTDOM-;unitCanonical;2S;2|
|ISTRING;<;2$B;6|
|KDAGG-;key?;KeySB;1|
|KERNEL;<;2$B;14|
|KERNEL;=;2$B;13|
|KERNEL;B2Z|
|KERNEL;argument;$L;6|
|KERNEL;operator;$Bo;5|
|KERNEL;position;$Nni;7|
|KERNEL;triage|
|LO;-;2$;3|
|LO;=;2$B;4|
|LSAGG-;<;2AB;25|
|LSAGG-;reduce;MA2S;16|
|LSAGG-;select!;M2A;5|
|MATCAT-;*;3S;29|
|MATCAT-;*;S2Col;32|
|MDDFACT;reduction!0|
|MDDFACT;reduction|
|MODRING;reduce;RMod$;6|
|MODRING;zero?;$B;10|
|MONOID-;one?;SB;2|
|NNI;subtractIfCan;2$U;3|
|NSMP;mvar;$VarSet;5|
|OVAR;<;2$B;10|
|PERMGRP;inv|
|PERMGRP;orbitWithSvc|
|PERMGRP;testIdentity|
|PERMGRP;times|
|PGCD;better|
|PGCD;gcd;3P;15|
|PGCD;gcdTermList|
|POLYCATQ;variables;FL;5|
|PR;*;3$;20|
|PR;addm!|
|PR;coerce;R$;12|
|PR;degree;$E;4|
|PR;leadingCoefficient;$R;6|
|PR;reductum;2$;8|
|PRIMARR;#;$Nni;1|
|PRIMARR;fill!;$S$;9|
|PRIMARR;new;NniS$;4|
|PRTITION;<;2$B;5|
|REPSQ;expt;SPiS;1|
|RING-;coerce;IS;1|
|SAE;*;3$;15|
|SAE;+;3$;13|
|SAE;-;2$;14|
|SAE;=;2$B;12|
|SAE;reduce;UP$;11|
|SCACHE;enterInCache;SMS;5|
|SET;construct;L$;19|
|SET;empty;$;4|
|SGROUP-;**;SPiS;1|
|SINT;zero?;$B;33|
|SMP;*;3$;29|
|SMP;*;R2$;25|
|SMP;+;3$;26|
|SMP;-;2$;23|
|SMP;=;2$B;28|
|SMP;coerce;R$;20|
|SMP;coerce;VarSet$;7|
|SMP;exquo;2$U;35|
|SMP;exquo;2$U;36|
|SMP;gcd;3$;41|
|SMP;gcd;3$;44|
|SMP;gcd;3$;48|
|SMP;gcd;3$;51|
|SMP;ground?;$B;15|
|SMP;leadingCoefficient;$R;73|
|SMP;mainVariable;$U;59|
|SMP;one?;$B;4|
|SMP;retract;$R;55|
|SMP;unitNormal;$R;31|
|SMP;variables;$L;58|
|SMP;zero?;$B;3|
|STAGG-;c2|
|STAGG-;concat;3A;7|
|STAGG-;elt;AIS;5|
|STAGG-;first;ANniA;3|
|STREAM2;map;MSS;2|
|STREAM2;mapp!0|
|STREAM2;mapp|
|STREAM;empty;$;33|
|STREAM;lazyEval|
|STREAM;setfrst!|
|STREAM;setrst!|
|STTAYLOR;+;3S;2|
|SUP;exquo;2$U;19|
|SUP;exquo;2$U;20|
|SUP;fmecg;$NniR2$;21|
|SUP;ground?;$B;3|
|SUP;monicDivide;2$R;28|
|URAGG-;tail;2A;16|
|ZMOD;*;3$;30|
|ZMOD;+;3$;32|
|ZMOD;-;2$;36|
|ZMOD;-;3$;33|
\end{verbatim}
\endscroll
\autobuttons
\end{page}
%
