\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra Makefile}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{Adding new algebra}
This is a complex process by its very nature. Developers and Maintainers
who undertake the process need to understand quite a lot of detail. The
ultimate steps to add algebra are tedious but simple. Note that only
algebra code that gets shipped with the system needs to undergo this
process. User code can be compiled once the distributed algebra exists
and does not need either this Makefile or this installation process.

Since understanding is the key to making correct changes to this file
I'll work on explaining the details of why things need to exist. 

The first idea that you need to understand is the overall process
of adding algebra code. Lets assume that you have a brand new spad
file, called [[foo.spad]] containing a simple domain [[BAR]]. The
steps in the process of adding this file are:
\begin{enumerate}
\item Find out where the algebra code lives in the lattice.

You do this by 
\begin{enumerate}
\item starting a new interpsys session
\item collecting all the names of the algebra files BAR requires
\item determining which layer each of the required files resides
\item determine the highest layer (e.g. 14) that contains the required files
\end{enumerate}

\item insert the documentation into the next layer (e.g. 15)
\item insert the [[${OUT}/BAR.o]] file into the layer's file list
\item create a new subsection for the [[foo.spad]] file
\item add a stanza to extract [[foo.spad]] from [[foo.spad.pamphlet]]
\item add a stanza to extract [[foo.dvi]] from [[foo.spad.pamphlet]]
\item add a stanza to compile [[foo.spad]] to get [[BAR.lsp]]
\item add a stanza to compile [[BAR.lsp]] to get [[BAR.o]]
\item add a stanza to copy [[BAR.o]] to the final algebra directory 
\item add the 5 chunk names into the default Makefile section
\end{enumerate}

\section{Rebuilding the algebra from scratch}
Compile order is important. Here we try to define the ordered lattice
of spad file dependencies. However this is, in reality, a graph rather
than a lattice. In order to break cycles in this graph we explicitly
cache a few of the intermediate generated lisp code for certain files.
These are marked throughout (both here and in the various pamphlet
files) with the word {\bf BOOTSTRAP}.

If we take a cycle such as {\bf RING} we discover that in order to
compile the spad code we must load the compiled definition of {\bf RING}.
In this case we must compile the cached lisp code before we try to 
compile the spad file.

The cycle for {\bf SETCAT} is longer consisting of: {\bf SETCAT} needs
{\bf SINT} needs {\bf UFD} needs {\bf GCDDOM} needs {\bf COMRING} needs
{\bf RING} needs {\bf RNG} needs {\bf ABELGRP} needs {\bf CABMON} needs
{\bf ABELMON} needs {\bf ABELSG} needs {\bf SETCAT}.

It is highly recommended that you try to become a developer of Axiom
and read the archived mailing lists before you decide to change a
cached file. In the fullness of time we will rewrite the whole algebra
structure into a proper lattice if possible. Alternatively we'll
reimplement the compiler to handle graphs. Or deeply adopt the
extensible domains. Whatever we do will be much discussed (and cause
much disgust) around the campfire. If you come up with a brilliant
plan that gets adopted we'll even inscribe your name on a log and add
it to the fire.

In the code that follows we find the categories, packages and domains
that compile with no dependencies and call this set ``layer 0''. Next
we find the categories, packages and domains that will compile using
only ``layer 0'' code and call this ``layer 1''. We walk up the
lattice in this fashion adding layers. Note that at layer 3 this
process runs into cycles and we create the ``layer 3 bootstrap''
stanzas before continuing upward.

I used to have code that would automatically generate this lattice but
it got lost in the move from IBM to NAG. The current information was
hand generated during the coding of this Makefile.  Except for the
bootstrap files most of the stanzas have the dependency graph encoded
in the precondition lists for each makefile stanza. Thus we can see
that building the package {\bf ANY1} requires the category {\bf TYPE}.

\begin{verbatim}
${MID}/ANY1.NRLIB: ${OUT}/TYPE.o ${MID}/ANY1.spad
\end{verbatim}

This information also exists in the comments before each layer.
Ordinary users of Axiom won't need to know this. However developers
of the standard system should strive to keep this information up to
date and correct. The spad compiler will tell you this information
as part of the compile.

Once we reach the point in the lattice where all of the individual
categories, domains and packages in each spad file have been compiled
we can start building the system directly from the whole spad code
files rather than the individual domains.
\section{Pamphlets (category, packages, and domains)}
DONE acplot.spad.pamphlet
DONE )abbrev package REALSOLV RealSolvePackage
DONE )abbrev domain ACPLOT PlaneAlgebraicCurvePlot
DONE aggcat2.spad.pamphlet
DONE )abbrev package FLAGG2 FiniteLinearAggregateFunctions2
DONE )abbrev package FSAGG2 FiniteSetAggregateFunctions2
DONE aggcat.spad.pamphlet
DONE )abbrev category AGG Aggregate
DONE )abbrev category HOAGG HomogeneousAggregate
DONE )abbrev category CLAGG Collection
DONE )abbrev category BGAGG BagAggregate
DONE )abbrev category SKAGG StackAggregate
DONE )abbrev category QUAGG QueueAggregate
DONE )abbrev category DQAGG DequeueAggregate
DONE )abbrev category PRQAGG PriorityQueueAggregate
DONE )abbrev category DIOPS DictionaryOperations
DONE )abbrev category DIAGG Dictionary
DONE )abbrev category MDAGG MultiDictionary
DONE )abbrev category SETAGG SetAggregate
DONE )abbrev category FSAGG FiniteSetAggregate
DONE )abbrev category MSETAGG MultisetAggregate
DONE )abbrev category OMSAGG OrderedMultisetAggregate
DONE )abbrev category KDAGG KeyedDictionary
DONE )abbrev category ELTAB Eltable
DONE )abbrev category ELTAGG EltableAggregate
DONE )abbrev category IXAGG IndexedAggregate
DONE )abbrev category TBAGG TableAggregate
DONE )abbrev category RCAGG RecursiveAggregate
DONE )abbrev category BRAGG BinaryRecursiveAggregate
DONE )abbrev category DLAGG DoublyLinkedAggregate
DONE )abbrev category URAGG UnaryRecursiveAggregate
DONE )abbrev category STAGG StreamAggregate
DONE )abbrev category LNAGG LinearAggregate
DONE )abbrev category FLAGG FiniteLinearAggregate
DONE )abbrev category A1AGG OneDimensionalArrayAggregate
DONE )abbrev category ELAGG ExtensibleLinearAggregate
DONE )abbrev category LSAGG ListAggregate
DONE )abbrev category ALAGG AssociationListAggregate
DONE )abbrev category SRAGG StringAggregate
DONE )abbrev category BTAGG BitAggregate
algcat.spad.pamphlet
DONE )abbrev category FINRALG FiniteRankAlgebra
DONE )abbrev category FRAMALG FramedAlgebra
DONE )abbrev category MONOGEN MonogenicAlgebra
)abbrev package CPIMA CharacteristicPolynomialInMonogenicalAlgebra
DONE )abbrev package NORMMA NormInMonogenicAlgebra
DONE algext.spad.pamphlet
DONE )abbrev domain SAE SimpleAlgebraicExtension
DONE algfact.spad.pamphlet
DONE )abbrev package IALGFACT InnerAlgFactor
DONE )abbrev package SAEFACT SimpleAlgebraicExtensionAlgFactor
DONE )abbrev package RFFACT RationalFunctionFactor
DONE )abbrev package SAERFFC SAERationalFunctionAlgFactor
DONE )abbrev package ALGFACT AlgFactor
DONE algfunc.spad.pamphlet
DONE )abbrev category ACF AlgebraicallyClosedField
DONE )abbrev category ACFS AlgebraicallyClosedFunctionSpace
DONE )abbrev package AF AlgebraicFunction
DONE allfact.spad.pamphlet
DONE )abbrev package MRATFAC MRationalFactorize
DONE )abbrev package MPRFF MPolyCatRationalFunctionFactorizer
DONE )abbrev package MPCPF MPolyCatPolyFactorizer
DONE )abbrev package GENMFACT GeneralizedMultivariateFactorize
DONE )abbrev package RFFACTOR RationalFunctionFactorizer
DONE )abbrev package SUPFRACF SupFractionFactorizer
DONE alql.spad.pamphlet
DONE )abbrev domain DLIST DataList
DONE )abbrev domain ICARD IndexCard
DONE )abbrev domain DBASE Database
DONE )abbrev domain QEQUAT QueryEquation
DONE )abbrev package MTHING MergeThing
DONE )abbrev package OPQUERY OperationsQuery
DONE annacat.spad.pamphlet
DONE )abbrev domain NIPROB NumericalIntegrationProblem
DONE )abbrev domain ODEPROB NumericalODEProblem
DONE )abbrev domain PDEPROB NumericalPDEProblem
DONE )abbrev domain OPTPROB NumericalOptimizationProblem
DONE )abbrev category NUMINT NumericalIntegrationCategory
DONE )abbrev category ODECAT OrdinaryDifferentialEquationsSolverCategory
DONE )abbrev category PDECAT PartialDifferentialEquationsSolverCategory
DONE )abbrev category OPTCAT NumericalOptimizationCategory
DONE any.spad.pamphlet
DONE )abbrev domain NONE None
DONE )abbrev package NONE1 NoneFunctions1
DONE )abbrev domain ANY Any
DONE )abbrev package ANY1 AnyFunctions1
DONE array1.spad.pamphlet
DONE )abbrev domain PRIMARR PrimitiveArray
DONE )abbrev package PRIMARR2 PrimitiveArrayFunctions2
DONE )abbrev domain TUPLE Tuple
DONE )abbrev domain IFARRAY IndexedFlexibleArray
DONE )abbrev domain FARRAY FlexibleArray
DONE )abbrev domain IARRAY1 IndexedOneDimensionalArray
DONE )abbrev domain ARRAY1 OneDimensionalArray
DONE )abbrev package ARRAY12 OneDimensionalArrayFunctions2
DONE array2.spad.pamphlet
DONE )abbrev category ARR2CAT TwoDimensionalArrayCategory
DONE )abbrev domain IIARRAY2 InnerIndexedTwoDimensionalArray
DONE )abbrev domain IARRAY2 IndexedTwoDimensionalArray
DONE )abbrev domain ARRAY2 TwoDimensionalArray
DONE asp.spad.pamphlet
DONE )abbrev domain ASP1 Asp1
DONE )abbrev domain ASP10 Asp10
DONE )abbrev domain ASP12 Asp12
DONE )abbrev domain ASP19 Asp19
DONE )abbrev domain ASP20 Asp20
DONE )abbrev domain ASP24 Asp24
DONE )abbrev domain ASP27 Asp27
DONE )abbrev domain ASP28 Asp28
DONE )abbrev domain ASP29 Asp29
DONE )abbrev domain ASP30 Asp30
DONE )abbrev domain ASP31 Asp31
DONE )abbrev domain ASP33 Asp33
DONE )abbrev domain ASP34 Asp34
DONE )abbrev domain ASP35 Asp35
DONE )abbrev domain ASP4 Asp4
DONE )abbrev domain ASP41 Asp41
DONE )abbrev domain ASP42 Asp42
DONE )abbrev domain ASP49 Asp49
DONE )abbrev domain ASP50 Asp50
DONE )abbrev domain ASP55 Asp55
DONE )abbrev domain ASP6 Asp6
DONE )abbrev domain ASP7 Asp7
DONE )abbrev domain ASP73 Asp73
DONE )abbrev domain ASP74 Asp74
DONE )abbrev domain ASP77 Asp77
DONE )abbrev domain ASP78 Asp78
DONE )abbrev domain ASP8 Asp8
DONE )abbrev domain ASP80 Asp80
DONE )abbrev domain ASP9 Asp9
DONE attreg.spad.pamphlet
DONE )abbrev category ATTREG AttributeRegistry
axtimer.as.pamphlet
DONE bags.spad.pamphlet
DONE )abbrev domain STACK Stack
DONE )abbrev domain ASTACK ArrayStack
DONE )abbrev domain QUEUE Queue
DONE )abbrev domain DEQUEUE Dequeue
DONE )abbrev domain HEAP Heap
DONE bezout.spad.pamphlet
DONE )abbrev package BEZOUT BezoutMatrix
DONE boolean.spad.pamphlet
DONE )abbrev domain REF Reference
DONE )abbrev category LOGIC Logic
DONE )abbrev domain BOOLEAN Boolean
DONE )abbrev domain IBITS IndexedBits
DONE )abbrev domain BITS Bits
DONE brill.spad.pamphlet
DONE )abbrev package BRILL BrillhartTests
DONE c02.spad.pamphlet
DONE )abbrev package NAGC02 NagPolynomialRootsPackage
DONE c05.spad.pamphlet
DONE )abbrev package NAGC05 NagRootFindingPackage
DONE c06.spad.pamphlet
DONE )abbrev package NAGC06 NagSeriesSummationPackage
DONE card.spad.pamphlet
DONE )abbrev domain CARD CardinalNumber
DONE carten.spad.pamphlet
DONE )abbrev category GRMOD GradedModule
DONE )abbrev category GRALG GradedAlgebra
DONE )abbrev domain CARTEN CartesianTensor
DONE )abbrev package CARTEN2 CartesianTensorFunctions2
DONE catdef.spad.pamphlet
DONE )abbrev category ABELGRP AbelianGroup
DONE )abbrev category ABELMON AbelianMonoid
DONE )abbrev category ABELSG AbelianSemiGroup
DONE )abbrev category ALGEBRA Algebra
DONE )abbrev category BASTYPE BasicType
DONE )abbrev category BMODULE BiModule
DONE )abbrev category CABMON CancellationAbelianMonoid
DONE )abbrev category CHARNZ CharacteristicNonZero
DONE )abbrev category CHARZ CharacteristicZero
DONE )abbrev category COMRING CommutativeRing
DONE )abbrev category DIFRING DifferentialRing
DONE )abbrev category DIFEXT DifferentialExtension
DONE )abbrev category DIVRING DivisionRing
DONE )abbrev category ENTIRER EntireRing
DONE )abbrev category EUCDOM EuclideanDomain
DONE )abbrev category FIELD Field
DONE )abbrev category FINITE Finite
DONE )abbrev category FLINEXP FullyLinearlyExplicitRingOver
DONE )abbrev category GCDDOM GcdDomain
DONE )abbrev category GROUP Group
DONE )abbrev category INTDOM IntegralDomain
DONE )abbrev category LMODULE LeftModule
DONE )abbrev category LINEXP LinearlyExplicitRingOver
DONE )abbrev category MODULE Module
DONE )abbrev category MONOID Monoid
DONE )abbrev category OAGROUP OrderedAbelianGroup
DONE )abbrev category OAMON OrderedAbelianMonoid
DONE )abbrev category OAMONS OrderedAbelianMonoidSup
DONE )abbrev category OASGP OrderedAbelianSemiGroup
DONE )abbrev category OCAMON OrderedCancellationAbelianMonoid
DONE )abbrev category ORDFIN OrderedFinite
DONE )abbrev category OINTDOM OrderedIntegralDomain
DONE )abbrev category ORDMON OrderedMonoid
DONE )abbrev category ORDRING OrderedRing
DONE )abbrev category ORDSET OrderedSet
DONE )abbrev category PDRING PartialDifferentialRing
DONE )abbrev category PFECAT PolynomialFactorizationExplicit
DONE )abbrev category PID PrincipalIdealDomain
DONE )abbrev category RMODULE RightModule
DONE )abbrev category RING Ring
DONE )abbrev category RNG Rng
DONE )abbrev category SGROUP SemiGroup
DONE )abbrev category SETCAT SetCategory
DONE )abbrev category STEP StepThrough
DONE )abbrev category UFD UniqueFactorizationDomain
DONE )abbrev category VSPACE VectorSpace
DONE cden.spad.pamphlet
DONE )abbrev package ICDEN InnerCommonDenominator
DONE )abbrev package CDEN CommonDenominator
DONE )abbrev package UPCDEN UnivariatePolynomialCommonDenominator
DONE )abbrev package MCDEN MatrixCommonDenominator
DONE clifford.spad.pamphlet
DONE )abbrev domain QFORM QuadraticForm
DONE )abbrev domain CLIF CliffordAlgebra
DONE clip.spad.pamphlet
DONE )abbrev package CLIP TwoDimensionalPlotClipping
DONE cmplxrt.spad.pamphlet
DONE )abbrev package CMPLXRT ComplexRootPackage
DONE coerce.spad.pamphlet
DONE )abbrev category TYPE Type
DONE )abbrev category KOERCE CoercibleTo
DONE )abbrev category KONVERT ConvertibleTo
DONE )abbrev category RETRACT RetractableTo
DONE color.spad.pamphlet
DONE )abbrev domain COLOR Color
DONE )abbrev domain PALETTE Palette
combfunc.spad.pamphlet
DONE )abbrev category COMBOPC CombinatorialOpsCategory
)abbrev package COMBF CombinatorialFunction
DONE )abbrev package FSPECF FunctionalSpecialFunction
DONE )abbrev package SUMFS FunctionSpaceSum
DONE combinat.spad.pamphlet
DONE )abbrev package COMBINAT IntegerCombinatoricFunctions
DONE complet.spad.pamphlet
DONE )abbrev domain ORDCOMP OrderedCompletion
DONE )abbrev package ORDCOMP2 OrderedCompletionFunctions2
DONE )abbrev domain ONECOMP OnePointCompletion
DONE )abbrev package ONECOMP2 OnePointCompletionFunctions2
DONE )abbrev package INFINITY Infinity
DONE constant.spad.pamphlet
DONE )abbrev domain IAN InnerAlgebraicNumber
DONE )abbrev domain AN AlgebraicNumber
DONE contfrac.spad.pamphlet
DONE )abbrev domain CONTFRAC ContinuedFraction
DONE )abbrev package NCNTFRAC NumericContinuedFraction
DONE cont.spad.pamphlet
DONE )abbrev package ESCONT ExpertSystemContinuityPackage
DONE )abbrev package ESCONT1 ExpertSystemContinuityPackage1
DONE coordsys.spad.pamphlet
DONE )abbrev package COORDSYS CoordinateSystems
DONE cra.spad.pamphlet
DONE )abbrev package CRAPACK CRApackage
DONE crfp.spad.pamphlet
DONE )abbrev package CRFP ComplexRootFindingPackage
DONE curve.spad.pamphlet
DONE )abbrev category FFCAT FunctionFieldCategory
DONE )abbrev package MMAP MultipleMap
DONE )abbrev package FFCAT2 FunctionFieldCategoryFunctions2
DONE )abbrev package CHVAR ChangeOfVariable
DONE )abbrev domain RADFF RadicalFunctionField
DONE )abbrev domain ALGFF AlgebraicFunctionField
DONE cycles.spad.pamphlet
DONE )abbrev package CYCLES CycleIndicators
DONE )abbrev package EVALCYC EvaluateCycleIndicators
DONE cyclotom.spad.pamphlet
DONE )abbrev package CYCLOTOM CyclotomicPolynomialPackage
d01agents.spad.pamphlet
DONE )abbrev domain INTFTBL IntegrationFunctionsTable
)abbrev package D01AGNT d01AgentsPackage
DONE d01Package.spad.pamphlet
DONE )abbrev package INTPACK AnnaNumericalIntegrationPackage
DONE d01routine.spad.pamphlet
DONE )abbrev domain D01AJFA d01ajfAnnaType
DONE )abbrev domain D01AKFA d01akfAnnaType
DONE )abbrev domain D01AMFA d01amfAnnaType
DONE )abbrev domain D01APFA d01apfAnnaType
DONE )abbrev domain D01AQFA d01aqfAnnaType
DONE )abbrev domain D01ALFA d01alfAnnaType
DONE )abbrev domain D01ANFA d01anfAnnaType
DONE )abbrev domain D01ASFA d01asfAnnaType
DONE )abbrev domain D01GBFA d01gbfAnnaType
DONE )abbrev domain D01FCFA d01fcfAnnaType
DONE d01.spad.pamphlet
DONE )abbrev package NAGD01 NagIntegrationPackage
DONE d01transform.spad.pamphlet
DONE )abbrev domain D01TRNS d01TransformFunctionType
d01weights.spad.pamphlet
)abbrev package D01WGTS d01WeightsPackage
d02agents.spad.pamphlet
DONE )abbrev domain ODEIFTBL ODEIntensityFunctionsTable
)abbrev package D02AGNT d02AgentsPackage
DONE d02Package.spad.pamphlet
DONE )abbrev package ODEPACK AnnaOrdinaryDifferentialEquationPackage
DONE d02routine.spad.pamphlet
DONE )abbrev domain D02BBFA d02bbfAnnaType
DONE )abbrev domain D02BHFA d02bhfAnnaType
DONE )abbrev domain D02CJFA d02cjfAnnaType
DONE )abbrev domain D02EJFA d02ejfAnnaType
DONE d02.spad.pamphlet
DONE )abbrev package NAGD02 NagOrdinaryDifferentialEquationsPackage
DONE d03agents.spad.pamphlet
DONE )abbrev package D03AGNT d03AgentsPackage
DONE d03Package.spad.pamphlet
DONE )abbrev package PDEPACK AnnaPartialDifferentialEquationPackage
DONE d03routine.spad.pamphlet
DONE )abbrev domain D03EEFA d03eefAnnaType
DONE )abbrev domain D03FAFA d03fafAnnaType
DONE d03.spad.pamphlet
DONE )abbrev package NAGD03 NagPartialDifferentialEquationsPackage
DONE ddfact.spad.pamphlet
DONE )abbrev package DDFACT DistinctDegreeFactorize
DONE defaults.spad.pamphlet
DONE )abbrev package REPSQ RepeatedSquaring
DONE )abbrev package REPDB RepeatedDoubling
DONE )abbrev package FLASORT FiniteLinearAggregateSort
DONE defintef.spad.pamphlet
DONE )abbrev package DEFINTEF ElementaryFunctionDefiniteIntegration
DONE defintrf.spad.pamphlet
DONE )abbrev package DFINTTLS DefiniteIntegrationTools
DONE )abbrev package DEFINTRF RationalFunctionDefiniteIntegration
DONE degred.spad.pamphlet
DONE )abbrev package DEGRED DegreeReductionPackage
DONE derham.spad.pamphlet
DONE )abbrev category LALG LeftAlgebra
DONE )abbrev domain EAB ExtAlgBasis
DONE )abbrev domain ANTISYM AntiSymm
DONE )abbrev domain DERHAM DeRhamComplex
DONE dhmatrix.spad.pamphlet
DONE )abbrev domain DHMATRIX DenavitHartenbergMatrix
DONE divisor.spad.pamphlet
DONE )abbrev domain FRIDEAL FractionalIdeal
DONE )abbrev package FRIDEAL2 FractionalIdealFunctions2
DONE )abbrev package MHROWRED ModularHermitianRowReduction
DONE )abbrev domain FRMOD FramedModule
DONE )abbrev category FDIVCAT FiniteDivisorCategory
DONE )abbrev domain HELLFDIV HyperellipticFiniteDivisor
DONE )abbrev domain FDIV FiniteDivisor
DONE )abbrev package FDIV2 FiniteDivisorFunctions2
DONE dpolcat.spad.pamphlet
DONE )abbrev category DVARCAT DifferentialVariableCategory
DONE )abbrev domain ODVAR OrderlyDifferentialVariable
DONE )abbrev domain SDVAR SequentialDifferentialVariable
DONE )abbrev category DPOLCAT DifferentialPolynomialCategory
DONE )abbrev domain DSMP DifferentialSparseMultivariatePolynomial
DONE )abbrev domain ODPOL OrderlyDifferentialPolynomial
DONE )abbrev domain SDPOL SequentialDifferentialPolynomial
DONE drawopt.spad.pamphlet
DONE )abbrev domain DROPT DrawOption
DONE )abbrev package DROPT1 DrawOptionFunctions1
DONE )abbrev package DROPT0 DrawOptionFunctions0
DONE drawpak.spad.pamphlet
DONE )abbrev package DRAWCX DrawComplex
DONE draw.spad.pamphlet
DONE )abbrev package DRAWCFUN TopLevelDrawFunctionsForCompiledFunctions
DONE )abbrev package DRAW TopLevelDrawFunctions
DONE )abbrev package DRAWCURV TopLevelDrawFunctionsForAlgebraicCurves
DONE )abbrev package DRAWPT TopLevelDrawFunctionsForPoints
DONE e01.spad.pamphlet
DONE )abbrev package NAGE01 NagInterpolationPackage
DONE e02.spad.pamphlet
DONE )abbrev package NAGE02 NagFittingPackage
DONE e04agents.spad.pamphlet
DONE )abbrev package E04AGNT e04AgentsPackage
DONE e04Package.spad.pamphlet
DONE )abbrev package OPTPACK AnnaNumericalOptimizationPackage
DONE e04routine.spad.pamphlet
DONE )abbrev domain E04DGFA e04dgfAnnaType
DONE )abbrev domain E04FDFA e04fdfAnnaType
DONE )abbrev domain E04GCFA e04gcfAnnaType
DONE )abbrev domain E04JAFA e04jafAnnaType
DONE )abbrev domain E04MBFA e04mbfAnnaType
DONE )abbrev domain E04NAFA e04nafAnnaType
DONE )abbrev domain E04UCFA e04ucfAnnaType
DONE e04.spad.pamphlet
DONE )abbrev package NAGE04 NagOptimisationPackage
DONE efstruc.spad.pamphlet
DONE )abbrev package SYMFUNC SymmetricFunctions
DONE )abbrev package TANEXP TangentExpansions
DONE )abbrev package EFSTRUC ElementaryFunctionStructurePackage
DONE )abbrev package ITRIGMNP InnerTrigonometricManipulations
DONE )abbrev package TRIGMNIP TrigonometricManipulations
DONE )abbrev package CTRIGMNP ComplexTrigonometricManipulations
DONE efuls.spad.pamphlet
DONE )abbrev package EFULS ElementaryFunctionsUnivariateLaurentSeries
DONE efupxs.spad.pamphlet
DONE )abbrev package EFUPXS ElementaryFunctionsUnivariatePuiseuxSeries
DONE eigen.spad.pamphlet
DONE )abbrev package EP EigenPackage
DONE )abbrev package CHARPOL CharacteristicPolynomialPackage
DONE elemntry.spad.pamphlet
DONE )abbrev package EF ElementaryFunction
DONE elfuts.spad.pamphlet
DONE )abbrev package ELFUTS EllipticFunctionsUnivariateTaylorSeries
DONE equation1.spad.pamphlet
DONE )abbrev category IEVALAB InnerEvalable
DONE )abbrev category EVALAB Evalable
DONE equation2.spad.pamphlet
DONE )abbrev domain EQ Equation
DONE )abbrev package EQ2 EquationFunctions2
DONE )abbrev category FEVALAB FullyEvalableOver
DONE error.spad.pamphlet
DONE )abbrev package ERROR ErrorFunctions
DONE expexpan.spad.pamphlet
DONE )abbrev domain EXPUPXS ExponentialOfUnivariatePuiseuxSeries
DONE )abbrev domain UPXSSING UnivariatePuiseuxSeriesWithExponentialSingularity
DONE )abbrev domain EXPEXPAN ExponentialExpansion
DONE expr2ups.spad.pamphlet
DONE )abbrev package EXPR2UPS ExpressionToUnivariatePowerSeries
DONE exprode.spad.pamphlet
DONE )abbrev package EXPRODE ExpressionSpaceODESolver
DONE expr.spad.pamphlet
DONE )abbrev domain EXPR Expression
DONE )abbrev package PAN2EXPR PolynomialAN2Expression
DONE )abbrev package EXPR2 ExpressionFunctions2
DONE )abbrev package PMPREDFS FunctionSpaceAttachPredicates
DONE )abbrev package PMASSFS FunctionSpaceAssertions
DONE )abbrev package PMPRED AttachPredicates
DONE )abbrev package PMASS PatternMatchAssertions
DONE )abbrev domain HACKPI Pi
DONE )abbrev package PICOERCE PiCoercions
DONE f01.spad.pamphlet
DONE )abbrev package NAGF01 NagMatrixOperationsPackage
DONE f02.spad.pamphlet
DONE )abbrev package NAGF02 NagEigenPackage
DONE f04.spad.pamphlet
DONE )abbrev package NAGF04 NagLinearEquationSolvingPackage
DONE f07.spad.pamphlet
DONE )abbrev package NAGF07 NagLapack
DONE facutil.spad.pamphlet
DONE )abbrev package FACUTIL FactoringUtilities
DONE )abbrev package PUSHVAR PushVariables
DONE ffcat.spad.pamphlet
DONE )abbrev category FPC FieldOfPrimeCharacteristic
DONE )abbrev category XF ExtensionField
DONE )abbrev category FAXF FiniteAlgebraicExtensionField
DONE )abbrev package DLP DiscreteLogarithmPackage
DONE )abbrev category FFIELDC FiniteFieldCategory
DONE )abbrev package FFSLPE FiniteFieldSolveLinearPolynomialEquation
DONE ffcg.spad.pamphlet
DONE )abbrev domain FFCGP FiniteFieldCyclicGroupExtensionByPolynomial
DONE )abbrev domain FFCGX FiniteFieldCyclicGroupExtension
DONE )abbrev domain FFCG FiniteFieldCyclicGroup
DONE fff.spad.pamphlet
DONE )abbrev package FFF FiniteFieldFunctions
DONE ffhom.spad.pamphlet
DONE )abbrev package FFHOM FiniteFieldHomomorphisms
ffnb.spad.pamphlet
)abbrev package INBFF InnerNormalBasisFieldFunctions
DONE )abbrev domain FFNBP FiniteFieldNormalBasisExtensionByPolynomial
DONE )abbrev domain FFNBX FiniteFieldNormalBasisExtension
DONE )abbrev domain FFNB FiniteFieldNormalBasis
DONE ffpoly2.spad.pamphlet
DONE )abbrev package FFPOLY2 FiniteFieldPolynomialPackage2
DONE ffpoly.spad.pamphlet
DONE )abbrev package FFPOLY FiniteFieldPolynomialPackage
DONE ffp.spad.pamphlet
DONE )abbrev domain FFP FiniteFieldExtensionByPolynomial
DONE )abbrev domain FFX FiniteFieldExtension
DONE )abbrev domain IFF InnerFiniteField
DONE )abbrev domain FF FiniteField
ffrac.as.pamphlet
DONE ffx.spad.pamphlet
DONE )abbrev package IRREDFFX IrredPolyOverFiniteField
DONE files.spad.pamphlet
DONE )abbrev category FILECAT FileCategory
DONE )abbrev domain FILE File
DONE )abbrev domain TEXTFILE TextFile
DONE )abbrev domain BINFILE BinaryFile
DONE )abbrev domain KAFILE KeyedAccessFile
DONE )abbrev domain LIB Library
DONE float.spad.pamphlet
DONE )abbrev domain FLOAT Float
DONE fmod.spad.pamphlet
DONE )abbrev domain ZMOD IntegerMod
DONE fname.spad.pamphlet
DONE )abbrev category FNCAT FileNameCategory
DONE )abbrev domain FNAME FileName
DONE fnla.spad.pamphlet
DONE )abbrev domain OSI OrdSetInts
DONE )abbrev domain COMM Commutator
DONE )abbrev package HB HallBasis
DONE )abbrev domain FNLA FreeNilpotentLie
DONE formula.spad.pamphlet
DONE )abbrev domain FORMULA ScriptFormulaFormat
DONE )abbrev package FORMULA1 ScriptFormulaFormat1
DONE fortcat.spad.pamphlet
DONE )abbrev category FORTFN FortranFunctionCategory
DONE )abbrev category FMC FortranMatrixCategory
DONE )abbrev category FORTCAT FortranProgramCategory
DONE )abbrev category FVC FortranVectorCategory
DONE )abbrev category FMTC FortranMachineTypeCategory
DONE )abbrev category FMFUN FortranMatrixFunctionCategory
DONE )abbrev category FVFUN FortranVectorFunctionCategory
DONE fortmac.spad.pamphlet
DONE )abbrev domain MINT MachineInteger
DONE )abbrev domain MFLOAT MachineFloat
DONE )abbrev domain MCMPLX MachineComplex
DONE fortpak.spad.pamphlet
DONE )abbrev package FCPAK1 FortranCodePackage1
DONE )abbrev package NAGSP NAGLinkSupportPackage
DONE )abbrev package FORT FortranPackage
DONE )abbrev package FOP FortranOutputStackPackage
DONE )abbrev package TEMUTL TemplateUtilities
DONE )abbrev package MCALCFN MultiVariableCalculusFunctions
DONE fortran.spad.pamphlet
DONE )abbrev domain RESULT Result
DONE )abbrev domain FC FortranCode 
DONE )abbrev domain FORTRAN FortranProgram
DONE )abbrev domain M3D ThreeDimensionalMatrix
DONE )abbrev domain SFORT SimpleFortranProgram
DONE )abbrev domain SWITCH Switch
DONE )abbrev domain FTEM FortranTemplate
DONE )abbrev domain FEXPR FortranExpression
DONE forttyp.spad.pamphlet
DONE )abbrev domain FST FortranScalarType
DONE )abbrev domain FT FortranType
DONE )abbrev domain SYMTAB SymbolTable
DONE )abbrev domain SYMS TheSymbolTable
DONE fourier.spad.pamphlet
DONE )abbrev domain FCOMP FourierComponent
DONE )abbrev domain FSERIES FourierSeries
DONE fparfrac.spad.pamphlet
DONE )abbrev domain FPARFRAC FullPartialFractionExpansion
DONE fraction.spad.pamphlet
DONE )abbrev domain LO Localize
DONE )abbrev domain LA LocalAlgebra
DONE )abbrev category QFCAT QuotientFieldCategory
DONE )abbrev package QFCAT2 QuotientFieldCategoryFunctions2
DONE )abbrev domain FRAC Fraction
DONE )abbrev package LPEFRAC LinearPolynomialEquationByFractions
DONE )abbrev package FRAC2 FractionFunctions2
DONE free.spad.pamphlet
DONE )abbrev domain LMOPS ListMonoidOps
DONE )abbrev domain FMONOID FreeMonoid
DONE )abbrev domain FGROUP FreeGroup
DONE )abbrev category FAMONC FreeAbelianMonoidCategory
DONE )abbrev domain IFAMON InnerFreeAbelianMonoid
DONE )abbrev domain FAMONOID FreeAbelianMonoid
DONE )abbrev domain FAGROUP FreeAbelianGroup
DONE fr.spad.pamphlet
DONE )abbrev domain FR Factored
DONE )abbrev package FRUTIL FactoredFunctionUtilities
DONE )abbrev package FR2 FactoredFunctions2
DONE fs2expxp.spad.pamphlet
DONE )abbrev package FS2EXPXP FunctionSpaceToExponentialExpansion
DONE fs2ups.spad.pamphlet
DONE )abbrev package FS2UPS FunctionSpaceToUnivariatePowerSeries
DONE fspace.spad.pamphlet
DONE )abbrev category ES ExpressionSpace
DONE )abbrev package ES1 ExpressionSpaceFunctions1
DONE )abbrev package ES2 ExpressionSpaceFunctions2
DONE )abbrev category FS FunctionSpace
DONE )abbrev package FS2 FunctionSpaceFunctions2
DONE funcpkgs.spad.pamphlet
DONE )abbrev package FSUPFACT FunctionSpaceUnivariatePolynomialFactor
DONE functions.spad.pamphlet
DONE )abbrev domain BFUNCT BasicFunctions
DONE galfact.spad.pamphlet
DONE )abbrev package GALFACT GaloisGroupFactorizer
DONE galfactu.spad.pamphlet
DONE )abbrev package GALFACTU GaloisGroupFactorizationUtilities
DONE galpolyu.spad.pamphlet
DONE )abbrev package GALPOLYU GaloisGroupPolynomialUtilities
DONE galutil.spad.pamphlet
DONE )abbrev package GALUTIL GaloisGroupUtilities
DONE gaussfac.spad.pamphlet
DONE )abbrev package GAUSSFAC GaussianFactorizationPackage
DONE gaussian.spad.pamphlet
DONE )abbrev category COMPCAT ComplexCategory
DONE )abbrev package COMPLPAT ComplexPattern
DONE )abbrev package CPMATCH ComplexPatternMatch
DONE )abbrev domain COMPLEX Complex
DONE )abbrev package COMPLEX2 ComplexFunctions2
DONE )abbrev package COMPFACT ComplexFactorization
DONE )abbrev package CINTSLPE ComplexIntegerSolveLinearPolynomialEquation
DONE gbeuclid.spad.pamphlet
DONE )abbrev package GBEUCLID EuclideanGroebnerBasisPackage
DONE gbintern.spad.pamphlet
DONE )abbrev package GBINTERN GroebnerInternalPackage
DONE gb.spad.pamphlet
DONE )abbrev package GB GroebnerPackage
DONE gdirprod.spad.pamphlet
DONE )abbrev package ORDFUNS OrderingFunctions
DONE )abbrev domain ODP OrderedDirectProduct
DONE )abbrev domain HDP HomogeneousDirectProduct
DONE )abbrev domain SHDP SplitHomogeneousDirectProduct
DONE gdpoly.spad.pamphlet
DONE )abbrev domain GDMP GeneralDistributedMultivariatePolynomial
DONE )abbrev domain DMP DistributedMultivariatePolynomial
DONE )abbrev domain HDMP HomogeneousDistributedMultivariatePolynomial
DONE geneez.spad.pamphlet
DONE )abbrev package GENEEZ GenExEuclid
DONE generic.spad.pamphlet
DONE )abbrev domain GCNAALG GenericNonAssociativeAlgebra
DONE )abbrev package CVMP CoerceVectorMatrixPackage
DONE genufact.spad.pamphlet
DONE )abbrev package GENUFACT GenUFactorize
DONE genups.spad.pamphlet
DONE )abbrev package GENUPS GenerateUnivariatePowerSeries
DONE ghensel.spad.pamphlet
DONE )abbrev package GHENSEL GeneralHenselPackage
DONE gpgcd.spad.pamphlet
DONE )abbrev package GENPGCD GeneralPolynomialGcdPackage
DONE gpol.spad.pamphlet
DONE )abbrev domain LAUPOL LaurentPolynomial
DONE grdef.spad.pamphlet
DONE )abbrev package GRDEF GraphicsDefaults
DONE groebf.spad.pamphlet
DONE )abbrev package GBF GroebnerFactorizationPackage
DONE groebsol.spad.pamphlet
DONE )abbrev package GROEBSOL GroebnerSolve
DONE gseries.spad.pamphlet
DONE )abbrev domain GSERIES GeneralUnivariatePowerSeries
herm.as.pamphlet
DONE ideal.spad.pamphlet
DONE )abbrev domain IDEAL PolynomialIdeals
DONE idecomp.spad.pamphlet
DONE )abbrev package IDECOMP IdealDecompositionPackage
DONE indexedp.spad.pamphlet
DONE )abbrev category IDPC IndexedDirectProductCategory
DONE )abbrev domain IDPO IndexedDirectProductObject
DONE )abbrev domain IDPAM IndexedDirectProductAbelianMonoid
DONE )abbrev domain IDPOAM IndexedDirectProductOrderedAbelianMonoid
DONE )abbrev domain IDPOAMS IndexedDirectProductOrderedAbelianMonoidSup
DONE )abbrev domain IDPAG IndexedDirectProductAbelianGroup
DONE infprod.spad.pamphlet
DONE )abbrev package STINPROD StreamInfiniteProduct
DONE )abbrev package INFPROD0 InfiniteProductCharacteristicZero
DONE )abbrev package INPRODPF InfiniteProductPrimeField
DONE )abbrev package INPRODFF InfiniteProductFiniteField
DONE intaf.spad.pamphlet
DONE )abbrev package INTG0 GenusZeroIntegration
DONE )abbrev package INTPAF PureAlgebraicIntegration
DONE )abbrev package INTAF AlgebraicIntegration
DONE intalg.spad.pamphlet
DONE )abbrev package DBLRESP DoubleResultantPackage
DONE )abbrev package INTHERAL AlgebraicHermiteIntegration
DONE )abbrev package INTALG AlgebraicIntegrate
DONE intaux.spad.pamphlet
DONE )abbrev domain IR IntegrationResult
DONE )abbrev package IR2 IntegrationResultFunctions2
DONE intclos.spad.pamphlet
DONE )abbrev package TRIMAT TriangularMatrixOperations
DONE )abbrev package IBATOOL IntegralBasisTools
DONE )abbrev package FFINTBAS FunctionFieldIntegralBasis
DONE )abbrev package WFFINTBS WildFunctionFieldIntegralBasis
DONE )abbrev package NFINTBAS NumberFieldIntegralBasis
DONE intef.spad.pamphlet
DONE )abbrev package INTEF ElementaryIntegration
DONE integer.spad.pamphlet
DONE )abbrev package INTSLPE IntegerSolveLinearPolynomialEquation
DONE )abbrev domain INT Integer
DONE )abbrev domain NNI NonNegativeInteger
DONE )abbrev domain PI PositiveInteger
DONE )abbrev domain ROMAN RomanNumeral
DONE integrat.spad.pamphlet
DONE )abbrev package FSCINT FunctionSpaceComplexIntegration
DONE )abbrev package FSINT FunctionSpaceIntegration
interval.as.pamphlet
DONE intfact.spad.pamphlet
DONE )abbrev package PRIMES IntegerPrimesPackage
DONE )abbrev package IROOT IntegerRoots
DONE )abbrev package INTFACT IntegerFactorizationPackage
DONE intpm.spad.pamphlet
DONE )abbrev package INTPM PatternMatchIntegration
DONE intrf.spad.pamphlet
DONE )abbrev package SUBRESP SubResultantPackage
DONE )abbrev package MONOTOOL MonomialExtensionTools
DONE )abbrev package INTHERTR TranscendentalHermiteIntegration
DONE )abbrev package INTTR TranscendentalIntegration
DONE )abbrev package INTRAT RationalIntegration
DONE )abbrev package INTRF RationalFunctionIntegration
invnode.as.pamphlet
invrender.as.pamphlet
invtypes.as.pamphlet
invutils.as.pamphlet
DONE irexpand.spad.pamphlet
DONE )abbrev package IR2F IntegrationResultToFunction
DONE )abbrev package IRRF2F IntegrationResultRFToFunction
DONE irsn.spad.pamphlet
DONE )abbrev package IRSN IrrRepSymNatPackage
DONE ituple.spad.pamphlet
DONE )abbrev domain ITUPLE InfiniteTuple
DONE )abbrev package ITFUN2 InfiniteTupleFunctions2
DONE )abbrev package ITFUN3 InfiniteTupleFunctions3
iviews.as.pamphlet
DONE kl.spad.pamphlet
DONE )abbrev category CACHSET CachableSet
DONE )abbrev package SCACHE SortedCache
DONE )abbrev domain MKCHSET MakeCachableSet
DONE )abbrev domain KERNEL Kernel
DONE )abbrev package KERNEL2 KernelFunctions2
DONE kovacic.spad.pamphlet
DONE )abbrev package KOVACIC Kovacic
DONE laplace.spad.pamphlet
DONE )abbrev package LAPLACE LaplaceTransform
DONE )abbrev package INVLAPLA InverseLaplaceTransform
DONE laurent.spad.pamphlet
DONE )abbrev category ULSCCAT UnivariateLaurentSeriesConstructorCategory
DONE )abbrev domain ULSCONS UnivariateLaurentSeriesConstructor
DONE )abbrev domain ULS UnivariateLaurentSeries
DONE )abbrev package ULS2 UnivariateLaurentSeriesFunctions2
DONE leadcdet.spad.pamphlet
DONE )abbrev package LEADCDET LeadingCoefDetermination
DONE lie.spad.pamphlet
DONE )abbrev domain LIE AssociatedLieAlgebra
DONE )abbrev domain JORDAN AssociatedJordanAlgebra
DONE )abbrev domain LSQM LieSquareMatrix
limitps.spad.pamphlet
DONE )abbrev package LIMITPS PowerSeriesLimitPackage
)abbrev package SIGNEF ElementaryFunctionSign
DONE lindep.spad.pamphlet
DONE )abbrev package LINDEP LinearDependence
DONE )abbrev package ZLINDEP IntegerLinearDependence
DONE lingrob.spad.pamphlet
DONE )abbrev package LGROBP LinGroebnerPackage
DONE liouv.spad.pamphlet
DONE )abbrev package LF LiouvillianFunction
DONE listgcd.spad.pamphlet
DONE )abbrev package HEUGCD HeuGcd
DONE list.spad.pamphlet
DONE )abbrev domain ILIST IndexedList
DONE )abbrev domain LIST List
DONE )abbrev package LIST2 ListFunctions2
DONE )abbrev package LIST3 ListFunctions3
DONE )abbrev package LIST2MAP ListToMap
DONE )abbrev domain ALIST AssociationList
DONE lmdict.spad.pamphlet
DONE )abbrev domain LMDICT ListMultiDictionary
DONE lodof.spad.pamphlet
DONE )abbrev domain SETMN SetOfMIntegersInOneToN
DONE )abbrev package PREASSOC PrecomputedAssociatedEquations
DONE )abbrev package ASSOCEQ AssociatedEquations
DONE )abbrev package LODOF LinearOrdinaryDifferentialOperatorFactorizer
DONE lodop.spad.pamphlet
DONE )abbrev category MLO MonogenicLinearOperator
DONE )abbrev domain OMLO OppositeMonogenicLinearOperator
DONE )abbrev package NCODIV NonCommutativeOperatorDivision
DONE )abbrev domain ODR OrdinaryDifferentialRing
DONE )abbrev domain DPMO DirectProductModule
DONE )abbrev domain DPMM DirectProductMatrixModule
lodo.spad.pamphlet
DONE )abbrev category LODOCAT LinearOrdinaryDifferentialOperatorCategory
DONE )abbrev package LODOOPS LinearOrdinaryDifferentialOperatorsOps
)abbrev domain LODO LinearOrdinaryDifferentialOperator
)abbrev domain LODO1 LinearOrdinaryDifferentialOperator1
DONE )abbrev domain LODO2 LinearOrdinaryDifferentialOperator2
DONE manip.spad.pamphlet
DONE )abbrev package FACTFUNC FactoredFunctions
DONE )abbrev package POLYROOT PolynomialRoots
DONE )abbrev package ALGMANIP AlgebraicManipulations
DONE )abbrev package SIMPAN SimplifyAlgebraicNumberConvertPackage
DONE )abbrev package TRMANIP TranscendentalManipulations
DONE mappkg.spad.pamphlet
DONE )abbrev package MAPHACK1 MappingPackageInternalHacks1
DONE )abbrev package MAPHACK2 MappingPackageInternalHacks2
DONE )abbrev package MAPHACK3 MappingPackageInternalHacks3
DONE )abbrev package MAPPKG1 MappingPackage1
DONE )abbrev package MAPPKG2 MappingPackage2
DONE )abbrev package MAPPKG3 MappingPackage3
DONE matcat.spad.pamphlet
DONE )abbrev category MATCAT MatrixCategory
DONE )abbrev category RMATCAT RectangularMatrixCategory
DONE )abbrev category SMATCAT SquareMatrixCategory
DONE matfuns.spad.pamphlet
DONE )abbrev package IMATLIN InnerMatrixLinearAlgebraFunctions
DONE )abbrev package MATCAT2 MatrixCategoryFunctions2
DONE )abbrev package RMCAT2 RectangularMatrixCategoryFunctions2
DONE )abbrev package IMATQF InnerMatrixQuotientFieldFunctions
DONE )abbrev package MATLIN MatrixLinearAlgebraFunctions
DONE matrix.spad.pamphlet
DONE )abbrev domain IMATRIX IndexedMatrix
DONE )abbrev domain MATRIX Matrix
DONE )abbrev domain RMATRIX RectangularMatrix
DONE )abbrev domain SQMATRIX SquareMatrix
DONE matstor.spad.pamphlet
DONE )abbrev package MATSTOR StorageEfficientMatrixOperations
DONE mesh.spad.pamphlet
DONE )abbrev package MESH MeshCreationRoutinesForThreeDimensions
DONE mfinfact.spad.pamphlet
DONE )abbrev package MFINFACT MultFiniteFactorize
DONE misc.spad.pamphlet
DONE )abbrev domain SAOS SingletonAsOrderedSet
DONE mkfunc.spad.pamphlet
DONE )abbrev domain INFORM InputForm
DONE )abbrev package INFORM1 InputFormFunctions1
DONE )abbrev package MKFUNC MakeFunction
DONE )abbrev package MKUCFUNC MakeUnaryCompiledFunction
DONE )abbrev package MKBCFUNC MakeBinaryCompiledFunction
DONE )abbrev package MKFLCFN MakeFloatCompiledFunction
DONE mkrecord.spad.pamphlet
DONE )abbrev package MKRECORD MakeRecord
DONE mlift.spad.jhd.pamphlet
DONE )abbrev package MLIFT MultivariateLifting
DONE mlift.spad.pamphlet
DONE )abbrev package MLIFT MultivariateLifting
DONE moddfact.spad.pamphlet
DONE )abbrev package MDDFACT ModularDistinctDegreeFactorizer
DONE modgcd.spad.pamphlet
DONE )abbrev package INMODGCD InnerModularGcd
DONE modmonom.spad.pamphlet
DONE )abbrev domain MODMONOM ModuleMonomial
DONE )abbrev domain GMODPOL GeneralModulePolynomial
DONE modmon.spad.pamphlet
DONE )abbrev domain MODMON ModMonic
DONE modring.spad.pamphlet
DONE )abbrev domain MODRING ModularRing
DONE )abbrev domain EMR EuclideanModularRing
DONE )abbrev domain MODFIELD ModularField
DONE moebius.spad.pamphlet
DONE )abbrev domain MOEBIUS MoebiusTransform
DONE mring.spad.pamphlet
DONE )abbrev domain MRING MonoidRing
DONE )abbrev package MRF2 MonoidRingFunctions2
DONE mset.spad.pamphlet
DONE )abbrev domain MSET Multiset
DONE mts.spad.pamphlet
DONE )abbrev domain SMTS SparseMultivariateTaylorSeries
DONE )abbrev domain TS TaylorSeries
DONE multfact.spad.pamphlet
DONE )abbrev package INNMFACT InnerMultFact
DONE )abbrev package MULTFACT MultivariateFactorize
DONE )abbrev package ALGMFACT AlgebraicMultFact
DONE multpoly.spad.pamphlet
DONE )abbrev domain POLY Polynomial
DONE )abbrev package POLY2 PolynomialFunctions2
DONE )abbrev domain MPOLY MultivariatePolynomial
DONE )abbrev domain SMP SparseMultivariatePolynomial
DONE )abbrev domain INDE IndexedExponents
DONE multsqfr.spad.pamphlet
DONE )abbrev package MULTSQFR MultivariateSquareFree
DONE naalgc.spad.pamphlet
DONE )abbrev category MONAD Monad
DONE )abbrev category MONADWU MonadWithUnit
DONE )abbrev category NARNG NonAssociativeRng
DONE )abbrev category NASRING NonAssociativeRing
DONE )abbrev category NAALG NonAssociativeAlgebra
DONE )abbrev category FINAALG FiniteRankNonAssociativeAlgebra
DONE )abbrev category FRNAALG FramedNonAssociativeAlgebra
DONE naalg.spad.pamphlet
DONE )abbrev domain ALGSC AlgebraGivenByStructuralConstants
DONE )abbrev package SCPKG StructuralConstantsPackage
DONE )abbrev package ALGPKG AlgebraPackage
DONE )abbrev package FRNAAF2 FramedNonAssociativeAlgebraFunctions2
ndftip.as.pamphlet
nepip.as.pamphlet
DONE newdata.spad.pamphlet
DONE )abbrev package IPRNTPK InternalPrintPackage
DONE )abbrev package TBCMPPK TabulatedComputationPackage
DONE )abbrev domain SPLNODE SplittingNode
DONE )abbrev domain SPLTREE SplittingTree
DONE newpoint.spad.pamphlet
DONE )abbrev category PTCAT PointCategory
DONE )abbrev domain POINT Point
DONE )abbrev domain COMPPROP SubSpaceComponentProperty
DONE )abbrev domain SUBSPACE SubSpace
DONE )abbrev package PTPACK PointPackage
DONE )abbrev package PTFUNC2 PointFunctions2
DONE newpoly.spad.pamphlet
DONE )abbrev domain NSUP NewSparseUnivariatePolynomial
DONE )abbrev package NSUP2 NewSparseUnivariatePolynomialFunctions2
DONE )abbrev category RPOLCAT RecursivePolynomialCategory
DONE )abbrev domain NSMP NewSparseMultivariatePolynomial
DONE nlinsol.spad.pamphlet
DONE )abbrev package RETSOL RetractSolvePackage
DONE )abbrev package NLINSOL NonLinearSolvePackage
DONE nlode.spad.pamphlet
DONE )abbrev package NODE1 NonLinearFirstOrderODESolver
noptip.as.pamphlet
DONE npcoef.spad.pamphlet
DONE )abbrev package NPCOEF NPCoef
nqip.as.pamphlet
nrc.as.pamphlet
nregset.spad.pamphlet
)abbrev category NTSCAT NormalizedTriangularSetCategory
)abbrev package NORMPK NormalizationPackage
nsfip.as.pamphlet
nsregset.spad.pamphlet
)abbrev category SNTSCAT SquareFreeNormalizedTriangularSetCategory
)abbrev package LAZM3PK LazardSetSolvingPackage
DONE numeigen.spad.pamphlet
DONE )abbrev package INEP InnerNumericEigenPackage
DONE )abbrev package NREP NumericRealEigenPackage
DONE )abbrev package NCEP NumericComplexEigenPackage
DONE numeric.spad.pamphlet
DONE )abbrev package NUMERIC Numeric
DONE )abbrev package DRAWHACK DrawNumericHack
DONE numode.spad.pamphlet
DONE )abbrev package NUMODE NumericalOrdinaryDifferentialEquations
DONE numquad.spad.pamphlet
DONE )abbrev package NUMQUAD NumericalQuadrature
DONE numsolve.spad.pamphlet
DONE )abbrev package INFSP InnerNumericFloatSolvePackage
DONE )abbrev package FLOATRP FloatingRealPackage
DONE )abbrev package FLOATCP FloatingComplexPackage
DONE numtheor.spad.pamphlet
DONE )abbrev package INTHEORY IntegerNumberTheoryFunctions
DONE )abbrev package PNTHEORY PolynomialNumberTheoryFunctions
DONE oct.spad.pamphlet
DONE )abbrev category OC OctonionCategory
DONE )abbrev domain OCT Octonion
DONE )abbrev package OCTCT2 OctonionCategoryFunctions2
DONE odealg.spad.pamphlet
DONE )abbrev package ODESYS SystemODESolver
DONE )abbrev package ODERED ReduceLODE
DONE )abbrev package ODEPAL PureAlgebraicLODE
odeef.spad.pamphlet
DONE )abbrev package REDORDER ReductionOfOrder
DONE )abbrev package LODEEF ElementaryFunctionLODESolver
)abbrev package ODEEF ElementaryFunctionODESolver
oderf.spad.pamphlet
DONE )abbrev package BALFACT BalancedFactorisation
DONE )abbrev package BOUNDZRO BoundIntegerRoots
DONE )abbrev package ODEPRIM PrimitiveRatDE
DONE )abbrev package UTSODETL UTSodetools
DONE )abbrev package ODERAT RationalLODE
DONE )abbrev package ODETOOLS ODETools
DONE )abbrev package ODEINT ODEIntegration
DONE )abbrev package ODECONST ConstantLODE
DONE omcat.spad.pamphlet
DONE )abbrev category OM OpenMath
DONE omdev.spad.pamphlet
DONE )abbrev domain OMENC OpenMathEncoding
DONE )abbrev domain OMDEV OpenMathDevice
DONE )abbrev domain OMCONN OpenMathConnection
DONE )abbrev package OMPKG OpenMathPackage
DONE omerror.spad.pamphlet
DONE )abbrev domain OMERRK OpenMathErrorKind
DONE )abbrev domain OMERR OpenMathError
DONE omserver.spad.pamphlet
DONE )abbrev package OMSERVER OpenMathServerPackage
DONE opalg.spad.pamphlet
DONE )abbrev domain MODOP ModuleOperator
DONE )abbrev domain OP Operator
DONE openmath.spad.pamphlet
DONE )abbrev package OMEXPR ExpressionToOpenMath
DONE op.spad.pamphlet
DONE )abbrev domain BOP BasicOperator
DONE )abbrev package BOP1 BasicOperatorFunctions1
DONE )abbrev package COMMONOP CommonOperators
DONE ore.spad.pamphlet
DONE )abbrev category OREPCAT UnivariateSkewPolynomialCategory
DONE )abbrev package APPLYORE ApplyUnivariateSkewPolynomial
DONE )abbrev domain AUTOMOR Automorphism
DONE )abbrev package OREPCTO UnivariateSkewPolynomialCategoryOps
DONE )abbrev domain ORESUP SparseUnivariateSkewPolynomial
DONE )abbrev domain OREUP UnivariateSkewPolynomial
DONE outform.spad.pamphlet
DONE )abbrev package NUMFMT NumberFormats
DONE )abbrev domain OUTFORM OutputForm
DONE out.spad.pamphlet
DONE )abbrev package OUT OutputPackage
DONE )abbrev package SPECOUT SpecialOutputPackage
DONE )abbrev package DISPLAY DisplayPackage
DONE pade.spad.pamphlet
DONE )abbrev package PADEPAC PadeApproximantPackage
DONE )abbrev package PADE PadeApproximants
DONE padiclib.spad.pamphlet
DONE )abbrev package IBPTOOLS IntegralBasisPolynomialTools
DONE )abbrev package IBACHIN ChineseRemainderToolsForIntegralBases
DONE )abbrev package PWFFINTB PAdicWildFunctionFieldIntegralBasis
DONE padic.spad.pamphlet
DONE )abbrev category PADICCT PAdicIntegerCategory
DONE )abbrev domain IPADIC InnerPAdicInteger
DONE )abbrev domain PADIC PAdicInteger
DONE )abbrev domain BPADIC BalancedPAdicInteger
DONE )abbrev domain PADICRC PAdicRationalConstructor
DONE )abbrev domain PADICRAT PAdicRational
DONE )abbrev domain BPADICRT BalancedPAdicRational
DONE paramete.spad.pamphlet
DONE )abbrev domain PARPCURV ParametricPlaneCurve
DONE )abbrev package PARPC2 ParametricPlaneCurveFunctions2
DONE )abbrev domain PARSCURV ParametricSpaceCurve
DONE )abbrev package PARSC2 ParametricSpaceCurveFunctions2
DONE )abbrev domain PARSURF ParametricSurface
DONE )abbrev package PARSU2 ParametricSurfaceFunctions2
DONE partperm.spad.pamphlet
DONE )abbrev package PARTPERM PartitionsAndPermutations
DONE patmatch1.spad.pamphlet
DONE )abbrev domain PATRES PatternMatchResult
DONE )abbrev package PATRES2 PatternMatchResultFunctions2
DONE )abbrev domain PATLRES PatternMatchListResult
DONE )abbrev category PATMAB PatternMatchable
DONE )abbrev category FPATMAB FullyPatternMatchable
DONE )abbrev package PMSYM PatternMatchSymbol
DONE )abbrev package PMKERNEL PatternMatchKernel
DONE )abbrev package PMDOWN PatternMatchPushDown
DONE )abbrev package PMTOOLS PatternMatchTools
DONE )abbrev package PMLSAGG PatternMatchListAggregate
DONE patmatch2.spad.pamphlet
DONE )abbrev package PMINS PatternMatchIntegerNumberSystem
DONE )abbrev package PMQFCAT PatternMatchQuotientFieldCategory
DONE )abbrev package PMPLCAT PatternMatchPolynomialCategory
DONE )abbrev package PMFS PatternMatchFunctionSpace
DONE )abbrev package PATMATCH PatternMatch
DONE pattern.spad.pamphlet
DONE )abbrev domain PATTERN Pattern
DONE )abbrev package PATTERN1 PatternFunctions1
DONE )abbrev package PATTERN2 PatternFunctions2
DONE )abbrev category PATAB Patternable
DONE pcurve.spad.pamphlet
DONE )abbrev category PPCURVE PlottablePlaneCurveCategory
DONE )abbrev category PSCURVE PlottableSpaceCurveCategory
DONE pdecomp.spad.pamphlet
DONE )abbrev package PCOMP PolynomialComposition
DONE )abbrev package PDECOMP PolynomialDecomposition
DONE perman.spad.pamphlet
DONE )abbrev package GRAY GrayCode
DONE )abbrev package PERMAN Permanent
DONE permgrps.spad.pamphlet
DONE )abbrev domain PERMGRP PermutationGroup
DONE )abbrev package PGE PermutationGroupExamples
DONE perm.spad.pamphlet
DONE )abbrev category PERMCAT PermutationCategory
DONE )abbrev domain PERM Permutation
DONE pfbr.spad.pamphlet
DONE )abbrev package PFBRU PolynomialFactorizationByRecursionUnivariate
DONE )abbrev package PFBR PolynomialFactorizationByRecursion
DONE pfo.spad.pamphlet
DONE )abbrev package FORDER FindOrderFinite
DONE )abbrev package RDIV ReducedDivisor
DONE )abbrev package PFOTOOLS PointsOfFiniteOrderTools
DONE )abbrev package PFOQ PointsOfFiniteOrderRational
DONE )abbrev package FSRED FunctionSpaceReduce
DONE )abbrev package PFO PointsOfFiniteOrder
DONE pfr.spad.pamphlet
DONE )abbrev domain PFR PartialFraction
DONE )abbrev package PFRPAC PartialFractionPackage
DONE pf.spad.pamphlet
DONE )abbrev domain IPF InnerPrimeField
DONE )abbrev domain PF PrimeField
DONE pgcd.spad.pamphlet
DONE )abbrev package PGCD PolynomialGcdPackage
DONE pgrobner.spad.pamphlet
DONE )abbrev package PGROEB PolyGroebner
DONE pinterp.spad.pamphlet
DONE )abbrev package PINTERPA PolynomialInterpolationAlgorithms
DONE )abbrev package PINTERP PolynomialInterpolation
DONE pleqn.spad.pamphlet
DONE )abbrev package PLEQN ParametricLinearEquations
DONEplot3d.spad.pamphlet
DONE )abbrev domain PLOT3D Plot3D
DONE plot.spad.pamphlet
DONE )abbrev domain PLOT Plot
DONE )abbrev package PLOT1 PlotFunctions1
DONE plottool.spad.pamphlet
DONE )abbrev package PLOTTOOL PlotTools
DONE polset.spad.pamphlet
DONE )abbrev category PSETCAT PolynomialSetCategory
DONE )abbrev domain GPOLSET GeneralPolynomialSet
DONE poltopol.spad.pamphlet
DONE )abbrev package MPC2 MPolyCatFunctions2
DONE )abbrev package MPC3 MPolyCatFunctions3
DONE )abbrev package POLTOPOL PolToPol
DONE polycat.spad.pamphlet
DONE )abbrev category AMR AbelianMonoidRing
DONE )abbrev category FAMR FiniteAbelianMonoidRing
DONE )abbrev category POLYCAT PolynomialCategory
DONE )abbrev package POLYLIFT PolynomialCategoryLifting
DONE )abbrev category UPOLYC UnivariatePolynomialCategory
DONE )abbrev package UPOLYC2 UnivariatePolynomialCategoryFunctions2
DONE )abbrev package COMMUPC CommuteUnivariatePolynomialCategory
DONE poly.spad.pamphlet
DONE )abbrev domain FM FreeModule
DONE )abbrev domain PR PolynomialRing
DONE )abbrev domain SUP SparseUnivariatePolynomial
DONE )abbrev package SUP2 SparseUnivariatePolynomialFunctions2
DONE )abbrev domain UP UnivariatePolynomial
DONE )abbrev package UP2 UnivariatePolynomialFunctions2
DONE )abbrev package POLY2UP PolynomialToUnivariatePolynomial
DONE )abbrev package UPSQFREE UnivariatePolynomialSquareFree
DONE )abbrev package PSQFR PolynomialSquareFree
DONE )abbrev package UPMP UnivariatePolynomialMultiplicationPackage
DONE primelt.spad.pamphlet
DONE )abbrev package PRIMELT PrimitiveElement
DONE )abbrev package FSPRMELT FunctionSpacePrimitiveElement
DONE print.spad.pamphlet
DONE )abbrev package PRINT PrintPackage
DONE product.spad.pamphlet
DONE )abbrev domain PRODUCT Product
DONE prs.spad.pamphlet
DONE )abbrev package PRS PseudoRemainderSequence
DONE prtition.spad.pamphlet
DONE )abbrev domain PRTITION Partition
DONE )abbrev domain SYMPOLY SymmetricPolynomial
DONE pscat.spad.pamphlet
DONE )abbrev category PSCAT PowerSeriesCategory
DONE )abbrev category UPSCAT UnivariatePowerSeriesCategory
DONE )abbrev category UTSCAT UnivariateTaylorSeriesCategory
DONE )abbrev category ULSCAT UnivariateLaurentSeriesCategory
DONE )abbrev category UPXSCAT UnivariatePuiseuxSeriesCategory
DONE )abbrev category MTSCAT MultivariateTaylorSeriesCategory
DONE pseudolin.spad.pamphlet
DONE )abbrev package PSEUDLIN PseudoLinearNormalForm
DONE ptranfn.spad.pamphlet
DONE )abbrev category PTRANFN PartialTranscendentalFunctions
DONE puiseux.spad.pamphlet
DONE )abbrev category UPXSCCA UnivariatePuiseuxSeriesConstructorCategory
DONE )abbrev domain UPXSCONS UnivariatePuiseuxSeriesConstructor
DONE )abbrev domain UPXS UnivariatePuiseuxSeries
DONE )abbrev package UPXS2 UnivariatePuiseuxSeriesFunctions2
DONE qalgset.spad.pamphlet
DONE )abbrev domain QALGSET QuasiAlgebraicSet
DONE )abbrev package QALGSET2 QuasiAlgebraicSet2
DONE quat.spad.pamphlet
DONE )abbrev category QUATCAT QuaternionCategory
DONE )abbrev domain QUAT Quaternion
DONE )abbrev package QUATCT2 QuaternionCategoryFunctions2
DONE radeigen.spad.pamphlet
DONE )abbrev package REP RadicalEigenPackage
DONE radix.spad.pamphlet
DONE )abbrev domain RADIX RadixExpansion
DONE )abbrev domain BINARY BinaryExpansion
DONE )abbrev domain DECIMAL DecimalExpansion
DONE )abbrev domain HEXADEC HexadecimalExpansion
DONE )abbrev package RADUTIL RadixUtilities
DONE random.spad.pamphlet
DONE )abbrev package RANDSRC RandomNumberSource
DONE )abbrev package RDIST RandomDistributions
DONE )abbrev package INTBIT IntegerBits
DONE )abbrev package RIDIST RandomIntegerDistributions
DONE )abbrev package RFDIST RandomFloatDistributions
DONE ratfact.spad.pamphlet
DONE )abbrev package RATFACT RationalFactorize
DONE rdeef.spad.pamphlet
DONE )abbrev package INTTOOLS IntegrationTools
DONE )abbrev package RDEEF ElementaryRischDE
DONE rderf.spad.pamphlet
DONE )abbrev package RDETR TranscendentalRischDE
DONE rdesys.spad.pamphlet
DONE )abbrev package RDETRS TranscendentalRischDESystem
DONE )abbrev package RDEEFS ElementaryRischDESystem
DONE real0q.spad.pamphlet
DONE )abbrev package REAL0Q RealZeroPackageQ
DONE realzero.spad.pamphlet
DONE )abbrev package REAL0 RealZeroPackage
DONE reclos.spad.pamphlet
DONE )abbrev package POLUTIL RealPolynomialUtilitiesPackage
DONE )abbrev category RRCC RealRootCharacterizationCategory
DONE )abbrev category RCFIELD RealClosedField
DONE )abbrev domain ROIRC RightOpenIntervalRootCharacterization 
DONE )abbrev domain RECLOS RealClosure
regset.spad.pamphlet
DONE )abbrev category RSETCAT RegularTriangularSetCategory
)abbrev package QCMPACK QuasiComponentPackage
)abbrev package RSETGCD RegularTriangularSetGcdPackage
)abbrev package RSDCMPK RegularSetDecompositionPackage
)abbrev domain REGSET RegularTriangularSet
DONE rep1.spad.pamphlet
DONE )abbrev package REP1 RepresentationPackage1
DONE rep2.spad.pamphlet
DONE )abbrev package REP2 RepresentationPackage2
DONE resring.spad.pamphlet
DONE )abbrev domain RESRING ResidueRing
DONE retract.spad.pamphlet
DONE )abbrev category FRETRCT FullyRetractableTo
DONE )abbrev package INTRET IntegerRetractions
DONE )abbrev package RATRET RationalRetractions
DONE rf.spad.pamphlet
DONE )abbrev package POLYCATQ PolynomialCategoryQuotientFunctions
DONE )abbrev package RF RationalFunction
DONE riccati.spad.pamphlet
DONE )abbrev package ODEPRRIC PrimitiveRatRicDE
DONE )abbrev package ODERTRIC RationalRicDE
DONE routines.spad.pamphlet
DONE )abbrev domain ROUTINE RoutinesTable
DONE )abbrev domain ATTRBUT AttributeButtons
DONE rule.spad.pamphlet
DONE )abbrev domain RULE RewriteRule
DONE )abbrev package APPRULE ApplyRules
DONE )abbrev domain RULESET Ruleset
DONE seg.spad.pamphlet
DONE )abbrev category SEGCAT SegmentCategory
DONE )abbrev category SEGXCAT SegmentExpansionCategory
DONE )abbrev domain SEG Segment
DONE )abbrev package SEG2 SegmentFunctions2
DONE )abbrev domain SEGBIND SegmentBinding
DONE )abbrev package SEGBIND2 SegmentBindingFunctions2
DONE )abbrev domain UNISEG UniversalSegment
DONE )abbrev package UNISEG2 UniversalSegmentFunctions2
DONE )abbrev package INCRMAPS IncrementingMaps
DONE setorder.spad.pamphlet
DONE )abbrev package UDPO UserDefinedPartialOrdering
DONE )abbrev package UDVO UserDefinedVariableOrdering
DONE sets.spad.pamphlet
DONE )abbrev domain SET Set
DONE sex.spad.pamphlet
DONE )abbrev category SEXCAT SExpressionCategory
DONE )abbrev domain SEXOF SExpressionOf
DONE )abbrev domain SEX SExpression
DONE sf.spad.pamphlet
DONE )abbrev category REAL RealConstant
DONE )abbrev category RADCAT RadicalCategory
DONE )abbrev category RNS RealNumberSystem
DONE )abbrev category FPS FloatingPointSystem
DONE )abbrev domain DFLOAT DoubleFloat
DONE sgcf.spad.pamphlet
DONE )abbrev package SGCF SymmetricGroupCombinatoricFunctions
DONE sign.spad.pamphlet
DONE )abbrev package TOOLSIGN ToolsForSign
DONE )abbrev package INPSIGN InnerPolySign
DONE )abbrev package SIGNRF RationalFunctionSign
DONE )abbrev package LIMITRF RationalFunctionLimitPackage
DONE si.spad.pamphlet
DONE )abbrev category INS IntegerNumberSystem
DONE )abbrev domain SINT SingleInteger
DONE smith.spad.pamphlet
DONE )abbrev package SMITH SmithNormalForm
DONE solvedio.spad.pamphlet
DONE )abbrev package DIOSP DiophantineSolutionPackage
DONE solvefor.spad.pamphlet
DONE )abbrev package SOLVEFOR PolynomialSolveByFormulas
DONE solvelin.spad.pamphlet
DONE )abbrev package LSMP LinearSystemMatrixPackage
DONE )abbrev package LSMP1 LinearSystemMatrixPackage1
DONE )abbrev package LSPP LinearSystemPolynomialPackage
DONE solverad.spad.pamphlet
DONE )abbrev package SOLVERAD RadicalSolvePackage
DONE sortpak.spad.pamphlet
DONE )abbrev package SORTPAK SortPackage
DONE space.spad.pamphlet
DONE )abbrev category SPACEC ThreeSpaceCategory
DONE )abbrev domain SPACE3 ThreeSpace
DONE )abbrev package TOPSP TopLevelThreeSpace
DONE special.spad.pamphlet
DONE )abbrev package DFSFUN DoubleFloatSpecialFunctions
DONE )abbrev package ORTHPOL OrthogonalPolynomialFunctions
DONE )abbrev package NTPOLFN NumberTheoreticPolynomialFunctions
sregset.spad.pamphlet
)abbrev category SFRTCAT SquareFreeRegularTriangularSetCategory
)abbrev package SFQCMPK SquareFreeQuasiComponentPackage
)abbrev package SFRGCD SquareFreeRegularTriangularSetGcdPackage
)abbrev package SRDCMPK SquareFreeRegularSetDecompositionPackage
)abbrev domain SREGSET SquareFreeRegularTriangularSet
DONE s.spad.pamphlet
DONE )abbrev package NAGS NagSpecialFunctionsPackage
DONE stream.spad.pamphlet
DONE )abbrev category LZSTAGG LazyStreamAggregate
DONE )abbrev package CSTTOOLS CyclicStreamTools
DONE )abbrev domain STREAM Stream
DONE )abbrev package STREAM1 StreamFunctions1
DONE )abbrev package STREAM2 StreamFunctions2
DONE )abbrev package STREAM3 StreamFunctions3
DONE string.spad.pamphlet
DONE )abbrev domain CHAR Character
DONE )abbrev domain CCLASS CharacterClass
DONE )abbrev domain ISTRING IndexedString
DONE )abbrev domain STRING String
DONE )abbrev category STRICAT StringCategory
DONE sttaylor.spad.pamphlet
DONE )abbrev package STTAYLOR StreamTaylorSeriesOperations
DONE sttf.spad.pamphlet
DONE )abbrev package STTF StreamTranscendentalFunctions
DONE )abbrev package STTFNC StreamTranscendentalFunctionsNonCommutative
DONE sturm.spad.pamphlet
DONE )abbrev package SHP SturmHabichtPackage
DONE suchthat.spad.pamphlet
DONE )abbrev domain SUCH SuchThat
DONE suls.spad.pamphlet
DONE )abbrev domain SULS SparseUnivariateLaurentSeries
DONE sum.spad.pamphlet
DONE )abbrev package ISUMP InnerPolySum
DONE )abbrev package GOSPER GosperSummationMethod
DONE )abbrev package SUMRF RationalFunctionSum
DONE sups.spad.pamphlet
DONE )abbrev domain ISUPS InnerSparseUnivariatePowerSeries
DONE supxs.spad.pamphlet
DONE )abbrev domain SUPXS SparseUnivariatePuiseuxSeries
DONE suts.spad.pamphlet
DONE )abbrev domain SUTS SparseUnivariateTaylorSeries
DONE symbol.spad.pamphlet
DONE )abbrev domain SYMBOL Symbol
DONE syssolp.spad.pamphlet
DONE )abbrev package SYSSOLP SystemSolvePackage
DONE system.spad.pamphlet
DONE )abbrev package MSYSCMD MoreSystemCommands
DONE tableau.spad.pamphlet
DONE )abbrev domain TABLEAU Tableau
DONE )abbrev package TABLBUMP TableauxBumpers
DONE table.spad.pamphlet
DONE )abbrev domain HASHTBL HashTable
DONE )abbrev domain INTABL InnerTable
DONE )abbrev domain TABLE Table
DONE )abbrev domain EQTBL EqTable
DONE )abbrev domain STRTBL StringTable
DONE )abbrev domain GSTBL GeneralSparseTable
DONE )abbrev domain STBL SparseTable
DONE taylor.spad.pamphlet
DONE )abbrev domain ITAYLOR InnerTaylorSeries
DONE )abbrev domain UTS UnivariateTaylorSeries
DONE )abbrev package UTS2 UnivariateTaylorSeriesFunctions2
DONE tex.spad.pamphlet
DONE )abbrev domain TEX TexFormat
DONE )abbrev package TEX1 TexFormat1
DONE tools.spad.pamphlet
DONE )abbrev package ESTOOLS ExpertSystemToolsPackage
DONE )abbrev package ESTOOLS1 ExpertSystemToolsPackage1
DONE )abbrev package ESTOOLS2 ExpertSystemToolsPackage2
transsolve.spad.pamphlet
)abbrev package SOLVETRA TransSolvePackage
DONE )abbrev package SOLVESER TransSolvePackageService
DONE tree.spad.pamphlet
DONE )abbrev domain TREE Tree
DONE )abbrev category BTCAT BinaryTreeCategory
DONE )abbrev domain BTREE BinaryTree
DONE )abbrev domain BSTREE BinarySearchTree
DONE )abbrev domain BTOURN BinaryTournament
DONE )abbrev domain BBTREE BalancedBinaryTree
DONE )abbrev domain PENDTREE PendantTree
DONE trigcat.spad.pamphlet
DONE )abbrev category ELEMFUN ElementaryFunctionCategory
DONE )abbrev category AHYP ArcHyperbolicFunctionCategory
DONE )abbrev category ATRIG ArcTrigonometricFunctionCategory
DONE )abbrev category HYPCAT HyperbolicFunctionCategory
DONE )abbrev category TRANFUN TranscendentalFunctionCategory
DONE )abbrev category TRIGCAT TrigonometricFunctionCategory
DONE )abbrev category PRIMCAT PrimitiveFunctionCategory
DONE )abbrev category LFCAT LiouvillianFunctionCategory
DONE )abbrev category CFCAT CombinatorialFunctionCategory
DONE )abbrev category SPFCAT SpecialFunctionCategory
DONE triset.spad.pamphlet
DONE )abbrev category TSETCAT TriangularSetCategory
DONE )abbrev domain GTSET GeneralTriangularSet
DONE )abbrev package PSETPK PolynomialSetUtilitiesPackage
DONE )abbrev domain WUTSET WuWenTsunTriangularSet
DONE tube.spad.pamphlet
DONE )abbrev domain TUBE TubePlot
DONE )abbrev package TUBETOOL TubePlotTools
DONE )abbrev package EXPRTUBE ExpressionTubePlot
DONE )abbrev package NUMTUBE NumericTubePlot
DONE twofact.spad.pamphlet
DONE )abbrev package NORMRETR NormRetractPackage
DONE )abbrev package TWOFACT TwoFactorize
DONE unifact.spad.pamphlet
DONE )abbrev package UNIFACT UnivariateFactorize
DONE updecomp.spad.pamphlet
DONE )abbrev package UPDECOMP UnivariatePolynomialDecompositionPackage
DONE updivp.spad.pamphlet
DONE )abbrev package UPDIVP UnivariatePolynomialDivisionPackage
DONE utsode.spad.pamphlet
DONE )abbrev package UTSODE UnivariateTaylorSeriesODESolver
DONE variable.spad.pamphlet
DONE )abbrev domain OVAR OrderedVariableList
DONE )abbrev domain VARIABLE Variable
DONE )abbrev domain RULECOLD RuleCalled
DONE )abbrev domain FUNCTION FunctionCalled
DONE )abbrev domain ANON AnonymousFunction
DONE vector.spad.pamphlet
DONE )abbrev category VECTCAT VectorCategory
DONE )abbrev domain IVECTOR IndexedVector
DONE )abbrev domain VECTOR Vector
DONE )abbrev package VECTOR2 VectorFunctions2
DONE )abbrev category DIRPCAT DirectProductCategory
DONE )abbrev domain DIRPROD DirectProduct
DONE )abbrev package DIRPROD2 DirectProductFunctions2
DONE view2D.spad.pamphlet
DONE )abbrev domain GRIMAGE GraphImage
DONE )abbrev domain VIEW2D TwoDimensionalViewport
DONE view3D.spad.pamphlet
DONE )abbrev domain VIEW3D ThreeDimensionalViewport
DONE viewDef.spad.pamphlet
DONE )abbrev package VIEWDEF ViewDefaultsPackage
DONE viewpack.spad.pamphlet
DONE )abbrev package VIEW ViewportPackage
DONE void.spad.pamphlet
DONE )abbrev domain VOID Void
DONE )abbrev domain EXIT Exit
DONE )abbrev package RESLATC ResolveLatticeCompletion
DONE weier.spad.pamphlet
DONE )abbrev package WEIER WeierstrassPreparation
DONE wtpol.spad.pamphlet
DONE )abbrev domain WP WeightedPolynomials
DONE )abbrev domain OWP OrdinaryWeightedPolynomials
DONE xlpoly.spad.pamphlet
DONE )abbrev domain MAGMA Magma
DONE )abbrev domain LWORD LyndonWord
DONE )abbrev category LIECAT LieAlgebra
DONE )abbrev category FLALG FreeLieAlgebra
DONE )abbrev package XEXPPKG XExponentialPackage
DONE )abbrev domain LPOLY LiePolynomial
DONE )abbrev domain PBWLB PoincareBirkhoffWittLyndonBasis
DONE )abbrev domain XPBWPOLY XPBWPolynomial
DONE )abbrev domain LEXP LieExponentials
DONE xpoly.spad.pamphlet
DONE )abbrev domain OFMONOID OrderedFreeMonoid
DONE )abbrev category FMCAT FreeModuleCat
DONE )abbrev domain FM1 FreeModule1
DONE )abbrev category XALG XAlgebra
DONE )abbrev category XFALG XFreeAlgebra
DONE )abbrev category XPOLYC XPolynomialsCat
DONE )abbrev domain XPR XPolynomialRing
DONE )abbrev domain XDPOLY XDistributedPolynomial
DONE )abbrev domain XRPOLY XRecursivePolynomial
DONE )abbrev domain XPOLY XPolynomial
DONE ystream.spad.pamphlet
DONE )abbrev package YSTREAM ParadoxicalCombinatorsForStreams
zerodim.spad.pamphlet
DONE )abbrev package FGLMICPK FGLMIfCanPackage
)abbrev domain RGCHAIN RegularChain
)abbrev package LEXTRIPK LexTriangularPackage
)abbrev package IRURPK InternalRationalUnivariateRepresentationPackage
)abbrev package RURPK RationalUnivariateRepresentationPackage
)abbrev package ZDSOLVE ZeroDimensionalSolvePackage

\section{The Algebra Lattice Layers}
\subsection{Layer 0 Bootstrap}
\begin{verbatim}
catdef   ABELGRP  (ignore -- bootstrap from lisp)
catdef   ABELMON  (ignore -- bootstrap from lisp)
catdef   ABELSG   (ignore -- bootstrap from lisp)
aggcat   ALAGG    (ignore -- bootstrap from lisp)
boolean  BOOLEAN  (ignore -- bootstrap from lisp)
catdef   CABMON   (ignore -- bootstrap from lisp)
aggcat   CLAGG    (ignore -- bootstrap from lisp)
catdef   COMRING  (ignore -- bootstrap from lisp)
sf       DFLOAT   (ignore -- bootstrap from lisp)
catdef   DIFRING  (ignore -- bootstrap from lisp)
catdef   DIVRING  (ignore -- bootstrap from lisp)
catdef   ENTIRER  (ignore -- bootstrap from lisp)
fspace   ES       (ignore -- bootstrap from lisp)
catdef   EUCDOM   (ignore -- bootstrap from lisp)
ffcat    FFIELDC  (ignore -- bootstrap from lisp)
sf       FPS      (ignore -- bootstrap from lisp) 
catdef   GCDMON   (ignore -- bootstrap from lisp)
aggcat   HOAGG    (ignore -- bootstrap from lisp)
list     ILIST    (ignore -- bootstrap from lisp)
si       INS      (ignore -- bootstrap from lisp) 
integer  INT      (ignore -- bootstrap from lisp)
catdef   INTDOM   (ignore -- bootstrap from lisp)
string   ISTRING  (ignore -- bootstrap from lisp)
list     LIST     (ignore -- bootstrap from lisp)
aggcat   LNAGG    (ignore -- bootstrap from lisp)
aggcat   LSAGG    (ignore -- bootstrap from lisp)
pscat    MTSCAT   (ignore -- bootstrap from lisp)
catdef   MONOID   (ignore -- bootstrap from lisp)
integer  NNI      (ignore -- bootstrap from lisp)
catdef   OINTDOM  (ignore -- bootstrap from lisp) 
catdef   ORDRING  (ignore -- bootstrap from lisp) 
outform  OUTFORM  (ignore -- bootstrap from lisp) 
integer  PI       (ignore -- bootstrap from lisp) 
polycat  POLYCAT  (ignore -- bootstrap from lisp)
polset   PSETCAT  (ignore -- bootstrap from lisp)
array1   PRIMARR  (ignore -- bootstrap from lisp)
aggcat   RCAGG    (ignore -- bootstrap from lisp)
boolean  REF      (ignore -- bootstrap from lisp)
catdef   RING     (ignore -- bootstrap from lisp)
catdef   RNG      (ignore -- bootstrap from lisp)
aggcat   SETAGG   (ignore -- bootstrap from lisp)
catdef   SETCAT   (ignore -- bootstrap from lisp)
si       SINT     (ignore -- bootstrap from lisp)
aggcat   STAGG    (ignore -- bootstrap from lisp)
triset   TSETCAT  (ignore -- bootstrap from lisp)
catdef   UFD      (ignore -- bootstrap from lisp)
aggcat   URAGG    (ignore -- bootstrap from lisp)
polycat  UPOLYC   (ignore -- bootstrap from lisp)
vector   VECTOR   (ignore -- bootstrap from lisp)
\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
si.spad.pamphlet (INS SINT)

\end{verbatim}
Note well that none of the algebra stanzas should include these
files in the preconditions otherwise we have an infinite compile
loop. These files are originally bootstrapped from lisp code
when we build the system for the first time but they are
forcibly recompiled at the end of the build so they reflect
current code (just in case someone changes the spad code but
does not re-cache the generated lisp). If you add these files
as preconditions (note that they are all in the {\bf MID} 
directory rather than the {\bf OUT} directory like everything
else) then the final recompile will invalidate all of the
rest of the algebra targets which will get rebuilt again causing
these targets to be out of date. The rest of the loop is left
up to the student.

The bootstrap process works because first we ask for the compiled
lisp code stanzas (the [[${MID}/BAR.o]] files), THEN we ask for
the final algebra code stanzas (the [[${OUT}/BAR.o]] files). This
is a very subtle point so think it through carefully. Notice that
this is the only layer calling for [[${MID}]] files. All other 
layers call for [[${OUT}]] files. If you break this the world
will no longer compile so don't change it if you don't understand it.

\begin{verbatim}
LAYER0BOOTSTRAP=${OUT}/XPR.o 
\end{verbatim}

<<layer0 bootstrap>>=
LAYER0BOOTSTRAP=\
                ${MID}/ABELGRP.o ${MID}/ABELGRP-.o \
                ${MID}/ABELMON.o ${MID}/ABELMON-.o \
                ${MID}/ABELSG.o ${MID}/ABELSG-.o \
                ${MID}/ALAGG.o \
                ${MID}/BOOLEAN.o ${MID}/CABMON.o ${MID}/CHAR.o \
                ${MID}/CLAGG.o ${MID}/CLAGG-.o  \
                ${MID}/COMRING.o ${MID}/DFLOAT.o \
                ${MID}/DIFRING.o ${MID}/DIFRING-.o \
                ${MID}/DIVRING.o ${MID}/DIVRING-.o \
                ${MID}/ENTIRER.o \
                ${MID}/ES.o ${MID}/ES-.o \
                ${MID}/EUCDOM.o ${MID}/EUCDOM-.o \
                ${MID}/FFIELDC.o ${MID}/FFIELDC-.o \
                ${MID}/FPS.o ${MID}/FPS-.o \
                ${MID}/GCDDOM.o ${MID}/GCDDOM-.o \
                ${MID}/HOAGG.o ${MID}/HOAGG-.o  ${MID}/ILIST.o \
                ${MID}/INS.o ${MID}/INS-.o \
                ${MID}/INT.o \
                ${MID}/INTDOM.o ${MID}/INTDOM-.o \
                ${MID}/ISTRING.o ${MID}/LIST.o \
                ${MID}/LNAGG.o ${MID}/LNAGG-.o  \
                ${MID}/LSAGG.o ${MID}/LSAGG-.o  \
                ${MID}/MONOID.o ${MID}/MONOID-.o  \
                ${MID}/MTSCAT.o \
                ${MID}/NNI.o ${MID}/OINTDOM.o \
                ${MID}/ORDRING.o ${MID}/ORDRING-.o ${MID}/OUTFORM.o \
                ${MID}/PI.o ${MID}/PRIMARR.o \
                ${MID}/POLYCAT.o ${MID}/POLYCAT-.o \
                ${MID}/PSETCAT.o ${MID}/PSETCAT-.o \
                ${MID}/QFCAT.o ${MID}/QFCAT-.o  \
                ${MID}/RCAGG.o ${MID}/RCAGG-.o  \
                ${MID}/REF.o \
                ${MID}/RING.o ${MID}/RING-.o \
                ${MID}/RNG.o \
                ${MID}/RNS.o ${MID}/RNS-.o \
                ${MID}/SETAGG.o ${MID}/SETAGG-.o \
                ${MID}/SETCAT.o ${MID}/SETCAT-.o \
                ${MID}/SINT.o \
                ${MID}/STAGG.o ${MID}/STAGG-.o  \
                ${MID}/SYMBOL.o \
                ${MID}/TSETCAT.o ${MID}/TSETCAT-.o \
                ${MID}/UFD.o ${MID}/UFD-.o \
                ${MID}/ULSCAT.o \
                ${MID}/UPOLYC.o ${MID}/UPOLYC-.o \
                ${MID}/URAGG.o ${MID}/URAGG-.o  \
                ${MID}/VECTOR.o
@
\subsection{Layer 0}
\begin{verbatim}
trigcat   AHYP     nothing
attreg    ATTREG   nothing
trigcat   CFCAT    nothing
aggcat    ELTAB    nothing
coerce    KOERCE   nothing
coerce    KONVERT  nothing
system    MSYSCMD  nothing
d02agents ODEIFTBL nothing
omcat     OM       nothing
omdev     OMCONN   nothing
omdev     OMDEV    nothing
out       OUT      nothing
trigcat   PRIMCAT  nothing
print     PRINT    nothing
ptranfn   PTRANFN  nothing
trigcat   SPFCAT   nothing
coerce    TYPE     nothing

\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
attreg.spad.pamphlet  (ATTREG)
dhmatrix.spad.pamphlet (DHMATRIX)
omcat.spad.pamphlet   (OM)
print.spad.pamphlet   (PRINT)
ptranfn.spad.pamphlet (PTRANFN)
system.spad.pamphlet  (MSYSCMD)
\end{verbatim}

<<layer0>>= 
LAYER0=${OUT}/AHYP.o ${OUT}/ATTREG.o ${OUT}/CFCAT.o ${OUT}/ELTAB.o \
       ${OUT}/KOERCE.o ${OUT}/KONVERT.o ${OUT}/MSYSCMD.o ${OUT}/ODEIFTBL.o \
       ${OUT}/OM.o ${OUT}/OMCONN.o ${OUT}/OMDEV.o \
       ${OUT}/OUT.o ${OUT}/PRIMCAT.o ${OUT}/PRINT.o ${OUT}/PTRANFN.o \
       ${OUT}/SPFCAT.o ${OUT}/TYPE.o 

@
\subsection{Layer 1}
\begin{verbatim}
any      ANY1     TYPE
combfunc COMBOPC  CFCAT
drawopt  DROPT1   TYPE
equation2 EQ2      TYPE
fortcat  FORTCAT  TYPE KOERCE
ituple   ITFUN2   TYPE
ituple   ITFUN3   TYPE
ituple   ITUPLE   KOERCE TYPE
mkrecord MKRECORD TYPE
mkfunc   MKUCFUNC KONVERT TYPE
any      NONE1    TYPE
pattern  PATAB    KONVERT
plot     PLOT1    KONVERT
pcurve   PPCURVE  KOERCE
pcurve   PSCURVE  KOERCE
sf       REAL     KONVERT
coerce   RETRACT  TYPE
seg      SEGBIND2 TYPE
seg      SEGCAT   TYPE
stream   STREAM1  TYPE
stream   STREAM2  TYPE
stream   STREAM3  TYPE

\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
ituple.spad.pamphlet   (ITFUN2 ITFUN3 ITUPLE)
mkrecord.spad.pamphlet (MKRECORD)
pcurve.spad.pamphlet   (PPCURVE PSCURVE)
coerce.spad.pamphlet   (TYPE KOERCE KONVERT RETRACT)

\end{verbatim}

<<layer1>>=
LAYER1=${OUT}/ANY1.o ${OUT}/COMBOPC.o ${OUT}/DROPT1.o \
       ${OUT}/EQ2.o \
       ${OUT}/FORTCAT.o ${OUT}/ITFUN2.o ${OUT}/ITFUN3.o ${OUT}/ITUPLE.o \
       ${OUT}/MKBCFUNC.o ${OUT}/MKRECORD.o ${OUT}/MKUCFUNC.o \
       ${OUT}/NONE1.o \
       ${OUT}/PATAB.o ${OUT}/PLOT1.o ${OUT}/PPCURVE.o \
       ${OUT}/PSCURVE.o ${OUT}/REAL.o ${OUT}/RESLATC.o \
       ${OUT}/RETRACT.o ${OUT}/RETRACT-.o ${OUT}/SEGBIND2.o ${OUT}/SEGCAT.o \
       ${OUT}/STREAM1.o ${OUT}/STREAM2.o ${OUT}/STREAM3.o 

@
\subsection{Layer 2}
\begin{verbatim}
fortcat  FMC      FORTCAT TYPE KOERCE
fortcat  FMFUN    FORTCAT TYPE KOERCE
fortcat  FORTFN   FORTCAT TYPE KOERCE
fortcat  FVC      FORTCAT TYPE KOERCE
fortcat  FVFUN    FORTCAT TYPE KOERCE
retract  INTRET   RETRACT
seg      SEGXCAT  SEGCAT TYPE

\end{verbatim}
\subsubsection{Completed spad files}

<<layer2>>=
LAYER2=${OUT}/FMC.o ${OUT}/FMFUN.o \
       ${OUT}/FORTFN.o ${OUT}/FVC.o ${OUT}/FVFUN.o ${OUT}/INTRET.o \
       ${OUT}/SEGXCAT.o 

@
\subsection{Layer 3}
\begin{verbatim}
aggcat    AGG      TYPE NNI INT
catdef    BASTYPE  BOOLEAN
grdef     GRDEF    BOOLEAN
list      LIST3    TYPE INT LIST ILIST
mkfunc    MKFUNC   KONVERT INT LIST

\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
grdef.spad.pamphlet (GRDEF)

\end{verbatim}

<<layer3>>=
LAYER3=${OUT}/AGG.o ${OUT}/AGG-.o \
       ${OUT}/BASTYPE.o ${OUT}/BASTYPE-.o ${OUT}/GRDEF.o \
       ${OUT}/LIST3.o ${OUT}/MKFUNC.o

@
\begin{verbatim}
\subsection{Layer 4}
variable  ANON     SETCAT BASTYPE KOERCE
asp       ASP29    FORTCAT TYPE KOERCE BOOLEAN
color     COLOR    ABELSG SETCAT BASTYPE KOERCE DFLOAT INT FPS RNS NNI PI
                   BOOLEAN
fnla      COMM     SETCAT BASTYPE KOERCE BOOLEAN
newpoint  COMPPROP SETCAT BASTYPE KOERCE BOOLEAN
aggcat    ELTAGG   ELTAB SETCAT BASTYPE KOERCE TYPE
void      EXIT     SETCAT BASTYPE KOERCE
free      FAMONC   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE RETRACT
files     FILECAT  SETCAT BASTYPE KOERCE
catdef    FINITE   SETCAT BASTYPE KOERCE
fname     FNCAT    SETCAT BASTYPE KOERCE
formula   FORMULA1 SETCAT BASTYPE KOERCE
indexedp  IDPC     SETCAT BASTYPE KOERCE
equation1 IEVALAB  SETCAT BASTYPE KOERCE TYPE
random    INTBIT   INT
catdef    LMODULE  ABELGRP CABMON ABELMON SETCAT BASTYPE KOERCE
boolean   LOGIC    BASTYPE
mappkg    MAPHACK1 SETCAT BASTYPE KOERCE SINT NNI INT
mappkg    MAPHACK2 SETCAT BASTYPE KOERCE
mappkg    MAPHACK3 SETCAT BASTYPE KOERCE
mappkg    MAPPKG1  SETCAT BASTYPE KOERCE SINT NNI INT BOOLEAN
mappkg    MAPPKG2  SETCAT BASTYPE KOERCE
mappkg    MAPPKG3  SETCAT BASTYPE KOERCE
naalgc    MONAD    SETCAT BASTYPE KOERCE PI NNI INT SINT
annacat   NIPROB   SETCAT BASTYPE KOERCE
any       NONE     SETCAT BASTYPE KOERCE
annacat   NUMINT   SETCAT BASTYPE KOERCE
annacat   ODECAT   SETCAT BASTYPE KOERCE
annacat   ODEPROB  SETCAT BASTYPE KOERCE
omdev     OMENC    SETCAT BASTYPE KOERCE SINT
complet   ONECOMP2 SETCAT BASTYPE KOERCE
annacat   OPTCAT   SETCAT BASTYPE KOERCE
annacat   OPTPROB  SETCAT BASTYPE KOERCE
catdef    ORDSET   SETCAT BASTYPE KOERCE
color     PALETTE  SETCAT BASTYPE KOERCE INT LIST ILIST LSAGG STAGG
paramete  PARPCURV TYPE NNI INT
paramete  PARPC2   TYPE NNI INT
paramete  PARSCURV TYPE NNI INT
paramete  PARSC2   TYPE NNI INT
paramete  PARSURF  TYPE NNI INT
paramete  PARSU2   TYPE NNI INT
patmatch1 PATMAB   SETCAT BASTYPE KOERCE
pattern   PATTERN1 SETCAT BASTYPE KOERCE TYPE INT LIST ILIST LSAGG STAGG
patmatch1 PATRES2  SETCAT BASTYPE KOERCE
annacat   PDECAT   SETCAT BASTYPE KOERCE
annacat   PDEPROB  SETCAT BASTYPE KOERCE
defaults  REPSQ    SETCAT BASTYPE KOERCE PI NNI INT
defaults  REPDB    SETCAT BASTYPE KOERCE PI NNI INT
random    RFDIST   INT PI NNI BOOLEAN SINT
random    RIDIST   SINT NNI INT
catdef    RMODULE  ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
sex       SEXCAT   SETCAT BASTYPE KOERCE
catdef    SGROUP   SETCAT BASTYPE KOERCE
space     SPACEC   SETCAT BASTYPE KOERCE
newdata   SPLNODE  SETCAT BASTYPE KOERCE AGG TYPE BOOLEAN
catdef    STEP     SETCAT BASTYPE KOERCE
suchthat  SUCH     SETCAT BASTYPE KOERCE
tex       TEX1     SETCAT BASTYPE KOERCE 
setorder  UDVO     INT LIST ILIST SETCAT BASTYPE KOERCE
ystream   YSTREAM  TYPE INT SINT NNI 

\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
annacat.spad.pamphlet (NIPROB ODEPROB PDEPROB OPTPROB NUMINT ODECAT PDECAT
                       OPTCAT)
color.spad.pamphlet (COLOR PALETTE)
mappkg.spad.pamphlet (MAPHACK1 MAPHACK2 MAPHACK3 MAPPKG1 MAPPKG2 MAPPKG3)
paramete.spad.pamphlet (PARPCURV PARPC2 PARSCURV PARSC2 PARSURF PARSU2
suchthat.spad.pamphlet (SUCH)
ystream.spad.pamphlet (YSTREAM)

\end{verbatim}

<<layer4>>=
LAYER4=${OUT}/ANON.o ${OUT}/COLOR.o \
       ${OUT}/COMM.o ${OUT}/COMPPROP.o \
       ${OUT}/ELTAGG.o ${OUT}/ELTAGG-.o ${OUT}/ESCONT1.o \
       ${OUT}/EXIT.o ${OUT}/FAMONC.o ${OUT}/FILECAT.o \
       ${OUT}/FINITE.o ${OUT}/FNCAT.o \
       ${OUT}/FORMULA1.o \
       ${OUT}/IDPC.o ${OUT}/IEVALAB.o ${OUT}/IEVALAB-.o \
       ${OUT}/INTBIT.o \
       ${OUT}/LMODULE.o \
       ${OUT}/LOGIC.o ${OUT}/LOGIC-.o ${OUT}/MAPHACK1.o ${OUT}/MAPHACK2.o \
       ${OUT}/MAPHACK3.o ${OUT}/MAPPKG1.o ${OUT}/MAPPKG2.o \
       ${OUT}/MAPPKG3.o ${OUT}/MONAD.o ${OUT}/MONAD-.o \
       ${OUT}/NIPROB.o ${OUT}/NONE.o ${OUT}/NUMINT.o \
       ${OUT}/ODECAT.o ${OUT}/ODEPROB.o ${OUT}/OMENC.o ${OUT}/ONECOMP2.o \
       ${OUT}/OPTCAT.o ${OUT}/OPTPROB.o \
       ${OUT}/ORDSET.o ${OUT}/ORDSET-.o ${OUT}/PALETTE.o \
       ${OUT}/PARPCURV.o ${OUT}/PARPC2.o ${OUT}/PARSCURV.o \
       ${OUT}/PARSC2.o ${OUT}/PARSURF.o ${OUT}/PARSU2.o ${OUT}/PATMAB.o \
       ${OUT}/PATRES2.o ${OUT}/PATTERN1.o ${OUT}/PDECAT.o ${OUT}/PDEPROB.o \
       ${OUT}/REPSQ.o ${OUT}/REPDB.o ${OUT}/RFDIST.o ${OUT}/RIDIST.o \
       ${OUT}/RMODULE.o \
       ${OUT}/SEXCAT.o ${OUT}/SGROUP.o ${OUT}/SGROUP-.o \
       ${OUT}/SPACEC.o ${OUT}/SPLNODE.o \
       ${OUT}/STEP.o ${OUT}/SUCH.o ${OUT}/TEX1.o \
       ${OUT}/UDVO.o ${OUT}/YSTREAM.o

@
\subsection{Layer 5}
\begin{verbatim}
trigcat   ATRIG    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
catdef    BMODULE  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
kl        CACHSET  ORDSET SETCAT BASTYPE KOERCE
catdef    CHARNZ   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
catdef    CHARZ    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
dpolcat   DVARCAT  ORDSET SETCAT BASTYPE KOERCE RETRACT NNI INT BOOLEAN
trigcat   ELEMFUN  MONOID SGROUP SETCAT BASTYPE KOERCE
tools     ESTOOLS2 RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
equation1 EVALAB   IEVALAB SETCAT BASTYPE KOERCE
equation2 FEVALAB  IEVALAB
fourier   FCOMP    ORDSET SETCAT BASTYPE KOERCE BOOLEAN
patmatch1 FPATMAB  TYPE PATMAB SETCAT BASTYPE KOERCE
catdef    GROUP    MONOID SGROUP SETCAT BASTYPE KOERCE INT
indexedp  IDPAM    ABELMON ABELSG SETCAT BASTYPE KOERCE IDPC ORDSET INT LIST
                   ILIST BOOLEAN
indexedp  IDPO     IDPC SETCAT BASTYPE KOERCE ORDSET INT LIST BOOLEAN ILIST
seg       INCRMAPS MONOID SGROUP SETCAT BASTYPE KOERCE ABELSG
aggcat    IXAGG    HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                   ELTAGG ELTAB ORDSET
kl        KERNEL2  ORDSET SETCAT BASTYPE KOERCE INT LIST NNI
derham    LALG     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
catdef    LINEXP   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
modmonom  MODMONOM ORDSET SETCAT BASTYPE KOERCE
naalgc    MONADWU  MONAD SETCAT BASTYPE KOERCE NNI INT SINT
mring     MRF2     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
naalgc    NARNG    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE MONAD
newpoly   NSUP2    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
catdef    OASGP    ORDSET SETCAT BASTYPE KOERCE ABELMON ABELSG
dpolcat   ODVAR    DVARCAT ORDSET SETCAT BASTYPE KOERCE RETRACT
alql      OPQUERY  ORDSET SETCAT BASTYPE KOERCE
catdef    ORDFIN   ORDSET SETCAT BASTYPE KOERCE FINITE
catdef    ORDMON   ORDSET SETCAT BASTYPE KOERCE MONOID SGROUP
patmatch2 PATMATCH SETCAT BASTYPE KOERCE PATMAB KONVERT BOOLEAN RETRACT
                   INT LIST ILIST RING RNG ABELGRP CABMON ABELMON ABELSG
                   SGROUP MONOID LMODULE
catdef    PDRING   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE SINT NNI INT
perm      PERMCAT  GROUP MONOID SGROUP SETCAT BASTYPE KOERCE ORDSET FINITE
aggcat    PRQAGG   BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
aggcat    QUAGG    BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
dpolcat   SDVAR    DVARCAT ORDSET SETCAT BASTYPE KOERCE RETRACT NNI INT
aggcat    SKAGG    BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
poly      SUP2     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
trigcat   TRIGCAT  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
laurent   ULS2     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE
poly      UP2      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE

\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
equation1.spad.pamphlet (EVALAB IEVALAB)

\end{verbatim}

<<layer5>>=
LAYER5=${OUT}/ATRIG.o ${OUT}/ATRIG-.o ${OUT}/BMODULE.o \
       ${OUT}/CACHSET.o ${OUT}/CHARNZ.o ${OUT}/CHARZ.o \
       ${OUT}/DVARCAT.o ${OUT}/DVARCAT-.o \
       ${OUT}/ELEMFUN.o ${OUT}/ELEMFUN-.o ${OUT}/ESTOOLS2.o \
       ${OUT}/EVALAB.o ${OUT}/EVALAB-.o \
       ${OUT}/FCOMP.o ${OUT}/FEVALAB.o ${OUT}/FEVALAB-.o \
       ${OUT}/FPATMAB.o ${OUT}/GROUP.o ${OUT}/GROUP-.o \
       ${OUT}/IDPAM.o ${OUT}/IDPO.o ${OUT}/INCRMAPS.o \
       ${OUT}/IXAGG.o ${OUT}/IXAGG-.o ${OUT}/KERNEL2.o \
       ${OUT}/LALG.o ${OUT}/LALG-.o \
       ${OUT}/LINEXP.o \
       ${OUT}/MODMONOM.o ${OUT}/MONADWU.o ${OUT}/MONADWU-.o \
       ${OUT}/MRF2.o ${OUT}/NARNG.o ${OUT}/NARNG-.o \
       ${OUT}/NSUP2.o ${OUT}/OASGP.o ${OUT}/ODVAR.o \
       ${OUT}/OPQUERY.o \
       ${OUT}/ORDFIN.o ${OUT}/ORDMON.o ${OUT}/PATMATCH.o ${OUT}/PERMCAT.o \
       ${OUT}/PDRING.o ${OUT}/PDRING-.o \
       ${OUT}/SDVAR.o \
       ${OUT}/SUP2.o \
       ${OUT}/TRIGCAT.o ${OUT}/TRIGCAT-.o ${OUT}/ULS2.o ${OUT}/UP2.o

@
\subsection{Layer6}
\begin{verbatim}
ore       AUTOMOR  GROUP MONOID SGROUP SETCAT BASTYPE KOERCE ELTAB RING RNG
                   ABELGRP CABMON ABELMON ABELSG LMODULE INT SINT NNI 
aggcat    BGAGG    HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
aggcat    BRAGG    RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
carten    CARTEN2  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
eigen     CHARPOL  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   NNI INT SINT PI
gaussian  COMPLEX2 COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
catdef    DIFEXT   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE DIFRING PDRING SINT NNI INT
aggcat    DLAGG    RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
aggcat    ELAGG    LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB ELTAGG ELTAB CLAGG KONVERT NNI INT ORDSET
fspace    ES1      ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB TYPE
fspace    ES2      ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB
carten    GRMOD    SETCAT BASTYPE KOERCE COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
trigcat   HYPCAT   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE ELEMFUN
modring   MODRING  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                   KOERCE SGROUP MONOID LMODULE COMRING BMODULE RMODULE
                   BOOLEAN
naalgc    NASRING  NARNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   MONAD MONADWU
kl        MKCHSET  CACHSET ORDSET SETCAT BASTYPE KOERCE NNI INT
catdef    MODULE   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
catdef    OAMON    OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON ABELSG
sortpak   SORTPAK  TYPE IXAGG HOAGG AGG SETCAT BASTYPE KOERCE EVALAB IEVALAB
                   ELTAGG ELTAB SINT NNI INT BOOLEAN PI ORDSET URAGG RCAGG
fmod      ZMOD     COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   FINITE KONVERT STEP SINT INT PI NNI INS EUCDOM

\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
fmod.spad.pamphlet (ZMOD)
sortpak.spad.pamphlet (SORTPAK)
\end{verbatim}

<<layer6>>=
LAYER6=${OUT}/AUTOMOR.o ${OUT}/BGAGG.o ${OUT}/BGAGG-.o \
       ${OUT}/BRAGG.o ${OUT}/BRAGG-.o \
       ${OUT}/CARTEN2.o ${OUT}/CHARPOL.o ${OUT}/COMPLEX2.o \
       ${OUT}/DIFEXT.o ${OUT}/DIFEXT-.o ${OUT}/DLAGG.o \
       ${OUT}/ELAGG.o ${OUT}/ELAGG-.o ${OUT}/ES1.o ${OUT}/ES2.o \
       ${OUT}/GRMOD.o ${OUT}/GRMOD-.o \
       ${OUT}/HYPCAT.o ${OUT}/HYPCAT-.o ${OUT}/MKCHSET.o \
       ${OUT}/MODRING.o ${OUT}/MODULE.o ${OUT}/MODULE-.o \
       ${OUT}/NASRING.o ${OUT}/NASRING-.o \
       ${OUT}/OAMON.o ${OUT}/SORTPAK.o \
       ${OUT}/ZMOD.o

@
\subsection{Layer7}
\begin{verbatim}
catdef    ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE MODULE BMODULE RMODULE
tree      BTCAT    BRAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB NNI INT
xpoly     FMCAT   BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                  KOERCE RMODULE RETRACT MODULE
carten    GRALG   GRMOD SETCAT BASTYPE KOERCE RETRACT COMRING RING RNG ABELGRP
                  CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
indexedp  IDPOAM  OAMON OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON ABELSG
                  IDPC INT LIST ILIST BOOLEAN
free      IFAMON  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE FAMONC RETRACT
                  INT LIST ILIST OAMON OASGP ORDSET
catdef    OCAMON  OAMON OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON ABELSG 
                  CABMON
aggcat    PRQAGG  BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
aggcat    QUAGG   BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
aggcat    SKAGG   BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
\end{verbatim}

<<layer7>>=
LAYER7=${OUT}/ALGEBRA.o ${OUT}/ALGEBRA-.o ${OUT}/BTCAT.o ${OUT}/BTCAT-.o \
       ${OUT}/FMCAT.o \
       ${OUT}/IDPOAM.o ${OUT}/IFAMON.o ${OUT}/GRALG.o ${OUT}/GRALG-.o \
       ${OUT}/OCAMON.o ${OUT}/PRQAGG.o ${OUT}/QUAGG.o ${OUT}/SKAGG.o 

@
\subsection{Layer8}
\begin{verbatim}
tree      BSTREE   BTCAT BRAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                   EVALAB IEVALAB ORDSET INT ILIST ILIST
tree      BTOURN   BTCAT BRAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE 
                   EVALAB IEVALAB ORDSET INT LIST ILIST
card      CARD     ORDSET SETCAT BASTYPE KOERCE ABELMON ABELSG MONOID SGROUP
                   RETRACT BOOLEAN INT NNI INS EUCDOM UFD GCDDOM INTDOM ALGEBRA
                   DIFRING ORDRING MODULE RING ABELGRP
numeric   DRAWHACK ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER KONVERT
aggcat    DQAGG    SKAGG BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB QUAGG
manip     FACTFUNC INTDOM COMRING RING RNG CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER INT LIST ILIST INS EUCDOM UFD GCDDOM NNI LSAGG
                   STAGG ELAGG
fr        FR2      INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER
fraction  FRAC2    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER
fr        FRUTIL   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER INT LIST ILIST PI NNI LSAGG STAGG
fortcat   FMTC     INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER ORDSET RETRACT
lodop     MLO      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
naalgc    NAALG    NARNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   MONAD MODULE BMODULE LMODULE RMODULE COMRING RING RNG 
                   SGROUP MONOID PI NNI INT
catdef    OAGROUP  OCAMON OAMON OAGSP ORDSET SETCAT BASTYPE KOERCE ABELMON
                   ABELSG CABMON ABELGRP
catdef    OAMONS   OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON
                   ABELSG CABMON
opalg     OP       RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE RETRACT ELTAB CHARZ CHARNZ ALGEBRA
                   MODULE BMODULE RMODULE COMRING ORDSET
complet   ORDCOMP2 SETCAT BASTYPE KOERCE SINT INS EUCDOM UFD GCDDOM INTDOM
                   ALGEBRA MODULE DIFRING ORDRING RING ABELGRP ABELMON MONOID
catdef    PID      GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER
random    RANDSRC  INT PI NNI INS EUCDOM UFD GCDDOM INTDOM ALGEBRA DIFRING
                   ORDRING MODULE RING ABELGRP ABELMON
seg       UNISEG2  TYPE ORDRING OAGROUP OCAMON OAMON OASGP ORDSET SETCAT 
                   BASTYPE KOERCE ABELMON ABELSG CABMON ABELGRP RING RNG 
                   SGROUP MONOID LMODULE
xpoly     XALG     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
taylor    ITAYLOR  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE INTDOM COMRING BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
card.spad.pamphlet (CARD)
fortcat.spad.pamphlet (FORTFN FMC FORTCAT FVC FMTC FMFUN FVFUN)
\end{verbatim}

<<layer8>>=
LAYER8=${OUT}/BSTREE.o ${OUT}/BTOURN.o ${OUT}/CARD.o \
       ${OUT}/DRAWHACK.o ${OUT}/DQAGG.o ${OUT}/FACTFUNC.o \
       ${OUT}/FMTC.o ${OUT}/FR2.o ${OUT}/FRAC2.o ${OUT}/FRUTIL.o \
       ${OUT}/ITAYLOR.o \
       ${OUT}/MLO.o ${OUT}/NAALG.o ${OUT}/NAALG-.o \
       ${OUT}/OAGROUP.o ${OUT}/OAMONS.o \
       ${OUT}/OP.o ${OUT}/ORDCOMP2.o ${OUT}/PID.o ${OUT}/RANDSRC.o \
       ${OUT}/UNISEG2.o ${OUT}/XALG.o 

@
\subsection{Layer9}
\begin{verbatim}
polycat  AMR      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                  KOERCE SGROUP MONOID LMODULE BMODULE RMODULE COMRING ALGEBRA
                  MODULE CHARZ CHARNZ INTDOM ENTIRER OAMON OASGP ORDSET INS
                  UFD GCDDOM EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON DIFRING
                  KONVERT RETRACT LINEXP PATMAB CFCAT REAL STEP
degred   DEGRED   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                  KOERCE SGROUP MONOID LMODULE INTDOM COMRING BMODULE RMODULE
                  ALGEBRA MODULE ENTIRER ORDSET BOOLEAN INT LIST ILIST INS
                  EUCDOM UFD GCDDOM DIFRING PI NNI INS UFD GCDDOM EUCDOM PID
                  OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP SINT
ffcat    DLP      MONOID SGROUP SETCAT BASTYPE KOERCE FINITE INT NNI BOOLEAN
                  SINT PI ABELSG OAMONS OCAMON OAMON OASGP ORDSET ABELMON
                  CABMON
derham   EAB      ORDSET SETCAT BASTYPE KOERCE INS UFD GCDDOM INTDOM COMRING
                  RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP DIFRING KONVERT RETRACT
                  LINEXP PATMAB CFCAT REAL CHARZ STEP OM INT LIST ILIST
                  BOOLEAN NNI SINT
tools    ESTOOLS1 ORDRING OAGROUP OCAMON OAMON OASGP ORDSET SETCAT BASTYPE
                  KOERCE ABELMON ABELSG CABMON ABELGRP RING RNG SGROUP
                  MONOID LMODULE
free     FAGROUP  ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE MODULE
                  BMODULE LMODULE RMODULE FAMONC RETRACT ORDSET INS UFD
                  GCDDOM INTDOM COMRING RING RNG SGROUP MONOID ALGEBRA
                  ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                  OASGP DIFRING KONVERT LINEXP PATMAB CFCAT REAL CHARZ STEP
                  INT LIST ILIST BOOLEAN OM
free     FAMONOID FAMONC CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE RETRACT
                  OAMONS OCAMON OAMON OASGP ORDSET NNI INT MONOID SGROUP
catdef   FIELD    EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING BOOLEAN
                  INT NNI
aggcat   FLAGG    LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                  IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET INS UFD GCDDOM
                  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                  SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                  ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                  OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ
                  STEP OM
catdef   FLINEXP  INS UFD GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE
                  ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                  OASGP ORDSET DIFRING KONVERT RETRACT PATMAB CFCAT REAL
                  CHARZ STEP
retract  FRETRCT  TYPE INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  LINEXP PATMAB CFCAT REAL CHARZ STEP
fourier  FSERIES  ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                  BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                  COMRING ORDSET PI NNI INT INS UFD GCDDOM INTDOM ENTIRER
                  EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                  DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                  LIST
forttyp  FT       SETCAT BASTYPE KOERCE INS UFD GCDDOM INTDOM COMRING RING
                  RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP INT LIST ILIST
                  BOOLEAN
indexedp IDPAG    OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                  ABELMON ABELSG CABMON IDPC INT LIST ILIST
indexedp IDPOAMS  OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                  ABELMON ABELSG CABMON IDPC INT LIST ILIST
complet  INFINITY INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
fraction  LA       ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                   BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET COMRING
lodop     OMLO     MLO RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   DIFRING COMRING
special  ORTHPOL  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                  BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                  NNI INT SINT PI ALGEBRA MODULE INS UFD GCDDOM INTDOM
                  ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                  OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT
                  REAL CHARZ STEP
padic    PADICCT  EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER CHARZ
expr     PMASS    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON 
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
expr     PMPRED   TYPE INS UFD GCDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
product  PRODUCT  SETCAT BASTYPE KOERCE FINITE MONOID SGROUP ABELMON ABELSG
                  CABMON GROUP ABELGRP OAMONS OCAMON OAMON OASGP ORDSET
                  NNI INT
newpoint PTFUNC2  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE INS UFD GCDDOM INTDOM COMRING BMODULE
                  RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                  OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT
                  LINEXP PATMAB CFCAT REAL CHARZ STEP OM
sf       RADCAT   INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                  RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                  OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT
                  LINEXP PATMAB CFCAT REAL CHARZ STEP
radix    RADUTIL  INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
retract  RATRET   RETRACT INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                  LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                  OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING
                  KONVERT LINEXP PATMAB CFCAT REAL CHARZ STEP
xpoly    XFALG    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE XALG BMODULE RMODULE ALGEBRA MODULE
                  RETRACT
puiseux  UPXS2    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE INS UFD GCDDOM INTDOM COMRING BMODULE
                  RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                  OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT
                  LINEXP PATMAB CFCAT REAL CHARZ STEP
lindep   ZLINDEP  LINEXP RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                  KOERCE SGROUP MONOID LMODULE INS UFD GCDDOM INTDOM COMRING
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT PATMAB CFCAT REAL CHARZ STEP OM
\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
degred.spad.pamphlet (DEGRED)
indexedp.spad.pamphlet (IDPC IDPO IDPAM IDPOAM  IDPOAMS IDPAG)
product.spad.pamphlet (PRODUCT)
retract.spad.pamphlet (RETRACT FRETRCT RATRET)
sf.spad.pamphlet (REAL RADCAT RNS FPS DFLOAT)
\end{verbatim}

<<layer9>>=
LAYER9=${OUT}/AMR.o ${OUT}/AMR-.o ${OUT}/DEGRED.o \
       ${OUT}/DLP.o ${OUT}/EAB.o \
       ${OUT}/ESTOOLS1.o \
       ${OUT}/FAGROUP.o \
       ${OUT}/FAMONOID.o ${OUT}/FIELD.o ${OUT}/FIELD-.o \
       ${OUT}/FLAGG.o ${OUT}/FLAGG-.o \
       ${OUT}/FLINEXP.o ${OUT}/FLINEXP-.o \
       ${OUT}/FRETRCT.o ${OUT}/FRETRCT-.o \
       ${OUT}/FSERIES.o ${OUT}/FT.o ${OUT}/IDPAG.o ${OUT}/IDPOAMS.o \
       ${OUT}/INFINITY.o ${OUT}/LA.o ${OUT}/OMLO.o \
       ${OUT}/ORTHPOL.o ${OUT}/PRODUCT.o \
       ${OUT}/PADICCT.o ${OUT}/PMPRED.o \
       ${OUT}/PMASS.o ${OUT}/PTFUNC2.o \
       ${OUT}/RADCAT.o ${OUT}/RADCAT-.o \
       ${OUT}/RATRET.o ${OUT}/RADUTIL.o  ${OUT}/UPXS2.o ${OUT}/XFALG.o \
       ${OUT}/ZLINDEP.o

@
\subsection{Layer10}
\begin{verbatim}
aggcat     A1AGG    FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET INS
                    UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT
                    REAL CHARZ STEP OM BOOLEAN SINT INT NNI LIST ILIST LSAGG
                    STAGG URAGG RCAGG ELAGG
array2     ARR2CAT  FLAGG LNAGG IXAGG ELTAGG CLAGG KONVERT ORDSET BOOLEAN
                    NNI INT SINT LIST ILIST INS UFD GCDDOM INTDOM COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM
                    PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM
asp        ASP34    FMC FORTCAT TYPE KOERCE BOOLEAN INS UFD GCDDOM INTDOM 
                    COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP FPS RNS FIELD DIVRING RADCAT NNI 
                    INT OM
tree      BBTREE   BTCAT BRAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                   EVALAB IEVALAB BOOLEAN LSAGG STAGG URAGG LNAGG IXAGG ELTAGG
                   ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST NNI
                   SINT PI 
functions  BFUNCT   SETCAT BASTYPE KOERCE ORDSET DFLOAT FPS RNS FIELD EUCDOM
                    UFD GCDDOM DIVRING INTDOM ALGEBRA DIFRING ORDRING INT
padic      BPADIC   BOOLEAN PADICCT EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER CHARZ
                    INS UFD OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL STEP
tree      BTREE    BTCAT BRAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                   EVALAB IEVALAB INT LIST ILIST BOOLEAN LSAGG STAGG URAGG
                   LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM
cra        CRAPACK  EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST
                    NNI
bags       DEQUEUE  DQAGG SKAGG BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB QUAGG INT LIST ILIST LSAGG STAGG ELAGG
                    FLAGG URAGG INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP OM LNAGG RCAGG IXAGG ELTAGG
                    ELTAGG ELTAB CLAGG FLAGG ELAGG
alql       DLIST    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT FLAGG ORDSET ELAGG INT LIST ILIST INS UFD
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT
                    REAL CHARZ STEP OM
d01routine D01GBFA  NUMINT SETCAT BASTYPE KOERCE DFLOAT PI NNI INT FPS RNS
                    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                    OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT
                    RADCAT PATMAB CHARZ SINT LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    FLAGG ELAGG OM LIST ILIST INS DIFRING 
d02routine D02EJFA  ODECAT SETCAT BASTYPE KOERCE NNI INT LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM LIST ILIST
                    DFLOAT FPS RNS FIELD EUCDOM UFD GCDDOM DIVRING INTDOM
                    ALGEBRA DIFRING ORDRING PID COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                    RMODULE MODULE ENTIRER DIVRING OAGROUP OCAMON OAMON
                    OASGP REAL RETRACT RADCAT PATMAB CHARZ PI
d03routine D03FAFA  PDECAT SETCAT BASTYPE KOERCE LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST NNI
drawpak    DRAWCX   DFLOAT PI NNI INT FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                    COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE 
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    SINT LIST ILIST 
draw       DRAWPT   FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                    ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST
                    INS EUCDOM UFD DIFRING DFLOAT PI NNI SINT 
polycat    FAMR     OAMON OASGP ORDSET NNI INT LIST ILIST PI BOOLEAN FIELD
                    EUCDOM PID GCDDOM UFD DIVRING 
free       FGROUP   GROUP MONOID SGROUP SETCAT BASTYPE KOERCE RETRACT INS UFD
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON 
                    ABELSG LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                    EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                    ORDSET DIFRING KONVERT LINEXP PATMAB CFCAT REAL CHARZ
                    STEP INT LIST ILIST BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    FLAGG ELAGG OM 
aggcat2    FLAGG2   TYPE FLAGG LNAGG IXAGG HOAGG AGG SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET LSAGG
                    STAGG URAGG RCAGG ELAGG INS UFD GCDDOM INTDOM COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM
                    PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM INT
defaults   FLASORT  TYPE FLAGG LNAGG IXAGG HOAGG AGG SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET INS UFD
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL
                    CHARZ STEP OM INT PI NNI SINT BOOLEAN
poly       FM       BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE RMODULE IDPC MODULE RING RNG SGROUP MONOID
                    ORDSET ENTIRER BOOLEAN INT LIST ILIST LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ELAGG OM 
free       FMONOID  MONOID SGROUP SETCAT BASTYPE KOERCE RETRACT ORDSET OAMONS
                    OCAMON OAMON OASGP ABELMON ABELSG CABMON NNI INT LIST
                    ILIST LSAGG STAGG ELAGG FLAGG URAGG RCAGG HOAGG AGG TYPE
                    EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    FLAGG ELAGG OM BOOLEAN
xpoly      FM1      FMCAT BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE RMODULE RETRACT MODULE ORDSET RING RNG
                    SGROUP MONOID LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                    EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    FLAGG ELAGG OM INT LIST ILIST NNI BOOLEAN 
ffcat      FPC      FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARNZ INT INS
multpoly   INDE     OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON IDPC NNI INT LIST ILIST LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM 
padic      IPADIC   PADICCT EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER CHARZ INT
                    NNI INS SINT BOOLEAN PI UFD OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB
                    CFCAT REAL STEP LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    FLAGG ELAGG OM 
intfact    IROOT    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP PI NNI INT
                    BOOLEAN SINT LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM
                    LIST ILIST
intaux     IR2      FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
xlpoly     LEXP     GROUP MONOID SGROUP SETCAT BASTYPE KOERCE ORDSET COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG LMODULE BMODULE
                    RMODULE MODULE INT LIST ILIST NNI LSAGG STAGG URAGG RCAGG
                    HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB
                    CLAGG KONVERT FLAGG ELAGG OM PI
xlpoly     LIECAT   COMRING RING RNG SGROUP MONOID FIELD EUCDOM PID GCDDOM
                    INTDOM ALGEBRA ENTIRER UFD DIVRING
list       LIST2    LSAGG STAGG URAGG RCAGG HOAGG AGG SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    FLAGG ORDSET ELAGG
list       LIST2MAP SETCAT BASTYPE KOERCE TYPE INT LIST ILIST LSAGG STAGG ELAGG
                    FLAGG INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE 
                    ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP OM
free       LMOPS    ABELMON ABELSG SETCAT BASTYPE KOERCE RETRACT INT LIST
                    ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                    LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG
                    OM INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP DIFRING LINEXP PATMAB CFCAT REAL CHARZ STEP NNI
                    BOOLEAN
stream     LZSTAGG  BOOLEAN INT LIST ILIST NNI SINT LSAGG FLAGG ORDSET ELAGG OM
xlpoly     MAGMA    ORDSET SETCAT BASTYPE KOERCE RETRACT BOOLEAN INT LIST LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM ILIST PI NNI
mesh       MESH     INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM FPS RNS
                    FIELD DIVRING RADCAT INT LIST DFLOAT PI NNI SINT ILIST
                    BOOLEAN
modring    MODFIELD FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET 
                    DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
opalg      MODOP    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE RETRACT ELTAB CHARZ CHARNZ
                    ALGEBRA MODULE BMODULE RMODULE COMRING LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    CLAGG KONVERT FLAGG ORDSET ELAGG INT LIST ILIST OM ES
                    SINT NNI
moebius    MOEBIUS  GROUP MONOID SGROUP SETCAT BASTYPE KOERCE FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                    DIVRING INT LIST ILIST BOOLEAN LSAGG STAGG ELAGG FLAGG
                    LNAGG RCAGG IXAGG
mring     MRING    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE RETRACT CHARZ CHARNZ ALGEBRA MODULE
                   BMODULE RMODULE FINITE COMRING INT LIST ILIST NNI SINT PI
                   BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                   IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET
                   ELAGG OM GROUP ORDMON 
alql       MTHING   ORDSET SETCAT BASTYPE KOERCE INT LIST ILIST BOOLEAN LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG 
                    IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM
lodop      NCODIV   MLO RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                    INT BOOLEAN
contfrac   NCNTFRAC FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                    DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                    KONVERT RETRACT RADCAT PATMAB CHARZ INS OINTDOM DIFRING
                    LINEXP CFCAT STEP INT
tube       NUMTUBE  PSCURVE KOERCE DFLOAT FPS RNS FIELD EUCDOM PID GCDDOM
                    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                    CHARZ LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT
                    LIST ILIST NNI PI BOOLEAN
lodop     ODR      SETCAT BASTYPE KOERCE BMODULE LMODULE ABELGRP CABMON ABELMON
                   ABELSG RMODULE DIFRING RING RNG SGROUP MONOID FIELD EUCDOM
                   PID GCDDOM INTDOM COMRING ALGEBRA MODULE ENTIRER UFD DIVRING
                   PDRING INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                   KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
xpoly      OFMONOID ORDMON ORDSET SETCAT BASTYPE KOERCE MONOID SGROUP RETRACT
                    OAMONS OCAMON OAMON OASGP ABELMON ABELSG CABMON NNI INT
                    LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG
                    ELAGG OM BOOLEAN
complet    ONECOMP  SETCAT BASTYPE KOERCE FRETRCT RETRACT ABELGRP CABMON 
                    ABELMON ABELSG ORDRING OAGROUP OCAMON OAMON OASGP 
                    ORDSET RING RNG SGROUP MONOID LMODULE BOOLEAN INT INS 
                    UFD GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE 
                    ENTIRER EUCDOM PID OINTDOM DIFRING KONVERT LINEXP 
                    PATMAB CFCAT REAL CHARZ STEP
complet    ORDCOMP  SETCAT BASTYPE KOERCE FRETRCT RETRACT ABELGRP CABMON 
                    ABELMON ABELSG ORDRING OAGROUP OCAMON OAMON OASGP ORDSET 
                    RING RNG SGROUP MONOID LMODULE BOOLEAN SINT INT INS UFD 
                    GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE 
                    ENTIRER EUCDOM PID OINTDOM DIFRING KONVERT LINEXP 
                    PATMAB CFCAT REAL CHARZ STEP
ore        OREPCAT  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                    KOERCE SGROUP MONOID LMODULE BMODULE RMODULE FRETRCT 
                    RETRACT ALGEBRA MODULE NNI INT LIST ILIST BOOLEAN 
                    INTDOM COMRING ENTIRER GCDDOM FIELD EUCDOM PID UFD 
                    DIVRING INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP 
                    ORDSET DIFRING KONVERT LINEXP PATMAB CFCAT REAL CHARZ STEP
wtpol      OWP      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                    KOERCE SGROUP MONOID LMODULE ALGEBRA MODULE BMODULE 
                    RMODULE COMRING FIELD EUCDOM PID GCDDOM INTDOM ENTIRER 
                    UFD DIVRING
padic      PADIC    BOOLEAN PADICCT EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP 
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER 
                    CHARZ INS UFD OINTDOM ORDRING OAGROUP OCAMON OAMON 
                    OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB 
                    CFCAT REAL STEP
partperm   PARTPERM INT LIST ILIST SINT NNI BOOLEAN LSAGG STAGG URAGG RCAGG
                    HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM
patmatch1  PATLRES  SETCAT BASTYPE KOERCE LSAGG STAGG URAGG RCAGG HOAGG AGG
                    TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    FLAGG ORDSET ELAGG BOOLEAN
pattern    PATTERN2 SETCAT BASTYPE KOERCE LSAGG STAGG URAGG RCAGG HOAGG AGG
                    TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    FLAGG ORDSET ELAGG OM INT LIST ILIST 
xlpoly     PBWLB    ORDSET SETCAT BASTYPE KOERCE RETRACT INT LIST ILIST LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM 
pgrobner   PGROEB   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER LSAGG STAGG URAGG RCAGG 
                    HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB 
                    CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST
tree     PENDTREE  BRAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB INT LIST ILIST LSAGG STAGG ELAGG FLAGG URAGG LNAGG
                   RCAGG IXAGG CLAGG HOAGG ORDSET AGG ELTAGG SETCAT BASTYPE
permgrps   PGE      INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP SINT NNI INT
                    LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM PI
pinterp    PINTERP  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
plottool   PLOTTOOL DFLOAT INT LIST ILIST FPS RNS FIELD EUCDOM PID GCDDOM
                    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE 
                    RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                    OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT
                    RADCAT PATMAB CHARZ
pfr        PFR      FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    INT LIST ILIST BOOLEAN LSAGG STAGG ELAGG FLAGG URAGG RCAGG
                    HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB
                    CLAGG KONVERT FLAGG ORDSET ELAGG OM PI NNI INS OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP
patmatch1  PMDOWN   SETCAT BASTYPE KOERCE PATMAB RETRACT INT LIST ILIST LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM
patmatch2  PMINS    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST NNI
patmatch1  PMLSAGG  SETCAT BASTYPE KOERCE PATMAB LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT FLAGG ORDSET ELAGG BOOLEAN INT LIST ILIST
prtition   PRTITION OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON
                    ABELSG CABMON INT LIST ILIST LSAGG STAGG ELAGG FLAGG
                    BOOLEAN NNI LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INS
                    UFD GCDDOM INTDOM COMRING RING RNG ABELGRP SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                    OINTDOM ORDRING OAGROUP DIFRING RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP 
pscat      PSCAT    AMR RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE BMODULE RMODULE COMRING 
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER OAMON OASGP 
                    ORDSET INT INS UFD GCDDOM EUCDOM PID OINTDOM ORDRING 
                    OAGROUP OCAMON DIFRING KONVERT RETRACT LINEXP PATMAB 
                    CFCAT REAL STEP FIELD DIVRING
patmatch1  PMTOOLS  SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE ORDSET KONVERT RETRACT LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST NNI
clifford   QFORM    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE FIELD
                    EUCDOM PID GCDDOM INTDOM COMRING RING RNG SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
bags       QUEUE    QUAGG BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB INT LIST ILIST LSAGG STAGG URAGG RCAGG LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM
kl         SCACHE   CACHSET ORDSET SETCAT BASTYPE KOERCE INT LIST BOOLEAN ILIST
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM SINT
seg        SEG      SEGCAT TYPE SETCAT BASTYPE KOERCE SEGXCAT BOOLEAN ORDRING
                    OAGROUP OCAMON OAMON OASGP ORDSET ABELMON ABELSG CABMON
                    ABELGRP RING RNG SGROUP MONOID LMODULE LIST ILIST LSAGG
                    STAGG URAGG RCAGG HOAGG AGG EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM
seg        SEG2     TYPE ORDRING OAGROUP OCAMON OAMON OASGP ORDSET SETCAT
                    BASTYPE KOERCE ABELMON ABELSG CABMON ABELGRP RING RNG
                    SGROUP MONOID LMODULE INT LIST BOOLEAN ILIST LSAGG STAGG
                    URAGG RCAGG HOAGG AGG EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ELAGG OM
sex        SEXOF    SEXCAT SETCAT BASTYPE KOERCE INT LIST ILIST BOOLEAN LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM NNI
bags       STACK    SKAGG BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB INT LIST ILIST LSAGG STAGG URAGG RCAGG LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM
sttaylor  STTAYLOR RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                   KOERCE SGROUP MONOID LMODULE SINT NNI INT LIST ILIST LSAGG
                   STAGG ALGEBRA MODULE BMODULE RMODULE INS UFD GCDDOM INTDOM
                   COMRING ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB
                   CFCAT REAL CHARZ STEP FIELD DIVRING 
tableau    TABLBUMP ORDSET SETCAT BASTYPE KOERCE INT LIST BOOLEAN ILIST LSAGG
                    STAGG PI NNI ELAGG FLAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT 
tableau    TABLEAU  SETCAT BASTYPE KOERCE INT LIST ILIST LSAGG SINT NNI STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG 
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM 
space      TOPSP    FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                    DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                    KONVERT RETRACT RADCAT PATMAB CHARZ
trigcat    TRANFUN  TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RING RNG ABELGRP CABMON 
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE 
                    PI NNI INT FIELD EUCDOM PID GCDDOM INTDOM COMRING BMODULE 
                    RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
tube       TUBE     PSCURVE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM INTDOM 
                    COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                    BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA 
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON 
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB 
                    CHARZ BOOLEAN
setorder   UDPO     SETCAT BASTYPE KOERCE INT LIST ILIST BOOLEAN LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM 
seg        UNISEG   SEGCAT TYPE SETCAT BASTYPE KOERCE SEGXCAT INT BOOLEAN
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET ABELMON ABELSG
                    CABMON ABELGRP RING RNG SGROUP MONOID LMODULE LIST ILIST
                    LSAGG STAGG ELAGG FLAGG URAGG LNAGG RCAGG IXAGG CLAGG HOAGG
                    AGG ELTAGG 
viewpack   VIEW     INT LIST FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM ILIST SINT PI NNI
catdef     VSPACE   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
xpoly      XPOLYC   XFALG RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE XALG BMODULE RMODULE ALGEBRA
                    MODULE RETRACT
xpoly      XPR      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE XALG BMODULE RMODULE ALGEBRA
                    MODULE FMCAT RETRACT COMRING ORDMON ORDSET LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM INT LIST ILIST
                    BOOLEAN NNI FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD
                    DIVRING
\end{verbatim}
\subsubsection{Completed spad files}

\begin{verbatim}
complet.spad.pamphlet (ORDCOMP ORDCOMP2 ONECOMP ONECOMP2 INFINITY)
cra.spad.pamphlet (CRAPACK)
defaults.spad.pamphlet (REPSQ REPDB FLASORT)
drawpak.spad.pamphlet (DRAWCX)
free.spad.pamphlet (LMOPS FMONOID FGROUP FAMONC IFAMON FAMONOID FAGROUP)
fourier.spad.pamphlet (FCOMP FSERIES)
functions.spad.pamphlet (BFUNCT)
mesh.spad.pamphlet (MESH)
moebius.spad.pamphlet (MOEBIUS)
mring.spad.pamphlet (MRING MRF2)
opalg.spad.pamphlet (MODOP OP)
partperm.spad.pamphlet (PARTPERM)
pgrobner.spad.pamphlet (PGROEB)
plottool.spad.pamphlet (PLOTTOOL)
setorder.spad.pamphlet (UDPO UDVO)
sttaylor.spad.pamphlet (STTAYLOR)
tableau.spad.pamphlet (TABLBUMP TABLEAU)
viewpack.spad.pamphlet (VIEW)
\end{verbatim}

<<layer10>>=
LAYER10=${OUT}/A1AGG.o ${OUT}/A1AGG-.o \
        ${OUT}/ARR2CAT.o ${OUT}/ARR2CAT-.o \
        ${OUT}/ASP34.o ${OUT}/BBTREE.o \
        ${OUT}/BFUNCT.o ${OUT}/BPADIC.o ${OUT}/BTREE.o \
        ${OUT}/CRAPACK.o \
        ${OUT}/DEQUEUE.o ${OUT}/DLIST.o ${OUT}/DRAWCX.o \
        ${OUT}/D01GBFA.o ${OUT}/D02EJFA.o \
        ${OUT}/D03FAFA.o ${OUT}/DRAWPT.o \
        ${OUT}/FAMR.o ${OUT}/FAMR-.o \
        ${OUT}/FLASORT.o ${OUT}/FLAGG2.o ${OUT}/FGROUP.o \
        ${OUT}/FM.o ${OUT}/FM1.o ${OUT}/FPC.o ${OUT}/FPC-.o \
        ${OUT}/FMONOID.o \
        ${OUT}/INDE.o ${OUT}/IPADIC.o \
        ${OUT}/IROOT.o ${OUT}/IR2.o \
        ${OUT}/LEXP.o ${OUT}/LIECAT.o ${OUT}/LIECAT-.o \
        ${OUT}/LIST2.o ${OUT}/LIST2MAP.o ${OUT}/LMOPS.o \
        ${OUT}/LZSTAGG.o ${OUT}/LZSTAGG-.o ${OUT}/MAGMA.o \
        ${OUT}/MESH.o ${OUT}/MOEBIUS.o \
        ${OUT}/MODFIELD.o ${OUT}/MODOP.o ${OUT}/MRING.o ${OUT}/MTHING.o \
        ${OUT}/NCNTFRAC.o \
        ${OUT}/NCODIV.o ${OUT}/NUMTUBE.o ${OUT}/ODR.o \
        ${OUT}/OFMONOID.o ${OUT}/ONECOMP.o \
        ${OUT}/ORDCOMP.o ${OUT}/OREPCAT.o ${OUT}/OREPCAT-.o \
        ${OUT}/OWP.o \
        ${OUT}/PADIC.o ${OUT}/PATTERN2.o \
        ${OUT}/PATLRES.o ${OUT}/PARTPERM.o ${OUT}/PBWLB.o ${OUT}/PENDTREE.o \
        ${OUT}/PGE.o \
        ${OUT}/PGROEB.o ${OUT}/PINTERP.o ${OUT}/PLOTTOOL.o \
        ${OUT}/PFR.o ${OUT}/PMDOWN.o \
        ${OUT}/PRTITION.o \
        ${OUT}/PMINS.o ${OUT}/PMLSAGG.o ${OUT}/PMTOOLS.o \
        ${OUT}/PSCAT.o ${OUT}/PSCAT-.o ${OUT}/QFORM.o ${OUT}/QUEUE.o \
        ${OUT}/SCACHE.o ${OUT}/SEG.o \
        ${OUT}/SEG2.o ${OUT}/SEXOF.o ${OUT}/STACK.o ${OUT}/STTAYLOR.o \
        ${OUT}/TABLBUMP.o ${OUT}/TABLEAU.o \
        ${OUT}/TOPSP.o ${OUT}/TRANFUN.o ${OUT}/TRANFUN-.o \
        ${OUT}/TUBE.o ${OUT}/UDPO.o ${OUT}/UNISEG.o \
        ${OUT}/VIEW.o ${OUT}/VSPACE.o ${OUT}/VSPACE-.o \
        ${OUT}/XPOLYC.o ${OUT}/XPR.o

@
\subsection{Layer11}
\begin{verbatim}
ore        APPLYORE RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE OREPCAT BMODULE RMODULE
                    FRETRCT RETRACT ALGEBRA MODULE SINT NNI INT
array1     ARRAY1   A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET INT
                    LSAGG STAGG URAGG RCAGG ELAGG OM LIST ILIST NNI INS UFD
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON 
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA 
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON 
                    OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL 
                    CHARZ STEP
array1     ARRAY12  A1AGG FLAGG LNAGG IXAGG HOAGG AGG SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
array2     ARRAY2   ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    A1AGG FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT ORDSET
                    INT
bags       ASTACK   SKAGG BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB INT A1AGG FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT ORDSET ELAGG LIST ILIST SINT NNI LSAGG STAGG ELAGG
                    URAGG RCAGG HOAGG INS UFD GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP OM
aggcat     BTAGG    ORDSET SETCAT BASTYPE KOERCE LOGIC A1AGG FLAGG LNAGG IXAGG 
                    HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
combinat   COMBINAT INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP NNI INT OM
                    A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                    ELTAGG ELTAB CLAGG ELAGG SINT PI
stream     CSTTOOLS TYPE LZSTAGG STAGG URAGG RCAGG HOAGG AGG SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT SINT NNI INT
d01routine D01FCFA  NUMINT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    SINT LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                    LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                    ILIST NNI DIFRING TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                    PI DFLOAT INS 
e04routine E04MBFA  OPTCAT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    DIFRING OM TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN INT
                    NNI LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                    EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG
                    DFLOAT PI INS BOOLEAN
array1     FARRAY   A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    ELAGG INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE 
                    ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT
                    REAL CHARZ STEP OM
xlpoly     FLALG    LIECAT MODULE BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE RMODULE
galutil    GALUTIL  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                    ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ INT NNI
                    PI A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                    ELTAGG ELTAB CLAGG ELAGG
bags       HEAP     PRQAGG BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB ORDSET INT LSAGG STAGG URAGG RCAGG LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM LIST ILIST NNI
                    INS EUCDOM UFD GCDDOM INTDOM ALGEBRA DIFRING ORDRING
                    MODULE RING ABELGRP ABELMON PI A1AGG SINT
array1     IARRAY1  A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    SINT NNI INT INS UFD GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE 
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP OM
array2     IARRAY2  ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    A1AGG FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT ORDSET
array1     IFARRAY  A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE 
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    ELAGG BOOLEAN PRIMARR LSAGG STAGG URAGG RCAGG OM LIST
                    ILIST NNI SINT INS EUCDOM UFD GCDDOM INTDOM ALGEBRA
                    DIFRING MODULE RING ABELGRP ABELMON PI COMRING RNG CABMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ENTIRER PID
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP
interval  INTCAT   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN RADCAT RETRACT
numtheor   INTHEORY NNI INT INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM
                    PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ
                    STEP PI A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB
                    IEVALAB ELTAGG ELTAB CLAGG ELAGG BOOLEAN LIST ILIST
ffx        IRREDFFX FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                    RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER UFD DIVRING CHARNZ FINITE STEP DIFRING INT PI NNI
                    BOOLEAN
trigcat    LFCAT    PRIMCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
lodo       LODOCAT  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE OREPCAT BMODULE RMODULE
                    FRETRCT RETRACT ALGEBRA MODULE ELTAB NNI INT BOOLEAN
                    FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
xlpoly     LWORD    ORDSET SETCAT BASTYPE KOERCE RETRACT BOOLEAN LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG OM INT LIST ILIST NNI PI
                    A1AGG SINT
matcat     MATCAT   ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                    LMODULE FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    ORDSET NNI INT BOOLEAN SINT LIST ILIST LSAGG STAGG URAGG
                    RCAGG ELAGG OM INS UFD GCDDOM INTDOM COMRING BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP FIELD DIVRING
matstor    MATSTOR  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE NNI INT SINT PRIMARR A1AGG
                    FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG
                    ELTAB CLAGG KONVERT ORDSET BOOLEAN
ore        OREPCTO  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE OREPCAT BMODULE RMODULE
                    FRETRCT RETRACT ALGEGRA MODULE BOOLEAN NNI INT SINT
                    INTDOM COMRING ENTIRER FIELD EUCDOM PID GCDDOM UFD DIVRING
ore        ORESUP   OREPCAT RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    FRETRCT RETRACT ALGEBRA MODULE INTDOM COMRING ENTIRER
                    FIELD EUCDOM PID GCDDOM UFD DIVRING INS OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP 
ore        OREUP    OREPCAT RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    FRETRCT RETRACT ALGEBRA MODULE NNI INT FIELD EUCDOM
                    PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING INS
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    DIFRING KONVERT LINEXP PATMAB CFCAT REAL CHARZ STEP
plot3d    PLOT3D   PSCURVE KOERCE BOOLEAN INT DFLOAT FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON 
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ LIST
                   ILIST NNI PI LSAGG STAGG ELAGG FLAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG OM SINT
                   DIFRING INS OINTDOM LINEXP CFCAT STEP TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN
poly       PR       FAMR AMR RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT
                    RETRACT OAMON OASGP ORDSET LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT FLAGG ELAGG OM INT LIST ILIST BOOLEAN NNI FIELD
                    EUCDOM PID GCDDOM UFD DIVRING INS OINTDOM ORDRING OAGROUP
                    OCAMON DIFRING LINEXP PATMAB CFCAT REAL STEP
lodof      PREASSOC INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER LODOCAT OREPCAT FRETRCT RETRACT
                    ELTAB NNI INT PI PRIMARR SINT A1AGG FLAGG LNAGG IXAGG
                    HOAGG AGG TYPE EVALAB IEVALAB ELTAGG CLAGG KONVERT ORDSET
array1     PRIMARR2 TYPE A1AGG FLAGG LNAGG IXAGG HOAGG AGG SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
odeef      REDORDER FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    LODOCAT OREPCAT FRETRCT RETRACT ELTAB INT INS PRIMARR LIST
                    ILIST LSAGG STAGG ELAGG BOOLEAN NNI A1AGG FLAGG LNAGG IXAGG
                    HOAGG AGG TYPE EVALAB IEVALAB ELTAGG CLAGG KONVERT ORDSET
                    SINT
aggcat     SRAGG    A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL
                    CHARZ STEP OM NNI INT
stream     STREAM   LZSTAGG STAGG URAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    KONVERT INT LIST ILIST SINT NNI BOOLEAN LSAGG FLAGG ORDSET
                    ELAGG OM INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE 
                    RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP
prtition   SYMPOLY  OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON
                    ABELSG CABMON FAMR AMR RING RNG ABELGRP SGROUP MONOID
                    LMODULE BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ
                    CHARNZ INTDOM ENTIRER FRETRCT RETRACT INT LIST ILIST
                    BOOLEAN KONVERT INS UFD GCDDOM EUCDOM PID OINTDOM ORDRING
                    OAGROUP DIFRING LINEXP PATMAB CFCAT REAL STEP FIELD DIVRING
mts        TS       MTSCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE PSCAT AMR
                    BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                    ENTIRER IEVALAB EVALAB RADCAT TRANFUN TRIGCAT ATRIG
                    HYPCAT AHYP ELEMFUN SINT NNI INT BOOLEAN INS UFD GCDDOM
                    EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                    ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL
                    STEP FIELD DIVRING
ituple     TUPLE    KOERCE SETCAT BASTYPE TYPE A1AGG FLAGG LNAGG IXAGG HOAGG
                    AGG EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET INT
                    PRIMARR NNI BOOLEAN INS UFD GCDDOM INTDOM COMRING RING
                    RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP
                    PATMAB CFCAT REAL CHARZ STEP OM 
pscat      UPSCAT   PSCAT OAMON OASGP ORDSET INT LIST ILIST LSAGG
vector     VECTCAT  A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE 
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    ABELSG NNI INT ABELMON ABELGRP CABMON MONOID SGROUP RING
                    RNG LMODULE INS UFD GCDDOM INTDOM COMRING BMODULE 
                    RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP OM PI RADCAT
xpoly      XDPOLY   FMCAT BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE RMODULE RETRACT MODULE XPOLYC XFALG RING RNG
                    SGROUP MONOID XALG ALGEBRA ORDMON ORDSET INT LIST ILIST
                    LSAGG STAGG ELAGG FLAGG URAGG COMRING NNI RCAGG HOAGG AGG
                    TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    FLAGG ELAGG OM BOOLEAN
xlpoly     XEXPPKG  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE ORDSET
                    XPOLYC XFALG XALG ALGEBRA RETRACT SINT NNI INT INS UFD
                    GCDDOM INTDOM COMRING ENTIRER EUCDOM PID OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP DIFRING KONVERT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP PI
xlpoly     XPBWPOLY XPOLYC XFALG RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE XALG BMODULE RMODULE
                    ALGEBRA MODULE RETRACT FMCAT COMRING ORDSET INT BOOLEAN
                    LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG
                    OM INS UFD GCDDOM INTDOM ENTIRER EUCDOM PID OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP DIFRING LINEXP PATMAB CFCAT REAL
                    CHARZ STEP
xpoly      XPOLY    XPOLYC XFALG RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE XALG BMODULE RMODULE
                    ALGEBRA MODULE RETRACT COMRING
xpoly      XRPOLY   XPOLYC XFALG RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE XALG BMODULE RMODULE
                    ALGEBRA MODULE RETRACT ORDSET BOOLEAN LIST ILIST LSAGG
                    STAGG ELAGG FLAGG COMRING URAGG LNAGG RCAGG IXAGG CLAGG
                    HOAGG ORDSET AGG ELTAGG SETCAT BASTYPE TYPE EVALAB
                    IEVALAB ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM 
ffcat      XF       FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    RETRACT VSPACE CHARZ FPC CHARNZ FINITE BOOLEAN NNI INT

\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
array1.spad.pamphlet (PRIMARR PRIMARR2 TUPLE IFARRAY FARRAY IARRAY1 ARRAY1
                      ARRAY12)
bags.spad.pamphlet (STACK ASTACK QUEUE DEQUEUE HEAP)
combinat.spad.pamphlet (COMBINAT)
ffx.spad.pamphlet (IRREDFFX)
galutil.spad.pamphlet (GALUTIL)
matstor.spad.pamphlet (MATSTOR)
ore.spad.pamphlet (OREPCAT APPLYORE AUTOMOR OREPCTO ORESUP OREUP)
plot3d.spad.pamphlet (PLOT3D)
prtition.spad.pamphlet (PRTITION SYMPOLY)
stream.spad.pamphlet (LZSTAGG CSTTOOLS STREAM STREAM1 STREAM2 STREAM3)
trigcat.spad.pamphlet (ELEMFUN AHYP ATRIG HYPCAT TRANFUN TRIGCAT PRIMCAT
                       LFCAT CFCAT SPFCAT)
xlpoly.spad.pamphlet (MAGMA LWORD LIECAT FLALG XEXPPKG LPOLY PBWLB XPBWPOLY
                      LEXP)
xpoly.spad.pamphlet (OFMONOID FMCAT FM1 XALG XFALG XPOLYC XPR XDPOLY XRPOLY
                     XPOLY)
\end{verbatim}

<<layer11>>=
LAYER11=${OUT}/APPLYORE.o ${OUT}/ARRAY1.o ${OUT}/ARRAY12.o ${OUT}/ARRAY2.o \
        ${OUT}/ASTACK.o ${OUT}/BTAGG.o ${OUT}/BTAGG-.o \
        ${OUT}/COMBINAT.o ${OUT}/CSTTOOLS.o \
        ${OUT}/D01FCFA.o ${OUT}/E04MBFA.o \
        ${OUT}/FARRAY.o \
        ${OUT}/FLALG.o ${OUT}/GALUTIL.o ${OUT}/HEAP.o \
        ${OUT}/IARRAY1.o ${OUT}/IARRAY2.o ${OUT}/IFARRAY.o ${OUT}/INTCAT.o \
        ${OUT}/INTHEORY.o ${OUT}/IRREDFFX.o \
        ${OUT}/LFCAT.o ${OUT}/LODOCAT.o ${OUT}/LODOCAT-.o ${OUT}/LWORD.o \
        ${OUT}/MATCAT.o ${OUT}/MATCAT-.o ${OUT}/MATSTOR.o \
        ${OUT}/ORESUP.o ${OUT}/OREPCTO.o ${OUT}/OREUP.o ${OUT}/PLOT3D.o \
        ${OUT}/PR.o ${OUT}/PREASSOC.o \
        ${OUT}/PRIMARR2.o ${OUT}/REDORDER.o \
        ${OUT}/SRAGG.o ${OUT}/SRAGG-.o \
        ${OUT}/STREAM.o ${OUT}/SYMPOLY.o ${OUT}/TS.o ${OUT}/TUPLE.o \
        ${OUT}/UPSCAT.o ${OUT}/UPSCAT-.o ${OUT}/VECTCAT.o ${OUT}/VECTCAT-.o \
        ${OUT}/XDPOLY.o ${OUT}/XEXPPKG.o \
        ${OUT}/XF.o ${OUT}/XF-.o ${OUT}/XPBWPOLY.o ${OUT}/XPOLY.o \
        ${OUT}/XRPOLY.o

@
\subsection{Layer12}
LODO1 should be here but is broken. See Bug 12.
LODO2 should be here but is broken. See Bug 13.
\begin{verbatim}
boolean  BITS     BTAGG ORDSET SETCAT BASTYPE KOERCE LOGIC A1AGG FLAGG LNAGG
                  IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
                  KONVERT INT FINITE INS UFD GCDDOM INTDOM COMRING RING RNG
                  ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE 
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP
                  PATMAB CFCAT REAL CHARZ STEP OM 
vector   DIRPROD2 TYPE VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
matrix   IMATRIX  MATCAT ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                  IEVALAB VECTCAT A1AGG FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG
                  KONVERT ORDSET RING RNG ABELGRP CABMON ABELMON ABELSG
                  SGROUP MONOID LMODULE PRIMARR EUCDOM PID GCDDOM INTDOM
                  COMRING BMODULE RMODULE ALGEBRA MODULE ENTIRER FIELD UFD
                  DIVRING
interval INTRVL INTCAT GCDDOM INTDOM COMRING RING ABELGRP CABMON ABELMON ABELSG
                SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                ALGEBRA MODULE ENTIRER ORDSET TRANFUN TRIGCAT ATRIG HYPCAT
                AHYP ELEMFUN RADCAT RETRACT FPS RNS FIELD FIELD EUCDOM PID UFD
                DIVRING ORDRING OAGROUP OCAMON OAMON OASGP REAL KONVERT PATMAB
                CHARZ INS OINTDOM DIFRING LINEXP CFCAT STEP
vector   IVECTOR  VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                  RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                  INS UFD GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE
                  ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                  DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM
lodo     LODO1    DIFRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                  KOERCE SGROUP MONOID LMODULE LODOCAT OREPCAT BMODULE FRETRCT
                  RETRACT ALGEBRA MODULE ELTAB FIELD EUCDOM PID GCDDOM INTDOM
                  COMRING ENTIRER UFD DIVRING INS OINTDOM ORDRING OAGROUP
                  OCAMON OAMON OASGP ORDSET KONVERT LINEXP PATMAB CFCAT REAL
                  CHARZ STEP
lodo     LODO2    LODOCAT OREPCAT RING RNG ABELGRP CABMON ABELMON ABELSG
                  SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                  FRETRCT RETRACT ALGEBRA MODULE ELTAB DIFRING FIELD EUCDOM
                  PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING INS OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET KONVERT LINEXP
                  PATMAB CFCAT REAL CHARZ STEP
xlpoly   LPOLY    FLALG LIECAT MODULE BMODULE LMODULE ABELGRP CABMON ABELMON 
                  ABELSG SETCAT BASTYPE KOERCE RMODULE FMCAT RETRACT COMRING
                  RING RNG SGROUP MONOID ORDSET LSAGG STAGG URAGG HOAGG AGG
                  TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                  FLAGG ELAGG OM INT LIST ILIST BOOLEAN NNI FIELD EUCDOM PID
                  GCDDOM INTDOM ALGEBRA ENTIRER UFD DIVRING
solvelin LSMP     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                  LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                  FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG
                  ELTAB CLAGG KONVERT ORDSET MATCAT ARR2CAT NNI INT BOOLEAN
                  PRIMARR SINT A1AGG INS OINTDOM ORDRING OAGROUP OCAMON
                  OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ
                  STEP OM LIST ILIST
solvelin LSMP1    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                  LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                  VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB
                  IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
matfuns  MATCAT2  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE FLAGG LNAGG IXAGG HOAGG AGG TYPE
                  EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET MATCAT
                  ARR2CAT
intclos  TRIMAT   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                  BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                  MODULE ENTIRER FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB
                  IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET MATCAT ARR2CAT
                  INT NNI PI
newpoint PTCAT    VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
string   STRICAT  SRAGG A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET OM

\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
interval.spad.pamphlet (INTCAT INTRVL)
\end{verbatim}

<<layer12>>=
 ${OUT}/BITS.o    ${OUT}/DIRPROD2.o ${OUT}/IMATRIX.o  ${OUT}/INTRVL.o \
 ${OUT}/IVECTOR.o ${OUT}/LPOLY.o    ${OUT}/LSMP.o     ${OUT}/LSMP1.o  \
 ${OUT}/MATCAT2.o ${OUT}/PTCAT.o    ${OUT}/STRICAT.o  ${OUT}/TRIMAT.o 
#${OUT}/LODO1.o ${OUT}/LODO2.o 

@
\subsection{Layer13}
\begin{verbatim}
lodof     ASSOCEQ  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER LODOCAT OREPCAT FRETRCT
                   RETRACT ELTAB SINT NNI INT VECTCAT A1AGG FLAGG LNAGG
                   IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG CLAGG KONVERT
                   ORDSET VECTOR IVECTOR IARRAY1 LIST ILIST PI BOOLEAN
                   FIELD EUCDOM PID GCDDOM UFD DIVRING
carten    CARTEN   GRALG GRMOD SETCAT BASTYPE KOERCE RETRACT OAMONS OCAMON
                   OAMON OASGP ORDSET ABELMON ABELSG CABMON INS UFD GCDDOM
                   INTDOM COMRING RING RNG ABELGRP SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP DIFRING KONVERT LINEXP PATMAB CFCAT REAL
                   CHARZ STEP NNI INT MONOID VECTCAT A1AGG FLAGG LNAGG IXAGG
                   HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG VECTOR
                   IVECTOR IARRAY1 SINT PI INS BOOLEAN LSAGG STAGG URAGG
                   RCAGG ELAGG OM LIST ILIST
clifford  CLIF     RING RNG ABELGRP CABMON ABELMON SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE ALGEBRA MODULE BMODULE RMODULE
                   VSPACE FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER
                   UFD DIVRING SINT PI NNI INT ABELSG PRIMARR BOOLEAN
                   A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                   ELTAGG ELTAB CLAGG KONVERT ORDSET INS LIST ILIST LSAGG
                   STAGG URAGG RCAGG ELAGG OM ELAGG RCAGG VECTOR VECTCAT
                   IVECTOR IARRAY1 
clip      CLIP     DFLOAT FPS RNS FIELD EUCDOM UFD GCDDOM DIVRING INTDOM
                   ALGEBRA DIFRING ORDRING MODULE RING ABELGRP MONOID ORDSET
                   ABELSG SGROUP TRANFUN SETCAT ELEMFUN HYPCAT ATRIG TRIGCAT
                   RADCAT RETRACT BASTYPE PID COMRING RNG CABMON ABELMON 
                   KOERCE LMODULE BMODULE RMODULE ENTIRER DIVRING OAGROUP 
                   OCAMON OAMON OASGP REAL KONVERT PATMAB CHARZ PTCAT VECTCAT
                   A1AGG FLAGG LNAGG IXAGG HOAGG ATT TYPE EVALAB IEVALAB ELTAGG
                   ELTAB CLAGG INS OINTDOM LINEXP STEP OM INT LIST ILIST LSAGG
                   STAGG URAGG RCAGG ELAGG PI NNI SINT BOOLEAN
coordsys  COORDSYS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RADCAT INT PI
                   NNI PTCAT VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE
                   EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
alql      DBASE    SETCAT BASTYPE KOERCE ORDSET STRICAT SRAGG A1AGG FLAGG
                   LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB
                   CLAGG KONVERT OM INT LIST ILIST LSAGG STAGG URAGG RCAGG
                   ELAGG NNI SINT PI
dhmatrix  DHMATRIX MATCAT ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING VECTCAT A1AGG
                   FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT ORDSET TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN INT VECTOR IVECTOR IARRAY1
solvedio  DIOSP    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP NNI INT LIST
                   ILIST OAMONS VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG
                   LNAGG IXAGG CLAGG HOAGG ORDSET AGG ELTAGG SETCAT BASTYPE
                   BOOLEAN TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG SINT
vector    DIRPCAT  INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON 
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP IXAGG HOAGG AGG
                   TYPE EVALAB IEVALAB ELTAGG ELTAB FRETRCT DIFEXT PDRING
                   FLINEXP FINITE OAMONS VSPACE FIELD DIVRING VECTCAT A1AGG
                   FLAGG LNAGG CLAGG INT VECTOR IVECTOR IARRAY1 NNI LSAGG STAGG
                   URAGG RCAGG ELAGG OM LIST ILIST 
d02routinne D02BBFA ODECAT SETCAT BASTYPE KOERCE NNI INT LSAGG STAGG URAGG 
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM LIST ILIST
                    DFLOAT FPS RNS FIELD EUCDOM UFD GCDDOM DIVRING INTDOM
                    ALGEBRA DIFRING ORDRING PID COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER DIVRING ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL RETRACT RADCAT PATMAB CHARZ 
                    VECTCAT A1AGG VECTOR IVECTOR IARRAY1 PI
d02routine D02BHFA  ODECAT SETCAT BASTYPE KOERCE NNI INT DFLOAT FPS RNS
                    FIELD EUCDOM UFD GCDDOM DIVRING INTDOM ALGEBRA DIFRING
                    ORDRING PID COMRING RING RNG ABELGRP CABMON ABELMON 
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB
                    IEVALAB ELTAGG ELTAB CLAGG VECTOR IVECTOR IARRAY1 PI
d02routine D02CJFA  ODECAT SETCAT BASTYPE KOERCE INT LIST ILIST LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM DFLOAT
                    FPS RNS FIELD EUCDOM UFD GCDDOM DIVRING INTDOM ALGEBRA
                    DIFRING ORDRING PID COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL RETRACT RADCAT PATMAB CHARZ
                    VECTCAT A1AGG VECTOR IVECTOR IARRAY1
ffcat     FAXF     XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC STEP DIFRING
                   SINT PI NNI INT VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG
                   LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
                   KONVERT ORDSET INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP LINEXP PATMAB CFCAT REAL OM BOOLEAN LIST ILIST LSAGG
                   STAGG ELAGG 
ffpoly2   FFPOLY2   FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARNZ FFIELDC FINITE STEP DIFRING NNI INT PI VECTOR 
                    IVECTOR IARRAY1 PRIMARR SINT 
fnla      FNLA      NAALG NARNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE MONAG MODULE BMODULE LMODULE RMODULE COMRING RING
                    RNG SGROUP MONOID VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG
                    AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    INT VECTOR IVECTOR IARRAY1 LIST ILIST LSAGG STAGG PI NNI
perman    GRAY      INT VECTOR IVECTOR IARRAY1 PI NNI VECTCAT A1AGG FLAGG LNAGG
                    IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    ELTAGG ELTAB CLAGG KONVERT ORDSET SINT
fnla       HB       INT SINT NNI INS EUCDOM UFD GCDDOM INTDOM ALGEBRA DIFRING
                    ORDRING MODULE RING ABELGRP BOOLEAN VECTOR IVECTOR IARRAY1
                    VECTCAT A1AGG FLAGG LNAGG IXAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAG ELTAGG CLAGG KONVERT ORDSET LIST
                    ILIST LSAGG STAGG
irsn       IRSN     INT LIST NNI INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING
                    KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP SINT
                    PI OM ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG BOOLEAN
                    VECTOR IARRAY1 VECTCAT A1AGG FINITE LOGIC 
fortpack   MCALCFN  SETCAT BASTYPE KOERCE PDRING RING RNG ABELGRP CABMON 
                    ABELMON ABELSG SGROUP MONOID LMODULE FLAGG LNAGG IXAGG
                    HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
                    ORDSET INT VECTOR LSAGG STAGG URAGG RCAGG ELAGG OM LIST
                    ILIST INS UFD GCDDOM INTDOM COMRING BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT
                    REAL CHARZ STEP IVECTOR IARRAY1 NNI SINT PI 
divisor    MHROWRED EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER VECTCAT A1AGG FLAGG
                    LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB
                    CLAGG KONVERT ORDSET INT VECTOR IVECTOR IARRAY1 BOOLEAN
                    INS UFD OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM LSAGG STAGG
                    URAGG RCAGG ELAGG LIST ILIST SINT NNI INS PI FIELD DIVRING
numode     NUMODE   NNI INT VECTOR IVECTOR IARRAY1 PI SINT VECTCAT A1AGG FLAGG
                    LNAGG IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET LSAGG STAGG 
                    URAGG RCAGG ELAGG OM LIST ILIST VECTCAT A1AGG
numquad    NUMQUAD  INT NNI PI BOOLEAN SINT LSAGG STAGG URAGG RCAGG HOAGG AGG
                    TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB LNAGG IXAGG 
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM LIST
                    ILIST VECTOR IVECTOR IARRAY1 VECTCAT A1AGG INS EUCDOM
                    UFD GCDDOM INTDOM ALGEBRA DIFRING ORDRING MODULE RING
                    ABELGRP ABELMON 
odealg     ODESYS   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    LODOCAT OREPCAT FRETRCT RETRACT ELTAB INT LIST ILIST NNI
                    VECTOR IVECTOR IARRAY1 LSAGG STAGG URAGG RCAGG HOAGG AGG
                    TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG CLAGG KONVERT FLAGG
                    ORDSET ELAGG OM VECTCAT A1AGG INS OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING LINEXP PATMAB CFCAT REAL CHARZ
                    STEP BOOLEAN
oderf      ODETOOLS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    LODOCAT OREPCAT FRETRCT RETRACT ELTAB LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST VECTOR
                    VECTCAT A1AGG IVECTOR IARRAY1 INS OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING LINEXP PATMAB CFCAT REAL CHARZ
                    STEP
gdirprod   ORDFUNS  OAMON OASGP ORDSET SETCAT BASTYPE KOERCE ABELMON ABELSG
                    SINT NNI INT VECTOR IVECTOR IARRAY1 BOOLEAN
perman     PERMAN   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE INT VECTOR IVECTOR IARRAY1
                    PI NNI BOOLEAN SINT VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG
                    AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE ENTIRER
catdef     PFECAT   UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER CHARNZ INT VECTOR IVECTOR
                    IARRAY1 FIELD EUCDOM PID DIVRING
newpoint   POINT    PTCAT VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT
                    BASTYPE KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
                    ORDSET RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                    LMODULE LSAGG STAGG URAGG RCAGG ELAGG OM INT LIST ILIST INS
                    UFD GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                    NNI PI RADCAT
pseudolin  PSEUDLIN FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    INT LIST ILIST BOOLEAN NNI VECTOR IVECTOR IARRAY1 VECTCAT
                    A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                    ELTAGG ELTAB CLAGG KONVERT ORDSET SINT
newpoint   PTPACK   RING RNG ABELGRP CABMON ABELMON SETCAT BASTYPE KOERCE 
                    SGROUP MONOID LMODULE INT PTCAT VECTCAT A1AGG FLAGG LNAGG 
                    IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG 
                    KONVERT ORDSET NNI
rep2      REP2     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE SINT NNI INT PI VECTCAT A1AGG FLAGG
                   LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
                   KONVERT ORDSET VECTOR IVECTOR IARRAY1 BOOLEAN LSAGG STAGG
                   URAGG RCAGG ELAGG OM LIST ILIST EUCDOM PID GCDDOM INTDOM
                   COMRING BMODULE RMODULE ALGEBRA MODULE ENTIRER INT UFD
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP FIELD DIVRING MATCAT
                   ARR2CAT FINITE
lodof     SETMN    FINITE SETCAT BASTYPE KOERCE INT VECTOR IVECTOR IARRAY1
                   VECTCAT A1AGG FLAGG LNAGG IXAGG CLAGG HOAGG ORDSET AGG
                   ELTAGG NNI PI SINT LIST ILIST BOOLEAN BTAGG LOGIC TYPE
                   EVALAB IEVALAB ELTAB KONVERT LSAGG STAGG URAGG RCAGG ELAGG
                   OM
sex        SEX      ORDSET SETCAT BASTYPE KOERCE INS UFD GCDDOM INTDOM COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID 
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP FPS RNS FIELD
                    DIVRING RADCAT SEXCAT STRICAT SRAGG A1AGG FLAGG LNAGG
                    IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG OM
string     STRING   STRICAT SRAGG A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE SETCAT
                    BASTYPE KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
                    ORDSET OM INT ORDFIN FINITE INS UFD GCDDOM INTDOM COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID 
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID 
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT
                    LINEXP PATMAB CFCAT REAL CHARZ STEP
efstruc    SYMFUNC  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE PI NNI INT LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG 
                    ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM LIST ILIST INS
                    UFD GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                    VECTOR IVECTOR IARRAY1 SINT VECTCAT A1AGG MONOID ABELMON
                    VECTCAT A1AGG
vector     VECTOR2  VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET INT
                    VECTOR IVECTOR IARRAY1 LIST LSAGG STAGG URAGG RCAGG ELAGG
                    OM ILIST
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
carten.spad.pamphlet (GRMOD GRALG CARTEN CARTEN2)
catdef.spad.pamphlet (ABELGRP ABELMON ABELSG ALGEBRA BASTYPE BMODULE CABMON
                      CHARNZ CHARZ COMRING DIFRING DIFEXT DIVRING ENTIRER
                      EUCDOM FIELD FINITE FLINEXP GCDDOM GROUP INTDOM LMODULE
                      LINEXP MODULE MONOID OAGROUP OAMON OAMONS OASGP OCAMON
                      ORDFIN OINTDOM ORDMON ORDRING ORDSET PDRING PFECAT PID
                      RMODULE RING RNG SGROUP SETCAT STEP UFD VSPACE)
clifford.spad.pamphlet (QFORM CLIF)
clip.spad.pamphlet (CLIP)
coordsys.spad.pamphlet (COORDSYS)
dhmatrix.spad.pamphlet (DHMATRIX)
d02routine.spad.pamphlet (D02BBFA D02BHFA D02CJFA D02EJFA)
ffpoly2.spad.pamphlet (FFPOLY2)
irsn.spad.pamphlet (IRSN)
numode.spad.pamphlet (NUMODE)
numquad.spad.pamphlet (NUMQUAD)
perman.spad.pamphlet (GRAY PERMAN)
pseudolin.spad.pamphlet (PSEUDLIN)
rep2.spad.pamphlet (REP2)
sex.spad.pamphlet (SEXCAT SEXOF SEX)
solvedio.spad.pamphlet (DIOSP)
\end{verbatim}

<<layer13>>=
LAYER13=${OUT}/ASSOCEQ.o ${OUT}/CARTEN.o ${OUT}/CLIF.o \
        ${OUT}/CLIP.o ${OUT}/COORDSYS.o ${OUT}/DBASE.o ${OUT}/DHMATRIX.o \
        ${OUT}/DIOSP.o \
        ${OUT}/DIRPCAT.o ${OUT}/DIRPCAT-.o ${OUT}/D02BBFA.o ${OUT}/D02BHFA.o \
        ${OUT}/D02CJFA.o ${OUT}/FAXF.o ${OUT}/FAXF-.o \
        ${OUT}/FFPOLY2.o ${OUT}/FNLA.o ${OUT}/GRAY.o \
        ${OUT}/HB.o ${OUT}/IRSN.o \
        ${OUT}/MCALCFN.o ${OUT}/MHROWRED.o \
        ${OUT}/NUMODE.o ${OUT}/NUMQUAD.o ${OUT}/ODESYS.o \
        ${OUT}/ODETOOLS.o ${OUT}/ORDFUNS.o ${OUT}/PERMAN.o \
        ${OUT}/PFECAT.o ${OUT}/PFECAT-.o ${OUT}/POINT.o ${OUT}/PSEUDLIN.o \
        ${OUT}/PTPACK.o ${OUT}/REP2.o \
        ${OUT}/SETMN.o ${OUT}/SEX.o ${OUT}/STRING.o \
        ${OUT}/SYMFUNC.o ${OUT}/VECTOR2.o

@
\subsection{Layer14}
\begin{verbatim}
asp        ASP1     FORTFN FORTCAT TYPE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM
                    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG 
                    SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                    CHARZ FMTC INS OINTDOM DIFRING LINEXP CFCAT STEP POLYCAT
                    PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP
                    PFECAT 
asp        ASP10    FVFUN FORTCAT TYPE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM
                    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON SETCAT
                    BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    FMTC INS OINTDOM DIFRING LINEXP CFCAT STEP POLYCAT PDRING
                    FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT
                    VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG ELTAGG ELTAB
                    CLAGG INT VECTOR IVECTOR IARRAY1 NNI PI 
asp        ASP24    FORTFN FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM
                    PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                    OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                    PATMAB CHARZ FMTC INS OINTDOM DIFRING LINEXP CFCAT STEP
                    POLYCAT PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB
                    FLINEXP PFECAT
asp        ASP4     FORTFN FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM
                    PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB 
                    CHARZ FMTC INS OINTDOM DIFRING LINEXP CFCAT STEP POLYCAT
                    PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP
                    PFECAT 
asp        ASP50    FVFUN FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABLEMON
                    ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET READ KONVERT RETRACT RADCAT PATMAB
                    CHARZ FMTC INS OINTDOM DIFRING LINEXP CFCAT STEP POLYCAT
                    PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP
                    PFECAT
asp        ASP6     FVFUN FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    FMTC INS OINTDOM DIFRING LINEXP CFCAT STEP POLYCAT PDRING
                    FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT
asp        ASP73    FVFUN FORTCAT TYPE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM
                    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG 
                    SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                    CHARZ INS OINTDOM DIFRING LINEXP CFCAT STEP OM INT VECTOR
                    IVECTOR IARRAY1 PI NNI FMTC POLYCAT PDRING FAMR AMR CHARNZ
                    FRETRCT EVALAB IEVALAB FLINEXP PFECAT
oderf      BALFACT  GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER CHARZ UPOLYC POLYCAT PDRING
                    FAMR AMR CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB PFECAT UFD ELTAB DIFRING
                    DIFEXT STEP EUCDOM PID FIELD DIVRING INT LIST ILIST LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG
                    FLAGG ELAGG OM 
bezout     BEZOUT   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING MATCAT
                    ARR2CAT HOAGG AGG TYPE FLAGG LNAGG IXAGG ELTAGG CLAGG
                    NNI INT BOOLEAN SINT PI
radix     BINARY   QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB STEP
                   ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL CHARZ
                   CHARNZ PFECAT INS CFCAT OM FPS RNS RADCAT UPOLYC POLYCAT
                   FAMR AMR FRETRCT
files      BINFILE  FILECAT SETCAT BASTYPE KOERCE FNCAT INS UFD GCDDOM INTDOM
                    COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                    EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP 
                    ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL
                    CHARZ STEP STRING CHAR SINT OUTFORM LIST INT PRIMARR 
                    A1AGG ISTRING
oderf      BOUNDZRO FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP 
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                    UFD DIVRING RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                    KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT STEP INS
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL
                    QFCAT FEVALAB PATAB FPATMAB TYPE INT OM
padic     BPADICRT QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT PADICCT FPS RNS RADCAT INS CFCAT UPOLYC
                   POLYCAT FAMR AMR FRETRCT
brill      BRILL    UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB DIFRING
                    DIFEXT STEP EUCDOM PID FIELD DIVRING NNI INT BOOLEAN
                    INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT 
                    REAL FPS RNS RADCAT OM TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                    ELEMFUN PI 
cden       CDEN     INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD EUCDOM PID
                    GCDDOM UFD DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB
                    DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT 
                    FPATMAB TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL CHARZ CHARNZ PFECAT FLAGG LNAGG
                    IXAGG HOAGG AGG ELTAGG CLAGG
curve      CHVAR    UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING FAMR
                    AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT
                    STEP EUCDOM PID FIELD DIVRING NNI INT BOOLEAN PI INS
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL OM
                    QFCAT FEVALAB PATAB FPATMAB TYPE SINT
polycat    COMMUPC  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING BOOLEAN
contfrac   CONTFRAC ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                    BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                    FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                    QFCAT RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                    PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                    STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                    CHARZ CHARNZ PFECAT LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG
                    IXAGG ELTAGG CLAGG FLAGG ELAGG OM INS CFCAT 
generic    CVMP     COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    POLYCAT PDRING FAMR AMR ALGEBRA MODULE CHARZ CHARNZ 
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD INT VECTOR
                    IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG
                    TYPE ELTAGG ELTAB CLAGG LIST ILIST QFCAT FIELD EUCDOM PID
                    DIVRING FEVALAB DIFEXT DIFRING PATAB FPATMAB STEP OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP REAL
cycles    CYCLES    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FIELD
                    DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP
                    PATAB FPATMAB TYPE CHARNZ PFECAT LSAGG STAGG URAGG RCAGG
                    HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM FAMR AMR
                    FRETRCT 
cyclotom   CYCLOTOM INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP INT NNI SINT
                    LIST UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT EVALAB
                    IEVALAB FLINEXP PFECAT ELTAB DIFEXT FIELD DIVRING
ddfact     DDFACT   FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                    RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER UFD DIVRING CHARNZ FINITE STEP DIFRING UPOLYC
                    POLYCAT PDRING FAMR AMR CHARZ FRETRCT RETRACT EVALAB
                    IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT ELTAB
                    DIFEXT NNI INT SINT PI LIST ILIST BOOLEAN INS OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL
radix     DECIMAL  QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT INS CFCAT OM FPS RNS RADCAT UPOLYC
                   POLYCAT FAMR AMR FRETRCT
aggcat     DIOPS    BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    CLAGG KONVERT STRING CHAR SINT OUTFORM LIST INT PRIMARR
                    A1AGG ISTRING
vector     DIRPROD  DIRPCAT IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE LMODULE 
                    ABELGRP CABMON ABELMON ABELSG RMODULE DIFEXT RING RNG
                    SGROUP MONOID DIFRING PDRING FLINEXP LINEXP FINITE ALGEBRA
                    MODULE COMRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    OAMONS VSPACE FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD
                    DIVRING INS OINTDOM KONVERT PATMAB CFCAT REAL CHARZ STEP
                    OM INT VECTOR IVECTOR IARRAY1 VECTCAT A1AGG SINT NNI
                    BOOLEAN FLAGG LNAGG CLAGG PI
out        DISPLAY  INT LIST ILIST LSAGG STRING CHAR SINT OUTFORM PRIMARR A1AGG
                    ISTRING STRICAT SRAGG A1AGG FLAGG LNAGG IXAGG HOAGG AGG
                    TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB ELTAGG ELTAB
                    CLAGG KONVERT ORDSET OM
gdpoly    DMP      POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE 
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                   ILIST DIRPCAT DIFEXT DIFRING FINITE ORDRING OAGROUP OCAMON
                   OAMON OASGP OAMONS VSPACE FIELD EUCDOM PID DIVRING ORDFIN
                   FPS RNS REAL RADCAT INS OINTDOM CFCAT STEP UPOLYC
lodop      DPMO     DIRPCAT IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE LMODULE
                    ABELGRP CABMON ABELMON ABELSG RMODULE DIFEXT RING RNG
                    SGROUP MONOID DIFRING PDRING FLINEXP LINEXP FINITE ALGEBRA
                    MODULE COMRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    OAMONS VSPACE FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD
                    DIVRING SINT NNI INT INS OINTDOM KONVERT PATMAB CFCAT
                    REAL CHARZ STEP OM
dpolcat    DPOLCAT  DVARCAT ORDSET SETCAT BASTYPE KOERCE RETRACT POLYCAT
                    PDRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                    MONOID LMODULE FAMR AMR BMODULE RMODULE COMRING ALGEBRA
                    MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT EVALAB IEVALAB
                    FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT UFD DIFEXT
                    DIFRING OAMONS OCAMON OAMON OASGP NNI INT LIST ILIST
                    LSAGG STAGG ELAGG URAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                    ELTAB CLAGG FLAGG OM SINT INS EUCDOM PID OINTDOM ORDRING 
                    OAGROUP CFCAT REAL STEP
d01routine D01AJFA  NUMINT SETCAT BASTYPE KOERCE PI NNI INT STRING CHAR SINT
                    OUTFORM LIST PRIMARR A1AGG ISTRING SRAGG FPS RNS FIELD
                    EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET READ KONVERT RETRACT RADCAT PATMAB
                    CHARZ DFLOAT INS 
d01routine D01AKFA  NUMINT SETCAT BASTYPE KOERCE NNI INT STRING CHAR SINT
                    OUTFORM LIST PRIMARR A1AGG ISTRING SRAGG PI FPS RNS
                    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE 
                    RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                    OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                    PATMAB CHARZ DFLOAT INS 
d01routine D01ALFA  NUMINT SETCAT BASTYPE KOERCE STRICAT SRAGG A1AGG FLAGG 
                    LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB
                    CLAGG KONVERT ORDSET OM INT LIST ILIST LSAGG STAGG URAGG
                    RCAGG ELAGG NNI INS STRING CHAR SINT OUTFORM PRIMARR
                    ISTRING FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD 
                    DIVRING ORDRING OAGROUP OCAMON OAMON OASGP REAL RETRACT
                    RADCAT PATMAB CHARZ DIFRING TRANFUN TRIGCAT ATRIG HYPCAT
                    AHYP ELEMFUN DFLOAT PI 
d01routine D01AMFA  NUMINT SETCAT BASTYPE KOERCE NNI INT STRING CHAR SINT
                    OUTFORM LIST PRIMARR A1AGG ISTRING SRAGG FPS RNS FIELD
                    EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                    CHARZ PI INS DFLOAT
d01routine D01APFA  NUMINT SETCAT BASTYPE KOERCE DFLOAT INT LIST ILIST LSAGG
                    STAGG NNI STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                    SRAGG FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                    RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT
                    RETRACT RADCAT PATMAB CHARZ DIFRING OM TRANFUN TRIGCAT
                    ATRIG HYPCAT AHYP ELEMFUN ELAGG FLAGG URAGG PI INS 
d01routine D01AQFA  FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                    OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                    PATMAB CHARZ DIFRING OM TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                    ELEMFUN INT LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB
                    IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG LIST
                    ILIST NNI PI STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                    SRAGG INS OINTDOM LINEXP CFCAT STEP QFCAT FEVALAB DIFEXT
                    PDRING FLINEXP PATAB FPATMAB CHARNZ PFECAT DFLOAT 
modring    EMR      EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABLESG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT
                    PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP FIELD DIVRING INT NNI BOOLEAN
equation2  EQ       TYPE IEVALAB SETCAT BASTYPE KOERCE ABELSG ABELGRP CABMON
                    ABELMON SGROUP MONOID GROUP RING RNG LMODULE BMODULE
                    RMODULE MODULE PDRING VSPACE COMRING FIELD EUCDOM PID
                    GCDDOM INTDOM ALGEBRA ENTIRER UFD DIVRING EVALAB BOOLEAN
                    INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ
                    STEP POLYCAT FAMR AMR CHARNZ FRETRCT FLINEXP PFECAT ES 
erroor     ERROR    INT LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
cycles     EVALCYC  ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                    INS UFD GCDDOM INTDOM COMRING ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FIELD
                    DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP
                    PATAB FPATMAB TYPE CHARNZ PFECAT
e04routine E04DGFA  OPTCAT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                    LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                    ILIST NNI INS STRING CHAR SINT OUTFORM PRIMARR A1AGG
                    ISTRING DIFRING TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                    DFLOAT MONOID PI BOOLEAN
e04routine E04FDFA  OPTCAT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                    LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                    ILIST NNI INS STRING CHAR SINT OUTFORM PRIMARR A1AGG
                    ISTRING DIFRING TRANFUN TRIGCAT ATRIG HYPCAT AHYP 
                    ELEMFUN PI 
e04routine E04GCFA  OPTCAT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                    OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                    LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                    ILIST NNI INS STRING CHAR SINT OUTFORM PRIMARR A1AGG
                    ISTRING DIFRING TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                    ELEMFUN PI DFLOAT 
e04routine E04JAFA  OPTCAT SETCAT BASTYPE KOERCE INT LIST ILIST LSAGG STAGG
                    FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT
                    RETRACT RADCAT PATMAB CHARZ URAGG RCAGG HOAGG AGG TYPE 
                    EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                    ELAGG OM DIFRING TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                    INS STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING STRICAT
                    SRAGG NNI PI DFLOAT
facutil    FACUTIL  OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE 
                    ABELMON ABELSG CABMON RING RNG ABELGRP SGROUP MONOID
                    LMODULE POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT
                    UFD NNI INT LIST FFIELDC FPC FIELD EUCDOM PID DIVRING
                    FINITE STEP DIFRING PI BOOLEAN
ffp       FF       FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC STEP
                   DIFRING KONVERT OAMONS OCAMON OAMON OASGP ORDSET INS OINTDOM
                   ORDRING OAGROUP LINEXP PATMAB CFCAT REAL
ffcg      FFCG     FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING KONVERT OAMONS OCAMON OAMON OASGP ORDSET INS
                   OINTDOM ORDRING OAGROUP LINEXP PATMAB CFCAT REAL
ffcg      FFCGX    FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING OAMONS OCAMON OAMON OASGP ORDSET INS OINTDOM
                   ORDRING OAGROUP KONVERT LINEXP PATMAB CFCAT REAL
fff       FFF      FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING CHARNZ FINITE STEP DIFRING NNI INT SINT
                   PI INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                   KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ OM VECTOR
                   IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG
                   TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG LIST ILIST LSAGG
                   STAGG URAGG RCAGG ELAGG PRIMARR BOOLEAN UPOLYC POLYCAT
                   PDRING FAMR AMR FRETRCT FLINEXP PFECAT DIFEXT
ffhom     FFHOM    FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC STEP
                   DIFRING NNI INT BOOLEAN SINT PI PRIMARR VECTOR IVECTOR 
                   IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE
                   EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
ffnb      FFNB     FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC STEP
                   DIFRING KONVERT OAMONS OCAMON OAMON OASGP ORDSET INS OINTDOM
                   ORDRING OAGROUP LINEXP PATMAB CFCAT REAL
ffnb      FFNBX    FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING OAMONS OCAMON OAMON OASGP ORDSET INT OINTDOM
                   ORDRING OAGROUP KONVERT LINEXP PATMAB CFCAT REAL
ffpoly    FFPOLY   FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   UFD DIVRING CHARNZ FINITE STEP DIFRING INT LIST ILIST PI
                   NNI PRIMARR A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB
                   IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET SINT BOOLEAN
                   VECTOR IVECTOR IARRAY1 VECTCAT UPOLYC POLYCAT PDRING FAMR
                   AMR CHARZ FRETRCT RETRACT FLINEXP LINEXP PATMAB PFECAT
                   DIFEXT LSAGG STAGG INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP CFCAT REAL URAGG RCAGG ELAGG OM 
ffcat      FFSLPE   FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                    RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE 
                    ENTIRER UFD DIVRING CHARNZ FINITE STEP DIFRING UPOLYC
                    POLYCAT PDRING FAMR AMR CHARZ FRETRCT RETRACT EVALAB
                    IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT ELTAB
                    DIFEXT NNI INT LIST ILIST BOOLEAN
ffp       FFX      FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING OAMONS OCAMON OAMON OASGP ORDSET INS OINTDOM
                   ORDRING OAGROUP KONVERT LINEXP PATMAB CFCAT REAL
zerodim    FGLMICPK GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST
                    DIRPCAT FRETRCT RETRACT DIFEXT DIFRING PDRING FLINEXP 
                    LINEXP FINITE ORDRING OAGROUP OCAMON OAMON OASGP OAMONS
                    VSPACE FIELD EUCDOM PID UFD DIVRING ORDFIN BOOLEAN NNI
                    POLYCAT FAMR AMR CHARZ CHARNZ PATMAB PFECAT 
files      FILE     FILECAT SETCAT BASTYPE KOERCE FNCAT STRING CHAR SINT 
                    OUTFORM LIST INT PRIMARR A1AGG ISTRING
naalgc     FINAALG  COMRING RING RNG SGROUP MONOID UPOLYC POLYCAT PDRING
                    FAMR AMR ALGEBRA CHARZ CHARNZ INTDOM ENTIRER FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                    PID FIELD DIVRING SINT PI NNI INT VECTOR IVECTOR IARRAY1
                    BOOLEAN INT OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                    CFCAT REAL OM LIST ILIST VECTCAT A1AGG FLAGG LNAGG IXAGG
                    HOAGG AGG TYPE ELTAGG CLAGG 
algcat     FINRALG  COMRING UPOLYC POLYCAT PDRING FAMR AMR INTDOM ENTIRER
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                    KONVERT PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT
                    STEP EUCDOM PID FIELD DIVRING VECTCAT A1AGG FLAGG LNAGG
                    IXAGG HOAGG AGG TYPE ELTAGG CLAGG INT VECTOR IVECTOR
                    IARRAY1 INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                    CFCAT REAL OM SINT PI NNI 
numsolve  FLOATRP  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET SETCAT BASTYPE
                   KOERCE ABELMON ABELSG CABMON ABELGRP RING RNG SGROUP MONOID
                   LMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING INS OINTDOM
                   DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                   POLYCAT PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB
                   FLINEXP PFECAT BOOLEAN OM INT LIST ILIST 
fname      FNAME    FNCAT SETCAT BASTYPE KOERCE STRING CHAR SINT OUTFORM LIST
                    INT PRIMARR A1AGG ISTRING
fortpak    FOP      STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING
formula    FORMULA  SETCAT BASTYPE KOERCE INT NNI LIST STRING CHAR SINT OUTFORM
                    PRIMARR A1AGG ILIST LSAGG STAGG STRICAT SRAGG A1AGG FLAGG
                    LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB
                    CLAGG KONVERT ORDSET OM ISTRING PI ELAGG FLAGG URAGG RCAGG
                    ELAGG
fortpak    FORT     LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE
                    KOERCE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG 
                    KONVERT FLAGG ORDSET ELAGG OM STRICAT SRAGG A1AGG INT LIST
                    ILIST STRING CHAR SINT OUTFORM PRIMARR ISTRING INS UFD
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL
                    CHARZ STEP
fraction  FRAC     QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT OM INS CFCAT BOOLEAN NNI INT PI SINT
                   VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG ELTAGG CLAGG
                   VECTOR IVECTOR IARRAY1 UPOLYC POLYCAT FAMR AMR FRETRCT LIST
                   ILIST FPS RNS RADCAT
fortran    FTEM     FILECAT SETCAT BASTYPE KOERCE FNCAT STRING CHAR SINT 
                    OUTFORM LIST INT PRIMARR A1AGG ISTRING BOOLEAN INS UFD 
                    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP OM SRAGG FLAGG LNAGG STRICAT IXAGG
                    HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
galfactu   GALFACTU RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING FPS RNS
                    ORDRING OAGROUP OCAMON OAMON OASGP REAL RADCAT TRANFUN
                    TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PI NNI INT INT OINTDOM
                    CFCAT SINT INS 
galpolyu   GALPOLYU RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INT LIST
                    ILIST NNI SINT PI OAMONS OCAMON OAMON OASGP VECTCAT A1AGG
                    FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG VECTOR
                    IVECTOR IARRAY1
gb         GB       GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE 
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER OAMONS OCAMON OAMON
                    OASGP ORDSET POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB 
                    PFECAT UFD FIELD EUCDOM PID DIVRING INT LIST ILIST LSAGG
                    STAGG ELAGG FLAGG URAGG LNAGG RCAGG IXAGG BOOLEAN STRING
                    CHAR SINT OUTFORM PRIMARR A1AGG ISTRING PI NNI
gbeuclid   GBEUCLID EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID 
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER OAMONS
                    OCAMON OAMON OASGP ORDSET POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD INT STRING CHAR SINT OUTFORM
                    LIST PRIMARR A1AGG ISTRING ILIST LSAGG STAGG ELAGG FLAGG
                    BOOLEAN URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                    ELTAB CLAGG OM NNI
groebf     GBF      EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER CHARZ
                    OAMONS OCAMON OAMON OASGP ORDSET POLYCAT PDRING FAMR
                    AMR CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD BOOLEAN INT LIST ILIST NNI
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                    ELTAB CLAGG FLAGG ELAGG OM
gbintern  GBINTERN GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER OAMONS OCAMON OAMON OASGP ORDSET
                   POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB
                   IEVALAB FLINEXP LINEXP KONVERT PATMAB PFECAT UFD NNI INT
                   BOOLEAN LIST ILIST LSAGG STAGG ELAGG FLAGG URAGG RCAGG HOAGG
                   AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM SINT
geneez     GENEEZ   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC
                    POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB
                    PFECAT UFD ELTAB DIFRING DIFEXT STEP FIELD DIVRING NNI
                    INT PI INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                    CFCAT REAL VECTOR IVECTOR IARRAY1 SINT BOOLEAN VECTCAT
                    A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG
                    LSAGG STAGG URAGG RCAGG ELAGG OM LIST ILIST
allfact    GENMFACT ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                    ABELMON ABELSG CABMON INTDOM COMRING RING RNG ABELGRP
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD FFIELDC FPC FIELD EUCDOM PID DIVRING
                    FINITE STEP DIFRING
gpgcd      GENPGCD  OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE 
                    ABELMON ABELSG CABMON PFECAT UFD GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ 
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB NNI INT LIST LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM 
                    ILIST STEP BOOLEAN PI SINT 
ghensel    GHENSEL  EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID 
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC
                    POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB
                    PFECAT UFD ELTAB DIFRING DIFEXT STEP FIELD DIVRING INT
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                    CLAGG FLAGG ELAGG OM LIST ILIST NNI BOOLEAN
modmonom   GMODPOL  MODULE BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE RMODULE POLYCAT PDRING RING RNG
                    SGROUP MONOID FAMR AMR COMRING ALGEBRA CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD DIRPCAT
                    IXAGG HOAGG AGG TYPE ELTAGG ELTAB DIFEXT DIFRING FINITE
                    ORDRING OAGROUP OCAMON OAMON OASGP OAMONS VSPACE FIELD
                    EUCDOM PID DIVRING
sum        GOSPER   OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON INTDOM COMRING RING RNG ABELGRP
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD FIELD EUCDOM PID DIVRING INS OINTDOM
                    ORDRING OAGROUP DIFRING CFCAT REAL STEP QFCAT FEVALAB
                    ELTAB DIFEXT PATAB FPATMAB TYPE INT LSAGG STAGG URAGG
                    RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM
                    LIST ILIST SINT NNI PI VECTOR IVECTOR IARRAY1 BOOLEAN
                    VECTCAT A1AGG
view2D    GRIMAGE  SETCAT BASTYPE KOERCE INS UFD GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM FPS RNS
                   FIELD DIVRING RADCAT INT LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                   ELAGG LIST ILIST NNI PI DFLOAT PTCAT VECTCAT A1AGG STRING
                   CHAR SINT OUTFORM PRIMARR STRICAT SRAGG ISTRING TRANFUN
                   ELEMFUN HYPCAT ATRIG TRIGCAT AHYP BOOLEAN 
grdef      GROEBSOL GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER LSAGG STAGG URAGG RCAGG
                    HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB
                    CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST POLYCAT
                    PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT FLINEXP 
                    LINEXP PATMAB PFECAT UFD NNI DIRPCAT DIFEXT DIFRING FINITE
                    ORDRING OAGROUP OCAMON OAMON OASGP OAMONS VSPACE FIELD
                    EUCDOM PID DIVRING ORDFIN SINT BOOLEAN 
gdpoly    HDMP     POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE 
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                   ILIST DIRPCAT DIFEXT DIFRING FINITE ORDRING OAGROUP OCAMON
                   OAMON OASGP OAMONS VSPACE FIELD EUCDOM PID DIVRING ORDFIN
                   FPS RNS REAL RADCAT INT OINTDOM CFCAT STEP
gdirprod   HDP      DIRPCAT IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE 
                    EVALAB IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE
                    LMODULE ABELGRP CABMON ABELMON ABELSG RMODULE DIFEXT RING
                    RNG SGROUP MONOID DIFRING PDRING FLINEXP LINEXP FINITE
                    ALGEBRA MODULE COMRING ORDRING OAGROUP OCAMON OAMON OASGP
                    ORDSET OAMONS VSPACE FIELD EUCDOM PID GCDDOM INTDOM 
                    ENTIRER UFD DIVRING SINT NNI INT BOOLEAN INS OINTDOM
                    KONVERT PATMAB CFCAT REAL CHARZ STEP OM
radix     HEXADEC  QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT EVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT INS CFCAT FPS RNS RADCAT UPOLYC POLYCAT
                   FAMR AMR FRETRCT
listgcd    HEUGCD   UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMONN ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB 
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INT BOOLEAN
                    PI SINT LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                    LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM INS OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP CFCAT REAL OAMONS
boolean    IBITS    BTAGG ORDSET SETCAT BASTYPE KOERCE LOGIC A1AGG FLAGG LNAGG
                    IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG 
                    KONVERT INT STRING CHAR SINT OUTFORM LIST PRIMARR ISTRING
                    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT 
                    REAL CHARZ STEP OM SRAGG STRICAT FINITE 
padiclib   IBPTOOLS RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING BOOLEAN
                    SINT NNI INT
alql       ICARD    ORDSET SETCAT BASTYPE KOERCE ORDFIN FINITE STRING CHAR
                    SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING PI NNI
cden       ICDEN    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD EUCDOM PID
                    GCDDOM UFD DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB
                    DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB
                    TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL CHARZ CHARNZ PFECAT FLAGG LNAGG IXAGG
                    HOAGG AGG ELTAGG CLAGG
idecomp   IDECOMP  INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP POLYCAT PDRING
                   FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT QFCAT
                   FIELD DIVRING FEVALAB ELTAB DIFEXT PATAB FPATMAB TYPE
                   DIRPCAT IXAGG HOAGG AGG ELTAGG FINITE OAMONS VSPACE ORDFIN
                   LSAGG STAGG URAGG RCAGG LNAGG CLAGG FLAGG ELAGG OM INT LIST
                   ILIST NNI 
ffp       IFF      FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING KONVERT OAMONS OCAMON OAMON OASGP ORDSET INS
                   OINTDOM ORDRING OAGROUP LINEXP PATMAB CFCAT REAL
array2     IIARRAY2 ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB 
                    IEVALAB FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                    ORDSET INT PRIMARR A1AGG AGG NNI INS UFD GCDDOM INTDOM
                    COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                    EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                    DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM
                    A1AGG STRING CHAR SINT OUTFORM LIST ISTRING
matfuns    IMATLIN  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG
                    ELTAB CLAGG KONVERT ORDSET MATCAT ARR2CAT BOOLEAN INT
                    SINT NNI LIST A1AGG PI UPOLYC POLYCAT PDRING FAMR AMR 
                    CHARZ CHARNZ FRETRCT RETRACT FLINEXP LINEXP PATMAB PFECAT
                    DIFRING DIFEXT STEP QFCAT FEVALAB PATAB FPATMAB OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP REAL VECTCAT OM
matfuns    IMATQF   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER FLAGG LNAGG IXAGG HOAGG 
                    AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET
                    MATCAT ARR2CAT QFCAT FIELD EUCDOM PID GCDDOM UFD DIVRING
                    RETRACT FEVALAB DIFEXT DIFRING PDRING FLINEXP LINEXP
                    PATAB FPATMAB PATMAB STEP OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL CHARZ CHARNZ PFECAT
modgcd    INMODGCD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING
                   FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB PFECAT UFD ELTAB DIFRING DIFEXT
                   STEP FIELD DIVRING INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP CFCAT REAL INT LIST ILIST BOOLEAN NNI LSAGG STAGG 
                   ELAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG
                   FLAGG OM OAMONS PI 
multfact  INNMFACT ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                   ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER CHARZ POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB PFECAT
                   UFD PI NNI INT ILIST UPOLYC ELTAB DIFRING DIFEXT STEP FIELD
                   DIVRING BOOLEAN LSAGG STAGG ELAGG FLAGG SINT URAGG RCAGG
                   HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG OM 
sign       INPSIGN  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INT INS
intrf      INTHERTR FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT 
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP NNI INT 
intrf      INTRAT   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ 
                    FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB
                    PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP REAL
intrf      INTRF    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE 
                    RMODULE ALGEBRA MODULE ENTIRER RETRACT CHARZ POLYCAT
                    PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD QFCAT FIELD
                    EUCDOM PID DIVRING FEVALAB ELTAB DIFEXT DIFRING PATAB
                    FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP REAL UPOLYC
integer   INTSLPE  INT VECTOR IVECTOR IARRAY1 INS UFD GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                   DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP 
                   UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB
                   FLINEXP PFECAT ELTAB DIFEXT FIELD DIVRING LIST ILIST NNI
intrf     INTTR    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB PATAB FPATMAB TYPE
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL BOOLEAN
                   NNI INT PRIMARR INS CFCAT LIST ILIST PI LSAGG STAGG ELAGG
                   FLAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG OM SINT
sum        ISUMP    OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON INTDOM COMRING RING RNG ABELGRP
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD INS EUCDOM PID OINTDOM ORDRING OAGROUP
                    DIFRING CFCAT REAL STEP QFCAT FIELD DIVRING FEVALAB ELTAB
                    DIFEXT PATAB FPATMAB TYPE INT LIST BOOLEAN NNI ILIST 
gpol      LAUPOL   DIFEXT RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE DIFRING PDRING INTDOM COMRING
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER KONVERT FRETRCT
                   RETRACT CHARZ CHARNZ EUCDOM PID GCDDOM FIELD UFD DIVRING
                   UPOLYC POLYCAT FAMR AMR EVALAB IEVALAB FLINEXP LINEXP ORDSET
                   PATMAB PFECAT ELTAB STEP INT BOOLEAN NNI LIST ILIST LSAGG
                   STAGG ELAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                   CLAGG FLAGG OM INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP CFCAT REAL
leadcdet   LEADCDET ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                    PATMAB PFECAT UFD SINT NNI INT LIST ILIST LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG 
                    ELAGG OM PI
lingrob    LGROBP   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER VECTCAT A1AGG FLAGG LNAGG
                    IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
                    KONVERT ORDSET INT VECTOR IVECTOR IARRAY1 SINT NNI LSAGG
                    STAGG URAGG RCAGG ELAGG OM LIST ILIST DIRPCAT FRETRCT
                    RETRACT DIFEXT DIFRING PDRING FLINEXP LINEXP FINITE ORDRING
                    OAGROUP OCAMON OAMON OASGP OAMONS VSPACE FIELD EUCDOM PID
                    UFD DIVRING ORDFIN PI BOOLEAN POLYCAT FAMR AMR CHARZ CHARNZ
                    PATMAB PFECAT 
sign       LIMITRF  GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON 
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER POLYCAT PDRING
                    FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT UFD QFCAT
                    FIELD EUCDOM PID DIVRING FEVALAB ELTAB DIFEXT DIFRING
                    PATAB FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL INT OM UPOLYC NNI
lindep    LINDEP   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG 
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER LINEXP INT LIST ILIST VECTCAT A1AGG
                   FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG 
                   ELTAB CLAGG KONVERT ORDSET VECTOR IVECTOR IARRAY1 VECTCAT
                   NNI BOOLEAN INS UFD GCDDOM EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP DIFRING RETRACT PATMAB CFCAT
                   REAL CHARZ STEP OM FIELD DIVRING QFCAT FEVALAB DIFEXT PDRING
                   FLINEXP PATAB FPATMAB CHARNZ PFECAT
fraction  LO       MODULE BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE RMODULE OAGROUP OCAMON OAMON OASGP ORDSET
                   COMRING RING RNG SGROUP MONOID STRING CHAR SINT OUTFORM
                   LIST INT PRIMARR A1AGG ISTRING
fraction   LPEFRAC  PFECAT UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD EUCDOM
                    PID DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT
                    DIFRING PDRING FLINEXP LINNEXP PATAB KONVERT FPATMAB TYPE
                    PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP REAL CHARZ CHARNZ
solvelin   LSPP     INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG 
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER OAMONS OCAMON OAMON OASGP
                    ORDSET POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT 
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                    LNAGG IXAGG ELTAGG ELTAGG CLAGG FLAGG ELAGG OM INT LIST
                    ILIST VECTOR IVECTOR IARRAY1 SINT NNI BOOLEAN VECTCAT
                    A1AGG QFCAT FIELD EUCDOM PID DIVRING FEVALAB DIFEXT 
                    DIFRING PAGAB FPATMAB STEP OINTDOM ORDRING OAGROUP REAL
matfuns    MATLIN   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                    BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG
                    ELTAB CLAGG KONVERT ORDSET MATCAT ARR2CAT BOOLEAN INT
                    PRIMARR LIST ILIST PI NNI A1AGG SINT INTDOM ALGEBRA
                    MODULE ENTIRER FIELD EUCDOM PID GCDDOM UFD DIVRING
                    VECTCAT QFCAT RETRACT FEVALAB DIFEXT DIFRING PDRING 
                    FLINEXP LINEXP PATAB FPATMAB PATMAB STEP OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP REAL CHARZ CHARNZ PFECAT INS
                    CFCAT
cden       MCDEN    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD EUCDOM PID
                    GCDDOM UFD DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB
                    DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT
                    FPATMAB TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL CHARZ CHARNZ PFECAT VECTCAT A1AGG
                    FLAGG LNAGG IXAGG HOAGG AGG ELTAGG CLAGG LSAGG STAGG URAGG
                    RCAGG ELAGG OM INT LIST ILIST 
moddfact   MDDFACT  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INT INS
                    EUCDOM OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT
                    REAL NNI SINT PI ILIST
mfinfact  MFINFACT ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP 
                   ABELMON ABELSG CABMON FFIELDC FPC FIELD EUCDOM PID GCDDOM
                   INTDOM COMRING RING RNG ABELGRP SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING CHARNZ
                   FINITE STEP DIFRING POLYCAT PDRING FAMR AMR CHARZ FRETRCT
                   RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB PFECAT
                   UPOLYC ELTAB DIFEXT INT LIST ILIST NNI LSAGG STAGG ELAGG
                   FLAGG BOOLEAN PI URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG
                   ELTAGG CLAGG OM SINT
fortmac   MFLOAT   FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ FMTC INS OINTDOM 
                   DIFRING LINEXP CFCAT STEP INT PI NNI OM STRING CHAR SINT
                   OUTFORM LIST PRIMARR A1AGG ISTRING TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN BOOLEAN
fortmac    MINT     FMTC INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER ORDSET RETRACT INS UFD GCDDOM EUCDOM
                    PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                    KONVERT LINEXP PATMAB CFCAT REAL CHARZ STEP PI NNI INT
                    MONOID ABELSG SGROUP STRING CHAR SINT OUTFORM LIST
                    PRIMARR A1AGG ISTRING
mlift      MLIFT    OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT
                    LIST ILIST NNI SINT BOOLEAN PI
curve      MMAP     INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING FAMR
                    AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING QFCAT
                    FEVALAB PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL
modmon    MODMON   UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                   PID FIELD DIVRING FINITE NNI INT PI FFIELDC FPC PRIMARR
                   A1AGG FLAGG LNAGG IXAGG CLAGG HOAGG AGG ELTAGG BOOLEAN SINT
                   TYPE VECTOR IVECTOR IARRAY1 FPS RNS ORDRING OAGROUP OCAMON
                   OAMON OASGP REAL RADCAT INS OINTDOM CFCAT
intrf      MONOTOOL FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP NNI INT 
allfact    MPCPF    OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD INT OM
poltopol   MPC2     ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                    ABELMON ABELSG CABMON RING RNG ABELGRP SGROUP MONOID
                    LMODULE POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD NNI INT
poltopol   MPC3     ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP 
                    ABELMON ABELSG CABMON RING RNG ABELGRP SGROUP MONOID
                    LMODULE POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT
                    UFD BOOLEAN
multpoly  MPOLY    ORDFIN ORDSET SETCAT BASTYPE KOERCE FINITE POLYCAT PDRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID 
                   LMODULE FAMR AMR BMODULE RMODULE COMRING ALGEBRA MODULE
                   CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB
                   FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT UFD FPS RNS
                   FIELD EUCDOM PID DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                   REAL RADCAT INT OINTDOM DIFRING CFCAT STEP UPOLYC ELTAB
                   DIFEXT
allfact    MPRFF    OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON INTDOM COMRING RING RNG ABELGRP
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD INS EUCDOM PID OINTDOM ORDRING OAGROUP
                    DIFRING CFCAT REAL STEP QFCAT FIELD DIVRING FEVALAB ELTAB
                    DIFEXT PATAB FPATMAB TYPE FFIELDC FPC FINITE BOOLEAN NNI
                    INT
allfact    MRATFAC  OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER CHARZ POLYCAT PDRING FAMR AMR
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD QFCAT FIELD DIVRING FEVALAB
                    ELTAB DIFEXT DIFRING PATAB FPATMAB TYPE STEP OINTDOM 
                    ORDRING OAGROUP REAL PI NNI INT INS CFCAT
multsqfr   MULTSQFR OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD PI NNI INT BOOLEAN LIST ILIST
                    LSAGG STAGG ELAGG FLAGG UPOLYC ELTAB DIFRING DIFEXT STEP
                    FIELD DIVRING SINNT URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG
                    ELTAGG CLAGG OM 
twofact   NORMRETR FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING CHARNZ FINITE STEP DIFRING FAXF XF
                   RETRACT VSPACE CHARZ UPOLYC POLYCAT PDRING FAMR AMR FRETRCT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFEXT SINT PI NNI INT LSAGG STAGG URAGG RCAGG HOAGG
                   AGG TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM LIST ILIST
                   BOOLEAN
npcoef     NPCOEF   UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING OAMONS
                    OCAMON OAMON OASGP INT LIST ILIST SINT NNI VECTOR LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG
                    FLAGG ELAGG OM BOOLEAN PI IVECTOR IARRAY1 VECTCAT A1AGG
newpoly   NSUP     UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON 
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR
                   BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                   ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB DIFRING
                   DIFEXT STEP EUCDOM PID FIELD DIVRING INT LIST ILIST NNI FPS
                   RNS ORDRING OAGROUP OCAMON OASGP REAL RADCAT INS OINTDOM
                   CFCAT 
special   NTPOLFN  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE INS
                   UFD GCDDOM INTDOM ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP NNI INT BOOLEAN
                   QFCAT FIELD DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT 
                   PDRING FLINEXP PATAB FPATMAB TYPE CHARZ PFECAT
gdirprod   ODP      DIRPCAT IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                    EVALAB IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE
                    LMODULE ABELGRP CABMON ABELMON ABELSG RMODULE DIFEXT RING
                    RNG SGROUP MONOID DIFRING PDRING FLINEXP LINEXP FINITE
                    ALGEBRA MODULE COMRING ORDRING OAGROUP OCAMON OAMON OASGP
                    ORDSET OAMONS VSPACE FIELD EUCDOM PID GCDDOM INTDOM
                    ENTIRER UFD DIVRING INS OINTDOM KONVERT PATMAB CFCAT
                    REAL CHARZ STEP OM
oderf      ODEPRIM  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ 
                    FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP LODOCAT OREPCAT
                    NNI INT LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG
                    ELTAGG CLAGG FLAGG ELAGG BOOLEAN LIST ILIST SINT PI
riccati    ODEPRRIC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ 
                    FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP LODOCAT OREPCAT
                    SINT INT NNI LIST ILIST LSAGG STAGG INS OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP CFCAT REAL OM PI URAGG RCAGG 
                    HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OAMONS
                    INS 
omdev      OMPKG    STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING
                    BOOLEAN 
omserver   OMSERVER BOOLEAN INT DFLOAT STRING CHAR SINT OUTFORM LIST PRIMARR
                    A1AGG
pade       PADEPAC  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    NNI INT UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ 
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                    KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT STEP
padic     PADICRAT QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB 
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT PADICCT RNS RADCAT INS CFCAT UPOLYC
                   POLYCAT FAMR AMR FRETRCT
padic     PADICRC  QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT PADICCT INT INS CFCAT BOOLEAN LIST ILIST
                   SINT NNI LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG 
                   ELTAGG CLAGG FLAGG ELAGG OM FPS RNS RADCAT UPOLYC POLYCAT
                   FAMR AMR FRETRCT
pdecomp    PCOMP    UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING BOOLEAN
pdecomp    PDECOMP  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING SINT NNI
                    INT BOOLEAN LIST
pf        PF       FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING CHARNZ FINITE STEP DIFRING FAXF XF RETRACT VSPACE
                   CHARZ KONVERT OAMONS OCAMON OAMON OASGP ORDSET INS OINTDOM
                   ORDRING OAGROUP LINEXP PATMAB CFCAT REAL
pfbr       PFBR     PFECAT UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER OAMONS
                    OCAMON OAMON OASGP ORDSET POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB INT PI NNI LIST ILIST BOOLEAN LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG
                    FLAGG ELAGG OM UPOLYC DIFRING DIFEXT STEP EUCDOM PID
                    FIELD DIVRING FFIELDC FPC FINITE
pfbr       PFBRU    PFECAT UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC
                    POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI INT SINT
                    PI LIST ILIST BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG AGG
                    TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM 
pfo        PFOTOOLS UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INT INS
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL
                    QFCAT FEVALAB PATAB FPATMAB TYPE OM
pfr        PFRPAC   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER CHARZ POLYCAT
                    PDRING FAMR AMR CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT UFD QFCAT
                    FIELD DIVRING FEVALAB ELTAB DIFEXT DIFRING PATAB FPATMAB
                    TYPE STEP OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                    UPOLYC
pgcd       PGCD     OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFECAT UFD PI NNI INT BOOLEAN LSAGG STAGG
                    URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG ELTAB 
                    CLAGG FLAGG ELAGG OM LIST ILIST SINT UPOLYC DIFRING
                    DIFEXT STEP FIELD DIVRING 
pinterp    PINTERPA FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                    DIVRING UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                    KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT STEP LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG
                    FLAGG ELAGG OM INT LIST ILIST NNI SINT BOOLEAN
pleqn     PLEQN    EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER CHARZ ORDSET KONVERT
                   OAMONS OCAMON OAMON OASGP POLYCAT PDRING FAMR AMR CHARNZ
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP PATMAB PFECAT
                   UFD QFCAT FIELD DIVRING FEVALAB ELTAB DIFEXT DIFRING PATAB
                   FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP REAL NNI INT INS
                   CFCAT OM LIST VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG 
                   LNAGG IXAGG HOAGG AGG ELTAGG CLAGG SINT ILIST LSAGG STAGG
                   URAGG RCAGG ELAGG PI BOOLEAN 
patmatch2  PMPLCAT  SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP ORDSET
                    ABELMON ABELSG CABMON RING RNG ABELGRP SGROUP MONOID
                    LMODULE PATMAB POLYCAT PDRING FAMR AMR BMODULE RMODULE
                    COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                    GCDDOM PFECAT UFD INT LIST ILIST LSAGG STAGG ELAGG
                    FLAGG URAGG
patmatch2  PMQFCAT  SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER PATMAB KONVERT QFCAT FIELD
                    EUCDOM PID GCDDOM UFD DIVRING RETRACT FEVALAB ELTAB 
                    EVALAB IEVALAB DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB
                    FPATMAB TYPE STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL CHARZ CHARNZ PFECAT
poltopol   POLTOPOL RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE ORDFIN ORDSET FINITE LSAGG
                    STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                    IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM INT LIST
                    ILIST DIRPCAT FRETRCT RETRACT BMODULE RMODULE DIFEXT
                    DIFRING PDRING FLINEXP LINEXP ALGEBRA MODULE COMRING 
                    ORDRING OAGROUP OCAMON OAMON OASGP OAMONS VSPACE FIELD
                    EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING
numtheor  PNTHEORY INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON 
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP INT NNI QFCAT
                   FIELD DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING
                   FLINEXP PATAB FPATMAB TYPE CHARNZ PFECAT BOOLEAN OM PI SINT
                   UFD 
reclos     POLUTIL  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT 
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP BOOLEAN INT LIST
                    NNI LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG
                    ELTAGG CLAGG FLAGG ELAGG OM ILIST ORDRING OAGROUP
                    OCAMON OAMON OASGP LSAGG STAGG
rf         POLYCATQ OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON RING RNG ABELGRP SGROUP MONOID
                    LMODULE POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT 
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD FIELD EUCDOM PID DDIVRING UPOLYC ELTAB
                    DIFRING DIFEXT STEP INT LIST ILIST LSAGG STAGG ELAGG
polycat    POLYLIFT OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE 
                    ABELMON ABELSG CABMON RING RNG ABELGRP SGROUP MONOID
                    LMODULE POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT
                    UFD BOOLEAN
manip      POLYROOT OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON INTDOM COMRING RING RNG ABELGRP
                    SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                    ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB 
                    GCDDOM PFECAT UFD FIELD EUCDOM PID DIVRING INT NNI INS
                    OINTDOM ORDRING OAGROUP DIFRING CFCAT REAL STEP UFD
multpoly   POLY2    RING RNG ABELGRP CABMON ABELMON ABLESG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE POLYCAT PDRING FAMR AMR
                    BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ 
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD
poly       POLY2UP  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE POLYCAT PDRING FAMR AMR
                    BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD
prs       PRS      INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                   PID FIELD DIVRING NNI INT VECTOR IVECTOR IARRAY1 VECTCAT
                   BOOLEAN A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG
                   FINITE LIST ILIST LSAGG STAGG
poly       PSQFR    ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                    ABELMON ABELSG CABMON GCDDOM INTDOM COMRING RING RNG
                    ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                    PATMAB PFECAT UFD INT LIST ILIST BOOLEAN UPOLYC ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI
facutil    PUSHVAR  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE OAMONS OCAMON OAMON OASGP
                    ORDSET POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                    ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                    GCDDOM PFECAT UFD NNI INT BOOLEAN
qalgset    QALGSET  SETCAT BASTYPE KOERCE GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET OAMONS
                    OCAMON OAMON OASGP POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                    PATMAB PFECAT UFD EUCDOM PID INT LIST LSAGG STAGG URAGG
                    RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                    ELAGG OM ILIST NNI BOOLEAN 
fraction   QFCAT2   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD EUCDOM PID
                    GCDDOM UFD DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB
                    DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT
                    FPATMAB TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL CHARZ CHARNZ PFECAT
radix     RADIX    QFCAT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                   PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB
                   STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   CHARZ CHARNZ PFECAT INS CFCAT INT NNI LIST ILIST BOOLEAN
                   LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG
                   FLAGG ELAGG PI STRING CHAR SINT OUTFORM PRIMARR A1AGG 
                   ISTRING FPS RNS RADCAT UPOLYC POLYCAT FAMR AMR FRETRCT
ratfact    RATFACT  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP 
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INS OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL INT QFCAT
                    FEVALAB PATAB FPATMAB TYPE BOOLEAN
reclos    RCFIELD  INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON 
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FIELD 
                   DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP
                   PATAB FPATMAB TYPE CHARNZ PFECAT FRETRCT RADCAT NNI INT 
                   LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG
                   FLAGG ELAGG OM LIST ILIST PI 
rderf      RDETR    FIELD EUCDOM PID GCDDOM INTDOM COMRING RRING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ
                    FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT 
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP BOOLEAN NNI INT
                    INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL
rdesys     RDETRS   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ
                    FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP INT LIST ILIST
                    LSAGG STAGG ELAGG FLAGG URAGG VECTOR VECTCAT A1AGG FLAGG
                    LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG IVECTOR IARRAY1
                    PI NNI 
realzero   REAL0    UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL INT OM
                    NNI LIST ILIST PI BOOLEAN INS SINT VECTOR IVECTOR IARRAY1
                    VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG
                    CLAGG
real0q     REAL0Q   UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INS OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL INT QFCAT
                    FEVALAB PATAB FPATMAB TYPE
resring    RESRING  POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR
                    BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD FIELD
                    EUCDOM PID DIVRING OAMONS OCAMON OAMON OASGP INT LIST ILIST
nlinsol    RETSOL   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER RETRACT PDRING FAMR AMR
                    CHARZ CHARNZ FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                    KONVERT PATMAB GCDDOM PFECAT UFD INT LIST ILIST BOOLEAN
acplot     REALSOLV INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM
                    PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ
                    STEP POLYCAT PDRING FAMR AMR CHARNZ FRETRCT EVALAB
                    IEVALAB FLINEXP PFECAT QFCAT FIELD DIVRING FEVALAB ELTAB
                    DIFEXT PATAB FPATMAB TYPE FPS RNS RADCAT
rf         RF       INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER POLYCAT PDRING FAMR AMR
                    CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD QFCAT
                    FIELD EUCDOM PID DIVRING FEVALAB ELTAB DIFEXT DIFRING
                    PATAB FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL UPOLYC 
allfact    RFFACTOR EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER INS UFD OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FIELD
                    DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP
                    PATAB FPATMAB TYPE CHARNZ PFECAT POLYCAT FAMR AMR FRETRCT
                    FFIELDC FPC FINITE
matcat     RMATCAT  DIRPCAT IXAGG ELTAGG ELTAB FRETRCT RETRACT DIFEXT DIFRING
                    PDRING FLINEXP LINEXP FINITE ALGEBRA ORDRING OAGROUP
                    OCAMON OAMON OASGP ORDSET OAMONS VSPACE FIELD EUCDOM PID
                    GCDDOM INTDOM ENTIRER UFD DIVRING NNI INT
reclos     RRCC     ORDRING OAGROUP OCAMON OAMON OASGP ORDSET ABELMON ABELSG
                    CABMON ABELGRP RING RNG SGROUP MONOID LMODULE FIELD
                    EUCDOM PID GCDDOM INTDOM COMRING BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER UFD DIVRING UPOLYC POLYCAT PDRING FAMR
                    AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT STEP
                    INT LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG
                    ELTAGG CLAGG FLAGG ELAGG OM LIST ILIST NNI 
naalg     SCPKG    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                   IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM INT
                   LIST ILIST VECTOR IVECTOR IARRAY1 VECTCAT A1AGG INS OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP
                   PATMAB CFCAT REAL CHARZ STEP NNI SINT POLYCAT PDRING FAMR
                   AMR CHARNZ FRETRCT FLINEXP PFECAT BOOLEAN QFCAT FEVALAB
                   DIFEXT PATAB FPATMAB
gdirprod   SHDP     DIRPCAT IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                    IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE LMODULE
                    ABELGRP CABMON ABELMON ABELSG RMODULE DIFEXT RING RNG
                    SGROUP MONOID DIFRING PDRING FLINEXP LINEXP FINITE ALGEBRA
                    MODULE COMRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                    OAMONS VSPACE FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD
                    DIVRING BOOLEAN NNI INT SINT INS OINTDOM KONVERT PATMAB
                    CFCAT REAL CHARZ STEP
sturm      SHP      OINTDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER ORDRING OAGROUP OCAMON 
                    OAMON OASGP ORDSET NNI INT LIST PI ILIST SINT BOOLEAN
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                    LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT FLAGG ELAGG OM
                    INS UFD GCDDOM EUCDOM PID DIFRING RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP UPOLYC POLYCAT PDRING FAMR AMR
                    CHARNZ FRETRCT FLINEXP PFECAT DIFEXT FIELD DIVRING
sign       SIGNRF   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER POLYCAT PDRING
                    FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT UFD INT
                    QFCAT FIELD EUCDOM PID DIVRING FEVALAB ELTAB DIFEXT 
                    DIFRING PATAB FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL UPOLYC LIST ILIST
smith      SMITH    EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER FLAGG LNAGG IXAGG
                    HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
                    ORDSET MATCAT ARR2CAT NNI INT SINT BOOLEAN PI QFCAT FIELD
                    UFD DIVRING RETRACT FEVALAB DIFEXT DIFRING PDRING FLINEXP
                    LINEXP PATAB FPATMAB PATMAB STEP OINTDOM ORDRING OAGROUP
                    OCAMON OAMON OASGP REAL CHARZ CHARNZ PFECAT VECTCAT A1AGG
                    OM LIST ILIST 
multpoly  SMP      POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE 
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD BOOLEAN NNI INT PI LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG
                   FLAGG ELAGG OM LIST ILIST FIELD EUCDOM PID DIVRING FPS RNS
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL RADCAT INS OINTDOM
                   DIFRING CFCAT STEP UPOLYC DIFEXT
mts        SMTS     MTSCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE PSCAT AMR
                    BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER IEVALAB EVALAB RADCAT TRANFUN TRIGCAT
                    ATRIG HYPCAT AHYP ELEMFUN ORDSET POLYCAT FAMR FRETRCT
                    RETRACT FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT UFD
                    NNI INT BOOLEAN LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM
                    INS EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                    OASGP DIFRING CFCAT REAL STEP PI FIELD DIVRING
solvefor   SOLVEFOR UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING BOOLEAN
                    INT LIST ILIST LSAGG STAGG NNI PI INS OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OASGP CFCAT REAL 
newdata    SPLTREE  RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    INT LIST ILIST LSAGG STAGG ELAGG FLAGG URAGG LNAGG RCAGG
                    IXAGG CLAGG HOAGG ORDSET AGG ELTAGG BOOLEAN KONVERT OM NNI
                    STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
infprod    STINPROD INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG 
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER CHARZ FIELD EUCDOM PID
                    GCDDOM UFD DIVRING QFCAT RETRACT FEVALAB ELTAB EVALAB
                    DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB
                    TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL CHARNZ PFECAT
sttf       STTFNC   ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                    BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                    INT STRING CHAR SINT OUTFORM LIST PRIMARR A1AGG ISTRING
intrf      SUBRESP  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING FAMR
                    AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI INT
                    PRIMARR LIST A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG
                    CLAGG PI ILIST BOOLEAN
sum        SUMRF    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER ORDSET RETRACT POLYCAT
                    PDRING FAMR AMR CHARZ CHARNZ FRETRCT EVALAB IEVALAB
                    FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT UFD QFCAT
                    FIELD EUCDOM PID DIVRING FEVALAB ELTAB DIFEXT DIFRING
                    PATAB FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL
poly      SUP      UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                   PID FIELD DIVRING OAMONS OCAMON OAMON OASGP FPC INT LIST
                   NNI PI ILIST BOOLEAN FFIELDC FINITE LSAGG STAGG URAGG RCAGG
                   HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM FPS
                   RNS ORDRING OAGROUP REAL RADCAT INS OINTDOM CFCAT
allfact    SUPFRACF OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                    ABELMON ABELSG CABMON GCDDOM INTDOM COMRING RING RNG
                    ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                    MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ 
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                    PATMAB PFECAT UFD QFCAT FIELD EUCDOM PID DIVRING FEVALAB
                    ELTAB DIFEXT DIFRING PATAB FPATMAB TYPE STEP OINTDOM
                    ORDRING OAGROUP REAL UPOLYC
efstruc    TANEXP   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    INT UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                    RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                    PATMAB PFECAT ELTAB DIFRING DIFEXT STEP INS OINTDOM 
                    ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL OM VECTOR
                    IVECTOR IARRAY1 SINT VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG
                    AGG TYPE ELTAGG CLAGG NNI PI 
fortpak    TEMUTL   INT STRING CHAR SINT OUTFORM LIST PRIMARR A1AGG ISTRING
                    SRAGG
tex        TEX      SETCAT BASTYPE KOERCE INT NNI STRING CHAR SINT OUTFORM
                    LIST PRIMARR A1AGG ISTRING ILIST STRICAT SRAGG FLAGG LNAGG
                    IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
                    KONVERT ORDSET OM PI BOOLEAN LSAGG STAGG URAGG RCAGG ELAGG
                    ORDFIN FINITE 
files      TEXTFILE FILECAT SETCAT BASTYPE KOERCE FNCAT STRICAT SRAGG A1AGG 
                    FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAB
                    CLAGG KONVERT ORDSET OM STRING CHAR SINT OUTFORM LIST INT
                    PRIMARR A1AGG ISTRING
tree       TREE     RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB
                    NNI INT LIST ILIST BOOLEAN LSAGG STAGG URAGG LNAGG IXAGG 
                    ELTAGG ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM PI STRING
                    CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
twofact   TWOFACT  FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING CHARNZ FINITE STEP DIFRING UPOLYC POLYCAT PDRING 
                   FAMR AMR CHARZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET KONVERT PATMAB PFECAT ELTAB DIFEXT INT INS PI NNI
                   LIST ILIST BOOLEAN FAXF XF VSPACE LSAGG STAGG URAGG RCAGG
                   HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM
unifact    UNIFACT  UPOLYC POLYCAT PDRRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB 
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING BOOLEAN INT
                    LIST INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT
                    REAL OM INS NNI SINT PI LSAGG STAGG URAGG RCAGG HOAGG AGG
                    TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG ILIST 
poly      UP       UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM 
                   PID FIELD DIVRING NNI INT FPS RNS ORDRING OAGROUP OCAMON
                   OAMON OASGP REAL RADCAT INS OINTDOM CFCAT
cden       UPCDEN   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD EUCDOM PID
                    GCDDOM UFD DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB
                    DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB
                    TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP OCAMON
                    OAMON OASGP REAL CHARZ CHARNZ PFECAT UPOLYC POLYCAT FAMR
                    AMR FRETRCT LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG
                    ELTAGG CLAGG FLAGG ELAGG
updecomp   UPDECOMP INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER CHARZ UPOLYC POLYCAT
                    PDRING FAMR AMR CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD
                    ELTAB DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI
                    INT SINT BOOLEAN
upddivp    UPDIVP   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING
                    FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD
                    ELTAB DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI
                    BOOLEAN
poly       UPMP     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINXEP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI INT
                    LIST ILIST 
polycat    UPOLYC2  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                    KOERCE SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR
                    AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                    INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                    LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB 
                    DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING BOOLEAN
poly       UPSQFREE INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING
                    FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD
                    ELTAB DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING FFIELDC
                    FPC FINITE INT NNI BOOLEAN LIST PI
pscat      UPXSCAT  INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                    ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FIELD
                    DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP
                    PATAB FPATMAB TYPE CHARNZ PFECAT UPSCAT PSCAT AMR RADCAT
                    TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN 
viewdef    VIEWDEF  NNI INT BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                    SETCAT BASTYPE KOERCE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                    ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM LIST ILIST STRING
                    CHAR SINT OUTFORM A1AGG ISTRING SRAGG STRICAT 
view2D    VIEW2D   SETCAT BASTYPE KOERCE DFLOAT INT BOOLEAN PI NNI VECTCAT
                   A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                   ELTAGG ELTAB CLAGG KONVERT ORDSET VECTOR IVECTOR IARRAY1
                   LIST ILIST LSAGG STAGG SINT STRING CHAR OUTFORM PRIMARR
                   A1AGG ISTRING INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL
                   CHARZ STEP OM SRAGG STRICAT ELAGG FLAGG FPS RNS FIELD 
                   DIVRING RADCAT
void       VOID     STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING
weier      WEIER    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    INT LIST ILIST NNI POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                    KONVERT PATMAB PFECAT MTSCAT PSCAT RADCAT TRANFUN TRIGCAT
                    ATRIG HYPCAT AHYP ELEMFUN
wtpol      WP       ORDSET SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON
                    ABELSG SGROUP MONOID LMODULE ALGEBRA MODULE BMODULE
                    RMODULE OAMONS OCAMON OAMON OASGP POLYCAT PDRING FAMR
                    AMR COMRING CHARNZ INTDOM ENTIRER FRETRCT RETRACT EVALAB
                    IEVALAB FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT UFD
                    LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                    ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST NNI BOOLEAN
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
allfact.spad.pamphlet (MRATFAC MPRFF MPCPF GENMFACT RFFACTOR SUPFRACF)
array2.spad.pamphlet (ARR2CAT IIARRAY2 IARRAY2 ARRAY2)
bezout.spad.pamphlet (BEZOUT)
boolean.spad.pamphlet (REF LOGIC BOOLEAN IBITS BITS)
brill.spad.pamphlet (BRILL)
cden.spad.pamphlet (ICDEN CDEN UPCDEN MCDEN)
contfrac.spad.pamphlet (CONTFRAC NCNTFRAC)
cycles.spad.pamphlet (CYCLES EVALCYC)
cyclotom.spad.pamphlet (CYCLOTOM)
ddfact.spad.pamphlet (DDFACT)
equation2.spad.pamphlet (EQ EQ2 FEVALAB)
error.spad.pamphlet (ERROR)
facutil.spad.pamphlet (FACUTIL PUSHVAR)
ffcat.spad.pamphlet (FPC XF FAXF DLP FFIELDC FFSLPE)
fff.spad.pamphlet (FFF)
ffhom.spad.pamphlet (FFHOM)
ffpoly.spad.pamphlet (FFPOLY)
fname.spad.pamphlet (FNCAT FNAME)
formula.spad.pamphlet (FORMULA FORMULA1)
fraction.spad.pamphlet (LO LA QFCAT QFCAT2 FRAC LPEFRAC FRAC2)
galfactu.spad.pamphlet (GALFACTU)
galpolyu.spad.pamphlet (GALPOLYU)
gb.spad.pamphlet (GB)
gbeuclid.spad.pamphlet (GBEUCLID)
gbintern.spad.pamphlet (GBINTERN)
gdirprod.spad.pamphlet (ORDFUNS ODP HDP SHDP)
geneez.spad.pamphlet (GENEEZ)
ghensel.spad.pamphlet (GHENSEL)
gpgcd.spad.pamphlet (GENPGCD)
gpol.spad.pamphlet (LAUPOL)
groebf.spad.pamphlet (GBF)
groebsol.spad.pamphlet (GROEBSOL)
intrf.spad.pamphlet (SUBRESP MONOTOOL INTHERTR INTTR INTRAT INTRF)
idecomp.spad.pamphlet (IDECOMP)
leadcdet.spad.pamphlet (LEADCDET)
lindep.spad.pamphlet (LINDEP ZLINDEP)
lingrob.spad.pamphlet (LGROBP)
listgcd.spad.pamphlet (HEUGCD)
matfuns.spad.pamphlet (IMATLIN MATCAT2 RMCAT2 IMATQF MATLIN)
mfinfact.spad.pamphlet (MFINFACT)
mlift.spad.pamphlet (MLIST)
moddfact.spad.pamphlet (MDDFACT)
modmon.spad.pamphlet (MODMON)
modring.spad.pamphlet (MODRING EMR MODFIELD)
mts.spad.pamphlet (SMTS TS)
multsqfr.spad.pamphlet (MULTSQFR)
newpoint.spad.pamphlet (PTCAT POINT COMPPROP SUBSPACE PTPACK PTFUNC2)
numtheor.spad.pamphlet (INTHEORY PNTHEORY)
npcoef.spad.pamphlet (NPCOEF)
omdev.spad.pamphlet (OMENC OMDEV OMCONN OMPKG)
omserver.spad.pamphlet (OMSERVER)
padic.spad.pamphlet (PADICCT IPADIC PADIC BPADIC PADICRC PADICRAT BPADICRT)
pdecomp.spad.pamphlet (PCOMP PDECOMP)
pfbr.spad.pamphlet (PFBRU PFBR)
pfr.spad.pamphlet (PFR PFRPAC)
pgcd.spad.pamphlet (PGCD)
pinterp.spad.pamphlet (PINTERPA PINTERP)
pleqn.spad.pamphlet (PLEQN)
poltopol.spad.pamphlet (MPC2 MPC3 POLTOPOL)
poly.spad.pamphlet (FM PR SUP SUP2 UP UP2 POLY2UP UPSQFREE PSQFR UPMP)
polycat.spad.pamphlet (AMR FAMR POLYCAT POLYLIFT UPOLYC UPOLYC2 COMMUPC)
prs.spad.pamphlet (PRS)
radix.spad.pamphlet (RADIX BINARY DECIMAL HEXADEC RADUTIL)
ratfact.spad.pamphlet (RATFACT)
rderf.spad.pamphlet (RDETR)
realzero.spad.pamphlet (REAL0)
real0q.spad.pamphlet (REAL0Q)
resring.spad.pamphlet (RESRING)
rf.spad.pamphlet (POLYCATQ RF)
solvefor.spad.pamphlet (SOLVEFOR)
solvelin.spad.pamphlet (LSMP LSMP1 LSPP)
smith.spad.pamphlet (SMITH)
sttf.spad.pamphlet (STTF STTFNC)
sturm.spad.pamphlet (SHP)
sum.spad.pamphlet (ISUMP GOSPER SUMRF)
tex.spad.pamphlet (TEX)
tree.spad.pamphlet (TREE BTCAT BTREE BSTREE BTOURN BBTREE PENDTREE)
twofact.spad.pamphlet (NORMRETR TWOFACT)
unifact.spad.pamphlet (UNIFACT)
updecomp.spad.pamphlet (UPDECOMP)
updivp.spad.pamphlet (UPDIVP)
viewDef.spad.pamphlet (VIEWDEF)
vector.spad.pamphlet (VECTCAT IVECTOR VECTOR VECTOR2 DIRPCAT DIRPROD DIRPROD2)
view2D.spad.pamphlet (GRIMAGE VIEW2D)
void.spad.pamphlet (VOID EXIT)
weier.spad.pamphlet (WEIER)
wtpol.spad.pamphlet (WP OWP)
\end{verbatim}

<<layer14>>=
LAYER14=${OUT}/ASP1.o ${OUT}/ASP10.o ${OUT}/ASP24.o ${OUT}/ASP4.o \
        ${OUT}/ASP50.o ${OUT}/ASP6.o ${OUT}/ASP73.o \
        ${OUT}/BALFACT.o ${OUT}/BEZOUT.o ${OUT}/BINARY.o \
        ${OUT}/BINFILE.o ${OUT}/BOUNDZRO.o ${OUT}/BPADICRT.o ${OUT}/BRILL.o \
        ${OUT}/CDEN.o ${OUT}/CHVAR.o ${OUT}/COMMUPC.o \
        ${OUT}/CONTFRAC.o \
        ${OUT}/CVMP.o ${OUT}/CYCLOTOM.o ${OUT}/CYCLES.o ${OUT}/DDFACT.o \
        ${OUT}/DECIMAL.o \
        ${OUT}/DIOPS.o ${OUT}/DIOPS-.o ${OUT}/DIRPROD.o \
        ${OUT}/DISPLAY.o ${OUT}/DMP.o ${OUT}/DPMO.o \
        ${OUT}/DPOLCAT.o ${OUT}/DPOLCAT-.o \
        ${OUT}/D01AJFA.o ${OUT}/D01AKFA.o ${OUT}/D01ALFA.o \
        ${OUT}/D01AMFA.o ${OUT}/D01APFA.o ${OUT}/D01AQFA.o \
        ${OUT}/EMR.o ${OUT}/EQ.o \
        ${OUT}/ERROR.o ${OUT}/EVALCYC.o \
        ${OUT}/E04DGFA.o \
        ${OUT}/E04FDFA.o ${OUT}/E04GCFA.o ${OUT}/E04JAFA.o \
        ${OUT}/FACUTIL.o ${OUT}/FF.o \
        ${OUT}/FFCG.o ${OUT}/FFCGX.o ${OUT}/FFHOM.o \
        ${OUT}/FFNB.o ${OUT}/FFNBX.o ${OUT}/FFPOLY.o ${OUT}/FFX.o \
        ${OUT}/FFSLPE.o \
        ${OUT}/FGLMICPK.o ${OUT}/FILE.o \
        ${OUT}/FINAALG.o ${OUT}/FINAALG-.o \
        ${OUT}/FINRALG.o ${OUT}/FINRALG-.o \
        ${OUT}/FFF.o ${OUT}/FLOATRP.o ${OUT}/FNAME.o \
        ${OUT}/FOP.o ${OUT}/FORMULA.o ${OUT}/FORT.o ${OUT}/FRAC.o \
        ${OUT}/FTEM.o ${OUT}/GENEEZ.o ${OUT}/GENMFACT.o \
        ${OUT}/GENPGCD.o \
        ${OUT}/GALFACTU.o ${OUT}/GALPOLYU.o \
        ${OUT}/GB.o ${OUT}/GBEUCLID.o \
        ${OUT}/GBF.o ${OUT}/GBINTERN.o ${OUT}/GHENSEL.o \
        ${OUT}/GMODPOL.o \
        ${OUT}/GOSPER.o ${OUT}/GRIMAGE.o \
        ${OUT}/GROEBSOL.o ${OUT}/HDMP.o ${OUT}/HDP.o ${OUT}/HEXADEC.o \
        ${OUT}/HEUGCD.o \
        ${OUT}/IBPTOOLS.o ${OUT}/IFF.o \
        ${OUT}/IBITS.o ${OUT}/ICARD.o ${OUT}/ICDEN.o ${OUT}/IDECOMP.o \
        ${OUT}/IIARRAY2.o ${OUT}/IMATLIN.o ${OUT}/IMATQF.o \
        ${OUT}/INMODGCD.o ${OUT}/INNMFACT.o \
        ${OUT}/INPSIGN.o ${OUT}/INTHERTR.o ${OUT}/INTRAT.o ${OUT}/INTRF.o \
        ${OUT}/INTSLPE.o ${OUT}/INTTR.o \
        ${OUT}/ISUMP.o ${OUT}/LAUPOL.o ${OUT}/LEADCDET.o \
        ${OUT}/LGROBP.o ${OUT}/LIMITRF.o ${OUT}/LINDEP.o ${OUT}/LO.o \
        ${OUT}/LPEFRAC.o ${OUT}/LSPP.o \
        ${OUT}/MATLIN.o ${OUT}/MCDEN.o ${OUT}/MDDFACT.o ${OUT}/MFINFACT.o \
        ${OUT}/MFLOAT.o \
        ${OUT}/MINT.o ${OUT}/MLIFT.o ${OUT}/MMAP.o ${OUT}/MODMON.o \
        ${OUT}/MONOTOOL.o ${OUT}/MPCPF.o \
        ${OUT}/MPC2.o ${OUT}/MPC3.o ${OUT}/MPOLY.o ${OUT}/MPRFF.o \
        ${OUT}/MRATFAC.o ${OUT}/MULTSQFR.o ${OUT}/NORMRETR.o \
        ${OUT}/NPCOEF.o ${OUT}/NSUP.o ${OUT}/NTPOLFN.o \
        ${OUT}/ODP.o ${OUT}/ODEPRIM.o \
        ${OUT}/ODEPRRIC.o ${OUT}/OMPKG.o ${OUT}/OMSERVER.o \
        ${OUT}/PADEPAC.o ${OUT}/PADICRAT.o ${OUT}/PADICRC.o \
        ${OUT}/PCOMP.o ${OUT}/PDECOMP.o ${OUT}/PF.o \
        ${OUT}/PFBR.o ${OUT}/PFBRU.o ${OUT}/PFOTOOLS.o ${OUT}/PFRPAC.o \
        ${OUT}/PGCD.o ${OUT}/PINTERPA.o ${OUT}/PLEQN.o \
        ${OUT}/PMPLCAT.o ${OUT}/PMQFCAT.o \
        ${OUT}/PNTHEORY.o \
        ${OUT}/POLUTIL.o ${OUT}/POLTOPOL.o ${OUT}/POLYCATQ.o \
        ${OUT}/POLYLIFT.o \
        ${OUT}/POLYROOT.o \
        ${OUT}/POLY2.o ${OUT}/POLY2UP.o ${OUT}/PRS.o \
        ${OUT}/PSQFR.o ${OUT}/PUSHVAR.o \
        ${OUT}/QALGSET.o ${OUT}/QFCAT2.o ${OUT}/RADIX.o ${OUT}/RATFACT.o \
        ${OUT}/RCFIELD.o ${OUT}/RCFIELD-.o \
        ${OUT}/RDETR.o ${OUT}/RDETRS.o ${OUT}/REAL0.o ${OUT}/REAL0Q.o \
	${OUT}/REALSOLV.o \
        ${OUT}/RESRING.o ${OUT}/RETSOL.o ${OUT}/RF.o \
        ${OUT}/RFFACTOR.o ${OUT}/RMATCAT.o ${OUT}/RMATCAT-.o \
        ${OUT}/RRCC.o ${OUT}/RRCC-.o ${OUT}/SCPKG.o ${OUT}/SHDP.o \
        ${OUT}/SHP.o ${OUT}/SIGNRF.o ${OUT}/SMITH.o ${OUT}/SMP.o \
        ${OUT}/SMTS.o \
        ${OUT}/SOLVEFOR.o ${OUT}/SPLTREE.o ${OUT}/STINPROD.o \
        ${OUT}/STTFNC.o ${OUT}/SUBRESP.o ${OUT}/SUMRF.o ${OUT}/SUP.o \
        ${OUT}/SUPFRACF.o \
        ${OUT}/TANEXP.o ${OUT}/TEMUTL.o \
        ${OUT}/TEX.o ${OUT}/TEXTFILE.o \
        ${OUT}/TREE.o ${OUT}/TWOFACT.o \
        ${OUT}/UNIFACT.o ${OUT}/UP.o ${OUT}/UPCDEN.o \
        ${OUT}/UPDECOMP.o ${OUT}/UPDIVP.o \
        ${OUT}/UPMP.o ${OUT}/UPOLYC2.o ${OUT}/UPXSCAT.o \
        ${OUT}/UPSQFREE.o ${OUT}/VIEWDEF.o ${OUT}/VIEW2D.o \
        ${OUT}/VOID.o ${OUT}/WEIER.o ${OUT}/WP.o

@
\subsection{Layer15}
\begin{verbatim}
aggcat   DIAGG    DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                  IEVALAB CLAGG KONVERT BOOLEAN NNI INT
dpolcat  DSMP     DPOLCAT POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR
                  BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                  ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                  ORDSET KONVERT PATMAB GCDDOM PFECAT UFD DIFEXT DIFRING
                  DVARCAT NNI INT FPS RNS FIELD EUCDOM PID DIVRING ORDRING
                  OAGROUP OCAMON OAMON OASGP REAL RADCAT INS OINTDOM CFCAT
                  STEP UPOLYC ELTAB 
expexpan   EXPUPXS  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    ORDSET UPXSCAT UPSCAT PSCAT AMR CHARZ CHARNZ ELTAB DIFRING
                    PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                    OAMON OASGP INS OINTDOM ORDRING OAGROUP OCAMON KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL STEP INT LIST ILIST
                    BOOLEAN OM QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP
                    PATAB FPATMAB TYPE PFECAT
algcat   FRAMALG  FINRALG ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG
                  SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE
                  RMODULE CHARZ CHARNZ COMRING UPOLYC POLYCAT PDRING FAMR
                  AMR INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                  LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                  DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING VECTCAT A1AGG
                  FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG INT VECTOR
                  IVECTOR IARRAY1 INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                  OASGP CFCAT REAL OM NNI SINT LIST ILIST
aggcat   MDAGG    DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                  IEVALAB CLAGG KONVERT 
dpolcat  ODPOL    DPOLCAT POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR
                  BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                  ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                  KONVERT PATMAB GCDDOM PFECAT UFD DIFEXT DIFRING DVARCAT FPS
                  RNS FIELD EUCDOM PID DIVRING ORDRING OAGROUP OCAMON OAMON 
                  OASGP REAL RADCAT OINTDOM CFCAT STEP INS OINTDOM STEP
                  UPOLYC ELTAB 
plot      PLOT     PPCURVE KOERCE BOOLEAN INT DFLOAT FPS RNS FIELD EUCDOM UFD
                   GCDDOM DIVRING INTDOM ALGEBRA DIFRING ORDRING MODULE RING
                   ABELGRP ABELMON MONOID ORDSET ABELSG SGROUP TRANFUN SETCAT
                   ELEMFUN HYPCAT ATRIG TRIGCAT RADCAT RETRACT BASTYPE PID
                   COMRING RING RNG CABMON LMODULE BMODULE RMODULE ENTIRER
                   OAGROUP OCAMON OAMON OASGP REAL KONVERT RETRACT PATMAB
                   CHARZ PTCAT VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE
                   EVALAB IEVALAB ELTAGG ELTAB CLAGG ILIST LSAGG STAGG URAGG
                   RCAGG ELAGG OM NNI PI SINT INS OINTDOM LINEXP CFCAT STEP
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN FRAC
matfuns  RMCAT2   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE DIRPCAT IXAGG HOAGG AGG TYPE EVALAB
                  IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE RMODULE DIFEXT
                  DIFRING PDRING FLINEXP LINEXP FINITE ALGEBRA MODULE COMRING
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET OAMONS VSPACE 
                  FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING RMATCAT
                  NNI INT
reclos    ROIRC    RRCC SETCAT BASTYPE KOERCE ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET ABELMON ABELSG CABMON ABELGRP RING RNG SGROUP
                   MONOID LMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING 
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING UPOLYC
                   POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB
                   IEVALAB FLINEXP LINEXP KONVERT PATMAB PFECAT ELTAB DIFRING
                   DIFEXT STEP NNI INT LIST LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM ILIST PI
                   BOOLEAN INS OINTDOM CFCAT REAL
dpolcat  SDPOL    DPOLCAT POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR
                  BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                  ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                  KONVERT PATMAB GCDDOM PFECAT UFD DIFEXT DIFRING DVARCAT FPS
                  RNS FIELD EUCDOM PID DIVRING ORDRING OAGROUP OCAMON OAMON
                  OASGP REAL RADCAT INS OINTDOM CFCAT STEP UPOLYC ELTAB
matcat   SMATCAT  DIFEXT RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                  KOERCE SGROUP MONOID LMODULE DIFRING PDRING BMODULE RMODULE
                  RMATCAT HOAGG AGG TYPE EVALAB IEVALAB MODULE COMRING FRETRCT
                  RETRACT FLINEXP LINEXP ALGEBRA DIRPCAT IXAGG ELTAGG ELTAB
                  FINITE ORDRING OAGROUP OCAMON OAMON OASGP ORDSET OAMONS
                  VSPACE FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING
                  INT NNI VECTOR IVECTOR IARRAY1 INS OINTDOM KONVERT PATMAB
                  CFCAT REAL CHARZ STEP OM VECTCAT A1AGG FLAGG LNAGG CLAGG
                  LSAGG STAGG URAGG RCAGG ELAGG LIST ILIST INS
tube      TUBETOOL FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ INS OINTDOM DIFRING
                   LINEXP CFCAT STEP OM INT DFLOAT LIST FRAC SINT PI NNI ILIST
                   BOOLEAN LSAGG STAGG ELAGG FLAGG URAGG
efupxs   UPXSCCA  UPXSCAT UPSCAT PSCAT AMR RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                  RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                  ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                  AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING RETRACT 
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
dpolcat.spad.pamphlet (DVARCAT ODVAR SDVAR DPOLCAT DSMP ODPOL SDPOL)
matcat.spad.pamphlet (MATCAT RMATCAT SMATCAT)
plot.spad.pamphlet (PLOT PLOT1)
\end{verbatim}

<<layer15>>=
LAYER15=${OUT}/DIAGG.o ${OUT}/DIAGG-.o ${OUT}/DSMP.o ${OUT}/EXPUPXS.o \
        ${OUT}/FRAMALG.o ${OUT}/FRAMALG-.o \
        ${OUT}/MDAGG.o ${OUT}/ODPOL.o ${OUT}/PLOT.o ${OUT}/RMCAT2.o \
        ${OUT}/ROIRC.o \
        ${OUT}/SDPOL.o ${OUT}/SMATCAT.o ${OUT}/SMATCAT-.o ${OUT}/TUBETOOL.o \
        ${OUT}/UPXSCCA.o ${OUT}/UPXSCCA-.o

@
\subsection{Layer16}
\begin{verbatim}
lodop    DPMM     DIRPCAT IXAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                  IEVALAB ELTAGG ELTAB FRETRCT RETRACT BMODULE LMODULE ABELGRP
                  CABMON ABELMON ABELSG RMODULE DIFEXT RING RNG SGROUP MONOID
                  DIFRING PDRING FLINEXP LINEXP FINITE ALGEBRA MODULE COMRING
                  ORDRING OSAGROUP OCAMON OAMON OASGP ORDSET OAMONS VSPACE
                  FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING SMATCAT
                  RMATCAT SINT PI NNI INT INS OINTDOM KONVERT PATMAB CFCAT
                  REAL CHARZ STEP OM
efupxs   EFUPXS   PTRANFN UPXSCCA UPXSCAT UPSCAT PSCAT AMR RING RNG ABELGRP
                  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                  LMODULE BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                  INTDOM ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT
                  ATRIG HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD 
                  DIVRING RETRACT ULSCAT NNI INT INS OINTDOM ORDRING OAGROUP
                  OCAMON OAMON OASGP ORDSET KONVERT LINEXP PATMAB CFCAT REAL
                  STEP OM PI STRING CHAR SINT OUTFORM LIST PRIMARR A1AGG
                  ISTRING
intclos  FFINTBAS EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING
                  FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                  LINEXP ORDSET KONVERT PATMAB PFECAT UFD ELTAB DIFRING DIFEXT
                  STEP FIELD DIVRING FRAMALG FINRALG INT VECTCAT A1AGG FLAGG
                  LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG NNI
divisor  FRIDEAL  GROUP MONOID SGROUP SETCAT BASTYPE KOERCE EUCDOM PID
                  GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                  ABELSG LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                  QFCAT FIELD UFD DIVRING RETRACT FEVALAB ELTAB EVALAB
                  IEVALAB DIFEXT DIFRING PDRING FLINEXP LINEXP PATAB KONVERT
                  FPATMAB TYPE PATMAB STEP ORDSET OINTDOM ORDRING OAGROUP
                  OCAMON OAMON OASGP REAL CHARZ CHARNZ PFECAT UPOLYC POLYCAT
                  FAMR AMR FRETRCT FRAMALG FINRALG VECTCAT A1AGG FLAGG LNAGG
                  IXAGG HOAGG AGG ELTAGG CLAGG INT VECTOR IVECTOR IARRAY1
                  BOOLEAN LSAGG STAGG URAGG RCAGG ELAGG OM LIST ILIST SINT
                  NNI INS CFCAT FINITE PI
divisor  FRIDEAL2 EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER QFCAT FIELD UFD
                  DIVRING RETRACT FEVALAB ELTAB EVALAB IEVALAB DIFEXT DIFRING
                  PDRING FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB STEP
                  ORDSET OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL CHARZ
                  CHARNZ PFECAT UPOLYC POLYCAT FAMR AMR FRETRCT FRAMALG 
                  FINRALG INS CFCAT OM INT VECTOR IVECTOR IARRAY1
divisor  FRMOD    FRAMALG FINRALG ALGEBRA RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE MODULE
                  BMODULE RMODULE CHARZ CHARNZ EUCDOM PID GCDDOM INTDOM
                  COMRING ENTIRER QFCAT FIELD UFD DIVRING RETRACT FEVALAB
                  ELTAB EVALAB IEVALAB DIFEXT DIFRING PDRING FLINEXP LINEXP
                  PATAB KONVERT FPATMAB TYPE PATMAB STEP ORDSET OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP REAL PFECAT UPOLYC
                  POLYCAT FAMR AMR FRETRCT BOOLEAN VECTCAT A1AGG FLAGG LNAGG
                  IXAGG HOAGG AGG ELTAGG CLAGG INT VECTOR IVECTOR IARRAY1
                  INS CFCAT OM NNI PI 
aggcat    FSAGG   DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                  EVALAB IEVALAB CLAGG KONVERT SETAGG FINITE NNI INT BOOLEAN
                  SINT PI INS ORDSET LIST ILIST LSAGG STAGG URAGG RCAGG LNAGG
                  IXAGG ELTAGG ELTAB FLAGG ELAGG OM 
intclos  IBATOOL  EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING
                  FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                  LINEXP ORDSET KONVERT PATMAB PFECAT UFD ELTAB DIFRING DIFEXT
                  STEP FIELD DIVRING FRAMALG FINRALG SINT NNI INT PI INS 
                  OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL OM
                  VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG
                  AGG TYPE ELTAGG CLAGG
intfact  INTFACT  INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                  ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                  BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                  ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                  RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP INT INS LIST
                  ILIST LSAGG STAGG ELAGG PI NNI SINT BOOLEAN MDAGG DIOPS
                  BGAGG HOAGG AGG TYPE EVALAB IEVALAB CLAGG
aggcat   KDAGG    DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                  EVALAB IEVALAB CLAGG KONVERT BOOLEAN
algcat   MONOGEN  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                  BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                  FRAMALG FINRALG ALGEBRA MODULE CHARZ CHARNZ KONVERT
                  FRETRCT RETRACT FLINEXP LINEXP FINITE FIELD EUCDOM PID
                  GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT DIFRING PDRING
                  FFIELDC FPC STEP UPOLYC POLYCAT FAMR AMR EVALAB IEVALAB
                  ORDSET PATMAB PFECAT ELTAB NNI INT SINT PI VECTOR IVECTOR
                  IARRAY1 INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                  CFCAT REAL 
aggcat   MSETAGG  MDAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                  EVALAB IEVALAB CLAGG KONVERT SETAGG
intclos  NFINTBAS UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                  SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                  RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                  FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                  PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                  PID FIELD DIVRING FRAMALG FINRALG INT VECTOR IVECTOR IARRAY1
                  INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL OM
                  VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG
                  LIST ILIST PI NNI 
space     SPACE3   SPACEC SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON ABELMON
                   ABELSG SGROUP MONOID LMODULE BOOLEAN INT LIST LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                   ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM ILIST NNI PI 
                   OAMONS OCAMON OAMON OASGP FLAGG DIAGG DIOPS BGAGG SETAGG
                   FINITE
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
efupxs.spad.pamphlet (EFUPXS)
lodop.spad.pamphlet (MLO OMLO NCODIV ODR DPMO DPMM)
space.spad.pamphlet (SPACEC SPACE3 TOPSP)
\end{verbatim}

<<layer16>>=
LAYER16=${OUT}/DPMM.o ${OUT}/EFUPXS.o \
        ${OUT}/FFINTBAS.o ${OUT}/FRIDEAL.o ${OUT}/FRIDEAL2.o \
        ${OUT}/FRMOD.o ${OUT}/FSAGG.o ${OUT}/FSAGG-.o ${OUT}/IBATOOL.o \
        ${OUT}/INTFACT.o \
        ${OUT}/KDAGG.o ${OUT}/KDAGG-.o ${OUT}/MSETAGG.o \
        ${OUT}/MONOGEN.o ${OUT}/MONOGEN-.o \
        ${OUT}/NFINTBAS.o ${OUT}/SPACE3.o 

@
\subsection{Layer17}
\begin{verbatim}
string    CCLASS   SETCAT BASTYPE KOERCE KONVERT FSAGG DIAGG DIOPS BGAGG HOAGG
                   AGG TYPE EVALAB IEVALAB CLAGG SETCAT FINITE ORDFIN ORDSET
                   INT STRING CHAR SINT OUTFORM LIST PRIMARR A1AGG ISTRING
                   SRAGG NNI BOOLEAN INS UFD GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                   CFCAT REAL CHARZ STEP OM FLAGG LNAGG BTAGG LOGIC A1AGG IXAGG
                   ELTAGG ELTAB
aggcat2  FSAGG2   SETCAT BASTYPE KOERCE FSAGG DIAGG DIOPS BGAGG HOAGG AGG
                  TYPE EVALAB IEVALAB CLAGG KONVERT SETAGG FINITE
galfact   GALFACT  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                   PID FIELD DIVRING BOOLEAN INS OINTDOM ORDRING OAGROUP OCAMON
                   OAMON OASGP CFCAT REAL OM INT PI NNI OAMONS FSAGG DIAGG 
                   DIOPS BGAGG HOAGG AGG TYPE CLAGG SETAGG FINITE LIST ILIST
                   FPS RNS RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   LSAGG STAGG URAGG RCAGG LNAGG IXAGG ELTAGG FLAGG ELAGG 
algfact  IALGFACT FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID 
                  LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING 
                  UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                  EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                  ELTAB DIFRING DIFEXT STEP MONOGEN FRAMALG FINRALG FINITE
                  FFIELDC FPC NNI INT LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                  LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM LIST ILIST
padiclib IBACHIN  FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                  RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                  SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                  ENTIRER UFD DIVRING CHARNZ FINITE STEP DIFRING UPOLYC
                  POLYCAT PDRING FAMR AMR CHARZ FRETRCT RETRACT EVALAB
                  IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT ELTAB
                  DIFEXT SINT NNI INT LIST ILIST LSAGG STAGG URAGG RCAGG
                  HOAGG AGG TYPE LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM
                  PI MONOGEN FRAMALG FINRALG BOOLEAN VECTCAT A1AGG
algcat   NORMMA   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                  SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                  ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING FAMR AMR CHARZ
                  CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                  KONVERT PATMAB PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                  PID FIELD DIVRING MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC
odealg   ODERED   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                  CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                  LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                  LODOCAT OREPCAT FRETRCT RETRACT ELTAB UPOLYC POLYCAT PDRING
                  FAMR AMR CHARZ CHARNZ EVALAB IEVALAB FLINEXP LINEXP ORDSET
                  KONVERT PATMAB PFECAT DIFRING DIFEXT STEP MONOGEN FRAMALG
                  FINRALG FINITE FFIELDC FPC VECTCAT A1AGG FLAGG LNAGG IXAGG
                  HOAGG AGG TYPE ELTAGG CLAGG NNI INT SINT PI
aggcat   OMSAGG   ORDSET SETCAT BASTYPE KOERCE MSETAGG MDAGG DIOPS BGAGG
                  HOAGG AGG TYPE EVALAB IEVALAB CLAGG KONVERT SETAGG PRQAGG
perm      PERM     PERMCAT GROUP MONOID SGROUP SETCAT BASTYPE KOERCE ORDSET
                   FINITE INT BOOLEAN LIST ILIST INS UFD GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP DIFRING KONVERT RETRACT LINEXP
                   PATMAB CFCAT REAL CHARZ STEP OM LSAGG STAGG ELAGG FLAGG 
                   URAGG LNAGG SINT RCAGG HOAGG AGG TYPE EVALAB IEVALAB IXAGG
                   ELTAGG ELTAB CLAGG VECTOR IVECTOR IARRAY1 PI NNI FSAGG DIAGG
                   DIOPS BGAGG SETAGG VECTCAT A1AGG
permgrps  PERMGRP  SETCAT BASTYPE KOERCE NNI INT BOOLEAN LIST ILIST SINT INS
                   UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT
                   REAL CHARZ STEP OM LSAGG STAGG ELAGG FLAGG URAGG LNAGG RCAGG
                   HOAGG AGG TYPE EVALAB IEVALAB IXAGG ELTAGG ELTAB CLAGG 
                   OAMONS VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FSAGG DIAGG 
                   DIOPS BGAGG SETAGG FINITE PI PERMCAT GROUP
intfact   PRIMES   INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON 
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP PI NNI INT 
                   VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG CLAGG
                   HOAGG AGG ELTAGG LIST ILIST LSAGG STAGG URAGG RCAGG TYPE
                   EVALAB IEVALAB ELTAB ELAGG OM SINT BOOLEAN FSAGG DIAGG DIOPS
                   BGAGG SETAGG FINITE 
padiclib PWFFINTB FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                  ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                  MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                  DIVRING CHARNZ FINITE STEP DIFRING UPOLYC POLYCAT PDRING
                  FAMR AMR CHARZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                  ORDSET KONVERT PATMAB PFECAT ELTAB DIFEXT MONOGEN FRAMALG
                  FINRALG QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM ORDRING
                  OAGROUP OCAMON OAMON OASGP REAL OM INT LIST ILIST LSAGG
                  STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG
                  ELAGG PI NNI INS CFCAT VECTCAT A1AGG
random    RDIST    SETCAT BASTYPE KOERCE INS UFD GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP LSAGG STAGG URAGG RCAGG
                   HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                   FLAGG ELAGG OM VECTCAT A1AGG FSAGG DIAGG DIOPS BGAGG SETAGG
                   FINITE
algext   SAE      UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                  ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                  AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                  INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                  LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                  DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING MONOGEN
                  FRAMALG FINRALG FINITE FFIELDC FPC NNI INT BOOLEAN SINT
                  VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG 
                  HOAGG AGG ELTAGG TYPE ELTAGG CLAGG QFCAT FEVALAB PATAB
                  FPATMAB OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL 
                  PI INS CFCAT
algfact  SAEFACT  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                  SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                  RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                  FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                  PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                  PID FIELD DIVRING MONOGEN FRAMALG FINRALG FINITE FFIELDC
                  FPC INS OINTDOM ORDRING OAGROUP OCAMONN OAMON OASGP CFCAT
                  REAL QFCAT FEVALAB PATAB FPATMAB TYPE
algfact  SAERFFC  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                  SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                  RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                  FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                  PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                  PID FIELD DIVRING MONOGEN FRAMALG FINRALG FINITE FFIELDC
                  FPC INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT
                  REAL QFCAT FEVALAB PATAB FPATMAB TYPE
sgcf      SGCF     INT SINT NNI LIST ILIST LSAGG VECTOR IVECTOR IARRAY1
                   BOOLEAN STAGG VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE
                   SETCAT BASTYPE KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG 
                   KONVERT ORDSET URAGG RCAGG ELAGG OM INS UFD GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP FSAGG DIAGG DIOPS BGAGG
                   SETAGG FINITE
aggcat   TBAGG    KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                  EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB BOOLEAN NNI
                  INT LIST ILIST 
view3D    VIEW3D   SETCAT BASTYPE KOERCE NNI INT DFLOAT BOOLEAN PI FPS RNS 
                   FIELD EUCDOM UFD GCDDOM DIVRING INTDOM ALGEBRA DIFRING 
                   ORDRING MODULE FRAC RING ABELGRP ABELMON STRING CHAR SINT
                   OUTFORM LIST PRIMARR A1AGG ISTRING ILIST LSAGG STAGG PID
                   COMRING RNG CABMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ENTIRER UFD OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ OM FSAGG DIAGG DIOPS
                   BGAGG HOAGG AGG TYPE EVALAB IEVALAB CLAGG SETAGG FINITE
                   URAGG RCAGG LNAGG IXAGG ELTAGG ELTAB FLAGG ELAGG INS OINTDOM
                   LINEXP CFCAT STEP SRAGG STRICAT 
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
algext.spad.pamphlet (SAE)
aggcat.spad.pamphlet (AGG HOAGG CLAGG BGAGG SKAGG QUAGG DQAGG PRQAGG DIOPS
                      DIAGG MDAGG SETAGG FSAGG MSETAGG OMSAGG KDAGG ELTAB
                      ELTAGG ISAGG TBAGG RCAGG BRAGG DLAGG URAGG STAGG LNAGG
                      FLAGG A1AGG ELAGG LSAGG ALAGG SRAGG BTAGG ITAGG) 
aggcat2.spad.pamphlet (FLAGG2 FSAGG2)
galfact.spad.pamphlet (GALFACT)
intfact.spad.pamphlet (PRIMES IROOT INTFACT)
padiclib.spad.pamphlet (IBPTOOLS IBACHIN PWFFINTB)
perm.spad.pamphlet (PERMCAT PERM)
permgrps.spad.pamphlet (PERMGRP PGE)
random.spad.pamphlet (RANDSRC RDIST INTBIT RIDIST RFDIST)
sgcf.spad.pamphlet (SGCF)
string.spad.pamphlet (CHAR CCLASS ISTRING STRING STRICAT)
view3D.spad.pamphlet (VIEW3D)
\end{verbatim}

<<layer17>>=
LAYER17=${OUT}/CCLASS.o \
        ${OUT}/FSAGG2.o ${OUT}/GALFACT.o ${OUT}/IALGFACT.o \
        ${OUT}/IBACHIN.o ${OUT}/NORMMA.o ${OUT}/ODERED.o ${OUT}/OMSAGG.o \
        ${OUT}/PERM.o ${OUT}/PERMGRP.o ${OUT}/PRIMES.o \
        ${OUT}/PWFFINTB.o ${OUT}/RDIST.o \
        ${OUT}/SAE.o ${OUT}/SAEFACT.o ${OUT}/SAERFFC.o ${OUT}/SGCF.o \
        ${OUT}/TBAGG.o ${OUT}/TBAGG-.o ${OUT}/VIEW3D.o 

@
\subsection{Layer18}
\begin{verbatim}
list      ALIST   ALAGG TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT
                  BASTYPE KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG
                  ELTAB LSAGG STAGG URAGG RCAGG LNAGG FLAGG ORDSET ELAGG INT
                  LIST ILIST OM INS UFD GCDDOM INTDOM COMRING RING RNG
                  ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                  RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                  OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                  CFCAT REAL CHARZ STEP BOOLEAN STRING CHAR SINT OUTFORM 
                  PRIMARR A1AGG ISTRING
table     EQTBL   TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                  ORDSET
table     GSTBL   TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE EVALAB IEVALAB
                  CLAGG KONVERT IXAGG ELTAGG ELTAB ORDSET
table     HASHTBL TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                  ORDSET
table     INTABL  TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                  ORDSET
d01agents INTFTBL TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
d01Package INTPACK FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                  ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                  MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                  DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                  KONVERT RETRACT RADCAT PATMAB CHARZ DIFRING OM TRANFUN
                  TRIGCAT ATRIG HYPCAT AHYP ELEMFUN LSAGG STAGG URAGG RCAGG
                  HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB 
                  CLAGG FLAGG ELAGG DFLOAT TBAGG KDAGG DIAGG DIOPS BGAGG
                  STRICAT SRAGG A1AGG 
pf        IPF      FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING CHARNZ FINITE STEP DIFRING FAXF XF RETRACT VSPACE
                   CHARZ KONVERT PI NNI INT LIST BOOLEAN OAMONS OCAMON OAMON 
                   OASGP ORDSET TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE
                   EVALAB IEVALAB CLAGG IXAGG ELTAGG ELTAB SINT INS ILIST 
                   OINTDOM ORDRING OAGROUP LINEXP PATMAB CFCAT REAL VECTOR
                   IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG 
files     KAFILE  FILECAT SETCAT BASTYPE KOERCE TBAGG KDAGG DIAGG DIOPS BGAGG
                  HOAGG AGG TYPE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG
                  FNCAT STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG 
                  ISTRING LSAGG STAGG URAGG RCAGG LNAGG FLAGG ORDSET ELAGG OM
                  ILIST STRICAT SRAGG ORDFIN FINITE 
patmatch1 PATRES  SETCAT BASTYPE KOERCE ORDSET ALAGG TBAGG KDAGG DIAGG DIOPS
                  BGAGG AGG TYPE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG
                  ELTAB LSAGG STAGG URAGG RCAGG LNAGG FLAGG ELAGG INT LIST
                  ILIST
table     STBL    SETCAT BASTYPE KOERCE TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG
                  AGG TYPE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                  ORDSET
table     STRTBL  TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                  STRICAT SRAGG A1AGG FLAGG LNAGG ORDSET OM ORDFIN FINITE
table     TABLE   TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                  KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                  ALAGG LSAGG STAGG URAGG RCAGG LNAGG FLAGG ORDSET ELAGG
newdata   TBCMPPK SETCAT BASTYPE KOERCE BOOLEAN NNI INT STRING CHAR SINT
                  OUTFORM LIST PRIMARR A1AGG ISTRING TBAGG KDAGG DIAGG BGAGG
                  HOAGG AGG TYPE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG
                  ELTAB
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
d01Package.spad.pamphlet (INTPACK)
list.spad.pamphlet (ILIST LIST LIST2 LIST3 LIST2MAP ALIST)
pf.spad.pamphlet (IPF PF)
table.spad.pamphlet (HASHTBL INTABL TABLE EQTBL STRTBL GSTBL STBL)
\end{verbatim}

<<layer18>>=
LAYER18=${OUT}/ALIST.o ${OUT}/EQTBL.o ${OUT}/GSTBL.o \
        ${OUT}/HASHTBL.o ${OUT}/INTABL.o ${OUT}/INTFTBL.o ${OUT}/INTPACK.o \
        ${OUT}/IPF.o ${OUT}/KAFILE.o  ${OUT}/PATRES.o \
        ${OUT}/STBL.o ${OUT}/STRTBL.o ${OUT}/TABLE.o \
        ${OUT}/TBCMPPK.o 

@
\subsection{Layer19}
\begin{verbatim}
algfunc   ACF      FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   RADCAT SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ILIST UPOLYC 
                   POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB
                   IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT ELTAB
                   DIFRING DIFEXT STEP LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                   IXAGG ELTAGG CLAGG ELAGG OM BOOLEAN 
acplot    ACPLOT   PPCURVE KOERCE PI NNI INT DFLOAT FPS RNS FIELD EUCDOM
                   PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                   CHARZ BOOLEAN INS OINTDOM DIFRING LINEXP CFCAT STEP QFCAT
                   FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP PATAB
                   FPATMAB TYPE CHARNZ PFECAT LIST ILIST LSAGG STAGG ELAGG
                   FLAGG URAGG OM RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG
                   ELAGG REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG POLYCAT FAMR AMR FRETRCT TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN 
derham    ANTISYM  LALG RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE RETRACT LSAGG STAGG URAGG
                   RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                   ELTAB CLAGG KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST
                   BOOLEAN NNI SINT PI EUCDOM UFD GCDDOM INTDOM ALGEBRA
                   DIFRING ORDRING MODULE RING ABELGRP SYMBOL REF ALIST
any       ANY      SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG ILIST LSAGG
asp       ASP12    FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG 
                   BOOLEAN INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM
asp       ASP27    FMC FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                   CHARZ SINT PI NNI INT SYMBOL REF ALIST LIST STRING CHAR
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG FMTC
asp       ASP28    FMC FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE 
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                   PATMAB CHARZ SINT PI NNI INT SYMBOL REF ALIST LIST STRING
                   CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG FMTC
                   VECTOR
asp       ASP33    FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG 
                   BOOLEAN
asp       ASP49    FORTFN FORTCAT TYPE KOERCE BOOLEAN SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                   ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ ES IEVALAB
                   EVALAB VECTCAT IXAGG HOAGG AGG ELTAGG CLAGG LSAGG STAGG 
                   URAGG RCAGG ELAGG FMTC INS OINTDOM DIFRING LINEXP CFCAT
                   STEP POLYCAT PDRING FAMR AMR CHARNZ FRETRCT FLINEXP
                   PFECAT 
asp       ASP55    FVFUN FORTCAT TYPE KOERCE BOOLEAN SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG ILIST FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ INS
                   OINTDOM DIFRING LINEXP CFCAT STEP OM VECTOR IVECTOR IARRAY1
                   NNI IXAGG LSAGG STAGG URAGG RCAGG HOAGG AGG EVALAB IEVALAB
                   ELTAGG ELTAB CLAGG ES VECTCAT FMTC POLYCAT PDRING FAMR AMR
                   CHARNZ FRETRCT FLINEXP PFECAT
asp       ASP7     FVFUN FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   BOOLEAN FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL 
                   KONVERT RETRACT RADCAT PATMAB CHARZ FMTC INS OINTDOM
                   DIFRING LINEXP CFCAT STEP POLYCAT PDRING FAMR AMR CHARNZ
                   FRETRCT EVALAB IEVALAB FLINEXP PFECAT
asp       ASP78    FVFUN FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   BOOLEAN FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ FMTC INS OINTDOM DIFRING
                   LINEXP CFCAT STEP POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   EVALAB IEVALAB FLINEXP PFECAT
asp       ASP8     FVC FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                   PATMAB CHARZ SYMBOL INT REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG INS OINTDOM 
                   DIFRING LINEXP CFCAT STEP VECTCAT IXAGG HOAGG AGG EVALAB
                   IEVALAB ELTAGG ELTAB CLAGG VECTOR IVECTOR IARRAY1 FMTC NNI
                   OM ILIST
asp       ASP9     FORTFN FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG BOOLEAN FPS RNS FIELD EUCDOM PID GCDDOM INTDOM 
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ FMTC
                   INS OINTDOM DIFRING LINEXP CFCAT STEP POLYCAT PDRING FAMR
                   AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT
routines  ATTRBUT  SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT
                   RETRACT RADCAT PATMAB CHARZ INT LIST ILIST SYMBOL REF ALIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG       
op        BOP      ORDSET SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG STRICAT IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG
                   ELTAB CLAGG KONVERT OM BOOLEAN NNI FSAGG DIAGG DIOPS BGAGG
                   SETAGG FINITE ORDFIN
op        BOP1     SETCAT BASTYPE KOERCE ORDSET SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG NNI BOOLEAN KONVERT
op        COMMONOP BOOLEAN SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG NNI ILIST LSAGG
                   STAGG PI
gaussian  COMPCAT  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   MONOGEN FRAMALG FINRALG ALGEBRA MODULE CHARZ CHARNZ
                   KONVERT FRETRCT RETRACT FLINEXP LINEXP FINITE FIELD EUCDOM
                   PID GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT DIFRING PDRING
                   FFIELDC FPC STEP FEVALAB ELTAB EVALAB IEVALAB FPATMAB TYPE
                   PATMAB PATAB ORDSET TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN RADCAT PFECAT NNI INT PI INS OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP CFCAT REAL BOOLEAN UPOLYC
                   POLYCAT FAMR AMR LIST OM VECTOR IVECTOR IARRAY1 VECTCAT
                   A1AGG FLAGG LNAGG AGG ELTAGG CLAGG SYMBOL REF ALIST STRING
                   CHAR SINT OUTFORM PRIMARR ISTRING SRAGG RNS FPS
draw      DRAW     KONVERT SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG ILIST NNI FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL RETRACT
                   RADCAT PATMAB CHARZ
draw      DRAWCFUN FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL 
                   KONVERT RETRACT RADCAT PATMAB CHARZ SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG ILIST LSAGG STAGG ELAGG URAGG DFLOAT DIFRING
                   OM TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PI PTCAT 
                   VECTCAT IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB
                   CLAGG BOOLEAN 
drawopt   DROPT    SETCAT BASTYPE KOERCE LSAGG STAGG URAGG HOAGG AGG TYPE 
                   EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                   FLAGG ORDSET ELAGG OM INT LIST ILIST INS UFD GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP SYMBOL REF ALIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
drawopt   DROPT0   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON 
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT 
                   PATMAB CHARZ
d01routine D01ANFA NUMINT SETCAT BASTYPE KOERCE NNI INT SYMBOL REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING
                   RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT
                   RADCAT PATMAB CHARZ DIFRING OM TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN PI INS 
d01routine D01ASFA NNI INT SYMBOL REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD
                   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   DIFRING OM TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PI
                   INS DFLOAT
d03agents D03AGNT  FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ DIFRING OM TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN NNI INT INS OINTDOM
                   LINEXP CFCAT STEP SYMBOL REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB IXAGG ELTAGG ELTAB
                   CLAGG ELAGG ILIST DFLOAT PI BOOLEAN 
eigen     EP       GCDDOM INT COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET KONVERT OM PATMAB POLYCAT
                   PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                   FLINEXP LINEXP PFECAT UFD QFCAT FIELD EUCDOM PID DIVRING
                   FEVALAB ELTAB DIFEXT DIFRING PATAB FPATMAB TYPE STEP
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL NNI INT
                   BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG
                   ELTAGG CLAGG FLAGG ELAGG LIST ILIST SINT PI SYMBOL REF ALIST
                   STRING CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG UPOLYC
                   VECTOR IVECTOR IARRAY1 
e04agents E04AGNT  FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL 
                   KONVERT RETRACT RADCAT PATMAB CHARZ DIFRING OM TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN DFLOAT LSAGG STAGG URAGG
                   RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG 
                   ELTAB CLAGG FLAGG ELAGG INT LIST ILIST SINT NNI INS OINTDOM
                   LINEXP CFCAT STEP QFCAT FEVALAB DIFEXT PDRING FLINEXP PATAB
                   FPATMAB CHARNZ PFECAT BOOLEAN SYMBOL REF ALIST STRING CHAR
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG PI VECTOR 
fortpak   FCPAK1   INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM SYMBOL INT
                   REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG 
                   ISTRING SRAGG FLAGG LNAGG
fortran   FEXPR    ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB
                   ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE MODULE BMODULE RMODULE PDRING FMTC INTDOM
                   COMRING ENTIRER BOOLEAN SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE IXAGG ELTAGG ELTAB
                   CLAGG KONVERT ELAGG OM ILIST NNI PATMAB INS UFD GCDDOM 
                   EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP 
                   DIFRING LINEXP CFCAT REAL CHARZ STEP POLYCAT FAMR AMR
                   CHARNZ FRETRCT FLINEXP PFECAT FPS RNS FIELD DIVRING RADCAT
curve     FFCAT    UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB 
                   DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING QFCAT FEVALAB
                   PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP REAL MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC
                   VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG ELTAGG CLAGG INS
                   CFCAT OM 
ffcg      FFCGP    FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC STEP
                   DIFRING NNI INT ORDSET PI SINT PRIMARR SYMBOL REF ALIST
                   LIST STRING CHAR OUTFORM A1AGG ISTRING SRAGG FLAGG LNAGG
                   BOOLEAN OAMONS OCAMON OAMON OASGP ORDSET VECTOR IVECTOR
                   IARRAY1 INS ORDRING ILIST OINTDOM OAGROUP KONVERT LINEXP
                   PATMAB CFCAT REAL 
ffp       FFNBP    FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING SYMBOL INT REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN PI
                   NNI VECTOR IVECTOR IARRAY1 VECTCAT IXAGG HOAGG AGG TYPE
                   EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT ORDSET OAMONS
                   OCAMON OAMON OASGP TBAGG KDAGG DIAGG DIOPS BGAGG UPOLYC
                   POLYCAT PDRING FAMR AMR FRETRCT FLINEXP LINEXP PATMAB
                   PFECAT DIFEXT LSAGG STAGG URAGG RCAGG ELAGG OM ILIST INS
                   OINTDOM ORDRING OAGROUP CFCAT REAL 
ffp       FFP      FAXF XF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RETRACT VSPACE CHARZ FPC CHARNZ FINITE FFIELDC
                   STEP DIFRING SYMBOL INT REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG NNI ORDSET
                   PI BOOLEAN OAMONS OCAMON OAMON OASGP ORDSET TBAGG KDAGG
                   DIAGG DIOPS BGAGG HOAGG AGG TYPE EVALAB IEVALAB CLAGG 
                   KONVERT IXAGG ELTAGG ELTAB VECTOR IVECTOR IARRAY1 VECTCAT
                   ILIST LSAGG STAGG ELAGG INS OINTDOM ORDRING OAGROUP LINEXP
                   PATMAB CFCAT REAL
float     FLOAT    FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ DIFRING OM TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PI NNI INT INS SINT 
                   BOOLEAN OINTDOM LINEXP CFCAT STEP STRICAT SRAGG A1AGG FLAGG
                   LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG
                   STRING CHAR OUTFORM LIST PRIMARR ISTRING SYMBOL REF ALIST
                   DFLOAT
fparfrac  FPARFRAC SETCAT BASTYPE KOERCE KONVERT UPOLYC POLYCAT PDRING RING 
                   RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   FAMR AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP
                   EUCDOM PID FIELD DIVRING SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   NNI QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL PI OM ILIST LSAGG STAGG DPOLCAT INS
                   CFCAT
fr        FR       INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER DIFEXT DIFRING PDRING FEVALAB ELTAB EVALAB
                   IEVALAB FRETRCT RETRACT GCDDOM REAL KONVERT UFD INT LIST
                   ILIST SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG ORDSET BOOLEAN LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE IXAGG ELTAGG CLAGG ELAGG OM NNI
                   INS EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   LINEXP PATMAB CFCAT CHARZ STEP DFLOAT
naalgc    FRNAALG  FINAALG NAALG NARNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                   BASTYPE KOERCE MONAD MODULE BMODULE LMODULE RMODULE COMRING
                   RING RNG SGROUP MONOID FIELD EUCDOM PID GCDDOM INTDOM
                   ALGEBRA ENTIRER UFD DIVRING SINT PI NNI INT STRING CHAR
                   OUTFORM LIST PRIMARR A1AGG ISTRING SYMBOL REF ALIST SRAGG
                   FLAGG LNAGG POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                   RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB
                   PFECAT VECTOR IVECTOR IARRAY1 VECTCAT IXAGG HOAGG AGG TYPE
                   ELTAGG ELTAB CLAGG ILIST INS OINTDOM ORDRING OAGROUP OCAMON
                   OAMON OASGP DIFRING CFCAT REAL STEP OM
fspace    FS       ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID SGROUP
                   GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE
                   PDRING FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE
                   RMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD
                   DIVRING SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG STAGG ELAGG
                   URAGG RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG OM CACHSET
                   NNI POLYCAT FAMR AMR PFECAT INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING CFCAT REAL STEP FPS RNS RADCAT
                   UPOLYC DIFEXT QFCAT FEVALAB
fortran   FST      KOERCE SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN
variable  FUNCTION SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN
gdpoly    GDMP     POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE 
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD DIRPCAT IXAGG HOAGG AGG TYPE ELTAGG
                   ELTAB DIFEXT DIFRING FINITE ORDRING OAGROUP OCAMON OAMON 
                   OASGP OAMONS VSPACE FIELD EUCDOM PID DIVRING ORDFIN LSAGG
                   STAGG URAGG RCAGG LNAGG CLAGG FLAGG ELAGG OM INT LIST ILIST
                   NNI VECTCAT A1AGG VECTOR IVECTOR IARRAY1 SINT PI BOOLEAN
                   FPS RNS REAL RADCAT SYMBOL REF ALIST STRING CHAR OUTFORM
                   PRIMARR ISTRING SRAGG INS OINTDOM CFCAT STEP UPOLYC
expr      HACKPI   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   CHARZ RETRACT REAL KONVERT INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET DIFRING LINEXP PATMAB CFCAT STEP
                   UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB
                   FLINEXP PFECAT ELTAB DIFEXT SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   NNI DFLOAT OM BOOLEAN FPS RNS RADCAT
ideal     IDEAL    SETCAT BASTYPE KOERCE FIELD EUCDOM PID GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING OAMONS
                   OCAMON OAMON OASGP ORDSET POLYCAT PDRING FAMR AMR CHARZ
                   CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                   PATMAB PFECAT NNI INT LIST ILIST LSAGG STAGG URAGG RCAGG
                   HOAGG AGG TYPE LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM
                   SINT SYMBOL REF ALIST STRING CHAR OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG DIRPCAT DIFEXT DIFRING FINITE ORDRING OAGROUP
                   VSPACE ORDFIN VECTOR IVECTOR IARRAY1 VECTCAT 
mkfunc    INFORM   SEXCAT SETCAT BASTYPE KOERCE KONVERT ORDSET INS UFD GCDDOM
                   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM
                   PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING 
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP FPS RNS FIELD
                   DIVRING RADCAT INT SYMBOL REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG DFLOAT
                   LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB IXAGG
                   ELTAGG ELTAB CLAGG ELAGG OM ILIST NNI STRICAT 
mkfunc    INFORM1  TYPE SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
newdata   IPRNTPK  SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG
intaux    IR       MODULE BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE RMODULE RETRACT INS UFD GCDDOM INTDOM COMRING
                   RING RNG SGROUP MONOID ALGEBRA ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FIELD DIVRING
                   FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP PATAB
                   FPATMAB TYPE CHARNZ PFECAT SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   ILIST NNI BOOLEAN LFCAT PRIMCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN LSAGG STAGG ELAGG URAGG RCAGG IXAGG PI
                   HOAGG AGG ELTAGG CLAGG OM 
sups      ISUPS    UPSCAT PSCAT AMR RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER ELTAB
                   DIFRING PDRING INS UFD GCDDOM EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET KONVERT RETRACT LINEXP
                   PATMAB CFCAT REAL STEP BOOLEAN INT OM SINT NNI LIST ILIST
                   LSAGG STAGG ELAGG FLAGG URAGG TRANFUN TRIGCAT ATRIG HYPCAT
                   ATRIG HYPCAT AHYP ELEMFUN STRING CHAR OUTFORM PRIMARR A1AGG
                   ISTRING SYMBOL REF ALIST SRAGG LNAGG RCAGG HOAGG AGG TYPE
                   EVALAB IEVALAB IXAGG ELTAGG CLAGG ELAGG FIELD DIVRING
kl        KERNEL   CACHSET ORDSET SETCAT BASTYPE KOERCE PATAB KONVERT INT NNI
                   LIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB
                   LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM ILIST SYMBOL
                   REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG INS UFD GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                   CFCAT REAL CHARZ STEP FPS RNS FIELD DIVRING RADCAT
files     LIB      TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                   KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG STRICAT ORDSET OM ORDFIN
                   FINITE
lmdict    LMDICT   MDAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE
                   EVALAB IEVALAB CLAGG KONVERT LSAGG STAGG URAGG RCAGG LNAGG
                   IXAGG ELTAGG ELTAB FLAGG ORDSET ELAGG OM INT SYMBOL REF
                   ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   NNI BOOLEAN
lodo      LODOOPS  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   LODOCAT OREPCAT FRETRCT RETRACT ELTAB SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG VECTCAT IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                   ELTAGG CLAGG KONVERT ORDSET VECTOR IVECTOR IARRAY1 PI INS
                   DPOLCAT POLYCAT PDRING FAMR AMR CHARZ CHARNZ FLINEXP LINEXP
                   PATMAB PFECAT DIFEXT DIFRING ILIST LSAGG BOOLEAN
matrix    MATRIX   MATCAT ARR2CAT HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB KONVERT VECTCAT A1AGG FLAGG LNAGG IXAGG ELTAGG
                   ELTAB CLAGG ORDSET RING RNG ABELGRP CABMON ABELMON ABELSG
                   SGROUP MONOID LMODULE INT PRIMARR NNI EUCDOM PID GCDDOM
                   INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE ENTIRER FIELD
                   UFD DIVRING INS VECTOR IVECTOR IARRAY1 OINTDOM ORDRING 
                   OAGROUP OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB
                   CFCAT REAL CHARZ STEP OM SYMBOL REF ALIST LIST STRING CHAR
                   SINT OUTFORM ISTRING SRAGG LSAGG STAGG URAGG RCAGG ELAGG
mkfunc    MKFLCFN  KONVERT SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ILIST LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB
                   IEVALAB IXAGG ELTAGG ELTAB CLAGG ORDSET ELAGG OM STRICAT
                   DFLOAT
mset      MSET     MSETAGG MDAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE 
                   KOERCE EVALAB IEVALAB CLAGG KONVERT SETAGG INS UFD GCDDOM
                   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE 
                   ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ
                   STEP INT SYMBOL REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ILIST LSAGG STAGG
                   URAGG RCAGG IXAGG ELTAGG ELTAB ELAGG OM NNI BOOLEAN
fortran   M3D      HOAGG AGG TYPE SETCAT BASTYPE KOERCE EVALAB IEVALAB SYMBOL
                   INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG NNI VECTOR IVECTOR IARRAY1 PI 
                   IXAGG ELTAGG ELTAB CLAGG KONVERT ORDSET VECTCAT RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE LSAGG
                   STAGG URAGG RCAGG ELAGG OM ILIST 
c02       NAGC02   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM 
                   PRIMARR A1AGG ISTRING STAGG FLAGG LNAGG FPS RNS FIELD
                   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT
                   RADCAT PATMAB CHARZ
c05       NAGC05   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD
                   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT
                   RADCAT PATMAB CHARZ
c06       NAGC06   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM 
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD
                   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT
                   RADCAT PATMAB CHARZ
d03       NAGD03   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                   PATMAB CHARZ
e01       NAGE01   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT 
                   PATMAB CHARZ INS OINTDOM DIFRING LINEXP CFCAT STEP
e02       NAGE02   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   INS OINTDOM DIFRING LINEXP CFCAT STEP
e04       NAGE04   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON 
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                   CHARZ INS OINTDOM DIFRING LINEXP CFCAT STEP
f07       NAGF07   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   INS OINTDOM DIFRING LINEXP CFCAT STEP
s         NAGS     SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON 
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
fortpak   NAGSP    SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN FPS RNS FIELD EUCDOM
                   PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                   PATMAB CHARZ INT OINTDOM DIFRING LINEXP CFCAT STEP
numeigen  NREP     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET SYMBOL INT REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG INS OINTDOM DIFRING KONVERT RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FEVALAB ELTAB 
                   EVALAB IEVALAB DIFEXT PDRING FLINEXP PATAB FPATMAB TYPE
                   CHARNZ PFECAT UPOLYC POLYCAT FAMR AMR FRETRCT
outform   NUMFMT   STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG IXAGG STRICAT HOAGG AGG TYPE SETCAT
                   BASTYPE KOERCE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
                   ORDSET OM BOOLEAN SYMBOL REF ALIST INS UFD GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP PI NNI 
oct       OC       COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE FRETRCT RETRACT FEVALAB ELTAB EVALAB IEVALAB FINITE 
                   ORDSET KONVERT CHARZ CHARNZ BOOLEAN SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD
                   DIVRING RNS ORDRING OAGROUP OCAMON OAMON OASGP REAL RADCAT
                   PATMAB INS OINTDOM DIFRING LINEXP CFCAT STEP
d02Package ODEPACK FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ LSAGG STAGG URAGG RCAGG
                   HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB
                   CLAGG FLAGG ELAGG OM INT LIST ILIST INS STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG TBAGG KDAGG DIAGG DIOPS
                   BGAGG NNI SYMBOL REF ALIST DFLOAT DIFRING TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN PI VECTCAT A1AGG VECTOR IVECTOR
                   IARRAY1 
oderf     ODERAT   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL LSAGG STAGG URAGG RCAGG HOAGG AGG
                   IXAGG ELTAGG CLAGG ELAGG OM ILIST NNI INS CFCAT VECTOR
                   IVECTOR IARRAY1 VECTCAT A1AGG PI BOOLEAN
omerror   OMERR    SETCAT BASTYPE KOERCE LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                   FLAGG ORDSET ELAGG OM INT LIST ILIST NNI SYMBOL REF ALIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG PI
omerror   OMERRK   SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
e04Package OPTPACK FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ STRING CHAR SINT OUTFORM
                   LIST INT PRIMARR A1AGG ISTRING SRAGG ILIST TBAGG KDAGG
                   DIAGG DIOPS BGAGG HOAGG AGG TYPE EVALAB IEVALAB CLAGG IXAGG
                   ELTAGG ELTAB NNI SYMBOL REF ALIST FLAGG LNAGG LSAGG STAGG
                   ELAGG INS DFLOAT PI RCAGG OM DIFRING TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN 
fnla      OSI      ORDSET SETCAT BASTYPE KOERCE INT SYMBOL REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG
variable  OVAR     ORDFIN ORDSET SETCAT BASTYPE KOERCE FINITE KONVERT FPS RNS
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP REAL RETRACT RADCAT PATMAB CHARZ INS OINTDOM
                   DIFRING LINEXP CFCAT STEP LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                   ELAGG OM INT LIST ILIST SYMBOL REF ALIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG NNI
pattern   PATTERN  SETCAT BASTYPE KOERCE RETRACT SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG BOOLEAN NNI ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB IXAGG ELTAGG ELTAB CLAGG KONVERT ORDSET
                   ELAGG OM MONOID SGROUP ABELMON ABELSG PI
patmatch1 PMKERNEL SETCAT BASTYPE KOERCE ORDSET RETRACT KONVERT PATMAB LSAGG
                   STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                   ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST NNI SYMBOL
                   REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING 
                   SRAGG MONOID SGROUP ABELMON ABELSG 
patmatch1 PMSYM    SETCAT BASTYPE KOERCE ORDSET SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG
multpoly  POLY     POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE 
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   FPS RNS FIELD EUCDOM PID DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP REAL RADCAT INS OINTDOM DIFRING CFCAT STEP
                   UPOLYC ELTAB DIFEXT
primelt   PRIMELT  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   CHARZ SINT NNI INT INS LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG KONVERT
                   FLAGG ORDSET ELAGG OM PATMAB LIST ILIST SYMBOL REF ALIST
                   STRING CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG POLYCAT
                   PDRING FAMR AMR CHARNZ FRETRCT RETRACT FLINEXP LINEXP PFECAT
qalgset   QALGSET2 SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG ILIST INS UFD GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                   DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                   QFCAT FIELD DIVRING FEVALAB ELTAB EVALAB IEVALAB DIFEXT
                   PDRING FLINEXP PATAB FPATMAB TYPE CHARNZ PFECAT DIRPCAT
                   IXAGG HOAGG AGG ELTAGG FRETRCT FINITE OAMONS VSPACE 
                   POLYCAT FAMR AMR LSAGG STAGG URAGG RCAGG CLAGG OM BOOLEAN
alql      QEQUAT   KOERCE SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
quat      QUATCAT  COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE FRETRCT RETRACT DIFEXT DIFRING PDRING
                   FEVALAB ELTAB EVALAB IEVALAB FLINEXP LINEXP ENTIRER ORDSET
                   DIVRING KONVERT CHARZ CHARNZ FIELD EUCDOM PID GCDDOM INTDOM
                   UFD BOOLEAN SYMBOL INT REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG RNS ORDRING
                   OAGROUP OCAMON OAMON OASGP REAL RADCAT PATMAB INS OINTDOM
                   CFCAT STEP 
reclos    RECLOS   RCFIELD CHARZ RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET COMRING BMODULE RMODULE FIELD EUCDOM PID
                   GCDDOM INTDOM ALGEBRA MODULE ENTIRER UFD DIVRING FRETRCT
                   RETRACT RADCAT REAL KONVERT PI NNI INT SYMBOL REF ALIST 
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG INS OINTDOM DIFRING LINEXP PATMAB CFCAT STEP
                   ILIST LSAGG STAGG ELAGG URAGG RCAGG IXAGG CLAGG HOAGG AGG
                   ELTAGG TYPE EVALAB IEVALAB ELTAB OM BOOLEAN QFCAT FEVALAB
                   DIFEXT PDRING FLINEXP PATAB FPATMAB CHARNZ PFECAT
regset    REP1     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE INT SINT INS UFD GCDDOM INTDOM COMRING
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM LIST ILIST
                   LSAGG STAGG ELAGG FLAGG URAGG LNAGG NNI VECTOR IVECTOR
                   IARRAY1 VECTCAT A1AGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                   ELTAGG ELTAB CLAGG PI BOOLEAN RCAGG POLYCAT PDRING FAMR AMR
                   CHARNZ FRETRCT FLINEXP PFECAT SYMBOL REF ALIST STRING CHAR
                   OUTFORM PRIMARR ISTRING SRAGG
fortran   RESULT   TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                   KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB 
                   ORDSET SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN LSAGG STAGG
                   URAGG RCAGG ELAGG OM ILIST
algfact   RFFACT   UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                   DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING SYMBOL INT
                   REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   STRING SRAGG FLAGG LNAGG INS OINTDOM ORDRING OAGROUP 
                   OCAMON OAMON OASGP CFCAT REAL QFCAT FEVALAB PATAB FPATMAB
                   TYPE
matrix    RMATRIX  RMATCAT BMODULE LMODULE ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE RMODULE HOAGG AGG TYPE EVALAB IEVALAB MODULE
                   COMRING RING RNG SGROUP MONOID VSPACE KONVERT FIELD EUCDOM
                   PID GCDDOM INTDOM ALGEBRA ENTIRER UFD DIVRING NNI INT LSAGG
                   STAGG URAGG RCAGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG 
                   ORDSET ELAGG OM LIST ILIST SYMBOL REF ALIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG 
integer   ROMAN    INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP SYMBOL INT REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG
routines  ROUTINE  TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                   KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG ELTAGG ELTAB
                   ORDSET STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG
                   ISTRING BOOLEAN ILIST LSAGG STAGG PI NNI SYMBOL REF ALIST
                   SRAGG FLAGG LNAGG URAGG RCAGG ELAGG OM 
newpoly   RPOLCAT  POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD OAMONS OCAMON OAMON OASGP NNI INT
                   LIST BOOLEAN ILIST EUCDOM PID FIELD DIVRING FINITE SINT OM
                   LSAGG STAGG ELAGG FLAGG INS OINTDOM ORDRING OAGROUP DIFRING
                   CFCAT REAL STEP QFCAT FEVALAB ELTAB DIFEXT PATAB FPATMAB
                   TYPE RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG STRING CHAR
                   OUTFORM PRIMARR A1AGG ISTRING SYMBOL REF ALIST SRAGG STRICAT
                   FPS RNS RADCAT
variable  RULECOLD SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN
misc      SAOS     ORDSET SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG
seg       SEGBIND  TYPE SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   BOOLEAN
sets      SET      FSAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE SETCAT BASTYPE
                   KOERCE EVALAB IEVALAB CLAGG KONVERT SETAGG FINITE A1AGG
                   FLAGG LNAGG IXAGG ELTAGG ELTAB ORDSET ELAGG INS UFD GCDDOM
                   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM
                   PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM SYMBOL INT
                   REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR ISTRING 
                   SRAGG LSAGG STAGG URAGG RCAGG ILIST NNI BOOLEAN
out       SPECOUT  SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG
matrix    SQMATRIX SMATCAT DIFEXT RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE DIFRING PDRING BMODULE
                   RMODULE RMATCAT HOAGG AGG TYPE EVALAB IEVALAB MODULE COMRING
                   FRETRCT RETRACT FLINEXP LINEXP ALGEBRA KONVERT NNI INT
                   LSAGG STAGG URAGG RCAGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                   ORDSET ELAGG OM LIST ILIST EUCDOM PID GCDDOM INTDOM ENTIRER
                   FIELD UFD DIVRING SYMBOL REF ALIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP PATMAB CFCAT REAL CHARZ STEP
fortran   SWITCH   KOERCE INT LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE SETCAT BASTYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB
                   CLAGG KONVERT FLAGG ORDSET ELAGG OM INS UFD GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP 
                   DIFRING RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP NNI
                   SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG
forttyp   SYMS     KOERCE ORDSET SETCAT BASTYPE SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG ILIST
forttyp   SYMTAB   KOERCE ORDSET SETCAT BASTYPE INS UFD GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID 
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP INT LIST ILIST
                   OM SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG LSAGG STAGG ELAGG URAGG RCAGG 
                   IXAGG CLAGG HOAGG AGG ELTAGG 
syssolp   SYSSOLP  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                   RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB
                   GCDDOM PFECAT UFD QFCAT FIELD EUCDOM PID DIVRING FEVALAB
                   ELTAB DIFEXT DIFRING PATAB FPATMAB TYPE STEP OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP REAL OM INT LIST ILIST LSAGG 
                   STAGG ELAGG FLAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG
                   CLAGG NNI SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG BOOLEAN DIRPCAT FINITE OAMONS VSPACE 
                   ORDFIN VECTOR IVECTOR IARRAY1 VECTCAT 
pscat     UTSCAT   OAMONS OCAMON OAMON OASGP ORDSET SETCAT BASTYPE KOERCE
                   ABELMON ABELSG CABMON UPSCAT PSCAT AMR RING RNG ABELGRP
                   SGROUP MONOID LMODULE BMODULE RMODULE COMRING ALGEBRA MODULE
                   CHARZ CHARNZ INTDOM ENTIRER ELTAB DIFRING PDRING RADCAT
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN BOOLEAN INT 
                   SYMBOL REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG ILIST NNI LSAGG STAGG URAGG
                   RCAGG HOAGG AGG TYPE EVALAB IEVALAB IXAGG ELTAGG CLAGG
                   KONVERT ELAGG OM FIELD EUCDOM PID GCDDOM UFD DIVRING INS
                   OINTDOM ORDRING OAGROUP RETRACT LINEXP PATMAB CFCAT REAL
                   STEP
variable  VARIABLE SETCAT BASTYPE KOERCE SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN
intclos   WFFINTBS FFIELDC FPC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING CHARNZ FINITE STEP DIFRING UPOLYC POLYCAT PDRING
                   FAMR AMR CHARZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET KONVERT PATMAB PFECAT ELTAB DIFEXT FRAMALG FINRALG
                   INT LIST ILIST SINT PI NNI VECTOR IVECTOR IARRAY1 VECTCAT
                   A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG MONOGEN
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
acplot.spad.pamphlet (REALSOLV ACPLOT)
alql.spad.pamphlet (DLIST ICARD DBASE QEQUAT MTHING OPQUERY)
any.spad.pamphlet (NONE NONE1 ANY ANY1)
c02.spad.pamphlet (NAGC02)
c05.spad.pamphlet (NAGC05)
c06.spad.pamphlet (NAGC06)
d01routine.spad.pamphlet (D01AJFA D01AKFA D01AMFA D01APFA D01AQFA D01ALFA 
                          D01ANFA D01ASFA D01GBFA D01FCFA)
d02Package.spad.pamphlet (ODEPACK)
d03agents.spad.pamphlet (D03AGNT)
d03Package.spad.pamphlet (PDEPACK)
drawopt.spad.pamphlet (DROPT DROPT1 DROPT0)
eigen.spad.pamphlet (EP CHARPOL)
e01.spad.pamphlet (NAGE01)
e02.spad.pamphlet (NAGE02)
e04.spad.pamphlet (NAGE04)
e04agents.spad.pamphlet (E04AGNT)
e04Package.spad.pamphlet (OPTPACK)
ffcg.spad.pamphlet (FFCGP FFCGX FFCG)
ffp.spad.pamphlet (FFP FFX IFF FF)
files.spad.pamphlet (FILECAT FILE TEXTFILE BINFILE KAFILE LIB)
float.spad.pamphlet (FLOAT)
fnla.spad.pamphlet (OSI COMM HB FNLA)
fortpak.spad.pamphlet (FCPAK1 NAGSP FORT FOP TEMUTL MCALCFN)
forttyp.spad.pamphlet (FST FT SYMTAB SYMS)
fparfrac.spad.pamphlet (FPARFRAC)
fr.spad.pamphlet (FR FRUTIL FR2)
f07.spad.pamphlet (NAGF07)
gdpoly.spad.pamphlet (GDMP DMP HDMP)
ideal.spad.pamphlet (IDEAL)
intaux.spad.pamphlet (IR IR2)
intclos.spad.pamphlet (TRIMAT IBATOOL FFINTBAS WFFINTBS NFINTBAS)
integer.spad.pamphlet (INTSLPE INT NNI PI ROMAN)
kl.spad.pamphlet (CACHSET SCACHE MKCHSET KERNEL KERNEL2)
lmdict.spad.pamphlet (LMDICT)
matrix.spad.pamphlet (IMATRIX MATRIX RMATRIX SQMATRIX)
misc.spad.pamphlet (SAOS)
mkfunc.spad.pamphlet (INFORM INFORM1 MKFUNC MKUCFUNC MKBCFUNC MKFLCFN)
modgcd.spad.pamphlet (INMODGCD)
mset.spad.pamphlet (MSET)
multpoly.spad.pamphlet (POLY POLY2 MPOLY SMP INDE)
naalgc.spad.pamphlet (MONAD MONADWU NARNG NASRING NAALG FINAALG FRNAALG)
newdata.spad.pamphlet (IPRNTPK TBCMPPK SPLNODE SPLTREE)
omerror.spad.pamphlet (OMERRK OMERR)
op.spad.pamphlet (BOP BOP1 COMMONOP)
out.spad.pamphlet (OUT SPECOUT DISPLAY)
outform.spad.pamphlet (NUMFMT OUTFORM)
patmatch1.spad.pamphlet (PATRES PATRES2 PATLRES PATMAB FPATMAB PMSYM PMKERNEL
                         PMDOWN PMTOOLS PMLSAGG)
pattern.spad.pamphlet (PATTERN PATTERN1 PATTERN2 PATAB)
pscat.spad.pamphlet (PSCAT UPSCAT UTSCAT ULSCAT UPXSCAT MTSCAT)
qalgset.spad.pamphlet (QALGSET QALGSET2)
reclos.spad.pamphlet (POLUTIL RRCC RCFIELD ROIRC RECLOS)
rep1.spad.pamphlet (REP1)
routines.spad.pamphlet (ROUTINE ATTRBUT)
s.spad.pamphlet (NAGS)
seg.spad.pamphlet (SEGCAT SEGXCAT SEG SEG2 SEGBIND SETBIND2 UNISEG UNISEG2
                   INCRMAPS)
sets.spad.pamphlet (SET)
sups.spad.pamphlet (ISUPS)
syssolp.spad.pamphlet (SYSSOLP)
variable.spad.pamphlet (OVAR VARIABLE RULECOLD FUNCTION ANON)
\end{verbatim}

<<layer19>>=
LAYER19=${OUT}/ACF.o ${OUT}/ACF-.o ${OUT}/ACPLOT.o ${OUT}/ANTISYM.o \
        ${OUT}/ANY.o \
        ${OUT}/ASP12.o ${OUT}/ASP27.o ${OUT}/ASP28.o ${OUT}/ASP33.o \
        ${OUT}/ASP49.o ${OUT}/ASP55.o ${OUT}/ASP7.o ${OUT}/ASP78.o \
        ${OUT}/ASP8.o ${OUT}/ASP9.o ${OUT}/ATTRBUT.o \
        ${OUT}/BOP.o ${OUT}/BOP1.o ${OUT}/COMMONOP.o \
        ${OUT}/COMPCAT.o ${OUT}/COMPCAT-.o ${OUT}/DRAW.o ${OUT}/DRAWCFUN.o \
        ${OUT}/DROPT.o ${OUT}/DROPT0.o ${OUT}/D01ANFA.o \
        ${OUT}/D01ASFA.o ${OUT}/D03AGNT.o ${OUT}/EP.o ${OUT}/E04AGNT.o \
        ${OUT}/FCPAK1.o ${OUT}/FEXPR.o \
        ${OUT}/FFCAT.o ${OUT}/FFCAT-.o ${OUT}/FFCGP.o ${OUT}/FFNBP.o \
        ${OUT}/FFP.o ${OUT}/FLOAT.o ${OUT}/FPARFRAC.o ${OUT}/FR.o \
        ${OUT}/FRNAALG.o ${OUT}/FRNAALG-.o \
        ${OUT}/FS.o ${OUT}/FS-.o ${OUT}/FST.o ${OUT}/FUNCTION.o \
        ${OUT}/GDMP.o \
        ${OUT}/HACKPI.o ${OUT}/IDEAL.o ${OUT}/INFORM.o ${OUT}/INFORM1.o \
        ${OUT}/IPRNTPK.o ${OUT}/IR.o ${OUT}/ISUPS.o ${OUT}/KERNEL.o \
        ${OUT}/LIB.o ${OUT}/LMDICT.o ${OUT}/LODOOPS.o ${OUT}/MATRIX.o \
        ${OUT}/MKFLCFN.o ${OUT}/MSET.o ${OUT}/M3D.o \
        ${OUT}/NAGC02.o ${OUT}/NAGC05.o ${OUT}/NAGC06.o ${OUT}/NAGD03.o \
        ${OUT}/NAGE01.o ${OUT}/NAGE02.o ${OUT}/NAGE04.o ${OUT}/NAGF07.o \
        ${OUT}/NAGS.o \
        ${OUT}/NAGSP.o ${OUT}/NREP.o ${OUT}/NUMFMT.o ${OUT}/OC.o ${OUT}/OC-.o \
        ${OUT}/ODEPACK.o ${OUT}/ODERAT.o ${OUT}/OMERR.o ${OUT}/OMERRK.o \
        ${OUT}/OPTPACK.o ${OUT}/OSI.o ${OUT}/PATTERN.o ${OUT}/OVAR.o \
        ${OUT}/PMKERNEL.o \
        ${OUT}/PMSYM.o ${OUT}/POLY.o ${OUT}/PRIMELT.o ${OUT}/QALGSET2.o \
        ${OUT}/QEQUAT.o ${OUT}/RECLOS.o ${OUT}/REP1.o ${OUT}/RESULT.o \
        ${OUT}/QUATCAT.o ${OUT}/QUATCAT-.o \
        ${OUT}/RFFACT.o ${OUT}/RMATRIX.o ${OUT}/ROMAN.o ${OUT}/ROUTINE.o \
        ${OUT}/RPOLCAT.o ${OUT}/RPOLCAT-.o ${OUT}/RULECOLD.o \
        ${OUT}/SAOS.o ${OUT}/SEGBIND.o ${OUT}/SET.o ${OUT}/SPECOUT.o \
        ${OUT}/SQMATRIX.o \
        ${OUT}/SWITCH.o ${OUT}/SYMS.o ${OUT}/SYMTAB.o ${OUT}/SYSSOLP.o \
        ${OUT}/UTSCAT.o ${OUT}/UTSCAT-.o ${OUT}/VARIABLE.o ${OUT}/WFFINTBS.o 


@
\subsection{Layer20}
\begin{verbatim}
algfunc   ACFS     ACF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RADCAT FS ES ORDSET RETRACT IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARZ CHARNZ INT LIST ILIST UPOLYC POLYCAT FAMR
                   AMR PFECAT ELTAB DIFRING DIFEXT STEP NNI
algfunc   AF       ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER FS ES RETRACT
                   IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT
                   GROUP PDRING FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM
                   PID GCDDOM UFD DIVRING SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG ILIST LSAGG STAGG ELAGG URAGG UPOLYC POLYCAT FAMR
                   AMR PFECAT ELTAB DIFRING DIFEXT STEP NNI ACF RADCAT
                   BOOLEAN CACHSET INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP CFCAT REAL
algfact   ALGFACT  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB 
                   DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING INT LIST 
                   ILIST LSAGG STAGG ES URAGG RCAGG HOAGG AGG TYPE LNAGG
                   IXAGG ELTAGG CLAGG FLAGG ELAGG OM CACHSET PATAB INS
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL
                   QFCAT FEVALAB FPATMAB ACF RADCAT NNI BOOLEAN MONOGEN
                   FRAMALG FINRALG FINITE FFIELDC FPC 
curve     ALGFF    UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB
                   DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING FFCAT MONOGEN
                   FRAMALG FINRALG FINITE FFIELDC FPC QFCAT FEVALAB PATAB
                   FPATMAB TYPE OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   REAL VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG ELTAGG CLAGG
                   INS CFCAT OM 
manip     ALGMANIP INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER FIELD EUCDOM PID GCDDOM UFD DIVRING
                   ES ORDSET RETRACT IEVALAB EVALAB SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG ILIST LSAGG CACHSET UPOLYC POLYCAT PDRING FAMR AMR
                   CHARZ CHARNZ FRETRCT FLINEXP LINEXP KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP STAGG ELAGG URAGG RCAGG HOAGG AGG
                   TYPE IXAGG ELTAGG CLAGG OM PATAB BOOLEAN FS FPATMAB GROUP
                   RADCAT INS NNI ORDRING OINTDOM OAGROUP OCAMON OAMON OASGP
                   CFCAT REAL
multfact  ALGMFACT ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                   ABELMON ABELSG CABMON POLYCAT PDRING RING RNG ABELGRP
                   SGROUP MONOID LMODULE FAMR AMR BMODULE RMODULE COMRING
                   ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT
                   UFD ES ACF FIELD EUCDOM PID DIVRING RADCAT UPOLYC ELTAB
                   DIFRING DIFEXT STEP REAL
naalg     ALGPKG   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER FRNAALG FINAALG NAALG NARNG MONAD PI NNI INT
                   SINT VECTOR IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG
                   HOAGG AGG TYPE EVALAB IEVALAB ELTAGG ELTAB CLAGG KONVERT
                   ORDSET INS UFD GCDDOM EUCDOM PID OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING RETRACT LINEXP PATMAB CFCAT REAL
                   CHARZ OM BOOLEAN LIST ILIST
naalg     ALGSC    FRNAALG FINAALG NAALG NARNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE MONAD MODULE BMODULE LMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG SGROUP 
                   MONOID ALGEBRA ENTIRER UFD DIVRING SMATCAT DIFEXT DIFRING
                   PDRING RMATCAT HOAGG AGG TYPE EVALAB IEVALAB FRETRCT RETRACT
                   FLINEXP LINEXP INT VECTOR INS OINTDOM ORDRING OAGROUP 
                   OCAMON OAMON OASGP ORDSET KONVERT PATMAB CFCAT REAL CHARZ
                   STEP OM IVECTOR IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG
                   CLAGG ELTAGG SINT PI NNI VECTCAT ELTAB LIST ILIST LSAGG
                   STAGG SYMBOL REF ALIST STRING CHAR OUTFORM PRIMARR ISTRING
                   SRAGG URAGG RCAGG ELAGG BOOLEAN POLYCAT FAMR AMR CHARNZ
                   PFECAT
constant  AN       ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB ACF
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING RADCAT LINEXP REAL
                   KONVERT CHARZ DIFRING INS OINTDOM ORDRING OAGROUP OCAMON 
                   OAMON OASGP PATMAB CFCAT STEP QFCAT FEVALAB ELTAB DIFEXT
                   PDRING FLINEXP PATAB FPATMAB TYPE CHARNZ PFECAT FPS RNS
                   CACHSET 
rule      APPRULE  SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON ABELMON ABELSG
                   SGROUP MONOID LMODULE PATMAB ORDSET KONVERT FS ES RETRACT
                   IEVALAB EVALAB PATAB FPATMAB TYPE FRETRCT GROUP PDRING 
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                   INT LIST ILIST PI NNI SINT LSAGG STAGG URAGG RCAGG HOAGG
                   AGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INS
asp       ASP19    FVFUN FORTCAT TYPE KOERCE BOOLEAN SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG ILIST FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                   BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   FS ES IEVALAB EVALAB PATAB FPATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARNZ VECTCAT IXAGG HOAGG AGG ELTAGG ELTAB
                   CLAGG INS OINTDOM DIFRING CFCAT STEP FMTC NNI VECTOR
                   IVECTOR IARRAY1 OM LSAGG STAGG URAGG RCAGG ELAGG PI
                   POLYCAT FAMR AMR PFECAT
asp       ASP20    FMFUN FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM
                   PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE 
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRCT RADCAT
                   PATMAB CHARZ ES IEVALAB EVALAB SINT PI NNI INT SYMBOL REF
                   ALIST LIST STRING CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG FMTC INS OUTFORM DIFRING LINEXP CFCAT STEP
                   POLYCAT PDRING FAMR AMR CHARNZ FRETRCT FLINEXP PFECAT
                   QFCAT FEVALAB ELTAB DIFEXT PATAB FPATMAB VECTCAT IXAGG
                   HOAGG AGG ELTAGG CLAGG FS GROUP
asp       ASP30    FMC FORTCAT TYPE KOERCE BOOLEAN FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                   PATMAB CHARZ INS OINTDOM DIFRING LINEXP CFCAT STEP SYMBOL
                   INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG OM
asp       ASP31    FVFUN FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG BOOLEAN FPS RNS FIELD EUCDOM PID GCDDOM INTDOM 
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ FS
                   ES IEVALAB EVALAB PATAB FPATMAB FRETRCT GROUP PDRING 
                   FLINEXP LINEXP CHARNZ VECTCAT IXAGG HOAGG AGG ELTAGG ELTAB
                   CLAGG NNI ILIST VECTOR IVECTOR IARRAY1 INS OINTDOM DIFRING
                   CFCAT STEP OM LSAGG STAGG URAGG RCAGG ELAGG FMTC POLYCAT
                   FAMR AMR PFECAT
asp       ASP35    FVFUN FORTCAT TYPE KOERCE BOOLEAN SINT NNI INT SYMBOL REF
                   ALIST LIST STRING CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                   ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ FS ES
                   IEVALAB EVALAB PATAB FPATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARNZ VECTCAT IXAGG HOAGG AGG ELTAGG ELTAB CLAGG
                   INS OINTDOM DIFRING CFCAT STEP OM VECTOR IVECTOR IARRAY1
                   LSAGG STAGG URAGG RCAGG ELAGG FMTC POLYCAT FAMR AMR PFECAT
asp       ASP41    FVFUN FORTCAT TYPE KOERCE BOOLEAN SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                   ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ FS ES
                   IEVALAB EVALAB PATAB FPATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARNZ VECTCAT IXAGG HOAGG AGG ELTAGG ELTAB CLAGG
                   VECTOR IVECTOR IARRAY1 NNI INS OINTDOM DIFRING CFCAT STEP
                   OM LSAGG STAGG URAGG RCAGG ELAGG FMTC POLYCAT FAMR AMR 
                   PFECAT
asp       ASP42    FVFUN FORTCAT TYPE KOERCE BOOLEAN SYMBOL INT REF ALIST 
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG NNI ILIST FPS RNS FIELD EUCDOM PID GCDDOM
                   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE 
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB 
                   CHARZ FS ES IEVALAB EVALAB PATAB FPATMAB FRETRCT GROUP
                   PDRING FLINEXP LINEXP CHARNZ VECTCAT IXAGG HOAGG AGG
                   ELTAGG ELTAB CLAGG INS OINTDOM DIFRING CFCAT STEP OM
                   VECTOR IVECTOR IARRAY1 LSAGG STAGG URAGG RCAGG ELAGG
                   FMTC POLYCAT FAMR AMR PFECAT
asp       ASP74    FMFUN FORTCAT TYPE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM
                   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   ES IEVALAB EVALAB NNI INT INS OINTDOM DIFRING LINEXP CFCAT
                   STEP OM PI FMTC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   FLINEXP PFECAT QFCAT FEVALAB ELTAB DIFEXT PATAB FPATMAB
                   VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG ELTAGG CLAGG
                   FS GROUP
asp       ASP77    FMFUN FORTCAT TYPE KOERCE FPS RNS FIELD EUCDOM PID GCDDOM
                   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   FS ES IEVALAB EVALAB PATAB FPATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARNZ VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG
                   AGG ELTAGG ELTAB CLAGG INS OINTDOM DIFRING CFCAT STEP
                   BOOLEAN FMTC POLYCAT FAMR AMR PFECAT QFCAT FEVALAB DIFEXT
asp       ASP80    FMFUN FORTCAT TYPE KOERCE SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   BOOLEAN FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON OASGP
                   ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ FMTC ES
                   IEVALAB EVALAB PI NNI INS OINTDOM DIFRING LINEXP CFCAT STEP
                   POLYCAT PDRING FAMR AMR CHARNZ FRETRCT FLINEXP PFECAT QFCAT
                   FEVALAB ELTAB DIFEXT PATAB FPATMAB VECTCAT IXAGG HOAGG AGG
                   ELTAGG CLAGG FS GROUP
gaussian  CINTSLPE INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP COMPCAT MONGEN
                   FRAMALG FINRALG CHARNZ FRETRCT FLINEXP FINITE FIELD DIVRING
                   DIFEXT PDRING FFIELDC PFC FEVALAB ELTAB EVALAB IEVALAB
                   FPATMAB TYPE PATAB TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   RADCAT PFECAT INT VECTOR IVECTOR IARRAY1 UPOLYC POLYCAT FAMR
                   AMR LIST ILIST NNI BOOLEAN
cmplxrt   CMPLXRT  UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD ELTAB 
                   DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG INS
                   OINTDOM CFCAT REAL ILIST COMPCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC FEVALAB FPATMAB TYPE PATAB TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RADCAT LSAGG STAGG
                   ELAGG URAGG
gaussian  COMPFACT EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT
                   PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                   FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT UFD ELTAB 
                   DIFRING DIFEXT STEP FIELD DIVRING INS OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP CFCAT REAL QFCAT FEVALAB PATAB
                   FPATMAB TYPE COMPCAT MONOGEN FRAMALG FINRALG FINITE
                   FFIELDC FPC TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   RADCAT INT SINT NNI OM LIST
gaussian  COMPLEX  COMPCAT MONOGEN FRAMALG FINRALG ALGEBRA RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE MODULE BMODULE RMODULE CHARZ CHARNZ COMRING KONVERT
                   FRETRCT RETRACT FLINEXP LINEXP FINITE FIELD EUCDOM PID
                   GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT DIFRING PDRING
                   FFIELDC FPC STEP FEVALAB ELTAB EVALAB IEVALAB FPATMAB
                   TYPE PATMAB PATAB ORDSET TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN RADCAT PFECAT OM BOOLEAN UPOLYC POLYCAT FAMR AMR
                   INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL
                   RNS FPS OAMONS
gaussian  COMPLPAT SETCAT BASTYPE KOERCE KONVERT COMRING RING RNG ABELGRP 
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE COMPCAT MONOGEN FRAMALG FINRALG ALGEBRA MODULE
                   CHARZ CHARNZ FRETRCT RETRACT FLINEXP LINEXP FINITE FIELD
                   EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT 
                   DIFRING PDRING FFIELDC FPC STEP FEVALAB ELTAB EVALAB
                   IEVALAB FPATMAB TYPE PATMAB PATAB ORDSET TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN RADCAT PFECAT SYMBOL INT REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG BOOLEAN
gaussian  CPMATCH  SETCAT BASTYPE KOERCE PATMAB COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE COMPCAT MONOGEN FRAMALG FINRALG ALGEBRA MODULE
                   CHARZ CHARNZ KONVERT FRETRCT RETRACT FLINEXP LINEXP FINITE
                   FIELD EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT
                   DIFRING PDRING FFIELDC FPC STEP FEVALAB ELTAB EVALAB
                   IEVALAB FPATMAB TYPE PATAB ORDSET TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN RADCAT PFECAT SYMBOL INT REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG NNI POLYCAT FAMR AMR
crfp      CRFP     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET UPOLYC POLYCAT
                   PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                   FLINEXP LINEXP KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT
                   STEP COMPCAT MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC
                   FEVALAB FPATMAB TYPE PATAB TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN RADCAT QFCAT OINTDOM REAL OM LSAGG STAGG URAGG
                   RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG INS
                   CFCAT RNS
efstruc   CTRIGMNP INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER ORDSET RETRACT ACF FIELD EUCDOM PID GCDDOM
                   UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB
                   FRETRCT GROUP PDRING FLINEXP LINEXP CHARZ CHARNZ LSAGG STAGG
                   URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                   ELAGG OM INT LIST ILIST COMPCAT MONOGEN FRAMALG FINRALG
                   FINITE DIFEXT DIFRING FFIELDC FPC STEP FEVALAB PFECAT
                   CACHSET BOOLEAN SYMBOL REF ALIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG 
intalg    DBLRESP  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG 
                   FINITE FFIELDC FPC QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL NNI INT PI
derham    DERHAM   LALG RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE RETRACT FS ES ORDSET IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP
                   PDRING FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE
                   BMODULE RMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING
                   ENTIRER UFD DIVRING LSAGG STAGG URAGG RCAGG HOAGG AGG 
                   LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM 
special   DFSFUN   FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ DFLOAT NNI INT DIFRING
                   OM TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN COMPCAT 
                   MONOGEN FRAMALG FINRALG CHARNZ FRETRCT FLINEXP LINEXP 
                   FINITE DIFEXT PDRING FFIELDC FPC STEP FEVALAB ELTAB EVALAB
                   IEVALAB FPATMAB TYPE PATAB PFECAT FRAC 
draw      DRAWCURV INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG 
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET RETRACT FS ES IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD
                   DIVRING POLYCAT FAMR AMR PFECAT INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING CFCAT REAL STEP SYMBOL INT REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG ILIST STAGG ELAGG URAGG OM FPS RNS RADCAT
d01weights D01WGTS  FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                    ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                    MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                    DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                    KONVERT RETRACT RADCAT PATMAB CHARZ FS ES IEVALAB EVALAB
                    PATAB FPATMAB TYPE FRETRCT GROUP PDRING FLINEXP LINEXP
                    CHARNZ SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                    PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG STAGG URAGG
                    RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM
                    ILIST NNI BOOLEAN DIFRING TRANFUN TRIGCAT ATRIG HYPCAT
                    AHYP ELEMFUN INT OINTDOM CFCAT STEP DFLOAT 
d02agents D02AGNT  LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE SETCAT BASTYPE
                   KOERCE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG 
                   KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST DFLOAT NNI
                   FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING
                   OAGROUP OCAMON OAMON OASGP REAL RETRACT RADCAT PATMAB CHARZ
                   VECTCAT A1AGG VECTOR IVECTOR IARRAY1 DIFRING TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN BOOLEAN FS ES PATAB FPATMAB 
                   FRETRCT GROUP PDRING FLINEXP LINEXP CHARNZ MATCAT ARR2CAT
                   INS OINTDOM CFCAT STEP QFCAT FEVALAB DIFEXT PFECAT SINT
                   SYMBOL REF ALIST STRING CHAR OUTFORM PRIMARR ISTRING SRAGG
d03routine D03EEFA PDECAT SETCAT BASTYPE KOERCE LSAGG STAGG URAGG RCAGG HOAGG
                   AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG 
                   KONVERT FLAGG ORDSET ELAGG OM INT LIST ILIST NNI PI MONOID
                   ABELMON DFLOAT FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL RETRACT RADCAT
                   PATMAB CHARZ VECTOR FS ES PATAB FPATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARNZ
elemntry  EF       ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD
                   DIVRING RADCAT SYMBOL INT REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN ILIST INS OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP DIFRING CFCAT REAL STEP OM INS
                   LSAGG STAGG PI NNI BOOLEAN CACHSET
efstruc   EFSTRUC  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP ACF FIELD 
                   EUCDOM PID GCDDOM UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT 
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ
                   CHARNZ COMBOPC CFCAT BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG
                   AGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST
                   ILIST INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                   REAL STEP PI NNI SINT SYMBOL REF ALIST STRING CHAR OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG VECTOR IVECTOR IARRAY1 VECTCAT
elfuts    ELFUTS   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UTSCAT UPSCAT PSCAT AMR CHARZ CHARNZ ELTAB DIFRING PDRING
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN INT LIST
                   ILIST LSAGG STAGG 
tools     ESTOOLS  INT LIST ILIST NNI FPS RNS FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT 
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ SINT
                   LSAGG DFLOAT INS OINTDOM DIFRING LINEXP CFCAT STEP OM
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN QFCAT FEVALAB
                   ELTAB EVALAB IEVALAB DIFEXT PDRING FLINEXP PATAB FPATMAB
                   TYPE CHARNZ PFECAT LZSTAGG STAGG URAGG RCAGG HOAGG AGG LNAGG
                   IXAGG ELTAGG CLAGG VECTOR VECTCAT A1AGG FLAGG IVECTOR 
                   IARRAY1 BOOLEAN ELAGG FS ES FRETRCT GROUP PI TBAGG KDAGG
                   DIAGG DIOPS BGAGG STRING CHAR OUTFORM PRIMARR ISTRING
expexpan  EXPEXPAN ACF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN FS ES ORDSET RETRACT IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARZ CHARNZ QFCAT FEVALAB ELTAB DIFEXT DIFRING
                   STEP OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL
                   PFECAT FAMR AMR PI NNI INT INS CFCAT OM LSAGG STAGG
                   URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG
                   ELTAGG CLAGG FLAGG ELAGG LIST ILIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING UPXSCCA UPXSCAT UPSCAT
                   PSCAT
exprode   EXPRODE  ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER KONVERT FS ES RETRACT IEVALAB EVALAB
                   PATAB FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP 
                   LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING 
                   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING CFCAT REAL STEP CACHSET UPOLYC 
                   POLYCAT FAMR AMR PFECAT ELTAB DIFEXT NNI LSAGG STAGG URAGG
                   RCAGG HOAGG AGG IXAGG ELTAGG CLAGG ELAGG OM ILIST 
tube      EXPRTUBE INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                   ELTAGG ELTAB CLAGG FLAGG ELAGG INT LIST ILIST NNI SYMBOL
                   REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG BOOLEAN FS ES PATAB FPATMAB FRETRCT GROUP
                   PDRING FLINEXP CHARNZ FIELD DIVRING FPS RNS RADCAT
expr      EXPR2    ORDSET SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON ABELMON
                   ABELSG SGROUP MONOID LMODULE FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING 
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
e04routine E04NAFA OPTCAT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING
                   STRICAT SRAGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB
                   IEVALAB ELTAGG ELTAB CLAGG OM NNI DIFRING TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN ILIST LSAGG STAGG URAGG RCAGG
                   ELAGG DFLOAT PI POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   FLINEXP LINEXP PFECAT VECTCAT FS ES PATAB FPATMAB GROUP
                   INS OINTDOM CFCAT STEP BOOLEAN
e04routine E04UCFA OPTCAT SETCAT BASTYPE KOERCE FPS RNS FIELD EUCDOM PID
                   GCDDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE 
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG
                   IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST NNI
                   DIFRING TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN DFLOAT PI
                   INS OINTDOM LINEXP CFCAT STEP POLYCAT PDRING FAMR AMR CHARNZ
                   FRETRCT FLINEXP PFECAT QFCAT FEVALAB DIFEXT PATAB FPATMAB
                   VECTOR BOOLEAN
fortran   FC       SETCAT BASTYPE KOERCE SINT INS UFD GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP INT LIST ILIST
                   LSAGG STAGG SYMBOL REF ALIST STRING CHAR OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG POLYCAT PDRING FAMR AMR
                   CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT STRICAT IXAGG
                   HOAGG AGG TYPE ELTAGG ELTAB CLAGG OM NNI DFLOAT BOOLEAN
                   FMTC FPS RNS FIELD DIVRING RADCAT COMPCA MONOGEN FRAMALG
                   FINRALG FINITE DIFEXT FFIELDC FPC FEVALAB FPATMAB PATAB
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN VECTOR IVECTOR
                   IARRAY1 VECTCAT FS ES GROUP
divisor   FDIVCAT  ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE FIELD
                   EUCDOM PID GCDDOM INTDOM COMRING RING RNG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC 19
divisor   FDIV2    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP 
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC
curve     FFCAT2   UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING FAMR
                   AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP
                   LINEXP ORDSET KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT
                   STEP EUCDOM PID FIELD DIVRING FFCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC 
numsolve  FLOATCP  FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET INS OINTDOM
                   DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                   COMPCAT MONOGEN FRAMALG FINRALG CHARNZ FRETRCT FLINEXP
                   FINITE DIFEXT PDRING FFIELDC FPC FEVALAB ELTAB EVALAB
                   IEVALAB FPATMAB TYPE PATAB TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN RADCAT PFECAT POLYCAT FAMR AMR BOOLEAN OM INT
                   LIST ILIST QFCAT
pfo       FORDER   FINITE SETCAT BASTYPE KOERCE FIELD EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT 
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG
                   FFIELDC FPC SINT NNI INT
fortran   FORTRAN  FORTCAT TYPE KOERCE SINT SYMBOL INT REF ALIST LIST STRING
                   CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ILIST
                   LSAGG STAGG ELAGG URAGG RCAGG IXAGG ORDSET SETCAT BASTYPE
                   KONVERT OM PATMAB FMTC INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT HOAGG AGG EVALAB ELTAGG ELTAB
                   CLAGG NNI FPS RNS FIELD EUCDOM PID GCDDOM UFD DIVRING 
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL RADCAT CHARZ INS
                   OINTDOM DIFRING LINEXP CFCAT STEP COMPCAT MONOGEN FRAMALG
                   FINRALG CHARNZ FRETRCT FLINEXP FINITE DIFEXT PDRING FFIELDC
                   FPC FEVALAB FPATMAB PATAB TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN PFECAT
naalg     FRNAAF2  FRNAALG FINAALG NAALG NARNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE MONAD MODULE BMODULE LMODULE RMODULE
                   COMRING RING RNG SGROUP MONOID PI NNI INT SINT VECTOR
                   IVECTOR IARRAY1
combfunc  FSPECF   ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER FS ES RETRACT
                   IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT
                   FGROUP PDRING FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM PID
                   GCDDOM UFD DIVRING SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   POLYCAT FAMR AMR PFECAT SPFCAT INS ILIST LSAGG STAGG
                   ELAGG URAGG ELEMFUN
pfo       FSRED    ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT FS ES IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING
                   CACHSET INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   DIFRING CFCAT REAL STEP UPOLYC POLYCAT FAMR AMR PFECAT ELTAB
                   DIFEXT QFCAT FEVALAB OM INT
funcpkgs  FSUPFACT INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET RETRACT FS ES IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD
                   DIVRING UPOLYC POLYCAT FAMR AMR PFECAT ELTAB DIFRING DIFEXT
                   STEP SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ACF RADCAT INS
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL QFCAT
                   FEVALAB BOOLEAN CACHSET 
fspace    FS2      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE ORDSET FS ES RETRACT IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP
                   PDRING FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE
                   RMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD
                   DIVRING CACHSET
fs2ups    FS2UPS   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON 
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP ACF
                   FIELD EUCDOM PID UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ
                   CHARNZ ORDRING OAGROUP OCAMON OAMON OASGP UPSCAT PSCAT AMR
                   ELTAB DIFRING PTRANFN NNI INT INS POLYCAT FAMR PFECAT
                   BOOLEAN SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG STAGG URAGG RCAGG 
                   HOAGG AGG IXAGG ELTAGG CLAGG ELAGG OM OINTDOM CFCAT REAL
                   STEP PI CACHSET STRICAT 
gaussfac  GAUSSFAC INS EUCDOM UFD GCDDOM INTDOM COMRING RING ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP BOOLEAN PI NNI
                   LIST ILIST OM LSAGG STAGG COMPCAT MONOGEN FRAMALG FINRALG
                   CHARNZ FRETRCT FLINEXP FINITE FIELD DIVRING DIFEXT PDRING
                   FFIELDC FPC FEVALAB ELTAB EVALAB IEVALAB FPATMAB TYPE PATAB
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RADCAT PFECAT
generic   GCNAALG  FRNAALG FINAALG NAALG NARNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE MONAD MODULE BMODULE LMODULE RMODULE
                   COMRING RING RNG SGROUP MONOID POLYCAT PDRING FAMR AMR 
                   ALGEBRA CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT EVALAB
                   IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT
                   UFD QFCAT FIELD EUCDOM PID DIVRING FEVALAB ELTAB DIFEXT 
                   DIFRING PATAB FPATMAB TYPE STEP OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL SMATCAT RMATCAT HOAGG AGG SINT PI
                   NNI INT STRING CHAR OUTFORM LIST PRIMARR A1AGG ISTRING 
                   SYMBOL REF ALIST SRAGG FLAGG LNAGG VECTOR IVECTOR IARRAY1
                   VECTCAT IXAGG INS CFCAT OM ILIST LSAGG STAGG ELAGG URAGG
                   CLAGG HOAGG ORDSET AGG ELTAGG BOOLEAN
genufact  GENUFACT EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER INS UFD OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP UPOLYC POLYCAT
                   PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT
                   ELTAB DIFEXT FIELD DIVRING QFCAT FEVALAB PATAB FPATMAB TYPE
                   FFIELDC FPC FINITE COMPCAT MONOGEN FRAMALG FINRALG TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RADCAT ES ACF
genups    GENUPS   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER ORDSET RETRACT LINEXP ACF FIELD EUCDOM PID
                   GCDDOM UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE
                   PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ CHARNZ INS OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP DIFRING CFCAT REAL STEP
                   OM 
triset    GTSET    TSETCAT PSETCAT SETCAT BASTYPE KOERCE CLAGG HOAGG AGG TYPE
                   EVALAB IEVALAB KONVERT INTDOM COMRING RING RNG ABELGRP 
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER OAMONS OCAMON OAMON OASGP ORDSET
                   RPOLCAT POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   FLINEXP LINEXP PATMAB GCDDOM PFECAT UFD INT LIST ILIST
                   LSAGG STAGG ELAGG FLAGG URAGG LNAGG RCAGG IXAGG ELTAGG
                   ELTAB OM BOOLEAN FINITE
polset    GPOLSET  PSETCAT SETCAT BASTYPE KOERCE CLAGG HOAGG AGG TYPE EVALAB
                   IEVALAB KONVERT RING RNG ABELGRP CABMON ABELMON ABELSG
                   SGROUP MONOID LMODULE OAMONS OCAMON OAMON OASGP ORDSET
                   RPOLCAT POLYCAT PDRING FAMR AMR BMODULE RMODULE COMRING
                   ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER FRETRCT RETRACT
                   FLINEXP PATMAB GCDDOM PFECAT UFD LSAGG STAGG URAGG RCAGG
                   LNAGG IXAGG ELTAGG ELTAB FLAGG ELAGG OM INT LIST ILIST
constant  IAN      ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB
                   ACF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING RADCAT LINEXP REAL
                   KONVERT CHARZ DIFRING INS OINTDOM ORDRING OAGROUP OCAMON 
                   OAMON OASGP PATMAB CFCAT STEP QFCAT FEVALAB ELTAB DIFEXT
                   PDRING FLINEXP PATAB FPATMAB TYPE CHARNZ PFECAT FPS RNS FS
                   FRETRCT GROUP OM CACHSET POLYCAT FAMR AMR UPOLYC COMPCAT
                   MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN
numeigen  INEP     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET INS OINTDOM
                   DIFRING KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP
                   OM FPS RNS RADCAT QFCAT FEVALAB ELTAB EVALAB IEVALAB DIFEXT
                   PDRING FLINEXP PATAB FPATMAB TYPE CHARNZ PFECAT TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN UPOLYC POLYCAT FAMR AMR
                   FRETRCT NNI INT SINT VECTOR IVECTOR IARRAY1 LIST COMPCAT
                   MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC
infprod   INFPROD0 INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER CHARZ UTSCAT UPSCAT PSCAT AMR CHARNZ ELTAB
                   DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN
numsolve  INFSP    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER FIELD EUCDOM PID UFD DIVRING ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET INS OINTDOM DIFRING
                   KONVERT RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP FPS
                   RNS RADCAT QFCAT FEVALAB ELTAB EVALAB IEVALAB DIFEXT PDRING
                   FLINEXP PATAB FPATMAB TYPE CHARNZ PFECAT OM NNI INT POLYCAT
                   FAMR AMR FRETRCT COMPCAT MONOGEN FRAMALG FINRALG FINITE
                   FFIELDC FPC TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   UPOLYC LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG
                   IXAGG ELTAGG CLAGG FLAGG ELAGG PRIMARR PI DIRPCAT OAMONS
                   VSPACE ORDFIN BOOLEAN 
infprod   INPRODFF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   FINITE KONVERT UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET PATMAB
                   PFECAT ELTAB DIFRING DIFEXT STEP MONOGEN FRAMALG FINRALG
                   FFIELDC FPC UTSCAT UPSCAT PSCAT RADCAT TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN INS OINTDOM ORDRING OAGROUP 
                   OCAMON OAMON OASGP CFCAT REAL QFCAT FEVALAB PATAB FPATMAB
                   TYPE BOOLEAN
infprod   INPRODPF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   FINITE KONVERT UTSCAT UPSCAT PSCAT AMR CHARZ CHARNZ ELTAB
                   DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   ORDSET RETRACT LINEXP PATMAB CFCAT REAL STEP
intaf     INTAF    ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ACF FIELD EUCDOM PID GCDDOM UFD
                   DIVRING RADCAT FS ES RETRACT IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP LINEXP
                   CHARZ CHARNZ CACHSET UPOLYC POLYCAT FAMR AMR PFECAT ELTAB
                   DIFRING DIFEXT STEP QFCAT FEVALAB OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL NNI INT SYMBOL REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
intalg    INTALG   ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT ACF FIELD EUCDOM PID GCDDOM
                   UFD DIVRING RADCAT FS ES IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP LINEXP
                   CHARZ CHARNZ UPOLYC POLYCAT FAMR AMR PFECAT ELTAB DIFRING
                   DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG FINITE FFIELDC
                   FPC SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG VECTCAT A1AGG IXAGG
                   HOAGG AGG ELTAGG CLAGG VECTOR IVECTOR IARRAY1 INS OINTDOM
                   OAGROUP OCAMON OASGP CFCAT REAL OM ILIST QFCAT FEVALAB
                   LSAGG STAGG ELAGG NNI URAGG RCAGG BOOLEAN PI CACHSET
intef     INTEF    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT LINEXP ACF
                   FIELD EUCDOM PID UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARNZ
                   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG BOOLEAN ILIST UPOLYC POLYCAT
                   FAMR AMR PFECAT ELTAB DIFRING DIFEXT STEP CACHSET QFCAT
                   FEVALAB OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL 
                   LSAGG STAGG ELAGG URAGG RCAGG IXAGG LFCAT PRIMCAT HOAGG AGG
                   ELTAGG CLAGG OM
intaf     INTG0    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT ORDSET CHARZ LINEXP FS ES
                   IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT
                   GROUP PDRING FLINEXP CHARNZ FIELD EUCDOM PID UFD DIVRING
                   ACF RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG CACHSET ILIST UPOLYC POLYCAT
                   FAMR AMR PFECAT ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL NNI LODOCAT
                   OREPCAT
intalg    INTHERAL FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC INT VECTOR IVECTOR IARRAY1 VECTCAT PI NNI
                   INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL OM
                   A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG QFCAT
                   FEVALAB PATAB FPATMAB
intaf     INTPAF   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT ORDSET CHARZ LINEXP FS ES 
                   IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT
                   GROUP PDRING FLINEXP CHARNZ FIELD EUCDOM PID UFD DIVRING
                   ACF RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN SYMBOL
                   INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG UPOLYC POLYCAT FAMR AMR PFECAT
                   ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP REAL BOOLEAN NNI CACHSET PI ILIST
                   LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG
                   ELAGG LODOCAT OREPCAT
intpm     INTPM    ORDSET SETCAT BASTYPE KOERCE RETRACT GCDDOM INTDOM COMRING
                   RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER LINEXP ACF FIELD 
                   EUCDOM PID UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB
                   TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ CHARNZ
                   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING CFCAT REAL STEP LSAGG STAGG URAGG
                   RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG ELAGG OM ILIST PI
                   NNI LFCAT PRIMCAT CACHSET BOOLEAN POLYCAT FAMR AMR PFECAT
                   UPOLYC DIFEXT SPFCAT
rdeef     INTTOOLS ORDSET SETCAT BASTYPE KOERCE FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID SGROUP
                   GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE PDRING
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                   CACHSET INT LIST LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG
                   IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM ILIST NNI BOOLEAN
                   SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG ELEMFUN POLYCAT FAMR AMR PFECAT
                   UPOLYC DIFRING DIFEXT STEP LFCAT PRIMCAT TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP
efstruc   ITRIGMNP INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING 
                   FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD
                   DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   COMPCAT MONOGEN FRAMALG FINRALG FINITE DIFEXT DIFRING
                   FFIELDC FPC STEP FEVALAB ELTAB PFECAT OM CACHSET LSAGG
                   STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG
                   ELAGG INT LIST ILIST SYMBOL REF ALIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG POLYCAT FAMR AMR
lie       JORDAN   NAALG NARNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE MONAD MODULE BMODULE LMODULE RMODULE FRNAALG FINAALG
                   COMRING RING RNG SGROUP MONOID FIELD EUCDOM PID GCDDOM
                   INTDOM ALGEBRA ENTIRER UFD DIVRING POLYCAT PDRING FAMR AMR
                   CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET KONVERT PATMAB PFECAT
kovacic   KOVACIC  CHARZ RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE ACF FIELD EUCDOM PID GCDDOM
                   INTDOM COMRING BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING RADCAT RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ
                   FRETRCT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB
                   PFECAT ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB PATAB FPATMAB
                   TYPE OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL PI NNI
                   INT LIST ILIST BOOLEAN
liouv     LF       ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER FS ES RETRACT IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN SYMBOL INT
                   REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG 
                   ISTRING SRAGG FLAGG LNAGG ILIST LSAGG STAGG ELAGG URAGG NNI
                   BOOLEAN
lie       LIE      NAALG NARNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE MONAD MODULE BMODULE LMODULE RMODULE FRNAALG FINAALG
                   COMRING RING RNG SGROUP MONOID PI NNI FIELD EUCDOM PID 
                   GCDDOM INTDOM ALGEBRA ENTIRER UFD DIVRING POLYCAT PDRING
                   FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB 
                   FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
lodof     LODOF    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB PATAB FPATMAB TYPE
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL BOOLEAN INT
                   LIST ILIST LSAGG STAGG SINT NNI OM URAGG RCAGG HOAGG AGG
                   LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG PI ACF RADCAT ES
lie       LSQM     SMATCAT DIFEXT RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE DIFRING PDRING BMODULE
                   RMODULE RMATCAT HOAGG AGG TYPE EVALAB IEVALAB MODULE COMRING
                   FRETRCT RETRACT FLINEXP LINEXP ALGEBRA FRNAALG FINAALG NAALG
                   NARNG MONAD INTDOM ENTIRER PI NNI INT SINT VECTOR IVECTOR
                   IARRAY1 VECTCAT A1AGG FLAGG LNAGG IXAGG ELTAGG ELTAB CLAGG
                   KONVERT ORDSET HOAGG AGG EUCDOM PID GCDDOM FIELD UFD DIVRING
                   POLYCAT FAMR AMR CHARZ CHARNZ PATMAB PFECAT INT OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL STEP
openmath  OMEXPR   OM ORDSET SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BOOLEAN LSAGG STAGG
                   URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                   ELTAB CLAGG KONVERT FLAGG INT LIST ILIST NNI PI SYMBOL REF
                   ALIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FS ES RETRACT PATAB FPATMAB PATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
fortmac   MCMPLX   FMTC INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET RETRACT COMPCAT MONOGEN 
                   FRAMALG FINRALG CHARZ CHARNZ KONVERT FRETRCT FLINEXP LINEXP
                   FINITE FIELD EUCDOM PID GCDDOM UFD DIVRING DIFEXT DIFRING
                   PDRING FFIELDC FPC STEP FEVALAB ELTAB EVALAB IEVALAB FPATMAB
                   TYPE PATMAB PATAB TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   RADCAT PFECAT FPS RNS ORDRING OAGROUP OCAMON OAMON OASGP
                   REAL INS OINTDOM CFCAT UPOLYC POLYCAT FAMR AMR OAMONS
multfact  MULTFACT ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                   ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                   RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER CHARZ POLYCAT PDRING FAMR AMR CHARNZ
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB
                   PFECAT UFD INS OINTDOM ORDRING OAGROUP DIFRING CFCAT REAL
                   STEP COMPCAT MONOGEN FRAMALG FINRALG FINITE FIELD DIVRING
                   DIFEXT FFIELDC FPC FEVALAB ELTAB FPATMAB TYPE PATAB TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RADCAT UPOLYC
d01       NAGD01   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID 
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT 
                   PATMAB CHARZ
d02       NAGD02   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGRP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
f01       NAGF01   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB
                   CHARZ INS OINTDOM DIFRING LINEXP CFCAT STEP COMPCAT MONOGEN
                   FRAMALG FINRALG CHARNZ FRETRCT FLINEXP FINITE DIFEXT PDRING
                   FFIELDC FPC FEVALAB ELTAB EVALAB IEVALAB FPATMAB TYPE PATAB
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PFECAT
f02       NAGF02   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   INS DIFRING DFLOAT PI NNI COMPCAT MONOGEN FRAMALG FINRALG
                   CHARNZ FRETRCT FLINEXP LINEXP FINITE DIFEXT DIFRING PDRING
                   FFIELDC FPC STEP FEVALAB ELTAB EVALAB IEVALAB FPATMAB TYPE
                   PATAB TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PFECAT
f04       NAGF04   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG FPS RNS FIELD EUCDOM PID
                   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT PATMAB CHARZ
                   COMPCAT MONOGEN FRAMALG FINRALG CHARNZ FRETRCT FLINEXP 
                   LINEXP FINITE DIFEXT DIFRING PDRING FFIELDC FPC STEP FEVALAB
                   ELTAB EVALAB IEVALAB FPATMAB TYPE PATAB TRANFUN TRIGCAT 
                   ATRIG HYPCAT AHYP ELEMFUN PFECAT INS OINTDOM CFCAT DFLOAT
numeigen  NCEP     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET SYMBOL INT REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG INS OINTDOM DIFRING KONVERT RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP QFCAT FEVALAB ELTAB
                   EVALAB DIFEXT PDRING FLINEXP PATAB FPATMAB TYPE CHARNZ
                   PFECAT COMPCAT MONOGEN FRAMALG FINRALG FRETRCT FINITE 
                   FFIELDC FPC TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN RADCAT
                   UPOLYC POLYCAT FAMR AMR
nlinsol   NLINSOL  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER ORDSET KONVERT OM PATMAB INT LIST POLYCAT
                   PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                   FLINEXP LINEXP GCDDOM PFECAT UFD ACF FIELD EUCDOM PID 
                   DIVRING RADCAT ILIST LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE
                   LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG NNI INS OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP DIFRING CFCAT REAL STEP
                   QFCAT FEVALAB DIFEXT PATAB FPATMAB
newpoly   NSMP     RPOLCAT POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET KONVERT PATMAB GCDDOM PFECAT UFD NNI INT LIST ILIST
                   LSAGG STAGG ELAGG FLAGG URAGG LNAGG RCAGG IXAGG CLAGG HOAGG
                   AGG ELTAGG BOOLEAN PI EUCDOM PID INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING CFCAT REAL STEP QFCAT FIELD
                   DIVRING FEVALAB ELTAB DIFEXT PATAB FPATMAB TYPE FPS RNS
                   RADCAT UPOLYC
numeric   NUMERIC  KONVERT COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE 
                   RMODULE COMPCAT MONOGEN FRAMALG FINRALG ALGEBRA MODULE 
                   CHARZ CHARNZ FRETRCT RETRACT FLINEXP LINEXP FINITE FIELD
                   EUCDOM PID GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT DIFRING
                   PDRING FFIELDC FPC STEP FEVALAB ELTAB EVALAB IEVALAB 
                   FPATMAB TYPE PATMAB PATAB ORDSET TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN RADCAT PFECAT FPS RNS ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL OM POLYCAT FAMR AMR 
oct       OCT      OC ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                   FRETRCT RETRACT FEVALAB ELTAB EVALAB IEVALAB FINITE ORDSET
                   KONVERT CHARZ CHARNZ COMRING QUATCAT DIFEXT DIFRING PDRING
                   FLINEXP LINEXP ENTIRER DIVRING FIELD EUCDOM PID GCDDOM
                   INTDOM UFD INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   PATMAB CFCAT REAL STEP RNS RADCAT
oct       OCTCT2   OC ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                   FRETRCT RETRACT FEVALAB ELTAB EVALAB IEVALAB FINITE ORDSET
                   KONVERT CHARZ CHARNZ COMRING
odealg    ODEPAL   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL LODOCAT OREPCAT
riccati   ODERTRIC FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   CHARZ RETRACT UPOLYC POLYCAT PDRING FAMR AMR CHARNZ FRETRCT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP SYMBOL INT REF ALIST LIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
                   QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL ILIST NNI LSAGG STAGG URAGG RCAGG
                   HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM BOOLEAN
                   UTSCAT UPSCAT PSCAT RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN ACF 
pade      PADE     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UTSCAT UPSCAT PSCAT AMR CHARZ CHARNZ ELTAB DIFRING PDRING
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN UPOLYC
                   POLYCAT FAMR FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                   ORDSET KONVERT PATMAB PFECAT DIFEXT STEP NNI INT SINT LIST
                   ILIST PI
expr      PAN2EXPR INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP ES IEVALAB
                   EVALAB ACF FIELD DIVRING RADCAT FS PATAB FPATMAB TYPE
                   FRETRCT GROUP PDRING FLINEXP CHARNZ POLYCAT FAMR AMR
                   PFECAT OM
d03Package PDEPACK STRING CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING
                   SRAGG ILIST TBAGG KDAGG DIAGG DIOPS BGAGG HOAGG AGG TYPE
                   SETCAT BASTYPE KOERCE EVALAB IEVALAB CLAGG KONVERT IXAGG
                   ELTAGG ELTAB NNI SYMBOL REF ALIST FLAGG LNAGG FPS RNS FIELD
                   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE 
                   ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET REAL RETRACT
pfo       PFO      ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT FS ES IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING
                   UPOLYC POLYCAT FAMR AMR PFECAT ELTAB DIFRING DIFEXT STEP
                   FFCAT MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC INS 
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL QFCAT
                   FEVALAB CACHSET INT LIST LSAGG STAGG URAGG RCAGG HOAGG AGG
                   LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM ILIST NNI PI VECTCAT
                   A1AGG BOOLEAN
pfo       PFOQ     UPOLYC POLYCAT PDRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                   PID FIELD DIVRING FFCAT MONOGEN FRAMALG FINRALG FINITE
                   FFIELDC FPC INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   CFCAT REAL QFCAT FEVALAB PATAB FPATMAB TYPE OM INT VECTOR
                   IVECTOR IARRAY1 NNI PI VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG
                   AGG ELTAGG CLAGG
expr      PICOERCE ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG 
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER INS UFD GCDDOM EUCDOM PID
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP UPOLYC POLYCAT
                   PDRING FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP
                   PFECAT ELTAB DIFEXT FIELD DIVRING FS ES PATAB FPATMAB TYPE
                   GROUP
expr      PMASSFS  ORDSET SETCAT BASTYPE KOERCE FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID SGROUP
                   GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE PDRING
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                   INT LIST ILIST
patmatch2 PMFS     SETCAT BASTYPE KOERCE INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER ORDSET PATMAB FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHAR CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING 
                   CACHSET INT LIST ILIST LSAGG STAGG ELAGG FLAGG URAGG
expr      PMPREDFS ORDSET SETCAT BASTYPE KOERCE FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID SGROUP
                   GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE PDRING
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                   INT LIST ILIST LSAGG STAGG SYMBOL REF ALIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG
primelt   PRIMELT  INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER ORDSET CHARZ FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING
                   CACHSET POLYCAT FAMR AMR PFECAT LSAGG STAGG URAGG RCAGG 
                   HOAGG AGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT
                   LIST ILIST SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG NNI ACF RADCAT BOOLEAN UPOLYC DIFRING
                   DIFEXT STEP PI
triset    PSETPK   INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER OAMONS OCAMON OAMON OASGP ORDSET 
                   RPOLCAT POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP KONVERT PATMAB GCDDOM PFECAT
                   UFD LSAGG STAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG 
                   ELTAGG ELTAB CLAGG FLAGG ELAGG OM INT LIST ILIST BOOLEAN
                   NNI TSETCAT PSETCAT EUCDOM PID
quat      QUAT     QUATCAT ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE
                   RMODULE FRETRCT RETRACT DIFEXT DIFRING PDRING FEVALAB ELTAB
                   EVALAB IEVALAB FLINEXP LINEXP ENTIRER ORDSET DIVRING KONVERT
                   CHARZ CHARNZ FIELD EUCDOM PID GCDDOM INTDOM COMRING UFD INS
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP PATMAB CFCAT REAL
                   STEP RNS RADCAT
quat      QUATCT2  QUATCAT ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE
                   RMODULE FRETRCT RETRACT DIFEXT DIFRING PDRING FEVALAB ELTAB
                   EVALAB IEVALAB FLINEXP LINEXP ENTIRER ORDSET DIVRING KONVERT
                   CHARZ CHARNZ FIELD EUCDOM PID GCDDOM INTDOM COMRING UFD
curve     RADFF    FFCAT MONOGEN FRAMALG FINRALG ALGEBRA RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE MODULE BMODULE RMODULE CHARZ CHARNZ COMRING KONVERT
                   FRETRCT RETRACT FLINEXP LINEXP FINITE FIELD EUCDOM PID 
                   GCDDOM INTDOM ENTIRER UFD DIVRING DIFEXT DIFRING PDRING
                   FFIELDC FPC STEP UPOLYC POLYCAT FAMR AMR EVALAB IEVALAB
                   ORDSET PATMAB PFECAT ELTAB QFCAT FEVALAB PATAB FPATMAB TYPE
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL INS CFCAT 
                   OM VECTCAT A1AGG FLAGG LNAGG IXAGG HOAGG AGG ELTAGG CLAGG
rdeef     RDEEF    GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT LINEXP TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN ACF FIELD EUCDOM PID UFD
                   DIVRING RADCAT FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB
                   TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARNZ LSAGG STAGG
                   URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                   ELAGG UPOLYC POLYCAT FAMR AMR PFECAT DIFRING DIFEXT STEP
                   SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG OM CACHSET ILIST BOOLEAN NNI INS OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP CFCAT REAL PI
rdesys    RDEEFS   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT LINEXP TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN ACF FIELD EUCDOM PID UFD
                   DIVRING RADCAT FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB
                   TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARNZ UPOLYC
                   POLYCAT FAMR AMR PFECAT ELTAB DIFRING DIFEXT STEP INT LIST
                   ILIST CACHSET LSAGG STAGG ELAGG FLAGG URAGG
pfo       RDIV     FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                   ELTAB DIFRING DIFEXT STEP FFCAT MONOGEN FRAMALG FINRALG
                   FINITE FFIELDC FPC QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL
regset    RSETCAT  GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER TSETCAT PSETCAT CLAGG HOAGG AGG TYPE
                   EVALAB IEVALAB KONVERT OAMONS OCAMON OAMON OASGP ORDSET
                   RPOLCAT POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   FLINEXP LINEXP PATMAB PFECAT UFD BOOLEAN INT LIST ILIST
                   FINITE NNI LSAGG STAGG ELAGG FLAGG URAGG RCAGG LNAGG IXAGG
                   ELTAGG ELTAB OM CLAGG
rule      RULE     SETCAT BASTYPE KOERCE ELTAB RETRACT FS ES ORDSET IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID 
                   SGROUP GROUP ABELMON ABELSG CABMON RING RNG LMODULE PDRING
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                   INT LIST ILIST OM BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG AGG
                   LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG SYMBOL REF ALIST STRING
                   CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG 
rule      RULESET  SETCAT BASTYPE KOERCE ELTAB FS ES ORDSET RETRACT IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID
                   SGROUP GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE
                   PDRING FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE
                   RMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD
                   DIVRING INT LIST ILIST FSAGG DIAGG DIOPS BGAGG HOAGG AGG
                   CLAGG SETAGG FINITE
manip     SIMPAN   INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP FS ES IEVALAB
                   EVALAB PATAB FPATMAB TYPE FRETRCT GROUP PDRING FLINEXP
                   CHARNZ FIELD DIVRING
fortran   SFORT    FORTCAT TYPE KOERCE ORDSET SETCAT BASTYPE FS ES RETRACT
                   IEVALAB EVALAB PATAB KONVERT FPATMAB PATMAB FRETRCT MONOID
                   SGROUP GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE
                   PDRING FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE
                   RMODULE FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD
                   DIVRING SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ILIST
transsolve SOLVESER INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG FS ES RETRACT IEVALAB EVALAB PATAB KONVERT FPATMAB
                   TYPE PATMAB FRETRCT GROUP PDRING FLINEXP LINEXP CHARZ 
                   CHARNZ FIELD EUCDOM PID GCDDOM UFD DIVRING UPOLYC POLYCAT
                   FAMR AMR PFECAT ELTAB DIFRING DIFEXT STEP NNI VECTOR IVECTOR
                   IARRAY1 ILIST PI VECTCAT IXAGG HOAGG AGG ELTAGG CLAGG
combfunc  SUMFS    INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP FS ES IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP
                   PDRING FLINEXP CHARZ CHARNZ FIELD EUCDOM PID GCDDOM UFD
                   DIVRING COMBOPC CFCAT ACF RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN SYMBOL INT REF ALIST LIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG
                   STAGG URAGG RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG ELAGG
                   OM CACHSET ILIST BOOLEAN 
suts      SUTS     UTSCAT UPSCAT PSCAT AMR BMODULE RMODULE COMRING ALGEBRA
                   MODULE CHARZ CHARNZ INTDOM ENTIRER ELTAB DIFRING PDRING
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN BOOLEAN
                   NNI INS UFD GCDDOM EUCDOM PID OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET KONVERT RETRACT LINEXP PATMAB
                   CFCAT REAL STEP OM STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING FIELD DIVRING
sign      TOOLSIGN RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE INS UFD GCDDOM INTDOM COMRING BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT RETRACT
                   LINEXP PATMAB CFCAT REAL CHARZ STEP FS ES IEVALAB EVALAB
                   PATAB FPATMAB TYPE FRETRCT GROUP PDRING FLINEXP CHARNZ FIELD
                   DIVRING INT INS STRING CHAR SINT OUTFORM LIST PRIMARR A1AGG
                   ISTRING
efstruc   TRIGMNIP GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP ACF
                   FIELD EUCDOM PID UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ
                   CHARNZ INT LIST ILIST COMPCAT MONOGEN FRAMALG FINRALG
                   FINITE DIFEXT DIFRING FFIELDC FPC STEP FEVALAB ELTAB
                   PFECAT OM SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG STAGG ELAGG URAGG INS
                   NNI RCAGG HOAGG AGG IXAGG ELTAGG CLAGG BOOLEAN
manip     TRMANIP  ORDSET SETCAT BASTYPE KOERCE GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER FS ES RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING
                   FLINEXP LINEXP CHARZ CHARNZ FIELD EUCDOM PID UFD DIVRING
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN SYMBOL INT REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG LSAGG STAGG URAGG RCAGG HOAGG AGG IXAGG
                   ELTAGG ELTAB CLAGG ELAGG OM NNI BOOLEAN CACHSET POLYCAT FAMR
                   AMR PFECAT
laurent   ULSCCAT  ULSCAT UPSCAT PSCAT AMR RING RNG ABELGRP CABMON ABELMON 
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING RETRACT
                   QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP LINEXP PATAB
                   KONVERT FPATMAB TYPE PATMAB STEP ORDSET OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP REAL PFECAT INS CFCAT 
expexpan  UPXSSING ACF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE 
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN FS ES ORDSET RETRACT IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   LINEXP CHARZ CHARNZ FAMR AMR UPXSCCA UPXSCAT UPSCAT PSCAT
                   ELTAB DIFRING NNI INT LIST ILIST INS OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP CFCAT REAL STEP BOOLEAN OM
                   LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG
                   CLAGG FLAGG ELAGG STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING QFCAT FEVALAB DIFEXT PFECAT
utsode    UTSODE   ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                   BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                   UTSCAT UPSCAT PSCAT AMR COMRING CHARZ CHARNZ INTDOM ENTIRER
                   ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN INT LIST ILIST LSAGG STAGG URAGG RCAGG HOAGG
                   AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG CLAGG KONVERT
                   FLAGG ORDSET ELAGG OM 
oderf     UTSODETL RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE UPOLYC POLYCAT PDRING FAMR AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT
                   PATMAB GCDDOM PFECAT UFD ELTAB DIFRING DIFEXT STEP EUCDOM
                   PID FIELD DIVRING LODOCAT OREPCAT UTSCAT UPSCAT PSCAT RADCAT
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN NNI INT SINT
                   VECTOR IVECTOR IARRAY1
taylor    UTS2     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE 
                   KOERCE SGROUP MONOID LMODULE UTSCAT UPSCAT PSCAT AMR BMODULE
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN
triset    WUTSET   TSETCAT PSETCAT SETCAT BASTYPE KOERCE CLAGG HOAGG AGG TYPE
                   EVALAB IEVALAB KONVERT INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER OAMONS OCAMON OAMON OASGP ORDSET
                   RPOLCAT POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                   FLINEXP LINEXP PATMAB GCDDOM PFECAT UFD LSAGG STAGG URAGG
                   RCAGG LNAGG IXAGG ELTAGG ELTAB FLAGG ELAGG OM INT LIST ILIST
                   BOOLEAN FINITE
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
algfact.spad.pamphlet (IALGFACT SAEFACT RFFACT SAERFFC ALGFACT)
algfunc.spad.pamphlet (ACF ACFS AF)
asp.spad.pamphlet (ASP1 ASP10 ASP12 ASP19 ASP20 ASP24 ASP27 ASP28 ASP29 ASP30
                   ASP31 ASP33 ASP34 ASP35 ASP4 ASP41 ASP42 ASP49 ASP50 ASP55
                   ASP6 ASP7 ASP73 ASP74 ASP77 ASP78 ASP8 ASP80 ASP9)
constant.spad.pamphlet (IAN AN)
cmplxrt.spad.pamphlet (CMPLXRT)
crfp.spad.pamphlet (CRFP)
curve.spad.pamphlet (FFCAT MMAP FFCAT2 CHAVAR RDFF ALGFF)
derham.spad.pamphlet (LALG EAB ANTISYM DERHAM)
draw.spad.pamphlet (DRAWCFUN DRAW DRAWCURV DRAWPT)
d01.spad.pamphlet (NAGD01)
efstruc.spad.pamphlet (SYMFUNC TANEXP EFSTRUC ITRIGMNP TRIGMNIP CTRIGMNP)
elemntry.spad.pamphlet (EF)
elfuts.spad.pamphlet (ELFUTS)
expexpan.spad.pamphlet (EXPUPXS UPXSSING EXPEXPAN)
exprode.spad.pamphlet (EXPRODE)
e04routine.spad.pamphlet (E04DFGA E04FDFA E04GCFA E04JAFA E04MBFA E04NAFA 
                          E04UCFA)
f01.spad.pamphlet (NAGF01)
f02.spad.pamphlet (NAGF02)
f04.spad.pamphlet (NAGF04)
fortmac.spad.pamphlet (MINT MFLOAT MCMPLX)
fortran.spad.pamphlet (RESULT FC FORTRAN M3D SFORT SWITCH FTEM FEXPR)
fspace.spad.pamphlet (ES ES1 ES2 FS FS2)
fs2ups.spad.pamphlet (FS2UPS)
funcpkgs.spad.pamphlet (FSUPFACT)
gaussfac.spad.pamphlet (GAUSSFAC)
gaussian.spad.pamphlet (COMPCAT COMPLPAT CPMATCH COMPLEX COMPLEX2 COMPFACT
                        CINTSLPE)
generic.spad.pamphlet (GCNAALG CVMP)
genufact.spad.pamphlet (GENUFACT)
genups.spad.pamphlet (GENUPS)
infprod.spad.pamphlet (STINPROD INFPROD0 INPRODPF INPRODFF)
intaf.spad.pamphlet (INTG0 INTPAF INTAF)
intalg.spad.pamphlet (DBLRESP INTHERAL INTALG)
intef.spad.pamphlet (INTEF)
intpm.spad.pamphlet (INTPM)
kovacic.spad.pamphlet (KOVACIC)
lie.spad.pamphlet (LIE JORDAN LSQM)
liouv.spad.pamphlet (LF)
lodof.spad.pamphlet (SETMN PREASSOC ASSOCEQ LODOF)
manip.spad.pamphlet (FACTFUNC POLYROOT ALGMANIP SIMPAN TRMANIP)
multfact.spad.pamphlet (INNMFACT MULTFACT ALGMFACT)
naalg.spad.pamphlet (ALGSC SCPKG ALGPKG FRNAAF2)
newpoly.spad.pamphlet (NSUP NSUP2 RPOLCAT NSMP)
nlinsol.spad.pamphlet (RETSOL NLINSOL)
numeigen.spad.pamphlet (INEP NREP NCEP)
numeric.spad.pamphlet (NUMERIC DRAWHACK)
numsolve.spad.pamphlet (INFSP FLOATRP FLOATCP)
oct.spad.pamphlet (OC OCT OCTCT2)
odealg.spad.pamphlet (ODESYS ODERED ODEPAL)
openmath.spad.pamphlet (OMEXPR)
pade.spad.pamphlet (PADEPAC PADE)
patmatch2.spad.pamphlet (PMINS PMQFCAT PMPLCT PMFS PATMATCH)
pfo.spad.pamphlet (FORDER RDIV PFOTOOLS PFOQ FSRED PFO)
polset.spad.pamphlet (PSETCAT GPOLSET)
primelt.spad.pamphlet (PRIMELT FSPRMELT)
quat.spad.pamphlet (QUATCAT QUAT QUATCT2)
rdeef.spad.pamphlet (INTTOOLS RDEEF)
rdesys.spad.pamphlet (RDETRS RDEEFS)
riccati.spad.pamphlet (ODEPRRIC ODERTRIC)
rule.spad.pamphlet (RULE APPRULE RULESET)
sign.spad.pamphlet (TOOLSIGN INPSIGN SIGNRF LIMITRF)
special.spad.pamphlet (DFSFUN ORTHPOL NTPOLFN)
suts.spad.pamphlet (SUTS)
tools.spad.pamphlet (ESTOOLS ESTOOLS1 ESTOOLS2)
triset.spad.pamphlet (TSETCAT GTSET PSETPK)
tube.spad.pamphlet (TUBE TUBETOOL EXPRTUBE NUMTUBE)
utsode.spad.pamphlet (UTSODE)
\end{verbatim}

<<layer20>>=
LAYER20=${OUT}/ACFS.o ${OUT}/ACFS-.o \
        ${OUT}/AF.o ${OUT}/ALGFACT.o ${OUT}/ALGFF.o \
        ${OUT}/ALGMANIP.o ${OUT}/ALGMFACT.o ${OUT}/ALGPKG.o \
        ${OUT}/ALGSC.o \
        ${OUT}/AN.o ${OUT}/APPRULE.o \
        ${OUT}/ASP19.o \
        ${OUT}/ASP20.o ${OUT}/ASP30.o ${OUT}/ASP31.o ${OUT}/ASP35.o \
        ${OUT}/ASP41.o ${OUT}/ASP42.o ${OUT}/ASP74.o ${OUT}/ASP77.o \
        ${OUT}/ASP80.o ${OUT}/ASP9.o ${OUT}/CINTSLPE.o \
        ${OUT}/COMPFACT.o ${OUT}/COMPLEX.o \
        ${OUT}/COMPLPAT.o ${OUT}/CMPLXRT.o ${OUT}/CPMATCH.o \
        ${OUT}/CRFP.o ${OUT}/CTRIGMNP.o ${OUT}/D01WGTS.o \
        ${OUT}/D02AGNT.o ${OUT}/D03EEFA.o \
        ${OUT}/DBLRESP.o \
        ${OUT}/DERHAM.o ${OUT}/DFSFUN.o \
        ${OUT}/DRAWCURV.o ${OUT}/E04NAFA.o ${OUT}/E04UCFA.o \
        ${OUT}/EF.o \
        ${OUT}/EFSTRUC.o ${OUT}/ELFUTS.o ${OUT}/ESTOOLS.o \
        ${OUT}/EXPEXPAN.o \
        ${OUT}/EXPRODE.o ${OUT}/EXPRTUBE.o ${OUT}/EXPR2.o ${OUT}/FC.o \
        ${OUT}/FDIVCAT.o ${OUT}/FDIVCAT-.o \
        ${OUT}/FDIV2.o ${OUT}/FFCAT2.o ${OUT}/FLOATCP.o \
        ${OUT}/FORDER.o ${OUT}/FORTRAN.o ${OUT}/FSRED.o \
        ${OUT}/FSUPFACT.o ${OUT}/FRNAAF2.o \
        ${OUT}/FSPECF.o ${OUT}/FS2.o ${OUT}/FS2UPS.o \
        ${OUT}/GAUSSFAC.o ${OUT}/GCNAALG.o ${OUT}/GENUFACT.o ${OUT}/GENUPS.o \
        ${OUT}/GTSET.o ${OUT}/GPOLSET.o ${OUT}/IAN.o ${OUT}/INEP.o \
        ${OUT}/INFPROD0.o ${OUT}/INFSP.o ${OUT}/INPRODFF.o \
        ${OUT}/INPRODPF.o ${OUT}/INTAF.o ${OUT}/INTALG.o ${OUT}/INTEF.o \
        ${OUT}/INTG0.o ${OUT}/INTHERAL.o \
        ${OUT}/INTPAF.o ${OUT}/INTPM.o ${OUT}/INTTOOLS.o \
        ${OUT}/ITRIGMNP.o ${OUT}/JORDAN.o \
        ${OUT}/KOVACIC.o ${OUT}/LF.o ${OUT}/LIE.o ${OUT}/LODOF.o \
        ${OUT}/LSQM.o ${OUT}/OMEXPR.o \
        ${OUT}/MCMPLX.o ${OUT}/MULTFACT.o ${OUT}/NAGD01.o \
        ${OUT}/NAGD02.o ${OUT}/NAGF01.o ${OUT}/NAGF02.o ${OUT}/NAGF04.o \
        ${OUT}/NCEP.o ${OUT}/NLINSOL.o ${OUT}/NSMP.o ${OUT}/NUMERIC.o \
        ${OUT}/OCT.o ${OUT}/OCTCT2.o ${OUT}/ODEPAL.o ${OUT}/ODERTRIC.o \
        ${OUT}/PADE.o \
        ${OUT}/PAN2EXPR.o ${OUT}/PDEPACK.o ${OUT}/PFO.o \
        ${OUT}/PFOQ.o ${OUT}/PICOERCE.o \
        ${OUT}/PMASSFS.o ${OUT}/PMFS.o \
        ${OUT}/PMPREDFS.o ${OUT}/PRIMELT.o ${OUT}/PSETPK.o \
        ${OUT}/QUAT.o ${OUT}/QUATCT2.o \
        ${OUT}/RADFF.o ${OUT}/RDEEF.o ${OUT}/RDEEFS.o \
        ${OUT}/RDIV.o ${OUT}/RSETCAT.o ${OUT}/RSETCAT-.o ${OUT}/RULE.o \
        ${OUT}/RULESET.o ${OUT}/SIMPAN.o \
        ${OUT}/SFORT.o ${OUT}/SOLVESER.o \
        ${OUT}/SUMFS.o ${OUT}/SUTS.o ${OUT}/TOOLSIGN.o \
        ${OUT}/TRIGMNIP.o ${OUT}/TRMANIP.o \
        ${OUT}/ULSCCAT.o ${OUT}/ULSCCAT-.o ${OUT}/UPXSSING.o ${OUT}/UTSODE.o \
        ${OUT}/UTSODETL.o ${OUT}/UTS2.o ${OUT}/WUTSET.o 
    
@
\subsection{Layer21}
\begin{verbatim}
defintef  DEFINTEF EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT
                   LINEXP TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PRIMCAT
                   ACFS ACF FIELD UFD DIVRING RADCAT FS ES IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING
                   FLINEXP CHARZ BOOLEAN CACHSET SYMBOL INT REF ALIST LIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                   CFCAT REAL STEP OM ILIST POLYCAT FAMR AMR PFECAT LSAGG
                   STAGG URAGG RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG ELAGG
defintrf  DEFINTRF EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT
                   LINEXP FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE
                   PATMAB FRETRCT GROUP PDRING FLINEXP CHARNZ FIELD UFD DIVRING
                   BOOLEAN POLYCAT FAMR AMR PFECAT INT LIST ILIST QFCAT FEVALAB
                   ELTAB DIFEXT DIFRING STEP OINTDOM ORDRING OAGROUP OCAMON
                   OAMON OASGP REAL ACFS ACF RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN COMBOPC CFCAT LFCAT PRIMCAT SPFCAT
defintrf  DFINTTLS GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP
                   TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN ACFS ACF FIELD
                   EUCDOM PID UFD DIVRING RADCAT FS ES IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   CHARZ CHARNZ INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   DIFRING CFCAT REAL STEP OM BOOLEAN STRING CHAR SINT OUTFORM
                   LIST PRIMARR A1AGG ISTRING SYMBOL REF ALIST SRAGG FLAGG
                   LNAGG ILIST POLYCAT FAMR AMR PFECAT QFCAT FEVALAB ELTAB
                   DIFEXT LSAGG 
d01transform D01TRNS NUMINT SETCAT BASTYPE KOERCE STRING CHAR SINT OUTFORM
                   LIST INT PRIMARR A1AGG ISTRING SRAGG SYMBOL REF ALIST FLAGG
                   LNAGG INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA
                   MODULE ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                   OAMON OASGP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB
                   CFCAT REAL CHARZ STEP QFCAT FIELD DIVRING FEVALAB ELTAB
                   EVALAB IEVALAB DIFEXT PDRING FLINEXP PATAB FPATMAB TYPE
                   CHARNZ PFECAT OM FPS RNS RADCAT FS ES FRETRCT GROUP TRANFUN
cont      ESCONT   FPS RNS FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG
                   ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING ORDRING OAGROUP OCAMON OAMON OASGP ORDSET REAL
                   KONVERT RETRACT RADCAT PATMAB CHARZ DIFRING OM TRANFUN
                   TRIGCAT ATRIG HYPCAT AHYP ELEMFUN DFLOAT LSAGG STAGG URAGG
                   RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG
                   ELTAB CLAGG FLAGG ELAGG INS OINTDOM LINEXP CFCAT STEP QFCAT
                   FEVALAB DIFEXT PDRING FLINEXP PATAB FPATMAB CHARNZ PFECAT
                   FS ES FRETRCT GROUP VECTCAT A1AGG ACFS ACF COMBOPC LFCAT
                   PRIMCAT SPFCAT 
efuls     EFULS    PTRANFN ULSCCAT ULSCAT UPSCAT PSCAT AMR RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD
                   DIVRING RETRACT QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP
                   LINEXP PATAB KONVERT FPATMB TYPE PATMAB STEP ORDSET OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL PFECAT UTSCAT NNI
                   INT INS CFCAT STRING CHAR SINT OUTFORM LIST PRIMARR A1AGG
                   ISTRING 
expr      EXPR     FS ES ORDSET SETCAT BASTYPE KOERCE RETRACT IEVALAB EVALAB
                   PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT MONOID SGROUP
                   GROUP ABELMON ABELSG ABELGRP CABMON RING RNG LMODULE PDRING
                   FLINEXP LINEXP CHARZ CHARNZ ALGEBRA MODULE BMODULE RMODULE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING ENTIRER UFD DIVRING
                   ACFS ACF RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   COMBOPC CFCAT LFCAT PRIMCAT SPFCAT BOOLEAN CACHSET POLYCAT
                   FAMR AMR PFECAT SYMBOL INT REF ALIST LIST STRING CHAR SINT
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ILIST LSAGG
                   STAGG ELAGG URAGG RCAGG IXAGG CLAGG HOAGG ORDSET AGG ELTAGG
                   ELTAB OM NNI PI VECTOR IVECTOR ARRAY1 VECTCAT QFCAT FEVALAB
                   DIFEXT DIFRING STEP OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP REAL UPOLYC INS FPS RNS
expr2ups  EXPR2UPS GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                   RMODULE ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP ACF
                   FIELD EUCDOM PID UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ
                   CHARNZ INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   DIFRING CFCAT REAL STEP ULSCCAT ULSCAT UPSCAT PSCAT AMR
                   ELTAB QFCAT FEVALAB DIFEXT PFECAT BOOLEAN STRING CHAR SINT
                   OUTFORM LIST INT PRIMARR A1AGG ISTRING NNI ILIST UPXSCCA
                   UPXSCAT
divisor   FDIV     FDIVCAT ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD
                   DIVRING UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT
                   RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB
                   PFECAT ELTAB DIFRING DEFEXT STEP FFCAT MONOGEN FRAMALG
                   FINRALG FINITE FFIELDC FPC INT VECTOR IVECTOR IARRAY1
                   VECTCAT A1AGG INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP
                   CFCAT REAL OM NNI PI FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG
                   CLAGG QFCAT FEVALAB PATAB FPATMAB
integrat  FSCINT   EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT
                   LINEXP TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN ACFS ACF
                   FIELD UFD DIVRING RADCAT FS ES IEVALAB EVALAB PATAB KONVERT
                   FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARNZ
                   INT LIST ILIST COMPCAT MONOGEN FRAMALG FINRALG FINITE DIFEXT
                   DIFRING FFIELDC FPC STEP FEVALAB ELTAB PFECAT OM LFCAT 
                   PRIMCAT BOOLEAN LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG
                   IXAGG ELTAGG CLAGG FLAGG ELAGG SYMBOL REF ALIST STRING CHAR
                   SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
integrat  FSINT    EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT
                   LINEXP TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PRIMCAT
                   ACFS ACF FIELD UFD DIVRING RADCAT FS ES IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   CHARNZ SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG NNI ILIST COMPCAT
                   MONOGEN FRAMALG FINRALG FINITE DIFEXT DIFRING FFIELDC FPC
                   STEP FEVALAB ELTAB PFECAT OM LSAGG STAGG URAGG RCAGG HOAGG
                   AGG IXAGG ELTAGG CLAGG ELAGG CACHSET BOOLEAN
fs2expxp  FS2EXPXP ACF FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                   CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN FS ES 
                   ORDSET RETRACT IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE
                   PATMAB FRETRCT GROUP PDRING FLINEXP LINEXP CHARZ CHARNZ PI
                   NNI INT INS OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP 
                   DIFRING CFCAT REAL STEP CACHSET LIST ILIST SYMBOL REF ALIST
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG BOOLEAN QFCAT FEVALAB ELTAB DIFEXT PFECAT UPXSCCA
                   UPXSCAT UPSCAT PSCAT AMR ULSCCAT ULSCAT LSAGG STAGG ELAGG
                   URAGG OM RCAGG HOAGG AGG IXAGG ELTAGG CLAGG STRICAT 
gseries   GSERIES  RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE UPXSCAT UPSCAT PSCAT AMR BMODULE 
                   RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER
                   ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING STRING
                   CHAR SINT OUTFORM LIST INT PRIMARR A1AGG ISTRING SYMBOL REF
                   ALIST SRAGG FLAGG LNAGG LSAGG STAGG URAGG RCAGG HOAGG AGG
                   TYPE EVALAB IEVALAB IXAGG ELTAGG CLAGG KONVERT ORDSET ELAGG
                   OM PATMAB ILIST PRIMCAT ACFS ACF FS ES RETRACT PATAB FPATMAB
                   FRETRCT GROUP FLINEXP LINEXP INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP CFCAT REAL STEP QFCAT FEVALAB DIFEXT
                   PFECAT
divisor   HELLFDIV FDIVCAT ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG 
                   SGROUP MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE
                   ENTIRER UFD DIVRING UPOLYC POLYCAT PDRING FAMR AMR CHARZ
                   CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP ORDSET
                   KONVERT PATMAB PFECAT ELTAB DIFRING DIFEXT STEP FFCAT
                   MONOGEN FRAMALG FINRALG FINITE FFIELDC FPC INT SYMBOL REF
                   ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                   SRAGG FLAGG LNAGG BOOLEAN NNI ILIST LSAGG STAGG ELAGG URAGG
                   QFCAT FEVALAB PATAB FPATMAB TYPE OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL OM VECTCAT IXAGG HOAGG AGG ELTAGG
                   CLAGG VECTOR IVECTOR IARRAY1 INS CFCAT PI
laplace   INVLAPLA EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT
                   LINEXP TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PRIMCAT
                   SPFCAT ACFS ACF FIELD UFD DIVRING RADCAT FS ES IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP 
                   PDRING FLINEXP CHARNZ BOOLEAN UPOLYC POLYCAT FAMR AMR 
                   PFECAT ELTAB DIFRING DIFEXT STEP LSAGG STAGG URAGG RCAGG
                   HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM INT LIST
                   ILIST NNI CACHSET PI INS OINTDOM ORDRING OAGROUP OCAMON
                   OASGP CFCAT REAL
irexpand  IR2F     GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT ORDSET LINEXP ACFS ACF FIELD
                   EUCDOM PID UFD DIVRING RADCAT FS ES IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   CHARZ CHARNZ TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN INT
                   LIST ILIST SYMBOL REF ALIST STRING CHAR SINT OUTFORM PRIMARR
                   A1AGG ISTRING SRAGG FLAGG LNAGG LSAGG STAGG ELAGG URAGG INS
                   BOOLEAN OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING
                   CFCAT REAL STEP NNI PI CACHSET UPOLYC POLYCAT FAMR AMR 
                   PFECAT ELTAB DIFEXT OM VECTOR IVECTOR IARRAY1 RCAGG HOAGG
                   AGG IXAGG ELTAGG CLAGG 
irexpand  IRRF2F   GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER RETRACT ORDSET LINEXP POLYCAT PDRING
                   FAMR AMR CHARZ CHARNZ FRETRCT EVALAB IEVALAB FLINEXP KONVERT
                   PATMAB PFECAT UFD FS ES PATAB FPATMAB TYPE GROUP FIELD
                   EUCDOM PID DIVRING QFCAT FEVALAB ELTAB DIFEXT DIFRING STEP
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL ACFS ACF 
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN COMBOPC
                   CFCAT LFCAT PRIMCAT SPFCAT INT LIST ILIST
laplace   LAPLACE  EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ RETRACT
                   LINEXP TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN PRIMCAT
                   ACFS ACF FIELD UFD DIVRING RADCAT FS ES IEVALAB EVALAB PATAB
                   KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP PDRING FLINEXP
                   CHARNZ SYMBOL INT REF ALIST LIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG NNI LSAGG STAGG 
                   URAGG RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG ELAGG OM 
                   ILIST BOOLEAN UPOLYC POLYCAT FAMR AMR PFECAT DIFRING DIFEXT
                   STEP CACHSET
limitps   LIMITPS  GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                   SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE RMODULE
                   ALGEBRA MODULE ENTIRER ORDSET RETRACT LINEXP ACF FIELD
                   EUCDOM PID UFD DIVRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB
                   TYPE PATMAB FRETRCT GROUP PDRING FLINEXP CHARZ CHARNZ LSAGG
                   STAGG URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG ELTAB CLAGG
                   FLAGG ELAGG OM INT LIST ILIST BOOLEAN SYMBOL REF ALIST 
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING NNI INS 
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP DIFRING CFCAT
                   REAL STEP QFCAT FEVALAB DIFEXT PFECAT UPXSCCA UPXSCAT PSCAT
                   AMR ULSCCAT ULSCAT
odeef     LODEEF   ORDSET SETCAT BASTYPE KOERCE EUCDOM PID GCDDOM INTDOM 
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER RETRACT 
                   LINEXP CHARZ ACFS ACF FIELD UFD DIVRING RADCAT FS ES IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP 
                   PDRING FLINEXP CHARNZ TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN PRIMCAT LODOCAT OREPCAT ELTAB CACHSET POLYCAT FAMR
                   AMR PFECAT NNI INT LSAGG STAGG URAGG RCAGG HOAGG AGG LNAGG
                   IXAGG ELTAGG CLAGG FLAGG ELAGG OM LIST ILIST BOOLEAN UPOLYC
                   DIFRING DIFEXT STEP QFCAT FEVALAB OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP REAL VECTOR IVECTOR IARRAY1 INS CFCAT
                   VECTCAT A1AGG
nlode     NODE1    ORDSET SETCAT BASTYPE KOERCE EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   RETRACT LINEXP CHARZ ACFS ACF FIELD UFD DIVRING RADCAT
                   FS ES IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB
                   FRETRCT GROUP PDRING FLINEXP CHARNZ TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN PRIMCAT SYMBOL INT REF ALIST LIST 
                   STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG
                   LNAGG CACHSET ILIST LSAGG STAGG URAGG HOAGG AGG IXAGG
                   ELTAGG ELTAB CLAGG ELAGG OM POLYCAT FAMR AMR PFECAT NNI PI
oderf     ODECONST ORDSET SETCAT BASTYPE KOERCE EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   RETRACT LINEXP CHARZ ACFS ACF FIELD UFD DIVRING RADCAT FS
                   ES IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT
                   GROUP PDRING FLINEXP CHARNZ TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN PRIMCAT LODOCAT OREPCAT ELTAB BOOLEAN INT LIST
                   ILIST UPOLYC POLYCAT FAMR AMR PFECAT DIFRING DIFEXT STEP
                   SINT NNI
oderf     ODEINT   ORDSET SETCAT BASTYPE KOERCE EUCDOM PID GCDDOM INTDOM 
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID
                   LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER RETRACT
                   LINEXP CHARZ ACFS ACF FIELD UFD DIVRING RADCAT FS ES IEVALAB
                   EVALAB PATAB KONVERT FPATMAB TYPE PATMAB FRETRCT GROUP
                   PDRING FLINEXP CHARNZ TRANFUN TRIGCAT ATRIG HYPCAT AHYP
                   ELEMFUN PRIMCAT INT LIST ILIST INS OINTDOM ORDRING OAGROUP
                   OCAMON OAMON OASGP DIFRING CFCAT REAL STEP LSAGG STAGG 
                   URAGG RCAGG HOAGG AGG LNAGG IXAGG ELTAGG ELTAB CLAGG FLAGG
                   ELAGG OM CACHSET SYMBOL REF ALIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG NNI
radeigen  REP      INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON 
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                   RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP POLYCAT PDRING
                   FAMR AMR CHARNZ FRETRCT EVALAB IEVALAB FLINEXP PFECAT QFCAT
                   FIELD DIVRING FEVALAB ELTAB DIFEXT PATAB FPATMAB TYPE FS ES
                   GROUP OM NNI INT SINT SYMBOL REF ALIST LIST STRING CHAR
                   OUTFORM PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG ACFS ACF
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN COMBOPC
                   LFCAT PRIMCAT SPFCAT ILIST MATCAT ARR2CAT HOAGG AGG PI LSAGG
                   STAGG URAGG RCAGG IXAGG ELTAGG CLAGG ELAGG
solverad  SOLVERAD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE ALGEBRA MODULE ENTIRER ORDSET CHARZ BOOLEAN
                   FS ES RETRACT IEVALAB EVALAB PATAB KONVERT FPATMAB TYPE
                   PATMAB FRETRCT GROUP PDRING FLINEXP LINEXP CHARNZ FIELD
                   UFD DIVRING ACFS ACF RADCAT TRANFUN TRIGCAT ATRIG HYPCAT
                   AHYP ELEMFUN COMBOPC CFCAT LFCAT PRIMCAT SPFCAT SYMBOL INT
                   REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG POLYCAT FAMR AMR PFECAT ILIST 
                   LSAGG STAGG URAGG RCAGG HOAGG AGG IXAGG ELTAGG ELTAB CLAGG
                   ELAGG OM PI
suls      SULS     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE ULSCCAT ULSCAT UPSCAT PSCAT AMR
                   BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                   ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING
                   RETRACT QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP LINEXP
                   PATAB KONVERT FPATMAB TYPE PATMAB STEP ORDSET OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL PFECAT INT BOOLEAN
                   POLYCAT FAMR FRETRCT INS CFCAT UTSCAT OAMONS FPS RNS UPOLYC
                   OM 
supxs     SUPXS    UPXSCCA UPXSCAT UPSCAT PSCAT AMR BMODULE RMODULE COMRING
                   ALGEBRA MODULE CHARZ CHARNZ INTDOM ENTIRER ELTAB DIFRING
                   PDRING RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
                   FIELD EUCDOM PID GCDDOM UFD DIVRING RETRACT ULSCCAT ULSCAT
                   QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP LINEXP PATAB
                   KONVERT FPATMAB TYPE PATMAB STEP ORDSET OINTDOM ORDRING
                   OAGROUP OCAMON OAMON OASGP REAL PFECAT INS CFCAT INT NNI OM
laurent   ULS      RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE ULSCCAT ULSCAT UPSCAT PSCAT
                   AMR BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ
                   INTDOM ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT
                   ATRIG HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD
                   DIVRING RETRACT QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP
                   LINEXP PATAB KONVERT FPATMAB TYPE PATMAB STEP ORDSET OINTDOM
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL PFECAT UTSCAT OAMONS
                   FPS RNS INS CFCAT UPOLYC POLYCAT FAMR FRETRCT OM
laurent   ULSCONS  ULSCCAT ULSCAT UPSCAT PSCAT AMR RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                   ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING
                   RETRACT QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP LINEXP
                   PATAB KONVERT FPATMAB TYPE PATMAB STEP ORDSET OINTDOM 
                   ORDRING OAGROUP OCAMON OAMON OASGP REAL PFECAT UTSCAT INT
                   NNI BOOLEAN INS OAMONS POLYCAT FAMR FRETRCT SYMBOL REF ALIST
                   LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING SRAGG
                   FLAGG LNAGG INS CFCAT LSAGG STAGG URAGG RCAGG HOAGG AGG
                   IXAGG ELTAGG CLAGG OM ILIST PRIMCAT ACFS ACF FS ES GROUP
                   FPS RNS UPOLYC
puiseux   UPXS     RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE
                   SGROUP MONOID LMODULE UPXSCCA UPXSCAT UPSCAT PSCAT AMR
                   BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                   ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING
                   RETRACT ULSCCAT ULSCAT QFCAT FEVALAB EVALAB IEVALAB DIFEXT
                   FLINEXP LINEXP PATAB KONVERT FPATMAB TYPE PATMAB STEP ORDSET
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL PFECAT INS
                   CFCAT INT NNI PI LIST ILIST SINT LSAGG STAGG URAGG RCAGG
                   HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM SYMBOL
                   REF ALIST STRING CHAR OUTFORM PRIMARR A1AGG ISTRING SRAGG
puiseux   UPXSCONS UPXSCCA UPXSCAT UPSCAT PSCAT AMR RING RNG ABELGRP CABMON
                   ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                   BMODULE RMODULE COMRING ALGEBRA MODULE CHARZ CHARNZ INTDOM
                   ENTIRER ELTAB DIFRING PDRING RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN FIELD EUCDOM PID GCDDOM UFD DIVRING
                   RETRACT ULSCAT INS OINTDOM ORDRING OAGROUP OCAMON OAMON 
                   OASGP ORDSET KONVERT LINEXP PATMAB CFCAT REAL STEP INT NNI
                   SYMBOL REF ALIST LIST STRING CHAR SINT OUTFORM PRIMARR A1AGG
                   ISTRING SRAGG FLAGG LNAGG LSAGG STAGG URAGG HOAGG AGG TYPE
                   EVALAB IEVALAB IXAGG ELTAGG CLAGG ELAGG ILIST RCAGG ACFS
                   ACF FS ES PATAB FPATMAB FRETRCT GROUP FLINEXP QFCAT FEVALAB
                   DIFEXT PFECAT
taylor    UTS      UTSCAT UPSCAT PSCAT AMR BMODULE RMODULE COMRING ALGEBRA
                   MODULE CHARZ CHARNZ INTDOM ENTIRER ELTAB DIFRING PDRING
                   RADCAT TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN NNI INT
                   BOOLEAN SINT PI SYMBOL REF ALIST LIST STRING CHAR OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG FLAGG LNAGG FIELD EUCDOM PID
                   GCDDOM UFD DIVRING INS OINTDOM ORDRING OAGROUP OCAMON OAMON
                   OASGP ORDSET KONVERT RETRACT LINEXP PATMAB CFCAT REAL STEP
                   QFCAT FEVALAB EVALAB IEVALAB DIFEXT FLINEXP PATAB FPATMAB
                   TYPE PFECAT OM LSAGG STAGG URAGG RCAGG HOAGG AGG IXAGG 
                   ELTAGG CLAGG ELAGG ILIST PRIMCAT ACFS ACF FS ES FRETRCT
                   GROUP OAMONS
\end{verbatim}
\subsubsection{Completed spad files}
\begin{verbatim}
cont.spad.pamphlet (ESCONT ESCONT1)
ddfact.spad.pamphlet (DDFACT)
defintef.spad.pamphlet (DEFINTEF)
defintrf.spad.pamphlet (DFINTTLS DEFINTRF)
divisor.spad.pamphlet (FRIDEAL FRIDEAL2 MHROWRED FRMOD FDIVCAT HELLFDIV FDIV
                       FDIV2)
d01transform.spad.pamphlet (D01TRNS)
efuls.spad.pamphlet (EFULS)
expr.spad.pamphlet (EXPR PAN2EXPR EXPR2 PMPREDFS PMASSFS PMPRED PMASS HACKPI
                    PICOERCE)
expr2ups.spad.pamphlet (EXPR2UPS)
fs2expxp.spad.pamphlet (FS2EXPXP)
gseries.spad.pamphlet (GSERIES)
integrat.spad.pamphlet (FSCINT FSINT)
irexpand.spad.pamphlet (IR2F IRRF2F)
laplace.spad.pamphlet (LAPLACE INVLAPLA)
laurent.spad.pamphlet (ULSCCAT ULSCONS ULS USL2)
nlode.spad.pamphlet (NODE1)
oderf.spad.pamphlet (BALFACT BOUNDZRO ODEPRIM UTSODETL ODERAT ODETOOLS ODEINT
                     ODECONST)
puiseux.spad.pamphlet (UPXSCCA UPXSCONS UPXS UPXS2)
radeigen.spad.pamphlet (REP)
solverad.spad.pamphlet (SOLVERAD)
suls.spad.pamphlet (SULS)
supxs.spad.pamphlet (SUPXS)
taylor.spad.pamphlet (ITAYLOR UTS UTS2)
\end{verbatim}

<<layer21>>=
LAYER21=${OUT}/DEFINTEF.o ${OUT}/DFINTTLS.o ${OUT}/DEFINTRF.o \
        ${OUT}/D01TRNS.o ${OUT}/EFULS.o \
        ${OUT}/ESCONT.o ${OUT}/EXPR.o \
        ${OUT}/EXPR2UPS.o ${OUT}/FDIV.o ${OUT}/FSCINT.o ${OUT}/FSINT.o \
        ${OUT}/FS2EXPXP.o ${OUT}/GSERIES.o \
        ${OUT}/HELLFDIV.o ${OUT}/INVLAPLA.o \
        ${OUT}/IR2F.o ${OUT}/IRRF2F.o ${OUT}/LAPLACE.o ${OUT}/LIMITPS.o \
        ${OUT}/LODEEF.o ${OUT}/NODE1.o ${OUT}/ODECONST.o \
        ${OUT}/ODEINT.o ${OUT}/REP.o ${OUT}/SOLVERAD.o ${OUT}/SULS.o \
        ${OUT}/SUPXS.o ${OUT}/ULS.o \
        ${OUT}/ULSCONS.o ${OUT}/UPXS.o ${OUT}/UPXSCONS.o ${OUT}/UTS.o 

@

\subsection{Order}
The final order of the layers is determined here.
<<order>>=
ORDER= ${LAYER0BOOTSTRAP} ${LAYER0} ${LAYER1} ${LAYER2} ${LAYER3} ${LAYER4} \
       ${LAYER5} ${LAYER6} ${LAYER7} ${LAYER8} ${LAYER9} ${LAYER10} \
       ${LAYER11} ${LAYER12} ${LAYER13} ${LAYER14} ${LAYER15} ${LAYER16} \
       ${LAYER17} ${LAYER18} ${LAYER19} ${LAYER20} ${LAYER21}

@


transsolve SOLVETRA ORDSET SETCAT BASTYPE KOERCE EUCDOM PID GCDDOM INTDOM
                   COMRING RING RNG ABELGRP CABMON ABELMON ABELSG SGROUP
                   MONOID LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER
                   RETRACT LINEXP CHARZ INT LIST ILIST LSAGG STAGG URAGG RCAGG
                   HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                   KONVERT FLAGG ELAGG OM NNI QFCAT FIELD UFD DIVRING FEVALAB
                   DIFEXT DIFRING PDRING FLINEXP PATAB FPATMAB PATMAB STEP
                   OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL CHARNZ
                   PFECAT BOOLEAN SYMBOL REF ALIST STRING CHAR SINT OUTFORM
                   PRIMARR A1AGG ISTRING SRAGG UPOLYC POLYCAT FAMR AMR FRETRCT
                   FS ES GROUP CACHSET ACFS ACF RADCAT TRANFUN TRIGCAT ATRIG
                   HYPCAT AHYP ELEMFUN COMBOPC CFCAT LFCAT PRIMCAT SPFCAT
                   

catdef    ABELGRP  CABMON
catdef    ABELMON  ABELSG
catdef    ABELSG   (SETCAT)
catdef    ABELSG-  (SETCAT RING) RNG
multfact  ALGMFACT (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
op        BOP      (ORDSET SETCAT BASTYPE KOERCE) SYMBOL
combfunc  COMBF    (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
op        COMMONOP (BOOLEAN) SYMBOL
algcat    CPIMA    (COMRING) RING
catdef    DIVRING  (INS) UFD
exprode   EXPRODE  (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
expr      EXPR2    (ORDSET SETCAT BASTYPE KOERCE RING) RNG
numsolve  FLOATRP  ORDRING
fortran   FORTRAN  (FORTCAT TYPE KOERCE SINT) SYMBOL
pfo       FSRED    (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
gbintern 14  GBINTERN GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                    ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER OAMONS OCAMON
                    OAMON OASGP ORDSET POLYCAT PDRING FAMR AMR CHARZ CHARNZ
                    FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP KONVERT
                    PATMAB PFECAT UFD NNI INT BOOLEAN LIST ILIST LSAGG STAGG
                    ELAGG FLAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG ELTAGG
                    ELTAB CLAGG FLAGG ELAGG OM PI
view2D 14    GRIMAGE  SETCAT BASTYPE KOERCE INS UFD GCDDOM INTDOM COMRING RING
                    RNG ABELGRP CABMON ABELMON ABELSG SGROUP MONOID LMODULE
                    BMODULE RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM
                    ORDRING OAGROUP OCAMON OAMON OASGP ORDSET DIFRING KONVERT
                    RETRACT LINEXP PATMAB CFCAT REAL CHARZ STEP OM FPS RNS
                    FIELD DIVRING RADCAT INT LSAGG STAGG URAGG RCAGG HOAGG
                    AGG TYPE EVALAB IEVALAB LNAGG IXAGG ELTAGG ELTAB CLAGG
                    FLAGG ELAGG LIST ILIST NNI PI DFLOAT PTCAT VECTCAT A1AGG
                    STRING CHAR SINT OUTFORM PRIMARR STRICAT SRAGG ISTRING
                    TRANFUN ELEMFUN HYPCAT ATRIG TRIGCAT RADCAT AHYP BOOLEAN
multfact 14  INNMFACT ORDSET SETCAT BASTYPE KOERCE OAMONS OCAMON OAMON OASGP
                    ABELMON ABELSG CABMON EUCDOM PID GCDDOM INTDOM COMRING
                    RING RNG ABELGRP SGROUP MONOID LMODULE BMODULE RMODULE
                    ALGEBRA MODULE ENTIRER CHARZ POLYCAT PDRING FAMR AMR
                    CHARNZ FRETRCT RETRACT EVALAB IEVALAB FLINEXP LINEXP
                    KONVERT PATMAB PFDCAT UFD PI NNI INT LIST ILIST UPOLYC
                    ELTAB DIFRING DIFEXT STEP FIELD DIVRING BOOLEAN LSAGG
                    STAGG ELAGG FLAGG URAGG RCAGG HOAGG AGG TYPE LNAGG IXAGG
                    ELTAGG CLAGG FLAGG ELAGG OM 
intaf     INTAF    (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
intalg    INTALG   (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
intpm     INTPM    (ORDSET SETCAT BASTYPE KOERCE RETRACT) GCDDOM
rdeef     INTTOOLS (ORDSET SETCAT BASTYPE KOERCE) FS
intrf 14     INTTR    FIELD EUCDOM PID GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SETCAT BASTYPE KOERCE SGROUP MONOID
                    LMODULE BMODULE RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING
                    UPOLYC POLYCAT PDRING FAMR AMR CHARZ CHARNZ FRETRCT RETRACT
                    EVALAB IEVALAB FLINEXP LINEXP ORDSET KONVERT PATMAB PFECAT
                    ELTAB DIFRING DIFEXT STEP QFCAT FEVALAB PATAB FPATMAB TYPE
                    OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP REAL BOOLEAN
                    NNI INT PRIMARR INS CFCAT LIST ILIST PI LSAGG STAGG URAGG
                    RCAGG HOAGG AGG LNAGG IXAGG ELTAGG CLAGG FLAGG ELAGG OM
                    SINT
kl        KERNEL   (CACHSET ORDSET SETCAT BASTYPE KOERCE PATAB KONVERT) INT
liouv     LF       (ORDSET SETCAT BASTYPE KOERCE INTDOM COMRING RING) RNG
odeef     LODEEF   (ORDSET SETCAT BASTYPE KOERCE) EUCDOM
lodof     LODOF    FIELD
catdef    GCDDOM   (INTDOM COMRING RING) RNG
mfinfact  MFINFACT (ORDSET SETCAT BASTYPE KOERCE) OAMONS
special   NTPOLFN  (COMRING) RING
numeric   NUMERIC  (KONVERT COMRING) RING
oct       OC       (COMRING) RING
openmath  OMEXPR   (OM ORDSET SETCAT BASTYPE KOERCE RING) RNG
plot      PLOT     (PPCURVE KOERCE BOOLEAN) INT
plot3d    PLOT3D   PSCURVE KOERCE BOOLEAN INT DFLOAT FPS RNS FIELD EUCDOM
                   PID GCDDOM INTDOM COMRING RING RNG ABELGRP CABMON ABELMON
                   ABELSG SETCAT BASTYPE SGROUP MONOID LMODULE BMODULE 
                   RMODULE ALGEBRA MODULE ENTIRER UFD DIVRING ORDRING OAGROUP
                   OCAMON OAMON OASGP ORDSET REAL KONVERT RETRACT RADCAT
                   PATMAB CHARZ LIST ILIST NNI PI LSAGG STAGG ELAGG FLAGG
                   URAGG RCAGG HOAGG AGG TYPE EVALAB IEVALAB LNAGG IXAGG
                   ELTAGG ELTAB CLAGG FLAGG OM SINT INS OINTDOM DIFRING LINEXP
                   CFCAT STEP TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN
prs 14       PRS      INTDOM COMRING RING RNG ABELGRP CABMON ABELMON ABELSG
                    SETCAT BASTYPE KOERCE SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER UPOLYC POLYCAT PDRING
                    FAMR AMR CHARZ CHARNZ FRETRCT RETRACT EVALAB IEVALAB
                    FLINEXP LINEXP ORDSET KONVERT PATMAB GCDDOM PFECAT UFD
                    ELTAB DIFRING DIFEXT STEP EUCDOM PID FIELD DIVRING NNI
                    INT VECTOR IVECTOR IARRAY1 VECTCAT BOOLEAN PI A1AGG
                    FLAGG LNAGG IXAGG HOAGG AGG TYPE ELTAGG CLAGG FINITE
                    LIST ILIST LSAGG STAGG       
quat      QUATCAT  (COMRING) RING
boolean   REF      TYPE SETCAT BASTYPE KOERCE fails
routines  ROUTINE  TBAGG
sttaylor  STTAYLOR RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT BASTYPE
                   KOERCE SGROUP MONOID LMODULE SINT NNI INT LIST ILIST LSAGG
                   STAGG ALGEBRA MODULE BMODULE RMODULE INS UFD GCDDOM INTDOM
                   COMRING ENTIRER EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON
                   OAMON OASGRP ORDSET DIFRING KONVERT RETRACT LINEXP PATMAB
                   CFCAT REAL CHARZ STEP
sttf     (14)STTF     ALGEBRA RING RNG ABELGRP CABMON ABELMON ABELSG SETCAT
                  BASTYPE KOERCE SGROUP MONOID LMODULE MODULE BMODULE RMODULE
                  TRANFUN TRIGCAT ATRIG HYPCAT AHYP ELEMFUN STRING CHAR SINT
                  OUTFORM LIST INT PRIMARR A1AGG ISTRING ILIST LSAGG STAGG
                  ELAGG FLAGG URAGG INS UFD GCDDOM INTDOM COMRING ENTIRER
                  EUCDOM PID OINTDOM ORDRING OAGROUP OCAMON OAMON OASGP ORDSET
                  DIFRING KONVERT RETRACT LINEXP PATMAB CFCA REAL CHARZ STEP
                  NNI PI
newpoint (14) SUBSPACE SETCAT BASTYPE KOERCE RING RNG ABELGRP CABMON ABELMON ABELSG
                  SGROUP MONOID LMODULE INT LIST ILIST LSAGG STAGG ELAGG FLAGG
                  URAGG LNAGG RCAGG IXAGG CLAGG HOAGG ORDSET AGG ELTAGG NNI
                  BOOLEAN PI STRING CHAR SINT OUTFORM PRIMARR A1AGG ISTRING
                  TYPE EVALAB IEVALAB ELTAB KONVERT OM
symbol    SYMBOL   (ORDSET SETCAT BASTYPE KOERCE KONVERT OM PATMAB INS) UFD
catdef    UFD      GCDDOM
view2d 14    VIEW2D   SETCAT BASTYPE KOERCE DFLOAT INT BOOLEAN PI NNI VECTCAT
                    A1AGG FLAGG LNAGG IXAGG HOAGG AGG TYPE EVALAB IEVALAB
                    ELTAGG ELTAB CLAGG KONVERT ORDSET VECTOR IVECTOR IARRAY1
                    LIST ILIST LSAGG STAGG SINT STRING CHAR OUTFORM PRIMARR
                    ISTRING INS UFD GCDDOM INTDOM COMRING RING RNG ABELGRP
                    CABMON ABELMON ABELSG SGROUP MONOID LMODULE BMODULE
                    RMODULE ALGEBRA MODULE ENTIRER EUCDOM PID OINTDOM ORDRING
                    OAGROUP OCAMON OAMON OAGSP DIFRING RETRACT LINEXP PATMAB
                    CFCAT REAL CHARZ STEP OM SRAGG STRICAT ELAGG FLAGG FPS
                    RNS FIELD DIVRING RADCAT

ALAGG failed
ALGMANIP INTDOM
ALGPKG INTDOM
ALGSC FRNAALG
ALIST ALAGG
APPRULE SETCAT
ATTRBUT TBAGG

BBTREE BTCAT
BINARY QFCAT
BOP1 SETCAT
BPADICRT QFCAT
BSTREE BTCAT
BTCAT RCAGG
BTOURN RCAGG
BTREE RCAGG

CCLASS SETCAT
CLAGG HOAGG

D01AGNT failed
D01WGTS failed
DBLRESP FIELD
DECIMAL QFCAT
DEFINTRF EUCDOM
DFSFUN FPS
DIFRING RING
DMP POLYCAT


ES ES
ESTOOLS failed
EXPEXPAN FIELD
EXPR FS
EXPRTUBE INS
EXPUPXS FIELD

FCPAK1 INS
FC SETCAT
FEXPR ES
FFCGP XF
FFCG XF
FFCGX XF
FFF FFIELDC
FFHOM XF
FFNBP XF
FFNB XF
FFNBX XF
FFPOLY FPC
FFP XF
FF XF
FFX XF
FLOATCP PID
FLOAT FPS
FMTC INTDOM
FORDER SETCAT
FPARFRAC SETCAT
FPS RNS
FRAC QFCAT
FRNAAF2 FRNAALG
FRNAALG NAALG
FR INTDOM
FS2EXPXP PID
FS2UPS GCDDOM
FSINT PID
FSPRMELT INTDOM
FST SYMBOL
FSUPFACT INTDOM
FUNCTION SETCAT

GALFACT UPOLYC
GAUSSFAC INT
generic  GCNAALG  FRNAALG
GDMP POLYCAT
GENUFACT PID
GENUPS INTDOM
GPOLSET PSETCAT
GSERIES RING
GTSET TSETCAT

HACKPI PID
HDMP POLYCAT
HEXADEC QFCAT
HOAGG SETCAT

IDEAL SETCAT
IDECOMP INS
IFF XF
ILIST LSAGG
INBFF PID
INEP PID
INFORM1 SYMBOL
INFORM SEXCAT
INFPROD0 INTDOM
INFSP INTDOM
INMODGCD PID
INPRODFF PID
INPRODPF PID
INTEF INTDOM
INTG0 INTDOM
INTHERAL PID
INTPAF INTDOM
INTSLPE INT
INT INS
INVLAPLA PID
IPF PID
IPRNTPK SYMBOL
IR2F INTDOM
IRRF2F INTDOM
IR MODULE
IRURPK PID
ISTRING SRAGG
ISUPS UPSCAT

JORDAN NAALG

KOVACIC RING

LAPLACE PID
LA RING
LAUPOL RING
LAZM3PK INTDOM
LEXTRIPK INTDOM
LIB TBAGG
LIE NAALG
LIMITPS INTDOM
LINDEP INTDOM
LMDICT MDAGG
LODOOPS PID
LODO LODOCAT
LO MODULE
LSQM SMATCAT
p
M3D SETCAT
MATRIX SETCAT
MCMPLX INTDOM
MFLOAT RNS
MKFLCFN SYMBOL
mkfunc   MKBCFUNC KONVERT TYPE
MODMON UPOLYC
MPOLY ORDFIN
MRING RING
MSET SETCAT
MTSCAT ORDSET
MULTFACT ORDSET

NAGF01 SYMBOL
NAGF02 SYMBOL
NAGF04 SYMBOL
NAGF07 SYMBOL
NAGSP SYMBOL
NAGS SYMBOL
NCEP PID
NLINSOL INTDOM
NODE1 ORDSET
NORMPK INTDOM
NORMRETR PID
NREP PID
NSMP RPOLCAT
NSUP UPOLYC
NTSCAT RSETCAT
NUMFMT STRING

OCTCT2 OC
OCT OC
ODECONST ORDSET
ODEEF ORDSET
ODEINT ORDSET
ODEPAL PID
ODEPROB SETCAT
ODERAT PID
ODERTRIC PID
ODR SETCAT
OMERRK SETCAT
OMERR SETCAT
OMLO RING
OPTPACK failed
OSI SETCAT
OUTFORM SETCAT
OVAR SETCAT

PADE PID
PADICRAT QFCAT
PADICRC QFCAT
PAN2EXPR INS
PATTERN SETCAT
PDEPACK failed
PENDTREE RCAGG
PERMGRP SETCAT
PERM MONOID
PFOQ UPOLYC
PFO SETCAT
PF PID
PICOERCE SETCAT
PI SETCAT
PLEQN INTDOM
PMASSFS SETCAT
PMFS SETCAT
PMKERNEL SETCAT
PMPREDFS SETCAT
PMSYM SETCAT
PNTHEORY failed
POLY POLYCAT
PRIMELT INTDOM
PRIMES INS
PSETPK INTDOM

QALGSET2 SYMBOL
QCMPACK INTDOM
QUATCT2 QUATCAT
QUAT QUATCAT

RADIX QFCAT
RCAGG SETCAT
RCFIELD INS
RDEEF INTDOM
RDEEFS INTDOM
RDIST SETCAT
RDIV INTDOM
RECLOS RCFIELD
REGSET RSETCAT
REP1 RING
REP2 RING
REP INS
RESULT TBAGG
RGCHAIN RSETCAT
RMATRIX BMODULE
RNS INS
ROIRC RRCC
ROMAN INS
RPOLCAT POLYCAT
RSDCMPK INTDOM
RSETCAT INTDOM
RSETGCD INTDOM
RULECOLD SETCAT
RULESET SETCAT
RULE SETCAT
RURPK INTDOM

SAOS SETCAT
SCPKG INTDOM
SEGBIND SETCAT
SETAGG SETCAT
SETMN INT
SET failed
SFORT ES
SFQCMPK INTDOM
SFRGCD INTDOM
SFRTCAT RSETCAT
SGCF INT
SIGNEF INTDOM
SIMPAN INS
SMP POLYCAT
SNTSCAT RSETCAT
SOLVERAD INTDOM
SOLVESER INTDOM
SOLVETRA INTDOM
SPACE3 SPACEC
SPECOUT SYMBOL
SQMATRIX RING
SRDCMPK INTDOM
SREGSET RSETCAT
STAGG URAGG
STTFNC RING
SULS RING
SUP UPOLYC
SUPXS RING
SUTS RING
SWITCH INT
SYMS SYMBOL
SYMTAB INS
SYSSOLP INTDOM

TOOLSIGN RING
TRMANIP INTDOM
TUBETOOL RNS
TWOFACT INTDOM

ULSCONS ULSCAT
ULS RING
UP UPOLYC
UPXSCONS UPXSCAT
UPXSSING INTDOM
UPXS RING
URAGG failed
UTS2 RING
UTSODE RING
UTSODETL RING
UTS RING

VARIABLE SYMBOL
VIEW3D NNI
VOID STRING

WUTSET TSETCAT



ZDSOLVE failed

\section{The Environment}
\subsection{The working directories}
We define 5 directories for this build. The {\bf IN} directory
contains the pamphlet files for the algebra. These are expanded
into the {\bf MID} directory as either .spad or .as files. The
.spad files are compiled by the native spad internal compiler.
The .as files are compiled using the Aldor compiler. The output
of the compilation has two purposes. Part of the information is
used to build various database files (daase files). The other
part is executable code which is placed in the 
{\bf OUT} directory. When invoked as ``make document'' we
construct the .dvi files in the {\bf DOC} directory.
<<environment>>=
IN=${SRC}/algebra
MID=${INT}/algebra
OUT=${MNT}/${SYS}/algebra
DOC=${INT}/doc/int/algebra

@
\subsection{The depsys variable}
The {\bf depsys} image is the compile-time environment for boot and lisp
files.
<<environment>>=
DEPSYS=${OBJ}/${SYS}/bin/depsys

@
\subsection{The interpsys variable}
The {\bf interpsys} image is the compile-time environment for algebra
files.
<<environment>>=
INTERPSYS=${OBJ}/${SYS}/bin/interpsys

@
\subsection{The SPADFILES list}
Note that we have excluded {\bf mlift.spad.jhd} from this list.
We need to figure out which mlift.spad to keep.
<<environment>>=
SPADFILES= \
 ${MID}/acplot.spad ${MID}/aggcat2.spad ${MID}/aggcat.spad \
 ${MID}/algcat.spad ${MID}/algext.spad ${MID}/algfact.spad \
 ${MID}/algfunc.spad ${MID}/allfact.spad ${MID}/alql.spad \
 ${MID}/annacat.spad ${MID}/any.spad ${MID}/array1.spad \
 ${MID}/array2.spad ${MID}/asp.spad ${MID}/attreg.spad \
 ${MID}/bags.spad ${MID}/bezout.spad ${MID}/boolean.spad \
 ${MID}/brill.spad \
 ${MID}/c02.spad ${MID}/c05.spad ${MID}/c06.spad \
 ${MID}/card.spad ${MID}/carten.spad ${MID}/catdef.spad \
 ${MID}/cden.spad ${MID}/clifford.spad ${MID}/clip.spad \
 ${MID}/cmplxrt.spad ${MID}/coerce.spad ${MID}/color.spad \
 ${MID}/combfunc.spad ${MID}/combinat.spad ${MID}/complet.spad \
 ${MID}/constant.spad ${MID}/contfrac.spad ${MID}/cont.spad \
 ${MID}/coordsys.spad ${MID}/cra.spad ${MID}/crfp.spad \
 ${MID}/curve.spad ${MID}/cycles.spad ${MID}/cyclotom.spad \
 ${MID}/d01agents.spad ${MID}/d01Package.spad \
 ${MID}/d01routine.spad ${MID}/d01.spad ${MID}/d01transform.spad \
 ${MID}/d01weights.spad ${MID}/d02agents.spad \
 ${MID}/d02Package.spad ${MID}/d02routine.spad ${MID}/d02.spad \
 ${MID}/d03agents.spad ${MID}/d03Package.spad \
 ${MID}/d03routine.spad ${MID}/d03.spad ${MID}/ddfact.spad \
 ${MID}/defaults.spad ${MID}/defintef.spad ${MID}/defintrf.spad \
 ${MID}/degred.spad ${MID}/derham.spad ${MID}/dhmatrix.spad \
 ${MID}/divisor.spad ${MID}/dpolcat.spad ${MID}/drawopt.spad \
 ${MID}/drawpak.spad ${MID}/draw.spad \
 ${MID}/e01.spad ${MID}/e02.spad ${MID}/e04agents.spad \
 ${MID}/e04Package.spad ${MID}/e04routine.spad ${MID}/e04.spad \
 ${MID}/efstruc.spad ${MID}/efuls.spad ${MID}/efupxs.spad \
 ${MID}/eigen.spad ${MID}/elemntry.spad ${MID}/elfuts.spad \
 ${MID}/equation1.spad ${MID}/equation2.spad ${MID}/error.spad \
 ${MID}/expexpan.spad ${MID}/exposed.lsp ${MID}/expr2ups.spad \
 ${MID}/exprode.spad ${MID}/expr.spad \
 ${MID}/f01.spad ${MID}/f02.spad ${MID}/f04.spad \
 ${MID}/f07.spad ${MID}/facutil.spad ${MID}/ffcat.spad \
 ${MID}/ffcg.spad ${MID}/fff.spad ${MID}/ffhom.spad \
 ${MID}/ffnb.spad ${MID}/ffpoly2.spad ${MID}/ffpoly.spad \
 ${MID}/ffp.spad ${MID}/ffx.spad \
 ${MID}/files.spad ${MID}/float.spad ${MID}/fmod.spad \
 ${MID}/fname.spad ${MID}/fnla.spad ${MID}/formula.spad \
 ${MID}/fortcat.spad ${MID}/fortmac.spad ${MID}/fortpak.spad \
 ${MID}/fortran.spad ${MID}/forttyp.spad ${MID}/fourier.spad \
 ${MID}/fparfrac.spad ${MID}/fraction.spad ${MID}/free.spad \
 ${MID}/fr.spad ${MID}/fs2expxp.spad ${MID}/fs2ups.spad \
 ${MID}/fspace.spad ${MID}/funcpkgs.spad ${MID}/functions.spad \
 ${MID}/galfact.spad ${MID}/galfactu.spad ${MID}/galpolyu.spad \
 ${MID}/galutil.spad ${MID}/gaussfac.spad ${MID}/gaussian.spad \
 ${MID}/gbeuclid.spad ${MID}/gbintern.spad ${MID}/gb.spad \
 ${MID}/gdirprod.spad ${MID}/gdpoly.spad ${MID}/geneez.spad \
 ${MID}/generic.spad ${MID}/genufact.spad ${MID}/genups.spad \
 ${MID}/ghensel.spad ${MID}/gpgcd.spad ${MID}/gpol.spad \
 ${MID}/grdef.spad ${MID}/groebf.spad ${MID}/groebsol.spad \
 ${MID}/gseries.spad \
 ${MID}/ideal.spad ${MID}/idecomp.spad ${MID}/indexedp.spad \
 ${MID}/infprod.spad ${MID}/intaf.spad ${MID}/intalg.spad \
 ${MID}/intaux.spad ${MID}/intclos.spad ${MID}/intef.spad \
 ${MID}/integer.spad ${MID}/integrat.spad ${MID}/INTERP.EXPOSED \
 ${MID}/interval.spad \
 ${MID}/intfact.spad ${MID}/intpm.spad \
 ${MID}/intrf.spad \
 ${MID}/irexpand.spad \
 ${MID}/irsn.spad ${MID}/ituple.spad \
 ${MID}/kl.spad ${MID}/kovacic.spad \
 ${MID}/laplace.spad ${MID}/laurent.spad ${MID}/leadcdet.spad \
 ${MID}/lie.spad ${MID}/limitps.spad ${MID}/lindep.spad \
 ${MID}/lingrob.spad ${MID}/liouv.spad ${MID}/listgcd.spad \
 ${MID}/list.spad ${MID}/lmdict.spad ${MID}/lodof.spad \
 ${MID}/lodop.spad ${MID}/lodo.spad \
 ${MID}/manip.spad ${MID}/mappkg.spad ${MID}/matcat.spad \
 ${MID}/matfuns.spad ${MID}/matrix.spad ${MID}/matstor.spad \
 ${MID}/mesh.spad ${MID}/mfinfact.spad ${MID}/misc.spad \
 ${MID}/mkfunc.spad ${MID}/mkrecord.spad \
 ${MID}/mlift.spad ${MID}/moddfact.spad ${MID}/modgcd.spad \
 ${MID}/modmonom.spad ${MID}/modmon.spad ${MID}/modring.spad \
 ${MID}/moebius.spad ${MID}/mring.spad ${MID}/mset.spad \
 ${MID}/mts.spad ${MID}/multfact.spad ${MID}/multpoly.spad \
 ${MID}/multsqfr.spad \
 ${MID}/naalgc.spad ${MID}/naalg.spad \
 ${MID}/newdata.spad ${MID}/newpoint.spad \
 ${MID}/newpoly.spad ${MID}/nlinsol.spad ${MID}/nlode.spad \
 ${MID}/npcoef.spad \
 ${MID}/nregset.spad \
 ${MID}/nsregset.spad ${MID}/numeigen.spad ${MID}/numeric.spad \
 ${MID}/numode.spad ${MID}/numquad.spad ${MID}/numsolve.spad \
 ${MID}/numtheor.spad \
 ${MID}/oct.spad ${MID}/odealg.spad ${MID}/odeef.spad \
 ${MID}/oderf.spad ${MID}/omcat.spad ${MID}/omdev.spad \
 ${MID}/omerror.spad ${MID}/omserver.spad ${MID}/opalg.spad \
 ${MID}/openmath.spad ${MID}/op.spad ${MID}/ore.spad \
 ${MID}/outform.spad ${MID}/out.spad \
 ${MID}/pade.spad ${MID}/padiclib.spad ${MID}/padic.spad \
 ${MID}/paramete.spad ${MID}/partperm.spad ${MID}/patmatch1.spad \
 ${MID}/patmatch2.spad ${MID}/pattern.spad ${MID}/pcurve.spad \
 ${MID}/pdecomp.spad ${MID}/perman.spad ${MID}/permgrps.spad \
 ${MID}/perm.spad ${MID}/pfbr.spad ${MID}/pfo.spad \
 ${MID}/pfr.spad ${MID}/pf.spad ${MID}/pgcd.spad \
 ${MID}/pgrobner.spad ${MID}/pinterp.spad ${MID}/pleqn.spad \
 ${MID}/plot3d.spad ${MID}/plot.spad ${MID}/plottool.spad \
 ${MID}/polset.spad ${MID}/poltopol.spad ${MID}/polycat.spad \
 ${MID}/poly.spad ${MID}/primelt.spad ${MID}/print.spad \
 ${MID}/product.spad ${MID}/prs.spad ${MID}/prtition.spad \
 ${MID}/pscat.spad ${MID}/pseudolin.spad ${MID}/ptranfn.spad \
 ${MID}/puiseux.spad \
 ${MID}/qalgset.spad ${MID}/quat.spad \
 ${MID}/radeigen.spad ${MID}/radix.spad ${MID}/random.spad \
 ${MID}/ratfact.spad ${MID}/rdeef.spad ${MID}/rderf.spad \
 ${MID}/rdesys.spad ${MID}/real0q.spad ${MID}/realzero.spad \
 ${MID}/reclos.spad ${MID}/regset.spad ${MID}/rep1.spad \
 ${MID}/rep2.spad ${MID}/resring.spad ${MID}/retract.spad \
 ${MID}/rf.spad ${MID}/riccati.spad ${MID}/routines.spad \
 ${MID}/rule.spad \
 ${MID}/seg.spad ${MID}/setorder.spad ${MID}/sets.spad \
 ${MID}/sex.spad ${MID}/sf.spad ${MID}/sgcf.spad \
 ${MID}/sign.spad ${MID}/si.spad ${MID}/smith.spad \
 ${MID}/solvedio.spad ${MID}/solvefor.spad ${MID}/solvelin.spad \
 ${MID}/solverad.spad ${MID}/sortpak.spad ${MID}/space.spad \
 ${MID}/special.spad ${MID}/sregset.spad ${MID}/s.spad \
 ${MID}/stream.spad ${MID}/string.spad ${MID}/sttaylor.spad \
 ${MID}/sttf.spad ${MID}/sturm.spad ${MID}/suchthat.spad \
 ${MID}/suls.spad ${MID}/sum.spad ${MID}/sups.spad \
 ${MID}/supxs.spad ${MID}/suts.spad ${MID}/symbol.spad \
 ${MID}/syssolp.spad ${MID}/system.spad \
 ${MID}/tableau.spad ${MID}/table.spad ${MID}/taylor.spad \
 ${MID}/tex.spad ${MID}/tools.spad ${MID}/transsolve.spad \
 ${MID}/tree.spad ${MID}/trigcat.spad ${MID}/triset.spad \
 ${MID}/tube.spad ${MID}/twofact.spad \
 ${MID}/unifact.spad ${MID}/updecomp.spad ${MID}/updivp.spad \
 ${MID}/utsode.spad \
 ${MID}/variable.spad ${MID}/vector.spad ${MID}/view2D.spad \
 ${MID}/view3D.spad ${MID}/viewDef.spad ${MID}/viewpack.spad \
 ${MID}/void.spad \
 ${MID}/weier.spad ${MID}/wtpol.spad \
 ${MID}/xlpoly.spad ${MID}/xpoly.spad \
 ${MID}/ystream.spad \
 ${MID}/zerodim.spad

@
\subsection{The ALDORFILES list}
<<environment>>=
ALDORFILES= \
 ${MID}/axtimer.as \
 ${MID}/ffrac.as \
 ${MID}/herm.as \
 ${MID}/interval.as \
 ${MID}/invnode.as ${MID}/invrender.as \
 ${MID}/invtypes.as ${MID}/invutils.as \
 ${MID}/iviews.as \
 ${MID}/ndftip.as \
 ${MID}/nepip.as \
 ${MID}/noptip.as ${MID}/nqip.as \
 ${MID}/nrc.as ${MID}/nsfip.as 

@
\subsection{The DOCFILES list}
<<environment>>=
DOCFILES= \
 ${DOC}/acplot.spad.dvi ${DOC}/aggcat2.spad.dvi ${DOC}/aggcat.spad.dvi \
 ${DOC}/algcat.spad.dvi ${DOC}/algext.spad.dvi ${DOC}/algfact.spad.dvi \
 ${DOC}/algfunc.spad.dvi ${DOC}/allfact.spad.dvi ${DOC}/alql.spad.dvi \
 ${DOC}/annacat.spad.dvi ${DOC}/any.spad.dvi ${DOC}/array1.spad.dvi \
 ${DOC}/array2.spad.dvi ${DOC}/asp.spad.dvi ${DOC}/attreg.spad.dvi \
 ${DOC}/axtimer.as.dvi \
 ${DOC}/bags.spad.dvi ${DOC}/bezout.spad.dvi ${DOC}/boolean.spad.dvi \
 ${DOC}/brill.spad.dvi \
 ${DOC}/c02.spad.dvi ${DOC}/c05.spad.dvi ${DOC}/c06.spad.dvi \
 ${DOC}/card.spad.dvi ${DOC}/carten.spad.dvi ${DOC}/catdef.spad.dvi \
 ${DOC}/cden.spad.dvi ${DOC}/clifford.spad.dvi ${DOC}/clip.spad.dvi \
 ${DOC}/cmplxrt.spad.dvi ${DOC}/coerce.spad.dvi ${DOC}/color.spad.dvi \
 ${DOC}/combfunc.spad.dvi ${DOC}/combinat.spad.dvi ${DOC}/complet.spad.dvi \
 ${DOC}/constant.spad.dvi ${DOC}/contfrac.spad.dvi ${DOC}/cont.spad.dvi \
 ${DOC}/coordsys.spad.dvi ${DOC}/cra.spad.dvi ${DOC}/crfp.spad.dvi \
 ${DOC}/curve.spad.dvi ${DOC}/cycles.spad.dvi ${DOC}/cyclotom.spad.dvi \
 ${DOC}/d01agents.spad.dvi ${DOC}/d01Package.spad.dvi \
 ${DOC}/d01routine.spad.dvi ${DOC}/d01.spad.dvi ${DOC}/d01transform.spad.dvi \
 ${DOC}/d01weights.spad.dvi ${DOC}/d02agents.spad.dvi \
 ${DOC}/d02Package.spad.dvi ${DOC}/d02routine.spad.dvi ${DOC}/d02.spad.dvi \
 ${DOC}/d03agents.spad.dvi ${DOC}/d03Package.spad.dvi \
 ${DOC}/d03routine.spad.dvi ${DOC}/d03.spad.dvi ${DOC}/ddfact.spad.dvi \
 ${DOC}/defaults.spad.dvi ${DOC}/defintef.spad.dvi ${DOC}/defintrf.spad.dvi \
 ${DOC}/degred.spad.dvi ${DOC}/derham.spad.dvi ${DOC}/dhmatrix.spad.dvi \
 ${DOC}/divisor.spad.dvi ${DOC}/dpolcat.spad.dvi ${DOC}/drawopt.spad.dvi \
 ${DOC}/drawpak.spad.dvi ${DOC}/draw.spad.dvi \
 ${DOC}/e01.spad.dvi ${DOC}/e02.spad.dvi ${DOC}/e04agents.spad.dvi \
 ${DOC}/e04Package.spad.dvi ${DOC}/e04routine.spad.dvi ${DOC}/e04.spad.dvi \
 ${DOC}/efstruc.spad.dvi ${DOC}/efuls.spad.dvi ${DOC}/efupxs.spad.dvi \
 ${DOC}/eigen.spad.dvi ${DOC}/elemntry.spad.dvi ${DOC}/elfuts.spad.dvi \
 ${DOC}/equation1.spad.dvi ${DOC}/equation2.spad.dvi ${DOC}/error.spad.dvi \
 ${DOC}/expexpan.spad.dvi ${DOC}/exposed.lsp.dvi ${DOC}/expr2ups.spad.dvi \
 ${DOC}/exprode.spad.dvi ${DOC}/expr.spad.dvi \
 ${DOC}/f01.spad.dvi ${DOC}/f02.spad.dvi ${DOC}/f04.spad.dvi \
 ${DOC}/f07.spad.dvi ${DOC}/facutil.spad.dvi ${DOC}/ffcat.spad.dvi \
 ${DOC}/ffcg.spad.dvi ${DOC}/fff.spad.dvi ${DOC}/ffhom.spad.dvi \
 ${DOC}/ffnb.spad.dvi ${DOC}/ffpoly2.spad.dvi ${DOC}/ffpoly.spad.dvi \
 ${DOC}/ffp.spad.dvi ${DOC}/ffrac.as.dvi ${DOC}/ffx.spad.dvi \
 ${DOC}/files.spad.dvi ${DOC}/float.spad.dvi ${DOC}/fmod.spad.dvi \
 ${DOC}/fname.spad.dvi ${DOC}/fnla.spad.dvi ${DOC}/formula.spad.dvi \
 ${DOC}/fortcat.spad.dvi ${DOC}/fortmac.spad.dvi ${DOC}/fortpak.spad.dvi \
 ${DOC}/fortran.spad.dvi ${DOC}/forttyp.spad.dvi ${DOC}/fourier.spad.dvi \
 ${DOC}/fparfrac.spad.dvi ${DOC}/fraction.spad.dvi ${DOC}/free.spad.dvi \
 ${DOC}/fr.spad.dvi ${DOC}/fs2expxp.spad.dvi ${DOC}/fs2ups.spad.dvi \
 ${DOC}/fspace.spad.dvi ${DOC}/funcpkgs.spad.dvi ${DOC}/functions.spad.dvi \
 ${DOC}/galfact.spad.dvi ${DOC}/galfactu.spad.dvi ${DOC}/galpolyu.spad.dvi \
 ${DOC}/galutil.spad.dvi ${DOC}/gaussfac.spad.dvi ${DOC}/gaussian.spad.dvi \
 ${DOC}/gbeuclid.spad.dvi ${DOC}/gbintern.spad.dvi ${DOC}/gb.spad.dvi \
 ${DOC}/gdirprod.spad.dvi ${DOC}/gdpoly.spad.dvi ${DOC}/geneez.spad.dvi \
 ${DOC}/generic.spad.dvi ${DOC}/genufact.spad.dvi ${DOC}/genups.spad.dvi \
 ${DOC}/ghensel.spad.dvi ${DOC}/gpgcd.spad.dvi ${DOC}/gpol.spad.dvi \
 ${DOC}/grdef.spad.dvi ${DOC}/groebf.spad.dvi ${DOC}/groebsol.spad.dvi \
 ${DOC}/gseries.spad.dvi \
 ${DOC}/herm.as.dvi \
 ${DOC}/ideal.spad.dvi ${DOC}/idecomp.spad.dvi ${DOC}/indexedp.spad.dvi \
 ${DOC}/infprod.spad.dvi ${DOC}/intaf.spad.dvi ${DOC}/intalg.spad.dvi \
 ${DOC}/intaux.spad.dvi ${DOC}/intclos.spad.dvi ${DOC}/intef.spad.dvi \
 ${DOC}/integer.spad.dvi ${DOC}/integrat.spad.dvi ${DOC}/INTERP.EXPOSED.dvi \
 ${DOC}/interval.as.dvi ${DOC}/interval.spad.div \
 ${DOC}/intfact.spad.dvi ${DOC}/intpm.spad.dvi \
 ${DOC}/intrf.spad.dvi ${DOC}/invnode.as.dvi ${DOC}/invrender.as.dvi \
 ${DOC}/invtypes.as.dvi ${DOC}/invutils.as.dvi ${DOC}/irexpand.spad.dvi \
 ${DOC}/irsn.spad.dvi ${DOC}/ituple.spad.dvi ${DOC}/iviews.as.dvi \
 ${DOC}/kl.spad.dvi ${DOC}/kovacic.spad.dvi \
 ${DOC}/laplace.spad.dvi ${DOC}/laurent.spad.dvi ${DOC}/leadcdet.spad.dvi \
 ${DOC}/lie.spad.dvi ${DOC}/limitps.spad.dvi ${DOC}/lindep.spad.dvi \
 ${DOC}/lingrob.spad.dvi ${DOC}/liouv.spad.dvi ${DOC}/listgcd.spad.dvi \
 ${DOC}/list.spad.dvi ${DOC}/lmdict.spad.dvi ${DOC}/lodof.spad.dvi \
 ${DOC}/lodop.spad.dvi ${DOC}/lodo.spad.dvi \
 ${DOC}/manip.spad.dvi ${DOC}/mappkg.spad.dvi ${DOC}/matcat.spad.dvi \
 ${DOC}/matfuns.spad.dvi ${DOC}/matrix.spad.dvi ${DOC}/matstor.spad.dvi \
 ${DOC}/mesh.spad.dvi ${DOC}/mfinfact.spad.dvi ${DOC}/misc.spad.dvi \
 ${DOC}/mkfunc.spad.dvi ${DOC}/mkrecord.spad.dvi ${DOC}/mlift.spad.jhd.dvi \
 ${DOC}/mlift.spad.dvi ${DOC}/moddfact.spad.dvi ${DOC}/modgcd.spad.dvi \
 ${DOC}/modmonom.spad.dvi ${DOC}/modmon.spad.dvi ${DOC}/modring.spad.dvi \
 ${DOC}/moebius.spad.dvi ${DOC}/mring.spad.dvi ${DOC}/mset.spad.dvi \
 ${DOC}/mts.spad.dvi ${DOC}/multfact.spad.dvi ${DOC}/multpoly.spad.dvi \
 ${DOC}/multsqfr.spad.dvi \
 ${DOC}/naalgc.spad.dvi ${DOC}/naalg.spad.dvi ${DOC}/ndftip.as.dvi \
 ${DOC}/nepip.as.dvi ${DOC}/newdata.spad.dvi ${DOC}/newpoint.spad.dvi \
 ${DOC}/newpoly.spad.dvi ${DOC}/nlinsol.spad.dvi ${DOC}/nlode.spad.dvi \
 ${DOC}/noptip.as.dvi ${DOC}/npcoef.spad.dvi ${DOC}/nqip.as.dvi \
 ${DOC}/nrc.as.dvi ${DOC}/nregset.spad.dvi ${DOC}/nsfip.as.dvi \
 ${DOC}/nsregset.spad.dvi ${DOC}/numeigen.spad.dvi ${DOC}/numeric.spad.dvi \
 ${DOC}/numode.spad.dvi ${DOC}/numquad.spad.dvi ${DOC}/numsolve.spad.dvi \
 ${DOC}/numtheor.spad.dvi \
 ${DOC}/oct.spad.dvi ${DOC}/odealg.spad.dvi ${DOC}/odeef.spad.dvi \
 ${DOC}/oderf.spad.dvi ${DOC}/omcat.spad.dvi ${DOC}/omdev.spad.dvi \
 ${DOC}/omerror.spad.dvi ${DOC}/omserver.spad.dvi ${DOC}/opalg.spad.dvi \
 ${DOC}/openmath.spad.dvi ${DOC}/op.spad.dvi ${DOC}/ore.spad.dvi \
 ${DOC}/outform.spad.dvi ${DOC}/out.spad.dvi \
 ${DOC}/pade.spad.dvi ${DOC}/padiclib.spad.dvi ${DOC}/padic.spad.dvi \
 ${DOC}/paramete.spad.dvi ${DOC}/partperm.spad.dvi ${DOC}/patmatch1.spad.dvi \
 ${DOC}/patmatch2.spad.dvi ${DOC}/pattern.spad.dvi ${DOC}/pcurve.spad.dvi \
 ${DOC}/pdecomp.spad.dvi ${DOC}/perman.spad.dvi ${DOC}/permgrps.spad.dvi \
 ${DOC}/perm.spad.dvi ${DOC}/pfbr.spad.dvi ${DOC}/pfo.spad.dvi \
 ${DOC}/pfr.spad.dvi ${DOC}/pf.spad.dvi ${DOC}/pgcd.spad.dvi \
 ${DOC}/pgrobner.spad.dvi ${DOC}/pinterp.spad.dvi ${DOC}/pleqn.spad.dvi \
 ${DOC}/plot3d.spad.dvi ${DOC}/plot.spad.dvi ${DOC}/plottool.spad.dvi \
 ${DOC}/polset.spad.dvi ${DOC}/poltopol.spad.dvi ${DOC}/polycat.spad.dvi \
 ${DOC}/poly.spad.dvi ${DOC}/primelt.spad.dvi ${DOC}/print.spad.dvi \
 ${DOC}/product.spad.dvi ${DOC}/prs.spad.dvi ${DOC}/prtition.spad.dvi \
 ${DOC}/pscat.spad.dvi ${DOC}/pseudolin.spad.dvi ${DOC}/ptranfn.spad.dvi \
 ${DOC}/puiseux.spad.dvi \
 ${DOC}/qalgset.spad.dvi ${DOC}/quat.spad.dvi \
 ${DOC}/radeigen.spad.dvi ${DOC}/radix.spad.dvi ${DOC}/random.spad.dvi \
 ${DOC}/ratfact.spad.dvi ${DOC}/rdeef.spad.dvi ${DOC}/rderf.spad.dvi \
 ${DOC}/rdesys.spad.dvi ${DOC}/real0q.spad.dvi ${DOC}/realzero.spad.dvi \
 ${DOC}/reclos.spad.dvi ${DOC}/regset.spad.dvi ${DOC}/rep1.spad.dvi \
 ${DOC}/rep2.spad.dvi ${DOC}/resring.spad.dvi ${DOC}/retract.spad.dvi \
 ${DOC}/rf.spad.dvi ${DOC}/riccati.spad.dvi ${DOC}/routines.spad.dvi \
 ${DOC}/rule.spad.dvi \
 ${DOC}/seg.spad.dvi ${DOC}/setorder.spad.dvi ${DOC}/sets.spad.dvi \
 ${DOC}/sex.spad.dvi ${DOC}/sf.spad.dvi ${DOC}/sgcf.spad.dvi \
 ${DOC}/sign.spad.dvi ${DOC}/si.spad.dvi ${DOC}/smith.spad.dvi \
 ${DOC}/solvedio.spad.dvi ${DOC}/solvefor.spad.dvi ${DOC}/solvelin.spad.dvi \
 ${DOC}/solverad.spad.dvi ${DOC}/sortpak.spad.dvi ${DOC}/space.spad.dvi \
 ${DOC}/special.spad.dvi ${DOC}/sregset.spad.dvi ${DOC}/s.spad.dvi \
 ${DOC}/stream.spad.dvi ${DOC}/string.spad.dvi ${DOC}/sttaylor.spad.dvi \
 ${DOC}/sttf.spad.dvi ${DOC}/sturm.spad.dvi ${DOC}/suchthat.spad.dvi \
 ${DOC}/suls.spad.dvi ${DOC}/sum.spad.dvi ${DOC}/sups.spad.dvi \
 ${DOC}/supxs.spad.dvi ${DOC}/suts.spad.dvi ${DOC}/symbol.spad.dvi \
 ${DOC}/syssolp.spad.dvi ${DOC}/system.spad.dvi \
 ${DOC}/tableau.spad.dvi ${DOC}/table.spad.dvi ${DOC}/taylor.spad.dvi \
 ${DOC}/tex.spad.dvi ${DOC}/tools.spad.dvi ${DOC}/transsolve.spad.dvi \
 ${DOC}/tree.spad.dvi ${DOC}/trigcat.spad.dvi ${DOC}/triset.spad.dvi \
 ${DOC}/tube.spad.dvi ${DOC}/twofact.spad.dvi \
 ${DOC}/unifact.spad.dvi ${DOC}/updecomp.spad.dvi ${DOC}/updivp.spad.dvi \
 ${DOC}/utsode.spad.dvi \
 ${DOC}/variable.spad.dvi ${DOC}/vector.spad.dvi ${DOC}/view2D.spad.dvi \
 ${DOC}/view3D.spad.dvi ${DOC}/viewDef.spad.dvi ${DOC}/viewpack.spad.dvi \
 ${DOC}/void.spad.dvi \
 ${DOC}/weier.spad.dvi ${DOC}/wtpol.spad.dvi \
 ${DOC}/xlpoly.spad.dvi ${DOC}/xpoly.spad.dvi \
 ${DOC}/ystream.spad.dvi \
 ${DOC}/zerodim.spad.dvi

@
\section{The Makefile Stanzas}
Subsections within this section are organized by the [[spad]] pamphlet.
A [[spad]] pamphlet can contain many Axiom [[categories]], [[domains]], and
[[packages]]. 

For the purpose of explanation we assume that the pamphlet file is 
named [[foo.spad.pamphlet]]. It contains the domains [[BAR]], [[BAX]],
and [[BAZ]]. Thus there will be a subsection named [[foo.spad]].

Since pamphlet files (e.g. [[foo.spad.pamphlet]] contain a spad file
(e.g. [[foo.spad]]) it follows that
every subsection contains a Makefile stanza that extract the [[foo.spad]]
file using [[notangle]].

Since pamphlet files are intended as documents it follows that each
subsection contains a Makefile stanza that extracts a [[dvi]] file
using [[noweave]].

For each domain in [[foo.spad]] we will have either 3, 5, or 9
Makefile stanzas related to that domain. Note that the items in each
stanzas are actually explained in reverse order from the way they are 
listed in the code. Since Makefiles are rule based programs the order
does not matter. The reason the stanzas are listed in what appears to
be reverse order is that we are following a ``pull'' model of rule
based programming. We specify the end-state desired (the final [[.o]]
file in the algebra directory) and backward-derive rules that achieve
that state. Thus you can read the Makefile stanzas starting with the
final state and deriving the previous required state. If this doesn't
make sense to you and you don't understand the ``pull'' model of
rule based programming don't worry about it. Just be aware that they
are listed in a logical order and that [[make]] doesn't care.

A 3 stanza group exists for the normal code case. The stanzas perform
the functions:
\begin{enumerate}
\item extract the domain [[BAR.spad]] from the spad file [[foo.spad]]
\item compile the extracted [[BAR.spad]] domain
\item copy the compiled [[BAR.o]] file to the final algebra directory
\end{enumerate}

Once we go beyond the normal case we have a few things that vary.

First, we could have a category that has default implementation code.
Compiling this category will generate files with a trailing [[-]] sign.
So, for instances, you'll see [[BAR]] and [[BAR-]] code generated when
compiling [[BAR.spad]]. This is the first cause of a 5 stanza group.

A 5 stanza group for this case performs the following functions:
\begin{enumerate}
\item extract the domain [[BAR]] from the spad file [[foo.spad]]
\item compile the extracted [[BAR]] domain
\item copy the compiled [[BAR.o]] to the final algebra directory
\item compile the extracted [[BAR]] domain (to get [[BAR-.o]])
\item copy the compiled [[BAR-.o]] to the final algebra directory
\end{enumerate}

Notice the subtle point of step four above. In order to get the
[[BAR-.o]] file we need to compile [[BAR]]. Step four will only
happen if the [[BAR-.o]] file gets erased and the [[BAR.o]] file
still exists. It is skipped during a normal build. It is required,
however, to cover the case where there are lost files in the
intermediate directory ([[BAR-.o]]) that represent a partial
build. Step four will recover from that case.

The second reason for a 5 stanza group is that
we could have a category, domain, or package that is in
the ``bootstrap'' list. Bootstrap spad files contain their generated
lisp code in special sections. The way bootstrapping works is that
we extract the lisp code and compile it rather than extracting the
spad code. We do this because we need the domain to exist before we
can compile the domain. Some domains depend on themselves directly.
Some domains depend on themselves thru a long chain of other domains.
In either case we can't compile the domain until it exists so we
cache the generated lisp code and, when we need to bootstrap the
domain, we compile the raw lisp rather than the spad.

This will only happen when the system is built from scratch. Once
the system has been built the bootstrap code is no longer executed
and these algebra files will appear as normal algebra files. That
means that once the system has been built once only the last three
rules will ever be executed. The first two rules happen when the
system is built from scratch.

A 5 stanza group for this case performs the following functions:
\begin{enumerate}
\item extract the lisp [[BAR.lsp]] from the pamphlet [[foo.spad.pamphlet]]
\item compile and copy the bootstrap lisp to the final algebra directory
\item extract the bootstrap [[BAR.lsp]] from the spad file [[foo.spad]]
\item compile the extracted [[BAR]] domain
\item copy the compiled [[BAR]] to the final algebra directory
\end{enumerate}

The subtle point here occurs in the first item. The bootstrap code
group (in the [[layer0 bootstrap]] code chunk above) asks for the
compiled [[.o]] files in the [[${MID}]] directory. Essentially this
code group calls for intermediate compiled files. This triggers the
bootstrap stanzas (items 1 and 2 above). All of the other layer 
chunks ask for compiled code in the [[${OUT}]] directory which is
the final algebra directory. 

The bootstrap process works because first we ask for the compiled
lisp code stanzas (the [[${MID}/BAR.o]] files), THEN we ask for
the final algebra code stanzas (the [[${OUT}/BAR.o]] files). This
is a very subtle point so think it through carefully. The layer0
bootstrap list is the only file list that calls for [[${MID}]]
files. All other layers ask for [[${OUT}]] files. Make sure you
understand this before you change things. If you break it the
world will no longer compile.

So we have a 3 stanza group for normal files, a 3+2 (5) stanza
group for normal files with default code, and a 3+2 (5) stanza
group for normal files that need to be bootstrapped. There is
another combination that occurs, namely bootstrap code that
also contains default code which gives a 3+2+2+2 (9) stanza case.
(see TSETCAT for an example. Be sure to read the items in reverse order).

A 9 stanza group for this case performs the following functions:
\begin{enumerate}
\item extract the bootstrap [[BAR.lsp]] from the [[foo.spad.pamphlet]]
\item compile the bootstrap [[BAR.lsp]] and copy to the intermediate directory
\item extract the bootstrap [[BAR-.lsp]] from the [[foo.spad.pamphlet]]
\item compile the bootstrap [[BAR-.lsp]] and copy to intermediate directory
\item extract the spad [[BAR.spad]] from the pamphlet [[foo.spad.pamphlet]]
\item compile the extracted [[BAR.spad]] domain (to get [[BAR.o]])
\item copy the [[BAR.o]] to the final algebra directory
\item compile the extracted [[BAR.spad]] domain (to get [[BAR-.o]])
\item copy the [[BAR-.o]] to the final algebra directory
\end{enumerate}

As you can see this is just the combination of the two possible 5
stanza case. We just have to deal with the [[BAR-]] both in regular
and bootstrap files. The first four stanzas will only happen when
the system is built from scratch. Once the system is built these
four rules no longer apply and these stanzas effectively act like
the 5 stanza rules above.

I'm sure all of this seems confusing but it is very stylized code.
Basically you need to figure out which kind of stanza group you need,
copy an existing stanza group, and do a correct renaming of the parts.
The decision tree looks something like:
\begin{verbatim}
IF (you have a regular spad domain)
 THEN use a 3 stanza form (see YSTREAM)
IF (you have a default spad domain (it generates [[-]] files)) AND
   (it does not require bootstrapping)
 THEN use the first 5 stanza form explained above (see LIECAT)
IF (you have a normal spad domain) AND
   (it requires bootstrapping)
 THEN use the second 5 stanza form explained above (see VECTOR)
IF (you have a default spad domain (it generates [[-]] files)) AND
   (it requires bootstrapping)
 THEN use the 9 stanza form explained above (see TSETCAT)
\end{verbatim}
 

\subsection{acplot.spad \cite{1}}
<<acplot.spad (SPAD from IN)>>=
${MID}/acplot.spad: ${IN}/acplot.spad.pamphlet
	@ echo 0 making ${MID}/acplot.spad from ${IN}/acplot.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/acplot.spad.pamphlet >acplot.spad )

@
<<ACPLOT.o (O from NRLIB)>>=
${OUT}/ACPLOT.o: ${MID}/ACPLOT.NRLIB
	@ echo 0 making ${OUT}/ACPLOT.o from ${MID}/ACPLOT.NRLIB
	@ cp ${MID}/ACPLOT.NRLIB/code.o ${OUT}/ACPLOT.o

@
<<ACPLOT.NRLIB (NRLIB from MID)>>=
${MID}/ACPLOT.NRLIB: ${MID}/ACPLOT.spad
	@ echo 0 making ${MID}/ACPLOT.NRLIB from ${MID}/ACPLOT.spad
	@ (cd ${MID} ; 	echo ')co ACPLOT.spad' | ${INTERPSYS} )

@
<<ACPLOT.spad (SPAD from IN)>>=
${MID}/ACPLOT.spad: ${IN}/acplot.spad.pamphlet
	@ echo 0 making ${MID}/ACPLOT.spad from ${IN}/acplot.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ACPLOT.NRLIB ; \
	${SPADBIN}/notangle -R"domain ACPLOT PlaneAlgebraicCurvePlot" ${IN}/acplot.spad.pamphlet >ACPLOT.spad )

@
<<REALSOLV.o (O from NRLIB)>>=
${OUT}/REALSOLV.o: ${MID}/REALSOLV.NRLIB
	@ echo 0 making ${OUT}/REALSOLV.o from ${MID}/REALSOLV.NRLIB
	@ cp ${MID}/REALSOLV.NRLIB/code.o ${OUT}/REALSOLV.o

@
<<REALSOLV.NRLIB (NRLIB from MID)>>=
${MID}/REALSOLV.NRLIB: ${MID}/REALSOLV.spad
	@ echo 0 making ${MID}/REALSOLV.NRLIB from ${MID}/REALSOLV.spad
	@ (cd ${MID} ; 	echo ')co REALSOLV.spad' | ${INTERPSYS} )

@
<<REALSOLV.spad (SPAD from IN)>>=
${MID}/REALSOLV.spad: ${IN}/acplot.spad.pamphlet
	@ echo 0 making ${MID}/REALSOLV.spad from ${IN}/acplot.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REALSOLV.NRLIB ; \
	${SPADBIN}/notangle -R"package REALSOLV RealSolvePackage" ${IN}/acplot.spad.pamphlet >REALSOLV.spad )

@
<<acplot.spad.dvi (DOC from IN)>>=
${DOC}/acplot.spad.dvi: ${IN}/acplot.spad.pamphlet
	@ echo 0 making ${DOC}/acplot.spad.dvi from ${IN}/acplot.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/acplot.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} acplot.spad ; \
	rm -f ${DOC}/acplot.spad.pamphlet ; \
	rm -f ${DOC}/acplot.spad.tex ; \
	rm -f ${DOC}/acplot.spad )

@
\subsection{aggcat2.spad \cite{1}}
<<aggcat2.spad (SPAD from IN)>>=
${MID}/aggcat2.spad: ${IN}/aggcat2.spad.pamphlet
	@ echo 0 making ${MID}/aggcat2.spad from ${IN}/aggcat2.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/aggcat2.spad.pamphlet >aggcat2.spad )

@
<<FLAGG2.o (O from NRLIB)>>=
${OUT}/FLAGG2.o: ${MID}/FLAGG2.NRLIB
	@ echo 0 making ${OUT}/FLAGG2.o from ${MID}/FLAGG2.NRLIB
	@ cp ${MID}/FLAGG2.NRLIB/code.o ${OUT}/FLAGG2.o

@
<<FLAGG2.NRLIB (NRLIB from MID)>>=
${MID}/FLAGG2.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/FLAGG2.spad
	@ echo 0 making ${MID}/FLAGG2.NRLIB from ${MID}/FLAGG2.spad
	@ (cd ${MID} ; 	echo ')co FLAGG2.spad' | ${INTERPSYS} )

@
<<FLAGG2.spad (SPAD from IN)>>=
${MID}/FLAGG2.spad: ${IN}/aggcat2.spad.pamphlet
	@ echo 0 making ${MID}/FLAGG2.spad from ${IN}/aggcat2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLAGG2.NRLIB ; \
	${SPADBIN}/notangle -R"package FLAGG2 FiniteLinearAggregateFunctions2" ${IN}/aggcat2.spad.pamphlet >FLAGG2.spad )

@
<<FSAGG2.o (O from NRLIB)>>=
${OUT}/FSAGG2.o: ${MID}/FSAGG2.NRLIB
	@ echo 0 making ${OUT}/FSAGG2.o from ${MID}/FSAGG2.NRLIB
	@ cp ${MID}/FSAGG2.NRLIB/code.o ${OUT}/FSAGG2.o

@
<<FSAGG2.NRLIB (NRLIB from MID)>>=
${MID}/FSAGG2.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/FSAGG2.spad
	@ echo 0 making ${MID}/FSAGG2.NRLIB from ${MID}/FSAGG2.spad
	@ (cd ${MID} ; 	echo ')co FSAGG2.spad' | ${INTERPSYS} )

@
<<FSAGG2.spad (SPAD from IN)>>=
${MID}/FSAGG2.spad: ${IN}/aggcat2.spad.pamphlet
	@ echo 0 making ${MID}/FSAGG2.spad from ${IN}/aggcat2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSAGG2.NRLIB ; \
	${SPADBIN}/notangle -R"package FSAGG2 FiniteSetAggregateFunctions2" ${IN}/aggcat2.spad.pamphlet >FSAGG2.spad )

@
<<aggcat2.spad.dvi (DOC from IN)>>=
${DOC}/aggcat2.spad.dvi: ${IN}/aggcat2.spad.pamphlet
	@ echo 0 making ${DOC}/aggcat2.spad.dvi from ${IN}/aggcat2.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/aggcat2.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} aggcat2.spad ; \
	rm -f ${DOC}/aggcat2.spad.pamphlet ; \
	rm -f ${DOC}/aggcat2.spad.tex ; \
	rm -f ${DOC}/aggcat2.spad )

@
\subsection{aggcat.spad \cite{1}}
<<aggcat.spad (SPAD from IN)>>=
${MID}/aggcat.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/aggcat.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/aggcat.spad.pamphlet >aggcat.spad )

@
<<ALAGG.o (O from NRLIB)>>=
${OUT}/ALAGG.o: ${MID}/ALAGG.NRLIB
	@ echo 0 making ${OUT}/ALAGG.o from ${MID}/ALAGG.NRLIB
	@ cp ${MID}/ALAGG.NRLIB/code.o ${OUT}/ALAGG.o

@
<<ALAGG.NRLIB (NRLIB from MID)>>=
${MID}/ALAGG.NRLIB: ${MID}/ALAGG.spad
	@ echo 0 making ${MID}/ALAGG.NRLIB from ${MID}/ALAGG.spad
	@ (cd ${MID} ; 	echo ')co ALAGG.spad' | ${INTERPSYS} )

@
<<ALAGG.spad (SPAD from IN)>>=
${MID}/ALAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/ALAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category ALAGG AssociationListAggregate" ${IN}/aggcat.spad.pamphlet >ALAGG.spad )

@
<<ALAGG.o (BOOTSTRAP from MID)>>=
${MID}/ALAGG.o: ${MID}/ALAGG.lsp
	@ echo 0 making ${MID}/ALAGG.o from ${MID}/ALAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ALAGG.lsp" :output-file "ALAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/ALAGG.o ${OUT}/ALAGG.o

@
<<ALAGG.lsp (LISP from IN)>>=
${MID}/ALAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/ALAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALAGG.NRLIB ; \
	rm -rf ${OUT}/ALAGG.o ; \
	${SPADBIN}/notangle -R"ALAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >ALAGG.lsp )

@
<<A1AGG-.o (O from NRLIB)>>=
${OUT}/A1AGG-.o: ${MID}/A1AGG.NRLIB
	@ echo 0 making ${OUT}/A1AGG-.o from ${MID}/A1AGG-.NRLIB
	@ cp ${MID}/A1AGG-.NRLIB/code.o ${OUT}/A1AGG-.o

@
<<A1AGG-.NRLIB (NRLIB from MID)>>=
${MID}/A1AGG-.NRLIB: ${OUT}/TYPE.o ${MID}/A1AGG.spad 
	@ echo 0 making ${MID}/A1AGG-.NRLIB from ${MID}/A1AGG.spad
	@ (cd ${MID} ; 	echo ')co A1AGG.spad' | ${INTERPSYS} )

@
<<A1AGG.o (O from NRLIB)>>=
${OUT}/A1AGG.o: ${MID}/A1AGG.NRLIB
	@ echo 0 making ${OUT}/A1AGG.o from ${MID}/A1AGG.NRLIB
	@ cp ${MID}/A1AGG.NRLIB/code.o ${OUT}/A1AGG.o

@
<<A1AGG.NRLIB (NRLIB from MID)>>=
${MID}/A1AGG.NRLIB: ${MID}/A1AGG.spad
	@ echo 0 making ${MID}/A1AGG.NRLIB from ${MID}/A1AGG.spad
	@ (cd ${MID} ; 	echo ')co A1AGG.spad' | ${INTERPSYS} )

@
<<A1AGG.spad (SPAD from IN)>>=
${MID}/A1AGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/A1AGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf A1AGG.NRLIB ; \
	${SPADBIN}/notangle -R"category A1AGG OneDimensionalArrayAggregate" ${IN}/aggcat.spad.pamphlet >A1AGG.spad )

@
<<AGG-.o (O from NRLIB)>>=
${OUT}/AGG-.o: ${MID}/AGG.NRLIB
	@ echo 0 making ${OUT}/AGG-.o from ${MID}/AGG-.NRLIB
	@ cp ${MID}/AGG-.NRLIB/code.o ${OUT}/AGG-.o

@
<<AGG-.NRLIB (NRLIB from MID)>>=
${MID}/AGG-.NRLIB: ${OUT}/TYPE.o ${MID}/AGG.spad 
	@ echo 0 making ${MID}/AGG-.NRLIB from ${MID}/AGG.spad
	@ (cd ${MID} ; 	echo ')co AGG.spad' | ${INTERPSYS} )

@
<<AGG.o (O from NRLIB)>>=
${OUT}/AGG.o: ${MID}/AGG.NRLIB
	@ echo 0 making ${OUT}/AGG.o from ${MID}/AGG.NRLIB
	@ cp ${MID}/AGG.NRLIB/code.o ${OUT}/AGG.o

@
<<AGG.NRLIB (NRLIB from MID)>>=
${MID}/AGG.NRLIB: ${MID}/AGG.spad
	@ echo 0 making ${MID}/AGG.NRLIB from ${MID}/AGG.spad
	@ (cd ${MID} ; 	echo ')co AGG.spad' | ${INTERPSYS} )

@
<<AGG.spad (SPAD from IN)>>=
${MID}/AGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/AGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf AGG.NRLIB ; \
	${SPADBIN}/notangle -R"category AGG Aggregate" ${IN}/aggcat.spad.pamphlet >AGG.spad )

@
<<BGAGG-.o (O from NRLIB)>>=
${OUT}/BGAGG-.o: ${MID}/BGAGG.NRLIB
	@ echo 0 making ${OUT}/BGAGG-.o from ${MID}/BGAGG-.NRLIB
	@ cp ${MID}/BGAGG-.NRLIB/code.o ${OUT}/BGAGG-.o

@
<<BGAGG-.NRLIB (NRLIB from MID)>>=
${MID}/BGAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/BGAGG.spad 
	@ echo 0 making ${MID}/BGAGG-.NRLIB from ${MID}/BGAGG.spad
	@ (cd ${MID} ; 	echo ')co BGAGG.spad' | ${INTERPSYS} )

@
<<BGAGG.o (O from NRLIB)>>=
${OUT}/BGAGG.o: ${MID}/BGAGG.NRLIB
	@ echo 0 making ${OUT}/BGAGG.o from ${MID}/BGAGG.NRLIB
	@ cp ${MID}/BGAGG.NRLIB/code.o ${OUT}/BGAGG.o

@
<<BGAGG.NRLIB (NRLIB from MID)>>=
${MID}/BGAGG.NRLIB: ${MID}/BGAGG.spad
	@ echo 0 making ${MID}/BGAGG.NRLIB from ${MID}/BGAGG.spad
	@ (cd ${MID} ; 	echo ')co BGAGG.spad' | ${INTERPSYS} )

@
<<BGAGG.spad (SPAD from IN)>>=
${MID}/BGAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/BGAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BGAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category BGAGG BagAggregate" ${IN}/aggcat.spad.pamphlet >BGAGG.spad )

@
<<BRAGG-.o (O from NRLIB)>>=
${OUT}/BRAGG-.o: ${MID}/BRAGG.NRLIB
	@ echo 0 making ${OUT}/BRAGG-.o from ${MID}/BRAGG-.NRLIB
	@ cp ${MID}/BRAGG-.NRLIB/code.o ${OUT}/BRAGG-.o

@
<<BRAGG-.NRLIB (NRLIB from MID)>>=
${MID}/BRAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/BRAGG.spad 
	@ echo 0 making ${MID}/BRAGG-.NRLIB from ${MID}/BRAGG.spad
	@ (cd ${MID} ; 	echo ')co BRAGG.spad' | ${INTERPSYS} )

@
<<BRAGG.o (O from NRLIB)>>=
${OUT}/BRAGG.o: ${MID}/BRAGG.NRLIB
	@ echo 0 making ${OUT}/BRAGG.o from ${MID}/BRAGG.NRLIB
	@ cp ${MID}/BRAGG.NRLIB/code.o ${OUT}/BRAGG.o

@
<<BRAGG.NRLIB (NRLIB from MID)>>=
${MID}/BRAGG.NRLIB: ${MID}/BRAGG.spad
	@ echo 0 making ${MID}/BRAGG.NRLIB from ${MID}/BRAGG.spad
	@ (cd ${MID} ; 	echo ')co BRAGG.spad' | ${INTERPSYS} )

@
<<BRAGG.spad (SPAD from IN)>>=
${MID}/BRAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/BRAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BRAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category BRAGG BinaryRecursiveAggregate" ${IN}/aggcat.spad.pamphlet >BRAGG.spad )

@
<<BTAGG-.o (O from NRLIB)>>=
${OUT}/BTAGG-.o: ${MID}/BTAGG.NRLIB
	@ echo 0 making ${OUT}/BTAGG-.o from ${MID}/BTAGG-.NRLIB
	@ cp ${MID}/BTAGG-.NRLIB/code.o ${OUT}/BTAGG-.o

@
<<BTAGG-.NRLIB (NRLIB from MID)>>=
${MID}/BTAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/BTAGG.spad 
	@ echo 0 making ${MID}/BTAGG-.NRLIB from ${MID}/BTAGG.spad
	@ (cd ${MID} ; 	echo ')co BTAGG.spad' | ${INTERPSYS} )

@
<<BTAGG.o (O from NRLIB)>>=
${OUT}/BTAGG.o: ${MID}/BTAGG.NRLIB
	@ echo 0 making ${OUT}/BTAGG.o from ${MID}/BTAGG.NRLIB
	@ cp ${MID}/BTAGG.NRLIB/code.o ${OUT}/BTAGG.o

@
<<BTAGG.NRLIB (NRLIB from MID)>>=
${MID}/BTAGG.NRLIB: ${MID}/BTAGG.spad
	@ echo 0 making ${MID}/BTAGG.NRLIB from ${MID}/BTAGG.spad
	@ (cd ${MID} ; 	echo ')co BTAGG.spad' | ${INTERPSYS} )

@
<<BTAGG.spad (SPAD from IN)>>=
${MID}/BTAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/BTAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BTAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category BTAGG BitAggregate" ${IN}/aggcat.spad.pamphlet >BTAGG.spad )

@
<<CLAGG-.o (O from NRLIB)>>=
${OUT}/CLAGG-.o: ${MID}/CLAGG.NRLIB
	@ echo 0 making ${OUT}/CLAGG-.o from ${MID}/CLAGG-.NRLIB
	@ cp ${MID}/CLAGG-.NRLIB/code.o ${OUT}/CLAGG-.o

@
<<CLAGG-.NRLIB (NRLIB from MID)>>=
${MID}/CLAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/CLAGG.spad 
	@ echo 0 making ${MID}/CLAGG-.NRLIB from ${MID}/CLAGG.spad
	@ (cd ${MID} ; 	echo ')co CLAGG.spad' | ${INTERPSYS} )

@
<<CLAGG.o (O from NRLIB)>>=
${OUT}/CLAGG.o: ${MID}/CLAGG.NRLIB
	@ echo 0 making ${OUT}/CLAGG.o from ${MID}/CLAGG.NRLIB
	@ cp ${MID}/CLAGG.NRLIB/code.o ${OUT}/CLAGG.o

@
<<CLAGG.NRLIB (NRLIB from MID)>>=
${MID}/CLAGG.NRLIB: ${MID}/CLAGG.spad
	@ echo 0 making ${MID}/CLAGG.NRLIB from ${MID}/CLAGG.spad
	@ (cd ${MID} ; 	echo ')co CLAGG.spad' | ${INTERPSYS} )

@
<<CLAGG.spad (SPAD from IN)>>=
${MID}/CLAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/CLAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CLAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category CLAGG Collection" ${IN}/aggcat.spad.pamphlet >CLAGG.spad )

@
<<CLAGG-.o (BOOTSTRAP from MID)>>=
${MID}/CLAGG-.o: ${MID}/CLAGG-.lsp 
	@ echo 0 making ${MID}/CLAGG-.o from ${MID}/CLAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "CLAGG-.lsp" :output-file "CLAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/CLAGG-.o ${OUT}/CLAGG-.o

@
<<CLAGG-.lsp (LISP from IN)>>=
${MID}/CLAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/CLAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CLAGG-.NRLIB ; \
	rm -rf ${OUT}/CLAGG-.o ; \
	${SPADBIN}/notangle -R"CLAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >CLAGG-.lsp )

@
<<CLAGG.o (BOOTSTRAP from MID)>>=
${MID}/CLAGG.o: ${MID}/CLAGG.lsp 
	@ echo 0 making ${MID}/CLAGG.o from ${MID}/CLAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "CLAGG.lsp" :output-file "CLAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/CLAGG.o ${OUT}/CLAGG.o

@
<<CLAGG.lsp (LISP from IN)>>=
${MID}/CLAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/CLAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CLAGG.NRLIB ; \
	rm -rf ${OUT}/CLAGG.o ; \
	${SPADBIN}/notangle -R"CLAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >CLAGG.lsp )

@
<<DIAGG-.o (O from NRLIB)>>=
${OUT}/DIAGG-.o: ${MID}/DIAGG.NRLIB
	@ echo 0 making ${OUT}/DIAGG-.o from ${MID}/DIAGG-.NRLIB
	@ cp ${MID}/DIAGG-.NRLIB/code.o ${OUT}/DIAGG-.o

@
<<DIAGG-.NRLIB (NRLIB from MID)>>=
${MID}/DIAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/DIAGG.spad 
	@ echo 0 making ${MID}/DIAGG-.NRLIB from ${MID}/DIAGG.spad
	@ (cd ${MID} ; 	echo ')co DIAGG.spad' | ${INTERPSYS} )

@
<<DIAGG.o (O from NRLIB)>>=
${OUT}/DIAGG.o: ${MID}/DIAGG.NRLIB
	@ echo 0 making ${OUT}/DIAGG.o from ${MID}/DIAGG.NRLIB
	@ cp ${MID}/DIAGG.NRLIB/code.o ${OUT}/DIAGG.o

@
<<DIAGG.NRLIB (NRLIB from MID)>>=
${MID}/DIAGG.NRLIB: ${MID}/DIAGG.spad
	@ echo 0 making ${MID}/DIAGG.NRLIB from ${MID}/DIAGG.spad
	@ (cd ${MID} ; 	echo ')co DIAGG.spad' | ${INTERPSYS} )

@
<<DIAGG.spad (SPAD from IN)>>=
${MID}/DIAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/DIAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category DIAGG Dictionary" ${IN}/aggcat.spad.pamphlet >DIAGG.spad )

@
<<DIOPS-.o (O from NRLIB)>>=
${OUT}/DIOPS-.o: ${MID}/DIOPS.NRLIB
	@ echo 0 making ${OUT}/DIOPS-.o from ${MID}/DIOPS-.NRLIB
	@ cp ${MID}/DIOPS-.NRLIB/code.o ${OUT}/DIOPS-.o

@
<<DIOPS-.NRLIB (NRLIB from MID)>>=
${MID}/DIOPS-.NRLIB: ${OUT}/TYPE.o ${MID}/DIOPS.spad 
	@ echo 0 making ${MID}/DIOPS-.NRLIB from ${MID}/DIOPS.spad
	@ (cd ${MID} ; 	echo ')co DIOPS.spad' | ${INTERPSYS} )

@
<<DIOPS.o (O from NRLIB)>>=
${OUT}/DIOPS.o: ${MID}/DIOPS.NRLIB
	@ echo 0 making ${OUT}/DIOPS.o from ${MID}/DIOPS.NRLIB
	@ cp ${MID}/DIOPS.NRLIB/code.o ${OUT}/DIOPS.o

@
<<DIOPS.NRLIB (NRLIB from MID)>>=
${MID}/DIOPS.NRLIB: ${MID}/DIOPS.spad
	@ echo 0 making ${MID}/DIOPS.NRLIB from ${MID}/DIOPS.spad
	@ (cd ${MID} ; 	echo ')co DIOPS.spad' | ${INTERPSYS} )

@
<<DIOPS.spad (SPAD from IN)>>=
${MID}/DIOPS.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/DIOPS.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIOPS.NRLIB ; \
	${SPADBIN}/notangle -R"category DIOPS DictionaryOperations" ${IN}/aggcat.spad.pamphlet >DIOPS.spad )

@
<<DLAGG.o (O from NRLIB)>>=
${OUT}/DLAGG.o: ${MID}/DLAGG.NRLIB
	@ echo 0 making ${OUT}/DLAGG.o from ${MID}/DLAGG.NRLIB
	@ cp ${MID}/DLAGG.NRLIB/code.o ${OUT}/DLAGG.o

@
<<DLAGG.NRLIB (NRLIB from MID)>>=
${MID}/DLAGG.NRLIB: ${MID}/DLAGG.spad
	@ echo 0 making ${MID}/DLAGG.NRLIB from ${MID}/DLAGG.spad
	@ (cd ${MID} ; 	echo ')co DLAGG.spad' | ${INTERPSYS} )

@
<<DLAGG.spad (SPAD from IN)>>=
${MID}/DLAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/DLAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DLAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category DLAGG DoublyLinkedAggregate" ${IN}/aggcat.spad.pamphlet >DLAGG.spad )

@
<<DQAGG.o (O from NRLIB)>>=
${OUT}/DQAGG.o: ${MID}/DQAGG.NRLIB
	@ echo 0 making ${OUT}/DQAGG.o from ${MID}/DQAGG.NRLIB
	@ cp ${MID}/DQAGG.NRLIB/code.o ${OUT}/DQAGG.o

@
<<DQAGG.NRLIB (NRLIB from MID)>>=
${MID}/DQAGG.NRLIB: ${MID}/DQAGG.spad
	@ echo 0 making ${MID}/DQAGG.NRLIB from ${MID}/DQAGG.spad
	@ (cd ${MID} ; 	echo ')co DQAGG.spad' | ${INTERPSYS} )

@
<<DQAGG.spad (SPAD from IN)>>=
${MID}/DQAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/DQAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DQAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category DQAGG DequeueAggregate" ${IN}/aggcat.spad.pamphlet >DQAGG.spad )

@
<<ELAGG-.o (O from NRLIB)>>=
${OUT}/ELAGG-.o: ${MID}/ELAGG.NRLIB
	@ echo 0 making ${OUT}/ELAGG-.o from ${MID}/ELAGG-.NRLIB
	@ cp ${MID}/ELAGG-.NRLIB/code.o ${OUT}/ELAGG-.o

@
<<ELAGG-.NRLIB (NRLIB from MID)>>=
${MID}/ELAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/ELAGG.spad 
	@ echo 0 making ${MID}/ELAGG-.NRLIB from ${MID}/ELAGG.spad
	@ (cd ${MID} ; 	echo ')co ELAGG.spad' | ${INTERPSYS} )

@
<<ELAGG.o (O from NRLIB)>>=
${OUT}/ELAGG.o: ${MID}/ELAGG.NRLIB
	@ echo 0 making ${OUT}/ELAGG.o from ${MID}/ELAGG.NRLIB
	@ cp ${MID}/ELAGG.NRLIB/code.o ${OUT}/ELAGG.o

@
<<ELAGG.NRLIB (NRLIB from MID)>>=
${MID}/ELAGG.NRLIB: ${MID}/ELAGG.spad
	@ echo 0 making ${MID}/ELAGG.NRLIB from ${MID}/ELAGG.spad
	@ (cd ${MID} ; 	echo ')co ELAGG.spad' | ${INTERPSYS} )

@
<<ELAGG.spad (SPAD from IN)>>=
${MID}/ELAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/ELAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ELAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category ELAGG ExtensibleLinearAggregate" ${IN}/aggcat.spad.pamphlet >ELAGG.spad )

@
<<ELTAB.o (O from NRLIB)>>=
${OUT}/ELTAB.o: ${MID}/ELTAB.NRLIB
	@ echo 0 making ${OUT}/ELTAB.o from ${MID}/ELTAB.NRLIB
	@ cp ${MID}/ELTAB.NRLIB/code.o ${OUT}/ELTAB.o

@
<<ELTAB.NRLIB (NRLIB from MID)>>=
${MID}/ELTAB.NRLIB: ${MID}/ELTAB.spad
	@ echo 0 making ${MID}/ELTAB.NRLIB from ${MID}/ELTAB.spad
	@ (cd ${MID} ; 	echo ')co ELTAB.spad' | ${INTERPSYS} )

@
<<ELTAB.spad (SPAD from IN)>>=
${MID}/ELTAB.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/ELTAB.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ELTAB.NRLIB ; \
	${SPADBIN}/notangle -R"category ELTAB Eltable" ${IN}/aggcat.spad.pamphlet >ELTAB.spad )

@
<<ELTAGG-.o (O from NRLIB)>>=
${OUT}/ELTAGG-.o: ${MID}/ELTAGG.NRLIB
	@ echo 0 making ${OUT}/ELTAGG-.o from ${MID}/ELTAGG-.NRLIB
	@ cp ${MID}/ELTAGG-.NRLIB/code.o ${OUT}/ELTAGG-.o

@
<<ELTAGG-.NRLIB (NRLIB from MID)>>=
${MID}/ELTAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/ELTAGG.spad 
	@ echo 0 making ${MID}/ELTAGG-.NRLIB from ${MID}/ELTAGG.spad
	@ (cd ${MID} ; 	echo ')co ELTAGG.spad' | ${INTERPSYS} )

@
<<ELTAGG.o (O from NRLIB)>>=
${OUT}/ELTAGG.o: ${MID}/ELTAGG.NRLIB
	@ echo 0 making ${OUT}/ELTAGG.o from ${MID}/ELTAGG.NRLIB
	@ cp ${MID}/ELTAGG.NRLIB/code.o ${OUT}/ELTAGG.o

@
<<ELTAGG.NRLIB (NRLIB from MID)>>=
${MID}/ELTAGG.NRLIB: ${OUT}/TYPE.o ${MID}/ELTAGG.spad
	@ echo 0 making ${MID}/ELTAGG.NRLIB from ${MID}/ELTAGG.spad
	@ (cd ${MID} ; 	echo ')co ELTAGG.spad' | ${INTERPSYS} )

@
<<ELTAGG.spad (SPAD from IN)>>=
${MID}/ELTAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/ELTAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ELTAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category ELTAGG EltableAggregate" ${IN}/aggcat.spad.pamphlet >ELTAGG.spad )

@
<<FLAGG-.o (O from NRLIB)>>=
${OUT}/FLAGG-.o: ${MID}/FLAGG.NRLIB
	@ echo 0 making ${OUT}/FLAGG-.o from ${MID}/FLAGG-.NRLIB
	@ cp ${MID}/FLAGG-.NRLIB/code.o ${OUT}/FLAGG-.o

@
<<FLAGG-.NRLIB (NRLIB from MID)>>=
${MID}/FLAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/FLAGG.spad 
	@ echo 0 making ${MID}/FLAGG-.NRLIB from ${MID}/FLAGG.spad
	@ (cd ${MID} ; 	echo ')co FLAGG.spad' | ${INTERPSYS} )

@
<<FLAGG.o (O from NRLIB)>>=
${OUT}/FLAGG.o: ${MID}/FLAGG.NRLIB
	@ echo 0 making ${OUT}/FLAGG.o from ${MID}/FLAGG.NRLIB
	@ cp ${MID}/FLAGG.NRLIB/code.o ${OUT}/FLAGG.o

@
<<FLAGG.NRLIB (NRLIB from MID)>>=
${MID}/FLAGG.NRLIB: ${MID}/FLAGG.spad
	@ echo 0 making ${MID}/FLAGG.NRLIB from ${MID}/FLAGG.spad
	@ (cd ${MID} ; 	echo ')co FLAGG.spad' | ${INTERPSYS} )

@
<<FLAGG.spad (SPAD from IN)>>=
${MID}/FLAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/FLAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category FLAGG FiniteLinearAggregate" ${IN}/aggcat.spad.pamphlet >FLAGG.spad )

@
<<FSAGG-.o (O from NRLIB)>>=
${OUT}/FSAGG-.o: ${MID}/FSAGG.NRLIB
	@ echo 0 making ${OUT}/FSAGG-.o from ${MID}/FSAGG-.NRLIB
	@ cp ${MID}/FSAGG-.NRLIB/code.o ${OUT}/FSAGG-.o

@
<<FSAGG-.NRLIB (NRLIB from MID)>>=
${MID}/FSAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/FSAGG.spad 
	@ echo 0 making ${MID}/FSAGG-.NRLIB from ${MID}/FSAGG.spad
	@ (cd ${MID} ; 	echo ')co FSAGG.spad' | ${INTERPSYS} )

@
<<FSAGG.o (O from NRLIB)>>=
${OUT}/FSAGG.o: ${MID}/FSAGG.NRLIB
	@ echo 0 making ${OUT}/FSAGG.o from ${MID}/FSAGG.NRLIB
	@ cp ${MID}/FSAGG.NRLIB/code.o ${OUT}/FSAGG.o

@
<<FSAGG.NRLIB (NRLIB from MID)>>=
${MID}/FSAGG.NRLIB: ${MID}/FSAGG.spad
	@ echo 0 making ${MID}/FSAGG.NRLIB from ${MID}/FSAGG.spad
	@ (cd ${MID} ; 	echo ')co FSAGG.spad' | ${INTERPSYS} )

@
<<FSAGG.spad (SPAD from IN)>>=
${MID}/FSAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/FSAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category FSAGG FiniteSetAggregate" ${IN}/aggcat.spad.pamphlet >FSAGG.spad )

@
<<MSETAGG.o (O from NRLIB)>>=
${OUT}/MSETAGG.o: ${MID}/MSETAGG.NRLIB
	@ echo 0 making ${OUT}/MSETAGG.o from ${MID}/MSETAGG.NRLIB
	@ cp ${MID}/MSETAGG.NRLIB/code.o ${OUT}/MSETAGG.o

@
<<MSETAGG.NRLIB (NRLIB from MID)>>=
${MID}/MSETAGG.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MSETAGG.spad
	@ echo 0 making ${MID}/MSETAGG.NRLIB from ${MID}/MSETAGG.spad
	@ (cd ${MID} ; 	echo ')co MSETAGG.spad' | ${INTERPSYS} )

@
<<MSETAGG.spad (SPAD from IN)>>=
${MID}/MSETAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/MSETAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MSETAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category MSETAGG MultisetAggregate" ${IN}/aggcat.spad.pamphlet >MSETAGG.spad )

@
<<HOAGG-.o (O from NRLIB)>>=
${OUT}/HOAGG-.o: ${MID}/HOAGG.NRLIB
	@ echo 0 making ${OUT}/HOAGG-.o from ${MID}/HOAGG-.NRLIB
	@ cp ${MID}/HOAGG-.NRLIB/code.o ${OUT}/HOAGG-.o

@
<<HOAGG-.NRLIB (NRLIB from MID)>>=
${MID}/HOAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/HOAGG.spad 
	@ echo 0 making ${MID}/HOAGG-.NRLIB from ${MID}/HOAGG.spad
	@ (cd ${MID} ; 	echo ')co HOAGG.spad' | ${INTERPSYS} )

@
<<HOAGG.o (O from NRLIB)>>=
${OUT}/HOAGG.o: ${MID}/HOAGG.NRLIB
	@ echo 0 making ${OUT}/HOAGG.o from ${MID}/HOAGG.NRLIB
	@ cp ${MID}/HOAGG.NRLIB/code.o ${OUT}/HOAGG.o

@
<<HOAGG.NRLIB (NRLIB from MID)>>=
${MID}/HOAGG.NRLIB: ${MID}/HOAGG.spad
	@ echo 0 making ${MID}/HOAGG.NRLIB from ${MID}/HOAGG.spad
	@ (cd ${MID} ; 	echo ')co HOAGG.spad' | ${INTERPSYS} )

@
<<HOAGG.spad (SPAD from IN)>>=
${MID}/HOAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/HOAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HOAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category HOAGG HomogeneousAggregate" ${IN}/aggcat.spad.pamphlet >HOAGG.spad )

@
<<HOAGG-.o (BOOTSTRAP from MID)>>=
${MID}/HOAGG-.o: ${MID}/HOAGG-.lsp 
	@ echo 0 making ${MID}/HOAGG-.o from ${MID}/HOAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "HOAGG-.lsp" :output-file "HOAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/HOAGG-.o ${OUT}/HOAGG-.o

@
<<HOAGG-.lsp (LISP from IN)>>=
${MID}/HOAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/HOAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HOAGG-.NRLIB ; \
	rm -rf ${OUT}/HOAGG-.o ; \
	${SPADBIN}/notangle -R"HOAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >HOAGG-.lsp )

@
<<HOAGG.o (BOOTSTRAP from MID)>>=
${MID}/HOAGG.o: ${MID}/HOAGG.lsp 
	@ echo 0 making ${MID}/HOAGG.o from ${MID}/HOAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "HOAGG.lsp" :output-file "HOAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/HOAGG.o ${OUT}/HOAGG.o

@
<<HOAGG.lsp (LISP from IN)>>=
${MID}/HOAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/HOAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HOAGG.NRLIB ; \
	rm -rf ${OUT}/HOAGG.o ; \
	${SPADBIN}/notangle -R"HOAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >HOAGG.lsp )

@
<<IXAGG-.o (O from NRLIB)>>=
${OUT}/IXAGG-.o: ${MID}/IXAGG.NRLIB
	@ echo 0 making ${OUT}/IXAGG-.o from ${MID}/IXAGG-.NRLIB
	@ cp ${MID}/IXAGG-.NRLIB/code.o ${OUT}/IXAGG-.o

@
<<IXAGG-.NRLIB (NRLIB from MID)>>=
${MID}/IXAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/IXAGG.spad 
	@ echo 0 making ${MID}/IXAGG-.NRLIB from ${MID}/IXAGG.spad
	@ (cd ${MID} ; 	echo ')co IXAGG.spad' | ${INTERPSYS} )

@
<<IXAGG.o (O from NRLIB)>>=
${OUT}/IXAGG.o: ${MID}/IXAGG.NRLIB
	@ echo 0 making ${OUT}/IXAGG.o from ${MID}/IXAGG.NRLIB
	@ cp ${MID}/IXAGG.NRLIB/code.o ${OUT}/IXAGG.o

@
<<IXAGG.NRLIB (NRLIB from MID)>>=
${MID}/IXAGG.NRLIB: ${MID}/IXAGG.spad
	@ echo 0 making ${MID}/IXAGG.NRLIB from ${MID}/IXAGG.spad
	@ (cd ${MID} ; 	echo ')co IXAGG.spad' | ${INTERPSYS} )

@
<<IXAGG.spad (SPAD from IN)>>=
${MID}/IXAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/IXAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IXAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category IXAGG IndexedAggregate" ${IN}/aggcat.spad.pamphlet >IXAGG.spad )

@
<<KDAGG-.o (O from NRLIB)>>=
${OUT}/KDAGG-.o: ${MID}/KDAGG.NRLIB
	@ echo 0 making ${OUT}/KDAGG-.o from ${MID}/KDAGG-.NRLIB
	@ cp ${MID}/KDAGG-.NRLIB/code.o ${OUT}/KDAGG-.o

@
<<KDAGG-.NRLIB (NRLIB from MID)>>=
${MID}/KDAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/KDAGG.spad 
	@ echo 0 making ${MID}/KDAGG-.NRLIB from ${MID}/KDAGG.spad
	@ (cd ${MID} ; 	echo ')co KDAGG.spad' | ${INTERPSYS} )

@
<<KDAGG.o (O from NRLIB)>>=
${OUT}/KDAGG.o: ${MID}/KDAGG.NRLIB
	@ echo 0 making ${OUT}/KDAGG.o from ${MID}/KDAGG.NRLIB
	@ cp ${MID}/KDAGG.NRLIB/code.o ${OUT}/KDAGG.o

@
<<KDAGG.NRLIB (NRLIB from MID)>>=
${MID}/KDAGG.NRLIB: ${MID}/KDAGG.spad
	@ echo 0 making ${MID}/KDAGG.NRLIB from ${MID}/KDAGG.spad
	@ (cd ${MID} ; 	echo ')co KDAGG.spad' | ${INTERPSYS} )

@
<<KDAGG.spad (SPAD from IN)>>=
${MID}/KDAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/KDAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf KDAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category KDAGG KeyedDictionary" ${IN}/aggcat.spad.pamphlet >KDAGG.spad )

@
<<LSAGG-.o (O from NRLIB)>>=
${OUT}/LSAGG-.o: ${MID}/LSAGG.NRLIB
	@ echo 0 making ${OUT}/LSAGG-.o from ${MID}/LSAGG-.NRLIB
	@ cp ${MID}/LSAGG-.NRLIB/code.o ${OUT}/LSAGG-.o

@
<<LSAGG-.NRLIB (NRLIB from MID)>>=
${MID}/LSAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/LSAGG.spad 
	@ echo 0 making ${MID}/LSAGG-.NRLIB from ${MID}/LSAGG.spad
	@ (cd ${MID} ; 	echo ')co LSAGG.spad' | ${INTERPSYS} )

@
<<LSAGG.o (O from NRLIB)>>=
${OUT}/LSAGG.o: ${MID}/LSAGG.NRLIB
	@ echo 0 making ${OUT}/LSAGG.o from ${MID}/LSAGG.NRLIB
	@ cp ${MID}/LSAGG.NRLIB/code.o ${OUT}/LSAGG.o

@
<<LSAGG.NRLIB (NRLIB from MID)>>=
${MID}/LSAGG.NRLIB: ${MID}/LSAGG.spad
	@ echo 0 making ${MID}/LSAGG.NRLIB from ${MID}/LSAGG.spad
	@ (cd ${MID} ; 	echo ')co LSAGG.spad' | ${INTERPSYS} )

@
<<LSAGG.spad (SPAD from IN)>>=
${MID}/LSAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/LSAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category LSAGG ListAggregate" ${IN}/aggcat.spad.pamphlet >LSAGG.spad )

@
<<LSAGG-.o (BOOTSTRAP from MID)>>=
${MID}/LSAGG-.o: ${MID}/LSAGG-.lsp 
	@ echo 0 making ${MID}/LSAGG-.o from ${MID}/LSAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "LSAGG-.lsp" :output-file "LSAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/LSAGG-.o ${OUT}/LSAGG-.o

@
<<LSAGG-.lsp (LISP from IN)>>=
${MID}/LSAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/LSAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSAGG-.NRLIB ; \
	rm -rf ${OUT}/LSAGG-.o ; \
	${SPADBIN}/notangle -R"LSAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >LSAGG-.lsp )

@
<<LSAGG.o (BOOTSTRAP from MID)>>=
${MID}/LSAGG.o: ${MID}/LSAGG.lsp 
	@ echo 0 making ${MID}/LSAGG.o from ${MID}/LSAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "LSAGG.lsp" :output-file "LSAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/LSAGG.o ${OUT}/LSAGG.o

@
<<LSAGG.lsp (LISP from IN)>>=
${MID}/LSAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/LSAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSAGG.NRLIB ; \
	rm -rf ${OUT}/LSAGG.o ; \
	${SPADBIN}/notangle -R"LSAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >LSAGG.lsp )

@
<<LNAGG-.o (O from NRLIB)>>=
${OUT}/LNAGG-.o: ${MID}/LNAGG.NRLIB
	@ echo 0 making ${OUT}/LNAGG-.o from ${MID}/LNAGG-.NRLIB
	@ cp ${MID}/LNAGG-.NRLIB/code.o ${OUT}/LNAGG-.o

@
<<LNAGG-.NRLIB (NRLIB from MID)>>=
${MID}/LNAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/LNAGG.spad 
	@ echo 0 making ${MID}/LNAGG-.NRLIB from ${MID}/LNAGG.spad
	@ (cd ${MID} ; 	echo ')co LNAGG.spad' | ${INTERPSYS} )

@
<<LNAGG.o (O from NRLIB)>>=
${OUT}/LNAGG.o: ${MID}/LNAGG.NRLIB
	@ echo 0 making ${OUT}/LNAGG.o from ${MID}/LNAGG.NRLIB
	@ cp ${MID}/LNAGG.NRLIB/code.o ${OUT}/LNAGG.o

@
<<LNAGG.NRLIB (NRLIB from MID)>>=
${MID}/LNAGG.NRLIB: ${MID}/LNAGG.spad
	@ echo 0 making ${MID}/LNAGG.NRLIB from ${MID}/LNAGG.spad
	@ (cd ${MID} ; 	echo ')co LNAGG.spad' | ${INTERPSYS} )

@
<<LNAGG.spad (SPAD from IN)>>=
${MID}/LNAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/LNAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LNAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category LNAGG LinearAggregate" ${IN}/aggcat.spad.pamphlet >LNAGG.spad )

@
<<LNAGG-.o (BOOTSTRAP from MID)>>=
${MID}/LNAGG-.o: ${MID}/LNAGG-.lsp 
	@ echo 0 making ${MID}/LNAGG-.o from ${MID}/LNAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "LNAGG-.lsp" :output-file "LNAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/LNAGG-.o ${OUT}/LNAGG-.o

@
<<LNAGG-.lsp (LISP from IN)>>=
${MID}/LNAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/LNAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LNAGG-.NRLIB ; \
	rm -rf ${OUT}/LNAGG-.o ; \
	${SPADBIN}/notangle -R"LNAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >LNAGG-.lsp )

@
<<LNAGG.o (BOOTSTRAP from MID)>>=
${MID}/LNAGG.o: ${MID}/LNAGG.lsp 
	@ echo 0 making ${MID}/LNAGG.o from ${MID}/LNAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "LNAGG.lsp" :output-file "LNAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/LNAGG.o ${OUT}/LNAGG.o

@
<<LNAGG.lsp (LISP from IN)>>=
${MID}/LNAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/LNAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LNAGG.NRLIB ; \
	rm -rf ${OUT}/LNAGG.o ; \
	${SPADBIN}/notangle -R"LNAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >LNAGG.lsp )

@
<<MDAGG.o (O from NRLIB)>>=
${OUT}/MDAGG.o: ${MID}/MDAGG.NRLIB
	@ echo 0 making ${OUT}/MDAGG.o from ${MID}/MDAGG.NRLIB
	@ cp ${MID}/MDAGG.NRLIB/code.o ${OUT}/MDAGG.o

@
<<MDAGG.NRLIB (NRLIB from MID)>>=
${MID}/MDAGG.NRLIB: ${MID}/MDAGG.spad
	@ echo 0 making ${MID}/MDAGG.NRLIB from ${MID}/MDAGG.spad
	@ (cd ${MID} ; 	echo ')co MDAGG.spad' | ${INTERPSYS} )

@
<<MDAGG.spad (SPAD from IN)>>=
${MID}/MDAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/MDAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MDAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category MDAGG MultiDictionary" ${IN}/aggcat.spad.pamphlet >MDAGG.spad )

@
<<OMSAGG.o (O from NRLIB)>>=
${OUT}/OMSAGG.o: ${MID}/OMSAGG.NRLIB
	@ echo 0 making ${OUT}/OMSAGG.o from ${MID}/OMSAGG.NRLIB
	@ cp ${MID}/OMSAGG.NRLIB/code.o ${OUT}/OMSAGG.o

@
<<OMSAGG.NRLIB (NRLIB from MID)>>=
${MID}/OMSAGG.NRLIB: ${MID}/OMSAGG.spad
	@ echo 0 making ${MID}/OMSAGG.NRLIB from ${MID}/OMSAGG.spad
	@ (cd ${MID} ; 	echo ')co OMSAGG.spad' | ${INTERPSYS} )

@
<<OMSAGG.spad (SPAD from IN)>>=
${MID}/OMSAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/OMSAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMSAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category OMSAGG OrderedMultisetAggregate" ${IN}/aggcat.spad.pamphlet >OMSAGG.spad )

@
<<PRQAGG.o (O from NRLIB)>>=
${OUT}/PRQAGG.o: ${MID}/PRQAGG.NRLIB
	@ echo 0 making ${OUT}/PRQAGG.o from ${MID}/PRQAGG.NRLIB
	@ cp ${MID}/PRQAGG.NRLIB/code.o ${OUT}/PRQAGG.o

@
<<PRQAGG.NRLIB (NRLIB from MID)>>=
${MID}/PRQAGG.NRLIB: ${MID}/PRQAGG.spad
	@ echo 0 making ${MID}/PRQAGG.NRLIB from ${MID}/PRQAGG.spad
	@ (cd ${MID} ; 	echo ')co PRQAGG.spad' | ${INTERPSYS} )

@
<<PRQAGG.spad (SPAD from IN)>>=
${MID}/PRQAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/PRQAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRQAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category PRQAGG PriorityQueueAggregate" ${IN}/aggcat.spad.pamphlet >PRQAGG.spad )

@
<<QUAGG.o (O from NRLIB)>>=
${OUT}/QUAGG.o: ${MID}/QUAGG.NRLIB
	@ echo 0 making ${OUT}/QUAGG.o from ${MID}/QUAGG.NRLIB
	@ cp ${MID}/QUAGG.NRLIB/code.o ${OUT}/QUAGG.o

@
<<QUAGG.NRLIB (NRLIB from MID)>>=
${MID}/QUAGG.NRLIB: ${MID}/QUAGG.spad
	@ echo 0 making ${MID}/QUAGG.NRLIB from ${MID}/QUAGG.spad
	@ (cd ${MID} ; 	echo ')co QUAGG.spad' | ${INTERPSYS} )

@
<<QUAGG.spad (SPAD from IN)>>=
${MID}/QUAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/QUAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QUAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category QUAGG QueueAggregate" ${IN}/aggcat.spad.pamphlet >QUAGG.spad )

@
<<RCAGG-.o (O from NRLIB)>>=
${OUT}/RCAGG-.o: ${MID}/RCAGG.NRLIB
	@ echo 0 making ${OUT}/RCAGG-.o from ${MID}/RCAGG-.NRLIB
	@ cp ${MID}/RCAGG-.NRLIB/code.o ${OUT}/RCAGG-.o

@
<<RCAGG-.NRLIB (NRLIB from MID)>>=
${MID}/RCAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/RCAGG.spad 
	@ echo 0 making ${MID}/RCAGG-.NRLIB from ${MID}/RCAGG.spad
	@ (cd ${MID} ; 	echo ')co RCAGG.spad' | ${INTERPSYS} )

@
<<RCAGG.o (O from NRLIB)>>=
${OUT}/RCAGG.o: ${MID}/RCAGG.NRLIB
	@ echo 0 making ${OUT}/RCAGG.o from ${MID}/RCAGG.NRLIB
	@ cp ${MID}/RCAGG.NRLIB/code.o ${OUT}/RCAGG.o

@
<<RCAGG.NRLIB (NRLIB from MID)>>=
${MID}/RCAGG.NRLIB: ${MID}/RCAGG.spad
	@ echo 0 making ${MID}/RCAGG.NRLIB from ${MID}/RCAGG.spad
	@ (cd ${MID} ; 	echo ')co RCAGG.spad' | ${INTERPSYS} )

@
<<RCAGG.spad (SPAD from IN)>>=
${MID}/RCAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/RCAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RCAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category RCAGG RecursiveAggregate" ${IN}/aggcat.spad.pamphlet >RCAGG.spad )

@
<<RCAGG-.o (BOOTSTRAP from MID)>>=
${MID}/RCAGG-.o: ${MID}/RCAGG-.lsp 
	@ echo 0 making ${MID}/RCAGG-.o from ${MID}/RCAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RCAGG-.lsp" :output-file "RCAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/RCAGG-.o ${OUT}/RCAGG-.o

@
<<RCAGG-.lsp (LISP from IN)>>=
${MID}/RCAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/RCAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RCAGG-.NRLIB ; \
	rm -rf ${OUT}/RCAGG-.o ; \
	${SPADBIN}/notangle -R"RCAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >RCAGG-.lsp )

@
<<RCAGG.o (BOOTSTRAP from MID)>>=
${MID}/RCAGG.o: ${MID}/RCAGG.lsp 
	@ echo 0 making ${MID}/RCAGG.o from ${MID}/RCAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RCAGG.lsp" :output-file "RCAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/RCAGG.o ${OUT}/RCAGG.o

@
<<RCAGG.lsp (LISP from IN)>>=
${MID}/RCAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/RCAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RCAGG.NRLIB ; \
	rm -rf ${OUT}/RCAGG.o ; \
	${SPADBIN}/notangle -R"RCAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >RCAGG.lsp )

@
<<SETAGG-.o (O from NRLIB)>>=
${OUT}/SETAGG-.o: ${MID}/SETAGG.NRLIB
	@ echo 0 making ${OUT}/SETAGG-.o from ${MID}/SETAGG-.NRLIB
	@ cp ${MID}/SETAGG-.NRLIB/code.o ${OUT}/SETAGG-.o

@
<<SETAGG-.NRLIB (NRLIB from MID)>>=
${MID}/SETAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/SETAGG.spad 
	@ echo 0 making ${MID}/SETAGG-.NRLIB from ${MID}/SETAGG.spad
	@ (cd ${MID} ; 	echo ')co SETAGG.spad' | ${INTERPSYS} )

@
<<SETAGG.o (O from NRLIB)>>=
${OUT}/SETAGG.o: ${MID}/SETAGG.NRLIB
	@ echo 0 making ${OUT}/SETAGG.o from ${MID}/SETAGG.NRLIB
	@ cp ${MID}/SETAGG.NRLIB/code.o ${OUT}/SETAGG.o

@
<<SETAGG.NRLIB (NRLIB from MID)>>=
${MID}/SETAGG.NRLIB: ${MID}/SETAGG.spad
	@ echo 0 making ${MID}/SETAGG.NRLIB from ${MID}/SETAGG.spad
	@ (cd ${MID} ; 	echo ')co SETAGG.spad' | ${INTERPSYS} )

@
<<SETAGG.spad (SPAD from IN)>>=
${MID}/SETAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/SETAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category SETAGG SetAggregate" ${IN}/aggcat.spad.pamphlet >SETAGG.spad )

@
<<SETAGG-.o (BOOTSTRAP from MID)>>=
${MID}/SETAGG-.o: ${MID}/SETAGG-.lsp 
	@ echo 0 making ${MID}/SETAGG-.o from ${MID}/SETAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "SETAGG-.lsp" :output-file "SETAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/SETAGG-.o ${OUT}/SETAGG-.o

@
<<SETAGG-.lsp (LISP from IN)>>=
${MID}/SETAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/SETAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETAGG-.NRLIB ; \
	rm -rf ${OUT}/SETAGG-.o ; \
	${SPADBIN}/notangle -R"SETAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >SETAGG-.lsp )

@
<<SETAGG.o (BOOTSTRAP from MID)>>=
${MID}/SETAGG.o: ${MID}/SETAGG.lsp 
	@ echo 0 making ${MID}/SETAGG.o from ${MID}/SETAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "SETAGG.lsp" :output-file "SETAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/SETAGG.o ${OUT}/SETAGG.o

@
<<SETAGG.lsp (LISP from IN)>>=
${MID}/SETAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/SETAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETAGG.NRLIB ; \
	rm -rf ${OUT}/SETAGG.o ; \
	${SPADBIN}/notangle -R"SETAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >SETAGG.lsp )

@
<<SKAGG.o (O from NRLIB)>>=
${OUT}/SKAGG.o: ${MID}/SKAGG.NRLIB
	@ echo 0 making ${OUT}/SKAGG.o from ${MID}/SKAGG.NRLIB
	@ cp ${MID}/SKAGG.NRLIB/code.o ${OUT}/SKAGG.o

@
<<SKAGG.NRLIB (NRLIB from MID)>>=
${MID}/SKAGG.NRLIB: ${MID}/SKAGG.spad
	@ echo 0 making ${MID}/SKAGG.NRLIB from ${MID}/SKAGG.spad
	@ (cd ${MID} ; 	echo ')co SKAGG.spad' | ${INTERPSYS} )

@
<<SKAGG.spad (SPAD from IN)>>=
${MID}/SKAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/SKAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SKAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category SKAGG StackAggregate" ${IN}/aggcat.spad.pamphlet >SKAGG.spad )

@
<<SRAGG-.o (O from NRLIB)>>=
${OUT}/SRAGG-.o: ${MID}/SRAGG.NRLIB
	@ echo 0 making ${OUT}/SRAGG-.o from ${MID}/SRAGG-.NRLIB
	@ cp ${MID}/SRAGG-.NRLIB/code.o ${OUT}/SRAGG-.o

@
<<SRAGG-.NRLIB (NRLIB from MID)>>=
${MID}/SRAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/SRAGG.spad 
	@ echo 0 making ${MID}/SRAGG-.NRLIB from ${MID}/SRAGG.spad
	@ (cd ${MID} ; 	echo ')co SRAGG.spad' | ${INTERPSYS} )

@
<<SRAGG.o (O from NRLIB)>>=
${OUT}/SRAGG.o: ${MID}/SRAGG.NRLIB
	@ echo 0 making ${OUT}/SRAGG.o from ${MID}/SRAGG.NRLIB
	@ cp ${MID}/SRAGG.NRLIB/code.o ${OUT}/SRAGG.o

@
<<SRAGG.NRLIB (NRLIB from MID)>>=
${MID}/SRAGG.NRLIB: ${MID}/SRAGG.spad
	@ echo 0 making ${MID}/SRAGG.NRLIB from ${MID}/SRAGG.spad
	@ (cd ${MID} ; 	echo ')co SRAGG.spad' | ${INTERPSYS} )

@
<<SRAGG.spad (SPAD from IN)>>=
${MID}/SRAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/SRAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SRAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category SRAGG StringAggregate" ${IN}/aggcat.spad.pamphlet >SRAGG.spad )

@
<<STAGG-.o (O from NRLIB)>>=
${OUT}/STAGG-.o: ${MID}/STAGG.NRLIB
	@ echo 0 making ${OUT}/STAGG-.o from ${MID}/STAGG-.NRLIB
	@ cp ${MID}/STAGG-.NRLIB/code.o ${OUT}/STAGG-.o

@
<<STAGG-.NRLIB (NRLIB from MID)>>=
${MID}/STAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/STAGG.spad 
	@ echo 0 making ${MID}/STAGG-.NRLIB from ${MID}/STAGG.spad
	@ (cd ${MID} ; 	echo ')co STAGG.spad' | ${INTERPSYS} )

@
<<STAGG.o (O from NRLIB)>>=
${OUT}/STAGG.o: ${MID}/STAGG.NRLIB
	@ echo 0 making ${OUT}/STAGG.o from ${MID}/STAGG.NRLIB
	@ cp ${MID}/STAGG.NRLIB/code.o ${OUT}/STAGG.o

@
<<STAGG.NRLIB (NRLIB from MID)>>=
${MID}/STAGG.NRLIB: ${MID}/STAGG.spad
	@ echo 0 making ${MID}/STAGG.NRLIB from ${MID}/STAGG.spad
	@ (cd ${MID} ; 	echo ')co STAGG.spad' | ${INTERPSYS} )

@
<<STAGG.spad (SPAD from IN)>>=
${MID}/STAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/STAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category STAGG StreamAggregate" ${IN}/aggcat.spad.pamphlet >STAGG.spad )

@
<<STAGG-.o (BOOTSTRAP from MID)>>=
${MID}/STAGG-.o: ${MID}/STAGG-.lsp 
	@ echo 0 making ${MID}/STAGG-.o from ${MID}/STAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "STAGG-.lsp" :output-file "STAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/STAGG-.o ${OUT}/STAGG-.o

@
<<STAGG-.lsp (LISP from IN)>>=
${MID}/STAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/STAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STAGG-.NRLIB ; \
	rm -rf ${OUT}/STAGG-.o ; \
	${SPADBIN}/notangle -R"STAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >STAGG-.lsp )

@
<<STAGG.o (BOOTSTRAP from MID)>>=
${MID}/STAGG.o: ${MID}/STAGG.lsp 
	@ echo 0 making ${MID}/STAGG.o from ${MID}/STAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "STAGG.lsp" :output-file "STAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/STAGG.o ${OUT}/STAGG.o

@
<<STAGG.lsp (LISP from IN)>>=
${MID}/STAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/STAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STAGG.NRLIB ; \
	rm -rf ${OUT}/STAGG.o ; \
	${SPADBIN}/notangle -R"STAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >STAGG.lsp )

@
<<TBAGG-.o (O from NRLIB)>>=
${OUT}/TBAGG-.o: ${MID}/TBAGG.NRLIB
	@ echo 0 making ${OUT}/TBAGG-.o from ${MID}/TBAGG-.NRLIB
	@ cp ${MID}/TBAGG-.NRLIB/code.o ${OUT}/TBAGG-.o

@
<<TBAGG-.NRLIB (NRLIB from MID)>>=
${MID}/TBAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/TBAGG.spad 
	@ echo 0 making ${MID}/TBAGG-.NRLIB from ${MID}/TBAGG.spad
	@ (cd ${MID} ; 	echo ')co TBAGG.spad' | ${INTERPSYS} )

@
<<TBAGG.o (O from NRLIB)>>=
${OUT}/TBAGG.o: ${MID}/TBAGG.NRLIB
	@ echo 0 making ${OUT}/TBAGG.o from ${MID}/TBAGG.NRLIB
	@ cp ${MID}/TBAGG.NRLIB/code.o ${OUT}/TBAGG.o

@
<<TBAGG.NRLIB (NRLIB from MID)>>=
${MID}/TBAGG.NRLIB: ${MID}/TBAGG.spad
	@ echo 0 making ${MID}/TBAGG.NRLIB from ${MID}/TBAGG.spad
	@ (cd ${MID} ; 	echo ')co TBAGG.spad' | ${INTERPSYS} )

@
<<TBAGG.spad (SPAD from IN)>>=
${MID}/TBAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/TBAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TBAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category TBAGG TableAggregate" ${IN}/aggcat.spad.pamphlet >TBAGG.spad )

@
<<URAGG-.o (O from NRLIB)>>=
${OUT}/URAGG-.o: ${MID}/URAGG.NRLIB
	@ echo 0 making ${OUT}/URAGG-.o from ${MID}/URAGG-.NRLIB
	@ cp ${MID}/URAGG-.NRLIB/code.o ${OUT}/URAGG-.o

@
<<URAGG-.NRLIB (NRLIB from MID)>>=
${MID}/URAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/URAGG.spad 
	@ echo 0 making ${MID}/URAGG-.NRLIB from ${MID}/URAGG.spad
	@ (cd ${MID} ; 	echo ')co URAGG.spad' | ${INTERPSYS} )

@
<<URAGG.o (O from NRLIB)>>=
${OUT}/URAGG.o: ${MID}/URAGG.NRLIB
	@ echo 0 making ${OUT}/URAGG.o from ${MID}/URAGG.NRLIB
	@ cp ${MID}/URAGG.NRLIB/code.o ${OUT}/URAGG.o

@
<<URAGG.NRLIB (NRLIB from MID)>>=
${MID}/URAGG.NRLIB: ${MID}/URAGG.spad
	@ echo 0 making ${MID}/URAGG.NRLIB from ${MID}/URAGG.spad
	@ (cd ${MID} ; 	echo ')co URAGG.spad' | ${INTERPSYS} )

@
<<URAGG.spad (SPAD from IN)>>=
${MID}/URAGG.spad: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/URAGG.spad from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf URAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category URAGG UnaryRecursiveAggregate" ${IN}/aggcat.spad.pamphlet >URAGG.spad )

@
<<URAGG-.o (BOOTSTRAP from MID)>>=
${MID}/URAGG-.o: ${MID}/URAGG-.lsp 
	@ echo 0 making ${MID}/URAGG-.o from ${MID}/URAGG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "URAGG-.lsp" :output-file "URAGG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/URAGG-.o ${OUT}/URAGG-.o

@
<<URAGG-.lsp (LISP from IN)>>=
${MID}/URAGG-.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/URAGG-.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf URAGG-.NRLIB ; \
	rm -rf ${OUT}/URAGG-.o ; \
	${SPADBIN}/notangle -R"URAGG-.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >URAGG-.lsp )

@
<<URAGG.o (BOOTSTRAP from MID)>>=
${MID}/URAGG.o: ${MID}/URAGG.lsp 
	@ echo 0 making ${MID}/URAGG.o from ${MID}/URAGG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "URAGG.lsp" :output-file "URAGG.o"))' | ${DEPSYS} )
	@ cp ${MID}/URAGG.o ${OUT}/URAGG.o

@
<<URAGG.lsp (LISP from IN)>>=
${MID}/URAGG.lsp: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${MID}/URAGG.lsp from ${IN}/aggcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf URAGG.NRLIB ; \
	rm -rf ${OUT}/URAGG.o ; \
	${SPADBIN}/notangle -R"URAGG.lsp BOOTSTRAP" ${IN}/aggcat.spad.pamphlet >URAGG.lsp )

@
<<aggcat.spad.dvi (DOC from IN)>>=
${DOC}/aggcat.spad.dvi: ${IN}/aggcat.spad.pamphlet
	@ echo 0 making ${DOC}/aggcat.spad.dvi from ${IN}/aggcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/aggcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} aggcat.spad ; \
	rm -f ${DOC}/aggcat.spad.pamphlet ; \
	rm -f ${DOC}/aggcat.spad.tex ; \
	rm -f ${DOC}/aggcat.spad )

@
\subsection{algcat.spad \cite{1}}
<<algcat.spad (SPAD from IN)>>=
${MID}/algcat.spad: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${MID}/algcat.spad from ${IN}/algcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/algcat.spad.pamphlet >algcat.spad )

@
<<CPIMA.o (O from NRLIB)>>=
${OUT}/CPIMA.o: ${MID}/CPIMA.NRLIB
	@ echo 0 making ${OUT}/CPIMA.o from ${MID}/CPIMA.NRLIB
	@ cp ${MID}/CPIMA.NRLIB/code.o ${OUT}/CPIMA.o

@
<<CPIMA.NRLIB (NRLIB from MID)>>=
${MID}/CPIMA.NRLIB: ${MID}/CPIMA.spad
	@ echo 0 making ${MID}/CPIMA.NRLIB from ${MID}/CPIMA.spad
	@ (cd ${MID} ; 	echo ')co CPIMA.spad' | ${INTERPSYS} )

@
<<CPIMA.spad (SPAD from IN)>>=
${MID}/CPIMA.spad: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${MID}/CPIMA.spad from ${IN}/algcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CPIMA.NRLIB ; \
	${SPADBIN}/notangle -R"package CPIMA CharacteristicPolynomialInMonogenicalAlgebra" ${IN}/algcat.spad.pamphlet >CPIMA.spad )

@
<<FINRALG-.o (O from NRLIB)>>=
${OUT}/FINRALG-.o: ${MID}/FINRALG.NRLIB
	@ echo 0 making ${OUT}/FINRALG-.o from ${MID}/FINRALG-.NRLIB
	@ cp ${MID}/FINRALG-.NRLIB/code.o ${OUT}/FINRALG-.o

@
<<FINRALG-.NRLIB (NRLIB from MID)>>=
${MID}/FINRALG-.NRLIB: ${OUT}/TYPE.o ${MID}/FINRALG.spad 
	@ echo 0 making ${MID}/FINRALG-.NRLIB from ${MID}/FINRALG.spad
	@ (cd ${MID} ; 	echo ')co FINRALG.spad' | ${INTERPSYS} )

@
<<FINRALG.o (O from NRLIB)>>=
${OUT}/FINRALG.o: ${MID}/FINRALG.NRLIB
	@ echo 0 making ${OUT}/FINRALG.o from ${MID}/FINRALG.NRLIB
	@ cp ${MID}/FINRALG.NRLIB/code.o ${OUT}/FINRALG.o

@
<<FINRALG.NRLIB (NRLIB from MID)>>=
${MID}/FINRALG.NRLIB: ${MID}/FINRALG.spad
	@ echo 0 making ${MID}/FINRALG.NRLIB from ${MID}/FINRALG.spad
	@ (cd ${MID} ; 	echo ')co FINRALG.spad' | ${INTERPSYS} )

@
<<FINRALG.spad (SPAD from IN)>>=
${MID}/FINRALG.spad: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${MID}/FINRALG.spad from ${IN}/algcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FINRALG.NRLIB ; \
	${SPADBIN}/notangle -R"category FINRALG FiniteRankAlgebra" ${IN}/algcat.spad.pamphlet >FINRALG.spad )

@
<<FRAMALG-.o (O from NRLIB)>>=
${OUT}/FRAMALG-.o: ${MID}/FRAMALG.NRLIB
	@ echo 0 making ${OUT}/FRAMALG-.o from ${MID}/FRAMALG-.NRLIB
	@ cp ${MID}/FRAMALG-.NRLIB/code.o ${OUT}/FRAMALG-.o

@
<<FRAMALG-.NRLIB (NRLIB from MID)>>=
${MID}/FRAMALG-.NRLIB: ${OUT}/TYPE.o ${MID}/FRAMALG.spad 
	@ echo 0 making ${MID}/FRAMALG-.NRLIB from ${MID}/FRAMALG.spad
	@ (cd ${MID} ; 	echo ')co FRAMALG.spad' | ${INTERPSYS} )

@
<<FRAMALG.o (O from NRLIB)>>=
${OUT}/FRAMALG.o: ${MID}/FRAMALG.NRLIB
	@ echo 0 making ${OUT}/FRAMALG.o from ${MID}/FRAMALG.NRLIB
	@ cp ${MID}/FRAMALG.NRLIB/code.o ${OUT}/FRAMALG.o

@
<<FRAMALG.NRLIB (NRLIB from MID)>>=
${MID}/FRAMALG.NRLIB: ${MID}/FRAMALG.spad
	@ echo 0 making ${MID}/FRAMALG.NRLIB from ${MID}/FRAMALG.spad
	@ (cd ${MID} ; 	echo ')co FRAMALG.spad' | ${INTERPSYS} )

@
<<FRAMALG.spad (SPAD from IN)>>=
${MID}/FRAMALG.spad: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${MID}/FRAMALG.spad from ${IN}/algcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRAMALG.NRLIB ; \
	${SPADBIN}/notangle -R"category FRAMALG FramedAlgebra" ${IN}/algcat.spad.pamphlet >FRAMALG.spad )

@
<<MONOGEN-.o (O from NRLIB)>>=
${OUT}/MONOGEN-.o: ${MID}/MONOGEN.NRLIB
	@ echo 0 making ${OUT}/MONOGEN-.o from ${MID}/MONOGEN-.NRLIB
	@ cp ${MID}/MONOGEN-.NRLIB/code.o ${OUT}/MONOGEN-.o

@
<<MONOGEN-.NRLIB (NRLIB from MID)>>=
${MID}/MONOGEN-.NRLIB: ${OUT}/TYPE.o ${MID}/MONOGEN.spad 
	@ echo 0 making ${MID}/MONOGEN-.NRLIB from ${MID}/MONOGEN.spad
	@ (cd ${MID} ; 	echo ')co MONOGEN.spad' | ${INTERPSYS} )

@
<<MONOGEN.o (O from NRLIB)>>=
${OUT}/MONOGEN.o: ${MID}/MONOGEN.NRLIB
	@ echo 0 making ${OUT}/MONOGEN.o from ${MID}/MONOGEN.NRLIB
	@ cp ${MID}/MONOGEN.NRLIB/code.o ${OUT}/MONOGEN.o

@
<<MONOGEN.NRLIB (NRLIB from MID)>>=
${MID}/MONOGEN.NRLIB: ${MID}/MONOGEN.spad
	@ echo 0 making ${MID}/MONOGEN.NRLIB from ${MID}/MONOGEN.spad
	@ (cd ${MID} ; 	echo ')co MONOGEN.spad' | ${INTERPSYS} )

@
<<MONOGEN.spad (SPAD from IN)>>=
${MID}/MONOGEN.spad: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${MID}/MONOGEN.spad from ${IN}/algcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONOGEN.NRLIB ; \
	${SPADBIN}/notangle -R"category MONOGEN MonogenicAlgebra" ${IN}/algcat.spad.pamphlet >MONOGEN.spad )

@
<<NORMMA.o (O from NRLIB)>>=
${OUT}/NORMMA.o: ${MID}/NORMMA.NRLIB
	@ echo 0 making ${OUT}/NORMMA.o from ${MID}/NORMMA.NRLIB
	@ cp ${MID}/NORMMA.NRLIB/code.o ${OUT}/NORMMA.o

@
<<NORMMA.NRLIB (NRLIB from MID)>>=
${MID}/NORMMA.NRLIB: ${MID}/NORMMA.spad
	@ echo 0 making ${MID}/NORMMA.NRLIB from ${MID}/NORMMA.spad
	@ (cd ${MID} ; 	echo ')co NORMMA.spad' | ${INTERPSYS} )

@
<<NORMMA.spad (SPAD from IN)>>=
${MID}/NORMMA.spad: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${MID}/NORMMA.spad from ${IN}/algcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NORMMA.NRLIB ; \
	${SPADBIN}/notangle -R"package NORMMA NormInMonogenicAlgebra" ${IN}/algcat.spad.pamphlet >NORMMA.spad )

@
<<algcat.spad.dvi (DOC from IN)>>=
${DOC}/algcat.spad.dvi: ${IN}/algcat.spad.pamphlet
	@ echo 0 making ${DOC}/algcat.spad.dvi from ${IN}/algcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/algcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} algcat.spad ; \
	rm -f ${DOC}/algcat.spad.pamphlet ; \
	rm -f ${DOC}/algcat.spad.tex ; \
	rm -f ${DOC}/algcat.spad )

@
\subsection{algext.spad \cite{1}}
<<algext.spad (SPAD from IN)>>=
${MID}/algext.spad: ${IN}/algext.spad.pamphlet
	@ echo 0 making ${MID}/algext.spad from ${IN}/algext.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/algext.spad.pamphlet >algext.spad )

@
<<SAE.o (O from NRLIB)>>=
${OUT}/SAE.o: ${MID}/SAE.NRLIB
	@ echo 0 making ${OUT}/SAE.o from ${MID}/SAE.NRLIB
	@ cp ${MID}/SAE.NRLIB/code.o ${OUT}/SAE.o

@
<<SAE.NRLIB (NRLIB from MID)>>=
${MID}/SAE.NRLIB: ${MID}/SAE.spad
	@ echo 0 making ${MID}/SAE.NRLIB from ${MID}/SAE.spad
	@ (cd ${MID} ; 	echo ')co SAE.spad' | ${INTERPSYS} )

@
<<SAE.spad (SPAD from IN)>>=
${MID}/SAE.spad: ${IN}/algext.spad.pamphlet
	@ echo 0 making ${MID}/SAE.spad from ${IN}/algext.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SAE.NRLIB ; \
	${SPADBIN}/notangle -R"domain SAE SimpleAlgebraicExtension" ${IN}/algext.spad.pamphlet >SAE.spad )

@
<<algext.spad.dvi (DOC from IN)>>=
${DOC}/algext.spad.dvi: ${IN}/algext.spad.pamphlet
	@ echo 0 making ${DOC}/algext.spad.dvi from ${IN}/algext.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/algext.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} algext.spad ; \
	rm -f ${DOC}/algext.spad.pamphlet ; \
	rm -f ${DOC}/algext.spad.tex ; \
	rm -f ${DOC}/algext.spad )

@
\subsection{algfact.spad \cite{1}}
<<algfact.spad (SPAD from IN)>>=
${MID}/algfact.spad: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${MID}/algfact.spad from ${IN}/algfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/algfact.spad.pamphlet >algfact.spad )

@
<<ALGFACT.o (O from NRLIB)>>=
${OUT}/ALGFACT.o: ${MID}/ALGFACT.NRLIB
	@ echo 0 making ${OUT}/ALGFACT.o from ${MID}/ALGFACT.NRLIB
	@ cp ${MID}/ALGFACT.NRLIB/code.o ${OUT}/ALGFACT.o

@
<<ALGFACT.NRLIB (NRLIB from MID)>>=
${MID}/ALGFACT.NRLIB: ${MID}/ALGFACT.spad
	@ echo 0 making ${MID}/ALGFACT.NRLIB from ${MID}/ALGFACT.spad
	@ (cd ${MID} ; 	echo ')co ALGFACT.spad' | ${INTERPSYS} )

@
<<ALGFACT.spad (SPAD from IN)>>=
${MID}/ALGFACT.spad: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${MID}/ALGFACT.spad from ${IN}/algfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package ALGFACT AlgFactor" ${IN}/algfact.spad.pamphlet >ALGFACT.spad )

@
<<IALGFACT.o (O from NRLIB)>>=
${OUT}/IALGFACT.o: ${MID}/IALGFACT.NRLIB
	@ echo 0 making ${OUT}/IALGFACT.o from ${MID}/IALGFACT.NRLIB
	@ cp ${MID}/IALGFACT.NRLIB/code.o ${OUT}/IALGFACT.o

@
<<IALGFACT.NRLIB (NRLIB from MID)>>=
${MID}/IALGFACT.NRLIB: ${MID}/IALGFACT.spad
	@ echo 0 making ${MID}/IALGFACT.NRLIB from ${MID}/IALGFACT.spad
	@ (cd ${MID} ; 	echo ')co IALGFACT.spad' | ${INTERPSYS} )

@
<<IALGFACT.spad (SPAD from IN)>>=
${MID}/IALGFACT.spad: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${MID}/IALGFACT.spad from ${IN}/algfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IALGFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package IALGFACT InnerAlgFactor" ${IN}/algfact.spad.pamphlet >IALGFACT.spad )

@
<<RFFACT.o (O from NRLIB)>>=
${OUT}/RFFACT.o: ${MID}/RFFACT.NRLIB
	@ echo 0 making ${OUT}/RFFACT.o from ${MID}/RFFACT.NRLIB
	@ cp ${MID}/RFFACT.NRLIB/code.o ${OUT}/RFFACT.o

@
<<RFFACT.NRLIB (NRLIB from MID)>>=
${MID}/RFFACT.NRLIB: ${MID}/RFFACT.spad
	@ echo 0 making ${MID}/RFFACT.NRLIB from ${MID}/RFFACT.spad
	@ (cd ${MID} ; 	echo ')co RFFACT.spad' | ${INTERPSYS} )

@
<<RFFACT.spad (SPAD from IN)>>=
${MID}/RFFACT.spad: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${MID}/RFFACT.spad from ${IN}/algfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RFFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package RFFACT RationalFunctionFactor" ${IN}/algfact.spad.pamphlet >RFFACT.spad )

@
<<SAEFACT.o (O from NRLIB)>>=
${OUT}/SAEFACT.o: ${MID}/SAEFACT.NRLIB
	@ echo 0 making ${OUT}/SAEFACT.o from ${MID}/SAEFACT.NRLIB
	@ cp ${MID}/SAEFACT.NRLIB/code.o ${OUT}/SAEFACT.o

@
<<SAEFACT.NRLIB (NRLIB from MID)>>=
${MID}/SAEFACT.NRLIB: ${MID}/SAEFACT.spad
	@ echo 0 making ${MID}/SAEFACT.NRLIB from ${MID}/SAEFACT.spad
	@ (cd ${MID} ; 	echo ')co SAEFACT.spad' | ${INTERPSYS} )

@
<<SAEFACT.spad (SPAD from IN)>>=
${MID}/SAEFACT.spad: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${MID}/SAEFACT.spad from ${IN}/algfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SAEFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package SAEFACT SimpleAlgebraicExtensionAlgFactor" ${IN}/algfact.spad.pamphlet >SAEFACT.spad )

@
<<SAERFFC.o (O from NRLIB)>>=
${OUT}/SAERFFC.o: ${MID}/SAERFFC.NRLIB
	@ echo 0 making ${OUT}/SAERFFC.o from ${MID}/SAERFFC.NRLIB
	@ cp ${MID}/SAERFFC.NRLIB/code.o ${OUT}/SAERFFC.o

@
<<SAERFFC.NRLIB (NRLIB from MID)>>=
${MID}/SAERFFC.NRLIB: ${MID}/SAERFFC.spad
	@ echo 0 making ${MID}/SAERFFC.NRLIB from ${MID}/SAERFFC.spad
	@ (cd ${MID} ; 	echo ')co SAERFFC.spad' | ${INTERPSYS} )

@
<<SAERFFC.spad (SPAD from IN)>>=
${MID}/SAERFFC.spad: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${MID}/SAERFFC.spad from ${IN}/algfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SAERFFC.NRLIB ; \
	${SPADBIN}/notangle -R"package SAERFFC SAERationalFunctionAlgFactor" ${IN}/algfact.spad.pamphlet >SAERFFC.spad )

@
<<algfact.spad.dvi (DOC from IN)>>=
${DOC}/algfact.spad.dvi: ${IN}/algfact.spad.pamphlet
	@ echo 0 making ${DOC}/algfact.spad.dvi from ${IN}/algfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/algfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} algfact.spad ; \
	rm -f ${DOC}/algfact.spad.pamphlet ; \
	rm -f ${DOC}/algfact.spad.tex ; \
	rm -f ${DOC}/algfact.spad )

@
\subsection{algfunc.spad \cite{1}}
<<algfunc.spad (SPAD from IN)>>=
${MID}/algfunc.spad: ${IN}/algfunc.spad.pamphlet
	@ echo 0 making ${MID}/algfunc.spad from ${IN}/algfunc.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/algfunc.spad.pamphlet >algfunc.spad )

@
<<ACF-.o (O from NRLIB)>>=
${OUT}/ACF-.o: ${MID}/ACF.NRLIB
	@ echo 0 making ${OUT}/ACF-.o from ${MID}/ACF-.NRLIB
	@ cp ${MID}/ACF-.NRLIB/code.o ${OUT}/ACF-.o

@
<<ACF-.NRLIB (NRLIB from MID)>>=
${MID}/ACF-.NRLIB: ${OUT}/TYPE.o ${MID}/ACF.spad 
	@ echo 0 making ${MID}/ACF-.NRLIB from ${MID}/ACF.spad
	@ (cd ${MID} ; 	echo ')co ACF.spad' | ${INTERPSYS} )

@
<<ACF.o (O from NRLIB)>>=
${OUT}/ACF.o: ${MID}/ACF.NRLIB
	@ echo 0 making ${OUT}/ACF.o from ${MID}/ACF.NRLIB
	@ cp ${MID}/ACF.NRLIB/code.o ${OUT}/ACF.o

@
<<ACF.NRLIB (NRLIB from MID)>>=
${MID}/ACF.NRLIB: ${MID}/ACF.spad
	@ echo 0 making ${MID}/ACF.NRLIB from ${MID}/ACF.spad
	@ (cd ${MID} ; 	echo ')co ACF.spad' | ${INTERPSYS} )

@
<<ACF.spad (SPAD from IN)>>=
${MID}/ACF.spad: ${IN}/algfunc.spad.pamphlet
	@ echo 0 making ${MID}/ACF.spad from ${IN}/algfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ACF.NRLIB ; \
	${SPADBIN}/notangle -R"category ACF AlgebraicallyClosedField" ${IN}/algfunc.spad.pamphlet >ACF.spad )

@
<<ACFS-.o (O from NRLIB)>>=
${OUT}/ACFS-.o: ${MID}/ACFS.NRLIB
	@ echo 0 making ${OUT}/ACFS-.o from ${MID}/ACFS-.NRLIB
	@ cp ${MID}/ACFS-.NRLIB/code.o ${OUT}/ACFS-.o

@
<<ACFS-.NRLIB (NRLIB from MID)>>=
${MID}/ACFS-.NRLIB: ${OUT}/TYPE.o ${MID}/ACFS.spad 
	@ echo 0 making ${MID}/ACFS-.NRLIB from ${MID}/ACFS.spad
	@ (cd ${MID} ; 	echo ')co ACFS.spad' | ${INTERPSYS} )

@
<<ACFS.o (O from NRLIB)>>=
${OUT}/ACFS.o: ${MID}/ACFS.NRLIB
	@ echo 0 making ${OUT}/ACFS.o from ${MID}/ACFS.NRLIB
	@ cp ${MID}/ACFS.NRLIB/code.o ${OUT}/ACFS.o

@
<<ACFS.NRLIB (NRLIB from MID)>>=
${MID}/ACFS.NRLIB: ${MID}/ACFS.spad
	@ echo 0 making ${MID}/ACFS.NRLIB from ${MID}/ACFS.spad
	@ (cd ${MID} ; 	echo ')co ACFS.spad' | ${INTERPSYS} )

@
<<ACFS.spad (SPAD from IN)>>=
${MID}/ACFS.spad: ${IN}/algfunc.spad.pamphlet
	@ echo 0 making ${MID}/ACFS.spad from ${IN}/algfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ACFS.NRLIB ; \
	${SPADBIN}/notangle -R"category ACFS AlgebraicallyClosedFunctionSpace" ${IN}/algfunc.spad.pamphlet >ACFS.spad )

@
<<AF.o (O from NRLIB)>>=
${OUT}/AF.o: ${MID}/AF.NRLIB
	@ echo 0 making ${OUT}/AF.o from ${MID}/AF.NRLIB
	@ cp ${MID}/AF.NRLIB/code.o ${OUT}/AF.o

@
<<AF.NRLIB (NRLIB from MID)>>=
${MID}/AF.NRLIB: ${MID}/AF.spad
	@ echo 0 making ${MID}/AF.NRLIB from ${MID}/AF.spad
	@ (cd ${MID} ; 	echo ')co AF.spad' | ${INTERPSYS} )

@
<<AF.spad (SPAD from IN)>>=
${MID}/AF.spad: ${IN}/algfunc.spad.pamphlet
	@ echo 0 making ${MID}/AF.spad from ${IN}/algfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf AF.NRLIB ; \
	${SPADBIN}/notangle -R"package AF AlgebraicFunction" ${IN}/algfunc.spad.pamphlet >AF.spad )

@
<<algfunc.spad.dvi (DOC from IN)>>=
${DOC}/algfunc.spad.dvi: ${IN}/algfunc.spad.pamphlet
	@ echo 0 making ${DOC}/algfunc.spad.dvi from ${IN}/algfunc.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/algfunc.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} algfunc.spad ; \
	rm -f ${DOC}/algfunc.spad.pamphlet ; \
	rm -f ${DOC}/algfunc.spad.tex ; \
	rm -f ${DOC}/algfunc.spad )

@
\subsection{allfact.spad \cite{1}}
<<allfact.spad (SPAD from IN)>>=
${MID}/allfact.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/allfact.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/allfact.spad.pamphlet >allfact.spad )

@
<<GENMFACT.o (O from NRLIB)>>=
${OUT}/GENMFACT.o: ${MID}/GENMFACT.NRLIB
	@ echo 0 making ${OUT}/GENMFACT.o from ${MID}/GENMFACT.NRLIB
	@ cp ${MID}/GENMFACT.NRLIB/code.o ${OUT}/GENMFACT.o

@
<<GENMFACT.NRLIB (NRLIB from MID)>>=
${MID}/GENMFACT.NRLIB: ${MID}/GENMFACT.spad
	@ echo 0 making ${MID}/GENMFACT.NRLIB from ${MID}/GENMFACT.spad
	@ (cd ${MID} ; 	echo ')co GENMFACT.spad' | ${INTERPSYS} )

@
<<GENMFACT.spad (SPAD from IN)>>=
${MID}/GENMFACT.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/GENMFACT.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GENMFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package GENMFACT GeneralizedMultivariateFactorize" ${IN}/allfact.spad.pamphlet >GENMFACT.spad )

@
<<MPCPF.o (O from NRLIB)>>=
${OUT}/MPCPF.o: ${MID}/MPCPF.NRLIB
	@ echo 0 making ${OUT}/MPCPF.o from ${MID}/MPCPF.NRLIB
	@ cp ${MID}/MPCPF.NRLIB/code.o ${OUT}/MPCPF.o

@
<<MPCPF.NRLIB (NRLIB from MID)>>=
${MID}/MPCPF.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MPCPF.spad
	@ echo 0 making ${MID}/MPCPF.NRLIB from ${MID}/MPCPF.spad
	@ (cd ${MID} ; 	echo ')co MPCPF.spad' | ${INTERPSYS} )

@
<<MPCPF.spad (SPAD from IN)>>=
${MID}/MPCPF.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/MPCPF.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MPCPF.NRLIB ; \
	${SPADBIN}/notangle -R"package MPCPF MPolyCatPolyFactorizer" ${IN}/allfact.spad.pamphlet >MPCPF.spad )

@
<<MPRFF.o (O from NRLIB)>>=
${OUT}/MPRFF.o: ${MID}/MPRFF.NRLIB
	@ echo 0 making ${OUT}/MPRFF.o from ${MID}/MPRFF.NRLIB
	@ cp ${MID}/MPRFF.NRLIB/code.o ${OUT}/MPRFF.o

@
<<MPRFF.NRLIB (NRLIB from MID)>>=
${MID}/MPRFF.NRLIB: ${MID}/MPRFF.spad
	@ echo 0 making ${MID}/MPRFF.NRLIB from ${MID}/MPRFF.spad
	@ (cd ${MID} ; 	echo ')co MPRFF.spad' | ${INTERPSYS} )

@
<<MPRFF.spad (SPAD from IN)>>=
${MID}/MPRFF.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/MPRFF.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MPRFF.NRLIB ; \
	${SPADBIN}/notangle -R"package MPRFF MPolyCatRationalFunctionFactorizer" ${IN}/allfact.spad.pamphlet >MPRFF.spad )

@
<<MRATFAC.o (O from NRLIB)>>=
${OUT}/MRATFAC.o: ${MID}/MRATFAC.NRLIB
	@ echo 0 making ${OUT}/MRATFAC.o from ${MID}/MRATFAC.NRLIB
	@ cp ${MID}/MRATFAC.NRLIB/code.o ${OUT}/MRATFAC.o

@
<<MRATFAC.NRLIB (NRLIB from MID)>>=
${MID}/MRATFAC.NRLIB: ${MID}/MRATFAC.spad
	@ echo 0 making ${MID}/MRATFAC.NRLIB from ${MID}/MRATFAC.spad
	@ (cd ${MID} ; 	echo ')co MRATFAC.spad' | ${INTERPSYS} )

@
<<MRATFAC.spad (SPAD from IN)>>=
${MID}/MRATFAC.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/MRATFAC.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MRATFAC.NRLIB ; \
	${SPADBIN}/notangle -R"package MRATFAC MRationalFactorize" ${IN}/allfact.spad.pamphlet >MRATFAC.spad )

@
<<RFFACTOR.o (O from NRLIB)>>=
${OUT}/RFFACTOR.o: ${MID}/RFFACTOR.NRLIB
	@ echo 0 making ${OUT}/RFFACTOR.o from ${MID}/RFFACTOR.NRLIB
	@ cp ${MID}/RFFACTOR.NRLIB/code.o ${OUT}/RFFACTOR.o

@
<<RFFACTOR.NRLIB (NRLIB from MID)>>=
${MID}/RFFACTOR.NRLIB: ${MID}/RFFACTOR.spad
	@ echo 0 making ${MID}/RFFACTOR.NRLIB from ${MID}/RFFACTOR.spad
	@ (cd ${MID} ; 	echo ')co RFFACTOR.spad' | ${INTERPSYS} )

@
<<RFFACTOR.spad (SPAD from IN)>>=
${MID}/RFFACTOR.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/RFFACTOR.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RFFACTOR.NRLIB ; \
	${SPADBIN}/notangle -R"package RFFACTOR RationalFunctionFactorizer" ${IN}/allfact.spad.pamphlet >RFFACTOR.spad )

@
<<SUPFRACF.o (O from NRLIB)>>=
${OUT}/SUPFRACF.o: ${MID}/SUPFRACF.NRLIB
	@ echo 0 making ${OUT}/SUPFRACF.o from ${MID}/SUPFRACF.NRLIB
	@ cp ${MID}/SUPFRACF.NRLIB/code.o ${OUT}/SUPFRACF.o

@
<<SUPFRACF.NRLIB (NRLIB from MID)>>=
${MID}/SUPFRACF.NRLIB: ${MID}/SUPFRACF.spad
	@ echo 0 making ${MID}/SUPFRACF.NRLIB from ${MID}/SUPFRACF.spad
	@ (cd ${MID} ; 	echo ')co SUPFRACF.spad' | ${INTERPSYS} )

@
<<SUPFRACF.spad (SPAD from IN)>>=
${MID}/SUPFRACF.spad: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${MID}/SUPFRACF.spad from ${IN}/allfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUPFRACF.NRLIB ; \
	${SPADBIN}/notangle -R"package SUPFRACF SupFractionFactorizer" ${IN}/allfact.spad.pamphlet >SUPFRACF.spad )

@
<<allfact.spad.dvi (DOC from IN)>>=
${DOC}/allfact.spad.dvi: ${IN}/allfact.spad.pamphlet
	@ echo 0 making ${DOC}/allfact.spad.dvi from ${IN}/allfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/allfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} allfact.spad ; \
	rm -f ${DOC}/allfact.spad.pamphlet ; \
	rm -f ${DOC}/allfact.spad.tex ; \
	rm -f ${DOC}/allfact.spad )

@
\subsection{alql.spad \cite{1}}
<<alql.spad (SPAD from IN)>>=
${MID}/alql.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/alql.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/alql.spad.pamphlet >alql.spad )

@
<<DBASE.o (O from NRLIB)>>=
${OUT}/DBASE.o: ${MID}/DBASE.NRLIB
	@ echo 0 making ${OUT}/DBASE.o from ${MID}/DBASE.NRLIB
	@ cp ${MID}/DBASE.NRLIB/code.o ${OUT}/DBASE.o

@
<<DBASE.NRLIB (NRLIB from MID)>>=
${MID}/DBASE.NRLIB: ${MID}/DBASE.spad
	@ echo 0 making ${MID}/DBASE.NRLIB from ${MID}/DBASE.spad
	@ (cd ${MID} ; 	echo ')co DBASE.spad' | ${INTERPSYS} )

@
<<DBASE.spad (SPAD from IN)>>=
${MID}/DBASE.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/DBASE.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DBASE.NRLIB ; \
	${SPADBIN}/notangle -R"domain DBASE Database" ${IN}/alql.spad.pamphlet >DBASE.spad )

@
<<DLIST.o (O from NRLIB)>>=
${OUT}/DLIST.o: ${MID}/DLIST.NRLIB
	@ echo 0 making ${OUT}/DLIST.o from ${MID}/DLIST.NRLIB
	@ cp ${MID}/DLIST.NRLIB/code.o ${OUT}/DLIST.o

@
<<DLIST.NRLIB (NRLIB from MID)>>=
${MID}/DLIST.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DLIST.spad
	@ echo 0 making ${MID}/DLIST.NRLIB from ${MID}/DLIST.spad
	@ (cd ${MID} ; 	echo ')co DLIST.spad' | ${INTERPSYS} )

@
<<DLIST.spad (SPAD from IN)>>=
${MID}/DLIST.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/DLIST.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DLIST.NRLIB ; \
	${SPADBIN}/notangle -R"domain DLIST DataList" ${IN}/alql.spad.pamphlet >DLIST.spad )

@
<<ICARD.o (O from NRLIB)>>=
${OUT}/ICARD.o: ${MID}/ICARD.NRLIB
	@ echo 0 making ${OUT}/ICARD.o from ${MID}/ICARD.NRLIB
	@ cp ${MID}/ICARD.NRLIB/code.o ${OUT}/ICARD.o

@
<<ICARD.NRLIB (NRLIB from MID)>>=
${MID}/ICARD.NRLIB: ${MID}/ICARD.spad
	@ echo 0 making ${MID}/ICARD.NRLIB from ${MID}/ICARD.spad
	@ (cd ${MID} ; 	echo ')co ICARD.spad' | ${INTERPSYS} )

@
<<ICARD.spad (SPAD from IN)>>=
${MID}/ICARD.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/ICARD.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ICARD.NRLIB ; \
	${SPADBIN}/notangle -R"domain ICARD IndexCard" ${IN}/alql.spad.pamphlet >ICARD.spad )

@
<<MTHING.o (O from NRLIB)>>=
${OUT}/MTHING.o: ${MID}/MTHING.NRLIB
	@ echo 0 making ${OUT}/MTHING.o from ${MID}/MTHING.NRLIB
	@ cp ${MID}/MTHING.NRLIB/code.o ${OUT}/MTHING.o

@
<<MTHING.NRLIB (NRLIB from MID)>>=
${MID}/MTHING.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MTHING.spad
	@ echo 0 making ${MID}/MTHING.NRLIB from ${MID}/MTHING.spad
	@ (cd ${MID} ; 	echo ')co MTHING.spad' | ${INTERPSYS} )

@
<<MTHING.spad (SPAD from IN)>>=
${MID}/MTHING.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/MTHING.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MTHING.NRLIB ; \
	${SPADBIN}/notangle -R"package MTHING MergeThing" ${IN}/alql.spad.pamphlet >MTHING.spad )

@
<<OPQUERY.o (O from NRLIB)>>=
${OUT}/OPQUERY.o: ${MID}/OPQUERY.NRLIB
	@ echo 0 making ${OUT}/OPQUERY.o from ${MID}/OPQUERY.NRLIB
	@ cp ${MID}/OPQUERY.NRLIB/code.o ${OUT}/OPQUERY.o

@
<<OPQUERY.NRLIB (NRLIB from MID)>>=
${MID}/OPQUERY.NRLIB: ${OUT}/TYPE.o ${MID}/OPQUERY.spad
	@ echo 0 making ${MID}/OPQUERY.NRLIB from ${MID}/OPQUERY.spad
	@ (cd ${MID} ; 	echo ')co OPQUERY.spad' | ${INTERPSYS} )

@
<<OPQUERY.spad (SPAD from IN)>>=
${MID}/OPQUERY.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/OPQUERY.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OPQUERY.NRLIB ; \
	${SPADBIN}/notangle -R"package OPQUERY OperationsQuery" ${IN}/alql.spad.pamphlet >OPQUERY.spad )

@
<<QEQUAT.o (O from NRLIB)>>=
${OUT}/QEQUAT.o: ${MID}/QEQUAT.NRLIB
	@ echo 0 making ${OUT}/QEQUAT.o from ${MID}/QEQUAT.NRLIB
	@ cp ${MID}/QEQUAT.NRLIB/code.o ${OUT}/QEQUAT.o

@
<<QEQUAT.NRLIB (NRLIB from MID)>>=
${MID}/QEQUAT.NRLIB: ${MID}/QEQUAT.spad
	@ echo 0 making ${MID}/QEQUAT.NRLIB from ${MID}/QEQUAT.spad
	@ (cd ${MID} ; 	echo ')co QEQUAT.spad' | ${INTERPSYS} )

@
<<QEQUAT.spad (SPAD from IN)>>=
${MID}/QEQUAT.spad: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${MID}/QEQUAT.spad from ${IN}/alql.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QEQUAT.NRLIB ; \
	${SPADBIN}/notangle -R"domain QEQUAT QueryEquation" ${IN}/alql.spad.pamphlet >QEQUAT.spad )

@
<<alql.spad.dvi (DOC from IN)>>=
${DOC}/alql.spad.dvi: ${IN}/alql.spad.pamphlet
	@ echo 0 making ${DOC}/alql.spad.dvi from ${IN}/alql.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/alql.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} alql.spad ; \
	rm -f ${DOC}/alql.spad.pamphlet ; \
	rm -f ${DOC}/alql.spad.tex ; \
	rm -f ${DOC}/alql.spad )

@
\subsection{annacat.spad \cite{1}}
<<annacat.spad (SPAD from IN)>>=
${MID}/annacat.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/annacat.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/annacat.spad.pamphlet >annacat.spad )

@
<<NIPROB.o (O from NRLIB)>>=
${OUT}/NIPROB.o: ${MID}/NIPROB.NRLIB
	@ echo 0 making ${OUT}/NIPROB.o from ${MID}/NIPROB.NRLIB
	@ cp ${MID}/NIPROB.NRLIB/code.o ${OUT}/NIPROB.o

@
<<NIPROB.NRLIB (NRLIB from MID)>>=
${MID}/NIPROB.NRLIB: ${MID}/NIPROB.spad
	@ echo 0 making ${MID}/NIPROB.NRLIB from ${MID}/NIPROB.spad
	@ (cd ${MID} ; 	echo ')co NIPROB.spad' | ${INTERPSYS} )

@
<<NIPROB.spad (SPAD from IN)>>=
${MID}/NIPROB.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/NIPROB.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NIPROB.NRLIB ; \
	${SPADBIN}/notangle -R"domain NIPROB NumericalIntegrationProblem" ${IN}/annacat.spad.pamphlet >NIPROB.spad )

@
<<NUMINT.o (O from NRLIB)>>=
${OUT}/NUMINT.o: ${MID}/NUMINT.NRLIB
	@ echo 0 making ${OUT}/NUMINT.o from ${MID}/NUMINT.NRLIB
	@ cp ${MID}/NUMINT.NRLIB/code.o ${OUT}/NUMINT.o

@
<<NUMINT.NRLIB (NRLIB from MID)>>=
${MID}/NUMINT.NRLIB: ${OUT}/TYPE.o ${MID}/NUMINT.spad
	@ echo 0 making ${MID}/NUMINT.NRLIB from ${MID}/NUMINT.spad
	@ (cd ${MID} ; 	echo ')co NUMINT.spad' | ${INTERPSYS} )

@
<<NUMINT.spad (SPAD from IN)>>=
${MID}/NUMINT.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/NUMINT.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NUMINT.NRLIB ; \
	${SPADBIN}/notangle -R"category NUMINT NumericalIntegrationCategory" ${IN}/annacat.spad.pamphlet >NUMINT.spad )

@
<<ODECAT.o (O from NRLIB)>>=
${OUT}/ODECAT.o: ${MID}/ODECAT.NRLIB
	@ echo 0 making ${OUT}/ODECAT.o from ${MID}/ODECAT.NRLIB
	@ cp ${MID}/ODECAT.NRLIB/code.o ${OUT}/ODECAT.o

@
<<ODECAT.NRLIB (NRLIB from MID)>>=
${MID}/ODECAT.NRLIB: ${OUT}/TYPE.o ${MID}/ODECAT.spad
	@ echo 0 making ${MID}/ODECAT.NRLIB from ${MID}/ODECAT.spad
	@ (cd ${MID} ; 	echo ')co ODECAT.spad' | ${INTERPSYS} )

@
<<ODECAT.spad (SPAD from IN)>>=
${MID}/ODECAT.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/ODECAT.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODECAT.NRLIB ; \
	${SPADBIN}/notangle -R"category ODECAT OrdinaryDifferentialEquationsSolverCategory" ${IN}/annacat.spad.pamphlet >ODECAT.spad )

@
<<ODEPROB.o (O from NRLIB)>>=
${OUT}/ODEPROB.o: ${MID}/ODEPROB.NRLIB
	@ echo 0 making ${OUT}/ODEPROB.o from ${MID}/ODEPROB.NRLIB
	@ cp ${MID}/ODEPROB.NRLIB/code.o ${OUT}/ODEPROB.o

@
<<ODEPROB.NRLIB (NRLIB from MID)>>=
${MID}/ODEPROB.NRLIB: ${MID}/ODEPROB.spad
	@ echo 0 making ${MID}/ODEPROB.NRLIB from ${MID}/ODEPROB.spad
	@ (cd ${MID} ; 	echo ')co ODEPROB.spad' | ${INTERPSYS} )

@
<<ODEPROB.spad (SPAD from IN)>>=
${MID}/ODEPROB.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/ODEPROB.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEPROB.NRLIB ; \
	${SPADBIN}/notangle -R"domain ODEPROB NumericalODEProblem" ${IN}/annacat.spad.pamphlet >ODEPROB.spad )

@
<<OPTPROB.o (O from NRLIB)>>=
${OUT}/OPTPROB.o: ${MID}/OPTPROB.NRLIB
	@ echo 0 making ${OUT}/OPTPROB.o from ${MID}/OPTPROB.NRLIB
	@ cp ${MID}/OPTPROB.NRLIB/code.o ${OUT}/OPTPROB.o

@
<<OPTPROB.NRLIB (NRLIB from MID)>>=
${MID}/OPTPROB.NRLIB: ${MID}/OPTPROB.spad
	@ echo 0 making ${MID}/OPTPROB.NRLIB from ${MID}/OPTPROB.spad
	@ (cd ${MID} ; 	echo ')co OPTPROB.spad' | ${INTERPSYS} )

@
<<OPTPROB.spad (SPAD from IN)>>=
${MID}/OPTPROB.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/OPTPROB.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OPTPROB.NRLIB ; \
	${SPADBIN}/notangle -R"domain OPTPROB NumericalOptimizationProblem" ${IN}/annacat.spad.pamphlet >OPTPROB.spad )

@
<<PDECAT.o (O from NRLIB)>>=
${OUT}/PDECAT.o: ${MID}/PDECAT.NRLIB
	@ echo 0 making ${OUT}/PDECAT.o from ${MID}/PDECAT.NRLIB
	@ cp ${MID}/PDECAT.NRLIB/code.o ${OUT}/PDECAT.o

@
<<PDECAT.NRLIB (NRLIB from MID)>>=
${MID}/PDECAT.NRLIB: ${OUT}/TYPE.o ${MID}/PDECAT.spad
	@ echo 0 making ${MID}/PDECAT.NRLIB from ${MID}/PDECAT.spad
	@ (cd ${MID} ; 	echo ')co PDECAT.spad' | ${INTERPSYS} )

@
<<PDECAT.spad (SPAD from IN)>>=
${MID}/PDECAT.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/PDECAT.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PDECAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PDECAT PartialDifferentialEquationsSolverCategory" ${IN}/annacat.spad.pamphlet >PDECAT.spad )

@
<<PDEPROB.o (O from NRLIB)>>=
${OUT}/PDEPROB.o: ${MID}/PDEPROB.NRLIB
	@ echo 0 making ${OUT}/PDEPROB.o from ${MID}/PDEPROB.NRLIB
	@ cp ${MID}/PDEPROB.NRLIB/code.o ${OUT}/PDEPROB.o

@
<<PDEPROB.NRLIB (NRLIB from MID)>>=
${MID}/PDEPROB.NRLIB: ${MID}/PDEPROB.spad
	@ echo 0 making ${MID}/PDEPROB.NRLIB from ${MID}/PDEPROB.spad
	@ (cd ${MID} ; 	echo ')co PDEPROB.spad' | ${INTERPSYS} )

@
<<PDEPROB.spad (SPAD from IN)>>=
${MID}/PDEPROB.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/PDEPROB.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PDEPROB.NRLIB ; \
	${SPADBIN}/notangle -R"domain PDEPROB NumericalPDEProblem" ${IN}/annacat.spad.pamphlet >PDEPROB.spad )

@
<<OPTCAT.o (O from NRLIB)>>=
${OUT}/OPTCAT.o: ${MID}/OPTCAT.NRLIB
	@ echo 0 making ${OUT}/OPTCAT.o from ${MID}/OPTCAT.NRLIB
	@ cp ${MID}/OPTCAT.NRLIB/code.o ${OUT}/OPTCAT.o

@
<<OPTCAT.NRLIB (NRLIB from MID)>>=
${MID}/OPTCAT.NRLIB: ${OUT}/TYPE.o ${MID}/OPTCAT.spad
	@ echo 0 making ${MID}/OPTCAT.NRLIB from ${MID}/OPTCAT.spad
	@ (cd ${MID} ; 	echo ')co OPTCAT.spad' | ${INTERPSYS} )

@
<<OPTCAT.spad (SPAD from IN)>>=
${MID}/OPTCAT.spad: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${MID}/OPTCAT.spad from ${IN}/annacat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OPTCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category OPTCAT NumericalOptimizationCategory" ${IN}/annacat.spad.pamphlet >OPTCAT.spad )

@
<<annacat.spad.dvi (DOC from IN)>>=
${DOC}/annacat.spad.dvi: ${IN}/annacat.spad.pamphlet
	@ echo 0 making ${DOC}/annacat.spad.dvi from ${IN}/annacat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/annacat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} annacat.spad ; \
	rm -f ${DOC}/annacat.spad.pamphlet ; \
	rm -f ${DOC}/annacat.spad.tex ; \
	rm -f ${DOC}/annacat.spad )

@
\subsection{any.spad \cite{1}}
<<any.spad (SPAD from IN)>>=
${MID}/any.spad: ${IN}/any.spad.pamphlet
	@ echo 0 making ${MID}/any.spad from ${IN}/any.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/any.spad.pamphlet >any.spad )

@
<<ANY.o (O from NRLIB)>>=
${OUT}/ANY.o: ${MID}/ANY.NRLIB
	@ echo 0 making ${OUT}/ANY.o from ${MID}/ANY.NRLIB
	@ cp ${MID}/ANY.NRLIB/code.o ${OUT}/ANY.o

@
<<ANY.NRLIB (NRLIB from MID)>>=
${MID}/ANY.NRLIB: ${MID}/ANY.spad
	@ echo 0 making ${MID}/ANY.NRLIB from ${MID}/ANY.spad
	@ (cd ${MID} ; 	echo ')co ANY.spad' | ${INTERPSYS} )

@
<<ANY.spad (SPAD from IN)>>=
${MID}/ANY.spad: ${IN}/any.spad.pamphlet
	@ echo 0 making ${MID}/ANY.spad from ${IN}/any.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ANY.NRLIB ; \
	${SPADBIN}/notangle -R"domain ANY Any" ${IN}/any.spad.pamphlet >ANY.spad )

@
<<ANY1.o (O from NRLIB)>>=
${OUT}/ANY1.o: ${MID}/ANY1.NRLIB
	@ echo 0 making ${OUT}/ANY1.o from ${MID}/ANY1.NRLIB
	@ cp ${MID}/ANY1.NRLIB/code.o ${OUT}/ANY1.o

@
<<ANY1.NRLIB (NRLIB from MID)>>=
${MID}/ANY1.NRLIB: ${OUT}/TYPE.o ${MID}/ANY1.spad
	@ echo 0 making ${MID}/ANY1.NRLIB from ${MID}/ANY1.spad
	@ (cd ${MID} ; 	echo ')co ANY1.spad' | ${INTERPSYS} )

@
<<ANY1.spad (SPAD from IN)>>=
${MID}/ANY1.spad: ${IN}/any.spad.pamphlet
	@ echo 0 making ${MID}/ANY1.spad from ${IN}/any.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ANY1.NRLIB ; \
	${SPADBIN}/notangle -R"package ANY1 AnyFunctions1" ${IN}/any.spad.pamphlet >ANY1.spad )

@
<<NONE1.o (O from NRLIB)>>=
${OUT}/NONE1.o: ${MID}/NONE1.NRLIB
	@ echo 0 making ${OUT}/NONE1.o from ${MID}/NONE1.NRLIB
	@ cp ${MID}/NONE1.NRLIB/code.o ${OUT}/NONE1.o

@
<<NONE1.NRLIB (NRLIB from MID)>>=
${MID}/NONE1.NRLIB: ${OUT}/TYPE.o ${MID}/NONE1.spad
	@ echo 0 making ${MID}/NONE1.NRLIB from ${MID}/NONE1.spad
	@ (cd ${MID} ; 	echo ')co NONE1.spad' | ${INTERPSYS} )

@
<<NONE1.spad (SPAD from IN)>>=
${MID}/NONE1.spad: ${IN}/any.spad.pamphlet
	@ echo 0 making ${MID}/NONE1.spad from ${IN}/any.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NONE1.NRLIB ; \
	${SPADBIN}/notangle -R"package NONE1 NoneFunctions1" ${IN}/any.spad.pamphlet >NONE1.spad )

@
<<NONE.o (O from NRLIB)>>=
${OUT}/NONE.o: ${MID}/NONE.NRLIB
	@ echo 0 making ${OUT}/NONE.o from ${MID}/NONE.NRLIB
	@ cp ${MID}/NONE.NRLIB/code.o ${OUT}/NONE.o

@
<<NONE.NRLIB (NRLIB from MID)>>=
${MID}/NONE.NRLIB: ${OUT}/TYPE.o ${MID}/NONE.spad
	@ echo 0 making ${MID}/NONE.NRLIB from ${MID}/NONE.spad
	@ (cd ${MID} ; 	echo ')co NONE.spad' | ${INTERPSYS} )

@
<<NONE.spad (SPAD from IN)>>=
${MID}/NONE.spad: ${IN}/any.spad.pamphlet
	@ echo 0 making ${MID}/NONE.spad from ${IN}/any.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NONE.NRLIB ; \
	${SPADBIN}/notangle -R"domain NONE None" ${IN}/any.spad.pamphlet >NONE.spad )

@
<<any.spad.dvi (DOC from IN)>>=
${DOC}/any.spad.dvi: ${IN}/any.spad.pamphlet
	@ echo 0 making ${DOC}/any.spad.dvi from ${IN}/any.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/any.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} any.spad ; \
	rm -f ${DOC}/any.spad.pamphlet ; \
	rm -f ${DOC}/any.spad.tex ; \
	rm -f ${DOC}/any.spad )

@
\subsection{array1.spad \cite{1}}
<<array1.spad (SPAD from IN)>>=
${MID}/array1.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/array1.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/array1.spad.pamphlet >array1.spad )

@
<<ARRAY1.o (O from NRLIB)>>=
${OUT}/ARRAY1.o: ${MID}/ARRAY1.NRLIB
	@ echo 0 making ${OUT}/ARRAY1.o from ${MID}/ARRAY1.NRLIB
	@ cp ${MID}/ARRAY1.NRLIB/code.o ${OUT}/ARRAY1.o

@
<<ARRAY1.NRLIB (NRLIB from MID)>>=
${MID}/ARRAY1.NRLIB: ${MID}/ARRAY1.spad
	@ echo 0 making ${MID}/ARRAY1.NRLIB from ${MID}/ARRAY1.spad
	@ (cd ${MID} ; 	echo ')co ARRAY1.spad' | ${INTERPSYS} )

@
<<ARRAY1.spad (SPAD from IN)>>=
${MID}/ARRAY1.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/ARRAY1.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ARRAY1.NRLIB ; \
	${SPADBIN}/notangle -R"domain ARRAY1 OneDimensionalArray" ${IN}/array1.spad.pamphlet >ARRAY1.spad )

@
<<ARRAY12.o (O from NRLIB)>>=
${OUT}/ARRAY12.o: ${MID}/ARRAY12.NRLIB
	@ echo 0 making ${OUT}/ARRAY12.o from ${MID}/ARRAY12.NRLIB
	@ cp ${MID}/ARRAY12.NRLIB/code.o ${OUT}/ARRAY12.o

@
<<ARRAY12.NRLIB (NRLIB from MID)>>=
${MID}/ARRAY12.NRLIB: ${MID}/ARRAY12.spad
	@ echo 0 making ${MID}/ARRAY12.NRLIB from ${MID}/ARRAY12.spad
	@ (cd ${MID} ; 	echo ')co ARRAY12.spad' | ${INTERPSYS} )

@
<<ARRAY12.spad (SPAD from IN)>>=
${MID}/ARRAY12.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/ARRAY12.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ARRAY12.NRLIB ; \
	${SPADBIN}/notangle -R"package ARRAY12 OneDimensionalArrayFunctions2" ${IN}/array1.spad.pamphlet >ARRAY12.spad )

@
<<FARRAY.o (O from NRLIB)>>=
${OUT}/FARRAY.o: ${MID}/FARRAY.NRLIB
	@ echo 0 making ${OUT}/FARRAY.o from ${MID}/FARRAY.NRLIB
	@ cp ${MID}/FARRAY.NRLIB/code.o ${OUT}/FARRAY.o

@
<<FARRAY.NRLIB (NRLIB from MID)>>=
${MID}/FARRAY.NRLIB: ${MID}/FARRAY.spad
	@ echo 0 making ${MID}/FARRAY.NRLIB from ${MID}/FARRAY.spad
	@ (cd ${MID} ; 	echo ')co FARRAY.spad' | ${INTERPSYS} )

@
<<FARRAY.spad (SPAD from IN)>>=
${MID}/FARRAY.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/FARRAY.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FARRAY.NRLIB ; \
	${SPADBIN}/notangle -R"domain FARRAY FlexibleArray" ${IN}/array1.spad.pamphlet >FARRAY.spad )

@
<<IARRAY1.o (O from NRLIB)>>=
${OUT}/IARRAY1.o: ${MID}/IARRAY1.NRLIB
	@ echo 0 making ${OUT}/IARRAY1.o from ${MID}/IARRAY1.NRLIB
	@ cp ${MID}/IARRAY1.NRLIB/code.o ${OUT}/IARRAY1.o

@
<<IARRAY1.NRLIB (NRLIB from MID)>>=
${MID}/IARRAY1.NRLIB: ${MID}/IARRAY1.spad
	@ echo 0 making ${MID}/IARRAY1.NRLIB from ${MID}/IARRAY1.spad
	@ (cd ${MID} ; 	echo ')co IARRAY1.spad' | ${INTERPSYS} )

@
<<IARRAY1.spad (SPAD from IN)>>=
${MID}/IARRAY1.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/IARRAY1.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IARRAY1.NRLIB ; \
	${SPADBIN}/notangle -R"domain IARRAY1 IndexedOneDimensionalArray" ${IN}/array1.spad.pamphlet >IARRAY1.spad )

@
<<IFARRAY.o (O from NRLIB)>>=
${OUT}/IFARRAY.o: ${MID}/IFARRAY.NRLIB
	@ echo 0 making ${OUT}/IFARRAY.o from ${MID}/IFARRAY.NRLIB
	@ cp ${MID}/IFARRAY.NRLIB/code.o ${OUT}/IFARRAY.o

@
<<IFARRAY.NRLIB (NRLIB from MID)>>=
${MID}/IFARRAY.NRLIB: ${MID}/IFARRAY.spad
	@ echo 0 making ${MID}/IFARRAY.NRLIB from ${MID}/IFARRAY.spad
	@ (cd ${MID} ; 	echo ')co IFARRAY.spad' | ${INTERPSYS} )

@
<<IFARRAY.spad (SPAD from IN)>>=
${MID}/IFARRAY.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/IFARRAY.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IFARRAY.NRLIB ; \
	${SPADBIN}/notangle -R"domain IFARRAY IndexedFlexibleArray" ${IN}/array1.spad.pamphlet >IFARRAY.spad )

@
<<PRIMARR.o (O from NRLIB)>>=
${OUT}/PRIMARR.o: ${MID}/PRIMARR.NRLIB
	@ echo 0 making ${OUT}/PRIMARR.o from ${MID}/PRIMARR.NRLIB
	@ cp ${MID}/PRIMARR.NRLIB/code.o ${OUT}/PRIMARR.o

@
<<PRIMARR.NRLIB (NRLIB from MID)>>=
${MID}/PRIMARR.NRLIB: ${MID}/PRIMARR.spad
	@ echo 0 making ${MID}/PRIMARR.NRLIB from ${MID}/PRIMARR.spad
	@ (cd ${MID} ; 	echo ')co PRIMARR.spad' | ${INTERPSYS} )

@
<<PRIMARR.spad (SPAD from IN)>>=
${MID}/PRIMARR.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/PRIMARR.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRIMARR.NRLIB ; \
	${SPADBIN}/notangle -R"domain PRIMARR PrimitiveArray" ${IN}/array1.spad.pamphlet >PRIMARR.spad )

@
<<PRIMARR.o (BOOTSTRAP from MID)>>=
${MID}/PRIMARR.o: ${MID}/PRIMARR.lsp
	@ echo 0 making ${MID}/PRIMARR.o from ${MID}/PRIMARR.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "PRIMARR.lsp" :output-file "PRIMARR.o"))' | ${DEPSYS} )
	@ cp ${MID}/PRIMARR.o ${OUT}/PRIMARR.o

@
<<PRIMARR.lsp (LISP from IN)>>=
${MID}/PRIMARR.lsp: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/PRIMARR.lsp from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRIMARR.NRLIB ; \
	rm -rf ${OUT}/PRIMARR.o ; \
	${SPADBIN}/notangle -R"PRIMARR.lsp BOOTSTRAP" ${IN}/array1.spad.pamphlet >PRIMARR.lsp )

@
<<PRIMARR2.o (O from NRLIB)>>=
${OUT}/PRIMARR2.o: ${MID}/PRIMARR2.NRLIB
	@ echo 0 making ${OUT}/PRIMARR2.o from ${MID}/PRIMARR2.NRLIB
	@ cp ${MID}/PRIMARR2.NRLIB/code.o ${OUT}/PRIMARR2.o

@
<<PRIMARR2.NRLIB (NRLIB from MID)>>=
${MID}/PRIMARR2.NRLIB: ${MID}/PRIMARR2.spad
	@ echo 0 making ${MID}/PRIMARR2.NRLIB from ${MID}/PRIMARR2.spad
	@ (cd ${MID} ; 	echo ')co PRIMARR2.spad' | ${INTERPSYS} )

@
<<PRIMARR2.spad (SPAD from IN)>>=
${MID}/PRIMARR2.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/PRIMARR2.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRIMARR2.NRLIB ; \
	${SPADBIN}/notangle -R"package PRIMARR2 PrimitiveArrayFunctions2" ${IN}/array1.spad.pamphlet >PRIMARR2.spad )

@
<<TUPLE.o (O from NRLIB)>>=
${OUT}/TUPLE.o: ${MID}/TUPLE.NRLIB
	@ echo 0 making ${OUT}/TUPLE.o from ${MID}/TUPLE.NRLIB
	@ cp ${MID}/TUPLE.NRLIB/code.o ${OUT}/TUPLE.o

@
<<TUPLE.NRLIB (NRLIB from MID)>>=
${MID}/TUPLE.NRLIB: ${MID}/TUPLE.spad
	@ echo 0 making ${MID}/TUPLE.NRLIB from ${MID}/TUPLE.spad
	@ (cd ${MID} ; 	echo ')co TUPLE.spad' | ${INTERPSYS} )

@
<<TUPLE.spad (SPAD from IN)>>=
${MID}/TUPLE.spad: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${MID}/TUPLE.spad from ${IN}/array1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TUPLE.NRLIB ; \
	${SPADBIN}/notangle -R"domain TUPLE Tuple" ${IN}/array1.spad.pamphlet >TUPLE.spad )

@
<<array1.spad.dvi (DOC from IN)>>=
${DOC}/array1.spad.dvi: ${IN}/array1.spad.pamphlet
	@ echo 0 making ${DOC}/array1.spad.dvi from ${IN}/array1.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/array1.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} array1.spad ; \
	rm -f ${DOC}/array1.spad.pamphlet ; \
	rm -f ${DOC}/array1.spad.tex ; \
	rm -f ${DOC}/array1.spad )

@
\subsection{array2.spad \cite{1}}
<<array2.spad (SPAD from IN)>>=
${MID}/array2.spad: ${IN}/array2.spad.pamphlet
	@ echo 0 making ${MID}/array2.spad from ${IN}/array2.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/array2.spad.pamphlet >array2.spad )

@
<<ARRAY2.o (O from NRLIB)>>=
${OUT}/ARRAY2.o: ${MID}/ARRAY2.NRLIB
	@ echo 0 making ${OUT}/ARRAY2.o from ${MID}/ARRAY2.NRLIB
	@ cp ${MID}/ARRAY2.NRLIB/code.o ${OUT}/ARRAY2.o

@
<<ARRAY2.NRLIB (NRLIB from MID)>>=
${MID}/ARRAY2.NRLIB: ${MID}/ARRAY2.spad
	@ echo 0 making ${MID}/ARRAY2.NRLIB from ${MID}/ARRAY2.spad
	@ (cd ${MID} ; 	echo ')co ARRAY2.spad' | ${INTERPSYS} )

@
<<ARRAY2.spad (SPAD from IN)>>=
${MID}/ARRAY2.spad: ${IN}/array2.spad.pamphlet
	@ echo 0 making ${MID}/ARRAY2.spad from ${IN}/array2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ARRAY2.NRLIB ; \
	${SPADBIN}/notangle -R"domain ARRAY2 TwoDimensionalArray" ${IN}/array2.spad.pamphlet >ARRAY2.spad )

@
<<ARR2CAT-.o (O from NRLIB)>>=
${OUT}/ARR2CAT-.o: ${MID}/ARR2CAT.NRLIB
	@ echo 0 making ${OUT}/ARR2CAT-.o from ${MID}/ARR2CAT-.NRLIB
	@ cp ${MID}/ARR2CAT-.NRLIB/code.o ${OUT}/ARR2CAT-.o

@
<<ARR2CAT-.NRLIB (NRLIB from MID)>>=
${MID}/ARR2CAT-.NRLIB: ${OUT}/TYPE.o ${MID}/ARR2CAT.spad 
	@ echo 0 making ${MID}/ARR2CAT-.NRLIB from ${MID}/ARR2CAT.spad
	@ (cd ${MID} ; 	echo ')co ARR2CAT.spad' | ${INTERPSYS} )

@
<<ARR2CAT.o (O from NRLIB)>>=
${OUT}/ARR2CAT.o: ${MID}/ARR2CAT.NRLIB
	@ echo 0 making ${OUT}/ARR2CAT.o from ${MID}/ARR2CAT.NRLIB
	@ cp ${MID}/ARR2CAT.NRLIB/code.o ${OUT}/ARR2CAT.o

@
<<ARR2CAT.NRLIB (NRLIB from MID)>>=
${MID}/ARR2CAT.NRLIB: ${MID}/ARR2CAT.spad
	@ echo 0 making ${MID}/ARR2CAT.NRLIB from ${MID}/ARR2CAT.spad
	@ (cd ${MID} ; 	echo ')co ARR2CAT.spad' | ${INTERPSYS} )

@
<<ARR2CAT.spad (SPAD from IN)>>=
${MID}/ARR2CAT.spad: ${IN}/array2.spad.pamphlet
	@ echo 0 making ${MID}/ARR2CAT.spad from ${IN}/array2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ARR2CAT.NRLIB ; \
	${SPADBIN}/notangle -R"category ARR2CAT TwoDimensionalArrayCategory" ${IN}/array2.spad.pamphlet >ARR2CAT.spad )

@
<<IARRAY2.o (O from NRLIB)>>=
${OUT}/IARRAY2.o: ${MID}/IARRAY2.NRLIB
	@ echo 0 making ${OUT}/IARRAY2.o from ${MID}/IARRAY2.NRLIB
	@ cp ${MID}/IARRAY2.NRLIB/code.o ${OUT}/IARRAY2.o

@
<<IARRAY2.NRLIB (NRLIB from MID)>>=
${MID}/IARRAY2.NRLIB: ${MID}/IARRAY2.spad
	@ echo 0 making ${MID}/IARRAY2.NRLIB from ${MID}/IARRAY2.spad
	@ (cd ${MID} ; 	echo ')co IARRAY2.spad' | ${INTERPSYS} )

@
<<IARRAY2.spad (SPAD from IN)>>=
${MID}/IARRAY2.spad: ${IN}/array2.spad.pamphlet
	@ echo 0 making ${MID}/IARRAY2.spad from ${IN}/array2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IARRAY2.NRLIB ; \
	${SPADBIN}/notangle -R"domain IARRAY2 IndexedTwoDimensionalArray" ${IN}/array2.spad.pamphlet >IARRAY2.spad )

@
<<IIARRAY2.o (O from NRLIB)>>=
${OUT}/IIARRAY2.o: ${MID}/IIARRAY2.NRLIB
	@ echo 0 making ${OUT}/IIARRAY2.o from ${MID}/IIARRAY2.NRLIB
	@ cp ${MID}/IIARRAY2.NRLIB/code.o ${OUT}/IIARRAY2.o

@
<<IIARRAY2.NRLIB (NRLIB from MID)>>=
${MID}/IIARRAY2.NRLIB: ${MID}/IIARRAY2.spad
	@ echo 0 making ${MID}/IIARRAY2.NRLIB from ${MID}/IIARRAY2.spad
	@ (cd ${MID} ; 	echo ')co IIARRAY2.spad' | ${INTERPSYS} )

@
<<IIARRAY2.spad (SPAD from IN)>>=
${MID}/IIARRAY2.spad: ${IN}/array2.spad.pamphlet
	@ echo 0 making ${MID}/IIARRAY2.spad from ${IN}/array2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IIARRAY2.NRLIB ; \
	${SPADBIN}/notangle -R"domain IIARRAY2 InnerIndexedTwoDimensionalArray" ${IN}/array2.spad.pamphlet >IIARRAY2.spad )

@
<<array2.spad.dvi (DOC from IN)>>=
${DOC}/array2.spad.dvi: ${IN}/array2.spad.pamphlet
	@ echo 0 making ${DOC}/array2.spad.dvi from ${IN}/array2.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/array2.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} array2.spad ; \
	rm -f ${DOC}/array2.spad.pamphlet ; \
	rm -f ${DOC}/array2.spad.tex ; \
	rm -f ${DOC}/array2.spad )

@
\subsection{asp.spad \cite{1}}
<<asp.spad (SPAD from IN)>>=
${MID}/asp.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/asp.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/asp.spad.pamphlet >asp.spad )

@
<<ASP1.o (O from NRLIB)>>=
${OUT}/ASP1.o: ${MID}/ASP1.NRLIB
	@ echo 0 making ${OUT}/ASP1.o from ${MID}/ASP1.NRLIB
	@ cp ${MID}/ASP1.NRLIB/code.o ${OUT}/ASP1.o

@
<<ASP1.NRLIB (NRLIB from MID)>>=
${MID}/ASP1.NRLIB: ${MID}/ASP1.spad
	@ echo 0 making ${MID}/ASP1.NRLIB from ${MID}/ASP1.spad
	@ (cd ${MID} ; 	echo ')co ASP1.spad' | ${INTERPSYS} )

@
<<ASP1.spad (SPAD from IN)>>=
${MID}/ASP1.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP1.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP1.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP1 Asp1" ${IN}/asp.spad.pamphlet >ASP1.spad )

@
<<ASP10.o (O from NRLIB)>>=
${OUT}/ASP10.o: ${MID}/ASP10.NRLIB
	@ echo 0 making ${OUT}/ASP10.o from ${MID}/ASP10.NRLIB
	@ cp ${MID}/ASP10.NRLIB/code.o ${OUT}/ASP10.o

@
<<ASP10.NRLIB (NRLIB from MID)>>=
${MID}/ASP10.NRLIB: ${MID}/ASP10.spad
	@ echo 0 making ${MID}/ASP10.NRLIB from ${MID}/ASP10.spad
	@ (cd ${MID} ; 	echo ')co ASP10.spad' | ${INTERPSYS} )

@
<<ASP10.spad (SPAD from IN)>>=
${MID}/ASP10.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP10.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP10.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP10 Asp10" ${IN}/asp.spad.pamphlet >ASP10.spad )

@
<<ASP12.o (O from NRLIB)>>=
${OUT}/ASP12.o: ${MID}/ASP12.NRLIB
	@ echo 0 making ${OUT}/ASP12.o from ${MID}/ASP12.NRLIB
	@ cp ${MID}/ASP12.NRLIB/code.o ${OUT}/ASP12.o

@
<<ASP12.NRLIB (NRLIB from MID)>>=
${MID}/ASP12.NRLIB: ${MID}/ASP12.spad
	@ echo 0 making ${MID}/ASP12.NRLIB from ${MID}/ASP12.spad
	@ (cd ${MID} ; 	echo ')co ASP12.spad' | ${INTERPSYS} )

@
<<ASP12.spad (SPAD from IN)>>=
${MID}/ASP12.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP12.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP12.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP12 Asp12" ${IN}/asp.spad.pamphlet >ASP12.spad )

@
<<ASP19.o (O from NRLIB)>>=
${OUT}/ASP19.o: ${MID}/ASP19.NRLIB
	@ echo 0 making ${OUT}/ASP19.o from ${MID}/ASP19.NRLIB
	@ cp ${MID}/ASP19.NRLIB/code.o ${OUT}/ASP19.o

@
<<ASP19.NRLIB (NRLIB from MID)>>=
${MID}/ASP19.NRLIB: ${MID}/ASP19.spad
	@ echo 0 making ${MID}/ASP19.NRLIB from ${MID}/ASP19.spad
	@ (cd ${MID} ; 	echo ')co ASP19.spad' | ${INTERPSYS} )

@
<<ASP19.spad (SPAD from IN)>>=
${MID}/ASP19.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP19.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP19.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP19 Asp19" ${IN}/asp.spad.pamphlet >ASP19.spad )

@
<<ASP20.o (O from NRLIB)>>=
${OUT}/ASP20.o: ${MID}/ASP20.NRLIB
	@ echo 0 making ${OUT}/ASP20.o from ${MID}/ASP20.NRLIB
	@ cp ${MID}/ASP20.NRLIB/code.o ${OUT}/ASP20.o

@
<<ASP20.NRLIB (NRLIB from MID)>>=
${MID}/ASP20.NRLIB: ${MID}/ASP20.spad
	@ echo 0 making ${MID}/ASP20.NRLIB from ${MID}/ASP20.spad
	@ (cd ${MID} ; 	echo ')co ASP20.spad' | ${INTERPSYS} )

@
<<ASP20.spad (SPAD from IN)>>=
${MID}/ASP20.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP20.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP20.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP20 Asp20" ${IN}/asp.spad.pamphlet >ASP20.spad )

@
<<ASP24.o (O from NRLIB)>>=
${OUT}/ASP24.o: ${MID}/ASP24.NRLIB
	@ echo 0 making ${OUT}/ASP24.o from ${MID}/ASP24.NRLIB
	@ cp ${MID}/ASP24.NRLIB/code.o ${OUT}/ASP24.o

@
<<ASP24.NRLIB (NRLIB from MID)>>=
${MID}/ASP24.NRLIB: ${MID}/ASP24.spad
	@ echo 0 making ${MID}/ASP24.NRLIB from ${MID}/ASP24.spad
	@ (cd ${MID} ; 	echo ')co ASP24.spad' | ${INTERPSYS} )

@
<<ASP24.spad (SPAD from IN)>>=
${MID}/ASP24.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP24.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP24.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP24 Asp24" ${IN}/asp.spad.pamphlet >ASP24.spad )

@
<<ASP27.o (O from NRLIB)>>=
${OUT}/ASP27.o: ${MID}/ASP27.NRLIB
	@ echo 0 making ${OUT}/ASP27.o from ${MID}/ASP27.NRLIB
	@ cp ${MID}/ASP27.NRLIB/code.o ${OUT}/ASP27.o

@
<<ASP27.NRLIB (NRLIB from MID)>>=
${MID}/ASP27.NRLIB: ${MID}/ASP27.spad
	@ echo 0 making ${MID}/ASP27.NRLIB from ${MID}/ASP27.spad
	@ (cd ${MID} ; 	echo ')co ASP27.spad' | ${INTERPSYS} )

@
<<ASP27.spad (SPAD from IN)>>=
${MID}/ASP27.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP27.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP27.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP27 Asp27" ${IN}/asp.spad.pamphlet >ASP27.spad )

@
<<ASP28.o (O from NRLIB)>>=
${OUT}/ASP28.o: ${MID}/ASP28.NRLIB
	@ echo 0 making ${OUT}/ASP28.o from ${MID}/ASP28.NRLIB
	@ cp ${MID}/ASP28.NRLIB/code.o ${OUT}/ASP28.o

@
<<ASP28.NRLIB (NRLIB from MID)>>=
${MID}/ASP28.NRLIB: ${MID}/ASP28.spad
	@ echo 0 making ${MID}/ASP28.NRLIB from ${MID}/ASP28.spad
	@ (cd ${MID} ; 	echo ')co ASP28.spad' | ${INTERPSYS} )

@
<<ASP28.spad (SPAD from IN)>>=
${MID}/ASP28.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP28.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP28.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP28 Asp28" ${IN}/asp.spad.pamphlet >ASP28.spad )

@
<<ASP29.o (O from NRLIB)>>=
${OUT}/ASP29.o: ${MID}/ASP29.NRLIB
	@ echo 0 making ${OUT}/ASP29.o from ${MID}/ASP29.NRLIB
	@ cp ${MID}/ASP29.NRLIB/code.o ${OUT}/ASP29.o

@
<<ASP29.NRLIB (NRLIB from MID)>>=
${MID}/ASP29.NRLIB: ${MID}/ASP29.spad
	@ echo 0 making ${MID}/ASP29.NRLIB from ${MID}/ASP29.spad
	@ (cd ${MID} ; 	echo ')co ASP29.spad' | ${INTERPSYS} )

@
<<ASP29.spad (SPAD from IN)>>=
${MID}/ASP29.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP29.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP29.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP29 Asp29" ${IN}/asp.spad.pamphlet >ASP29.spad )

@
<<ASP30.o (O from NRLIB)>>=
${OUT}/ASP30.o: ${MID}/ASP30.NRLIB
	@ echo 0 making ${OUT}/ASP30.o from ${MID}/ASP30.NRLIB
	@ cp ${MID}/ASP30.NRLIB/code.o ${OUT}/ASP30.o

@
<<ASP30.NRLIB (NRLIB from MID)>>=
${MID}/ASP30.NRLIB: ${MID}/ASP30.spad
	@ echo 0 making ${MID}/ASP30.NRLIB from ${MID}/ASP30.spad
	@ (cd ${MID} ; 	echo ')co ASP30.spad' | ${INTERPSYS} )

@
<<ASP30.spad (SPAD from IN)>>=
${MID}/ASP30.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP30.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP30.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP30 Asp30" ${IN}/asp.spad.pamphlet >ASP30.spad )

@
<<ASP31.o (O from NRLIB)>>=
${OUT}/ASP31.o: ${MID}/ASP31.NRLIB
	@ echo 0 making ${OUT}/ASP31.o from ${MID}/ASP31.NRLIB
	@ cp ${MID}/ASP31.NRLIB/code.o ${OUT}/ASP31.o

@
<<ASP31.NRLIB (NRLIB from MID)>>=
${MID}/ASP31.NRLIB: ${MID}/ASP31.spad
	@ echo 0 making ${MID}/ASP31.NRLIB from ${MID}/ASP31.spad
	@ (cd ${MID} ; 	echo ')co ASP31.spad' | ${INTERPSYS} )

@
<<ASP31.spad (SPAD from IN)>>=
${MID}/ASP31.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP31.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP31.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP31 Asp31" ${IN}/asp.spad.pamphlet >ASP31.spad )

@
<<ASP33.o (O from NRLIB)>>=
${OUT}/ASP33.o: ${MID}/ASP33.NRLIB
	@ echo 0 making ${OUT}/ASP33.o from ${MID}/ASP33.NRLIB
	@ cp ${MID}/ASP33.NRLIB/code.o ${OUT}/ASP33.o

@
<<ASP33.NRLIB (NRLIB from MID)>>=
${MID}/ASP33.NRLIB: ${MID}/ASP33.spad
	@ echo 0 making ${MID}/ASP33.NRLIB from ${MID}/ASP33.spad
	@ (cd ${MID} ; 	echo ')co ASP33.spad' | ${INTERPSYS} )

@
<<ASP33.spad (SPAD from IN)>>=
${MID}/ASP33.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP33.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP33.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP33 Asp33" ${IN}/asp.spad.pamphlet >ASP33.spad )

@
<<ASP34.o (O from NRLIB)>>=
${OUT}/ASP34.o: ${MID}/ASP34.NRLIB
	@ echo 0 making ${OUT}/ASP34.o from ${MID}/ASP34.NRLIB
	@ cp ${MID}/ASP34.NRLIB/code.o ${OUT}/ASP34.o

@
<<ASP34.NRLIB (NRLIB from MID)>>=
${MID}/ASP34.NRLIB: ${MID}/ASP34.spad
	@ echo 0 making ${MID}/ASP34.NRLIB from ${MID}/ASP34.spad
	@ (cd ${MID} ; 	echo ')co ASP34.spad' | ${INTERPSYS} )

@
<<ASP34.spad (SPAD from IN)>>=
${MID}/ASP34.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP34.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP34.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP34 Asp34" ${IN}/asp.spad.pamphlet >ASP34.spad )

@
<<ASP35.o (O from NRLIB)>>=
${OUT}/ASP35.o: ${MID}/ASP35.NRLIB
	@ echo 0 making ${OUT}/ASP35.o from ${MID}/ASP35.NRLIB
	@ cp ${MID}/ASP35.NRLIB/code.o ${OUT}/ASP35.o

@
<<ASP35.NRLIB (NRLIB from MID)>>=
${MID}/ASP35.NRLIB: ${MID}/ASP35.spad
	@ echo 0 making ${MID}/ASP35.NRLIB from ${MID}/ASP35.spad
	@ (cd ${MID} ; 	echo ')co ASP35.spad' | ${INTERPSYS} )

@
<<ASP35.spad (SPAD from IN)>>=
${MID}/ASP35.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP35.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP35.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP35 Asp35" ${IN}/asp.spad.pamphlet >ASP35.spad )

@
<<ASP4.o (O from NRLIB)>>=
${OUT}/ASP4.o: ${MID}/ASP4.NRLIB
	@ echo 0 making ${OUT}/ASP4.o from ${MID}/ASP4.NRLIB
	@ cp ${MID}/ASP4.NRLIB/code.o ${OUT}/ASP4.o

@
<<ASP4.NRLIB (NRLIB from MID)>>=
${MID}/ASP4.NRLIB: ${MID}/ASP4.spad
	@ echo 0 making ${MID}/ASP4.NRLIB from ${MID}/ASP4.spad
	@ (cd ${MID} ; 	echo ')co ASP4.spad' | ${INTERPSYS} )

@
<<ASP4.spad (SPAD from IN)>>=
${MID}/ASP4.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP4.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP4.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP4 Asp4" ${IN}/asp.spad.pamphlet >ASP4.spad )

@
<<ASP41.o (O from NRLIB)>>=
${OUT}/ASP41.o: ${MID}/ASP41.NRLIB
	@ echo 0 making ${OUT}/ASP41.o from ${MID}/ASP41.NRLIB
	@ cp ${MID}/ASP41.NRLIB/code.o ${OUT}/ASP41.o

@
<<ASP41.NRLIB (NRLIB from MID)>>=
${MID}/ASP41.NRLIB: ${MID}/ASP41.spad
	@ echo 0 making ${MID}/ASP41.NRLIB from ${MID}/ASP41.spad
	@ (cd ${MID} ; 	echo ')co ASP41.spad' | ${INTERPSYS} )

@
<<ASP41.spad (SPAD from IN)>>=
${MID}/ASP41.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP41.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP41.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP41 Asp41" ${IN}/asp.spad.pamphlet >ASP41.spad )

@
<<ASP42.o (O from NRLIB)>>=
${OUT}/ASP42.o: ${MID}/ASP42.NRLIB
	@ echo 0 making ${OUT}/ASP42.o from ${MID}/ASP42.NRLIB
	@ cp ${MID}/ASP42.NRLIB/code.o ${OUT}/ASP42.o

@
<<ASP42.NRLIB (NRLIB from MID)>>=
${MID}/ASP42.NRLIB: ${MID}/ASP42.spad
	@ echo 0 making ${MID}/ASP42.NRLIB from ${MID}/ASP42.spad
	@ (cd ${MID} ; 	echo ')co ASP42.spad' | ${INTERPSYS} )

@
<<ASP42.spad (SPAD from IN)>>=
${MID}/ASP42.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP42.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP42.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP42 Asp42" ${IN}/asp.spad.pamphlet >ASP42.spad )

@
<<ASP49.o (O from NRLIB)>>=
${OUT}/ASP49.o: ${MID}/ASP49.NRLIB
	@ echo 0 making ${OUT}/ASP49.o from ${MID}/ASP49.NRLIB
	@ cp ${MID}/ASP49.NRLIB/code.o ${OUT}/ASP49.o

@
<<ASP49.NRLIB (NRLIB from MID)>>=
${MID}/ASP49.NRLIB: ${MID}/ASP49.spad
	@ echo 0 making ${MID}/ASP49.NRLIB from ${MID}/ASP49.spad
	@ (cd ${MID} ; 	echo ')co ASP49.spad' | ${INTERPSYS} )

@
<<ASP49.spad (SPAD from IN)>>=
${MID}/ASP49.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP49.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP49.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP49 Asp49" ${IN}/asp.spad.pamphlet >ASP49.spad )

@
<<ASP50.o (O from NRLIB)>>=
${OUT}/ASP50.o: ${MID}/ASP50.NRLIB
	@ echo 0 making ${OUT}/ASP50.o from ${MID}/ASP50.NRLIB
	@ cp ${MID}/ASP50.NRLIB/code.o ${OUT}/ASP50.o

@
<<ASP50.NRLIB (NRLIB from MID)>>=
${MID}/ASP50.NRLIB: ${MID}/ASP50.spad
	@ echo 0 making ${MID}/ASP50.NRLIB from ${MID}/ASP50.spad
	@ (cd ${MID} ; 	echo ')co ASP50.spad' | ${INTERPSYS} )

@
<<ASP50.spad (SPAD from IN)>>=
${MID}/ASP50.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP50.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP50.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP50 Asp50" ${IN}/asp.spad.pamphlet >ASP50.spad )

@
<<ASP55.o (O from NRLIB)>>=
${OUT}/ASP55.o: ${MID}/ASP55.NRLIB
	@ echo 0 making ${OUT}/ASP55.o from ${MID}/ASP55.NRLIB
	@ cp ${MID}/ASP55.NRLIB/code.o ${OUT}/ASP55.o

@
<<ASP55.NRLIB (NRLIB from MID)>>=
${MID}/ASP55.NRLIB: ${MID}/ASP55.spad
	@ echo 0 making ${MID}/ASP55.NRLIB from ${MID}/ASP55.spad
	@ (cd ${MID} ; 	echo ')co ASP55.spad' | ${INTERPSYS} )

@
<<ASP55.spad (SPAD from IN)>>=
${MID}/ASP55.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP55.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP55.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP55 Asp55" ${IN}/asp.spad.pamphlet >ASP55.spad )

@
<<ASP6.o (O from NRLIB)>>=
${OUT}/ASP6.o: ${MID}/ASP6.NRLIB
	@ echo 0 making ${OUT}/ASP6.o from ${MID}/ASP6.NRLIB
	@ cp ${MID}/ASP6.NRLIB/code.o ${OUT}/ASP6.o

@
<<ASP6.NRLIB (NRLIB from MID)>>=
${MID}/ASP6.NRLIB: ${MID}/ASP6.spad
	@ echo 0 making ${MID}/ASP6.NRLIB from ${MID}/ASP6.spad
	@ (cd ${MID} ; 	echo ')co ASP6.spad' | ${INTERPSYS} )

@
<<ASP6.spad (SPAD from IN)>>=
${MID}/ASP6.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP6.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP6.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP6 Asp6" ${IN}/asp.spad.pamphlet >ASP6.spad )

@
<<ASP7.o (O from NRLIB)>>=
${OUT}/ASP7.o: ${MID}/ASP7.NRLIB
	@ echo 0 making ${OUT}/ASP7.o from ${MID}/ASP7.NRLIB
	@ cp ${MID}/ASP7.NRLIB/code.o ${OUT}/ASP7.o

@
<<ASP7.NRLIB (NRLIB from MID)>>=
${MID}/ASP7.NRLIB: ${MID}/ASP7.spad
	@ echo 0 making ${MID}/ASP7.NRLIB from ${MID}/ASP7.spad
	@ (cd ${MID} ; 	echo ')co ASP7.spad' | ${INTERPSYS} )

@
<<ASP7.spad (SPAD from IN)>>=
${MID}/ASP7.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP7.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP7.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP7 Asp7" ${IN}/asp.spad.pamphlet >ASP7.spad )

@
<<ASP73.o (O from NRLIB)>>=
${OUT}/ASP73.o: ${MID}/ASP73.NRLIB
	@ echo 0 making ${OUT}/ASP73.o from ${MID}/ASP73.NRLIB
	@ cp ${MID}/ASP73.NRLIB/code.o ${OUT}/ASP73.o

@
<<ASP73.NRLIB (NRLIB from MID)>>=
${MID}/ASP73.NRLIB: ${MID}/ASP73.spad
	@ echo 0 making ${MID}/ASP73.NRLIB from ${MID}/ASP73.spad
	@ (cd ${MID} ; 	echo ')co ASP73.spad' | ${INTERPSYS} )

@
<<ASP73.spad (SPAD from IN)>>=
${MID}/ASP73.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP73.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP73.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP73 Asp73" ${IN}/asp.spad.pamphlet >ASP73.spad )

@
<<ASP74.o (O from NRLIB)>>=
${OUT}/ASP74.o: ${MID}/ASP74.NRLIB
	@ echo 0 making ${OUT}/ASP74.o from ${MID}/ASP74.NRLIB
	@ cp ${MID}/ASP74.NRLIB/code.o ${OUT}/ASP74.o

@
<<ASP74.NRLIB (NRLIB from MID)>>=
${MID}/ASP74.NRLIB: ${MID}/ASP74.spad
	@ echo 0 making ${MID}/ASP74.NRLIB from ${MID}/ASP74.spad
	@ (cd ${MID} ; 	echo ')co ASP74.spad' | ${INTERPSYS} )

@
<<ASP74.spad (SPAD from IN)>>=
${MID}/ASP74.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP74.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP74.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP74 Asp74" ${IN}/asp.spad.pamphlet >ASP74.spad )

@
<<ASP77.o (O from NRLIB)>>=
${OUT}/ASP77.o: ${MID}/ASP77.NRLIB
	@ echo 0 making ${OUT}/ASP77.o from ${MID}/ASP77.NRLIB
	@ cp ${MID}/ASP77.NRLIB/code.o ${OUT}/ASP77.o

@
<<ASP77.NRLIB (NRLIB from MID)>>=
${MID}/ASP77.NRLIB: ${MID}/ASP77.spad
	@ echo 0 making ${MID}/ASP77.NRLIB from ${MID}/ASP77.spad
	@ (cd ${MID} ; 	echo ')co ASP77.spad' | ${INTERPSYS} )

@
<<ASP77.spad (SPAD from IN)>>=
${MID}/ASP77.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP77.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP77.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP77 Asp77" ${IN}/asp.spad.pamphlet >ASP77.spad )

@
<<ASP78.o (O from NRLIB)>>=
${OUT}/ASP78.o: ${MID}/ASP78.NRLIB
	@ echo 0 making ${OUT}/ASP78.o from ${MID}/ASP78.NRLIB
	@ cp ${MID}/ASP78.NRLIB/code.o ${OUT}/ASP78.o

@
<<ASP78.NRLIB (NRLIB from MID)>>=
${MID}/ASP78.NRLIB: ${MID}/ASP78.spad
	@ echo 0 making ${MID}/ASP78.NRLIB from ${MID}/ASP78.spad
	@ (cd ${MID} ; 	echo ')co ASP78.spad' | ${INTERPSYS} )

@
<<ASP78.spad (SPAD from IN)>>=
${MID}/ASP78.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP78.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP78.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP78 Asp78" ${IN}/asp.spad.pamphlet >ASP78.spad )

@
<<ASP8.o (O from NRLIB)>>=
${OUT}/ASP8.o: ${MID}/ASP8.NRLIB
	@ echo 0 making ${OUT}/ASP8.o from ${MID}/ASP8.NRLIB
	@ cp ${MID}/ASP8.NRLIB/code.o ${OUT}/ASP8.o

@
<<ASP8.NRLIB (NRLIB from MID)>>=
${MID}/ASP8.NRLIB: ${MID}/ASP8.spad
	@ echo 0 making ${MID}/ASP8.NRLIB from ${MID}/ASP8.spad
	@ (cd ${MID} ; 	echo ')co ASP8.spad' | ${INTERPSYS} )

@
<<ASP8.spad (SPAD from IN)>>=
${MID}/ASP8.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP8.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP8.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP8 Asp8" ${IN}/asp.spad.pamphlet >ASP8.spad )

@
<<ASP80.o (O from NRLIB)>>=
${OUT}/ASP80.o: ${MID}/ASP80.NRLIB
	@ echo 0 making ${OUT}/ASP80.o from ${MID}/ASP80.NRLIB
	@ cp ${MID}/ASP80.NRLIB/code.o ${OUT}/ASP80.o

@
<<ASP80.NRLIB (NRLIB from MID)>>=
${MID}/ASP80.NRLIB: ${MID}/ASP80.spad
	@ echo 0 making ${MID}/ASP80.NRLIB from ${MID}/ASP80.spad
	@ (cd ${MID} ; 	echo ')co ASP80.spad' | ${INTERPSYS} )

@
<<ASP80.spad (SPAD from IN)>>=
${MID}/ASP80.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP80.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP80.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP80 Asp80" ${IN}/asp.spad.pamphlet >ASP80.spad )

@
<<ASP9.o (O from NRLIB)>>=
${OUT}/ASP9.o: ${MID}/ASP9.NRLIB
	@ echo 0 making ${OUT}/ASP9.o from ${MID}/ASP9.NRLIB
	@ cp ${MID}/ASP9.NRLIB/code.o ${OUT}/ASP9.o

@
<<ASP9.NRLIB (NRLIB from MID)>>=
${MID}/ASP9.NRLIB: ${MID}/ASP9.spad
	@ echo 0 making ${MID}/ASP9.NRLIB from ${MID}/ASP9.spad
	@ (cd ${MID} ; 	echo ')co ASP9.spad' | ${INTERPSYS} )

@
<<ASP9.spad (SPAD from IN)>>=
${MID}/ASP9.spad: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${MID}/ASP9.spad from ${IN}/asp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASP9.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASP9 Asp9" ${IN}/asp.spad.pamphlet >ASP9.spad )

@
<<asp.spad.dvi (DOC from IN)>>=
${DOC}/asp.spad.dvi: ${IN}/asp.spad.pamphlet
	@ echo 0 making ${DOC}/asp.spad.dvi from ${IN}/asp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/asp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} asp.spad ; \
	rm -f ${DOC}/asp.spad.pamphlet ; \
	rm -f ${DOC}/asp.spad.tex ; \
	rm -f ${DOC}/asp.spad )

@
\subsection{attreg.spad \cite{1}}
<<attreg.spad (SPAD from IN)>>=
${MID}/attreg.spad: ${IN}/attreg.spad.pamphlet
	@ echo 0 making ${MID}/attreg.spad from ${IN}/attreg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/attreg.spad.pamphlet >attreg.spad )

@
<<ATTREG.o (O from NRLIB)>>=
${OUT}/ATTREG.o: ${MID}/ATTREG.NRLIB
	@ echo 0 making ${OUT}/ATTREG.o from ${MID}/ATTREG.NRLIB
	@ cp ${MID}/ATTREG.NRLIB/code.o ${OUT}/ATTREG.o

@
<<ATTREG.NRLIB (NRLIB from MID)>>=
${MID}/ATTREG.NRLIB: ${MID}/ATTREG.spad
	@ echo 0 making ${MID}/ATTREG.NRLIB from ${MID}/ATTREG.spad
	@ (cd ${MID} ; 	echo ')co ATTREG.spad' | ${INTERPSYS} )

@
<<ATTREG.spad (SPAD from IN)>>=
${MID}/ATTREG.spad: ${IN}/attreg.spad.pamphlet
	@ echo 0 making ${MID}/ATTREG.spad from ${IN}/attreg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ATTREG.NRLIB ; \
	${SPADBIN}/notangle -R"category ATTREG AttributeRegistry" ${IN}/attreg.spad.pamphlet >ATTREG.spad )

@
<<attreg.spad.dvi (DOC from IN)>>=
${DOC}/attreg.spad.dvi: ${IN}/attreg.spad.pamphlet
	@ echo 0 making ${DOC}/attreg.spad.dvi from ${IN}/attreg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/attreg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} attreg.spad ; \
	rm -f ${DOC}/attreg.spad.pamphlet ; \
	rm -f ${DOC}/attreg.spad.tex ; \
	rm -f ${DOC}/attreg.spad )

@
\subsection{axtimer.as \cite{1}}
<<axtimer.as (SPAD from IN)>>=
${MID}/axtimer.as: ${IN}/axtimer.as.pamphlet
	@ echo 0 making ${MID}/axtimer.as from ${IN}/axtimer.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/axtimer.as.pamphlet >axtimer.as )

@
<<axtimer.as.dvi (DOC from IN)>>=
${DOC}/axtimer.as.dvi: ${IN}/axtimer.as.pamphlet
	@ echo 0 making ${DOC}/axtimer.as.dvi from ${IN}/axtimer.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/axtimer.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} axtimer.as ; \
	rm -f ${DOC}/axtimer.as.pamphlet ; \
	rm -f ${DOC}/axtimer.as.tex ; \
	rm -f ${DOC}/axtimer.as )

@
\subsection{bags.spad \cite{1}}
<<bags.spad (SPAD from IN)>>=
${MID}/bags.spad: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${MID}/bags.spad from ${IN}/bags.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/bags.spad.pamphlet >bags.spad )

@
<<ASTACK.o (O from NRLIB)>>=
${OUT}/ASTACK.o: ${MID}/ASTACK.NRLIB
	@ echo 0 making ${OUT}/ASTACK.o from ${MID}/ASTACK.NRLIB
	@ cp ${MID}/ASTACK.NRLIB/code.o ${OUT}/ASTACK.o

@
<<ASTACK.NRLIB (NRLIB from MID)>>=
${MID}/ASTACK.NRLIB: ${MID}/ASTACK.spad
	@ echo 0 making ${MID}/ASTACK.NRLIB from ${MID}/ASTACK.spad
	@ (cd ${MID} ; 	echo ')co ASTACK.spad' | ${INTERPSYS} )

@
<<ASTACK.spad (SPAD from IN)>>=
${MID}/ASTACK.spad: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${MID}/ASTACK.spad from ${IN}/bags.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASTACK.NRLIB ; \
	${SPADBIN}/notangle -R"domain ASTACK ArrayStack" ${IN}/bags.spad.pamphlet >ASTACK.spad )

@
<<DEQUEUE.o (O from NRLIB)>>=
${OUT}/DEQUEUE.o: ${MID}/DEQUEUE.NRLIB
	@ echo 0 making ${OUT}/DEQUEUE.o from ${MID}/DEQUEUE.NRLIB
	@ cp ${MID}/DEQUEUE.NRLIB/code.o ${OUT}/DEQUEUE.o

@
<<DEQUEUE.NRLIB (NRLIB from MID)>>=
${MID}/DEQUEUE.NRLIB: ${MID}/DEQUEUE.spad
	@ echo 0 making ${MID}/DEQUEUE.NRLIB from ${MID}/DEQUEUE.spad
	@ (cd ${MID} ; 	echo ')co DEQUEUE.spad' | ${INTERPSYS} )

@
<<DEQUEUE.spad (SPAD from IN)>>=
${MID}/DEQUEUE.spad: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${MID}/DEQUEUE.spad from ${IN}/bags.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DEQUEUE.NRLIB ; \
	${SPADBIN}/notangle -R"domain DEQUEUE Dequeue" ${IN}/bags.spad.pamphlet >DEQUEUE.spad )

@
<<HEAP.o (O from NRLIB)>>=
${OUT}/HEAP.o: ${MID}/HEAP.NRLIB
	@ echo 0 making ${OUT}/HEAP.o from ${MID}/HEAP.NRLIB
	@ cp ${MID}/HEAP.NRLIB/code.o ${OUT}/HEAP.o

@
<<HEAP.NRLIB (NRLIB from MID)>>=
${MID}/HEAP.NRLIB: ${MID}/HEAP.spad
	@ echo 0 making ${MID}/HEAP.NRLIB from ${MID}/HEAP.spad
	@ (cd ${MID} ; 	echo ')co HEAP.spad' | ${INTERPSYS} )

@
<<HEAP.spad (SPAD from IN)>>=
${MID}/HEAP.spad: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${MID}/HEAP.spad from ${IN}/bags.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HEAP.NRLIB ; \
	${SPADBIN}/notangle -R"domain HEAP Heap" ${IN}/bags.spad.pamphlet >HEAP.spad )

@
<<QUEUE.o (O from NRLIB)>>=
${OUT}/QUEUE.o: ${MID}/QUEUE.NRLIB
	@ echo 0 making ${OUT}/QUEUE.o from ${MID}/QUEUE.NRLIB
	@ cp ${MID}/QUEUE.NRLIB/code.o ${OUT}/QUEUE.o

@
<<QUEUE.NRLIB (NRLIB from MID)>>=
${MID}/QUEUE.NRLIB: ${MID}/QUEUE.spad
	@ echo 0 making ${MID}/QUEUE.NRLIB from ${MID}/QUEUE.spad
	@ (cd ${MID} ; 	echo ')co QUEUE.spad' | ${INTERPSYS} )

@
<<QUEUE.spad (SPAD from IN)>>=
${MID}/QUEUE.spad: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${MID}/QUEUE.spad from ${IN}/bags.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QUEUE.NRLIB ; \
	${SPADBIN}/notangle -R"domain QUEUE Queue" ${IN}/bags.spad.pamphlet >QUEUE.spad )

@
<<STACK.o (O from NRLIB)>>=
${OUT}/STACK.o: ${MID}/STACK.NRLIB
	@ echo 0 making ${OUT}/STACK.o from ${MID}/STACK.NRLIB
	@ cp ${MID}/STACK.NRLIB/code.o ${OUT}/STACK.o

@
<<STACK.NRLIB (NRLIB from MID)>>=
${MID}/STACK.NRLIB: ${MID}/STACK.spad
	@ echo 0 making ${MID}/STACK.NRLIB from ${MID}/STACK.spad
	@ (cd ${MID} ; 	echo ')co STACK.spad' | ${INTERPSYS} )

@
<<STACK.spad (SPAD from IN)>>=
${MID}/STACK.spad: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${MID}/STACK.spad from ${IN}/bags.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STACK.NRLIB ; \
	${SPADBIN}/notangle -R"domain STACK Stack" ${IN}/bags.spad.pamphlet >STACK.spad )

@
<<bags.spad.dvi (DOC from IN)>>=
${DOC}/bags.spad.dvi: ${IN}/bags.spad.pamphlet
	@ echo 0 making ${DOC}/bags.spad.dvi from ${IN}/bags.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/bags.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} bags.spad ; \
	rm -f ${DOC}/bags.spad.pamphlet ; \
	rm -f ${DOC}/bags.spad.tex ; \
	rm -f ${DOC}/bags.spad )

@
\subsection{bezout.spad \cite{1}}
<<bezout.spad (SPAD from IN)>>=
${MID}/bezout.spad: ${IN}/bezout.spad.pamphlet
	@ echo 0 making ${MID}/bezout.spad from ${IN}/bezout.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/bezout.spad.pamphlet >bezout.spad )

@
<<BEZOUT.o (O from NRLIB)>>=
${OUT}/BEZOUT.o: ${MID}/BEZOUT.NRLIB
	@ echo 0 making ${OUT}/BEZOUT.o from ${MID}/BEZOUT.NRLIB
	@ cp ${MID}/BEZOUT.NRLIB/code.o ${OUT}/BEZOUT.o

@
<<BEZOUT.NRLIB (NRLIB from MID)>>=
${MID}/BEZOUT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/BEZOUT.spad
	@ echo 0 making ${MID}/BEZOUT.NRLIB from ${MID}/BEZOUT.spad
	@ (cd ${MID} ; 	echo ')co BEZOUT.spad' | ${INTERPSYS} )

@
<<BEZOUT.spad (SPAD from IN)>>=
${MID}/BEZOUT.spad: ${IN}/bezout.spad.pamphlet
	@ echo 0 making ${MID}/BEZOUT.spad from ${IN}/bezout.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BEZOUT.NRLIB ; \
	${SPADBIN}/notangle -R"package BEZOUT BezoutMatrix" ${IN}/bezout.spad.pamphlet >BEZOUT.spad )

@
<<bezout.spad.dvi (DOC from IN)>>=
${DOC}/bezout.spad.dvi: ${IN}/bezout.spad.pamphlet
	@ echo 0 making ${DOC}/bezout.spad.dvi from ${IN}/bezout.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/bezout.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} bezout.spad ; \
	rm -f ${DOC}/bezout.spad.pamphlet ; \
	rm -f ${DOC}/bezout.spad.tex ; \
	rm -f ${DOC}/bezout.spad )

@
\subsection{boolean.spad \cite{1}}
<<boolean.spad (SPAD from IN)>>=
${MID}/boolean.spad: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/boolean.spad from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/boolean.spad.pamphlet >boolean.spad )

@
<<BITS.o (O from NRLIB)>>=
${OUT}/BITS.o: ${MID}/BITS.NRLIB
	@ echo 0 making ${OUT}/BITS.o from ${MID}/BITS.NRLIB
	@ cp ${MID}/BITS.NRLIB/code.o ${OUT}/BITS.o

@
<<BITS.NRLIB (NRLIB from MID)>>=
${MID}/BITS.NRLIB: ${MID}/BITS.spad
	@ echo 0 making ${MID}/BITS.NRLIB from ${MID}/BITS.spad
	@ (cd ${MID} ; 	echo ')co BITS.spad' | ${INTERPSYS} )

@
<<BITS.spad (SPAD from IN)>>=
${MID}/BITS.spad: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/BITS.spad from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BITS.NRLIB ; \
	${SPADBIN}/notangle -R"domain BITS Bits" ${IN}/boolean.spad.pamphlet >BITS.spad )

@
<<BOOLEAN.o (O from NRLIB)>>=
${OUT}/BOOLEAN.o: ${MID}/BOOLEAN.NRLIB
	@ echo 0 making ${OUT}/BOOLEAN.o from ${MID}/BOOLEAN.NRLIB
	@ cp ${MID}/BOOLEAN.NRLIB/code.o ${OUT}/BOOLEAN.o

@
<<BOOLEAN.NRLIB (NRLIB from MID)>>=
${MID}/BOOLEAN.NRLIB: ${MID}/BOOLEAN.spad
	@ echo 0 making ${MID}/BOOLEAN.NRLIB from ${MID}/BOOLEAN.spad
	@ (cd ${MID} ; 	echo ')co BOOLEAN.spad' | ${INTERPSYS} )

@
<<BOOLEAN.spad (SPAD from IN)>>=
${MID}/BOOLEAN.spad: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/BOOLEAN.spad from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BOOLEAN.NRLIB ; \
	${SPADBIN}/notangle -R"domain BOOLEAN Boolean" ${IN}/boolean.spad.pamphlet >BOOLEAN.spad )

@
<<BOOLEAN.o (BOOTSTRAP from MID)>>=
${MID}/BOOLEAN.o: ${MID}/BOOLEAN.lsp
	@ echo 0 making ${MID}/BOOLEAN.o from ${MID}/BOOLEAN.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "BOOLEAN.lsp" :output-file "BOOLEAN.o"))' | ${DEPSYS} )
	@ cp ${MID}/BOOLEAN.o ${OUT}/BOOLEAN.o

@
<<BOOLEAN.lsp (LISP from IN)>>=
${MID}/BOOLEAN.lsp: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/BOOLEAN.lsp from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BOOLEAN.NRLIB ; \
	rm -rf ${OUT}/BOOLEAN.o ; \
	${SPADBIN}/notangle -R"BOOLEAN.lsp BOOTSTRAP" ${IN}/boolean.spad.pamphlet >BOOLEAN.lsp )

@
<<IBITS.o (O from NRLIB)>>=
${OUT}/IBITS.o: ${MID}/IBITS.NRLIB
	@ echo 0 making ${OUT}/IBITS.o from ${MID}/IBITS.NRLIB
	@ cp ${MID}/IBITS.NRLIB/code.o ${OUT}/IBITS.o

@
<<IBITS.NRLIB (NRLIB from MID)>>=
${MID}/IBITS.NRLIB: ${MID}/IBITS.spad
	@ echo 0 making ${MID}/IBITS.NRLIB from ${MID}/IBITS.spad
	@ (cd ${MID} ; 	echo ')co IBITS.spad' | ${INTERPSYS} )

@
<<IBITS.spad (SPAD from IN)>>=
${MID}/IBITS.spad: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/IBITS.spad from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IBITS.NRLIB ; \
	${SPADBIN}/notangle -R"domain IBITS IndexedBits" ${IN}/boolean.spad.pamphlet >IBITS.spad )

@
<<LOGIC-.o (O from NRLIB)>>=
${OUT}/LOGIC-.o: ${MID}/LOGIC.NRLIB
	@ echo 0 making ${OUT}/LOGIC-.o from ${MID}/LOGIC-.NRLIB
	@ cp ${MID}/LOGIC-.NRLIB/code.o ${OUT}/LOGIC-.o

@
<<LOGIC-.NRLIB (NRLIB from MID)>>=
${MID}/LOGIC-.NRLIB: ${OUT}/BOOLEAN.o ${MID}/LOGIC.spad 
	@ echo 0 making ${MID}/LOGIC-.NRLIB from ${MID}/LOGIC.spad
	@ (cd ${MID} ; 	echo ')co LOGIC.spad' | ${INTERPSYS} )

@
<<LOGIC.o (O from NRLIB)>>=
${OUT}/LOGIC.o: ${MID}/LOGIC.NRLIB
	@ echo 0 making ${OUT}/LOGIC.o from ${MID}/LOGIC.NRLIB
	@ cp ${MID}/LOGIC.NRLIB/code.o ${OUT}/LOGIC.o

@
<<LOGIC.NRLIB (NRLIB from MID)>>=
${MID}/LOGIC.NRLIB: ${MID}/LOGIC.spad
	@ echo 0 making ${MID}/LOGIC.NRLIB from ${MID}/LOGIC.spad
	@ (cd ${MID} ; 	echo ')co LOGIC.spad' | ${INTERPSYS} )

@
<<LOGIC.spad (SPAD from IN)>>=
${MID}/LOGIC.spad: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/LOGIC.spad from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LOGIC.NRLIB ; \
	${SPADBIN}/notangle -R"category LOGIC Logic" ${IN}/boolean.spad.pamphlet >LOGIC.spad )

@
<<REF.o (O from NRLIB)>>=
${OUT}/REF.o: ${MID}/REF.NRLIB
	@ echo 0 making ${OUT}/REF.o from ${MID}/REF.NRLIB
	@ cp ${MID}/REF.NRLIB/code.o ${OUT}/REF.o

@
<<REF.NRLIB (NRLIB from MID)>>=
${MID}/REF.NRLIB: ${MID}/REF.spad
	@ echo 0 making ${MID}/REF.NRLIB from ${MID}/REF.spad
	@ (cd ${MID} ; 	echo ')co REF.spad' | ${INTERPSYS} )

@
<<REF.spad (SPAD from IN)>>=
${MID}/REF.spad: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/REF.spad from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REF.NRLIB ; \
	${SPADBIN}/notangle -R"domain REF Reference" ${IN}/boolean.spad.pamphlet >REF.spad )

@
<<REF.o (BOOTSTRAP from MID)>>=
${MID}/REF.o: ${MID}/REF.lsp
	@ echo 0 making ${MID}/REF.o from ${MID}/REF.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "REF.lsp" :output-file "REF.o"))' | ${DEPSYS} )
	@ cp ${MID}/REF.o ${OUT}/REF.o

@
<<REF.lsp (LISP from IN)>>=
${MID}/REF.lsp: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${MID}/REF.lsp from ${IN}/boolean.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REF.NRLIB ; \
	rm -rf ${OUT}/REF.o ; \
	${SPADBIN}/notangle -R"REF.lsp BOOTSTRAP" ${IN}/boolean.spad.pamphlet >REF.lsp )

@
<<boolean.spad.dvi (DOC from IN)>>=
${DOC}/boolean.spad.dvi: ${IN}/boolean.spad.pamphlet
	@ echo 0 making ${DOC}/boolean.spad.dvi from ${IN}/boolean.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/boolean.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} boolean.spad ; \
	rm -f ${DOC}/boolean.spad.pamphlet ; \
	rm -f ${DOC}/boolean.spad.tex ; \
	rm -f ${DOC}/boolean.spad )

@
\subsection{brill.spad \cite{1}}
<<brill.spad (SPAD from IN)>>=
${MID}/brill.spad: ${IN}/brill.spad.pamphlet
	@ echo 0 making ${MID}/brill.spad from ${IN}/brill.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/brill.spad.pamphlet >brill.spad )

@
<<BRILL.o (O from NRLIB)>>=
${OUT}/BRILL.o: ${MID}/BRILL.NRLIB
	@ echo 0 making ${OUT}/BRILL.o from ${MID}/BRILL.NRLIB
	@ cp ${MID}/BRILL.NRLIB/code.o ${OUT}/BRILL.o

@
<<BRILL.NRLIB (NRLIB from MID)>>=
${MID}/BRILL.NRLIB: ${MID}/BRILL.spad
	@ echo 0 making ${MID}/BRILL.NRLIB from ${MID}/BRILL.spad
	@ (cd ${MID} ; 	echo ')co BRILL.spad' | ${INTERPSYS} )

@
<<BRILL.spad (SPAD from IN)>>=
${MID}/BRILL.spad: ${IN}/brill.spad.pamphlet
	@ echo 0 making ${MID}/BRILL.spad from ${IN}/brill.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BRILL.NRLIB ; \
	${SPADBIN}/notangle -R"package BRILL BrillhartTests" ${IN}/brill.spad.pamphlet >BRILL.spad )

@
<<brill.spad.dvi (DOC from IN)>>=
${DOC}/brill.spad.dvi: ${IN}/brill.spad.pamphlet
	@ echo 0 making ${DOC}/brill.spad.dvi from ${IN}/brill.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/brill.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} brill.spad ; \
	rm -f ${DOC}/brill.spad.pamphlet ; \
	rm -f ${DOC}/brill.spad.tex ; \
	rm -f ${DOC}/brill.spad )

@
\subsection{c02.spad \cite{1}}
<<c02.spad (SPAD from IN)>>=
${MID}/c02.spad: ${IN}/c02.spad.pamphlet
	@ echo 0 making ${MID}/c02.spad from ${IN}/c02.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/c02.spad.pamphlet >c02.spad )

@
<<NAGC02.o (O from NRLIB)>>=
${OUT}/NAGC02.o: ${MID}/NAGC02.NRLIB
	@ echo 0 making ${OUT}/NAGC02.o from ${MID}/NAGC02.NRLIB
	@ cp ${MID}/NAGC02.NRLIB/code.o ${OUT}/NAGC02.o

@
<<NAGC02.NRLIB (NRLIB from MID)>>=
${MID}/NAGC02.NRLIB: ${MID}/NAGC02.spad
	@ echo 0 making ${MID}/NAGC02.NRLIB from ${MID}/NAGC02.spad
	@ (cd ${MID} ; 	echo ')co NAGC02.spad' | ${INTERPSYS} )

@
<<NAGC02.spad (SPAD from IN)>>=
${MID}/NAGC02.spad: ${IN}/c02.spad.pamphlet
	@ echo 0 making ${MID}/NAGC02.spad from ${IN}/c02.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGC02.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGC02 NagPolynomialRootsPackage" ${IN}/c02.spad.pamphlet >NAGC02.spad )

@
<<c02.spad.dvi (DOC from IN)>>=
${DOC}/c02.spad.dvi: ${IN}/c02.spad.pamphlet
	@ echo 0 making ${DOC}/c02.spad.dvi from ${IN}/c02.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/c02.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} c02.spad ; \
	rm -f ${DOC}/c02.spad.pamphlet ; \
	rm -f ${DOC}/c02.spad.tex ; \
	rm -f ${DOC}/c02.spad )

@
\subsection{c05.spad \cite{1}}
<<c05.spad (SPAD from IN)>>=
${MID}/c05.spad: ${IN}/c05.spad.pamphlet
	@ echo 0 making ${MID}/c05.spad from ${IN}/c05.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/c05.spad.pamphlet >c05.spad )

@
<<NAGC05.o (O from NRLIB)>>=
${OUT}/NAGC05.o: ${MID}/NAGC05.NRLIB
	@ echo 0 making ${OUT}/NAGC05.o from ${MID}/NAGC05.NRLIB
	@ cp ${MID}/NAGC05.NRLIB/code.o ${OUT}/NAGC05.o

@
<<NAGC05.NRLIB (NRLIB from MID)>>=
${MID}/NAGC05.NRLIB: ${MID}/NAGC05.spad
	@ echo 0 making ${MID}/NAGC05.NRLIB from ${MID}/NAGC05.spad
	@ (cd ${MID} ; 	echo ')co NAGC05.spad' | ${INTERPSYS} )

@
<<NAGC05.spad (SPAD from IN)>>=
${MID}/NAGC05.spad: ${IN}/c05.spad.pamphlet
	@ echo 0 making ${MID}/NAGC05.spad from ${IN}/c05.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGC05.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGC05 NagRootFindingPackage" ${IN}/c05.spad.pamphlet >NAGC05.spad )

@
<<c05.spad.dvi (DOC from IN)>>=
${DOC}/c05.spad.dvi: ${IN}/c05.spad.pamphlet
	@ echo 0 making ${DOC}/c05.spad.dvi from ${IN}/c05.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/c05.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} c05.spad ; \
	rm -f ${DOC}/c05.spad.pamphlet ; \
	rm -f ${DOC}/c05.spad.tex ; \
	rm -f ${DOC}/c05.spad )

@
\subsection{c06.spad \cite{1}}
<<c06.spad (SPAD from IN)>>=
${MID}/c06.spad: ${IN}/c06.spad.pamphlet
	@ echo 0 making ${MID}/c06.spad from ${IN}/c06.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/c06.spad.pamphlet >c06.spad )

@
<<NAGC06.o (O from NRLIB)>>=
${OUT}/NAGC06.o: ${MID}/NAGC06.NRLIB
	@ echo 0 making ${OUT}/NAGC06.o from ${MID}/NAGC06.NRLIB
	@ cp ${MID}/NAGC06.NRLIB/code.o ${OUT}/NAGC06.o

@
<<NAGC06.NRLIB (NRLIB from MID)>>=
${MID}/NAGC06.NRLIB: ${MID}/NAGC06.spad
	@ echo 0 making ${MID}/NAGC06.NRLIB from ${MID}/NAGC06.spad
	@ (cd ${MID} ; 	echo ')co NAGC06.spad' | ${INTERPSYS} )

@
<<NAGC06.spad (SPAD from IN)>>=
${MID}/NAGC06.spad: ${IN}/c06.spad.pamphlet
	@ echo 0 making ${MID}/NAGC06.spad from ${IN}/c06.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGC06.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGC06 NagSeriesSummationPackage" ${IN}/c06.spad.pamphlet >NAGC06.spad )

@
<<c06.spad.dvi (DOC from IN)>>=
${DOC}/c06.spad.dvi: ${IN}/c06.spad.pamphlet
	@ echo 0 making ${DOC}/c06.spad.dvi from ${IN}/c06.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/c06.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} c06.spad ; \
	rm -f ${DOC}/c06.spad.pamphlet ; \
	rm -f ${DOC}/c06.spad.tex ; \
	rm -f ${DOC}/c06.spad )

@
<<CARD.o (O from NRLIB)>>=
${OUT}/CARD.o: ${MID}/CARD.NRLIB
	@ echo 0 making ${OUT}/CARD.o from ${MID}/CARD.NRLIB
	@ cp ${MID}/CARD.NRLIB/code.o ${OUT}/CARD.o

@
<<CARD.NRLIB (NRLIB from MID)>>=
${MID}/CARD.NRLIB: ${MID}/CARD.spad
	@ echo 0 making ${MID}/CARD.NRLIB from ${MID}/CARD.spad
	@ (cd ${MID} ; 	echo ')co CARD.spad' | ${INTERPSYS} )

@
<<CARD.spad (SPAD from IN)>>=
${MID}/CARD.spad: ${IN}/card.spad.pamphlet
	@ echo 0 making ${MID}/CARD.spad from ${IN}/card.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CARD.NRLIB ; \
	${SPADBIN}/notangle -R"domain CARD CardinalNumber" ${IN}/card.spad.pamphlet >CARD.spad )

@
\subsection{card.spad \cite{1}}
<<card.spad (SPAD from IN)>>=
${MID}/card.spad: ${IN}/card.spad.pamphlet
	@ echo 0 making ${MID}/card.spad from ${IN}/card.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/card.spad.pamphlet >card.spad )

@
<<card.spad.dvi (DOC from IN)>>=
${DOC}/card.spad.dvi: ${IN}/card.spad.pamphlet
	@ echo 0 making ${DOC}/card.spad.dvi from ${IN}/card.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/card.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} card.spad ; \
	rm -f ${DOC}/card.spad.pamphlet ; \
	rm -f ${DOC}/card.spad.tex ; \
	rm -f ${DOC}/card.spad )

@
\subsection{carten.spad \cite{1}}
<<carten.spad (SPAD from IN)>>=
${MID}/carten.spad: ${IN}/carten.spad.pamphlet
	@ echo 0 making ${MID}/carten.spad from ${IN}/carten.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/carten.spad.pamphlet >carten.spad )

@
<<CARTEN.o (O from NRLIB)>>=
${OUT}/CARTEN.o: ${MID}/CARTEN.NRLIB
	@ echo 0 making ${OUT}/CARTEN.o from ${MID}/CARTEN.NRLIB
	@ cp ${MID}/CARTEN.NRLIB/code.o ${OUT}/CARTEN.o

@
<<CARTEN.NRLIB (NRLIB from MID)>>=
${MID}/CARTEN.NRLIB: ${MID}/CARTEN.spad
	@ echo 0 making ${MID}/CARTEN.NRLIB from ${MID}/CARTEN.spad
	@ (cd ${MID} ; 	echo ')co CARTEN.spad' | ${INTERPSYS} )

@
<<CARTEN.spad (SPAD from IN)>>=
${MID}/CARTEN.spad: ${IN}/carten.spad.pamphlet
	@ echo 0 making ${MID}/CARTEN.spad from ${IN}/carten.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CARTEN.NRLIB ; \
	${SPADBIN}/notangle -R"domain CARTEN CartesianTensor" ${IN}/carten.spad.pamphlet >CARTEN.spad )

@
<<CARTEN2.o (O from NRLIB)>>=
${OUT}/CARTEN2.o: ${MID}/CARTEN2.NRLIB
	@ echo 0 making ${OUT}/CARTEN2.o from ${MID}/CARTEN2.NRLIB
	@ cp ${MID}/CARTEN2.NRLIB/code.o ${OUT}/CARTEN2.o

@
<<CARTEN2.NRLIB (NRLIB from MID)>>=
${MID}/CARTEN2.NRLIB: ${MID}/CARTEN2.spad
	@ echo 0 making ${MID}/CARTEN2.NRLIB from ${MID}/CARTEN2.spad
	@ (cd ${MID} ; 	echo ')co CARTEN2.spad' | ${INTERPSYS} )

@
<<CARTEN2.spad (SPAD from IN)>>=
${MID}/CARTEN2.spad: ${IN}/carten.spad.pamphlet
	@ echo 0 making ${MID}/CARTEN2.spad from ${IN}/carten.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CARTEN2.NRLIB ; \
	${SPADBIN}/notangle -R"package CARTEN2 CartesianTensorFunctions2" ${IN}/carten.spad.pamphlet >CARTEN2.spad )

@
<<GRALG-.o (O from NRLIB)>>=
${OUT}/GRALG-.o: ${MID}/GRALG.NRLIB
	@ echo 0 making ${OUT}/GRALG-.o from ${MID}/GRALG-.NRLIB
	@ cp ${MID}/GRALG-.NRLIB/code.o ${OUT}/GRALG-.o

@
<<GRALG-.NRLIB (NRLIB from MID)>>=
${MID}/GRALG-.NRLIB: ${OUT}/BOOLEAN.o ${MID}/GRALG.spad 
	@ echo 0 making ${MID}/GRALG-.NRLIB from ${MID}/GRALG.spad
	@ (cd ${MID} ; 	echo ')co GRALG.spad' | ${INTERPSYS} )

@
<<GRALG.o (O from NRLIB)>>=
${OUT}/GRALG.o: ${MID}/GRALG.NRLIB
	@ echo 0 making ${OUT}/GRALG.o from ${MID}/GRALG.NRLIB
	@ cp ${MID}/GRALG.NRLIB/code.o ${OUT}/GRALG.o

@
<<GRALG.NRLIB (NRLIB from MID)>>=
${MID}/GRALG.NRLIB: ${MID}/BOOLEAN.o ${MID}/GRALG.spad
	@ echo 0 making ${MID}/GRALG.NRLIB from ${MID}/GRALG.spad
	@ (cd ${MID} ; 	echo ')co GRALG.spad' | ${INTERPSYS} )

@
<<GRALG.spad (SPAD from IN)>>=
${MID}/GRALG.spad: ${IN}/carten.spad.pamphlet
	@ echo 0 making ${MID}/GRALG.spad from ${IN}/carten.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GRALG.NRLIB ; \
	${SPADBIN}/notangle -R"category GRALG GradedAlgebra" ${IN}/carten.spad.pamphlet >GRALG.spad )

@
<<GRMOD-.o (O from NRLIB)>>=
${OUT}/GRMOD-.o: ${MID}/GRMOD.NRLIB
	@ echo 0 making ${OUT}/GRMOD-.o from ${MID}/GRMOD-.NRLIB
	@ cp ${MID}/GRMOD-.NRLIB/code.o ${OUT}/GRMOD-.o

@
<<GRMOD-.NRLIB (NRLIB from MID)>>=
${MID}/GRMOD-.NRLIB: ${OUT}/TYPE.o ${MID}/GRMOD.spad 
	@ echo 0 making ${MID}/GRMOD-.NRLIB from ${MID}/GRMOD.spad
	@ (cd ${MID} ; 	echo ')co GRMOD.spad' | ${INTERPSYS} )

@
<<GRMOD.o (O from NRLIB)>>=
${OUT}/GRMOD.o: ${MID}/GRMOD.NRLIB
	@ echo 0 making ${OUT}/GRMOD.o from ${MID}/GRMOD.NRLIB
	@ cp ${MID}/GRMOD.NRLIB/code.o ${OUT}/GRMOD.o

@
<<GRMOD.NRLIB (NRLIB from MID)>>=
${MID}/GRMOD.NRLIB: ${MID}/GRMOD.spad
	@ echo 0 making ${MID}/GRMOD.NRLIB from ${MID}/GRMOD.spad
	@ (cd ${MID} ; 	echo ')co GRMOD.spad' | ${INTERPSYS} )

@
<<GRMOD.spad (SPAD from IN)>>=
${MID}/GRMOD.spad: ${IN}/carten.spad.pamphlet
	@ echo 0 making ${MID}/GRMOD.spad from ${IN}/carten.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GRMOD.NRLIB ; \
	${SPADBIN}/notangle -R"category GRMOD GradedModule" ${IN}/carten.spad.pamphlet >GRMOD.spad )

@
<<carten.spad.dvi (DOC from IN)>>=
${DOC}/carten.spad.dvi: ${IN}/carten.spad.pamphlet
	@ echo 0 making ${DOC}/carten.spad.dvi from ${IN}/carten.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/carten.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} carten.spad ; \
	rm -f ${DOC}/carten.spad.pamphlet ; \
	rm -f ${DOC}/carten.spad.tex ; \
	rm -f ${DOC}/carten.spad )

@
\subsection{catdef.spad \cite{1}}
<<catdef.spad (SPAD from IN)>>=
${MID}/catdef.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/catdef.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/catdef.spad.pamphlet >catdef.spad )

@
<<ABELGRP-.o (O from NRLIB)>>=
${OUT}/ABELGRP-.o: ${MID}/ABELGRP.NRLIB
	@ echo 0 making ${OUT}/ABELGRP-.o from ${MID}/ABELGRP-.NRLIB
	@ cp ${MID}/ABELGRP-.NRLIB/code.o ${OUT}/ABELGRP-.o

@
<<ABELGRP-.NRLIB (NRLIB from MID)>>=
${MID}/ABELGRP-.NRLIB: ${OUT}/TYPE.o ${MID}/ABELGRP.spad 
	@ echo 0 making ${MID}/ABELGRP-.NRLIB from ${MID}/ABELGRP.spad
	@ (cd ${MID} ; 	echo ')co ABELGRP.spad' | ${INTERPSYS} )

@
<<ABELGRP.o (O from NRLIB)>>=
${OUT}/ABELGRP.o: ${MID}/ABELGRP.NRLIB
	@ echo 0 making ${OUT}/ABELGRP.o from ${MID}/ABELGRP.NRLIB
	@ cp ${MID}/ABELGRP.NRLIB/code.o ${OUT}/ABELGRP.o

@
<<ABELGRP.NRLIB (NRLIB from MID)>>=
${MID}/ABELGRP.NRLIB: ${MID}/ABELGRP.spad
	@ echo 0 making ${MID}/ABELGRP.NRLIB from ${MID}/ABELGRP.spad
	@ (cd ${MID} ; 	echo ')co ABELGRP.spad' | ${INTERPSYS} )

@
<<ABELGRP.spad (SPAD from IN)>>=
${MID}/ABELGRP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELGRP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELGRP.NRLIB ; \
	${SPADBIN}/notangle -R"category ABELGRP AbelianGroup" ${IN}/catdef.spad.pamphlet >ABELGRP.spad )

@
<<ABELGRP-.o (BOOTSTRAP from MID)>>=
${MID}/ABELGRP-.o: ${MID}/ABELGRP-.lsp 
	@ echo 0 making ${MID}/ABELGRP-.o from ${MID}/ABELGRP-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ABELGRP-.lsp" :output-file "ABELGRP-.o"))' | ${DEPSYS} )
	@ cp ${MID}/ABELGRP-.o ${OUT}/ABELGRP-.o

@
<<ABELGRP-.lsp (LISP from IN)>>=
${MID}/ABELGRP-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELGRP-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELGRP-.NRLIB ; \
	rm -rf ${OUT}/ABELGRP-.o ; \
	${SPADBIN}/notangle -R"ABELGRP-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ABELGRP-.lsp )

@
<<ABELGRP.o (BOOTSTRAP from MID)>>=
${MID}/ABELGRP.o: ${MID}/ABELGRP.lsp 
	@ echo 0 making ${MID}/ABELGRP.o from ${MID}/ABELGRP.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ABELGRP.lsp" :output-file "ABELGRP.o"))' | ${DEPSYS} )
	@ cp ${MID}/ABELGRP.o ${OUT}/ABELGRP.o

@
<<ABELGRP.lsp (LISP from IN)>>=
${MID}/ABELGRP.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELGRP.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELGRP.NRLIB ; \
	rm -rf ${OUT}/ABELGRP.o ; \
	${SPADBIN}/notangle -R"ABELGRP.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ABELGRP.lsp )

@
<<ABELMON-.o (O from NRLIB)>>=
${OUT}/ABELMON-.o: ${MID}/ABELMON.NRLIB
	@ echo 0 making ${OUT}/ABELMON-.o from ${MID}/ABELMON-.NRLIB
	@ cp ${MID}/ABELMON-.NRLIB/code.o ${OUT}/ABELMON-.o

@
<<ABELMON-.NRLIB (NRLIB from MID)>>=
${MID}/ABELMON-.NRLIB: ${OUT}/TYPE.o ${MID}/ABELMON.spad 
	@ echo 0 making ${MID}/ABELMON-.NRLIB from ${MID}/ABELMON.spad
	@ (cd ${MID} ; 	echo ')co ABELMON.spad' | ${INTERPSYS} )

@
<<ABELMON.o (O from NRLIB)>>=
${OUT}/ABELMON.o: ${MID}/ABELMON.NRLIB
	@ echo 0 making ${OUT}/ABELMON.o from ${MID}/ABELMON.NRLIB
	@ cp ${MID}/ABELMON.NRLIB/code.o ${OUT}/ABELMON.o

@
<<ABELMON.NRLIB (NRLIB from MID)>>=
${MID}/ABELMON.NRLIB: ${MID}/ABELMON.spad
	@ echo 0 making ${MID}/ABELMON.NRLIB from ${MID}/ABELMON.spad
	@ (cd ${MID} ; 	echo ')co ABELMON.spad' | ${INTERPSYS} )

@
<<ABELMON.spad (SPAD from IN)>>=
${MID}/ABELMON.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELMON.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELMON.NRLIB ; \
	${SPADBIN}/notangle -R"category ABELMON AbelianMonoid" ${IN}/catdef.spad.pamphlet >ABELMON.spad )

@
<<ABELMON-.o (BOOTSTRAP from MID)>>=
${MID}/ABELMON-.o: ${MID}/ABELMON-.lsp 
	@ echo 0 making ${MID}/ABELMON-.o from ${MID}/ABELMON-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ABELMON-.lsp" :output-file "ABELMON-.o"))' | ${DEPSYS} )
	@ cp ${MID}/ABELMON-.o ${OUT}/ABELMON-.o

@
<<ABELMON-.lsp (LISP from IN)>>=
${MID}/ABELMON-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELMON-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELMON-.NRLIB ; \
	rm -rf ${OUT}/ABELMON-.o ; \
	${SPADBIN}/notangle -R"ABELMON-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ABELMON-.lsp )

@
<<ABELMON.o (BOOTSTRAP from MID)>>=
${MID}/ABELMON.o: ${MID}/ABELMON.lsp
	@ echo 0 making ${MID}/ABELMON.o from ${MID}/ABELMON.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ABELMON.lsp" :output-file "ABELMON.o"))' | ${DEPSYS} )
	@ cp ${MID}/ABELMON.o ${OUT}/ABELMON.o

@
<<ABELMON.lsp (LISP from IN)>>=
${MID}/ABELMON.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELMON.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELMON.NRLIB ; \
	rm -rf ${OUT}/ABELMON.o ; \
	${SPADBIN}/notangle -R"ABELMON.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ABELMON.lsp )

@
<<ABELSG-.o (O from NRLIB)>>=
${OUT}/ABELSG-.o: ${MID}/ABELSG.NRLIB
	@ echo 0 making ${OUT}/ABELSG-.o from ${MID}/ABELSG-.NRLIB
	@ cp ${MID}/ABELSG-.NRLIB/code.o ${OUT}/ABELSG-.o

@
<<ABELSG-.NRLIB (NRLIB from MID)>>=
${MID}/ABELSG-.NRLIB: ${OUT}/TYPE.o ${MID}/ABELSG.spad 
	@ echo 0 making ${MID}/ABELSG-.NRLIB from ${MID}/ABELSG.spad
	@ (cd ${MID} ; 	echo ')co ABELSG.spad' | ${INTERPSYS} )

@
<<ABELSG.o (O from NRLIB)>>=
${OUT}/ABELSG.o: ${MID}/ABELSG.NRLIB
	@ echo 0 making ${OUT}/ABELSG.o from ${MID}/ABELSG.NRLIB
	@ cp ${MID}/ABELSG.NRLIB/code.o ${OUT}/ABELSG.o

@
<<ABELSG.NRLIB (NRLIB from MID)>>=
${MID}/ABELSG.NRLIB: ${MID}/ABELSG.spad
	@ echo 0 making ${MID}/ABELSG.NRLIB from ${MID}/ABELSG.spad
	@ (cd ${MID} ; 	echo ')co ABELSG.spad' | ${INTERPSYS} )

@
<<ABELSG.spad (SPAD from IN)>>=
${MID}/ABELSG.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELSG.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELSG.NRLIB ; \
	${SPADBIN}/notangle -R"category ABELSG AbelianSemiGroup" ${IN}/catdef.spad.pamphlet >ABELSG.spad )

@
<<ABELSG-.o (BOOTSTRAP from MID)>>=
${MID}/ABELSG-.o: ${MID}/ABELSG-.lsp 
	@ echo 0 making ${MID}/ABELSG-.o from ${MID}/ABELSG-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ABELSG-.lsp" :output-file "ABELSG-.o"))' | ${DEPSYS} )
	@ cp ${MID}/ABELSG-.o ${OUT}/ABELSG-.o

@
<<ABELSG-.lsp (LISP from IN)>>=
${MID}/ABELSG-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELSG-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELSG-.NRLIB ; \
	rm -rf ${OUT}/ABELSG-.o ; \
	${SPADBIN}/notangle -R"ABELSG-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ABELSG-.lsp )

@
<<ABELSG.o (BOOTSTRAP from MID)>>=
${MID}/ABELSG.o: ${MID}/ABELSG.lsp
	@ echo 0 making ${MID}/ABELSG.o from ${MID}/ABELSG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ABELSG.lsp" :output-file "ABELSG.o"))' | ${DEPSYS} )
	@ cp ${MID}/ABELSG.o ${OUT}/ABELSG.o

@
<<ABELSG.lsp (LISP from IN)>>=
${MID}/ABELSG.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ABELSG.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ABELSG.NRLIB ; \
	rm -rf ${OUT}/ABELSG.o ; \
	${SPADBIN}/notangle -R"ABELSG.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ABELSG.lsp )

@
<<ALGEBRA-.o (O from NRLIB)>>=
${OUT}/ALGEBRA-.o: ${MID}/ALGEBRA.NRLIB
	@ echo 0 making ${OUT}/ALGEBRA-.o from ${MID}/ALGEBRA-.NRLIB
	@ cp ${MID}/ALGEBRA-.NRLIB/code.o ${OUT}/ALGEBRA-.o

@
<<ALGEBRA-.NRLIB (NRLIB from MID)>>=
${MID}/ALGEBRA-.NRLIB: ${OUT}/BOOLEAN.o ${MID}/ALGEBRA.spad 
	@ echo 0 making ${MID}/ALGEBRA-.NRLIB from ${MID}/ALGEBRA.spad
	@ (cd ${MID} ; 	echo ')co ALGEBRA.spad' | ${INTERPSYS} )

@
<<ALGEBRA.o (O from NRLIB)>>=
${OUT}/ALGEBRA.o: ${MID}/ALGEBRA.NRLIB
	@ echo 0 making ${OUT}/ALGEBRA.o from ${MID}/ALGEBRA.NRLIB
	@ cp ${MID}/ALGEBRA.NRLIB/code.o ${OUT}/ALGEBRA.o

@
<<ALGEBRA.NRLIB (NRLIB from MID)>>=
${MID}/ALGEBRA.NRLIB: ${MID}/BOOLEAN.o ${MID}/ALGEBRA.spad
	@ echo 0 making ${MID}/ALGEBRA.NRLIB from ${MID}/ALGEBRA.spad
	@ (cd ${MID} ; 	echo ')co ALGEBRA.spad' | ${INTERPSYS} )

@
<<ALGEBRA.spad (SPAD from IN)>>=
${MID}/ALGEBRA.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ALGEBRA.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGEBRA.NRLIB ; \
	${SPADBIN}/notangle -R"category ALGEBRA Algebra" ${IN}/catdef.spad.pamphlet >ALGEBRA.spad )

@
<<BASTYPE-.o (O from NRLIB)>>=
${OUT}/BASTYPE-.o: ${MID}/BASTYPE.NRLIB
	@ echo 0 making ${OUT}/BASTYPE-.o from ${MID}/BASTYPE-.NRLIB
	@ cp ${MID}/BASTYPE-.NRLIB/code.o ${OUT}/BASTYPE-.o

@
<<BASTYPE-.NRLIB (NRLIB from MID)>>=
${MID}/BASTYPE-.NRLIB: ${OUT}/BOOLEAN.o ${MID}/BASTYPE.spad 
	@ echo 0 making ${MID}/BASTYPE-.NRLIB from ${MID}/BASTYPE.spad
	@ (cd ${MID} ; 	echo ')co BASTYPE.spad' | ${INTERPSYS} )

@
<<BASTYPE.o (O from NRLIB)>>=
${OUT}/BASTYPE.o: ${MID}/BASTYPE.NRLIB
	@ echo 0 making ${OUT}/BASTYPE.o from ${MID}/BASTYPE.NRLIB
	@ cp ${MID}/BASTYPE.NRLIB/code.o ${OUT}/BASTYPE.o

@
<<BASTYPE.NRLIB (NRLIB from MID)>>=
${MID}/BASTYPE.NRLIB: ${MID}/BOOLEAN.o ${MID}/BASTYPE.spad
	@ echo 0 making ${MID}/BASTYPE.NRLIB from ${MID}/BASTYPE.spad
	@ (cd ${MID} ; 	echo ')co BASTYPE.spad' | ${INTERPSYS} )

@
<<BASTYPE.spad (SPAD from IN)>>=
${MID}/BASTYPE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/BASTYPE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BASTYPE.NRLIB ; \
	${SPADBIN}/notangle -R"category BASTYPE BasicType" ${IN}/catdef.spad.pamphlet >BASTYPE.spad )

@
<<BMODULE.o (O from NRLIB)>>=
${OUT}/BMODULE.o: ${MID}/BMODULE.NRLIB
	@ echo 0 making ${OUT}/BMODULE.o from ${MID}/BMODULE.NRLIB
	@ cp ${MID}/BMODULE.NRLIB/code.o ${OUT}/BMODULE.o

@
<<BMODULE.NRLIB (NRLIB from MID)>>=
${MID}/BMODULE.NRLIB: ${MID}/BMODULE.spad
	@ echo 0 making ${MID}/BMODULE.NRLIB from ${MID}/BMODULE.spad
	@ (cd ${MID} ; 	echo ')co BMODULE.spad' | ${INTERPSYS} )

@
<<BMODULE.spad (SPAD from IN)>>=
${MID}/BMODULE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/BMODULE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BMODULE.NRLIB ; \
	${SPADBIN}/notangle -R"category BMODULE BiModule" ${IN}/catdef.spad.pamphlet >BMODULE.spad )

@
<<CABMON.o (O from NRLIB)>>=
${OUT}/CABMON.o: ${MID}/CABMON.NRLIB
	@ echo 0 making ${OUT}/CABMON.o from ${MID}/CABMON.NRLIB
	@ cp ${MID}/CABMON.NRLIB/code.o ${OUT}/CABMON.o

@
<<CABMON.NRLIB (NRLIB from MID)>>=
${MID}/CABMON.NRLIB: ${MID}/CABMON.spad
	@ echo 0 making ${MID}/CABMON.NRLIB from ${MID}/CABMON.spad
	@ (cd ${MID} ; 	echo ')co CABMON.spad' | ${INTERPSYS} )

@
<<CABMON.spad (SPAD from IN)>>=
${MID}/CABMON.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/CABMON.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CABMON.NRLIB ; \
	${SPADBIN}/notangle -R"category CABMON CancellationAbelianMonoid" ${IN}/catdef.spad.pamphlet >CABMON.spad )

@
<<CABMON.o (BOOTSTRAP from MID)>>=
${MID}/CABMON.o: ${MID}/CABMON.lsp
	@ echo 0 making ${MID}/CABMON.o from ${MID}/CABMON.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "CABMON.lsp" :output-file "CABMON.o"))' | ${DEPSYS} )
	@ cp ${MID}/CABMON.o ${OUT}/CABMON.o

@
<<CABMON.lsp (LISP from IN)>>=
${MID}/CABMON.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/CABMON.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CABMON.NRLIB ; \
	rm -rf ${OUT}/CABMON.o ; \
	${SPADBIN}/notangle -R"CABMON.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >CABMON.lsp )

@
<<CHARNZ.o (O from NRLIB)>>=
${OUT}/CHARNZ.o: ${MID}/CHARNZ.NRLIB
	@ echo 0 making ${OUT}/CHARNZ.o from ${MID}/CHARNZ.NRLIB
	@ cp ${MID}/CHARNZ.NRLIB/code.o ${OUT}/CHARNZ.o

@
<<CHARNZ.NRLIB (NRLIB from MID)>>=
${MID}/CHARNZ.NRLIB: ${MID}/CHARNZ.spad
	@ echo 0 making ${MID}/CHARNZ.NRLIB from ${MID}/CHARNZ.spad
	@ (cd ${MID} ; 	echo ')co CHARNZ.spad' | ${INTERPSYS} )

@
<<CHARNZ.spad (SPAD from IN)>>=
${MID}/CHARNZ.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/CHARNZ.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CHARNZ.NRLIB ; \
	${SPADBIN}/notangle -R"category CHARNZ CharacteristicNonZero" ${IN}/catdef.spad.pamphlet >CHARNZ.spad )

@
<<CHARZ.o (O from NRLIB)>>=
${OUT}/CHARZ.o: ${MID}/CHARZ.NRLIB
	@ echo 0 making ${OUT}/CHARZ.o from ${MID}/CHARZ.NRLIB
	@ cp ${MID}/CHARZ.NRLIB/code.o ${OUT}/CHARZ.o

@
<<CHARZ.NRLIB (NRLIB from MID)>>=
${MID}/CHARZ.NRLIB: ${MID}/CHARZ.spad
	@ echo 0 making ${MID}/CHARZ.NRLIB from ${MID}/CHARZ.spad
	@ (cd ${MID} ; 	echo ')co CHARZ.spad' | ${INTERPSYS} )

@
<<CHARZ.spad (SPAD from IN)>>=
${MID}/CHARZ.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/CHARZ.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CHARZ.NRLIB ; \
	${SPADBIN}/notangle -R"category CHARZ CharacteristicZero" ${IN}/catdef.spad.pamphlet >CHARZ.spad )

@
<<COMRING.o (O from NRLIB)>>=
${OUT}/COMRING.o: ${MID}/COMRING.NRLIB
	@ echo 0 making ${OUT}/COMRING.o from ${MID}/COMRING.NRLIB
	@ cp ${MID}/COMRING.NRLIB/code.o ${OUT}/COMRING.o

@
<<COMRING.NRLIB (NRLIB from MID)>>=
${MID}/COMRING.NRLIB: ${MID}/COMRING.spad
	@ echo 0 making ${MID}/COMRING.NRLIB from ${MID}/COMRING.spad
	@ (cd ${MID} ; 	echo ')co COMRING.spad' | ${INTERPSYS} )

@
<<COMRING.spad (SPAD from IN)>>=
${MID}/COMRING.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/COMRING.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMRING.NRLIB ; \
	${SPADBIN}/notangle -R"category COMRING CommutativeRing" ${IN}/catdef.spad.pamphlet >COMRING.spad )

@
<<COMRING.o (BOOTSTRAP from MID)>>=
${MID}/COMRING.o: ${MID}/COMRING.lsp
	@ echo 0 making ${MID}/COMRING.o from ${MID}/COMRING.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "COMRING.lsp" :output-file "COMRING.o"))' | ${DEPSYS} )
	@ cp ${MID}/COMRING.o ${OUT}/COMRING.o

@
<<COMRING.lsp (LISP from IN)>>=
${MID}/COMRING.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/COMRING.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMRING.NRLIB ; \
	rm -rf ${OUT}/COMRING.o ; \
	${SPADBIN}/notangle -R"COMRING.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >COMRING.lsp )

@
<<DIFEXT-.o (O from NRLIB)>>=
${OUT}/DIFEXT-.o: ${MID}/DIFEXT.NRLIB
	@ echo 0 making ${OUT}/DIFEXT-.o from ${MID}/DIFEXT-.NRLIB
	@ cp ${MID}/DIFEXT-.NRLIB/code.o ${OUT}/DIFEXT-.o

@
<<DIFEXT-.NRLIB (NRLIB from MID)>>=
${MID}/DIFEXT-.NRLIB: ${OUT}/TYPE.o ${MID}/DIFEXT.spad 
	@ echo 0 making ${MID}/DIFEXT-.NRLIB from ${MID}/DIFEXT.spad
	@ (cd ${MID} ; 	echo ')co DIFEXT.spad' | ${INTERPSYS} )

@
<<DIFEXT.o (O from NRLIB)>>=
${OUT}/DIFEXT.o: ${MID}/DIFEXT.NRLIB
	@ echo 0 making ${OUT}/DIFEXT.o from ${MID}/DIFEXT.NRLIB
	@ cp ${MID}/DIFEXT.NRLIB/code.o ${OUT}/DIFEXT.o

@
<<DIFEXT.NRLIB (NRLIB from MID)>>=
${MID}/DIFEXT.NRLIB: ${MID}/DIFEXT.spad
	@ echo 0 making ${MID}/DIFEXT.NRLIB from ${MID}/DIFEXT.spad
	@ (cd ${MID} ; 	echo ')co DIFEXT.spad' | ${INTERPSYS} )

@
<<DIFEXT.spad (SPAD from IN)>>=
${MID}/DIFEXT.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIFEXT.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIFEXT.NRLIB ; \
	${SPADBIN}/notangle -R"category DIFEXT DifferentialExtension" ${IN}/catdef.spad.pamphlet >DIFEXT.spad )

@
<<DIFRING-.o (O from NRLIB)>>=
${OUT}/DIFRING-.o: ${MID}/DIFRING.NRLIB
	@ echo 0 making ${OUT}/DIFRING-.o from ${MID}/DIFRING-.NRLIB
	@ cp ${MID}/DIFRING-.NRLIB/code.o ${OUT}/DIFRING-.o

@
<<DIFRING-.NRLIB (NRLIB from MID)>>=
${MID}/DIFRING-.NRLIB: ${OUT}/BOOLEAN.o ${MID}/DIFRING.spad 
	@ echo 0 making ${MID}/DIFRING-.NRLIB from ${MID}/DIFRING.spad
	@ (cd ${MID} ; 	echo ')co DIFRING.spad' | ${INTERPSYS} )

@
<<DIFRING.o (O from NRLIB)>>=
${OUT}/DIFRING.o: ${MID}/DIFRING.NRLIB
	@ echo 0 making ${OUT}/DIFRING.o from ${MID}/DIFRING.NRLIB
	@ cp ${MID}/DIFRING.NRLIB/code.o ${OUT}/DIFRING.o

@
<<DIFRING.NRLIB (NRLIB from MID)>>=
${MID}/DIFRING.NRLIB: ${MID}/DIFRING.spad
	@ echo 0 making ${MID}/DIFRING.NRLIB from ${MID}/DIFRING.spad
	@ (cd ${MID} ; 	echo ')co DIFRING.spad' | ${INTERPSYS} )

@
<<DIFRING.spad (SPAD from IN)>>=
${MID}/DIFRING.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIFRING.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIFRING.NRLIB ; \
	${SPADBIN}/notangle -R"category DIFRING DifferentialRing" ${IN}/catdef.spad.pamphlet >DIFRING.spad )

@
<<DIFRING-.o (BOOTSTRAP from MID)>>=
${MID}/DIFRING-.o: ${MID}/DIFRING-.lsp 
	@ echo 0 making ${MID}/DIFRING-.o from ${MID}/DIFRING-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "DIFRING-.lsp" :output-file "DIFRING-.o"))' | ${DEPSYS} )
	@ cp ${MID}/DIFRING-.o ${OUT}/DIFRING-.o

@
<<DIFRING-.lsp (LISP from IN)>>=
${MID}/DIFRING-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIFRING-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIFRING-.NRLIB ; \
	rm -rf ${OUT}/DIFRING-.o ; \
	${SPADBIN}/notangle -R"DIFRING-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >DIFRING-.lsp )

@
<<DIFRING.o (BOOTSTRAP from MID)>>=
${MID}/DIFRING.o: ${MID}/DIFRING.lsp
	@ echo 0 making ${MID}/DIFRING.o from ${MID}/DIFRING.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "DIFRING.lsp" :output-file "DIFRING.o"))' | ${DEPSYS} )
	@ cp ${MID}/DIFRING.o ${OUT}/DIFRING.o

@
<<DIFRING.lsp (LISP from IN)>>=
${MID}/DIFRING.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIFRING.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIFRING.NRLIB ; \
	rm -rf ${OUT}/DIFRING.o ; \
	${SPADBIN}/notangle -R"DIFRING.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >DIFRING.lsp )

@
<<DIVRING-.o (O from NRLIB)>>=
${OUT}/DIVRING-.o: ${MID}/DIVRING.NRLIB
	@ echo 0 making ${OUT}/DIVRING-.o from ${MID}/DIVRING-.NRLIB
	@ cp ${MID}/DIVRING-.NRLIB/code.o ${OUT}/DIVRING-.o

@
<<DIVRING-.NRLIB (NRLIB from MID)>>=
${MID}/DIVRING-.NRLIB: ${OUT}/TYPE.o ${MID}/DIVRING.spad 
	@ echo 0 making ${MID}/DIVRING-.NRLIB from ${MID}/DIVRING.spad
	@ (cd ${MID} ; 	echo ')co DIVRING.spad' | ${INTERPSYS} )

@
<<DIVRING.o (O from NRLIB)>>=
${OUT}/DIVRING.o: ${MID}/DIVRING.NRLIB
	@ echo 0 making ${OUT}/DIVRING.o from ${MID}/DIVRING.NRLIB
	@ cp ${MID}/DIVRING.NRLIB/code.o ${OUT}/DIVRING.o

@
<<DIVRING.NRLIB (NRLIB from MID)>>=
${MID}/DIVRING.NRLIB: ${MID}/DIVRING.spad
	@ echo 0 making ${MID}/DIVRING.NRLIB from ${MID}/DIVRING.spad
	@ (cd ${MID} ; 	echo ')co DIVRING.spad' | ${INTERPSYS} )

@
<<DIVRING.spad (SPAD from IN)>>=
${MID}/DIVRING.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIVRING.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIVRING.NRLIB ; \
	${SPADBIN}/notangle -R"category DIVRING DivisionRing" ${IN}/catdef.spad.pamphlet >DIVRING.spad )

@
<<DIVRING-.o (BOOTSTRAP from MID)>>=
${MID}/DIVRING-.o: ${MID}/DIVRING-.lsp 
	@ echo 0 making ${MID}/DIVRING-.o from ${MID}/DIVRING-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "DIVRING-.lsp" :output-file "DIVRING-.o"))' | ${DEPSYS} )
	@ cp ${MID}/DIVRING-.o ${OUT}/DIVRING-.o

@
<<DIVRING-.lsp (LISP from IN)>>=
${MID}/DIVRING-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIVRING-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIVRING-.NRLIB ; \
	rm -rf ${OUT}/DIVRING-.o ; \
	${SPADBIN}/notangle -R"DIVRING-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >DIVRING-.lsp )

@
<<DIVRING.o (BOOTSTRAP from MID)>>=
${MID}/DIVRING.o: ${MID}/DIVRING.lsp 
	@ echo 0 making ${MID}/DIVRING.o from ${MID}/DIVRING.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "DIVRING.lsp" :output-file "DIVRING.o"))' | ${DEPSYS} )
	@ cp ${MID}/DIVRING.o ${OUT}/DIVRING.o

@
<<DIVRING.lsp (LISP from IN)>>=
${MID}/DIVRING.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/DIVRING.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIVRING.NRLIB ; \
	rm -rf ${OUT}/DIVRING.o ; \
	${SPADBIN}/notangle -R"DIVRING.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >DIVRING.lsp )

@
<<ENTIRER.o (O from NRLIB)>>=
${OUT}/ENTIRER.o: ${MID}/ENTIRER.NRLIB
	@ echo 0 making ${OUT}/ENTIRER.o from ${MID}/ENTIRER.NRLIB
	@ cp ${MID}/ENTIRER.NRLIB/code.o ${OUT}/ENTIRER.o

@
<<ENTIRER.NRLIB (NRLIB from MID)>>=
${MID}/ENTIRER.NRLIB: ${MID}/ENTIRER.spad
	@ echo 0 making ${MID}/ENTIRER.NRLIB from ${MID}/ENTIRER.spad
	@ (cd ${MID} ; 	echo ')co ENTIRER.spad' | ${INTERPSYS} )

@
<<ENTIRER.spad (SPAD from IN)>>=
${MID}/ENTIRER.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ENTIRER.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ENTIRER.NRLIB ; \
	${SPADBIN}/notangle -R"category ENTIRER CommutativeRing" ${IN}/catdef.spad.pamphlet >ENTIRER.spad )

@
<<ENTIRER.o (BOOTSTRAP from MID)>>=
${MID}/ENTIRER.o: ${MID}/ENTIRER.lsp
	@ echo 0 making ${MID}/ENTIRER.o from ${MID}/ENTIRER.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ENTIRER.lsp" :output-file "ENTIRER.o"))' | ${DEPSYS} )
	@ cp ${MID}/ENTIRER.o ${OUT}/ENTIRER.o

@
<<ENTIRER.lsp (LISP from IN)>>=
${MID}/ENTIRER.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ENTIRER.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ENTIRER.NRLIB ; \
	rm -rf ${OUT}/ENTIRER.o ; \
	${SPADBIN}/notangle -R"ENTIRER.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ENTIRER.lsp )

@
<<EUCDOM-.o (O from NRLIB)>>=
${OUT}/EUCDOM-.o: ${MID}/EUCDOM.NRLIB
	@ echo 0 making ${OUT}/EUCDOM-.o from ${MID}/EUCDOM-.NRLIB
	@ cp ${MID}/EUCDOM-.NRLIB/code.o ${OUT}/EUCDOM-.o

@
<<EUCDOM-.NRLIB (NRLIB from MID)>>=
${MID}/EUCDOM-.NRLIB: ${OUT}/TYPE.o ${MID}/EUCDOM.spad 
	@ echo 0 making ${MID}/EUCDOM-.NRLIB from ${MID}/EUCDOM.spad
	@ (cd ${MID} ; 	echo ')co EUCDOM.spad' | ${INTERPSYS} )

@
<<EUCDOM.o (O from NRLIB)>>=
${OUT}/EUCDOM.o: ${MID}/EUCDOM.NRLIB
	@ echo 0 making ${OUT}/EUCDOM.o from ${MID}/EUCDOM.NRLIB
	@ cp ${MID}/EUCDOM.NRLIB/code.o ${OUT}/EUCDOM.o

@
<<EUCDOM.NRLIB (NRLIB from MID)>>=
${MID}/EUCDOM.NRLIB: ${MID}/EUCDOM.spad
	@ echo 0 making ${MID}/EUCDOM.NRLIB from ${MID}/EUCDOM.spad
	@ (cd ${MID} ; 	echo ')co EUCDOM.spad' | ${INTERPSYS} )

@
<<EUCDOM.spad (SPAD from IN)>>=
${MID}/EUCDOM.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/EUCDOM.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EUCDOM.NRLIB ; \
	${SPADBIN}/notangle -R"category EUCDOM EuclideanDomain" ${IN}/catdef.spad.pamphlet >EUCDOM.spad )

@
<<EUCDOM-.o (BOOTSTRAP from MID)>>=
${MID}/EUCDOM-.o: ${MID}/EUCDOM-.lsp 
	@ echo 0 making ${MID}/EUCDOM-.o from ${MID}/EUCDOM-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "EUCDOM-.lsp" :output-file "EUCDOM-.o"))' | ${DEPSYS} )
	@ cp ${MID}/EUCDOM-.o ${OUT}/EUCDOM-.o

@
<<EUCDOM-.lsp (LISP from IN)>>=
${MID}/EUCDOM-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/EUCDOM-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EUCDOM-.NRLIB ; \
	rm -rf ${OUT}/EUCDOM-.o ; \
	${SPADBIN}/notangle -R"EUCDOM-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >EUCDOM-.lsp )

@
<<EUCDOM.o (BOOTSTRAP from MID)>>=
${MID}/EUCDOM.o: ${MID}/EUCDOM.lsp
	@ echo 0 making ${MID}/EUCDOM.o from ${MID}/EUCDOM.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "EUCDOM.lsp" :output-file "EUCDOM.o"))' | ${DEPSYS} )
	@ cp ${MID}/EUCDOM.o ${OUT}/EUCDOM.o

@
<<EUCDOM.lsp (LISP from IN)>>=
${MID}/EUCDOM.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/EUCDOM.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EUCDOM.NRLIB ; \
	rm -rf ${OUT}/EUCDOM.o ; \
	${SPADBIN}/notangle -R"EUCDOM.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >EUCDOM.lsp )

@
<<FIELD-.o (O from NRLIB)>>=
${OUT}/FIELD-.o: ${MID}/FIELD.NRLIB
	@ echo 0 making ${OUT}/FIELD-.o from ${MID}/FIELD-.NRLIB
	@ cp ${MID}/FIELD-.NRLIB/code.o ${OUT}/FIELD-.o

@
<<FIELD-.NRLIB (NRLIB from MID)>>=
${MID}/FIELD-.NRLIB: ${OUT}/TYPE.o ${MID}/FIELD.spad 
	@ echo 0 making ${MID}/FIELD-.NRLIB from ${MID}/FIELD.spad
	@ (cd ${MID} ; 	echo ')co FIELD.spad' | ${INTERPSYS} )

@
<<FIELD.o (O from NRLIB)>>=
${OUT}/FIELD.o: ${MID}/FIELD.NRLIB
	@ echo 0 making ${OUT}/FIELD.o from ${MID}/FIELD.NRLIB
	@ cp ${MID}/FIELD.NRLIB/code.o ${OUT}/FIELD.o

@
<<FIELD.NRLIB (NRLIB from MID)>>=
${MID}/FIELD.NRLIB: ${MID}/FIELD.spad
	@ echo 0 making ${MID}/FIELD.NRLIB from ${MID}/FIELD.spad
	@ (cd ${MID} ; 	echo ')co FIELD.spad' | ${INTERPSYS} )

@
<<FIELD.spad (SPAD from IN)>>=
${MID}/FIELD.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/FIELD.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FIELD.NRLIB ; \
	${SPADBIN}/notangle -R"category FIELD Field" ${IN}/catdef.spad.pamphlet >FIELD.spad )

@
<<FINITE.o (O from NRLIB)>>=
${OUT}/FINITE.o: ${MID}/FINITE.NRLIB
	@ echo 0 making ${OUT}/FINITE.o from ${MID}/FINITE.NRLIB
	@ cp ${MID}/FINITE.NRLIB/code.o ${OUT}/FINITE.o

@
<<FINITE.NRLIB (NRLIB from MID)>>=
${MID}/FINITE.NRLIB: ${MID}/FINITE.spad
	@ echo 0 making ${MID}/FINITE.NRLIB from ${MID}/FINITE.spad
	@ (cd ${MID} ; 	echo ')co FINITE.spad' | ${INTERPSYS} )

@
<<FINITE.spad (SPAD from IN)>>=
${MID}/FINITE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/FINITE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FINITE.NRLIB ; \
	${SPADBIN}/notangle -R"category FINITE Finite" ${IN}/catdef.spad.pamphlet >FINITE.spad )

@
<<FLINEXP-.o (O from NRLIB)>>=
${OUT}/FLINEXP-.o: ${MID}/FLINEXP.NRLIB
	@ echo 0 making ${OUT}/FLINEXP-.o from ${MID}/FLINEXP-.NRLIB
	@ cp ${MID}/FLINEXP-.NRLIB/code.o ${OUT}/FLINEXP-.o

@
<<FLINEXP-.NRLIB (NRLIB from MID)>>=
${MID}/FLINEXP-.NRLIB: ${OUT}/TYPE.o ${MID}/FLINEXP.spad 
	@ echo 0 making ${MID}/FLINEXP-.NRLIB from ${MID}/FLINEXP.spad
	@ (cd ${MID} ; 	echo ')co FLINEXP.spad' | ${INTERPSYS} )

@
<<FLINEXP.o (O from NRLIB)>>=
${OUT}/FLINEXP.o: ${MID}/FLINEXP.NRLIB
	@ echo 0 making ${OUT}/FLINEXP.o from ${MID}/FLINEXP.NRLIB
	@ cp ${MID}/FLINEXP.NRLIB/code.o ${OUT}/FLINEXP.o

@
<<FLINEXP.NRLIB (NRLIB from MID)>>=
${MID}/FLINEXP.NRLIB: ${MID}/FLINEXP.spad
	@ echo 0 making ${MID}/FLINEXP.NRLIB from ${MID}/FLINEXP.spad
	@ (cd ${MID} ; 	echo ')co FLINEXP.spad' | ${INTERPSYS} )

@
<<FLINEXP.spad (SPAD from IN)>>=
${MID}/FLINEXP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/FLINEXP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLINEXP.NRLIB ; \
	${SPADBIN}/notangle -R"category FLINEXP FullyLinearlyExplicitRingOver" ${IN}/catdef.spad.pamphlet >FLINEXP.spad )

@
<<GCDDOM-.o (O from NRLIB)>>=
${OUT}/GCDDOM-.o: ${MID}/GCDDOM.NRLIB
	@ echo 0 making ${OUT}/GCDDOM-.o from ${MID}/GCDDOM-.NRLIB
	@ cp ${MID}/GCDDOM-.NRLIB/code.o ${OUT}/GCDDOM-.o

@
<<GCDDOM-.NRLIB (NRLIB from MID)>>=
${MID}/GCDDOM-.NRLIB: ${OUT}/TYPE.o ${MID}/GCDDOM.spad 
	@ echo 0 making ${MID}/GCDDOM-.NRLIB from ${MID}/GCDDOM.spad
	@ (cd ${MID} ; 	echo ')co GCDDOM.spad' | ${INTERPSYS} )

@
<<GCDDOM.o (O from NRLIB)>>=
${OUT}/GCDDOM.o: ${MID}/GCDDOM.NRLIB
	@ echo 0 making ${OUT}/GCDDOM.o from ${MID}/GCDDOM.NRLIB
	@ cp ${MID}/GCDDOM.NRLIB/code.o ${OUT}/GCDDOM.o

@
<<GCDDOM.NRLIB (NRLIB from MID)>>=
${MID}/GCDDOM.NRLIB: ${MID}/GCDDOM.spad
	@ echo 0 making ${MID}/GCDDOM.NRLIB from ${MID}/GCDDOM.spad
	@ (cd ${MID} ; 	echo ')co GCDDOM.spad' | ${INTERPSYS} )

@
<<GCDDOM.spad (SPAD from IN)>>=
${MID}/GCDDOM.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/GCDDOM.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GCDDOM.NRLIB ; \
	${SPADBIN}/notangle -R"category GCDDOM GcdDomain" ${IN}/catdef.spad.pamphlet >GCDDOM.spad )

@
<<GCDDOM-.o (BOOTSTRAP from MID)>>=
${MID}/GCDDOM-.o: ${MID}/GCDDOM-.lsp 
	@ echo 0 making ${MID}/GCDDOM-.o from ${MID}/GCDDOM-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "GCDDOM-.lsp" :output-file "GCDDOM-.o"))' | ${DEPSYS} )
	@ cp ${MID}/GCDDOM-.o ${OUT}/GCDDOM-.o

@
<<GCDDOM-.lsp (LISP from IN)>>=
${MID}/GCDDOM-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/GCDDOM-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GCDDOM-.NRLIB ; \
	rm -rf ${OUT}/GCDDOM-.o ; \
	${SPADBIN}/notangle -R"GCDDOM-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >GCDDOM-.lsp )

@
<<GCDDOM.o (BOOTSTRAP from MID)>>=
${MID}/GCDDOM.o: ${MID}/GCDDOM.lsp
	@ echo 0 making ${MID}/GCDDOM.o from ${MID}/GCDDOM.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "GCDDOM.lsp" :output-file "GCDDOM.o"))' | ${DEPSYS} )
	@ cp ${MID}/GCDDOM.o ${OUT}/GCDDOM.o

@
<<GCDDOM.lsp (LISP from IN)>>=
${MID}/GCDDOM.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/GCDDOM.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GCDDOM.NRLIB ; \
	rm -rf ${OUT}/GCDDOM.o ; \
	${SPADBIN}/notangle -R"GCDDOM.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >GCDDOM.lsp )

@
<<GROUP-.o (O from NRLIB)>>=
${OUT}/GROUP-.o: ${MID}/GROUP.NRLIB
	@ echo 0 making ${OUT}/GROUP-.o from ${MID}/GROUP-.NRLIB
	@ cp ${MID}/GROUP-.NRLIB/code.o ${OUT}/GROUP-.o

@
<<GROUP-.NRLIB (NRLIB from MID)>>=
${MID}/GROUP-.NRLIB: ${OUT}/TYPE.o ${MID}/GROUP.spad 
	@ echo 0 making ${MID}/GROUP-.NRLIB from ${MID}/GROUP.spad
	@ (cd ${MID} ; 	echo ')co GROUP.spad' | ${INTERPSYS} )

@
<<GROUP.o (O from NRLIB)>>=
${OUT}/GROUP.o: ${MID}/GROUP.NRLIB
	@ echo 0 making ${OUT}/GROUP.o from ${MID}/GROUP.NRLIB
	@ cp ${MID}/GROUP.NRLIB/code.o ${OUT}/GROUP.o

@
<<GROUP.NRLIB (NRLIB from MID)>>=
${MID}/GROUP.NRLIB: ${MID}/GROUP.spad
	@ echo 0 making ${MID}/GROUP.NRLIB from ${MID}/GROUP.spad
	@ (cd ${MID} ; 	echo ')co GROUP.spad' | ${INTERPSYS} )

@
<<GROUP.spad (SPAD from IN)>>=
${MID}/GROUP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/GROUP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GROUP.NRLIB ; \
	${SPADBIN}/notangle -R"category GROUP Group" ${IN}/catdef.spad.pamphlet >GROUP.spad )

@
<<INTDOM-.o (O from NRLIB)>>=
${OUT}/INTDOM-.o: ${MID}/INTDOM.NRLIB
	@ echo 0 making ${OUT}/INTDOM-.o from ${MID}/INTDOM-.NRLIB
	@ cp ${MID}/INTDOM-.NRLIB/code.o ${OUT}/INTDOM-.o

@
<<INTDOM-.NRLIB (NRLIB from MID)>>=
${MID}/INTDOM-.NRLIB: ${OUT}/TYPE.o ${MID}/INTDOM.spad 
	@ echo 0 making ${MID}/INTDOM-.NRLIB from ${MID}/INTDOM.spad
	@ (cd ${MID} ; 	echo ')co INTDOM.spad' | ${INTERPSYS} )

@
<<INTDOM.o (O from NRLIB)>>=
${OUT}/INTDOM.o: ${MID}/INTDOM.NRLIB
	@ echo 0 making ${OUT}/INTDOM.o from ${MID}/INTDOM.NRLIB
	@ cp ${MID}/INTDOM.NRLIB/code.o ${OUT}/INTDOM.o

@
<<INTDOM.NRLIB (NRLIB from MID)>>=
${MID}/INTDOM.NRLIB: ${MID}/INTDOM.spad
	@ echo 0 making ${MID}/INTDOM.NRLIB from ${MID}/INTDOM.spad
	@ (cd ${MID} ; 	echo ')co INTDOM.spad' | ${INTERPSYS} )

@
<<INTDOM.spad (SPAD from IN)>>=
${MID}/INTDOM.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/INTDOM.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTDOM.NRLIB ; \
	${SPADBIN}/notangle -R"category INTDOM IntegralDomain" ${IN}/catdef.spad.pamphlet >INTDOM.spad )

@
<<INTDOM-.o (BOOTSTRAP from MID)>>=
${MID}/INTDOM-.o: ${MID}/INTDOM-.lsp 
	@ echo 0 making ${MID}/INTDOM-.o from ${MID}/INTDOM-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "INTDOM-.lsp" :output-file "INTDOM-.o"))' | ${DEPSYS} )
	@ cp ${MID}/INTDOM-.o ${OUT}/INTDOM-.o

@
<<INTDOM-.lsp (LISP from IN)>>=
${MID}/INTDOM-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/INTDOM-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTDOM-.NRLIB ; \
	rm -rf ${OUT}/INTDOM-.o ; \
	${SPADBIN}/notangle -R"INTDOM-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >INTDOM-.lsp )

@
<<INTDOM.o (BOOTSTRAP from MID)>>=
${MID}/INTDOM.o: ${MID}/INTDOM.lsp
	@ echo 0 making ${MID}/INTDOM.o from ${MID}/INTDOM.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "INTDOM.lsp" :output-file "INTDOM.o"))' | ${DEPSYS} )
	@ cp ${MID}/INTDOM.o ${OUT}/INTDOM.o

@
<<INTDOM.lsp (LISP from IN)>>=
${MID}/INTDOM.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/INTDOM.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTDOM.NRLIB ; \
	rm -rf ${OUT}/INTDOM.o ; \
	${SPADBIN}/notangle -R"INTDOM.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >INTDOM.lsp )

@
<<LINEXP.o (O from NRLIB)>>=
${OUT}/LINEXP.o: ${MID}/LINEXP.NRLIB
	@ echo 0 making ${OUT}/LINEXP.o from ${MID}/LINEXP.NRLIB
	@ cp ${MID}/LINEXP.NRLIB/code.o ${OUT}/LINEXP.o

@
<<LINEXP.NRLIB (NRLIB from MID)>>=
${MID}/LINEXP.NRLIB: ${MID}/LINEXP.spad
	@ echo 0 making ${MID}/LINEXP.NRLIB from ${MID}/LINEXP.spad
	@ (cd ${MID} ; 	echo ')co LINEXP.spad' | ${INTERPSYS} )

@
<<LINEXP.spad (SPAD from IN)>>=
${MID}/LINEXP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/LINEXP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LINEXP.NRLIB ; \
	${SPADBIN}/notangle -R"category LINEXP LinearlyExplicitRingOver" ${IN}/catdef.spad.pamphlet >LINEXP.spad )

@
<<LMODULE.o (O from NRLIB)>>=
${OUT}/LMODULE.o: ${MID}/LMODULE.NRLIB
	@ echo 0 making ${OUT}/LMODULE.o from ${MID}/LMODULE.NRLIB
	@ cp ${MID}/LMODULE.NRLIB/code.o ${OUT}/LMODULE.o

@
<<LMODULE.NRLIB (NRLIB from MID)>>=
${MID}/LMODULE.NRLIB: ${OUT}/TYPE.o ${MID}/LMODULE.spad
	@ echo 0 making ${MID}/LMODULE.NRLIB from ${MID}/LMODULE.spad
	@ (cd ${MID} ; 	echo ')co LMODULE.spad' | ${INTERPSYS} )

@
<<LMODULE.spad (SPAD from IN)>>=
${MID}/LMODULE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/LMODULE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LMODULE.NRLIB ; \
	${SPADBIN}/notangle -R"category LMODULE LeftModule" ${IN}/catdef.spad.pamphlet >LMODULE.spad )

@
<<MONOID-.o (O from NRLIB)>>=
${OUT}/MONOID-.o: ${MID}/MONOID.NRLIB
	@ echo 0 making ${OUT}/MONOID-.o from ${MID}/MONOID-.NRLIB
	@ cp ${MID}/MONOID-.NRLIB/code.o ${OUT}/MONOID-.o

@
<<MONOID-.NRLIB (NRLIB from MID)>>=
${MID}/MONOID-.NRLIB: ${OUT}/TYPE.o ${MID}/MONOID.spad 
	@ echo 0 making ${MID}/MONOID-.NRLIB from ${MID}/MONOID.spad
	@ (cd ${MID} ; 	echo ')co MONOID.spad' | ${INTERPSYS} )

@
<<MONOID.o (O from NRLIB)>>=
${OUT}/MONOID.o: ${MID}/MONOID.NRLIB
	@ echo 0 making ${OUT}/MONOID.o from ${MID}/MONOID.NRLIB
	@ cp ${MID}/MONOID.NRLIB/code.o ${OUT}/MONOID.o

@
<<MONOID.NRLIB (NRLIB from MID)>>=
${MID}/MONOID.NRLIB: ${OUT}/TYPE.o ${MID}/MONOID.spad
	@ echo 0 making ${MID}/MONOID.NRLIB from ${MID}/MONOID.spad
	@ (cd ${MID} ; 	echo ')co MONOID.spad' | ${INTERPSYS} )

@
<<MONOID.spad (SPAD from IN)>>=
${MID}/MONOID.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/MONOID.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONOID.NRLIB ; \
	${SPADBIN}/notangle -R"category MONOID Monoid" ${IN}/catdef.spad.pamphlet >MONOID.spad )

@
<<MONOID-.o (BOOTSTRAP from MID)>>=
${MID}/MONOID-.o: ${MID}/MONOID-.lsp 
	@ echo 0 making ${MID}/MONOID-.o from ${MID}/MONOID-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "MONOID-.lsp" :output-file "MONOID-.o"))' | ${DEPSYS} )
	@ cp ${MID}/MONOID-.o ${OUT}/MONOID-.o

@
<<MONOID-.lsp (LISP from IN)>>=
${MID}/MONOID-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/MONOID-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONOID-.NRLIB ; \
	rm -rf ${OUT}/MONOID-.o ; \
	${SPADBIN}/notangle -R"MONOID-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >MONOID-.lsp )

@
<<MONOID.o (BOOTSTRAP from MID)>>=
${MID}/MONOID.o: ${MID}/MONOID.lsp
	@ echo 0 making ${MID}/MONOID.o from ${MID}/MONOID.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "MONOID.lsp" :output-file "MONOID.o"))' | ${DEPSYS} )
	@ cp ${MID}/MONOID.o ${OUT}/MONOID.o

@
<<MONOID.lsp (LISP from IN)>>=
${MID}/MONOID.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/MONOID.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONOID.NRLIB ; \
	rm -rf ${OUT}/MONOID.o ; \
	${SPADBIN}/notangle -R"MONOID.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >MONOID.lsp )

@
<<MODULE-.o (O from NRLIB)>>=
${OUT}/MODULE-.o: ${MID}/MODULE.NRLIB
	@ echo 0 making ${OUT}/MODULE-.o from ${MID}/MODULE-.NRLIB
	@ cp ${MID}/MODULE-.NRLIB/code.o ${OUT}/MODULE-.o

@
<<MODULE-.NRLIB (NRLIB from MID)>>=
${MID}/MODULE-.NRLIB: ${OUT}/TYPE.o ${MID}/MODULE.spad 
	@ echo 0 making ${MID}/MODULE-.NRLIB from ${MID}/MODULE.spad
	@ (cd ${MID} ; 	echo ')co MODULE.spad' | ${INTERPSYS} )

@
<<MODULE.o (O from NRLIB)>>=
${OUT}/MODULE.o: ${MID}/MODULE.NRLIB
	@ echo 0 making ${OUT}/MODULE.o from ${MID}/MODULE.NRLIB
	@ cp ${MID}/MODULE.NRLIB/code.o ${OUT}/MODULE.o

@
<<MODULE.NRLIB (NRLIB from MID)>>=
${MID}/MODULE.NRLIB: ${MID}/MODULE.spad
	@ echo 0 making ${MID}/MODULE.NRLIB from ${MID}/MODULE.spad
	@ (cd ${MID} ; 	echo ')co MODULE.spad' | ${INTERPSYS} )

@
<<MODULE.spad (SPAD from IN)>>=
${MID}/MODULE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/MODULE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MODULE.NRLIB ; \
	${SPADBIN}/notangle -R"category MODULE Module" ${IN}/catdef.spad.pamphlet >MODULE.spad )

@
<<OCAMON.o (O from NRLIB)>>=
${OUT}/OCAMON.o: ${MID}/OCAMON.NRLIB
	@ echo 0 making ${OUT}/OCAMON.o from ${MID}/OCAMON.NRLIB
	@ cp ${MID}/OCAMON.NRLIB/code.o ${OUT}/OCAMON.o

@
<<OCAMON.NRLIB (NRLIB from MID)>>=
${MID}/OCAMON.NRLIB: ${OUT}/TYPE.o ${MID}/OCAMON.spad
	@ echo 0 making ${MID}/OCAMON.NRLIB from ${MID}/OCAMON.spad
	@ (cd ${MID} ; 	echo ')co OCAMON.spad' | ${INTERPSYS} )

@
<<OCAMON.spad (SPAD from IN)>>=
${MID}/OCAMON.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OCAMON.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OCAMON.NRLIB ; \
	${SPADBIN}/notangle -R"category OCAMON OrderedCancellationAbelianMonoid" ${IN}/catdef.spad.pamphlet >OCAMON.spad )

@
<<OAGROUP.o (O from NRLIB)>>=
${OUT}/OAGROUP.o: ${MID}/OAGROUP.NRLIB
	@ echo 0 making ${OUT}/OAGROUP.o from ${MID}/OAGROUP.NRLIB
	@ cp ${MID}/OAGROUP.NRLIB/code.o ${OUT}/OAGROUP.o

@
<<OAGROUP.NRLIB (NRLIB from MID)>>=
${MID}/OAGROUP.NRLIB: ${MID}/OAGROUP.spad
	@ echo 0 making ${MID}/OAGROUP.NRLIB from ${MID}/OAGROUP.spad
	@ (cd ${MID} ; 	echo ')co OAGROUP.spad' | ${INTERPSYS} )

@
<<OAGROUP.spad (SPAD from IN)>>=
${MID}/OAGROUP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OAGROUP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OAGROUP.NRLIB ; \
	${SPADBIN}/notangle -R"category OAGROUP OrderedAbelianGroup" ${IN}/catdef.spad.pamphlet >OAGROUP.spad )

@
<<OAMON.o (O from NRLIB)>>=
${OUT}/OAMON.o: ${MID}/OAMON.NRLIB
	@ echo 0 making ${OUT}/OAMON.o from ${MID}/OAMON.NRLIB
	@ cp ${MID}/OAMON.NRLIB/code.o ${OUT}/OAMON.o

@
<<OAMON.NRLIB (NRLIB from MID)>>=
${MID}/OAMON.NRLIB: ${OUT}/TYPE.o ${MID}/OAMON.spad
	@ echo 0 making ${MID}/OAMON.NRLIB from ${MID}/OAMON.spad
	@ (cd ${MID} ; 	echo ')co OAMON.spad' | ${INTERPSYS} )

@
<<OAMON.spad (SPAD from IN)>>=
${MID}/OAMON.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OAMON.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OAMON.NRLIB ; \
	${SPADBIN}/notangle -R"category OAMON OrderedAbelianMonoid" ${IN}/catdef.spad.pamphlet >OAMON.spad )

@
<<OAMONS.o (O from NRLIB)>>=
${OUT}/OAMONS.o: ${MID}/OAMONS.NRLIB
	@ echo 0 making ${OUT}/OAMONS.o from ${MID}/OAMONS.NRLIB
	@ cp ${MID}/OAMONS.NRLIB/code.o ${OUT}/OAMONS.o

@
<<OAMONS.NRLIB (NRLIB from MID)>>=
${MID}/OAMONS.NRLIB: ${OUT}/TYPE.o ${MID}/OAMONS.spad
	@ echo 0 making ${MID}/OAMONS.NRLIB from ${MID}/OAMONS.spad
	@ (cd ${MID} ; 	echo ')co OAMONS.spad' | ${INTERPSYS} )

@
<<OAMONS.spad (SPAD from IN)>>=
${MID}/OAMONS.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OAMONS.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OAMONS.NRLIB ; \
	${SPADBIN}/notangle -R"category OAMONS OrderedAbelianMonoidSup" ${IN}/catdef.spad.pamphlet >OAMONS.spad )

@
<<OASGP.o (O from NRLIB)>>=
${OUT}/OASGP.o: ${MID}/OASGP.NRLIB
	@ echo 0 making ${OUT}/OASGP.o from ${MID}/OASGP.NRLIB
	@ cp ${MID}/OASGP.NRLIB/code.o ${OUT}/OASGP.o

@
<<OASGP.NRLIB (NRLIB from MID)>>=
${MID}/OASGP.NRLIB: ${OUT}/TYPE.o ${MID}/OASGP.spad
	@ echo 0 making ${MID}/OASGP.NRLIB from ${MID}/OASGP.spad
	@ (cd ${MID} ; 	echo ')co OASGP.spad' | ${INTERPSYS} )

@
<<OASGP.spad (SPAD from IN)>>=
${MID}/OASGP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OASGP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OASGP.NRLIB ; \
	${SPADBIN}/notangle -R"category OASGP OrderedAbelianSemiGroup" ${IN}/catdef.spad.pamphlet >OASGP.spad )

@
<<ORDFIN.o (O from NRLIB)>>=
${OUT}/ORDFIN.o: ${MID}/ORDFIN.NRLIB
	@ echo 0 making ${OUT}/ORDFIN.o from ${MID}/ORDFIN.NRLIB
	@ cp ${MID}/ORDFIN.NRLIB/code.o ${OUT}/ORDFIN.o

@
<<ORDFIN.NRLIB (NRLIB from MID)>>=
${MID}/ORDFIN.NRLIB: ${OUT}/TYPE.o ${MID}/ORDFIN.spad
	@ echo 0 making ${MID}/ORDFIN.NRLIB from ${MID}/ORDFIN.spad
	@ (cd ${MID} ; 	echo ')co ORDFIN.spad' | ${INTERPSYS} )

@
<<ORDFIN.spad (SPAD from IN)>>=
${MID}/ORDFIN.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ORDFIN.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDFIN.NRLIB ; \
	${SPADBIN}/notangle -R"category ORDFIN OrderedFinite" ${IN}/catdef.spad.pamphlet >ORDFIN.spad )

@
<<OINTDOM.o (O from NRLIB)>>=
${OUT}/OINTDOM.o: ${MID}/OINTDOM.NRLIB
	@ echo 0 making ${OUT}/OINTDOM.o from ${MID}/OINTDOM.NRLIB
	@ cp ${MID}/OINTDOM.NRLIB/code.o ${OUT}/OINTDOM.o

@
<<OINTDOM.NRLIB (NRLIB from MID)>>=
${MID}/OINTDOM.NRLIB: ${MID}/OINTDOM.spad
	@ echo 0 making ${MID}/OINTDOM.NRLIB from ${MID}/OINTDOM.spad
	@ (cd ${MID} ; 	echo ')co OINTDOM.spad' | ${INTERPSYS} )

@
<<OINTDOM.spad (SPAD from IN)>>=
${MID}/OINTDOM.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OINTDOM.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OINTDOM.NRLIB ; \
	${SPADBIN}/notangle -R"category OINTDOM OrderedIntegralDomain" ${IN}/catdef.spad.pamphlet >OINTDOM.spad )

@
<<OINTDOM.o (BOOTSTRAP from MID)>>=
${MID}/OINTDOM.o: ${MID}/OINTDOM.lsp
	@ echo 0 making ${MID}/OINTDOM.o from ${MID}/OINTDOM.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "OINTDOM.lsp" :output-file "OINTDOM.o"))' | ${DEPSYS} )
	@ cp ${MID}/OINTDOM.o ${OUT}/OINTDOM.o

@
<<OINTDOM.lsp (LISP from IN)>>=
${MID}/OINTDOM.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/OINTDOM.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OINTDOM.NRLIB ; \
	rm -rf ${OUT}/OINTDOM.o ; \
	${SPADBIN}/notangle -R"OINTDOM.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >OINTDOM.lsp )

@
<<ORDMON.o (O from NRLIB)>>=
${OUT}/ORDMON.o: ${MID}/ORDMON.NRLIB
	@ echo 0 making ${OUT}/ORDMON.o from ${MID}/ORDMON.NRLIB
	@ cp ${MID}/ORDMON.NRLIB/code.o ${OUT}/ORDMON.o

@
<<ORDMON.NRLIB (NRLIB from MID)>>=
${MID}/ORDMON.NRLIB: ${MID}/ORDMON.spad
	@ echo 0 making ${MID}/ORDMON.NRLIB from ${MID}/ORDMON.spad
	@ (cd ${MID} ; 	echo ')co ORDMON.spad' | ${INTERPSYS} )

@
<<ORDMON.spad (SPAD from IN)>>=
${MID}/ORDMON.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ORDMON.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDMON.NRLIB ; \
	${SPADBIN}/notangle -R"category ORDMON OrderedMonoid" ${IN}/catdef.spad.pamphlet >ORDMON.spad )

@
<<ORDRING-.o (O from NRLIB)>>=
${OUT}/ORDRING-.o: ${MID}/ORDRING.NRLIB
	@ echo 0 making ${OUT}/ORDRING-.o from ${MID}/ORDRING-.NRLIB
	@ cp ${MID}/ORDRING-.NRLIB/code.o ${OUT}/ORDRING-.o

@
<<ORDRING-.NRLIB (NRLIB from MID)>>=
${MID}/ORDRING-.NRLIB: ${OUT}/TYPE.o ${MID}/ORDRING.spad 
	@ echo 0 making ${MID}/ORDRING-.NRLIB from ${MID}/ORDRING.spad
	@ (cd ${MID} ; 	echo ')co ORDRING.spad' | ${INTERPSYS} )

@
<<ORDRING.o (O from NRLIB)>>=
${OUT}/ORDRING.o: ${MID}/ORDRING.NRLIB
	@ echo 0 making ${OUT}/ORDRING.o from ${MID}/ORDRING.NRLIB
	@ cp ${MID}/ORDRING.NRLIB/code.o ${OUT}/ORDRING.o

@
<<ORDRING.NRLIB (NRLIB from MID)>>=
${MID}/ORDRING.NRLIB: ${MID}/ORDRING.spad
	@ echo 0 making ${MID}/ORDRING.NRLIB from ${MID}/ORDRING.spad
	@ (cd ${MID} ; 	echo ')co ORDRING.spad' | ${INTERPSYS} )

@
<<ORDRING.spad (SPAD from IN)>>=
${MID}/ORDRING.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ORDRING.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDRING.NRLIB ; \
	${SPADBIN}/notangle -R"category ORDRING OrderedRing" ${IN}/catdef.spad.pamphlet >ORDRING.spad )

@
<<ORDRING-.o (BOOTSTRAP from MID)>>=
${MID}/ORDRING-.o: ${MID}/ORDRING-.lsp 
	@ echo 0 making ${MID}/ORDRING-.o from ${MID}/ORDRING-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ORDRING-.lsp" :output-file "ORDRING-.o"))' | ${DEPSYS} )
	@ cp ${MID}/ORDRING-.o ${OUT}/ORDRING-.o

@
<<ORDRING-.lsp (LISP from IN)>>=
${MID}/ORDRING-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ORDRING-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDRING-.NRLIB ; \
	rm -rf ${OUT}/ORDRING-.o ; \
	${SPADBIN}/notangle -R"ORDRING-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ORDRING-.lsp )

@
<<ORDRING.o (BOOTSTRAP from MID)>>=
${MID}/ORDRING.o: ${MID}/ORDRING.lsp
	@ echo 0 making ${MID}/ORDRING.o from ${MID}/ORDRING.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ORDRING.lsp" :output-file "ORDRING.o"))' | ${DEPSYS} )
	@ cp ${MID}/ORDRING.o ${OUT}/ORDRING.o

@
<<ORDRING.lsp (LISP from IN)>>=
${MID}/ORDRING.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ORDRING.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDRING.NRLIB ; \
	rm -rf ${OUT}/ORDRING.o ; \
	${SPADBIN}/notangle -R"ORDRING.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >ORDRING.lsp )

@
<<ORDSET-.o (O from NRLIB)>>=
${OUT}/ORDSET-.o: ${MID}/ORDSET.NRLIB
	@ echo 0 making ${OUT}/ORDSET-.o from ${MID}/ORDSET-.NRLIB
	@ cp ${MID}/ORDSET-.NRLIB/code.o ${OUT}/ORDSET-.o

@
<<ORDSET-.NRLIB (NRLIB from MID)>>=
${MID}/ORDSET-.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/ORDSET.spad
	@ echo 0 making ${MID}/ORDSET-.NRLIB from ${MID}/ORDSET.spad
	@ (cd ${MID} ; 	echo ')co ORDSET.spad' | ${INTERPSYS} )

@
<<ORDSET.o (O from NRLIB)>>=
${OUT}/ORDSET.o: ${MID}/ORDSET.NRLIB
	@ echo 0 making ${OUT}/ORDSET.o from ${MID}/ORDSET.NRLIB
	@ cp ${MID}/ORDSET.NRLIB/code.o ${OUT}/ORDSET.o

@
<<ORDSET.NRLIB (NRLIB from MID)>>=
${MID}/ORDSET.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/ORDSET.spad
	@ echo 0 making ${MID}/ORDSET.NRLIB from ${MID}/ORDSET.spad
	@ (cd ${MID} ; 	echo ')co ORDSET.spad' | ${INTERPSYS} )

@
<<ORDSET.spad (SPAD from IN)>>=
${MID}/ORDSET.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/ORDSET.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDSET.NRLIB ; \
	${SPADBIN}/notangle -R"category ORDSET OrderedSet" ${IN}/catdef.spad.pamphlet >ORDSET.spad )

@
<<PDRING-.o (O from NRLIB)>>=
${OUT}/PDRING-.o: ${MID}/PDRING.NRLIB
	@ echo 0 making ${OUT}/PDRING-.o from ${MID}/PDRING-.NRLIB
	@ cp ${MID}/PDRING-.NRLIB/code.o ${OUT}/PDRING-.o

@
<<PDRING-.NRLIB (NRLIB from MID)>>=
${MID}/PDRING-.NRLIB: ${OUT}/TYPE.o ${MID}/PDRING.spad 
	@ echo 0 making ${MID}/PDRING-.NRLIB from ${MID}/PDRING.spad
	@ (cd ${MID} ; 	echo ')co PDRING.spad' | ${INTERPSYS} )

@
<<PDRING.o (O from NRLIB)>>=
${OUT}/PDRING.o: ${MID}/PDRING.NRLIB
	@ echo 0 making ${OUT}/PDRING.o from ${MID}/PDRING.NRLIB
	@ cp ${MID}/PDRING.NRLIB/code.o ${OUT}/PDRING.o

@
<<PDRING.NRLIB (NRLIB from MID)>>=
${MID}/PDRING.NRLIB: ${MID}/PDRING.spad
	@ echo 0 making ${MID}/PDRING.NRLIB from ${MID}/PDRING.spad
	@ (cd ${MID} ; 	echo ')co PDRING.spad' | ${INTERPSYS} )

@
<<PDRING.spad (SPAD from IN)>>=
${MID}/PDRING.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/PDRING.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PDRING.NRLIB ; \
	${SPADBIN}/notangle -R"category PDRING PartialDifferentialRing" ${IN}/catdef.spad.pamphlet >PDRING.spad )

@
<<PID.o (O from NRLIB)>>=
${OUT}/PID.o: ${MID}/PID.NRLIB
	@ echo 0 making ${OUT}/PID.o from ${MID}/PID.NRLIB
	@ cp ${MID}/PID.NRLIB/code.o ${OUT}/PID.o

@
<<PID.NRLIB (NRLIB from MID)>>=
${MID}/PID.NRLIB: ${MID}/PID.spad
	@ echo 0 making ${MID}/PID.NRLIB from ${MID}/PID.spad
	@ (cd ${MID} ; 	echo ')co PID.spad' | ${INTERPSYS} )

@
<<PID.spad (SPAD from IN)>>=
${MID}/PID.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/PID.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PID.NRLIB ; \
	${SPADBIN}/notangle -R"category PID PrincipalIdealDomain" ${IN}/catdef.spad.pamphlet >PID.spad )

@
<<PFECAT-.o (O from NRLIB)>>=
${OUT}/PFECAT-.o: ${MID}/PFECAT.NRLIB
	@ echo 0 making ${OUT}/PFECAT-.o from ${MID}/PFECAT-.NRLIB
	@ cp ${MID}/PFECAT-.NRLIB/code.o ${OUT}/PFECAT-.o

@
<<PFECAT-.NRLIB (NRLIB from MID)>>=
${MID}/PFECAT-.NRLIB: ${OUT}/TYPE.o ${MID}/PFECAT.spad 
	@ echo 0 making ${MID}/PFECAT-.NRLIB from ${MID}/PFECAT.spad
	@ (cd ${MID} ; 	echo ')co PFECAT.spad' | ${INTERPSYS} )

@
<<PFECAT.o (O from NRLIB)>>=
${OUT}/PFECAT.o: ${MID}/PFECAT.NRLIB
	@ echo 0 making ${OUT}/PFECAT.o from ${MID}/PFECAT.NRLIB
	@ cp ${MID}/PFECAT.NRLIB/code.o ${OUT}/PFECAT.o

@
<<PFECAT.NRLIB (NRLIB from MID)>>=
${MID}/PFECAT.NRLIB: ${MID}/PFECAT.spad
	@ echo 0 making ${MID}/PFECAT.NRLIB from ${MID}/PFECAT.spad
	@ (cd ${MID} ; 	echo ')co PFECAT.spad' | ${INTERPSYS} )

@
<<PFECAT.spad (SPAD from IN)>>=
${MID}/PFECAT.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/PFECAT.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFECAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PFECAT PolynomialFactorizationExplicit" ${IN}/catdef.spad.pamphlet >PFECAT.spad )

@
<<RMODULE.o (O from NRLIB)>>=
${OUT}/RMODULE.o: ${MID}/RMODULE.NRLIB
	@ echo 0 making ${OUT}/RMODULE.o from ${MID}/RMODULE.NRLIB
	@ cp ${MID}/RMODULE.NRLIB/code.o ${OUT}/RMODULE.o

@
<<RMODULE.NRLIB (NRLIB from MID)>>=
${MID}/RMODULE.NRLIB: ${OUT}/TYPE.o ${MID}/RMODULE.spad
	@ echo 0 making ${MID}/RMODULE.NRLIB from ${MID}/RMODULE.spad
	@ (cd ${MID} ; 	echo ')co RMODULE.spad' | ${INTERPSYS} )

@
<<RMODULE.spad (SPAD from IN)>>=
${MID}/RMODULE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/RMODULE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RMODULE.NRLIB ; \
	${SPADBIN}/notangle -R"category RMODULE RightModule" ${IN}/catdef.spad.pamphlet >RMODULE.spad )

@
<<RING-.o (O from NRLIB)>>=
${OUT}/RING-.o: ${MID}/RING.NRLIB
	@ echo 0 making ${OUT}/RING-.o from ${MID}/RING-.NRLIB
	@ cp ${MID}/RING-.NRLIB/code.o ${OUT}/RING-.o

@
<<RING-.NRLIB (NRLIB from MID)>>=
${MID}/RING-.NRLIB: ${OUT}/TYPE.o ${MID}/RING.spad 
	@ echo 0 making ${MID}/RING-.NRLIB from ${MID}/RING.spad
	@ (cd ${MID} ; 	echo ')co RING.spad' | ${INTERPSYS} )

@
<<RING.o (O from NRLIB)>>=
${OUT}/RING.o: ${MID}/RING.NRLIB
	@ echo 0 making ${OUT}/RING.o from ${MID}/RING.NRLIB
	@ cp ${MID}/RING.NRLIB/code.o ${OUT}/RING.o

@
<<RING.NRLIB (NRLIB from MID)>>=
${MID}/RING.NRLIB: ${MID}/RING.spad
	@ echo 0 making ${MID}/RING.NRLIB from ${MID}/RING.spad
	@ (cd ${MID} ; 	echo ')co RING.spad' | ${INTERPSYS} )

@
<<RING.spad (SPAD from IN)>>=
${MID}/RING.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/RING.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RING.NRLIB ; \
	${SPADBIN}/notangle -R"category RING Ring" ${IN}/catdef.spad.pamphlet >RING.spad )

@
<<RING-.o (BOOTSTRAP from MID)>>=
${MID}/RING-.o: ${MID}/RING-.lsp 
	@ echo 0 making ${MID}/RING-.o from ${MID}/RING-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RING-.lsp" :output-file "RING-.o"))' | ${DEPSYS} )
	@ cp ${MID}/RING-.o ${OUT}/RING-.o

@
<<RING-.lsp (LISP from IN)>>=
${MID}/RING-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/RING-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RING-.NRLIB ; \
	rm -rf ${OUT}/RING-.o ; \
	${SPADBIN}/notangle -R"RING-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >RING-.lsp )

@
<<RING.o (BOOTSTRAP from MID)>>=
${MID}/RING.o: ${MID}/RING.lsp
	@ echo 0 making ${MID}/RING.o from ${MID}/RING.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RING.lsp" :output-file "RING.o"))' | ${DEPSYS} )
	@ cp ${MID}/RING.o ${OUT}/RING.o

@
<<RING.lsp (LISP from IN)>>=
${MID}/RING.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/RING.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RING.NRLIB ; \
	rm -rf ${OUT}/RING.o ; \
	${SPADBIN}/notangle -R"RING.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >RING.lsp )

@
<<RNG.o (O from NRLIB)>>=
${OUT}/RNG.o: ${MID}/RNG.NRLIB
	@ echo 0 making ${OUT}/RNG.o from ${MID}/RNG.NRLIB
	@ cp ${MID}/RNG.NRLIB/code.o ${OUT}/RNG.o

@
<<RNG.NRLIB (NRLIB from MID)>>=
${MID}/RNG.NRLIB: ${MID}/RNG.spad
	@ echo 0 making ${MID}/RNG.NRLIB from ${MID}/RNG.spad
	@ (cd ${MID} ; 	echo ')co RNG.spad' | ${INTERPSYS} )

@
<<RNG.spad (SPAD from IN)>>=
${MID}/RNG.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/RNG.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RNG.NRLIB ; \
	${SPADBIN}/notangle -R"category RNG Rng" ${IN}/catdef.spad.pamphlet >RNG.spad )

@
<<RNG.o (BOOTSTRAP from MID)>>=
${MID}/RNG.o: ${MID}/RNG.lsp
	@ echo 0 making ${MID}/RNG.o from ${MID}/RNG.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RNG.lsp" :output-file "RNG.o"))' | ${DEPSYS} )
	@ cp ${MID}/RNG.o ${OUT}/RNG.o

@
<<RNG.lsp (LISP from IN)>>=
${MID}/RNG.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/RNG.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RNG.NRLIB ; \
	rm -rf ${OUT}/RNG.o ; \
	${SPADBIN}/notangle -R"RNG.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >RNG.lsp )

@
<<SETCAT-.o (O from NRLIB)>>=
${OUT}/SETCAT-.o: ${MID}/SETCAT.NRLIB
	@ echo 0 making ${OUT}/SETCAT-.o from ${MID}/SETCAT-.NRLIB
	@ cp ${MID}/SETCAT-.NRLIB/code.o ${OUT}/SETCAT-.o

@
<<SETCAT-.NRLIB (NRLIB from MID)>>=
${MID}/SETCAT-.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${OUT}/SINT.o \
                      ${MID}/SETCAT.spad
	@ echo 0 making ${MID}/SETCAT-.NRLIB from ${MID}/SETCAT.spad
	@ (cd ${MID} ; 	echo ')co SETCAT.spad' | ${INTERPSYS} )

@
<<SETCAT-.o (BOOTSTRAP from MID)>>=
${MID}/SETCAT-.o: ${MID}/SETCAT-.lsp
	@ echo 0 making ${MID}/SETCAT-.o from ${MID}/SETCAT-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "SETCAT-.lsp" :output-file "SETCAT-.o"))' | ${DEPSYS} )
	@ cp ${MID}/SETCAT-.o ${OUT}/SETCAT-.o

@
<<SETCAT-.lsp (LISP from IN)>>=
${MID}/SETCAT-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/SETCAT-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETCAT-.NRLIB ; \
	rm -rf ${OUT}/SETCAT-.o ; \
	${SPADBIN}/notangle -R"SETCAT-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >SETCAT-.lsp )

@
<<SETCAT.o (O from NRLIB)>>=
${OUT}/SETCAT.o: ${MID}/SETCAT.NRLIB
	@ echo 0 making ${OUT}/SETCAT.o from ${MID}/SETCAT.NRLIB
	@ cp ${MID}/SETCAT.NRLIB/code.o ${OUT}/SETCAT.o

@
<<SETCAT.NRLIB (NRLIB from MID)>>=
${MID}/SETCAT.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/SETCAT.spad
	@ echo 0 making ${MID}/SETCAT.NRLIB from ${MID}/SETCAT.spad
	@ (cd ${MID} ; 	echo ')co SETCAT.spad' | ${INTERPSYS} )

@
<<SETCAT.spad (SPAD from IN)>>=
${MID}/SETCAT.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/SETCAT.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category SETCAT SetCategory" ${IN}/catdef.spad.pamphlet >SETCAT.spad )

@
<<SETCAT.o (BOOTSTRAP from MID)>>=
${MID}/SETCAT.o: ${MID}/SETCAT.lsp
	@ echo 0 making ${MID}/SETCAT.o from ${MID}/SETCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "SETCAT.lsp" :output-file "SETCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/SETCAT.o ${OUT}/SETCAT.o

@
<<SETCAT.lsp (LISP from IN)>>=
${MID}/SETCAT.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/SETCAT.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETCAT.NRLIB ; \
	rm -rf ${OUT}/SETCAT.o ; \
	${SPADBIN}/notangle -R"SETCAT.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >SETCAT.lsp )

@
<<SGROUP-.o (O from NRLIB)>>=
${OUT}/SGROUP-.o: ${MID}/SGROUP.NRLIB
	@ echo 0 making ${OUT}/SGROUP-.o from ${MID}/SGROUP-.NRLIB
	@ cp ${MID}/SGROUP-.NRLIB/code.o ${OUT}/SGROUP-.o

@
<<SGROUP-.NRLIB (NRLIB from MID)>>=
${MID}/SGROUP-.NRLIB: ${OUT}/TYPE.o ${MID}/SGROUP.spad 
	@ echo 0 making ${MID}/SGROUP-.NRLIB from ${MID}/SGROUP.spad
	@ (cd ${MID} ; 	echo ')co SGROUP.spad' | ${INTERPSYS} )

@
<<SGROUP.o (O from NRLIB)>>=
${OUT}/SGROUP.o: ${MID}/SGROUP.NRLIB
	@ echo 0 making ${OUT}/SGROUP.o from ${MID}/SGROUP.NRLIB
	@ cp ${MID}/SGROUP.NRLIB/code.o ${OUT}/SGROUP.o

@
<<SGROUP.NRLIB (NRLIB from MID)>>=
${MID}/SGROUP.NRLIB: ${MID}/SGROUP.spad
	@ echo 0 making ${MID}/SGROUP.NRLIB from ${MID}/SGROUP.spad
	@ (cd ${MID} ; 	echo ')co SGROUP.spad' | ${INTERPSYS} )

@
<<SGROUP.spad (SPAD from IN)>>=
${MID}/SGROUP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/SGROUP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SGROUP.NRLIB ; \
	${SPADBIN}/notangle -R"category SGROUP SemiGroup" ${IN}/catdef.spad.pamphlet >SGROUP.spad )

@
<<STEP.o (O from NRLIB)>>=
${OUT}/STEP.o: ${MID}/STEP.NRLIB
	@ echo 0 making ${OUT}/STEP.o from ${MID}/STEP.NRLIB
	@ cp ${MID}/STEP.NRLIB/code.o ${OUT}/STEP.o

@
<<STEP.NRLIB (NRLIB from MID)>>=
${MID}/STEP.NRLIB: ${MID}/STEP.spad
	@ echo 0 making ${MID}/STEP.NRLIB from ${MID}/STEP.spad
	@ (cd ${MID} ; 	echo ')co STEP.spad' | ${INTERPSYS} )

@
<<STEP.spad (SPAD from IN)>>=
${MID}/STEP.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/STEP.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STEP.NRLIB ; \
	${SPADBIN}/notangle -R"category STEP StepThrough" ${IN}/catdef.spad.pamphlet >STEP.spad )

@
<<UFD-.o (O from NRLIB)>>=
${OUT}/UFD-.o: ${MID}/UFD.NRLIB
	@ echo 0 making ${OUT}/UFD-.o from ${MID}/UFD-.NRLIB
	@ cp ${MID}/UFD-.NRLIB/code.o ${OUT}/UFD-.o

@
<<UFD-.NRLIB (NRLIB from MID)>>=
${MID}/UFD-.NRLIB: ${OUT}/TYPE.o ${MID}/UFD.spad 
	@ echo 0 making ${MID}/UFD-.NRLIB from ${MID}/UFD.spad
	@ (cd ${MID} ; 	echo ')co UFD.spad' | ${INTERPSYS} )

@
<<UFD.o (O from NRLIB)>>=
${OUT}/UFD.o: ${MID}/UFD.NRLIB
	@ echo 0 making ${OUT}/UFD.o from ${MID}/UFD.NRLIB
	@ cp ${MID}/UFD.NRLIB/code.o ${OUT}/UFD.o

@
<<UFD.NRLIB (NRLIB from MID)>>=
${MID}/UFD.NRLIB: ${MID}/UFD.spad
	@ echo 0 making ${MID}/UFD.NRLIB from ${MID}/UFD.spad
	@ (cd ${MID} ; 	echo ')co UFD.spad' | ${INTERPSYS} )

@
<<UFD.spad (SPAD from IN)>>=
${MID}/UFD.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/UFD.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UFD.NRLIB ; \
	${SPADBIN}/notangle -R"category UFD UniqueFactorizationDomain" ${IN}/catdef.spad.pamphlet >UFD.spad )

@
<<UFD-.o (BOOTSTRAP from MID)>>=
${MID}/UFD-.o: ${MID}/UFD-.lsp 
	@ echo 0 making ${MID}/UFD-.o from ${MID}/UFD-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "UFD-.lsp" :output-file "UFD-.o"))' | ${DEPSYS} )
	@ cp ${MID}/UFD-.o ${OUT}/UFD-.o

@
<<UFD-.lsp (LISP from IN)>>=
${MID}/UFD-.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/UFD-.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UFD-.NRLIB ; \
	rm -rf ${OUT}/UFD-.o ; \
	${SPADBIN}/notangle -R"UFD-.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >UFD-.lsp )

@
<<UFD.o (BOOTSTRAP from MID)>>=
${MID}/UFD.o: ${MID}/UFD.lsp
	@ echo 0 making ${MID}/UFD.o from ${MID}/UFD.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "UFD.lsp" :output-file "UFD.o"))' | ${DEPSYS} )
	@ cp ${MID}/UFD.o ${OUT}/UFD.o

@
<<UFD.lsp (LISP from IN)>>=
${MID}/UFD.lsp: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/UFD.lsp from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UFD.NRLIB ; \
	rm -rf ${OUT}/UFD.o ; \
	${SPADBIN}/notangle -R"UFD.lsp BOOTSTRAP" ${IN}/catdef.spad.pamphlet >UFD.lsp )

@
<<VSPACE-.o (O from NRLIB)>>=
${OUT}/VSPACE-.o: ${MID}/VSPACE.NRLIB
	@ echo 0 making ${OUT}/VSPACE-.o from ${MID}/VSPACE-.NRLIB
	@ cp ${MID}/VSPACE-.NRLIB/code.o ${OUT}/VSPACE-.o

@
<<VSPACE-.NRLIB (NRLIB from MID)>>=
${MID}/VSPACE-.NRLIB: ${OUT}/TYPE.o ${MID}/VSPACE.spad 
	@ echo 0 making ${MID}/VSPACE-.NRLIB from ${MID}/VSPACE.spad
	@ (cd ${MID} ; 	echo ')co VSPACE.spad' | ${INTERPSYS} )

@
<<VSPACE.o (O from NRLIB)>>=
${OUT}/VSPACE.o: ${MID}/VSPACE.NRLIB
	@ echo 0 making ${OUT}/VSPACE.o from ${MID}/VSPACE.NRLIB
	@ cp ${MID}/VSPACE.NRLIB/code.o ${OUT}/VSPACE.o

@
<<VSPACE.NRLIB (NRLIB from MID)>>=
${MID}/VSPACE.NRLIB: ${MID}/VSPACE.spad
	@ echo 0 making ${MID}/VSPACE.NRLIB from ${MID}/VSPACE.spad
	@ (cd ${MID} ; 	echo ')co VSPACE.spad' | ${INTERPSYS} )

@
<<VSPACE.spad (SPAD from IN)>>=
${MID}/VSPACE.spad: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${MID}/VSPACE.spad from ${IN}/catdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VSPACE.NRLIB ; \
	${SPADBIN}/notangle -R"category VSPACE VectorSpace" ${IN}/catdef.spad.pamphlet >VSPACE.spad )

@
<<catdef.spad.dvi (DOC from IN)>>=
${DOC}/catdef.spad.dvi: ${IN}/catdef.spad.pamphlet
	@ echo 0 making ${DOC}/catdef.spad.dvi from ${IN}/catdef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/catdef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} catdef.spad ; \
	rm -f ${DOC}/catdef.spad.pamphlet ; \
	rm -f ${DOC}/catdef.spad.tex ; \
	rm -f ${DOC}/catdef.spad )

@
\subsection{cden.spad \cite{1}}
<<cden.spad (SPAD from IN)>>=
${MID}/cden.spad: ${IN}/cden.spad.pamphlet
	@ echo 0 making ${MID}/cden.spad from ${IN}/cden.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/cden.spad.pamphlet >cden.spad )

@
<<CDEN.o (O from NRLIB)>>=
${OUT}/CDEN.o: ${MID}/CDEN.NRLIB
	@ echo 0 making ${OUT}/CDEN.o from ${MID}/CDEN.NRLIB
	@ cp ${MID}/CDEN.NRLIB/code.o ${OUT}/CDEN.o

@
<<CDEN.NRLIB (NRLIB from MID)>>=
${MID}/CDEN.NRLIB: ${MID}/CDEN.spad
	@ echo 0 making ${MID}/CDEN.NRLIB from ${MID}/CDEN.spad
	@ (cd ${MID} ; 	echo ')co CDEN.spad' | ${INTERPSYS} )

@
<<CDEN.spad (SPAD from IN)>>=
${MID}/CDEN.spad: ${IN}/cden.spad.pamphlet
	@ echo 0 making ${MID}/CDEN.spad from ${IN}/cden.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CDEN.NRLIB ; \
	${SPADBIN}/notangle -R"package CDEN CommonDenominator" ${IN}/cden.spad.pamphlet >CDEN.spad )

@
<<ICDEN.o (O from NRLIB)>>=
${OUT}/ICDEN.o: ${MID}/ICDEN.NRLIB
	@ echo 0 making ${OUT}/ICDEN.o from ${MID}/ICDEN.NRLIB
	@ cp ${MID}/ICDEN.NRLIB/code.o ${OUT}/ICDEN.o

@
<<ICDEN.NRLIB (NRLIB from MID)>>=
${MID}/ICDEN.NRLIB: ${MID}/ICDEN.spad
	@ echo 0 making ${MID}/ICDEN.NRLIB from ${MID}/ICDEN.spad
	@ (cd ${MID} ; 	echo ')co ICDEN.spad' | ${INTERPSYS} )

@
<<ICDEN.spad (SPAD from IN)>>=
${MID}/ICDEN.spad: ${IN}/cden.spad.pamphlet
	@ echo 0 making ${MID}/ICDEN.spad from ${IN}/cden.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ICDEN.NRLIB ; \
	${SPADBIN}/notangle -R"package ICDEN InnerCommonDenominator" ${IN}/cden.spad.pamphlet >ICDEN.spad )

@
<<MCDEN.o (O from NRLIB)>>=
${OUT}/MCDEN.o: ${MID}/MCDEN.NRLIB
	@ echo 0 making ${OUT}/MCDEN.o from ${MID}/MCDEN.NRLIB
	@ cp ${MID}/MCDEN.NRLIB/code.o ${OUT}/MCDEN.o

@
<<MCDEN.NRLIB (NRLIB from MID)>>=
${MID}/MCDEN.NRLIB: ${MID}/MCDEN.spad
	@ echo 0 making ${MID}/MCDEN.NRLIB from ${MID}/MCDEN.spad
	@ (cd ${MID} ; 	echo ')co MCDEN.spad' | ${INTERPSYS} )

@
<<MCDEN.spad (SPAD from IN)>>=
${MID}/MCDEN.spad: ${IN}/cden.spad.pamphlet
	@ echo 0 making ${MID}/MCDEN.spad from ${IN}/cden.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MCDEN.NRLIB ; \
	${SPADBIN}/notangle -R"package MCDEN MatrixCommonDenominator" ${IN}/cden.spad.pamphlet >MCDEN.spad )

@
<<UPCDEN.o (O from NRLIB)>>=
${OUT}/UPCDEN.o: ${MID}/UPCDEN.NRLIB
	@ echo 0 making ${OUT}/UPCDEN.o from ${MID}/UPCDEN.NRLIB
	@ cp ${MID}/UPCDEN.NRLIB/code.o ${OUT}/UPCDEN.o

@
<<UPCDEN.NRLIB (NRLIB from MID)>>=
${MID}/UPCDEN.NRLIB: ${MID}/UPCDEN.spad
	@ echo 0 making ${MID}/UPCDEN.NRLIB from ${MID}/UPCDEN.spad
	@ (cd ${MID} ; 	echo ')co UPCDEN.spad' | ${INTERPSYS} )

@
<<UPCDEN.spad (SPAD from IN)>>=
${MID}/UPCDEN.spad: ${IN}/cden.spad.pamphlet
	@ echo 0 making ${MID}/UPCDEN.spad from ${IN}/cden.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPCDEN.NRLIB ; \
	${SPADBIN}/notangle -R"package UPCDEN UnivariatePolynomialCommonDenominator" ${IN}/cden.spad.pamphlet >UPCDEN.spad )

@
<<cden.spad.dvi (DOC from IN)>>=
${DOC}/cden.spad.dvi: ${IN}/cden.spad.pamphlet
	@ echo 0 making ${DOC}/cden.spad.dvi from ${IN}/cden.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/cden.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} cden.spad ; \
	rm -f ${DOC}/cden.spad.pamphlet ; \
	rm -f ${DOC}/cden.spad.tex ; \
	rm -f ${DOC}/cden.spad )

@
\subsection{clifford.spad \cite{1}}
<<clifford.spad (SPAD from IN)>>=
${MID}/clifford.spad: ${IN}/clifford.spad.pamphlet
	@ echo 0 making ${MID}/clifford.spad from ${IN}/clifford.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/clifford.spad.pamphlet >clifford.spad )

@
<<CLIF.o (O from NRLIB)>>=
${OUT}/CLIF.o: ${MID}/CLIF.NRLIB
	@ echo 0 making ${OUT}/CLIF.o from ${MID}/CLIF.NRLIB
	@ cp ${MID}/CLIF.NRLIB/code.o ${OUT}/CLIF.o

@
<<CLIF.NRLIB (NRLIB from MID)>>=
${MID}/CLIF.NRLIB: ${MID}/CLIF.spad
	@ echo 0 making ${MID}/CLIF.NRLIB from ${MID}/CLIF.spad
	@ (cd ${MID} ; 	echo ')co CLIF.spad' | ${INTERPSYS} )

@
<<CLIF.spad (SPAD from IN)>>=
${MID}/CLIF.spad: ${IN}/clifford.spad.pamphlet
	@ echo 0 making ${MID}/CLIF.spad from ${IN}/clifford.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CLIF.NRLIB ; \
	${SPADBIN}/notangle -R"domain CLIF CliffordAlgebra" ${IN}/clifford.spad.pamphlet >CLIF.spad )

@
<<QFORM.o (O from NRLIB)>>=
${OUT}/QFORM.o: ${MID}/QFORM.NRLIB
	@ echo 0 making ${OUT}/QFORM.o from ${MID}/QFORM.NRLIB
	@ cp ${MID}/QFORM.NRLIB/code.o ${OUT}/QFORM.o

@
<<QFORM.NRLIB (NRLIB from MID)>>=
${MID}/QFORM.NRLIB: ${MID}/QFORM.spad
	@ echo 0 making ${MID}/QFORM.NRLIB from ${MID}/QFORM.spad
	@ (cd ${MID} ; 	echo ')co QFORM.spad' | ${INTERPSYS} )

@
<<QFORM.spad (SPAD from IN)>>=
${MID}/QFORM.spad: ${IN}/clifford.spad.pamphlet
	@ echo 0 making ${MID}/QFORM.spad from ${IN}/clifford.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QFORM.NRLIB ; \
	${SPADBIN}/notangle -R"domain QFORM QuadraticForm" ${IN}/clifford.spad.pamphlet >QFORM.spad )

@
<<clifford.spad.dvi (DOC from IN)>>=
${DOC}/clifford.spad.dvi: ${IN}/clifford.spad.pamphlet
	@ echo 0 making ${DOC}/clifford.spad.dvi from ${IN}/clifford.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/clifford.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} clifford.spad ; \
	rm -f ${DOC}/clifford.spad.pamphlet ; \
	rm -f ${DOC}/clifford.spad.tex ; \
	rm -f ${DOC}/clifford.spad )

@
\subsection{clip.spad \cite{1}}
<<clip.spad (SPAD from IN)>>=
${MID}/clip.spad: ${IN}/clip.spad.pamphlet
	@ echo 0 making ${MID}/clip.spad from ${IN}/clip.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/clip.spad.pamphlet >clip.spad )

@
<<CLIP.o (O from NRLIB)>>=
${OUT}/CLIP.o: ${MID}/CLIP.NRLIB
	@ echo 0 making ${OUT}/CLIP.o from ${MID}/CLIP.NRLIB
	@ cp ${MID}/CLIP.NRLIB/code.o ${OUT}/CLIP.o

@
<<CLIP.NRLIB (NRLIB from MID)>>=
${MID}/CLIP.NRLIB: ${MID}/CLIP.spad
	@ echo 0 making ${MID}/CLIP.NRLIB from ${MID}/CLIP.spad
	@ (cd ${MID} ; 	echo ')co CLIP.spad' | ${INTERPSYS} )

@
<<CLIP.spad (SPAD from IN)>>=
${MID}/CLIP.spad: ${IN}/clip.spad.pamphlet
	@ echo 0 making ${MID}/CLIP.spad from ${IN}/clip.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CLIP.NRLIB ; \
	${SPADBIN}/notangle -R"package CLIP TwoDimensionalPlotClipping" ${IN}/clip.spad.pamphlet >CLIP.spad )

@
<<clip.spad.dvi (DOC from IN)>>=
${DOC}/clip.spad.dvi: ${IN}/clip.spad.pamphlet
	@ echo 0 making ${DOC}/clip.spad.dvi from ${IN}/clip.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/clip.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} clip.spad ; \
	rm -f ${DOC}/clip.spad.pamphlet ; \
	rm -f ${DOC}/clip.spad.tex ; \
	rm -f ${DOC}/clip.spad )

@
\subsection{cmplxrt.spad \cite{1}}
<<cmplxrt.spad (SPAD from IN)>>=
${MID}/cmplxrt.spad: ${IN}/cmplxrt.spad.pamphlet
	@ echo 0 making ${MID}/cmplxrt.spad from ${IN}/cmplxrt.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/cmplxrt.spad.pamphlet >cmplxrt.spad )

@
<<CMPLXRT.o (O from NRLIB)>>=
${OUT}/CMPLXRT.o: ${MID}/CMPLXRT.NRLIB
	@ echo 0 making ${OUT}/CMPLXRT.o from ${MID}/CMPLXRT.NRLIB
	@ cp ${MID}/CMPLXRT.NRLIB/code.o ${OUT}/CMPLXRT.o

@
<<CMPLXRT.NRLIB (NRLIB from MID)>>=
${MID}/CMPLXRT.NRLIB: ${MID}/CMPLXRT.spad
	@ echo 0 making ${MID}/CMPLXRT.NRLIB from ${MID}/CMPLXRT.spad
	@ (cd ${MID} ; 	echo ')co CMPLXRT.spad' | ${INTERPSYS} )

@
<<CMPLXRT.spad (SPAD from IN)>>=
${MID}/CMPLXRT.spad: ${IN}/cmplxrt.spad.pamphlet
	@ echo 0 making ${MID}/CMPLXRT.spad from ${IN}/cmplxrt.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CMPLXRT.NRLIB ; \
	${SPADBIN}/notangle -R"package CMPLXRT ComplexRootPackage" ${IN}/cmplxrt.spad.pamphlet >CMPLXRT.spad )

@
<<cmplxrt.spad.dvi (DOC from IN)>>=
${DOC}/cmplxrt.spad.dvi: ${IN}/cmplxrt.spad.pamphlet
	@ echo 0 making ${DOC}/cmplxrt.spad.dvi from ${IN}/cmplxrt.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/cmplxrt.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} cmplxrt.spad ; \
	rm -f ${DOC}/cmplxrt.spad.pamphlet ; \
	rm -f ${DOC}/cmplxrt.spad.tex ; \
	rm -f ${DOC}/cmplxrt.spad )

@
\subsection{coerce.spad \cite{1}}
Builds KOERCE KONVERT RETRACT- RETRACT TYPE
<<coerce.spad (SPAD from IN)>>=
${MID}/coerce.spad: ${IN}/coerce.spad.pamphlet
	@ echo 0 making ${MID}/coerce.spad from ${IN}/coerce.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/coerce.spad.pamphlet >coerce.spad )

@
<<KOERCE.o (O from NRLIB)>>=
${OUT}/KOERCE.o: ${MID}/KOERCE.NRLIB
	@ echo 0 making ${OUT}/KOERCE.o from ${MID}/KOERCE.NRLIB
	@ cp ${MID}/KOERCE.NRLIB/code.o ${OUT}/KOERCE.o

@
<<KOERCE.NRLIB (NRLIB from MID)>>=
${MID}/KOERCE.NRLIB: ${MID}/KOERCE.spad
	@ echo 0 making ${MID}/KOERCE.NRLIB from ${MID}/KOERCE.spad
	@(cd ${MID} ; echo ')co KOERCE.spad' | ${INTERPSYS} )

@
<<KOERCE.spad (SPAD from IN)>>=
${MID}/KOERCE.spad: ${IN}/coerce.spad.pamphlet
	@ echo 0 making ${MID}/KOERCE.spad from ${IN}/coerce.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf KOERCE.NRLIB ; \
	${SPADBIN}/notangle -R"category KOERCE CoercibleTo" ${IN}/coerce.spad.pamphlet >KOERCE.spad )

@
<<KONVERT.o (O from NRLIB)>>=
${OUT}/KONVERT.o: ${MID}/KONVERT.NRLIB
	@ echo 0 making ${OUT}/KONVERT.o from ${MID}/KONVERT.NRLIB
	@ cp ${MID}/KONVERT.NRLIB/code.o ${OUT}/KONVERT.o

@
<<KONVERT.NRLIB (NRLIB from MID)>>=
${MID}/KONVERT.NRLIB: ${MID}/KONVERT.spad
	@ echo 0 making ${MID}/KONVERT.NRLIB from ${MID}/KONVERT.spad
	@ (cd ${MID} ; 	echo ')co KONVERT.spad' | ${INTERPSYS} )

@
<<KONVERT.spad (SPAD from IN)>>=
${MID}/KONVERT.spad: ${IN}/coerce.spad.pamphlet
	@ echo 0 making ${MID}/KONVERT.spad from ${IN}/coerce.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle -R"category KONVERT ConvertibleTo" ${IN}/coerce.spad.pamphlet >KONVERT.spad )

@
<<RETRACT-.o (O from NRLIB)>>=
${OUT}/RETRACT-.o: ${MID}/RETRACT.NRLIB
	@ echo 0 making ${OUT}/RETRACT-.o from ${MID}/RETRACT-.NRLIB
	@ cp ${MID}/RETRACT-.NRLIB/code.o ${OUT}/RETRACT-.o

@
<<RETRACT-.NRLIB (NRLIB from MID)>>=
${MID}/RETRACT-.NRLIB: ${OUT}/TYPE.o ${MID}/RETRACT.spad 
	@ echo 0 making ${MID}/RETRACT-.NRLIB from ${MID}/RETRACT.spad
	@ (cd ${MID} ; 	echo ')co RETRACT.spad' | ${INTERPSYS} )

@
<<RETRACT.o (O from NRLIB)>>=
${OUT}/RETRACT.o: ${MID}/RETRACT.NRLIB
	@ echo 0 making ${OUT}/RETRACT.o from ${MID}/RETRACT.NRLIB
	@ cp ${MID}/RETRACT.NRLIB/code.o ${OUT}/RETRACT.o

@
<<RETRACT.NRLIB (NRLIB from MID)>>=
${MID}/RETRACT.NRLIB: ${OUT}/TYPE.o ${MID}/RETRACT.spad
	@ echo 0 making ${MID}/RETRACT.NRLIB from ${MID}/RETRACT.spad
	@ (cd ${MID} ; 	echo ')co RETRACT.spad' | ${INTERPSYS} )

@
<<RETRACT.spad (SPAD from IN)>>=
${MID}/RETRACT.spad: ${IN}/coerce.spad.pamphlet
	@ echo 0 making ${MID}/RETRACT.spad from ${IN}/coerce.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle -R"category RETRACT RetractableTo" ${IN}/coerce.spad.pamphlet >RETRACT.spad )

@
<<TYPE.o (O from NRLIB)>>=
${OUT}/TYPE.o: ${MID}/TYPE.NRLIB
	@ echo 0 making ${OUT}/TYPE.o from ${MID}/TYPE.NRLIB
	@ cp ${MID}/TYPE.NRLIB/code.o ${OUT}/TYPE.o

@
<<TYPE.NRLIB (NRLIB from MID)>>=
${MID}/TYPE.NRLIB: ${MID}/TYPE.spad
	@ echo 0 making ${MID}/TYPE.NRLIB from ${MID}/TYPE.spad
	@ (cd ${MID} ; 	echo ')co TYPE.spad' | ${INTERPSYS} )

@
<<TYPE.spad (SPAD from IN)>>=
${MID}/TYPE.spad: ${IN}/coerce.spad.pamphlet
	@ echo 0 making ${MID}/TYPE.spad from ${IN}/coerce.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle -R"category TYPE Type" ${IN}/coerce.spad.pamphlet >TYPE.spad )

@
<<coerce.spad.dvi (DOC from IN)>>=
${DOC}/coerce.spad.dvi: ${IN}/coerce.spad.pamphlet
	@ echo 0 making ${DOC}/coerce.spad.dvi from ${IN}/coerce.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/coerce.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} coerce.spad ; \
	rm -f ${DOC}/coerce.spad.pamphlet ; \
	rm -f ${DOC}/coerce.spad.tex ; \
	rm -f ${DOC}/coerce.spad )

@
\subsection{color.spad \cite{1}}
<<color.spad (SPAD from IN)>>=
${MID}/color.spad: ${IN}/color.spad.pamphlet
	@ echo 0 making ${MID}/color.spad from ${IN}/color.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/color.spad.pamphlet >color.spad )

@
<<COLOR.o (O from NRLIB)>>=
${OUT}/COLOR.o: ${MID}/COLOR.NRLIB
	@ echo 0 making ${OUT}/COLOR.o from ${MID}/COLOR.NRLIB
	@ cp ${MID}/COLOR.NRLIB/code.o ${OUT}/COLOR.o

@
<<COLOR.NRLIB (NRLIB from MID)>>=
${MID}/COLOR.NRLIB: ${MID}/COLOR.spad
	@ echo 0 making ${MID}/COLOR.NRLIB from ${MID}/COLOR.spad
	@ (cd ${MID} ; 	echo ')co COLOR.spad' | ${INTERPSYS} )

@
<<COLOR.spad (SPAD from IN)>>=
${MID}/COLOR.spad: ${IN}/color.spad.pamphlet
	@ echo 0 making ${MID}/COLOR.spad from ${IN}/color.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COLOR.NRLIB ; \
	${SPADBIN}/notangle -R"domain COLOR Color" ${IN}/color.spad.pamphlet >COLOR.spad )

@
<<PALETTE.o (O from NRLIB)>>=
${OUT}/PALETTE.o: ${MID}/PALETTE.NRLIB
	@ echo 0 making ${OUT}/PALETTE.o from ${MID}/PALETTE.NRLIB
	@ cp ${MID}/PALETTE.NRLIB/code.o ${OUT}/PALETTE.o

@
<<PALETTE.NRLIB (NRLIB from MID)>>=
${MID}/PALETTE.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PALETTE.spad
	@ echo 0 making ${MID}/PALETTE.NRLIB from ${MID}/PALETTE.spad
	@ (cd ${MID} ; 	echo ')co PALETTE.spad' | ${INTERPSYS} )

@
<<PALETTE.spad (SPAD from IN)>>=
${MID}/PALETTE.spad: ${IN}/color.spad.pamphlet
	@ echo 0 making ${MID}/PALETTE.spad from ${IN}/color.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PALETTE.NRLIB ; \
	${SPADBIN}/notangle -R"domain PALETTE Palette" ${IN}/color.spad.pamphlet >PALETTE.spad )

@
<<color.spad.dvi (DOC from IN)>>=
${DOC}/color.spad.dvi: ${IN}/color.spad.pamphlet
	@ echo 0 making ${DOC}/color.spad.dvi from ${IN}/color.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/color.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} color.spad ; \
	rm -f ${DOC}/color.spad.pamphlet ; \
	rm -f ${DOC}/color.spad.tex ; \
	rm -f ${DOC}/color.spad )

@
\subsection{combfunc.spad \cite{1}}
<<combfunc.spad (SPAD from IN)>>=
${MID}/combfunc.spad: ${IN}/combfunc.spad.pamphlet
	@ echo 0 making ${MID}/combfunc.spad from ${IN}/combfunc.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/combfunc.spad.pamphlet >combfunc.spad )

@
<<COMBF.o (O from NRLIB)>>=
${OUT}/COMBF.o: ${MID}/COMBF.NRLIB
	@ echo 0 making ${OUT}/COMBF.o from ${MID}/COMBF.NRLIB
	@ cp ${MID}/COMBF.NRLIB/code.o ${OUT}/COMBF.o

@
<<COMBF.NRLIB (NRLIB from MID)>>=
${MID}/COMBF.NRLIB: ${OUT}/CFCAT.o ${MID}/COMBF.spad
	@ echo 0 making ${MID}/COMBF.NRLIB from ${MID}/COMBF.spad
	@ (cd ${MID} ; 	echo ')co COMBF.spad' | ${INTERPSYS} )

@
<<COMBF.spad (SPAD from IN)>>=
${MID}/COMBF.spad: ${IN}/combfunc.spad.pamphlet
	@ echo 0 making ${MID}/COMBF.spad from ${IN}/combfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMBF.NRLIB ; \
	${SPADBIN}/notangle -R"package COMBF CombinatorialFunction" ${IN}/combfunc.spad.pamphlet >COMBF.spad )

@
<<COMBOPC.o (O from NRLIB)>>=
${OUT}/COMBOPC.o: ${MID}/COMBOPC.NRLIB
	@ echo 0 making ${OUT}/COMBOPC.o from ${MID}/COMBOPC.NRLIB
	@ cp ${MID}/COMBOPC.NRLIB/code.o ${OUT}/COMBOPC.o

@
<<COMBOPC.NRLIB (NRLIB from MID)>>=
${MID}/COMBOPC.NRLIB: ${OUT}/CFCAT.o ${MID}/COMBOPC.spad
	@ echo 0 making ${MID}/COMBOPC.NRLIB from ${MID}/COMBOPC.spad
	@ (cd ${MID} ; 	echo ')co COMBOPC.spad' | ${INTERPSYS} )

@
<<COMBOPC.spad (SPAD from IN)>>=
${MID}/COMBOPC.spad: ${IN}/combfunc.spad.pamphlet
	@ echo 0 making ${MID}/COMBOPC.spad from ${IN}/combfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMBOPC.NRLIB ; \
	${SPADBIN}/notangle -R"category COMBOPC CombinatorialOpsCategory" ${IN}/combfunc.spad.pamphlet >COMBOPC.spad )

@
<<FSPECF.o (O from NRLIB)>>=
${OUT}/FSPECF.o: ${MID}/FSPECF.NRLIB
	@ echo 0 making ${OUT}/FSPECF.o from ${MID}/FSPECF.NRLIB
	@ cp ${MID}/FSPECF.NRLIB/code.o ${OUT}/FSPECF.o

@
<<FSPECF.NRLIB (NRLIB from MID)>>=
${MID}/FSPECF.NRLIB: ${MID}/FSPECF.spad
	@ echo 0 making ${MID}/FSPECF.NRLIB from ${MID}/FSPECF.spad
	@ (cd ${MID} ; 	echo ')co FSPECF.spad' | ${INTERPSYS} )

@
<<FSPECF.spad (SPAD from IN)>>=
${MID}/FSPECF.spad: ${IN}/combfunc.spad.pamphlet
	@ echo 0 making ${MID}/FSPECF.spad from ${IN}/combfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSPECF.NRLIB ; \
	${SPADBIN}/notangle -R"package FSPECF FunctionalSpecialFunction" ${IN}/combfunc.spad.pamphlet >FSPECF.spad )

@
<<SUMFS.o (O from NRLIB)>>=
${OUT}/SUMFS.o: ${MID}/SUMFS.NRLIB
	@ echo 0 making ${OUT}/SUMFS.o from ${MID}/SUMFS.NRLIB
	@ cp ${MID}/SUMFS.NRLIB/code.o ${OUT}/SUMFS.o

@
<<SUMFS.NRLIB (NRLIB from MID)>>=
${MID}/SUMFS.NRLIB: ${MID}/SUMFS.spad
	@ echo 0 making ${MID}/SUMFS.NRLIB from ${MID}/SUMFS.spad
	@ (cd ${MID} ; 	echo ')co SUMFS.spad' | ${INTERPSYS} )

@
<<SUMFS.spad (SPAD from IN)>>=
${MID}/SUMFS.spad: ${IN}/combfunc.spad.pamphlet
	@ echo 0 making ${MID}/SUMFS.spad from ${IN}/combfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUMFS.NRLIB ; \
	${SPADBIN}/notangle -R"package SUMFS FunctionSpaceSum" ${IN}/combfunc.spad.pamphlet >SUMFS.spad )

@
<<combfunc.spad.dvi (DOC from IN)>>=
${DOC}/combfunc.spad.dvi: ${IN}/combfunc.spad.pamphlet
	@ echo 0 making ${DOC}/combfunc.spad.dvi from ${IN}/combfunc.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/combfunc.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} combfunc.spad ; \
	rm -f ${DOC}/combfunc.spad.pamphlet ; \
	rm -f ${DOC}/combfunc.spad.tex ; \
	rm -f ${DOC}/combfunc.spad )

@
\subsection{combinat.spad \cite{1}}
<<combinat.spad (SPAD from IN)>>=
${MID}/combinat.spad: ${IN}/combinat.spad.pamphlet
	@ echo 0 making ${MID}/combinat.spad from ${IN}/combinat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/combinat.spad.pamphlet >combinat.spad )

@
<<COMBINAT.o (O from NRLIB)>>=
${OUT}/COMBINAT.o: ${MID}/COMBINAT.NRLIB
	@ echo 0 making ${OUT}/COMBINAT.o from ${MID}/COMBINAT.NRLIB
	@ cp ${MID}/COMBINAT.NRLIB/code.o ${OUT}/COMBINAT.o

@
<<COMBINAT.NRLIB (NRLIB from MID)>>=
${MID}/COMBINAT.NRLIB: ${MID}/COMBINAT.spad
	@ echo 0 making ${MID}/COMBINAT.NRLIB from ${MID}/COMBINAT.spad
	@ (cd ${MID} ; 	echo ')co COMBINAT.spad' | ${INTERPSYS} )

@
<<COMBINAT.spad (SPAD from IN)>>=
${MID}/COMBINAT.spad: ${IN}/combinat.spad.pamphlet
	@ echo 0 making ${MID}/COMBINAT.spad from ${IN}/combinat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMBINAT.NRLIB ; \
	${SPADBIN}/notangle -R"package COMBINAT IntegerCombinatoricFunctions" ${IN}/combinat.spad.pamphlet >COMBINAT.spad )

@
<<combinat.spad.dvi (DOC from IN)>>=
${DOC}/combinat.spad.dvi: ${IN}/combinat.spad.pamphlet
	@ echo 0 making ${DOC}/combinat.spad.dvi from ${IN}/combinat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/combinat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} combinat.spad ; \
	rm -f ${DOC}/combinat.spad.pamphlet ; \
	rm -f ${DOC}/combinat.spad.tex ; \
	rm -f ${DOC}/combinat.spad )

@
\subsection{complet.spad \cite{1}}
<<complet.spad (SPAD from IN)>>=
${MID}/complet.spad: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${MID}/complet.spad from ${IN}/complet.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/complet.spad.pamphlet >complet.spad )

@
<<INFINITY.o (O from NRLIB)>>=
${OUT}/INFINITY.o: ${MID}/INFINITY.NRLIB
	@ echo 0 making ${OUT}/INFINITY.o from ${MID}/INFINITY.NRLIB
	@ cp ${MID}/INFINITY.NRLIB/code.o ${OUT}/INFINITY.o

@
<<INFINITY.NRLIB (NRLIB from MID)>>=
${MID}/INFINITY.NRLIB: ${MID}/INFINITY.spad
	@ echo 0 making ${MID}/INFINITY.NRLIB from ${MID}/INFINITY.spad
	@ (cd ${MID} ; 	echo ')co INFINITY.spad' | ${INTERPSYS} )

@
<<INFINITY.spad (SPAD from IN)>>=
${MID}/INFINITY.spad: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${MID}/INFINITY.spad from ${IN}/complet.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INFINITY.NRLIB ; \
	${SPADBIN}/notangle -R"package INFINITY Infinity" ${IN}/complet.spad.pamphlet >INFINITY.spad )

@
<<ONECOMP.o (O from NRLIB)>>=
${OUT}/ONECOMP.o: ${MID}/ONECOMP.NRLIB
	@ echo 0 making ${OUT}/ONECOMP.o from ${MID}/ONECOMP.NRLIB
	@ cp ${MID}/ONECOMP.NRLIB/code.o ${OUT}/ONECOMP.o

@
<<ONECOMP.NRLIB (NRLIB from MID)>>=
${MID}/ONECOMP.NRLIB: ${MID}/ONECOMP.spad
	@ echo 0 making ${MID}/ONECOMP.NRLIB from ${MID}/ONECOMP.spad
	@ (cd ${MID} ; 	echo ')co ONECOMP.spad' | ${INTERPSYS} )

@
<<ONECOMP.spad (SPAD from IN)>>=
${MID}/ONECOMP.spad: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${MID}/ONECOMP.spad from ${IN}/complet.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ONECOMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain ONECOMP OnePointCompletion" ${IN}/complet.spad.pamphlet >ONECOMP.spad )

@
<<ONECOMP2.o (O from NRLIB)>>=
${OUT}/ONECOMP2.o: ${MID}/ONECOMP2.NRLIB
	@ echo 0 making ${OUT}/ONECOMP2.o from ${MID}/ONECOMP2.NRLIB
	@ cp ${MID}/ONECOMP2.NRLIB/code.o ${OUT}/ONECOMP2.o

@
<<ONECOMP2.NRLIB (NRLIB from MID)>>=
${MID}/ONECOMP2.NRLIB: ${MID}/ONECOMP2.spad
	@ echo 0 making ${MID}/ONECOMP2.NRLIB from ${MID}/ONECOMP2.spad
	@ (cd ${MID} ; 	echo ')co ONECOMP2.spad' | ${INTERPSYS} )

@
<<ONECOMP2.spad (SPAD from IN)>>=
${MID}/ONECOMP2.spad: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${MID}/ONECOMP2.spad from ${IN}/complet.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ONECOMP2.NRLIB ; \
	${SPADBIN}/notangle -R"package ONECOMP2 OnePointCompletionFunctions2" ${IN}/complet.spad.pamphlet >ONECOMP2.spad )

@
<<ORDCOMP.o (O from NRLIB)>>=
${OUT}/ORDCOMP.o: ${MID}/ORDCOMP.NRLIB
	@ echo 0 making ${OUT}/ORDCOMP.o from ${MID}/ORDCOMP.NRLIB
	@ cp ${MID}/ORDCOMP.NRLIB/code.o ${OUT}/ORDCOMP.o

@
<<ORDCOMP.NRLIB (NRLIB from MID)>>=
${MID}/ORDCOMP.NRLIB: ${MID}/ORDCOMP.spad
	@ echo 0 making ${MID}/ORDCOMP.NRLIB from ${MID}/ORDCOMP.spad
	@ (cd ${MID} ; 	echo ')co ORDCOMP.spad' | ${INTERPSYS} )

@
<<ORDCOMP.spad (SPAD from IN)>>=
${MID}/ORDCOMP.spad: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${MID}/ORDCOMP.spad from ${IN}/complet.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDCOMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain ORDCOMP OrderedCompletion" ${IN}/complet.spad.pamphlet >ORDCOMP.spad )

@
<<ORDCOMP2.o (O from NRLIB)>>=
${OUT}/ORDCOMP2.o: ${MID}/ORDCOMP2.NRLIB
	@ echo 0 making ${OUT}/ORDCOMP2.o from ${MID}/ORDCOMP2.NRLIB
	@ cp ${MID}/ORDCOMP2.NRLIB/code.o ${OUT}/ORDCOMP2.o

@
<<ORDCOMP2.NRLIB (NRLIB from MID)>>=
${MID}/ORDCOMP2.NRLIB: ${MID}/ORDCOMP2.spad
	@ echo 0 making ${MID}/ORDCOMP2.NRLIB from ${MID}/ORDCOMP2.spad
	@ (cd ${MID} ; 	echo ')co ORDCOMP2.spad' | ${INTERPSYS} )

@
<<ORDCOMP2.spad (SPAD from IN)>>=
${MID}/ORDCOMP2.spad: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${MID}/ORDCOMP2.spad from ${IN}/complet.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDCOMP2.NRLIB ; \
	${SPADBIN}/notangle -R"package ORDCOMP2 OrderedCompletionFunctions2" ${IN}/complet.spad.pamphlet >ORDCOMP2.spad )

@
<<complet.spad.dvi (DOC from IN)>>=
${DOC}/complet.spad.dvi: ${IN}/complet.spad.pamphlet
	@ echo 0 making ${DOC}/complet.spad.dvi from ${IN}/complet.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/complet.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} complet.spad ; \
	rm -f ${DOC}/complet.spad.pamphlet ; \
	rm -f ${DOC}/complet.spad.tex ; \
	rm -f ${DOC}/complet.spad )

@
\subsection{constant.spad \cite{1}}
<<constant.spad (SPAD from IN)>>=
${MID}/constant.spad: ${IN}/constant.spad.pamphlet
	@ echo 0 making ${MID}/constant.spad from ${IN}/constant.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/constant.spad.pamphlet >constant.spad )

@
<<AN.o (O from NRLIB)>>=
${OUT}/AN.o: ${MID}/AN.NRLIB
	@ echo 0 making ${OUT}/AN.o from ${MID}/AN.NRLIB
	@ cp ${MID}/AN.NRLIB/code.o ${OUT}/AN.o

@
<<AN.NRLIB (NRLIB from MID)>>=
${MID}/AN.NRLIB: ${MID}/AN.spad
	@ echo 0 making ${MID}/AN.NRLIB from ${MID}/AN.spad
	@ (cd ${MID} ; 	echo ')co AN.spad' | ${INTERPSYS} )

@
<<AN.spad (SPAD from IN)>>=
${MID}/AN.spad: ${IN}/constant.spad.pamphlet
	@ echo 0 making ${MID}/AN.spad from ${IN}/constant.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf AN.NRLIB ; \
	${SPADBIN}/notangle -R"domain AN AlgebraicNumber" ${IN}/constant.spad.pamphlet >AN.spad )

@
<<IAN.o (O from NRLIB)>>=
${OUT}/IAN.o: ${MID}/IAN.NRLIB
	@ echo 0 making ${OUT}/IAN.o from ${MID}/IAN.NRLIB
	@ cp ${MID}/IAN.NRLIB/code.o ${OUT}/IAN.o

@
<<IAN.NRLIB (NRLIB from MID)>>=
${MID}/IAN.NRLIB: ${MID}/IAN.spad
	@ echo 0 making ${MID}/IAN.NRLIB from ${MID}/IAN.spad
	@ (cd ${MID} ; 	echo ')co IAN.spad' | ${INTERPSYS} )

@
<<IAN.spad (SPAD from IN)>>=
${MID}/IAN.spad: ${IN}/constant.spad.pamphlet
	@ echo 0 making ${MID}/IAN.spad from ${IN}/constant.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IAN.NRLIB ; \
	${SPADBIN}/notangle -R"domain IAN InnerAlgebraicNumber" ${IN}/constant.spad.pamphlet >IAN.spad )

@
<<constant.spad.dvi (DOC from IN)>>=
${DOC}/constant.spad.dvi: ${IN}/constant.spad.pamphlet
	@ echo 0 making ${DOC}/constant.spad.dvi from ${IN}/constant.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/constant.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} constant.spad ; \
	rm -f ${DOC}/constant.spad.pamphlet ; \
	rm -f ${DOC}/constant.spad.tex ; \
	rm -f ${DOC}/constant.spad )

@
\subsection{contfrac.spad \cite{1}}
<<contfrac.spad (SPAD from IN)>>=
${MID}/contfrac.spad: ${IN}/contfrac.spad.pamphlet
	@ echo 0 making ${MID}/contfrac.spad from ${IN}/contfrac.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/contfrac.spad.pamphlet >contfrac.spad )

@
<<CONTFRAC.o (O from NRLIB)>>=
${OUT}/CONTFRAC.o: ${MID}/CONTFRAC.NRLIB
	@ echo 0 making ${OUT}/CONTFRAC.o from ${MID}/CONTFRAC.NRLIB
	@ cp ${MID}/CONTFRAC.NRLIB/code.o ${OUT}/CONTFRAC.o

@
<<CONTFRAC.NRLIB (NRLIB from MID)>>=
${MID}/CONTFRAC.NRLIB: ${MID}/CONTFRAC.spad
	@ echo 0 making ${MID}/CONTFRAC.NRLIB from ${MID}/CONTFRAC.spad
	@ (cd ${MID} ; 	echo ')co CONTFRAC.spad' | ${INTERPSYS} )

@
<<CONTFRAC.spad (SPAD from IN)>>=
${MID}/CONTFRAC.spad: ${IN}/contfrac.spad.pamphlet
	@ echo 0 making ${MID}/CONTFRAC.spad from ${IN}/contfrac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CONTFRAC.NRLIB ; \
	${SPADBIN}/notangle -R"domain CONTFRAC ContinuedFraction" ${IN}/contfrac.spad.pamphlet >CONTFRAC.spad )

@
<<NCNTFRAC.o (O from NRLIB)>>=
${OUT}/NCNTFRAC.o: ${MID}/NCNTFRAC.NRLIB
	@ echo 0 making ${OUT}/NCNTFRAC.o from ${MID}/NCNTFRAC.NRLIB
	@ cp ${MID}/NCNTFRAC.NRLIB/code.o ${OUT}/NCNTFRAC.o

@
<<NCNTFRAC.NRLIB (NRLIB from MID)>>=
${MID}/NCNTFRAC.NRLIB: ${MID}/NCNTFRAC.spad
	@ echo 0 making ${MID}/NCNTFRAC.NRLIB from ${MID}/NCNTFRAC.spad
	@ (cd ${MID} ; 	echo ')co NCNTFRAC.spad' | ${INTERPSYS} )

@
<<NCNTFRAC.spad (SPAD from IN)>>=
${MID}/NCNTFRAC.spad: ${IN}/contfrac.spad.pamphlet
	@ echo 0 making ${MID}/NCNTFRAC.spad from ${IN}/contfrac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NCNTFRAC.NRLIB ; \
	${SPADBIN}/notangle -R"package NCNTFRAC NumericContinuedFraction" ${IN}/contfrac.spad.pamphlet >NCNTFRAC.spad )

@
<<contfrac.spad.dvi (DOC from IN)>>=
${DOC}/contfrac.spad.dvi: ${IN}/contfrac.spad.pamphlet
	@ echo 0 making ${DOC}/contfrac.spad.dvi from ${IN}/contfrac.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/contfrac.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} contfrac.spad ; \
	rm -f ${DOC}/contfrac.spad.pamphlet ; \
	rm -f ${DOC}/contfrac.spad.tex ; \
	rm -f ${DOC}/contfrac.spad )

@
\subsection{cont.spad \cite{1}}
<<cont.spad (SPAD from IN)>>=
${MID}/cont.spad: ${IN}/cont.spad.pamphlet
	@ echo 0 making ${MID}/cont.spad from ${IN}/cont.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/cont.spad.pamphlet >cont.spad )

@
<<ESCONT.o (O from NRLIB)>>=
${OUT}/ESCONT.o: ${MID}/ESCONT.NRLIB
	@ echo 0 making ${OUT}/ESCONT.o from ${MID}/ESCONT.NRLIB
	@ cp ${MID}/ESCONT.NRLIB/code.o ${OUT}/ESCONT.o

@
<<ESCONT.NRLIB (NRLIB from MID)>>=
${MID}/ESCONT.NRLIB: ${MID}/ESCONT.spad
	@ echo 0 making ${MID}/ESCONT.NRLIB from ${MID}/ESCONT.spad
	@ (cd ${MID} ; 	echo ')co ESCONT.spad' | ${INTERPSYS} )

@
<<ESCONT.spad (SPAD from IN)>>=
${MID}/ESCONT.spad: ${IN}/cont.spad.pamphlet
	@ echo 0 making ${MID}/ESCONT.spad from ${IN}/cont.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ESCONT.NRLIB ; \
	${SPADBIN}/notangle -R"package ESCONT ExpertSystemContinuityPackage" ${IN}/cont.spad.pamphlet >ESCONT.spad )

@
<<ESCONT1.o (O from NRLIB)>>=
${OUT}/ESCONT1.o: ${MID}/ESCONT1.NRLIB
	@ echo 0 making ${OUT}/ESCONT1.o from ${MID}/ESCONT1.NRLIB
	@ cp ${MID}/ESCONT1.NRLIB/code.o ${OUT}/ESCONT1.o

@
<<ESCONT1.NRLIB (NRLIB from MID)>>=
${MID}/ESCONT1.NRLIB: ${MID}/ESCONT1.spad
	@ echo 0 making ${MID}/ESCONT1.NRLIB from ${MID}/ESCONT1.spad
	@ (cd ${MID} ; 	echo ')co ESCONT1.spad' | ${INTERPSYS} )

@
<<ESCONT1.spad (SPAD from IN)>>=
${MID}/ESCONT1.spad: ${IN}/cont.spad.pamphlet
	@ echo 0 making ${MID}/ESCONT1.spad from ${IN}/cont.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ESCONT1.NRLIB ; \
	${SPADBIN}/notangle -R"package ESCONT1 ExpertSystemContinuityPackage1" ${IN}/cont.spad.pamphlet >ESCONT1.spad )

@
<<cont.spad.dvi (DOC from IN)>>=
${DOC}/cont.spad.dvi: ${IN}/cont.spad.pamphlet
	@ echo 0 making ${DOC}/cont.spad.dvi from ${IN}/cont.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/cont.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} cont.spad ; \
	rm -f ${DOC}/cont.spad.pamphlet ; \
	rm -f ${DOC}/cont.spad.tex ; \
	rm -f ${DOC}/cont.spad )

@
\subsection{coordsys.spad \cite{1}}
<<coordsys.spad (SPAD from IN)>>=
${MID}/coordsys.spad: ${IN}/coordsys.spad.pamphlet
	@ echo 0 making ${MID}/coordsys.spad from ${IN}/coordsys.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/coordsys.spad.pamphlet >coordsys.spad )

@
<<COORDSYS.o (O from NRLIB)>>=
${OUT}/COORDSYS.o: ${MID}/COORDSYS.NRLIB
	@ echo 0 making ${OUT}/COORDSYS.o from ${MID}/COORDSYS.NRLIB
	@ cp ${MID}/COORDSYS.NRLIB/code.o ${OUT}/COORDSYS.o

@
<<COORDSYS.NRLIB (NRLIB from MID)>>=
${MID}/COORDSYS.NRLIB: ${MID}/COORDSYS.spad
	@ echo 0 making ${MID}/COORDSYS.NRLIB from ${MID}/COORDSYS.spad
	@ (cd ${MID} ; 	echo ')co COORDSYS.spad' | ${INTERPSYS} )

@
<<COORDSYS.spad (SPAD from IN)>>=
${MID}/COORDSYS.spad: ${IN}/coordsys.spad.pamphlet
	@ echo 0 making ${MID}/COORDSYS.spad from ${IN}/coordsys.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COORDSYS.NRLIB ; \
	${SPADBIN}/notangle -R"package COORDSYS CoordinateSystems" ${IN}/coordsys.spad.pamphlet >COORDSYS.spad )

@
<<coordsys.spad.dvi (DOC from IN)>>=
${DOC}/coordsys.spad.dvi: ${IN}/coordsys.spad.pamphlet
	@ echo 0 making ${DOC}/coordsys.spad.dvi from ${IN}/coordsys.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/coordsys.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} coordsys.spad ; \
	rm -f ${DOC}/coordsys.spad.pamphlet ; \
	rm -f ${DOC}/coordsys.spad.tex ; \
	rm -f ${DOC}/coordsys.spad )

@
\subsection{cra.spad \cite{1}}
<<cra.spad (SPAD from IN)>>=
${MID}/cra.spad: ${IN}/cra.spad.pamphlet
	@ echo 0 making ${MID}/cra.spad from ${IN}/cra.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/cra.spad.pamphlet >cra.spad )

@
<<CRAPACK.o (O from NRLIB)>>=
${OUT}/CRAPACK.o: ${MID}/CRAPACK.NRLIB
	@ echo 0 making ${OUT}/CRAPACK.o from ${MID}/CRAPACK.NRLIB
	@ cp ${MID}/CRAPACK.NRLIB/code.o ${OUT}/CRAPACK.o

@
<<CRAPACK.NRLIB (NRLIB from MID)>>=
${MID}/CRAPACK.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/CRAPACK.spad
	@ echo 0 making ${MID}/CRAPACK.NRLIB from ${MID}/CRAPACK.spad
	@ (cd ${MID} ; 	echo ')co CRAPACK.spad' | ${INTERPSYS} )

@
<<CRAPACK.spad (SPAD from IN)>>=
${MID}/CRAPACK.spad: ${IN}/cra.spad.pamphlet
	@ echo 0 making ${MID}/CRAPACK.spad from ${IN}/cra.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CRAPACK.NRLIB ; \
	${SPADBIN}/notangle -R"package CRAPACK CRApackage" ${IN}/cra.spad.pamphlet >CRAPACK.spad )

@
<<cra.spad.dvi (DOC from IN)>>=
${DOC}/cra.spad.dvi: ${IN}/cra.spad.pamphlet
	@ echo 0 making ${DOC}/cra.spad.dvi from ${IN}/cra.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/cra.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} cra.spad ; \
	rm -f ${DOC}/cra.spad.pamphlet ; \
	rm -f ${DOC}/cra.spad.tex ; \
	rm -f ${DOC}/cra.spad )

@
\subsection{crfp.spad \cite{1}}
<<crfp.spad (SPAD from IN)>>=
${MID}/crfp.spad: ${IN}/crfp.spad.pamphlet
	@ echo 0 making ${MID}/crfp.spad from ${IN}/crfp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/crfp.spad.pamphlet >crfp.spad )

@
<<CRFP.o (O from NRLIB)>>=
${OUT}/CRFP.o: ${MID}/CRFP.NRLIB
	@ echo 0 making ${OUT}/CRFP.o from ${MID}/CRFP.NRLIB
	@ cp ${MID}/CRFP.NRLIB/code.o ${OUT}/CRFP.o

@
<<CRFP.NRLIB (NRLIB from MID)>>=
${MID}/CRFP.NRLIB: ${MID}/CRFP.spad
	@ echo 0 making ${MID}/CRFP.NRLIB from ${MID}/CRFP.spad
	@ (cd ${MID} ; 	echo ')co CRFP.spad' | ${INTERPSYS} )

@
<<CRFP.spad (SPAD from IN)>>=
${MID}/CRFP.spad: ${IN}/crfp.spad.pamphlet
	@ echo 0 making ${MID}/CRFP.spad from ${IN}/crfp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CRFP.NRLIB ; \
	${SPADBIN}/notangle -R"package CRFP ComplexRootFindingPackage" ${IN}/crfp.spad.pamphlet >CRFP.spad )

@
<<crfp.spad.dvi (DOC from IN)>>=
${DOC}/crfp.spad.dvi: ${IN}/crfp.spad.pamphlet
	@ echo 0 making ${DOC}/crfp.spad.dvi from ${IN}/crfp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/crfp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} crfp.spad ; \
	rm -f ${DOC}/crfp.spad.pamphlet ; \
	rm -f ${DOC}/crfp.spad.tex ; \
	rm -f ${DOC}/crfp.spad )

@
\subsection{curve.spad \cite{1}}
<<curve.spad (SPAD from IN)>>=
${MID}/curve.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/curve.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/curve.spad.pamphlet >curve.spad )

@
<<ALGFF.o (O from NRLIB)>>=
${OUT}/ALGFF.o: ${MID}/ALGFF.NRLIB
	@ echo 0 making ${OUT}/ALGFF.o from ${MID}/ALGFF.NRLIB
	@ cp ${MID}/ALGFF.NRLIB/code.o ${OUT}/ALGFF.o

@
<<ALGFF.NRLIB (NRLIB from MID)>>=
${MID}/ALGFF.NRLIB: ${MID}/ALGFF.spad
	@ echo 0 making ${MID}/ALGFF.NRLIB from ${MID}/ALGFF.spad
	@ (cd ${MID} ; 	echo ')co ALGFF.spad' | ${INTERPSYS} )

@
<<ALGFF.spad (SPAD from IN)>>=
${MID}/ALGFF.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/ALGFF.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGFF.NRLIB ; \
	${SPADBIN}/notangle -R"domain ALGFF AlgebraicFunctionField" ${IN}/curve.spad.pamphlet >ALGFF.spad )

@
<<CHVAR.o (O from NRLIB)>>=
${OUT}/CHVAR.o: ${MID}/CHVAR.NRLIB
	@ echo 0 making ${OUT}/CHVAR.o from ${MID}/CHVAR.NRLIB
	@ cp ${MID}/CHVAR.NRLIB/code.o ${OUT}/CHVAR.o

@
<<CHVAR.NRLIB (NRLIB from MID)>>=
${MID}/CHVAR.NRLIB: ${MID}/CHVAR.spad
	@ echo 0 making ${MID}/CHVAR.NRLIB from ${MID}/CHVAR.spad
	@ (cd ${MID} ; 	echo ')co CHVAR.spad' | ${INTERPSYS} )

@
<<CHVAR.spad (SPAD from IN)>>=
${MID}/CHVAR.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/CHVAR.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CHVAR.NRLIB ; \
	${SPADBIN}/notangle -R"package CHVAR ChangeOfVariable" ${IN}/curve.spad.pamphlet >CHVAR.spad )

@
<<FFCAT-.o (O from NRLIB)>>=
${OUT}/FFCAT-.o: ${MID}/FFCAT.NRLIB
	@ echo 0 making ${OUT}/FFCAT-.o from ${MID}/FFCAT-.NRLIB
	@ cp ${MID}/FFCAT-.NRLIB/code.o ${OUT}/FFCAT-.o

@
<<FFCAT-.NRLIB (NRLIB from MID)>>=
${MID}/FFCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/FFCAT.spad 
	@ echo 0 making ${MID}/FFCAT-.NRLIB from ${MID}/FFCAT.spad
	@ (cd ${MID} ; 	echo ')co FFCAT.spad' | ${INTERPSYS} )

@
<<FFCAT.o (O from NRLIB)>>=
${OUT}/FFCAT.o: ${MID}/FFCAT.NRLIB
	@ echo 0 making ${OUT}/FFCAT.o from ${MID}/FFCAT.NRLIB
	@ cp ${MID}/FFCAT.NRLIB/code.o ${OUT}/FFCAT.o

@
<<FFCAT.NRLIB (NRLIB from MID)>>=
${MID}/FFCAT.NRLIB: ${MID}/FFCAT.spad
	@ echo 0 making ${MID}/FFCAT.NRLIB from ${MID}/FFCAT.spad
	@ (cd ${MID} ; 	echo ')co FFCAT.spad' | ${INTERPSYS} )

@
<<FFCAT.spad (SPAD from IN)>>=
${MID}/FFCAT.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/FFCAT.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category FFCAT FunctionFieldCategory" ${IN}/curve.spad.pamphlet >FFCAT.spad )

@
<<FFCAT2.o (O from NRLIB)>>=
${OUT}/FFCAT2.o: ${MID}/FFCAT2.NRLIB
	@ echo 0 making ${OUT}/FFCAT2.o from ${MID}/FFCAT2.NRLIB
	@ cp ${MID}/FFCAT2.NRLIB/code.o ${OUT}/FFCAT2.o

@
<<FFCAT2.NRLIB (NRLIB from MID)>>=
${MID}/FFCAT2.NRLIB: ${MID}/FFCAT2.spad
	@ echo 0 making ${MID}/FFCAT2.NRLIB from ${MID}/FFCAT2.spad
	@ (cd ${MID} ; 	echo ')co FFCAT2.spad' | ${INTERPSYS} )

@
<<FFCAT2.spad (SPAD from IN)>>=
${MID}/FFCAT2.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/FFCAT2.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFCAT2.NRLIB ; \
	${SPADBIN}/notangle -R"package FFCAT2 FunctionFieldCategoryFunctions2" ${IN}/curve.spad.pamphlet >FFCAT2.spad )

@
<<MMAP.o (O from NRLIB)>>=
${OUT}/MMAP.o: ${MID}/MMAP.NRLIB
	@ echo 0 making ${OUT}/MMAP.o from ${MID}/MMAP.NRLIB
	@ cp ${MID}/MMAP.NRLIB/code.o ${OUT}/MMAP.o

@
<<MMAP.NRLIB (NRLIB from MID)>>=
${MID}/MMAP.NRLIB: ${MID}/MMAP.spad
	@ echo 0 making ${MID}/MMAP.NRLIB from ${MID}/MMAP.spad
	@ (cd ${MID} ; 	echo ')co MMAP.spad' | ${INTERPSYS} )

@
<<MMAP.spad (SPAD from IN)>>=
${MID}/MMAP.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/MMAP.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MMAP.NRLIB ; \
	${SPADBIN}/notangle -R"package MMAP MultipleMap" ${IN}/curve.spad.pamphlet >MMAP.spad )

@
<<RADFF.o (O from NRLIB)>>=
${OUT}/RADFF.o: ${MID}/RADFF.NRLIB
	@ echo 0 making ${OUT}/RADFF.o from ${MID}/RADFF.NRLIB
	@ cp ${MID}/RADFF.NRLIB/code.o ${OUT}/RADFF.o

@
<<RADFF.NRLIB (NRLIB from MID)>>=
${MID}/RADFF.NRLIB: ${MID}/RADFF.spad
	@ echo 0 making ${MID}/RADFF.NRLIB from ${MID}/RADFF.spad
	@ (cd ${MID} ; 	echo ')co RADFF.spad' | ${INTERPSYS} )

@
<<RADFF.spad (SPAD from IN)>>=
${MID}/RADFF.spad: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${MID}/RADFF.spad from ${IN}/curve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RADFF.NRLIB ; \
	${SPADBIN}/notangle -R"domain RADFF RadicalFunctionField" ${IN}/curve.spad.pamphlet >RADFF.spad )

@
<<curve.spad.dvi (DOC from IN)>>=
${DOC}/curve.spad.dvi: ${IN}/curve.spad.pamphlet
	@ echo 0 making ${DOC}/curve.spad.dvi from ${IN}/curve.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/curve.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} curve.spad ; \
	rm -f ${DOC}/curve.spad.pamphlet ; \
	rm -f ${DOC}/curve.spad.tex ; \
	rm -f ${DOC}/curve.spad )

@
\subsection{cycles.spad \cite{1}}
<<cycles.spad (SPAD from IN)>>=
${MID}/cycles.spad: ${IN}/cycles.spad.pamphlet
	@ echo 0 making ${MID}/cycles.spad from ${IN}/cycles.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/cycles.spad.pamphlet >cycles.spad )

@
<<CYCLES.o (O from NRLIB)>>=
${OUT}/CYCLES.o: ${MID}/CYCLES.NRLIB
	@ echo 0 making ${OUT}/CYCLES.o from ${MID}/CYCLES.NRLIB
	@ cp ${MID}/CYCLES.NRLIB/code.o ${OUT}/CYCLES.o

@
<<CYCLES.NRLIB (NRLIB from MID)>>=
${MID}/CYCLES.NRLIB: ${MID}/CYCLES.spad
	@ echo 0 making ${MID}/CYCLES.NRLIB from ${MID}/CYCLES.spad
	@ (cd ${MID} ; 	echo ')co CYCLES.spad' | ${INTERPSYS} )

@
<<CYCLES.spad (SPAD from IN)>>=
${MID}/CYCLES.spad: ${IN}/cycles.spad.pamphlet
	@ echo 0 making ${MID}/CYCLES.spad from ${IN}/cycles.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CYCLES.NRLIB ; \
	${SPADBIN}/notangle -R"package CYCLES CycleIndicators" ${IN}/cycles.spad.pamphlet >CYCLES.spad )

@
<<EVALCYC.o (O from NRLIB)>>=
${OUT}/EVALCYC.o: ${MID}/EVALCYC.NRLIB
	@ echo 0 making ${OUT}/EVALCYC.o from ${MID}/EVALCYC.NRLIB
	@ cp ${MID}/EVALCYC.NRLIB/code.o ${OUT}/EVALCYC.o

@
<<EVALCYC.NRLIB (NRLIB from MID)>>=
${MID}/EVALCYC.NRLIB: ${MID}/EVALCYC.spad
	@ echo 0 making ${MID}/EVALCYC.NRLIB from ${MID}/EVALCYC.spad
	@ (cd ${MID} ; 	echo ')co EVALCYC.spad' | ${INTERPSYS} )

@
<<EVALCYC.spad (SPAD from IN)>>=
${MID}/EVALCYC.spad: ${IN}/cycles.spad.pamphlet
	@ echo 0 making ${MID}/EVALCYC.spad from ${IN}/cycles.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EVALCYC.NRLIB ; \
	${SPADBIN}/notangle -R"package EVALCYC EvaluateCycleIndicators" ${IN}/cycles.spad.pamphlet >EVALCYC.spad )

@
<<cycles.spad.dvi (DOC from IN)>>=
${DOC}/cycles.spad.dvi: ${IN}/cycles.spad.pamphlet
	@ echo 0 making ${DOC}/cycles.spad.dvi from ${IN}/cycles.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/cycles.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} cycles.spad ; \
	rm -f ${DOC}/cycles.spad.pamphlet ; \
	rm -f ${DOC}/cycles.spad.tex ; \
	rm -f ${DOC}/cycles.spad )

@
\subsection{cyclotom.spad \cite{1}}
<<cyclotom.spad (SPAD from IN)>>=
${MID}/cyclotom.spad: ${IN}/cyclotom.spad.pamphlet
	@ echo 0 making ${MID}/cyclotom.spad from ${IN}/cyclotom.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/cyclotom.spad.pamphlet >cyclotom.spad )

@
<<CYCLOTOM.o (O from NRLIB)>>=
${OUT}/CYCLOTOM.o: ${MID}/CYCLOTOM.NRLIB
	@ echo 0 making ${OUT}/CYCLOTOM.o from ${MID}/CYCLOTOM.NRLIB
	@ cp ${MID}/CYCLOTOM.NRLIB/code.o ${OUT}/CYCLOTOM.o

@
<<CYCLOTOM.NRLIB (NRLIB from MID)>>=
${MID}/CYCLOTOM.NRLIB: ${MID}/CYCLOTOM.spad
	@ echo 0 making ${MID}/CYCLOTOM.NRLIB from ${MID}/CYCLOTOM.spad
	@ (cd ${MID} ; 	echo ')co CYCLOTOM.spad' | ${INTERPSYS} )

@
<<CYCLOTOM.spad (SPAD from IN)>>=
${MID}/CYCLOTOM.spad: ${IN}/cyclotom.spad.pamphlet
	@ echo 0 making ${MID}/CYCLOTOM.spad from ${IN}/cyclotom.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CYCLOTOM.NRLIB ; \
	${SPADBIN}/notangle -R"package CYCLOTOM CyclotomicPolynomialPackage" ${IN}/cyclotom.spad.pamphlet >CYCLOTOM.spad )

@
<<cyclotom.spad.dvi (DOC from IN)>>=
${DOC}/cyclotom.spad.dvi: ${IN}/cyclotom.spad.pamphlet
	@ echo 0 making ${DOC}/cyclotom.spad.dvi from ${IN}/cyclotom.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/cyclotom.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} cyclotom.spad ; \
	rm -f ${DOC}/cyclotom.spad.pamphlet ; \
	rm -f ${DOC}/cyclotom.spad.tex ; \
	rm -f ${DOC}/cyclotom.spad )

@
\subsection{d01agents.spad \cite{1}}
<<d01agents.spad (SPAD from IN)>>=
${MID}/d01agents.spad: ${IN}/d01agents.spad.pamphlet
	@ echo 0 making ${MID}/d01agents.spad from ${IN}/d01agents.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d01agents.spad.pamphlet >d01agents.spad )

@
<<INTFTBL.o (O from NRLIB)>>=
${OUT}/INTFTBL.o: ${MID}/INTFTBL.NRLIB
	@ echo 0 making ${OUT}/INTFTBL.o from ${MID}/INTFTBL.NRLIB
	@ cp ${MID}/INTFTBL.NRLIB/code.o ${OUT}/INTFTBL.o

@
<<INTFTBL.NRLIB (NRLIB from MID)>>=
${MID}/INTFTBL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/INTFTBL.spad
	@ echo 0 making ${MID}/INTFTBL.NRLIB from ${MID}/INTFTBL.spad
	@ (cd ${MID} ; 	echo ')co INTFTBL.spad' | ${INTERPSYS} )

@
<<INTFTBL.spad (SPAD from IN)>>=
${MID}/INTFTBL.spad: ${IN}/d01agents.spad.pamphlet
	@ echo 0 making ${MID}/INTFTBL.spad from ${IN}/d01agents.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTFTBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain INTFTBL IntegrationFunctionsTable" ${IN}/d01agents.spad.pamphlet >INTFTBL.spad )

@
<<d01agents.spad.dvi (DOC from IN)>>=
${DOC}/d01agents.spad.dvi: ${IN}/d01agents.spad.pamphlet
	@ echo 0 making ${DOC}/d01agents.spad.dvi from ${IN}/d01agents.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d01agents.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d01agents.spad ; \
	rm -f ${DOC}/d01agents.spad.pamphlet ; \
	rm -f ${DOC}/d01agents.spad.tex ; \
	rm -f ${DOC}/d01agents.spad )

@
\subsection{d01Package.spad \cite{1}}
<<d01Package.spad (SPAD from IN)>>=
${MID}/d01Package.spad: ${IN}/d01Package.spad.pamphlet
	@ echo 0 making ${MID}/d01Package.spad from ${IN}/d01Package.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d01Package.spad.pamphlet >d01Package.spad )

@
<<INTPACK.o (O from NRLIB)>>=
${OUT}/INTPACK.o: ${MID}/INTPACK.NRLIB
	@ echo 0 making ${OUT}/INTPACK.o from ${MID}/INTPACK.NRLIB
	@ cp ${MID}/INTPACK.NRLIB/code.o ${OUT}/INTPACK.o

@
<<INTPACK.NRLIB (NRLIB from MID)>>=
${MID}/INTPACK.NRLIB: ${MID}/INTPACK.spad
	@ echo 0 making ${MID}/INTPACK.NRLIB from ${MID}/INTPACK.spad
	@ (cd ${MID} ; 	echo ')co INTPACK.spad' | ${INTERPSYS} )

@
<<INTPACK.spad (SPAD from IN)>>=
${MID}/INTPACK.spad: ${IN}/d01Package.spad.pamphlet
	@ echo 0 making ${MID}/INTPACK.spad from ${IN}/d01Package.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTPACK.NRLIB ; \
	${SPADBIN}/notangle -R"package INTPACK AnnaNumericalIntegrationPackage" ${IN}/d01Package.spad.pamphlet >INTPACK.spad )

@
<<d01Package.spad.dvi (DOC from IN)>>=
${DOC}/d01Package.spad.dvi: ${IN}/d01Package.spad.pamphlet
	@ echo 0 making ${DOC}/d01Package.spad.dvi from ${IN}/d01Package.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d01Package.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d01Package.spad ; \
	rm -f ${DOC}/d01Package.spad.pamphlet ; \
	rm -f ${DOC}/d01Package.spad.tex ; \
	rm -f ${DOC}/d01Package.spad )

@
\subsection{d01routine.spad \cite{1}}
<<d01routine.spad (SPAD from IN)>>=
${MID}/d01routine.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/d01routine.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d01routine.spad.pamphlet >d01routine.spad )

@
<<D01AJFA.o (O from NRLIB)>>=
${OUT}/D01AJFA.o: ${MID}/D01AJFA.NRLIB
	@ echo 0 making ${OUT}/D01AJFA.o from ${MID}/D01AJFA.NRLIB
	@ cp ${MID}/D01AJFA.NRLIB/code.o ${OUT}/D01AJFA.o

@
<<D01AJFA.NRLIB (NRLIB from MID)>>=
${MID}/D01AJFA.NRLIB: ${MID}/D01AJFA.spad
	@ echo 0 making ${MID}/D01AJFA.NRLIB from ${MID}/D01AJFA.spad
	@ (cd ${MID} ; 	echo ')co D01AJFA.spad' | ${INTERPSYS} )

@
<<D01AJFA.spad (SPAD from IN)>>=
${MID}/D01AJFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01AJFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01AJFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01AJFA d01ajfAnnaType" ${IN}/d01routine.spad.pamphlet >D01AJFA.spad )

@
<<D01AKFA.o (O from NRLIB)>>=
${OUT}/D01AKFA.o: ${MID}/D01AKFA.NRLIB
	@ echo 0 making ${OUT}/D01AKFA.o from ${MID}/D01AKFA.NRLIB
	@ cp ${MID}/D01AKFA.NRLIB/code.o ${OUT}/D01AKFA.o

@
<<D01AKFA.NRLIB (NRLIB from MID)>>=
${MID}/D01AKFA.NRLIB: ${MID}/D01AKFA.spad
	@ echo 0 making ${MID}/D01AKFA.NRLIB from ${MID}/D01AKFA.spad
	@ (cd ${MID} ; 	echo ')co D01AKFA.spad' | ${INTERPSYS} )

@
<<D01AKFA.spad (SPAD from IN)>>=
${MID}/D01AKFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01AKFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01AKFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01AKFA d01akfAnnaType" ${IN}/d01routine.spad.pamphlet >D01AKFA.spad )

@
<<D01ALFA.o (O from NRLIB)>>=
${OUT}/D01ALFA.o: ${MID}/D01ALFA.NRLIB
	@ echo 0 making ${OUT}/D01ALFA.o from ${MID}/D01ALFA.NRLIB
	@ cp ${MID}/D01ALFA.NRLIB/code.o ${OUT}/D01ALFA.o

@
<<D01ALFA.NRLIB (NRLIB from MID)>>=
${MID}/D01ALFA.NRLIB: ${MID}/D01ALFA.spad
	@ echo 0 making ${MID}/D01ALFA.NRLIB from ${MID}/D01ALFA.spad
	@ (cd ${MID} ; 	echo ')co D01ALFA.spad' | ${INTERPSYS} )

@
<<D01ALFA.spad (SPAD from IN)>>=
${MID}/D01ALFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01ALFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01ALFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01ALFA d01alfAnnaType" ${IN}/d01routine.spad.pamphlet >D01ALFA.spad )

@
<<D01AMFA.o (O from NRLIB)>>=
${OUT}/D01AMFA.o: ${MID}/D01AMFA.NRLIB
	@ echo 0 making ${OUT}/D01AMFA.o from ${MID}/D01AMFA.NRLIB
	@ cp ${MID}/D01AMFA.NRLIB/code.o ${OUT}/D01AMFA.o

@
<<D01AMFA.NRLIB (NRLIB from MID)>>=
${MID}/D01AMFA.NRLIB: ${MID}/D01AMFA.spad
	@ echo 0 making ${MID}/D01AMFA.NRLIB from ${MID}/D01AMFA.spad
	@ (cd ${MID} ; 	echo ')co D01AMFA.spad' | ${INTERPSYS} )

@
<<D01AMFA.spad (SPAD from IN)>>=
${MID}/D01AMFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01AMFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01AMFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01AMFA d01amfAnnaType" ${IN}/d01routine.spad.pamphlet >D01AMFA.spad )

@
<<D01ANFA.o (O from NRLIB)>>=
${OUT}/D01ANFA.o: ${MID}/D01ANFA.NRLIB
	@ echo 0 making ${OUT}/D01ANFA.o from ${MID}/D01ANFA.NRLIB
	@ cp ${MID}/D01ANFA.NRLIB/code.o ${OUT}/D01ANFA.o

@
<<D01ANFA.NRLIB (NRLIB from MID)>>=
${MID}/D01ANFA.NRLIB: ${MID}/D01ANFA.spad
	@ echo 0 making ${MID}/D01ANFA.NRLIB from ${MID}/D01ANFA.spad
	@ (cd ${MID} ; 	echo ')co D01ANFA.spad' | ${INTERPSYS} )

@
<<D01ANFA.spad (SPAD from IN)>>=
${MID}/D01ANFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01ANFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01ANFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01ANFA d01anfAnnaType" ${IN}/d01routine.spad.pamphlet >D01ANFA.spad )

@
<<D01APFA.o (O from NRLIB)>>=
${OUT}/D01APFA.o: ${MID}/D01APFA.NRLIB
	@ echo 0 making ${OUT}/D01APFA.o from ${MID}/D01APFA.NRLIB
	@ cp ${MID}/D01APFA.NRLIB/code.o ${OUT}/D01APFA.o

@
<<D01APFA.NRLIB (NRLIB from MID)>>=
${MID}/D01APFA.NRLIB: ${MID}/D01APFA.spad
	@ echo 0 making ${MID}/D01APFA.NRLIB from ${MID}/D01APFA.spad
	@ (cd ${MID} ; 	echo ')co D01APFA.spad' | ${INTERPSYS} )

@
<<D01APFA.spad (SPAD from IN)>>=
${MID}/D01APFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01APFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01APFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01APFA d01apfAnnaType" ${IN}/d01routine.spad.pamphlet >D01APFA.spad )

@
<<D01AQFA.o (O from NRLIB)>>=
${OUT}/D01AQFA.o: ${MID}/D01AQFA.NRLIB
	@ echo 0 making ${OUT}/D01AQFA.o from ${MID}/D01AQFA.NRLIB
	@ cp ${MID}/D01AQFA.NRLIB/code.o ${OUT}/D01AQFA.o

@
<<D01AQFA.NRLIB (NRLIB from MID)>>=
${MID}/D01AQFA.NRLIB: ${MID}/D01AQFA.spad
	@ echo 0 making ${MID}/D01AQFA.NRLIB from ${MID}/D01AQFA.spad
	@ (cd ${MID} ; 	echo ')co D01AQFA.spad' | ${INTERPSYS} )

@
<<D01AQFA.spad (SPAD from IN)>>=
${MID}/D01AQFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01AQFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01AQFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01AQFA d01aqfAnnaType" ${IN}/d01routine.spad.pamphlet >D01AQFA.spad )

@
<<D01ASFA.o (O from NRLIB)>>=
${OUT}/D01ASFA.o: ${MID}/D01ASFA.NRLIB
	@ echo 0 making ${OUT}/D01ASFA.o from ${MID}/D01ASFA.NRLIB
	@ cp ${MID}/D01ASFA.NRLIB/code.o ${OUT}/D01ASFA.o

@
<<D01ASFA.NRLIB (NRLIB from MID)>>=
${MID}/D01ASFA.NRLIB: ${MID}/D01ASFA.spad
	@ echo 0 making ${MID}/D01ASFA.NRLIB from ${MID}/D01ASFA.spad
	@ (cd ${MID} ; 	echo ')co D01ASFA.spad' | ${INTERPSYS} )

@
<<D01ASFA.spad (SPAD from IN)>>=
${MID}/D01ASFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01ASFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01ASFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01ASFA d01asfAnnaType" ${IN}/d01routine.spad.pamphlet >D01ASFA.spad )

@
<<D01FCFA.o (O from NRLIB)>>=
${OUT}/D01FCFA.o: ${MID}/D01FCFA.NRLIB
	@ echo 0 making ${OUT}/D01FCFA.o from ${MID}/D01FCFA.NRLIB
	@ cp ${MID}/D01FCFA.NRLIB/code.o ${OUT}/D01FCFA.o

@
<<D01FCFA.NRLIB (NRLIB from MID)>>=
${MID}/D01FCFA.NRLIB: ${MID}/D01FCFA.spad
	@ echo 0 making ${MID}/D01FCFA.NRLIB from ${MID}/D01FCFA.spad
	@ (cd ${MID} ; 	echo ')co D01FCFA.spad' | ${INTERPSYS} )

@
<<D01FCFA.spad (SPAD from IN)>>=
${MID}/D01FCFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01FCFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01FCFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01FCFA d01fcfAnnaType" ${IN}/d01routine.spad.pamphlet >D01FCFA.spad )

@
<<D01GBFA.o (O from NRLIB)>>=
${OUT}/D01GBFA.o: ${MID}/D01GBFA.NRLIB
	@ echo 0 making ${OUT}/D01GBFA.o from ${MID}/D01GBFA.NRLIB
	@ cp ${MID}/D01GBFA.NRLIB/code.o ${OUT}/D01GBFA.o

@
<<D01GBFA.NRLIB (NRLIB from MID)>>=
${MID}/D01GBFA.NRLIB: ${MID}/D01GBFA.spad
	@ echo 0 making ${MID}/D01GBFA.NRLIB from ${MID}/D01GBFA.spad
	@ (cd ${MID} ; 	echo ')co D01GBFA.spad' | ${INTERPSYS} )

@
<<D01GBFA.spad (SPAD from IN)>>=
${MID}/D01GBFA.spad: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${MID}/D01GBFA.spad from ${IN}/d01routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01GBFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01GBFA d01gbfAnnaType" ${IN}/d01routine.spad.pamphlet >D01GBFA.spad )

@
<<d01routine.spad.dvi (DOC from IN)>>=
${DOC}/d01routine.spad.dvi: ${IN}/d01routine.spad.pamphlet
	@ echo 0 making ${DOC}/d01routine.spad.dvi from ${IN}/d01routine.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d01routine.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d01routine.spad ; \
	rm -f ${DOC}/d01routine.spad.pamphlet ; \
	rm -f ${DOC}/d01routine.spad.tex ; \
	rm -f ${DOC}/d01routine.spad )

@
\subsection{d01.spad \cite{1}}
<<d01.spad (SPAD from IN)>>=
${MID}/d01.spad: ${IN}/d01.spad.pamphlet
	@ echo 0 making ${MID}/d01.spad from ${IN}/d01.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d01.spad.pamphlet >d01.spad )

@
<<NAGD01.o (O from NRLIB)>>=
${OUT}/NAGD01.o: ${MID}/NAGD01.NRLIB
	@ echo 0 making ${OUT}/NAGD01.o from ${MID}/NAGD01.NRLIB
	@ cp ${MID}/NAGD01.NRLIB/code.o ${OUT}/NAGD01.o

@
<<NAGD01.NRLIB (NRLIB from MID)>>=
${MID}/NAGD01.NRLIB: ${MID}/NAGD01.spad
	@ echo 0 making ${MID}/NAGD01.NRLIB from ${MID}/NAGD01.spad
	@ (cd ${MID} ; 	echo ')co NAGD01.spad' | ${INTERPSYS} )

@
<<NAGD01.spad (SPAD from IN)>>=
${MID}/NAGD01.spad: ${IN}/d01.spad.pamphlet
	@ echo 0 making ${MID}/NAGD01.spad from ${IN}/d01.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGD01.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGD01 NagIntegrationPackage" ${IN}/d01.spad.pamphlet >NAGD01.spad )

@
<<d01.spad.dvi (DOC from IN)>>=
${DOC}/d01.spad.dvi: ${IN}/d01.spad.pamphlet
	@ echo 0 making ${DOC}/d01.spad.dvi from ${IN}/d01.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d01.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d01.spad ; \
	rm -f ${DOC}/d01.spad.pamphlet ; \
	rm -f ${DOC}/d01.spad.tex ; \
	rm -f ${DOC}/d01.spad )

@
\subsection{d01transform.spad \cite{1}}
<<d01transform.spad (SPAD from IN)>>=
${MID}/d01transform.spad: ${IN}/d01transform.spad.pamphlet
	@ echo 0 making ${MID}/d01transform.spad from ${IN}/d01transform.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d01transform.spad.pamphlet >d01transform.spad )

@
<<D01TRNS.o (O from NRLIB)>>=
${OUT}/D01TRNS.o: ${MID}/D01TRNS.NRLIB
	@ echo 0 making ${OUT}/D01TRNS.o from ${MID}/D01TRNS.NRLIB
	@ cp ${MID}/D01TRNS.NRLIB/code.o ${OUT}/D01TRNS.o

@
<<D01TRNS.NRLIB (NRLIB from MID)>>=
${MID}/D01TRNS.NRLIB: ${MID}/D01TRNS.spad
	@ echo 0 making ${MID}/D01TRNS.NRLIB from ${MID}/D01TRNS.spad
	@ (cd ${MID} ; 	echo ')co D01TRNS.spad' | ${INTERPSYS} )

@
<<D01TRNS.spad (SPAD from IN)>>=
${MID}/D01TRNS.spad: ${IN}/d01transform.spad.pamphlet
	@ echo 0 making ${MID}/D01TRNS.spad from ${IN}/d01transform.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D01TRNS.NRLIB ; \
	${SPADBIN}/notangle -R"domain D01TRNS d01TransformFunctionType" ${IN}/d01transform.spad.pamphlet >D01TRNS.spad )

@
<<d01transform.spad.dvi (DOC from IN)>>=
${DOC}/d01transform.spad.dvi: ${IN}/d01transform.spad.pamphlet
	@ echo 0 making ${DOC}/d01transform.spad.dvi from ${IN}/d01transform.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d01transform.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d01transform.spad ; \
	rm -f ${DOC}/d01transform.spad.pamphlet ; \
	rm -f ${DOC}/d01transform.spad.tex ; \
	rm -f ${DOC}/d01transform.spad )

@
\subsection{d01weights.spad \cite{1}}
<<d01weights.spad (SPAD from IN)>>=
${MID}/d01weights.spad: ${IN}/d01weights.spad.pamphlet
	@ echo 0 making ${MID}/d01weights.spad from ${IN}/d01weights.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d01weights.spad.pamphlet >d01weights.spad )

@
<<d01weights.spad.dvi (DOC from IN)>>=
${DOC}/d01weights.spad.dvi: ${IN}/d01weights.spad.pamphlet
	@ echo 0 making ${DOC}/d01weights.spad.dvi from ${IN}/d01weights.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d01weights.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d01weights.spad ; \
	rm -f ${DOC}/d01weights.spad.pamphlet ; \
	rm -f ${DOC}/d01weights.spad.tex ; \
	rm -f ${DOC}/d01weights.spad )

@
\subsection{d02agents.spad \cite{1}}
<<d02agents.spad (SPAD from IN)>>=
${MID}/d02agents.spad: ${IN}/d02agents.spad.pamphlet
	@ echo 0 making ${MID}/d02agents.spad from ${IN}/d02agents.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d02agents.spad.pamphlet >d02agents.spad )

@
<<D02AGNT.o (O from NRLIB)>>=
${OUT}/D02AGNT.o: ${MID}/D02AGNT.NRLIB
	@ echo 0 making ${OUT}/D02AGNT.o from ${MID}/D02AGNT.NRLIB
	@ cp ${MID}/D02AGNT.NRLIB/code.o ${OUT}/D02AGNT.o

@
<<D02AGNT.NRLIB (NRLIB from MID)>>=
${MID}/D02AGNT.NRLIB: ${MID}/D02AGNT.spad
	@ echo 0 making ${MID}/D02AGNT.NRLIB from ${MID}/D02AGNT.spad
	@ (cd ${MID} ; 	echo ')co D02AGNT.spad' | ${INTERPSYS} )

@
<<D02AGNT.spad (SPAD from IN)>>=
${MID}/D02AGNT.spad: ${IN}/d02agents.spad.pamphlet
	@ echo 0 making ${MID}/D02AGNT.spad from ${IN}/d02agents.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D02AGNT.NRLIB ; \
	${SPADBIN}/notangle -R"package D02AGNT d02AgentsPackage" ${IN}/d02agents.spad.pamphlet >D02AGNT.spad )

@
<<ODEIFTBL.o (O from NRLIB)>>=
${OUT}/ODEIFTBL.o: ${MID}/ODEIFTBL.NRLIB
	@ echo 0 making ${OUT}/ODEIFTBL.o from ${MID}/ODEIFTBL.NRLIB
	@ cp ${MID}/ODEIFTBL.NRLIB/code.o ${OUT}/ODEIFTBL.o

@
<<ODEIFTBL.NRLIB (NRLIB from MID)>>=
${MID}/ODEIFTBL.NRLIB: ${MID}/ODEIFTBL.spad
	@ echo 0 making ${MID}/ODEIFTBL.NRLIB from ${MID}/ODEIFTBL.spad
	@ (cd ${MID} ; 	echo ')co ODEIFTBL.spad' | ${INTERPSYS} )

@
<<ODEIFTBL.spad (SPAD from IN)>>=
${MID}/ODEIFTBL.spad: ${IN}/d02agents.spad.pamphlet
	@ echo 0 making ${MID}/ODEIFTBL.spad from ${IN}/d02agents.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEIFTBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain ODEIFTBL ODEIntensityFunctionsTable" ${IN}/d02agents.spad.pamphlet >ODEIFTBL.spad )

@
<<d02agents.spad.dvi (DOC from IN)>>=
${DOC}/d02agents.spad.dvi: ${IN}/d02agents.spad.pamphlet
	@ echo 0 making ${DOC}/d02agents.spad.dvi from ${IN}/d02agents.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d02agents.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d02agents.spad ; \
	rm -f ${DOC}/d02agents.spad.pamphlet ; \
	rm -f ${DOC}/d02agents.spad.tex ; \
	rm -f ${DOC}/d02agents.spad )

@
\subsection{d02Package.spad \cite{1}}
<<d02Package.spad (SPAD from IN)>>=
${MID}/d02Package.spad: ${IN}/d02Package.spad.pamphlet
	@ echo 0 making ${MID}/d02Package.spad from ${IN}/d02Package.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d02Package.spad.pamphlet >d02Package.spad )

@
<<ODEPACK.o (O from NRLIB)>>=
${OUT}/ODEPACK.o: ${MID}/ODEPACK.NRLIB
	@ echo 0 making ${OUT}/ODEPACK.o from ${MID}/ODEPACK.NRLIB
	@ cp ${MID}/ODEPACK.NRLIB/code.o ${OUT}/ODEPACK.o

@
<<ODEPACK.NRLIB (NRLIB from MID)>>=
${MID}/ODEPACK.NRLIB: ${MID}/ODEPACK.spad
	@ echo 0 making ${MID}/ODEPACK.NRLIB from ${MID}/ODEPACK.spad
	@ (cd ${MID} ; 	echo ')co ODEPACK.spad' | ${INTERPSYS} )

@
<<ODEPACK.spad (SPAD from IN)>>=
${MID}/ODEPACK.spad: ${IN}/d02Package.spad.pamphlet
	@ echo 0 making ${MID}/ODEPACK.spad from ${IN}/d02Package.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEPACK.NRLIB ; \
	${SPADBIN}/notangle -R"package ODEPACK AnnaOrdinaryDifferentialEquationPackage" ${IN}/d02Package.spad.pamphlet >ODEPACK.spad )

@
<<d02Package.spad.dvi (DOC from IN)>>=
${DOC}/d02Package.spad.dvi: ${IN}/d02Package.spad.pamphlet
	@ echo 0 making ${DOC}/d02Package.spad.dvi from ${IN}/d02Package.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d02Package.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d02Package.spad ; \
	rm -f ${DOC}/d02Package.spad.pamphlet ; \
	rm -f ${DOC}/d02Package.spad.tex ; \
	rm -f ${DOC}/d02Package.spad )

@
\subsection{d02routine.spad \cite{1}}
<<d02routine.spad (SPAD from IN)>>=
${MID}/d02routine.spad: ${IN}/d02routine.spad.pamphlet
	@ echo 0 making ${MID}/d02routine.spad from ${IN}/d02routine.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d02routine.spad.pamphlet >d02routine.spad )

@
<<D02BBFA.o (O from NRLIB)>>=
${OUT}/D02BBFA.o: ${MID}/D02BBFA.NRLIB
	@ echo 0 making ${OUT}/D02BBFA.o from ${MID}/D02BBFA.NRLIB
	@ cp ${MID}/D02BBFA.NRLIB/code.o ${OUT}/D02BBFA.o

@
<<D02BBFA.NRLIB (NRLIB from MID)>>=
${MID}/D02BBFA.NRLIB: ${MID}/D02BBFA.spad
	@ echo 0 making ${MID}/D02BBFA.NRLIB from ${MID}/D02BBFA.spad
	@ (cd ${MID} ; 	echo ')co D02BBFA.spad' | ${INTERPSYS} )

@
<<D02BBFA.spad (SPAD from IN)>>=
${MID}/D02BBFA.spad: ${IN}/d02routine.spad.pamphlet
	@ echo 0 making ${MID}/D02BBFA.spad from ${IN}/d02routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D02BBFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D02BBFA d02bbfAnnaType" ${IN}/d02routine.spad.pamphlet >D02BBFA.spad )

@
<<D02BHFA.o (O from NRLIB)>>=
${OUT}/D02BHFA.o: ${MID}/D02BHFA.NRLIB
	@ echo 0 making ${OUT}/D02BHFA.o from ${MID}/D02BHFA.NRLIB
	@ cp ${MID}/D02BHFA.NRLIB/code.o ${OUT}/D02BHFA.o

@
<<D02BHFA.NRLIB (NRLIB from MID)>>=
${MID}/D02BHFA.NRLIB: ${MID}/D02BHFA.spad
	@ echo 0 making ${MID}/D02BHFA.NRLIB from ${MID}/D02BHFA.spad
	@ (cd ${MID} ; 	echo ')co D02BHFA.spad' | ${INTERPSYS} )

@
<<D02BHFA.spad (SPAD from IN)>>=
${MID}/D02BHFA.spad: ${IN}/d02routine.spad.pamphlet
	@ echo 0 making ${MID}/D02BHFA.spad from ${IN}/d02routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D02BHFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D02BHFA d02bhfAnnaType" ${IN}/d02routine.spad.pamphlet >D02BHFA.spad )

@
<<D02CJFA.o (O from NRLIB)>>=
${OUT}/D02CJFA.o: ${MID}/D02CJFA.NRLIB
	@ echo 0 making ${OUT}/D02CJFA.o from ${MID}/D02CJFA.NRLIB
	@ cp ${MID}/D02CJFA.NRLIB/code.o ${OUT}/D02CJFA.o

@
<<D02CJFA.NRLIB (NRLIB from MID)>>=
${MID}/D02CJFA.NRLIB: ${MID}/D02CJFA.spad
	@ echo 0 making ${MID}/D02CJFA.NRLIB from ${MID}/D02CJFA.spad
	@ (cd ${MID} ; 	echo ')co D02CJFA.spad' | ${INTERPSYS} )

@
<<D02CJFA.spad (SPAD from IN)>>=
${MID}/D02CJFA.spad: ${IN}/d02routine.spad.pamphlet
	@ echo 0 making ${MID}/D02CJFA.spad from ${IN}/d02routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D02CJFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D02CJFA d02cjfAnnaType" ${IN}/d02routine.spad.pamphlet >D02CJFA.spad )

@
<<D02EJFA.o (O from NRLIB)>>=
${OUT}/D02EJFA.o: ${MID}/D02EJFA.NRLIB
	@ echo 0 making ${OUT}/D02EJFA.o from ${MID}/D02EJFA.NRLIB
	@ cp ${MID}/D02EJFA.NRLIB/code.o ${OUT}/D02EJFA.o

@
<<D02EJFA.NRLIB (NRLIB from MID)>>=
${MID}/D02EJFA.NRLIB: ${MID}/D02EJFA.spad
	@ echo 0 making ${MID}/D02EJFA.NRLIB from ${MID}/D02EJFA.spad
	@ (cd ${MID} ; 	echo ')co D02EJFA.spad' | ${INTERPSYS} )

@
<<D02EJFA.spad (SPAD from IN)>>=
${MID}/D02EJFA.spad: ${IN}/d02routine.spad.pamphlet
	@ echo 0 making ${MID}/D02EJFA.spad from ${IN}/d02routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D02EJFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D02EJFA d02ejfAnnaType" ${IN}/d02routine.spad.pamphlet >D02EJFA.spad )

@
<<d02routine.spad.dvi (DOC from IN)>>=
${DOC}/d02routine.spad.dvi: ${IN}/d02routine.spad.pamphlet
	@ echo 0 making ${DOC}/d02routine.spad.dvi from ${IN}/d02routine.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d02routine.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d02routine.spad ; \
	rm -f ${DOC}/d02routine.spad.pamphlet ; \
	rm -f ${DOC}/d02routine.spad.tex ; \
	rm -f ${DOC}/d02routine.spad )

@
\subsection{d02.spad \cite{1}}
<<d02.spad (SPAD from IN)>>=
${MID}/d02.spad: ${IN}/d02.spad.pamphlet
	@ echo 0 making ${MID}/d02.spad from ${IN}/d02.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d02.spad.pamphlet >d02.spad )

@
<<NAGD02.o (O from NRLIB)>>=
${OUT}/NAGD02.o: ${MID}/NAGD02.NRLIB
	@ echo 0 making ${OUT}/NAGD02.o from ${MID}/NAGD02.NRLIB
	@ cp ${MID}/NAGD02.NRLIB/code.o ${OUT}/NAGD02.o

@
<<NAGD02.NRLIB (NRLIB from MID)>>=
${MID}/NAGD02.NRLIB: ${MID}/NAGD02.spad
	@ echo 0 making ${MID}/NAGD02.NRLIB from ${MID}/NAGD02.spad
	@ (cd ${MID} ; 	echo ')co NAGD02.spad' | ${INTERPSYS} )

@
<<NAGD02.spad (SPAD from IN)>>=
${MID}/NAGD02.spad: ${IN}/d02.spad.pamphlet
	@ echo 0 making ${MID}/NAGD02.spad from ${IN}/d02.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGD02.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGD02 NagOrdinaryDifferentialEquationsPackage" ${IN}/d02.spad.pamphlet >NAGD02.spad )

@
<<d02.spad.dvi (DOC from IN)>>=
${DOC}/d02.spad.dvi: ${IN}/d02.spad.pamphlet
	@ echo 0 making ${DOC}/d02.spad.dvi from ${IN}/d02.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d02.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d02.spad ; \
	rm -f ${DOC}/d02.spad.pamphlet ; \
	rm -f ${DOC}/d02.spad.tex ; \
	rm -f ${DOC}/d02.spad )

@
\subsection{d03agents.spad \cite{1}}
<<d03agents.spad (SPAD from IN)>>=
${MID}/d03agents.spad: ${IN}/d03agents.spad.pamphlet
	@ echo 0 making ${MID}/d03agents.spad from ${IN}/d03agents.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d03agents.spad.pamphlet >d03agents.spad )

@
<<D03AGNT.o (O from NRLIB)>>=
${OUT}/D03AGNT.o: ${MID}/D03AGNT.NRLIB
	@ echo 0 making ${OUT}/D03AGNT.o from ${MID}/D03AGNT.NRLIB
	@ cp ${MID}/D03AGNT.NRLIB/code.o ${OUT}/D03AGNT.o

@
<<D03AGNT.NRLIB (NRLIB from MID)>>=
${MID}/D03AGNT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/D03AGNT.spad
	@ echo 0 making ${MID}/D03AGNT.NRLIB from ${MID}/D03AGNT.spad
	@ (cd ${MID} ; 	echo ')co D03AGNT.spad' | ${INTERPSYS} )

@
<<D03AGNT.spad (SPAD from IN)>>=
${MID}/D03AGNT.spad: ${IN}/d03agents.spad.pamphlet
	@ echo 0 making ${MID}/D03AGNT.spad from ${IN}/d03agents.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D03AGNT.NRLIB ; \
	${SPADBIN}/notangle -R"package D03AGNT d03AgentsPackage" ${IN}/d03agents.spad.pamphlet >D03AGNT.spad )

@
<<d03agents.spad.dvi (DOC from IN)>>=
${DOC}/d03agents.spad.dvi: ${IN}/d03agents.spad.pamphlet
	@ echo 0 making ${DOC}/d03agents.spad.dvi from ${IN}/d03agents.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d03agents.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d03agents.spad ; \
	rm -f ${DOC}/d03agents.spad.pamphlet ; \
	rm -f ${DOC}/d03agents.spad.tex ; \
	rm -f ${DOC}/d03agents.spad )

@
\subsection{d03Package.spad \cite{1}}
<<d03Package.spad (SPAD from IN)>>=
${MID}/d03Package.spad: ${IN}/d03Package.spad.pamphlet
	@ echo 0 making ${MID}/d03Package.spad from ${IN}/d03Package.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d03Package.spad.pamphlet >d03Package.spad )

@
<<PDEPACK.o (O from NRLIB)>>=
${OUT}/PDEPACK.o: ${MID}/PDEPACK.NRLIB
	@ echo 0 making ${OUT}/PDEPACK.o from ${MID}/PDEPACK.NRLIB
	@ cp ${MID}/PDEPACK.NRLIB/code.o ${OUT}/PDEPACK.o

@
<<PDEPACK.NRLIB (NRLIB from MID)>>=
${MID}/PDEPACK.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PDEPACK.spad
	@ echo 0 making ${MID}/PDEPACK.NRLIB from ${MID}/PDEPACK.spad
	@ (cd ${MID} ; 	echo ')co PDEPACK.spad' | ${INTERPSYS} )

@
<<PDEPACK.spad (SPAD from IN)>>=
${MID}/PDEPACK.spad: ${IN}/d03Package.spad.pamphlet
	@ echo 0 making ${MID}/PDEPACK.spad from ${IN}/d03Package.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PDEPACK.NRLIB ; \
	${SPADBIN}/notangle -R"package PDEPACK AnnaPartialDifferentialEquationPackage" ${IN}/d03Package.spad.pamphlet >PDEPACK.spad )

@
<<d03Package.spad.dvi (DOC from IN)>>=
${DOC}/d03Package.spad.dvi: ${IN}/d03Package.spad.pamphlet
	@ echo 0 making ${DOC}/d03Package.spad.dvi from ${IN}/d03Package.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d03Package.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d03Package.spad ; \
	rm -f ${DOC}/d03Package.spad.pamphlet ; \
	rm -f ${DOC}/d03Package.spad.tex ; \
	rm -f ${DOC}/d03Package.spad )

@
\subsection{d03routine.spad \cite{1}}
<<d03routine.spad (SPAD from IN)>>=
${MID}/d03routine.spad: ${IN}/d03routine.spad.pamphlet
	@ echo 0 making ${MID}/d03routine.spad from ${IN}/d03routine.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d03routine.spad.pamphlet >d03routine.spad )

@
<<D03EEFA.o (O from NRLIB)>>=
${OUT}/D03EEFA.o: ${MID}/D03EEFA.NRLIB
	@ echo 0 making ${OUT}/D03EEFA.o from ${MID}/D03EEFA.NRLIB
	@ cp ${MID}/D03EEFA.NRLIB/code.o ${OUT}/D03EEFA.o

@
<<D03EEFA.NRLIB (NRLIB from MID)>>=
${MID}/D03EEFA.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/D03EEFA.spad
	@ echo 0 making ${MID}/D03EEFA.NRLIB from ${MID}/D03EEFA.spad
	@ (cd ${MID} ; 	echo ')co D03EEFA.spad' | ${INTERPSYS} )

@
<<D03EEFA.spad (SPAD from IN)>>=
${MID}/D03EEFA.spad: ${IN}/d03routine.spad.pamphlet
	@ echo 0 making ${MID}/D03EEFA.spad from ${IN}/d03routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D03EEFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D03EEFA d03eefAnnaType" ${IN}/d03routine.spad.pamphlet >D03EEFA.spad )

@
<<D03FAFA.o (O from NRLIB)>>=
${OUT}/D03FAFA.o: ${MID}/D03FAFA.NRLIB
	@ echo 0 making ${OUT}/D03FAFA.o from ${MID}/D03FAFA.NRLIB
	@ cp ${MID}/D03FAFA.NRLIB/code.o ${OUT}/D03FAFA.o

@
<<D03FAFA.NRLIB (NRLIB from MID)>>=
${MID}/D03FAFA.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/D03FAFA.spad
	@ echo 0 making ${MID}/D03FAFA.NRLIB from ${MID}/D03FAFA.spad
	@ (cd ${MID} ; 	echo ')co D03FAFA.spad' | ${INTERPSYS} )

@
<<D03FAFA.spad (SPAD from IN)>>=
${MID}/D03FAFA.spad: ${IN}/d03routine.spad.pamphlet
	@ echo 0 making ${MID}/D03FAFA.spad from ${IN}/d03routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf D03FAFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain D03FAFA d03fafAnnaType" ${IN}/d03routine.spad.pamphlet >D03FAFA.spad )

@
<<d03routine.spad.dvi (DOC from IN)>>=
${DOC}/d03routine.spad.dvi: ${IN}/d03routine.spad.pamphlet
	@ echo 0 making ${DOC}/d03routine.spad.dvi from ${IN}/d03routine.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d03routine.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d03routine.spad ; \
	rm -f ${DOC}/d03routine.spad.pamphlet ; \
	rm -f ${DOC}/d03routine.spad.tex ; \
	rm -f ${DOC}/d03routine.spad )

@
\subsection{d03.spad \cite{1}}
<<d03.spad (SPAD from IN)>>=
${MID}/d03.spad: ${IN}/d03.spad.pamphlet
	@ echo 0 making ${MID}/d03.spad from ${IN}/d03.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/d03.spad.pamphlet >d03.spad )

@
<<NAGD03.o (O from NRLIB)>>=
${OUT}/NAGD03.o: ${MID}/NAGD03.NRLIB
	@ echo 0 making ${OUT}/NAGD03.o from ${MID}/NAGD03.NRLIB
	@ cp ${MID}/NAGD03.NRLIB/code.o ${OUT}/NAGD03.o

@
<<NAGD03.NRLIB (NRLIB from MID)>>=
${MID}/NAGD03.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/NAGD03.spad
	@ echo 0 making ${MID}/NAGD03.NRLIB from ${MID}/NAGD03.spad
	@ (cd ${MID} ; 	echo ')co NAGD03.spad' | ${INTERPSYS} )

@
<<NAGD03.spad (SPAD from IN)>>=
${MID}/NAGD03.spad: ${IN}/d03.spad.pamphlet
	@ echo 0 making ${MID}/NAGD03.spad from ${IN}/d03.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGD03.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGD03 NagPartialDifferentialEquationsPackage" ${IN}/d03.spad.pamphlet >NAGD03.spad )

@
<<d03.spad.dvi (DOC from IN)>>=
${DOC}/d03.spad.dvi: ${IN}/d03.spad.pamphlet
	@ echo 0 making ${DOC}/d03.spad.dvi from ${IN}/d03.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/d03.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} d03.spad ; \
	rm -f ${DOC}/d03.spad.pamphlet ; \
	rm -f ${DOC}/d03.spad.tex ; \
	rm -f ${DOC}/d03.spad )

@
\subsection{ddfact.spad \cite{1}}
<<ddfact.spad (SPAD from IN)>>=
${MID}/ddfact.spad: ${IN}/ddfact.spad.pamphlet
	@ echo 0 making ${MID}/ddfact.spad from ${IN}/ddfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ddfact.spad.pamphlet >ddfact.spad )

@
<<DDFACT.o (O from NRLIB)>>=
${OUT}/DDFACT.o: ${MID}/DDFACT.NRLIB
	@ echo 0 making ${OUT}/DDFACT.o from ${MID}/DDFACT.NRLIB
	@ cp ${MID}/DDFACT.NRLIB/code.o ${OUT}/DDFACT.o

@
<<DDFACT.NRLIB (NRLIB from MID)>>=
${MID}/DDFACT.NRLIB: ${MID}/DDFACT.spad
	@ echo 0 making ${MID}/DDFACT.NRLIB from ${MID}/DDFACT.spad
	@ (cd ${MID} ; 	echo ')co DDFACT.spad' | ${INTERPSYS} )

@
<<DDFACT.spad (SPAD from IN)>>=
${MID}/DDFACT.spad: ${IN}/ddfact.spad.pamphlet
	@ echo 0 making ${MID}/DDFACT.spad from ${IN}/ddfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DDFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package DDFACT DistinctDegreeFactorize" ${IN}/ddfact.spad.pamphlet >DDFACT.spad )

@
<<ddfact.spad.dvi (DOC from IN)>>=
${DOC}/ddfact.spad.dvi: ${IN}/ddfact.spad.pamphlet
	@ echo 0 making ${DOC}/ddfact.spad.dvi from ${IN}/ddfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ddfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ddfact.spad ; \
	rm -f ${DOC}/ddfact.spad.pamphlet ; \
	rm -f ${DOC}/ddfact.spad.tex ; \
	rm -f ${DOC}/ddfact.spad )

@
\subsection{defaults.spad \cite{1}}
<<defaults.spad (SPAD from IN)>>=
${MID}/defaults.spad: ${IN}/defaults.spad.pamphlet
	@ echo 0 making ${MID}/defaults.spad from ${IN}/defaults.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/defaults.spad.pamphlet >defaults.spad )

@
<<FLASORT.o (O from NRLIB)>>=
${OUT}/FLASORT.o: ${MID}/FLASORT.NRLIB
	@ echo 0 making ${OUT}/FLASORT.o from ${MID}/FLASORT.NRLIB
	@ cp ${MID}/FLASORT.NRLIB/code.o ${OUT}/FLASORT.o

@
<<FLASORT.NRLIB (NRLIB from MID)>>=
${MID}/FLASORT.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/FLASORT.spad
	@ echo 0 making ${MID}/FLASORT.NRLIB from ${MID}/FLASORT.spad
	@ (cd ${MID} ; 	echo ')co FLASORT.spad' | ${INTERPSYS} )

@
<<FLASORT.spad (SPAD from IN)>>=
${MID}/FLASORT.spad: ${IN}/defaults.spad.pamphlet
	@ echo 0 making ${MID}/FLASORT.spad from ${IN}/defaults.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLASORT.NRLIB ; \
	${SPADBIN}/notangle -R"package FLASORT FiniteLinearAggregateSort" ${IN}/defaults.spad.pamphlet >FLASORT.spad )

@
<<REPDB.o (O from NRLIB)>>=
${OUT}/REPDB.o: ${MID}/REPDB.NRLIB
	@ echo 0 making ${OUT}/REPDB.o from ${MID}/REPDB.NRLIB
	@ cp ${MID}/REPDB.NRLIB/code.o ${OUT}/REPDB.o

@
<<REPDB.NRLIB (NRLIB from MID)>>=
${MID}/REPDB.NRLIB: ${MID}/REPDB.spad
	@ echo 0 making ${MID}/REPDB.NRLIB from ${MID}/REPDB.spad
	@ (cd ${MID} ; 	echo ')co REPDB.spad' | ${INTERPSYS} )

@
<<REPDB.spad (SPAD from IN)>>=
${MID}/REPDB.spad: ${IN}/defaults.spad.pamphlet
	@ echo 0 making ${MID}/REPDB.spad from ${IN}/defaults.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REPDB.NRLIB ; \
	${SPADBIN}/notangle -R"package REPDB RepeatedDoubling" ${IN}/defaults.spad.pamphlet >REPDB.spad )

@
<<REPSQ.o (O from NRLIB)>>=
${OUT}/REPSQ.o: ${MID}/REPSQ.NRLIB
	@ echo 0 making ${OUT}/REPSQ.o from ${MID}/REPSQ.NRLIB
	@ cp ${MID}/REPSQ.NRLIB/code.o ${OUT}/REPSQ.o

@
<<REPSQ.NRLIB (NRLIB from MID)>>=
${MID}/REPSQ.NRLIB: ${MID}/REPSQ.spad
	@ echo 0 making ${MID}/REPSQ.NRLIB from ${MID}/REPSQ.spad
	@ (cd ${MID} ; 	echo ')co REPSQ.spad' | ${INTERPSYS} )

@
<<REPSQ.spad (SPAD from IN)>>=
${MID}/REPSQ.spad: ${IN}/defaults.spad.pamphlet
	@ echo 0 making ${MID}/REPSQ.spad from ${IN}/defaults.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REPSQ.NRLIB ; \
	${SPADBIN}/notangle -R"package REPSQ RepeatedSquaring" ${IN}/defaults.spad.pamphlet >REPSQ.spad )

@
<<defaults.spad.dvi (DOC from IN)>>=
${DOC}/defaults.spad.dvi: ${IN}/defaults.spad.pamphlet
	@ echo 0 making ${DOC}/defaults.spad.dvi from ${IN}/defaults.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/defaults.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} defaults.spad ; \
	rm -f ${DOC}/defaults.spad.pamphlet ; \
	rm -f ${DOC}/defaults.spad.tex ; \
	rm -f ${DOC}/defaults.spad )

@
\subsection{defintef.spad \cite{1}}
<<defintef.spad (SPAD from IN)>>=
${MID}/defintef.spad: ${IN}/defintef.spad.pamphlet
	@ echo 0 making ${MID}/defintef.spad from ${IN}/defintef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/defintef.spad.pamphlet >defintef.spad )

@
<<DEFINTEF.o (O from NRLIB)>>=
${OUT}/DEFINTEF.o: ${MID}/DEFINTEF.NRLIB
	@ echo 0 making ${OUT}/DEFINTEF.o from ${MID}/DEFINTEF.NRLIB
	@ cp ${MID}/DEFINTEF.NRLIB/code.o ${OUT}/DEFINTEF.o

@
<<DEFINTEF.NRLIB (NRLIB from MID)>>=
${MID}/DEFINTEF.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DEFINTEF.spad
	@ echo 0 making ${MID}/DEFINTEF.NRLIB from ${MID}/DEFINTEF.spad
	@ (cd ${MID} ; 	echo ')co DEFINTEF.spad' | ${INTERPSYS} )

@
<<DEFINTEF.spad (SPAD from IN)>>=
${MID}/DEFINTEF.spad: ${IN}/defintef.spad.pamphlet
	@ echo 0 making ${MID}/DEFINTEF.spad from ${IN}/defintef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DEFINTEF.NRLIB ; \
	${SPADBIN}/notangle -R"package DEFINTEF ElementaryFunctionDefiniteIntegration" ${IN}/defintef.spad.pamphlet >DEFINTEF.spad )

@
<<defintef.spad.dvi (DOC from IN)>>=
${DOC}/defintef.spad.dvi: ${IN}/defintef.spad.pamphlet
	@ echo 0 making ${DOC}/defintef.spad.dvi from ${IN}/defintef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/defintef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} defintef.spad ; \
	rm -f ${DOC}/defintef.spad.pamphlet ; \
	rm -f ${DOC}/defintef.spad.tex ; \
	rm -f ${DOC}/defintef.spad )

@
\subsection{defintrf.spad \cite{1}}
<<defintrf.spad (SPAD from IN)>>=
${MID}/defintrf.spad: ${IN}/defintrf.spad.pamphlet
	@ echo 0 making ${MID}/defintrf.spad from ${IN}/defintrf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/defintrf.spad.pamphlet >defintrf.spad )

@
<<DEFINTRF.o (O from NRLIB)>>=
${OUT}/DEFINTRF.o: ${MID}/DEFINTRF.NRLIB
	@ echo 0 making ${OUT}/DEFINTRF.o from ${MID}/DEFINTRF.NRLIB
	@ cp ${MID}/DEFINTRF.NRLIB/code.o ${OUT}/DEFINTRF.o

@
<<DEFINTRF.NRLIB (NRLIB from MID)>>=
${MID}/DEFINTRF.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DEFINTRF.spad
	@ echo 0 making ${MID}/DEFINTRF.NRLIB from ${MID}/DEFINTRF.spad
	@ (cd ${MID} ; 	echo ')co DEFINTRF.spad' | ${INTERPSYS} )

@
<<DEFINTRF.spad (SPAD from IN)>>=
${MID}/DEFINTRF.spad: ${IN}/defintrf.spad.pamphlet
	@ echo 0 making ${MID}/DEFINTRF.spad from ${IN}/defintrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DEFINTRF.NRLIB ; \
	${SPADBIN}/notangle -R"package DEFINTRF RationalFunctionDefiniteIntegration" ${IN}/defintrf.spad.pamphlet >DEFINTRF.spad )

@
<<DFINTTLS.o (O from NRLIB)>>=
${OUT}/DFINTTLS.o: ${MID}/DFINTTLS.NRLIB
	@ echo 0 making ${OUT}/DFINTTLS.o from ${MID}/DFINTTLS.NRLIB
	@ cp ${MID}/DFINTTLS.NRLIB/code.o ${OUT}/DFINTTLS.o

@
<<DFINTTLS.NRLIB (NRLIB from MID)>>=
${MID}/DFINTTLS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DFINTTLS.spad
	@ echo 0 making ${MID}/DFINTTLS.NRLIB from ${MID}/DFINTTLS.spad
	@ (cd ${MID} ; 	echo ')co DFINTTLS.spad' | ${INTERPSYS} )

@
<<DFINTTLS.spad (SPAD from IN)>>=
${MID}/DFINTTLS.spad: ${IN}/defintrf.spad.pamphlet
	@ echo 0 making ${MID}/DFINTTLS.spad from ${IN}/defintrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DFINTTLS.NRLIB ; \
	${SPADBIN}/notangle -R"package DFINTTLS DefiniteIntegrationTools" ${IN}/defintrf.spad.pamphlet >DFINTTLS.spad )

@
<<defintrf.spad.dvi (DOC from IN)>>=
${DOC}/defintrf.spad.dvi: ${IN}/defintrf.spad.pamphlet
	@ echo 0 making ${DOC}/defintrf.spad.dvi from ${IN}/defintrf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/defintrf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} defintrf.spad ; \
	rm -f ${DOC}/defintrf.spad.pamphlet ; \
	rm -f ${DOC}/defintrf.spad.tex ; \
	rm -f ${DOC}/defintrf.spad )

@
\subsection{degred.spad \cite{1}}
<<degred.spad (SPAD from IN)>>=
${MID}/degred.spad: ${IN}/degred.spad.pamphlet
	@ echo 0 making ${MID}/degred.spad from ${IN}/degred.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/degred.spad.pamphlet >degred.spad )

@
<<DEGRED.o (O from NRLIB)>>=
${OUT}/DEGRED.o: ${MID}/DEGRED.NRLIB
	@ echo 0 making ${OUT}/DEGRED.o from ${MID}/DEGRED.NRLIB
	@ cp ${MID}/DEGRED.NRLIB/code.o ${OUT}/DEGRED.o

@
<<DEGRED.NRLIB (NRLIB from MID)>>=
${MID}/DEGRED.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DEGRED.spad
	@ echo 0 making ${MID}/DEGRED.NRLIB from ${MID}/DEGRED.spad
	@ (cd ${MID} ; 	echo ')co DEGRED.spad' | ${INTERPSYS} )

@
<<DEGRED.spad (SPAD from IN)>>=
${MID}/DEGRED.spad: ${IN}/degred.spad.pamphlet
	@ echo 0 making ${MID}/DEGRED.spad from ${IN}/degred.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DEGRED.NRLIB ; \
	${SPADBIN}/notangle -R"package DEGRED DegreeReductionPackage" ${IN}/degred.spad.pamphlet >DEGRED.spad )

@
<<degred.spad.dvi (DOC from IN)>>=
${DOC}/degred.spad.dvi: ${IN}/degred.spad.pamphlet
	@ echo 0 making ${DOC}/degred.spad.dvi from ${IN}/degred.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/degred.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} degred.spad ; \
	rm -f ${DOC}/degred.spad.pamphlet ; \
	rm -f ${DOC}/degred.spad.tex ; \
	rm -f ${DOC}/degred.spad )

@
\subsection{derham.spad \cite{1}}
<<derham.spad (SPAD from IN)>>=
${MID}/derham.spad: ${IN}/derham.spad.pamphlet
	@ echo 0 making ${MID}/derham.spad from ${IN}/derham.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/derham.spad.pamphlet >derham.spad )

@
<<ANTISYM.o (O from NRLIB)>>=
${OUT}/ANTISYM.o: ${MID}/ANTISYM.NRLIB
	@ echo 0 making ${OUT}/ANTISYM.o from ${MID}/ANTISYM.NRLIB
	@ cp ${MID}/ANTISYM.NRLIB/code.o ${OUT}/ANTISYM.o

@
<<ANTISYM.NRLIB (NRLIB from MID)>>=
${MID}/ANTISYM.NRLIB: ${MID}/ANTISYM.spad
	@ echo 0 making ${MID}/ANTISYM.NRLIB from ${MID}/ANTISYM.spad
	@ (cd ${MID} ; 	echo ')co ANTISYM.spad' | ${INTERPSYS} )

@
<<ANTISYM.spad (SPAD from IN)>>=
${MID}/ANTISYM.spad: ${IN}/derham.spad.pamphlet
	@ echo 0 making ${MID}/ANTISYM.spad from ${IN}/derham.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ANTISYM.NRLIB ; \
	${SPADBIN}/notangle -R"domain ANTISYM AntiSymm" ${IN}/derham.spad.pamphlet >ANTISYM.spad )

@
<<DERHAM.o (O from NRLIB)>>=
${OUT}/DERHAM.o: ${MID}/DERHAM.NRLIB
	@ echo 0 making ${OUT}/DERHAM.o from ${MID}/DERHAM.NRLIB
	@ cp ${MID}/DERHAM.NRLIB/code.o ${OUT}/DERHAM.o

@
<<DERHAM.NRLIB (NRLIB from MID)>>=
${MID}/DERHAM.NRLIB: ${MID}/DERHAM.spad
	@ echo 0 making ${MID}/DERHAM.NRLIB from ${MID}/DERHAM.spad
	@ (cd ${MID} ; 	echo ')co DERHAM.spad' | ${INTERPSYS} )

@
<<DERHAM.spad (SPAD from IN)>>=
${MID}/DERHAM.spad: ${IN}/derham.spad.pamphlet
	@ echo 0 making ${MID}/DERHAM.spad from ${IN}/derham.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DERHAM.NRLIB ; \
	${SPADBIN}/notangle -R"domain DERHAM DeRhamComplex" ${IN}/derham.spad.pamphlet >DERHAM.spad )

@
<<EAB.o (O from NRLIB)>>=
${OUT}/EAB.o: ${MID}/EAB.NRLIB
	@ echo 0 making ${OUT}/EAB.o from ${MID}/EAB.NRLIB
	@ cp ${MID}/EAB.NRLIB/code.o ${OUT}/EAB.o

@
<<EAB.NRLIB (NRLIB from MID)>>=
${MID}/EAB.NRLIB: ${MID}/EAB.spad
	@ echo 0 making ${MID}/EAB.NRLIB from ${MID}/EAB.spad
	@ (cd ${MID} ; 	echo ')co EAB.spad' | ${INTERPSYS} )

@
<<EAB.spad (SPAD from IN)>>=
${MID}/EAB.spad: ${IN}/derham.spad.pamphlet
	@ echo 0 making ${MID}/EAB.spad from ${IN}/derham.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EAB.NRLIB ; \
	${SPADBIN}/notangle -R"domain EAB ExtAlgBasis" ${IN}/derham.spad.pamphlet >EAB.spad )

@
<<LALG-.o (O from NRLIB)>>=
${OUT}/LALG-.o: ${MID}/LALG.NRLIB
	@ echo 0 making ${OUT}/LALG-.o from ${MID}/LALG-.NRLIB
	@ cp ${MID}/LALG-.NRLIB/code.o ${OUT}/LALG-.o

@
<<LALG-.NRLIB (NRLIB from MID)>>=
${MID}/LALG-.NRLIB: ${OUT}/TYPE.o ${MID}/LALG.spad 
	@ echo 0 making ${MID}/LALG-.NRLIB from ${MID}/LALG.spad
	@ (cd ${MID} ; 	echo ')co LALG.spad' | ${INTERPSYS} )

@
<<LALG.o (O from NRLIB)>>=
${OUT}/LALG.o: ${MID}/LALG.NRLIB
	@ echo 0 making ${OUT}/LALG.o from ${MID}/LALG.NRLIB
	@ cp ${MID}/LALG.NRLIB/code.o ${OUT}/LALG.o

@
<<LALG.NRLIB (NRLIB from MID)>>=
${MID}/LALG.NRLIB: ${MID}/LALG.spad
	@ echo 0 making ${MID}/LALG.NRLIB from ${MID}/LALG.spad
	@ (cd ${MID} ; 	echo ')co LALG.spad' | ${INTERPSYS} )

@
<<LALG.spad (SPAD from IN)>>=
${MID}/LALG.spad: ${IN}/derham.spad.pamphlet
	@ echo 0 making ${MID}/LALG.spad from ${IN}/derham.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LALG.NRLIB ; \
	${SPADBIN}/notangle -R"category LALG LeftAlgebra" ${IN}/derham.spad.pamphlet >LALG.spad )

@
<<derham.spad.dvi (DOC from IN)>>=
${DOC}/derham.spad.dvi: ${IN}/derham.spad.pamphlet
	@ echo 0 making ${DOC}/derham.spad.dvi from ${IN}/derham.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/derham.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} derham.spad ; \
	rm -f ${DOC}/derham.spad.pamphlet ; \
	rm -f ${DOC}/derham.spad.tex ; \
	rm -f ${DOC}/derham.spad )

@
\subsection{dhmatrix.spad \cite{1}}
<<dhmatrix.spad (SPAD from IN)>>=
${MID}/dhmatrix.spad: ${IN}/dhmatrix.spad.pamphlet
	@ echo 0 making ${MID}/dhmatrix.spad from ${IN}/dhmatrix.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/dhmatrix.spad.pamphlet >dhmatrix.spad )

@
<<DHMATRIX.o (O from NRLIB)>>=
${OUT}/DHMATRIX.o: ${MID}/DHMATRIX.NRLIB
	@ echo 0 making ${OUT}/DHMATRIX.o from ${MID}/DHMATRIX.NRLIB
	@ cp ${MID}/DHMATRIX.NRLIB/code.o ${OUT}/DHMATRIX.o

@
<<DHMATRIX.NRLIB (NRLIB from MID)>>=
${MID}/DHMATRIX.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DHMATRIX.spad
	@ echo 0 making ${MID}/DHMATRIX.NRLIB from ${MID}/DHMATRIX.spad
	@ (cd ${MID} ; 	echo ')co DHMATRIX.spad' | ${INTERPSYS} )

@
<<DHMATRIX.spad (SPAD from IN)>>=
${MID}/DHMATRIX.spad: ${IN}/dhmatrix.spad.pamphlet
	@ echo 0 making ${MID}/DHMATRIX.spad from ${IN}/dhmatrix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DHMATRIX.NRLIB ; \
	${SPADBIN}/notangle -R"domain DHMATRIX DenavitHartenbergMatrix" ${IN}/dhmatrix.spad.pamphlet >DHMATRIX.spad )

@
<<dhmatrix.spad.dvi (DOC from IN)>>=
${DOC}/dhmatrix.spad.dvi: ${IN}/dhmatrix.spad.pamphlet
	@ echo 0 making ${DOC}/dhmatrix.spad.dvi from ${IN}/dhmatrix.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/dhmatrix.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} dhmatrix.spad ; \
	rm -f ${DOC}/dhmatrix.spad.pamphlet ; \
	rm -f ${DOC}/dhmatrix.spad.tex ; \
	rm -f ${DOC}/dhmatrix.spad )

@
\subsection{divisor.spad \cite{1}}
<<divisor.spad (SPAD from IN)>>=
${MID}/divisor.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/divisor.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/divisor.spad.pamphlet >divisor.spad )

@
<<FDIV2.o (O from NRLIB)>>=
${OUT}/FDIV2.o: ${MID}/FDIV2.NRLIB
	@ echo 0 making ${OUT}/FDIV2.o from ${MID}/FDIV2.NRLIB
	@ cp ${MID}/FDIV2.NRLIB/code.o ${OUT}/FDIV2.o

@
<<FDIV2.NRLIB (NRLIB from MID)>>=
${MID}/FDIV2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FDIV2.spad
	@ echo 0 making ${MID}/FDIV2.NRLIB from ${MID}/FDIV2.spad
	@ (cd ${MID} ; 	echo ')co FDIV2.spad' | ${INTERPSYS} )

@
<<FDIV2.spad (SPAD from IN)>>=
${MID}/FDIV2.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/FDIV2.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FDIV2.NRLIB ; \
	${SPADBIN}/notangle -R"package FDIV2 FiniteDivisorFunctions2" ${IN}/divisor.spad.pamphlet >FDIV2.spad )

@
<<FDIV.o (O from NRLIB)>>=
${OUT}/FDIV.o: ${MID}/FDIV.NRLIB
	@ echo 0 making ${OUT}/FDIV.o from ${MID}/FDIV.NRLIB
	@ cp ${MID}/FDIV.NRLIB/code.o ${OUT}/FDIV.o

@
<<FDIV.NRLIB (NRLIB from MID)>>=
${MID}/FDIV.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FDIV.spad
	@ echo 0 making ${MID}/FDIV.NRLIB from ${MID}/FDIV.spad
	@ (cd ${MID} ; 	echo ')co FDIV.spad' | ${INTERPSYS} )

@
<<FDIV.spad (SPAD from IN)>>=
${MID}/FDIV.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/FDIV.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FDIV.NRLIB ; \
	${SPADBIN}/notangle -R"domain FDIV FiniteDivisor" ${IN}/divisor.spad.pamphlet >FDIV.spad )

@
<<FDIVCAT-.o (O from NRLIB)>>=
${OUT}/FDIVCAT-.o: ${MID}/FDIVCAT.NRLIB
	@ echo 0 making ${OUT}/FDIVCAT-.o from ${MID}/FDIVCAT-.NRLIB
	@ cp ${MID}/FDIVCAT-.NRLIB/code.o ${OUT}/FDIVCAT-.o

@
<<FDIVCAT-.NRLIB (NRLIB from MID)>>=
${MID}/FDIVCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/FDIVCAT.spad 
	@ echo 0 making ${MID}/FDIVCAT-.NRLIB from ${MID}/FDIVCAT.spad
	@ (cd ${MID} ; 	echo ')co FDIVCAT.spad' | ${INTERPSYS} )

@
<<FDIVCAT.o (O from NRLIB)>>=
${OUT}/FDIVCAT.o: ${MID}/FDIVCAT.NRLIB
	@ echo 0 making ${OUT}/FDIVCAT.o from ${MID}/FDIVCAT.NRLIB
	@ cp ${MID}/FDIVCAT.NRLIB/code.o ${OUT}/FDIVCAT.o

@
<<FDIVCAT.NRLIB (NRLIB from MID)>>=
${MID}/FDIVCAT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FDIVCAT.spad
	@ echo 0 making ${MID}/FDIVCAT.NRLIB from ${MID}/FDIVCAT.spad
	@ (cd ${MID} ; 	echo ')co FDIVCAT.spad' | ${INTERPSYS} )

@
<<FDIVCAT.spad (SPAD from IN)>>=
${MID}/FDIVCAT.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/FDIVCAT.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FDIVCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category FDIVCAT FiniteDivisorCategory" ${IN}/divisor.spad.pamphlet >FDIVCAT.spad )

@
<<FRIDEAL.o (O from NRLIB)>>=
${OUT}/FRIDEAL.o: ${MID}/FRIDEAL.NRLIB
	@ echo 0 making ${OUT}/FRIDEAL.o from ${MID}/FRIDEAL.NRLIB
	@ cp ${MID}/FRIDEAL.NRLIB/code.o ${OUT}/FRIDEAL.o

@
<<FRIDEAL.NRLIB (NRLIB from MID)>>=
${MID}/FRIDEAL.NRLIB: ${MID}/FRIDEAL.spad
	@ echo 0 making ${MID}/FRIDEAL.NRLIB from ${MID}/FRIDEAL.spad
	@ (cd ${MID} ; 	echo ')co FRIDEAL.spad' | ${INTERPSYS} )

@
<<FRIDEAL.spad (SPAD from IN)>>=
${MID}/FRIDEAL.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/FRIDEAL.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRIDEAL.NRLIB ; \
	${SPADBIN}/notangle -R"domain FRIDEAL FractionalIdeal" ${IN}/divisor.spad.pamphlet >FRIDEAL.spad )

@
<<FRIDEAL2.o (O from NRLIB)>>=
${OUT}/FRIDEAL2.o: ${MID}/FRIDEAL2.NRLIB
	@ echo 0 making ${OUT}/FRIDEAL2.o from ${MID}/FRIDEAL2.NRLIB
	@ cp ${MID}/FRIDEAL2.NRLIB/code.o ${OUT}/FRIDEAL2.o

@
<<FRIDEAL2.NRLIB (NRLIB from MID)>>=
${MID}/FRIDEAL2.NRLIB: ${MID}/FRIDEAL2.spad
	@ echo 0 making ${MID}/FRIDEAL2.NRLIB from ${MID}/FRIDEAL2.spad
	@ (cd ${MID} ; 	echo ')co FRIDEAL2.spad' | ${INTERPSYS} )

@
<<FRIDEAL2.spad (SPAD from IN)>>=
${MID}/FRIDEAL2.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/FRIDEAL2.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRIDEAL2.NRLIB ; \
	${SPADBIN}/notangle -R"package FRIDEAL2 FractionalIdealFunctions2" ${IN}/divisor.spad.pamphlet >FRIDEAL2.spad )

@
<<FRMOD.o (O from NRLIB)>>=
${OUT}/FRMOD.o: ${MID}/FRMOD.NRLIB
	@ echo 0 making ${OUT}/FRMOD.o from ${MID}/FRMOD.NRLIB
	@ cp ${MID}/FRMOD.NRLIB/code.o ${OUT}/FRMOD.o

@
<<FRMOD.NRLIB (NRLIB from MID)>>=
${MID}/FRMOD.NRLIB: ${MID}/FRMOD.spad
	@ echo 0 making ${MID}/FRMOD.NRLIB from ${MID}/FRMOD.spad
	@ (cd ${MID} ; 	echo ')co FRMOD.spad' | ${INTERPSYS} )

@
<<FRMOD.spad (SPAD from IN)>>=
${MID}/FRMOD.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/FRMOD.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRMOD.NRLIB ; \
	${SPADBIN}/notangle -R"domain FRMOD FramedModule" ${IN}/divisor.spad.pamphlet >FRMOD.spad )

@
<<HELLFDIV.o (O from NRLIB)>>=
${OUT}/HELLFDIV.o: ${MID}/HELLFDIV.NRLIB
	@ echo 0 making ${OUT}/HELLFDIV.o from ${MID}/HELLFDIV.NRLIB
	@ cp ${MID}/HELLFDIV.NRLIB/code.o ${OUT}/HELLFDIV.o

@
<<HELLFDIV.NRLIB (NRLIB from MID)>>=
${MID}/HELLFDIV.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/HELLFDIV.spad
	@ echo 0 making ${MID}/HELLFDIV.NRLIB from ${MID}/HELLFDIV.spad
	@ (cd ${MID} ; 	echo ')co HELLFDIV.spad' | ${INTERPSYS} )

@
<<HELLFDIV.spad (SPAD from IN)>>=
${MID}/HELLFDIV.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/HELLFDIV.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HELLFDIV.NRLIB ; \
	${SPADBIN}/notangle -R"domain HELLFDIV HyperellipticFiniteDivisor" ${IN}/divisor.spad.pamphlet >HELLFDIV.spad )

@
<<MHROWRED.o (O from NRLIB)>>=
${OUT}/MHROWRED.o: ${MID}/MHROWRED.NRLIB
	@ echo 0 making ${OUT}/MHROWRED.o from ${MID}/MHROWRED.NRLIB
	@ cp ${MID}/MHROWRED.NRLIB/code.o ${OUT}/MHROWRED.o

@
<<MHROWRED.NRLIB (NRLIB from MID)>>=
${MID}/MHROWRED.NRLIB: ${MID}/MHROWRED.spad
	@ echo 0 making ${MID}/MHROWRED.NRLIB from ${MID}/MHROWRED.spad
	@ (cd ${MID} ; 	echo ')co MHROWRED.spad' | ${INTERPSYS} )

@
<<MHROWRED.spad (SPAD from IN)>>=
${MID}/MHROWRED.spad: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${MID}/MHROWRED.spad from ${IN}/divisor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MHROWRED.NRLIB ; \
	${SPADBIN}/notangle -R"package MHROWRED ModularHermitianRowReduction" ${IN}/divisor.spad.pamphlet >MHROWRED.spad )

@
<<divisor.spad.dvi (DOC from IN)>>=
${DOC}/divisor.spad.dvi: ${IN}/divisor.spad.pamphlet
	@ echo 0 making ${DOC}/divisor.spad.dvi from ${IN}/divisor.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/divisor.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} divisor.spad ; \
	rm -f ${DOC}/divisor.spad.pamphlet ; \
	rm -f ${DOC}/divisor.spad.tex ; \
	rm -f ${DOC}/divisor.spad )

@
\subsection{dpolcat.spad \cite{1}}
<<dpolcat.spad (SPAD from IN)>>=
${MID}/dpolcat.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/dpolcat.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/dpolcat.spad.pamphlet >dpolcat.spad )

@
<<SDPOL.o (O from NRLIB)>>=
${OUT}/SDPOL.o: ${MID}/SDPOL.NRLIB
	@ echo 0 making ${OUT}/SDPOL.o from ${MID}/SDPOL.NRLIB
	@ cp ${MID}/SDPOL.NRLIB/code.o ${OUT}/SDPOL.o

@
<<SDPOL.NRLIB (NRLIB from MID)>>=
${MID}/SDPOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SDPOL.spad
	@ echo 0 making ${MID}/SDPOL.NRLIB from ${MID}/SDPOL.spad
	@ (cd ${MID} ; 	echo ')co SDPOL.spad' | ${INTERPSYS} )

@
<<SDPOL.spad (SPAD from IN)>>=
${MID}/SDPOL.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/SDPOL.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SDPOL.NRLIB ; \
	${SPADBIN}/notangle -R"domain SDPOL SequentialDifferentialPolynomial" ${IN}/dpolcat.spad.pamphlet >SDPOL.spad )

@
<<DSMP.o (O from NRLIB)>>=
${OUT}/DSMP.o: ${MID}/DSMP.NRLIB
	@ echo 0 making ${OUT}/DSMP.o from ${MID}/DSMP.NRLIB
	@ cp ${MID}/DSMP.NRLIB/code.o ${OUT}/DSMP.o

@
<<DSMP.NRLIB (NRLIB from MID)>>=
${MID}/DSMP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DSMP.spad
	@ echo 0 making ${MID}/DSMP.NRLIB from ${MID}/DSMP.spad
	@ (cd ${MID} ; 	echo ')co DSMP.spad' | ${INTERPSYS} )

@
<<DSMP.spad (SPAD from IN)>>=
${MID}/DSMP.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/DSMP.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DSMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain DSMP DifferentialSparseMultivariatePolynomial" ${IN}/dpolcat.spad.pamphlet >DSMP.spad )

@
<<DPOLCAT-.o (O from NRLIB)>>=
${OUT}/DPOLCAT-.o: ${MID}/DPOLCAT.NRLIB
	@ echo 0 making ${OUT}/DPOLCAT-.o from ${MID}/DPOLCAT-.NRLIB
	@ cp ${MID}/DPOLCAT-.NRLIB/code.o ${OUT}/DPOLCAT-.o

@
<<DPOLCAT-.NRLIB (NRLIB from MID)>>=
${MID}/DPOLCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/DPOLCAT.spad 
	@ echo 0 making ${MID}/DPOLCAT-.NRLIB from ${MID}/DPOLCAT.spad
	@ (cd ${MID} ; 	echo ')co DPOLCAT.spad' | ${INTERPSYS} )

@
<<DPOLCAT.o (O from NRLIB)>>=
${OUT}/DPOLCAT.o: ${MID}/DPOLCAT.NRLIB
	@ echo 0 making ${OUT}/DPOLCAT.o from ${MID}/DPOLCAT.NRLIB
	@ cp ${MID}/DPOLCAT.NRLIB/code.o ${OUT}/DPOLCAT.o

@
<<DPOLCAT.NRLIB (NRLIB from MID)>>=
${MID}/DPOLCAT.NRLIB: ${MID}/DPOLCAT.spad
	@ echo 0 making ${MID}/DPOLCAT.NRLIB from ${MID}/DPOLCAT.spad
	@ (cd ${MID} ; 	echo ')co DPOLCAT.spad' | ${INTERPSYS} )

@
<<DPOLCAT.spad (SPAD from IN)>>=
${MID}/DPOLCAT.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/DPOLCAT.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DPOLCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category DPOLCAT DifferentialPolynomialCategory" ${IN}/dpolcat.spad.pamphlet >DPOLCAT.spad )

@
<<DVARCAT-.o (O from NRLIB)>>=
${OUT}/DVARCAT-.o: ${MID}/DVARCAT.NRLIB
	@ echo 0 making ${OUT}/DVARCAT-.o from ${MID}/DVARCAT-.NRLIB
	@ cp ${MID}/DVARCAT-.NRLIB/code.o ${OUT}/DVARCAT-.o

@
<<DVARCAT-.NRLIB (NRLIB from MID)>>=
${MID}/DVARCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/DVARCAT.spad 
	@ echo 0 making ${MID}/DVARCAT-.NRLIB from ${MID}/DVARCAT.spad
	@ (cd ${MID} ; 	echo ')co DVARCAT.spad' | ${INTERPSYS} )

@
<<DVARCAT.o (O from NRLIB)>>=
${OUT}/DVARCAT.o: ${MID}/DVARCAT.NRLIB
	@ echo 0 making ${OUT}/DVARCAT.o from ${MID}/DVARCAT.NRLIB
	@ cp ${MID}/DVARCAT.NRLIB/code.o ${OUT}/DVARCAT.o

@
<<DVARCAT.NRLIB (NRLIB from MID)>>=
${MID}/DVARCAT.NRLIB: ${MID}/DVARCAT.spad
	@ echo 0 making ${MID}/DVARCAT.NRLIB from ${MID}/DVARCAT.spad
	@ (cd ${MID} ; 	echo ')co DVARCAT.spad' | ${INTERPSYS} )

@
<<DVARCAT.spad (SPAD from IN)>>=
${MID}/DVARCAT.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/DVARCAT.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DVARCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category DVARCAT DifferentialVariableCategory" ${IN}/dpolcat.spad.pamphlet >DVARCAT.spad )

@
<<ODPOL.o (O from NRLIB)>>=
${OUT}/ODPOL.o: ${MID}/ODPOL.NRLIB
	@ echo 0 making ${OUT}/ODPOL.o from ${MID}/ODPOL.NRLIB
	@ cp ${MID}/ODPOL.NRLIB/code.o ${OUT}/ODPOL.o

@
<<ODPOL.NRLIB (NRLIB from MID)>>=
${MID}/ODPOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ODPOL.spad
	@ echo 0 making ${MID}/ODPOL.NRLIB from ${MID}/ODPOL.spad
	@ (cd ${MID} ; 	echo ')co ODPOL.spad' | ${INTERPSYS} )

@
<<ODPOL.spad (SPAD from IN)>>=
${MID}/ODPOL.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/ODPOL.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODPOL.NRLIB ; \
	${SPADBIN}/notangle -R"domain ODPOL OrderlyDifferentialPolynomial" ${IN}/dpolcat.spad.pamphlet >ODPOL.spad )

@
<<ODVAR.o (O from NRLIB)>>=
${OUT}/ODVAR.o: ${MID}/ODVAR.NRLIB
	@ echo 0 making ${OUT}/ODVAR.o from ${MID}/ODVAR.NRLIB
	@ cp ${MID}/ODVAR.NRLIB/code.o ${OUT}/ODVAR.o

@
<<ODVAR.NRLIB (NRLIB from MID)>>=
${MID}/ODVAR.NRLIB: ${MID}/ODVAR.spad
	@ echo 0 making ${MID}/ODVAR.NRLIB from ${MID}/ODVAR.spad
	@ (cd ${MID} ; 	echo ')co ODVAR.spad' | ${INTERPSYS} )

@
<<ODVAR.spad (SPAD from IN)>>=
${MID}/ODVAR.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/ODVAR.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODVAR.NRLIB ; \
	${SPADBIN}/notangle -R"domain ODVAR OrderlyDifferentialVariable" ${IN}/dpolcat.spad.pamphlet >ODVAR.spad )

@
<<SDVAR.o (O from NRLIB)>>=
${OUT}/SDVAR.o: ${MID}/SDVAR.NRLIB
	@ echo 0 making ${OUT}/SDVAR.o from ${MID}/SDVAR.NRLIB
	@ cp ${MID}/SDVAR.NRLIB/code.o ${OUT}/SDVAR.o

@
<<SDVAR.NRLIB (NRLIB from MID)>>=
${MID}/SDVAR.NRLIB: ${MID}/SDVAR.spad
	@ echo 0 making ${MID}/SDVAR.NRLIB from ${MID}/SDVAR.spad
	@ (cd ${MID} ; 	echo ')co SDVAR.spad' | ${INTERPSYS} )

@
<<SDVAR.spad (SPAD from IN)>>=
${MID}/SDVAR.spad: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${MID}/SDVAR.spad from ${IN}/dpolcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SDVAR.NRLIB ; \
	${SPADBIN}/notangle -R"domain SDVAR SequentialDifferentialVariable" ${IN}/dpolcat.spad.pamphlet >SDVAR.spad )

@
<<dpolcat.spad.dvi (DOC from IN)>>=
${DOC}/dpolcat.spad.dvi: ${IN}/dpolcat.spad.pamphlet
	@ echo 0 making ${DOC}/dpolcat.spad.dvi from ${IN}/dpolcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/dpolcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} dpolcat.spad ; \
	rm -f ${DOC}/dpolcat.spad.pamphlet ; \
	rm -f ${DOC}/dpolcat.spad.tex ; \
	rm -f ${DOC}/dpolcat.spad )

@
\subsection{drawopt.spad \cite{1}}
<<drawopt.spad (SPAD from IN)>>=
${MID}/drawopt.spad: ${IN}/drawopt.spad.pamphlet
	@ echo 0 making ${MID}/drawopt.spad from ${IN}/drawopt.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/drawopt.spad.pamphlet >drawopt.spad )

@
<<DROPT.o (O from NRLIB)>>=
${OUT}/DROPT.o: ${MID}/DROPT.NRLIB
	@ echo 0 making ${OUT}/DROPT.o from ${MID}/DROPT.NRLIB
	@ cp ${MID}/DROPT.NRLIB/code.o ${OUT}/DROPT.o

@
<<DROPT.NRLIB (NRLIB from MID)>>=
${MID}/DROPT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DROPT.spad
	@ echo 0 making ${MID}/DROPT.NRLIB from ${MID}/DROPT.spad
	@ (cd ${MID} ; 	echo ')co DROPT.spad' | ${INTERPSYS} )

@
<<DROPT.spad (SPAD from IN)>>=
${MID}/DROPT.spad: ${IN}/drawopt.spad.pamphlet
	@ echo 0 making ${MID}/DROPT.spad from ${IN}/drawopt.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DROPT.NRLIB ; \
	${SPADBIN}/notangle -R"domain DROPT DrawOption" ${IN}/drawopt.spad.pamphlet >DROPT.spad )

@
<<DROPT0.o (O from NRLIB)>>=
${OUT}/DROPT0.o: ${MID}/DROPT0.NRLIB
	@ echo 0 making ${OUT}/DROPT0.o from ${MID}/DROPT0.NRLIB
	@ cp ${MID}/DROPT0.NRLIB/code.o ${OUT}/DROPT0.o

@
<<DROPT0.NRLIB (NRLIB from MID)>>=
${MID}/DROPT0.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DROPT0.spad
	@ echo 0 making ${MID}/DROPT0.NRLIB from ${MID}/DROPT0.spad
	@ (cd ${MID} ; 	echo ')co DROPT0.spad' | ${INTERPSYS} )

@
<<DROPT0.spad (SPAD from IN)>>=
${MID}/DROPT0.spad: ${IN}/drawopt.spad.pamphlet
	@ echo 0 making ${MID}/DROPT0.spad from ${IN}/drawopt.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DROPT0.NRLIB ; \
	${SPADBIN}/notangle -R"package DROPT0 DrawOptionFunctions0" ${IN}/drawopt.spad.pamphlet >DROPT0.spad )

@
<<DROPT1.o (O from NRLIB)>>=
${OUT}/DROPT1.o: ${MID}/DROPT1.NRLIB
	@ echo 0 making ${OUT}/DROPT1.o from ${MID}/DROPT1.NRLIB
	@ cp ${MID}/DROPT1.NRLIB/code.o ${OUT}/DROPT1.o

@
<<DROPT1.NRLIB (NRLIB from MID)>>=
${MID}/DROPT1.NRLIB: ${OUT}/TYPE.o ${MID}/DROPT1.spad
	@ echo 0 making ${MID}/DROPT1.NRLIB from ${MID}/DROPT1.spad
	@ (cd ${MID} ; 	echo ')co DROPT1.spad' | ${INTERPSYS} )

@
<<DROPT1.spad (SPAD from IN)>>=
${MID}/DROPT1.spad: ${IN}/drawopt.spad.pamphlet
	@ echo 0 making ${MID}/DROPT1.spad from ${IN}/drawopt.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DROPT1.NRLIB ; \
	${SPADBIN}/notangle -R"package DROPT1 DrawOptionFunctions1" ${IN}/drawopt.spad.pamphlet >DROPT1.spad )

@
<<drawopt.spad.dvi (DOC from IN)>>=
${DOC}/drawopt.spad.dvi: ${IN}/drawopt.spad.pamphlet
	@ echo 0 making ${DOC}/drawopt.spad.dvi from ${IN}/drawopt.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/drawopt.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} drawopt.spad ; \
	rm -f ${DOC}/drawopt.spad.pamphlet ; \
	rm -f ${DOC}/drawopt.spad.tex ; \
	rm -f ${DOC}/drawopt.spad )

@
\subsection{drawpak.spad \cite{1}}
<<drawpak.spad (SPAD from IN)>>=
${MID}/drawpak.spad: ${IN}/drawpak.spad.pamphlet
	@ echo 0 making ${MID}/drawpak.spad from ${IN}/drawpak.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/drawpak.spad.pamphlet >drawpak.spad )

@
<<DRAWCX.o (O from NRLIB)>>=
${OUT}/DRAWCX.o: ${MID}/DRAWCX.NRLIB
	@ echo 0 making ${OUT}/DRAWCX.o from ${MID}/DRAWCX.NRLIB
	@ cp ${MID}/DRAWCX.NRLIB/code.o ${OUT}/DRAWCX.o

@
<<DRAWCX.NRLIB (NRLIB from MID)>>=
${MID}/DRAWCX.NRLIB: ${MID}/DRAWCX.spad
	@ echo 0 making ${MID}/DRAWCX.NRLIB from ${MID}/DRAWCX.spad
	@ (cd ${MID} ; 	echo ')co DRAWCX.spad' | ${INTERPSYS} )

@
<<DRAWCX.spad (SPAD from IN)>>=
${MID}/DRAWCX.spad: ${IN}/drawpak.spad.pamphlet
	@ echo 0 making ${MID}/DRAWCX.spad from ${IN}/drawpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DRAWCX.NRLIB ; \
	${SPADBIN}/notangle -R"package DRAWCX DrawComplex" ${IN}/drawpak.spad.pamphlet >DRAWCX.spad )

@
<<drawpak.spad.dvi (DOC from IN)>>=
${DOC}/drawpak.spad.dvi: ${IN}/drawpak.spad.pamphlet
	@ echo 0 making ${DOC}/drawpak.spad.dvi from ${IN}/drawpak.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/drawpak.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} drawpak.spad ; \
	rm -f ${DOC}/drawpak.spad.pamphlet ; \
	rm -f ${DOC}/drawpak.spad.tex ; \
	rm -f ${DOC}/drawpak.spad )

@
\subsection{draw.spad \cite{1}}
<<draw.spad (SPAD from IN)>>=
${MID}/draw.spad: ${IN}/draw.spad.pamphlet
	@ echo 0 making ${MID}/draw.spad from ${IN}/draw.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/draw.spad.pamphlet >draw.spad )

@
<<DRAW.o (O from NRLIB)>>=
${OUT}/DRAW.o: ${MID}/DRAW.NRLIB
	@ echo 0 making ${OUT}/DRAW.o from ${MID}/DRAW.NRLIB
	@ cp ${MID}/DRAW.NRLIB/code.o ${OUT}/DRAW.o

@
<<DRAW.NRLIB (NRLIB from MID)>>=
${MID}/DRAW.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DRAW.spad
	@ echo 0 making ${MID}/DRAW.NRLIB from ${MID}/DRAW.spad
	@ (cd ${MID} ; 	echo ')co DRAW.spad' | ${INTERPSYS} )

@
<<DRAW.spad (SPAD from IN)>>=
${MID}/DRAW.spad: ${IN}/draw.spad.pamphlet
	@ echo 0 making ${MID}/DRAW.spad from ${IN}/draw.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DRAW.NRLIB ; \
	${SPADBIN}/notangle -R"package DRAW TopLevelDrawFunctions" ${IN}/draw.spad.pamphlet >DRAW.spad )

@
<<DRAWCFUN.o (O from NRLIB)>>=
${OUT}/DRAWCFUN.o: ${MID}/DRAWCFUN.NRLIB
	@ echo 0 making ${OUT}/DRAWCFUN.o from ${MID}/DRAWCFUN.NRLIB
	@ cp ${MID}/DRAWCFUN.NRLIB/code.o ${OUT}/DRAWCFUN.o

@
<<DRAWCFUN.NRLIB (NRLIB from MID)>>=
${MID}/DRAWCFUN.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DRAWCFUN.spad
	@ echo 0 making ${MID}/DRAWCFUN.NRLIB from ${MID}/DRAWCFUN.spad
	@ (cd ${MID} ; 	echo ')co DRAWCFUN.spad' | ${INTERPSYS} )

@
<<DRAWCFUN.spad (SPAD from IN)>>=
${MID}/DRAWCFUN.spad: ${IN}/draw.spad.pamphlet
	@ echo 0 making ${MID}/DRAWCFUN.spad from ${IN}/draw.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DRAWCFUN.NRLIB ; \
	${SPADBIN}/notangle -R"package DRAWCFUN TopLevelDrawFunctionsForCompiledFunctions" ${IN}/draw.spad.pamphlet >DRAWCFUN.spad )

@
<<DRAWCURV.o (O from NRLIB)>>=
${OUT}/DRAWCURV.o: ${MID}/DRAWCURV.NRLIB
	@ echo 0 making ${OUT}/DRAWCURV.o from ${MID}/DRAWCURV.NRLIB
	@ cp ${MID}/DRAWCURV.NRLIB/code.o ${OUT}/DRAWCURV.o

@
<<DRAWCURV.NRLIB (NRLIB from MID)>>=
${MID}/DRAWCURV.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DRAWCURV.spad
	@ echo 0 making ${MID}/DRAWCURV.NRLIB from ${MID}/DRAWCURV.spad
	@ (cd ${MID} ; 	echo ')co DRAWCURV.spad' | ${INTERPSYS} )

@
<<DRAWCURV.spad (SPAD from IN)>>=
${MID}/DRAWCURV.spad: ${IN}/draw.spad.pamphlet
	@ echo 0 making ${MID}/DRAWCURV.spad from ${IN}/draw.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DRAWCURV.NRLIB ; \
	${SPADBIN}/notangle -R"package DRAWCURV TopLevelDrawFunctionsForAlgebraicCurves" ${IN}/draw.spad.pamphlet >DRAWCURV.spad )

@
<<DRAWPT.o (O from NRLIB)>>=
${OUT}/DRAWPT.o: ${MID}/DRAWPT.NRLIB
	@ echo 0 making ${OUT}/DRAWPT.o from ${MID}/DRAWPT.NRLIB
	@ cp ${MID}/DRAWPT.NRLIB/code.o ${OUT}/DRAWPT.o

@
<<DRAWPT.NRLIB (NRLIB from MID)>>=
${MID}/DRAWPT.NRLIB: ${MID}/DRAWPT.spad
	@ echo 0 making ${MID}/DRAWPT.NRLIB from ${MID}/DRAWPT.spad
	@ (cd ${MID} ; 	echo ')co DRAWPT.spad' | ${INTERPSYS} )

@
<<DRAWPT.spad (SPAD from IN)>>=
${MID}/DRAWPT.spad: ${IN}/draw.spad.pamphlet
	@ echo 0 making ${MID}/DRAWPT.spad from ${IN}/draw.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DRAWPT.NRLIB ; \
	${SPADBIN}/notangle -R"package DRAWPT TopLevelDrawFunctionsForPoints" ${IN}/draw.spad.pamphlet >DRAWPT.spad )

@
<<draw.spad.dvi (DOC from IN)>>=
${DOC}/draw.spad.dvi: ${IN}/draw.spad.pamphlet
	@ echo 0 making ${DOC}/draw.spad.dvi from ${IN}/draw.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/draw.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} draw.spad ; \
	rm -f ${DOC}/draw.spad.pamphlet ; \
	rm -f ${DOC}/draw.spad.tex ; \
	rm -f ${DOC}/draw.spad )

@
\subsection{e01.spad \cite{1}}
<<e01.spad (SPAD from IN)>>=
${MID}/e01.spad: ${IN}/e01.spad.pamphlet
	@ echo 0 making ${MID}/e01.spad from ${IN}/e01.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/e01.spad.pamphlet >e01.spad )

@
<<NAGE01.o (O from NRLIB)>>=
${OUT}/NAGE01.o: ${MID}/NAGE01.NRLIB
	@ echo 0 making ${OUT}/NAGE01.o from ${MID}/NAGE01.NRLIB
	@ cp ${MID}/NAGE01.NRLIB/code.o ${OUT}/NAGE01.o

@
<<NAGE01.NRLIB (NRLIB from MID)>>=
${MID}/NAGE01.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/NAGE01.spad
	@ echo 0 making ${MID}/NAGE01.NRLIB from ${MID}/NAGE01.spad
	@ (cd ${MID} ; 	echo ')co NAGE01.spad' | ${INTERPSYS} )

@
<<NAGE01.spad (SPAD from IN)>>=
${MID}/NAGE01.spad: ${IN}/e01.spad.pamphlet
	@ echo 0 making ${MID}/NAGE01.spad from ${IN}/e01.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGE01.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGE01 NagInterpolationPackage" ${IN}/e01.spad.pamphlet >NAGE01.spad )

@
<<e01.spad.dvi (DOC from IN)>>=
${DOC}/e01.spad.dvi: ${IN}/e01.spad.pamphlet
	@ echo 0 making ${DOC}/e01.spad.dvi from ${IN}/e01.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/e01.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} e01.spad ; \
	rm -f ${DOC}/e01.spad.pamphlet ; \
	rm -f ${DOC}/e01.spad.tex ; \
	rm -f ${DOC}/e01.spad )

@
\subsection{e02.spad \cite{1}}
<<e02.spad (SPAD from IN)>>=
${MID}/e02.spad: ${IN}/e02.spad.pamphlet
	@ echo 0 making ${MID}/e02.spad from ${IN}/e02.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/e02.spad.pamphlet >e02.spad )

@
<<NAGE02.o (O from NRLIB)>>=
${OUT}/NAGE02.o: ${MID}/NAGE02.NRLIB
	@ echo 0 making ${OUT}/NAGE02.o from ${MID}/NAGE02.NRLIB
	@ cp ${MID}/NAGE02.NRLIB/code.o ${OUT}/NAGE02.o

@
<<NAGE02.NRLIB (NRLIB from MID)>>=
${MID}/NAGE02.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/NAGE02.spad
	@ echo 0 making ${MID}/NAGE02.NRLIB from ${MID}/NAGE02.spad
	@ (cd ${MID} ; 	echo ')co NAGE02.spad' | ${INTERPSYS} )

@
<<NAGE02.spad (SPAD from IN)>>=
${MID}/NAGE02.spad: ${IN}/e02.spad.pamphlet
	@ echo 0 making ${MID}/NAGE02.spad from ${IN}/e02.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGE02.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGE02 NagFittingPackage" ${IN}/e02.spad.pamphlet >NAGE02.spad )

@
<<e02.spad.dvi (DOC from IN)>>=
${DOC}/e02.spad.dvi: ${IN}/e02.spad.pamphlet
	@ echo 0 making ${DOC}/e02.spad.dvi from ${IN}/e02.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/e02.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} e02.spad ; \
	rm -f ${DOC}/e02.spad.pamphlet ; \
	rm -f ${DOC}/e02.spad.tex ; \
	rm -f ${DOC}/e02.spad )

@
\subsection{e04agents.spad \cite{1}}
<<e04agents.spad (SPAD from IN)>>=
${MID}/e04agents.spad: ${IN}/e04agents.spad.pamphlet
	@ echo 0 making ${MID}/e04agents.spad from ${IN}/e04agents.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/e04agents.spad.pamphlet >e04agents.spad )

@
<<E04AGNT.o (O from NRLIB)>>=
${OUT}/E04AGNT.o: ${MID}/E04AGNT.NRLIB
	@ echo 0 making ${OUT}/E04AGNT.o from ${MID}/E04AGNT.NRLIB
	@ cp ${MID}/E04AGNT.NRLIB/code.o ${OUT}/E04AGNT.o

@
<<E04AGNT.NRLIB (NRLIB from MID)>>=
${MID}/E04AGNT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/E04AGNT.spad
	@ echo 0 making ${MID}/E04AGNT.NRLIB from ${MID}/E04AGNT.spad
	@ (cd ${MID} ; 	echo ')co E04AGNT.spad' | ${INTERPSYS} )

@
<<E04AGNT.spad (SPAD from IN)>>=
${MID}/E04AGNT.spad: ${IN}/e04agents.spad.pamphlet
	@ echo 0 making ${MID}/E04AGNT.spad from ${IN}/e04agents.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04AGNT.NRLIB ; \
	${SPADBIN}/notangle -R"package E04AGNT e04AgentsPackage" ${IN}/e04agents.spad.pamphlet >E04AGNT.spad )

@
<<e04agents.spad.dvi (DOC from IN)>>=
${DOC}/e04agents.spad.dvi: ${IN}/e04agents.spad.pamphlet
	@ echo 0 making ${DOC}/e04agents.spad.dvi from ${IN}/e04agents.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/e04agents.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} e04agents.spad ; \
	rm -f ${DOC}/e04agents.spad.pamphlet ; \
	rm -f ${DOC}/e04agents.spad.tex ; \
	rm -f ${DOC}/e04agents.spad )

@
\subsection{e04Package.spad \cite{1}}
<<e04Package.spad (SPAD from IN)>>=
${MID}/e04Package.spad: ${IN}/e04Package.spad.pamphlet
	@ echo 0 making ${MID}/e04Package.spad from ${IN}/e04Package.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/e04Package.spad.pamphlet >e04Package.spad )

@
<<OPTPACK.o (O from NRLIB)>>=
${OUT}/OPTPACK.o: ${MID}/OPTPACK.NRLIB
	@ echo 0 making ${OUT}/OPTPACK.o from ${MID}/OPTPACK.NRLIB
	@ cp ${MID}/OPTPACK.NRLIB/code.o ${OUT}/OPTPACK.o

@
<<OPTPACK.NRLIB (NRLIB from MID)>>=
${MID}/OPTPACK.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/OPTPACK.spad
	@ echo 0 making ${MID}/OPTPACK.NRLIB from ${MID}/OPTPACK.spad
	@ (cd ${MID} ; 	echo ')co OPTPACK.spad' | ${INTERPSYS} )

@
<<OPTPACK.spad (SPAD from IN)>>=
${MID}/OPTPACK.spad: ${IN}/e04Package.spad.pamphlet
	@ echo 0 making ${MID}/OPTPACK.spad from ${IN}/e04Package.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OPTPACK.NRLIB ; \
	${SPADBIN}/notangle -R"package OPTPACK AnnaNumericalOptimizationPackage" ${IN}/e04Package.spad.pamphlet >OPTPACK.spad )

@
<<e04Package.spad.dvi (DOC from IN)>>=
${DOC}/e04Package.spad.dvi: ${IN}/e04Package.spad.pamphlet
	@ echo 0 making ${DOC}/e04Package.spad.dvi from ${IN}/e04Package.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/e04Package.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} e04Package.spad ; \
	rm -f ${DOC}/e04Package.spad.pamphlet ; \
	rm -f ${DOC}/e04Package.spad.tex ; \
	rm -f ${DOC}/e04Package.spad )

@
\subsection{e04routine.spad \cite{1}}
<<e04routine.spad (SPAD from IN)>>=
${MID}/e04routine.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/e04routine.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/e04routine.spad.pamphlet >e04routine.spad )

@
<<E04DGFA.o (O from NRLIB)>>=
${OUT}/E04DGFA.o: ${MID}/E04DGFA.NRLIB
	@ echo 0 making ${OUT}/E04DGFA.o from ${MID}/E04DGFA.NRLIB
	@ cp ${MID}/E04DGFA.NRLIB/code.o ${OUT}/E04DGFA.o

@
<<E04DGFA.NRLIB (NRLIB from MID)>>=
${MID}/E04DGFA.NRLIB: ${MID}/E04DGFA.spad
	@ echo 0 making ${MID}/E04DGFA.NRLIB from ${MID}/E04DGFA.spad
	@ (cd ${MID} ; 	echo ')co E04DGFA.spad' | ${INTERPSYS} )

@
<<E04DGFA.spad (SPAD from IN)>>=
${MID}/E04DGFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04DGFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04DGFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04DGFA e04dgfAnnaType" ${IN}/e04routine.spad.pamphlet >E04DGFA.spad )

@
<<E04FDFA.o (O from NRLIB)>>=
${OUT}/E04FDFA.o: ${MID}/E04FDFA.NRLIB
	@ echo 0 making ${OUT}/E04FDFA.o from ${MID}/E04FDFA.NRLIB
	@ cp ${MID}/E04FDFA.NRLIB/code.o ${OUT}/E04FDFA.o

@
<<E04FDFA.NRLIB (NRLIB from MID)>>=
${MID}/E04FDFA.NRLIB: ${MID}/E04FDFA.spad
	@ echo 0 making ${MID}/E04FDFA.NRLIB from ${MID}/E04FDFA.spad
	@ (cd ${MID} ; 	echo ')co E04FDFA.spad' | ${INTERPSYS} )

@
<<E04FDFA.spad (SPAD from IN)>>=
${MID}/E04FDFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04FDFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04FDFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04FDFA e04fdfAnnaType" ${IN}/e04routine.spad.pamphlet >E04FDFA.spad )

@
<<E04JAFA.o (O from NRLIB)>>=
${OUT}/E04JAFA.o: ${MID}/E04JAFA.NRLIB
	@ echo 0 making ${OUT}/E04JAFA.o from ${MID}/E04JAFA.NRLIB
	@ cp ${MID}/E04JAFA.NRLIB/code.o ${OUT}/E04JAFA.o

@
<<E04JAFA.NRLIB (NRLIB from MID)>>=
${MID}/E04JAFA.NRLIB: ${MID}/E04JAFA.spad
	@ echo 0 making ${MID}/E04JAFA.NRLIB from ${MID}/E04JAFA.spad
	@ (cd ${MID} ; 	echo ')co E04JAFA.spad' | ${INTERPSYS} )

@
<<E04JAFA.spad (SPAD from IN)>>=
${MID}/E04JAFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04JAFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04JAFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04JAFA e04jafAnnaType" ${IN}/e04routine.spad.pamphlet >E04JAFA.spad )

@
<<E04GCFA.o (O from NRLIB)>>=
${OUT}/E04GCFA.o: ${MID}/E04GCFA.NRLIB
	@ echo 0 making ${OUT}/E04GCFA.o from ${MID}/E04GCFA.NRLIB
	@ cp ${MID}/E04GCFA.NRLIB/code.o ${OUT}/E04GCFA.o

@
<<E04GCFA.NRLIB (NRLIB from MID)>>=
${MID}/E04GCFA.NRLIB: ${MID}/E04GCFA.spad
	@ echo 0 making ${MID}/E04GCFA.NRLIB from ${MID}/E04GCFA.spad
	@ (cd ${MID} ; 	echo ')co E04GCFA.spad' | ${INTERPSYS} )

@
<<E04GCFA.spad (SPAD from IN)>>=
${MID}/E04GCFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04GCFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04GCFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04GCFA e04gcfAnnaType" ${IN}/e04routine.spad.pamphlet >E04GCFA.spad )

@
<<E04MBFA.o (O from NRLIB)>>=
${OUT}/E04MBFA.o: ${MID}/E04MBFA.NRLIB
	@ echo 0 making ${OUT}/E04MBFA.o from ${MID}/E04MBFA.NRLIB
	@ cp ${MID}/E04MBFA.NRLIB/code.o ${OUT}/E04MBFA.o

@
<<E04MBFA.NRLIB (NRLIB from MID)>>=
${MID}/E04MBFA.NRLIB: ${MID}/E04MBFA.spad
	@ echo 0 making ${MID}/E04MBFA.NRLIB from ${MID}/E04MBFA.spad
	@ (cd ${MID} ; 	echo ')co E04MBFA.spad' | ${INTERPSYS} )

@
<<E04MBFA.spad (SPAD from IN)>>=
${MID}/E04MBFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04MBFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04MBFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04MBFA e04mbfAnnaType" ${IN}/e04routine.spad.pamphlet >E04MBFA.spad )

@
<<E04NAFA.o (O from NRLIB)>>=
${OUT}/E04NAFA.o: ${MID}/E04NAFA.NRLIB
	@ echo 0 making ${OUT}/E04NAFA.o from ${MID}/E04NAFA.NRLIB
	@ cp ${MID}/E04NAFA.NRLIB/code.o ${OUT}/E04NAFA.o

@
<<E04NAFA.NRLIB (NRLIB from MID)>>=
${MID}/E04NAFA.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/E04NAFA.spad
	@ echo 0 making ${MID}/E04NAFA.NRLIB from ${MID}/E04NAFA.spad
	@ (cd ${MID} ; 	echo ')co E04NAFA.spad' | ${INTERPSYS} )

@
<<E04NAFA.spad (SPAD from IN)>>=
${MID}/E04NAFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04NAFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04NAFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04NAFA e04nafAnnaType" ${IN}/e04routine.spad.pamphlet >E04NAFA.spad )

@
<<E04UCFA.o (O from NRLIB)>>=
${OUT}/E04UCFA.o: ${MID}/E04UCFA.NRLIB
	@ echo 0 making ${OUT}/E04UCFA.o from ${MID}/E04UCFA.NRLIB
	@ cp ${MID}/E04UCFA.NRLIB/code.o ${OUT}/E04UCFA.o

@
<<E04UCFA.NRLIB (NRLIB from MID)>>=
${MID}/E04UCFA.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/E04UCFA.spad
	@ echo 0 making ${MID}/E04UCFA.NRLIB from ${MID}/E04UCFA.spad
	@ (cd ${MID} ; 	echo ')co E04UCFA.spad' | ${INTERPSYS} )

@
<<E04UCFA.spad (SPAD from IN)>>=
${MID}/E04UCFA.spad: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${MID}/E04UCFA.spad from ${IN}/e04routine.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf E04UCFA.NRLIB ; \
	${SPADBIN}/notangle -R"domain E04UCFA e04ucfAnnaType" ${IN}/e04routine.spad.pamphlet >E04UCFA.spad )

@
<<e04routine.spad.dvi (DOC from IN)>>=
${DOC}/e04routine.spad.dvi: ${IN}/e04routine.spad.pamphlet
	@ echo 0 making ${DOC}/e04routine.spad.dvi from ${IN}/e04routine.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/e04routine.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} e04routine.spad ; \
	rm -f ${DOC}/e04routine.spad.pamphlet ; \
	rm -f ${DOC}/e04routine.spad.tex ; \
	rm -f ${DOC}/e04routine.spad )

@
\subsection{e04.spad \cite{1}}
<<e04.spad (SPAD from IN)>>=
${MID}/e04.spad: ${IN}/e04.spad.pamphlet
	@ echo 0 making ${MID}/e04.spad from ${IN}/e04.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/e04.spad.pamphlet >e04.spad )

@
<<NAGE04.o (O from NRLIB)>>=
${OUT}/NAGE04.o: ${MID}/NAGE04.NRLIB
	@ echo 0 making ${OUT}/NAGE04.o from ${MID}/NAGE04.NRLIB
	@ cp ${MID}/NAGE04.NRLIB/code.o ${OUT}/NAGE04.o

@
<<NAGE04.NRLIB (NRLIB from MID)>>=
${MID}/NAGE04.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/NAGE04.spad
	@ echo 0 making ${MID}/NAGE04.NRLIB from ${MID}/NAGE04.spad
	@ (cd ${MID} ; 	echo ')co NAGE04.spad' | ${INTERPSYS} )

@
<<NAGE04.spad (SPAD from IN)>>=
${MID}/NAGE04.spad: ${IN}/e04.spad.pamphlet
	@ echo 0 making ${MID}/NAGE04.spad from ${IN}/e04.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGE04.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGE04 NagOptimisationPackage" ${IN}/e04.spad.pamphlet >NAGE04.spad )

@
<<e04.spad.dvi (DOC from IN)>>=
${DOC}/e04.spad.dvi: ${IN}/e04.spad.pamphlet
	@ echo 0 making ${DOC}/e04.spad.dvi from ${IN}/e04.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/e04.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} e04.spad ; \
	rm -f ${DOC}/e04.spad.pamphlet ; \
	rm -f ${DOC}/e04.spad.tex ; \
	rm -f ${DOC}/e04.spad )

@
\subsection{efstruc.spad \cite{1}}
<<efstruc.spad (SPAD from IN)>>=
${MID}/efstruc.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/efstruc.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/efstruc.spad.pamphlet >efstruc.spad )

@
<<CTRIGMNP.o (O from NRLIB)>>=
${OUT}/CTRIGMNP.o: ${MID}/CTRIGMNP.NRLIB
	@ echo 0 making ${OUT}/CTRIGMNP.o from ${MID}/CTRIGMNP.NRLIB
	@ cp ${MID}/CTRIGMNP.NRLIB/code.o ${OUT}/CTRIGMNP.o

@
<<CTRIGMNP.NRLIB (NRLIB from MID)>>=
${MID}/CTRIGMNP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/CTRIGMNP.spad
	@ echo 0 making ${MID}/CTRIGMNP.NRLIB from ${MID}/CTRIGMNP.spad
	@ (cd ${MID} ; 	echo ')co CTRIGMNP.spad' | ${INTERPSYS} )

@
<<CTRIGMNP.spad (SPAD from IN)>>=
${MID}/CTRIGMNP.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/CTRIGMNP.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CTRIGMNP.NRLIB ; \
	${SPADBIN}/notangle -R"package CTRIGMNP ComplexTrigonometricManipulations" ${IN}/efstruc.spad.pamphlet >CTRIGMNP.spad )

@
<<EFSTRUC.o (O from NRLIB)>>=
${OUT}/EFSTRUC.o: ${MID}/EFSTRUC.NRLIB
	@ echo 0 making ${OUT}/EFSTRUC.o from ${MID}/EFSTRUC.NRLIB
	@ cp ${MID}/EFSTRUC.NRLIB/code.o ${OUT}/EFSTRUC.o

@
<<EFSTRUC.NRLIB (NRLIB from MID)>>=
${MID}/EFSTRUC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/EFSTRUC.spad
	@ echo 0 making ${MID}/EFSTRUC.NRLIB from ${MID}/EFSTRUC.spad
	@ (cd ${MID} ; 	echo ')co EFSTRUC.spad' | ${INTERPSYS} )

@
<<EFSTRUC.spad (SPAD from IN)>>=
${MID}/EFSTRUC.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/EFSTRUC.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EFSTRUC.NRLIB ; \
	${SPADBIN}/notangle -R"package EFSTRUC ElementaryFunctionStructurePackage" ${IN}/efstruc.spad.pamphlet >EFSTRUC.spad )

@
<<ITRIGMNP.o (O from NRLIB)>>=
${OUT}/ITRIGMNP.o: ${MID}/ITRIGMNP.NRLIB
	@ echo 0 making ${OUT}/ITRIGMNP.o from ${MID}/ITRIGMNP.NRLIB
	@ cp ${MID}/ITRIGMNP.NRLIB/code.o ${OUT}/ITRIGMNP.o

@
<<ITRIGMNP.NRLIB (NRLIB from MID)>>=
${MID}/ITRIGMNP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ITRIGMNP.spad
	@ echo 0 making ${MID}/ITRIGMNP.NRLIB from ${MID}/ITRIGMNP.spad
	@ (cd ${MID} ; 	echo ')co ITRIGMNP.spad' | ${INTERPSYS} )

@
<<ITRIGMNP.spad (SPAD from IN)>>=
${MID}/ITRIGMNP.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/ITRIGMNP.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ITRIGMNP.NRLIB ; \
	${SPADBIN}/notangle -R"package ITRIGMNP InnerTrigonometricManipulations" ${IN}/efstruc.spad.pamphlet >ITRIGMNP.spad )

@
<<SYMFUNC.o (O from NRLIB)>>=
${OUT}/SYMFUNC.o: ${MID}/SYMFUNC.NRLIB
	@ echo 0 making ${OUT}/SYMFUNC.o from ${MID}/SYMFUNC.NRLIB
	@ cp ${MID}/SYMFUNC.NRLIB/code.o ${OUT}/SYMFUNC.o

@
<<SYMFUNC.NRLIB (NRLIB from MID)>>=
${MID}/SYMFUNC.NRLIB: ${MID}/SYMFUNC.spad
	@ echo 0 making ${MID}/SYMFUNC.NRLIB from ${MID}/SYMFUNC.spad
	@ (cd ${MID} ; 	echo ')co SYMFUNC.spad' | ${INTERPSYS} )

@
<<SYMFUNC.spad (SPAD from IN)>>=
${MID}/SYMFUNC.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/SYMFUNC.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYMFUNC.NRLIB ; \
	${SPADBIN}/notangle -R"package SYMFUNC SymmetricFunctions" ${IN}/efstruc.spad.pamphlet >SYMFUNC.spad )

@
<<TRIGMNIP.o (O from NRLIB)>>=
${OUT}/TRIGMNIP.o: ${MID}/TRIGMNIP.NRLIB
	@ echo 0 making ${OUT}/TRIGMNIP.o from ${MID}/TRIGMNIP.NRLIB
	@ cp ${MID}/TRIGMNIP.NRLIB/code.o ${OUT}/TRIGMNIP.o

@
<<TRIGMNIP.NRLIB (NRLIB from MID)>>=
${MID}/TRIGMNIP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/TRIGMNIP.spad
	@ echo 0 making ${MID}/TRIGMNIP.NRLIB from ${MID}/TRIGMNIP.spad
	@ (cd ${MID} ; 	echo ')co TRIGMNIP.spad' | ${INTERPSYS} )

@
<<TRIGMNIP.spad (SPAD from IN)>>=
${MID}/TRIGMNIP.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/TRIGMNIP.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TRIGMNIP.NRLIB ; \
	${SPADBIN}/notangle -R"package TRIGMNIP TrigonometricManipulations" ${IN}/efstruc.spad.pamphlet >TRIGMNIP.spad )

@
<<TANEXP.o (O from NRLIB)>>=
${OUT}/TANEXP.o: ${MID}/TANEXP.NRLIB
	@ echo 0 making ${OUT}/TANEXP.o from ${MID}/TANEXP.NRLIB
	@ cp ${MID}/TANEXP.NRLIB/code.o ${OUT}/TANEXP.o

@
<<TANEXP.NRLIB (NRLIB from MID)>>=
${MID}/TANEXP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/TANEXP.spad
	@ echo 0 making ${MID}/TANEXP.NRLIB from ${MID}/TANEXP.spad
	@ (cd ${MID} ; 	echo ')co TANEXP.spad' | ${INTERPSYS} )

@
<<TANEXP.spad (SPAD from IN)>>=
${MID}/TANEXP.spad: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${MID}/TANEXP.spad from ${IN}/efstruc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TANEXP.NRLIB ; \
	${SPADBIN}/notangle -R"package TANEXP TangentExpansions" ${IN}/efstruc.spad.pamphlet >TANEXP.spad )

@
<<efstruc.spad.dvi (DOC from IN)>>=
${DOC}/efstruc.spad.dvi: ${IN}/efstruc.spad.pamphlet
	@ echo 0 making ${DOC}/efstruc.spad.dvi from ${IN}/efstruc.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/efstruc.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} efstruc.spad ; \
	rm -f ${DOC}/efstruc.spad.pamphlet ; \
	rm -f ${DOC}/efstruc.spad.tex ; \
	rm -f ${DOC}/efstruc.spad )

@
\subsection{efuls.spad \cite{1}}
<<efuls.spad (SPAD from IN)>>=
${MID}/efuls.spad: ${IN}/efuls.spad.pamphlet
	@ echo 0 making ${MID}/efuls.spad from ${IN}/efuls.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/efuls.spad.pamphlet >efuls.spad )

@
<<EFULS.o (O from NRLIB)>>=
${OUT}/EFULS.o: ${MID}/EFULS.NRLIB
	@ echo 0 making ${OUT}/EFULS.o from ${MID}/EFULS.NRLIB
	@ cp ${MID}/EFULS.NRLIB/code.o ${OUT}/EFULS.o

@
<<EFULS.NRLIB (NRLIB from MID)>>=
${MID}/EFULS.NRLIB: ${MID}/EFULS.spad
	@ echo 0 making ${MID}/EFULS.NRLIB from ${MID}/EFULS.spad
	@ (cd ${MID} ; 	echo ')co EFULS.spad' | ${INTERPSYS} )

@
<<EFULS.spad (SPAD from IN)>>=
${MID}/EFULS.spad: ${IN}/efuls.spad.pamphlet
	@ echo 0 making ${MID}/EFULS.spad from ${IN}/efuls.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EFULS.NRLIB ; \
	${SPADBIN}/notangle -R"package EFULS ElementaryFunctionsUnivariateLaurentSeries" ${IN}/efuls.spad.pamphlet >EFULS.spad )

@
<<efuls.spad.dvi (DOC from IN)>>=
${DOC}/efuls.spad.dvi: ${IN}/efuls.spad.pamphlet
	@ echo 0 making ${DOC}/efuls.spad.dvi from ${IN}/efuls.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/efuls.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} efuls.spad ; \
	rm -f ${DOC}/efuls.spad.pamphlet ; \
	rm -f ${DOC}/efuls.spad.tex ; \
	rm -f ${DOC}/efuls.spad )

@
\subsection{efupxs.spad \cite{1}}
<<efupxs.spad (SPAD from IN)>>=
${MID}/efupxs.spad: ${IN}/efupxs.spad.pamphlet
	@ echo 0 making ${MID}/efupxs.spad from ${IN}/efupxs.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/efupxs.spad.pamphlet >efupxs.spad )

@
<<EFUPXS.o (O from NRLIB)>>=
${OUT}/EFUPXS.o: ${MID}/EFUPXS.NRLIB
	@ echo 0 making ${OUT}/EFUPXS.o from ${MID}/EFUPXS.NRLIB
	@ cp ${MID}/EFUPXS.NRLIB/code.o ${OUT}/EFUPXS.o

@
<<EFUPXS.NRLIB (NRLIB from MID)>>=
${MID}/EFUPXS.NRLIB: ${MID}/EFUPXS.spad
	@ echo 0 making ${MID}/EFUPXS.NRLIB from ${MID}/EFUPXS.spad
	@ (cd ${MID} ; 	echo ')co EFUPXS.spad' | ${INTERPSYS} )

@
<<EFUPXS.spad (SPAD from IN)>>=
${MID}/EFUPXS.spad: ${IN}/efupxs.spad.pamphlet
	@ echo 0 making ${MID}/EFUPXS.spad from ${IN}/efupxs.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EFUPXS.NRLIB ; \
	${SPADBIN}/notangle -R"package EFUPXS ElementaryFunctionsUnivariatePuiseuxSeries" ${IN}/efupxs.spad.pamphlet >EFUPXS.spad )

@
<<efupxs.spad.dvi (DOC from IN)>>=
${DOC}/efupxs.spad.dvi: ${IN}/efupxs.spad.pamphlet
	@ echo 0 making ${DOC}/efupxs.spad.dvi from ${IN}/efupxs.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/efupxs.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} efupxs.spad ; \
	rm -f ${DOC}/efupxs.spad.pamphlet ; \
	rm -f ${DOC}/efupxs.spad.tex ; \
	rm -f ${DOC}/efupxs.spad )

@
\subsection{eigen.spad \cite{1}}
<<eigen.spad (SPAD from IN)>>=
${MID}/eigen.spad: ${IN}/eigen.spad.pamphlet
	@ echo 0 making ${MID}/eigen.spad from ${IN}/eigen.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/eigen.spad.pamphlet >eigen.spad )

@
<<CHARPOL.o (O from NRLIB)>>=
${OUT}/CHARPOL.o: ${MID}/CHARPOL.NRLIB
	@ echo 0 making ${OUT}/CHARPOL.o from ${MID}/CHARPOL.NRLIB
	@ cp ${MID}/CHARPOL.NRLIB/code.o ${OUT}/CHARPOL.o

@
<<CHARPOL.NRLIB (NRLIB from MID)>>=
${MID}/CHARPOL.NRLIB: ${MID}/CHARPOL.spad
	@ echo 0 making ${MID}/CHARPOL.NRLIB from ${MID}/CHARPOL.spad
	@ (cd ${MID} ; 	echo ')co CHARPOL.spad' | ${INTERPSYS} )

@
<<CHARPOL.spad (SPAD from IN)>>=
${MID}/CHARPOL.spad: ${IN}/eigen.spad.pamphlet
	@ echo 0 making ${MID}/CHARPOL.spad from ${IN}/eigen.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CHARPOL.NRLIB ; \
	${SPADBIN}/notangle -R"package CHARPOL CharacteristicPolynomialPackage" ${IN}/eigen.spad.pamphlet >CHARPOL.spad )

@
<<EP.o (O from NRLIB)>>=
${OUT}/EP.o: ${MID}/EP.NRLIB
	@ echo 0 making ${OUT}/EP.o from ${MID}/EP.NRLIB
	@ cp ${MID}/EP.NRLIB/code.o ${OUT}/EP.o

@
<<EP.NRLIB (NRLIB from MID)>>=
${MID}/EP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/EP.spad
	@ echo 0 making ${MID}/EP.NRLIB from ${MID}/EP.spad
	@ (cd ${MID} ; 	echo ')co EP.spad' | ${INTERPSYS} )

@
<<EP.spad (SPAD from IN)>>=
${MID}/EP.spad: ${IN}/eigen.spad.pamphlet
	@ echo 0 making ${MID}/EP.spad from ${IN}/eigen.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EP.NRLIB ; \
	${SPADBIN}/notangle -R"package EP EigenPackage" ${IN}/eigen.spad.pamphlet >EP.spad )

@
<<eigen.spad.dvi (DOC from IN)>>=
${DOC}/eigen.spad.dvi: ${IN}/eigen.spad.pamphlet
	@ echo 0 making ${DOC}/eigen.spad.dvi from ${IN}/eigen.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/eigen.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} eigen.spad ; \
	rm -f ${DOC}/eigen.spad.pamphlet ; \
	rm -f ${DOC}/eigen.spad.tex ; \
	rm -f ${DOC}/eigen.spad )

@
\subsection{elemntry.spad \cite{1}}
<<elemntry.spad (SPAD from IN)>>=
${MID}/elemntry.spad: ${IN}/elemntry.spad.pamphlet
	@ echo 0 making ${MID}/elemntry.spad from ${IN}/elemntry.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/elemntry.spad.pamphlet >elemntry.spad )

@
<<EF.o (O from NRLIB)>>=
${OUT}/EF.o: ${MID}/EF.NRLIB
	@ echo 0 making ${OUT}/EF.o from ${MID}/EF.NRLIB
	@ cp ${MID}/EF.NRLIB/code.o ${OUT}/EF.o

@
<<EF.NRLIB (NRLIB from MID)>>=
${MID}/EF.NRLIB: ${MID}/EF.spad
	@ echo 0 making ${MID}/EF.NRLIB from ${MID}/EF.spad
	@ (cd ${MID} ; 	echo ')co EF.spad' | ${INTERPSYS} )

@
<<EF.spad (SPAD from IN)>>=
${MID}/EF.spad: ${IN}/elemntry.spad.pamphlet
	@ echo 0 making ${MID}/EF.spad from ${IN}/elemntry.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EF.NRLIB ; \
	${SPADBIN}/notangle -R"package EF ElementaryFunction" ${IN}/elemntry.spad.pamphlet >EF.spad )

@
<<elemntry.spad.dvi (DOC from IN)>>=
${DOC}/elemntry.spad.dvi: ${IN}/elemntry.spad.pamphlet
	@ echo 0 making ${DOC}/elemntry.spad.dvi from ${IN}/elemntry.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/elemntry.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} elemntry.spad ; \
	rm -f ${DOC}/elemntry.spad.pamphlet ; \
	rm -f ${DOC}/elemntry.spad.tex ; \
	rm -f ${DOC}/elemntry.spad )

@
\subsection{elfuts.spad \cite{1}}
<<elfuts.spad (SPAD from IN)>>=
${MID}/elfuts.spad: ${IN}/elfuts.spad.pamphlet
	@ echo 0 making ${MID}/elfuts.spad from ${IN}/elfuts.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/elfuts.spad.pamphlet >elfuts.spad )

@
<<ELFUTS.o (O from NRLIB)>>=
${OUT}/ELFUTS.o: ${MID}/ELFUTS.NRLIB
	@ echo 0 making ${OUT}/ELFUTS.o from ${MID}/ELFUTS.NRLIB
	@ cp ${MID}/ELFUTS.NRLIB/code.o ${OUT}/ELFUTS.o

@
<<ELFUTS.NRLIB (NRLIB from MID)>>=
${MID}/ELFUTS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ELFUTS.spad
	@ echo 0 making ${MID}/ELFUTS.NRLIB from ${MID}/ELFUTS.spad
	@ (cd ${MID} ; 	echo ')co ELFUTS.spad' | ${INTERPSYS} )

@
<<ELFUTS.spad (SPAD from IN)>>=
${MID}/ELFUTS.spad: ${IN}/elfuts.spad.pamphlet
	@ echo 0 making ${MID}/ELFUTS.spad from ${IN}/elfuts.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ELFUTS.NRLIB ; \
	${SPADBIN}/notangle -R"package ELFUTS EllipticFunctionsUnivariateTaylorSeries" ${IN}/elfuts.spad.pamphlet >ELFUTS.spad )

@

<<elfuts.spad.dvi (DOC from IN)>>=
${DOC}/elfuts.spad.dvi: ${IN}/elfuts.spad.pamphlet
	@ echo 0 making ${DOC}/elfuts.spad.dvi from ${IN}/elfuts.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/elfuts.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} elfuts.spad ; \
	rm -f ${DOC}/elfuts.spad.pamphlet ; \
	rm -f ${DOC}/elfuts.spad.tex ; \
	rm -f ${DOC}/elfuts.spad )

@
\subsection{equation1.spad \cite{1}}
<<equation1.spad (SPAD from IN)>>=
${MID}/equation1.spad: ${IN}/equation1.spad.pamphlet
	@ echo 0 making ${MID}/equation1.spad from ${IN}/equation1.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/equation1.spad.pamphlet >equation1.spad )

@
<<EVALAB-.o (O from NRLIB)>>=
${OUT}/EVALAB-.o: ${MID}/EVALAB.NRLIB
	@ echo 0 making ${OUT}/EVALAB-.o from ${MID}/EVALAB-.NRLIB
	@ cp ${MID}/EVALAB-.NRLIB/code.o ${OUT}/EVALAB-.o

@
<<EVALAB-.NRLIB (NRLIB from MID)>>=
${MID}/EVALAB-.NRLIB: ${OUT}/TYPE.o ${MID}/EVALAB.spad 
	@ echo 0 making ${MID}/EVALAB-.NRLIB from ${MID}/EVALAB.spad
	@ (cd ${MID} ; 	echo ')co EVALAB.spad' | ${INTERPSYS} )

@
<<EVALAB.o (O from NRLIB)>>=
${OUT}/EVALAB.o: ${MID}/EVALAB.NRLIB
	@ echo 0 making ${OUT}/EVALAB.o from ${MID}/EVALAB.NRLIB
	@ cp ${MID}/EVALAB.NRLIB/code.o ${OUT}/EVALAB.o

@
<<EVALAB.NRLIB (NRLIB from MID)>>=
${MID}/EVALAB.NRLIB: ${OUT}/TYPE.o ${MID}/EVALAB.spad
	@ echo 0 making ${MID}/EVALAB.NRLIB from ${MID}/EVALAB.spad
	@ (cd ${MID} ; 	echo ')co EVALAB.spad' | ${INTERPSYS} )

@
<<EVALAB.spad (SPAD from IN)>>=
${MID}/EVALAB.spad: ${IN}/equation1.spad.pamphlet
	@ echo 0 making ${MID}/EVALAB.spad from ${IN}/equation1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EVALAB.NRLIB ; \
	${SPADBIN}/notangle -R"category EVALAB Evalable" ${IN}/equation1.spad.pamphlet >EVALAB.spad )

@
<<IEVALAB-.o (O from NRLIB)>>=
${OUT}/IEVALAB-.o: ${MID}/IEVALAB.NRLIB
	@ echo 0 making ${OUT}/IEVALAB-.o from ${MID}/IEVALAB-.NRLIB
	@ cp ${MID}/IEVALAB-.NRLIB/code.o ${OUT}/IEVALAB-.o

@
<<IEVALAB-.NRLIB (NRLIB from MID)>>=
${MID}/IEVALAB-.NRLIB: ${OUT}/TYPE.o ${MID}/IEVALAB.spad 
	@ echo 0 making ${MID}/IEVALAB-.NRLIB from ${MID}/IEVALAB.spad
	@ (cd ${MID} ; 	echo ')co IEVALAB.spad' | ${INTERPSYS} )

@
<<IEVALAB.o (O from NRLIB)>>=
${OUT}/IEVALAB.o: ${MID}/IEVALAB.NRLIB
	@ echo 0 making ${OUT}/IEVALAB.o from ${MID}/IEVALAB.NRLIB
	@ cp ${MID}/IEVALAB.NRLIB/code.o ${OUT}/IEVALAB.o

@
<<IEVALAB.NRLIB (NRLIB from MID)>>=
${MID}/IEVALAB.NRLIB: ${MID}/IEVALAB.spad
	@ echo 0 making ${MID}/IEVALAB.NRLIB from ${MID}/IEVALAB.spad
	@ (cd ${MID} ; 	echo ')co IEVALAB.spad' | ${INTERPSYS} )

@
<<IEVALAB.spad (SPAD from IN)>>=
${MID}/IEVALAB.spad: ${IN}/equation1.spad.pamphlet
	@ echo 0 making ${MID}/IEVALAB.spad from ${IN}/equation1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IEVALAB.NRLIB ; \
	${SPADBIN}/notangle -R"category IEVALAB InnerEvalable" ${IN}/equation1.spad.pamphlet >IEVALAB.spad )

@
<<equation1.spad.dvi (DOC from IN)>>=
${DOC}/equation1.spad.dvi: ${IN}/equation1.spad.pamphlet
	@ echo 0 making ${DOC}/equation1.spad.dvi from ${IN}/equation1.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/equation1.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} equation1.spad ; \
	rm -f ${DOC}/equation1.spad.pamphlet ; \
	rm -f ${DOC}/equation1.spad.tex ; \
	rm -f ${DOC}/equation1.spad )

@
\subsection{equation2.spad \cite{1}}
<<equation2.spad (SPAD from IN)>>=
${MID}/equation2.spad: ${IN}/equation2.spad.pamphlet
	@ echo 0 making ${MID}/equation2.spad from ${IN}/equation2.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/equation2.spad.pamphlet >equation2.spad )

@
<<EQ.o (O from NRLIB)>>=
${OUT}/EQ.o: ${MID}/EQ.NRLIB
	@ echo 0 making ${OUT}/EQ.o from ${MID}/EQ.NRLIB
	@ cp ${MID}/EQ.NRLIB/code.o ${OUT}/EQ.o

@
<<EQ.NRLIB (NRLIB from MID)>>=
${MID}/EQ.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/EQ.spad
	@ echo 0 making ${MID}/EQ.NRLIB from ${MID}/EQ.spad
	@ (cd ${MID} ; 	echo ')co EQ.spad' | ${INTERPSYS} )

@
<<EQ.spad (SPAD from IN)>>=
${MID}/EQ.spad: ${IN}/equation2.spad.pamphlet
	@ echo 0 making ${MID}/EQ.spad from ${IN}/equation2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EQ.NRLIB ; \
	${SPADBIN}/notangle -R"domain EQ Equation" ${IN}/equation2.spad.pamphlet >EQ.spad )

@
<<EQ2.o (O from NRLIB)>>=
${OUT}/EQ2.o: ${MID}/EQ2.NRLIB
	@ echo 0 making ${OUT}/EQ2.o from ${MID}/EQ2.NRLIB
	@ cp ${MID}/EQ2.NRLIB/code.o ${OUT}/EQ2.o

@
<<EQ2.NRLIB (NRLIB from MID)>>=
${MID}/EQ2.NRLIB: ${OUT}/TYPE.o ${MID}/EQ2.spad
	@ echo 0 making ${MID}/EQ2.NRLIB from ${MID}/EQ2.spad
	@ (cd ${MID} ; 	echo ')co EQ2.spad' | ${INTERPSYS} )

@
<<EQ2.spad (SPAD from IN)>>=
${MID}/EQ2.spad: ${IN}/equation2.spad.pamphlet
	@ echo 0 making ${MID}/EQ2.spad from ${IN}/equation2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EQ2.NRLIB ; \
	${SPADBIN}/notangle -R"package EQ2 EquationFunctions2" ${IN}/equation2.spad.pamphlet >EQ2.spad )

@
<<FEVALAB-.o (O from NRLIB)>>=
${OUT}/FEVALAB-.o: ${MID}/FEVALAB.NRLIB
	@ echo 0 making ${OUT}/FEVALAB-.o from ${MID}/FEVALAB-.NRLIB
	@ cp ${MID}/FEVALAB-.NRLIB/code.o ${OUT}/FEVALAB-.o

@
<<FEVALAB-.NRLIB (NRLIB from MID)>>=
${MID}/FEVALAB-.NRLIB: ${OUT}/TYPE.o ${MID}/FEVALAB.spad 
	@ echo 0 making ${MID}/FEVALAB-.NRLIB from ${MID}/FEVALAB.spad
	@ (cd ${MID} ; 	echo ')co FEVALAB.spad' | ${INTERPSYS} )

@
<<FEVALAB.o (O from NRLIB)>>=
${OUT}/FEVALAB.o: ${MID}/FEVALAB.NRLIB
	@ echo 0 making ${OUT}/FEVALAB.o from ${MID}/FEVALAB.NRLIB
	@ cp ${MID}/FEVALAB.NRLIB/code.o ${OUT}/FEVALAB.o

@
<<FEVALAB.NRLIB (NRLIB from MID)>>=
${MID}/FEVALAB.NRLIB: ${OUT}/TYPE.o ${MID}/FEVALAB.spad
	@ echo 0 making ${MID}/FEVALAB.NRLIB from ${MID}/FEVALAB.spad
	@ (cd ${MID} ; 	echo ')co FEVALAB.spad' | ${INTERPSYS} )

@
<<FEVALAB.spad (SPAD from IN)>>=
${MID}/FEVALAB.spad: ${IN}/equation2.spad.pamphlet
	@ echo 0 making ${MID}/FEVALAB.spad from ${IN}/equation2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FEVALAB.NRLIB ; \
	${SPADBIN}/notangle -R"category FEVALAB FullyEvalableOver" ${IN}/equation2.spad.pamphlet >FEVALAB.spad )

@
<<equation2.spad.dvi (DOC from IN)>>=
${DOC}/equation2.spad.dvi: ${IN}/equation2.spad.pamphlet
	@ echo 0 making ${DOC}/equation2.spad.dvi from ${IN}/equation2.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/equation2.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} equation2.spad ; \
	rm -f ${DOC}/equation2.spad.pamphlet ; \
	rm -f ${DOC}/equation2.spad.tex ; \
	rm -f ${DOC}/equation2.spad )

@
\subsection{error.spad \cite{1}}
<<error.spad (SPAD from IN)>>=
${MID}/error.spad: ${IN}/error.spad.pamphlet
	@ echo 0 making ${MID}/error.spad from ${IN}/error.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/error.spad.pamphlet >error.spad )

@
<<ERROR.o (O from NRLIB)>>=
${OUT}/ERROR.o: ${MID}/ERROR.NRLIB
	@ echo 0 making ${OUT}/ERROR.o from ${MID}/ERROR.NRLIB
	@ cp ${MID}/ERROR.NRLIB/code.o ${OUT}/ERROR.o

@
<<ERROR.NRLIB (NRLIB from MID)>>=
${MID}/ERROR.NRLIB: ${MID}/ERROR.spad
	@ echo 0 making ${MID}/ERROR.NRLIB from ${MID}/ERROR.spad
	@ (cd ${MID} ; 	echo ')co ERROR.spad' | ${INTERPSYS} )

@
<<ERROR.spad (SPAD from IN)>>=
${MID}/ERROR.spad: ${IN}/error.spad.pamphlet
	@ echo 0 making ${MID}/ERROR.spad from ${IN}/error.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ERROR.NRLIB ; \
	${SPADBIN}/notangle -R"package ERROR ErrorFunctions" ${IN}/error.spad.pamphlet >ERROR.spad )

@
<<error.spad.dvi (DOC from IN)>>=
${DOC}/error.spad.dvi: ${IN}/error.spad.pamphlet
	@ echo 0 making ${DOC}/error.spad.dvi from ${IN}/error.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/error.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} error.spad ; \
	rm -f ${DOC}/error.spad.pamphlet ; \
	rm -f ${DOC}/error.spad.tex ; \
	rm -f ${DOC}/error.spad )

@
\subsection{expexpan.spad \cite{1}}
<<expexpan.spad (SPAD from IN)>>=
${MID}/expexpan.spad: ${IN}/expexpan.spad.pamphlet
	@ echo 0 making ${MID}/expexpan.spad from ${IN}/expexpan.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/expexpan.spad.pamphlet >expexpan.spad )

@
<<EXPEXPAN.o (O from NRLIB)>>=
${OUT}/EXPEXPAN.o: ${MID}/EXPEXPAN.NRLIB
	@ echo 0 making ${OUT}/EXPEXPAN.o from ${MID}/EXPEXPAN.NRLIB
	@ cp ${MID}/EXPEXPAN.NRLIB/code.o ${OUT}/EXPEXPAN.o

@
<<EXPEXPAN.NRLIB (NRLIB from MID)>>=
${MID}/EXPEXPAN.NRLIB: ${MID}/EXPEXPAN.spad
	@ echo 0 making ${MID}/EXPEXPAN.NRLIB from ${MID}/EXPEXPAN.spad
	@ (cd ${MID} ; 	echo ')co EXPEXPAN.spad' | ${INTERPSYS} )

@
<<EXPEXPAN.spad (SPAD from IN)>>=
${MID}/EXPEXPAN.spad: ${IN}/expexpan.spad.pamphlet
	@ echo 0 making ${MID}/EXPEXPAN.spad from ${IN}/expexpan.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPEXPAN.NRLIB ; \
	${SPADBIN}/notangle -R"domain EXPEXPAN ExponentialExpansion" ${IN}/expexpan.spad.pamphlet >EXPEXPAN.spad )

@
<<EXPUPXS.o (O from NRLIB)>>=
${OUT}/EXPUPXS.o: ${MID}/EXPUPXS.NRLIB
	@ echo 0 making ${OUT}/EXPUPXS.o from ${MID}/EXPUPXS.NRLIB
	@ cp ${MID}/EXPUPXS.NRLIB/code.o ${OUT}/EXPUPXS.o

@
<<EXPUPXS.NRLIB (NRLIB from MID)>>=
${MID}/EXPUPXS.NRLIB: ${MID}/EXPUPXS.spad
	@ echo 0 making ${MID}/EXPUPXS.NRLIB from ${MID}/EXPUPXS.spad
	@ (cd ${MID} ; 	echo ')co EXPUPXS.spad' | ${INTERPSYS} )

@
<<EXPUPXS.spad (SPAD from IN)>>=
${MID}/EXPUPXS.spad: ${IN}/expexpan.spad.pamphlet
	@ echo 0 making ${MID}/EXPUPXS.spad from ${IN}/expexpan.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPUPXS.NRLIB ; \
	${SPADBIN}/notangle -R"domain EXPUPXS ExponentialOfUnivariatePuiseuxSeries" ${IN}/expexpan.spad.pamphlet >EXPUPXS.spad )

@
<<UPXSSING.o (O from NRLIB)>>=
${OUT}/UPXSSING.o: ${MID}/UPXSSING.NRLIB
	@ echo 0 making ${OUT}/UPXSSING.o from ${MID}/UPXSSING.NRLIB
	@ cp ${MID}/UPXSSING.NRLIB/code.o ${OUT}/UPXSSING.o

@
<<UPXSSING.NRLIB (NRLIB from MID)>>=
${MID}/UPXSSING.NRLIB: ${MID}/UPXSSING.spad
	@ echo 0 making ${MID}/UPXSSING.NRLIB from ${MID}/UPXSSING.spad
	@ (cd ${MID} ; 	echo ')co UPXSSING.spad' | ${INTERPSYS} )

@
<<UPXSSING.spad (SPAD from IN)>>=
${MID}/UPXSSING.spad: ${IN}/expexpan.spad.pamphlet
	@ echo 0 making ${MID}/UPXSSING.spad from ${IN}/expexpan.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPXSSING.NRLIB ; \
	${SPADBIN}/notangle -R"domain UPXSSING UnivariatePuiseuxSeriesWithExponentialSingularity" ${IN}/expexpan.spad.pamphlet >UPXSSING.spad )

@
<<expexpan.spad.dvi (DOC from IN)>>=
${DOC}/expexpan.spad.dvi: ${IN}/expexpan.spad.pamphlet
	@ echo 0 making ${DOC}/expexpan.spad.dvi from ${IN}/expexpan.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/expexpan.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} expexpan.spad ; \
	rm -f ${DOC}/expexpan.spad.pamphlet ; \
	rm -f ${DOC}/expexpan.spad.tex ; \
	rm -f ${DOC}/expexpan.spad )

@
\subsection{exposed.lsp \cite{1}}
<<exposed.lsp (SPAD from IN)>>=
${MID}/exposed.lsp: ${IN}/exposed.lsp.pamphlet
	@ echo 0 making ${MID}/exposed.lsp from ${IN}/exposed.lsp.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/exposed.lsp.pamphlet >exposed.lsp )

@
\subsection{exposed.lsp \cite{1}}
<<exposed.lsp (LSP from IN)>>=
${MID}/exposed.lsp: ${IN}/exposed.lsp.pamphlet
	@ echo 0 making ${MID}/exposed.lsp from ${IN}/exposed.lsp.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/exposed.lsp.pamphlet >exposed.lsp )

@
<<exposed.lsp.dvi (DOC from IN)>>=
${DOC}/exposed.lsp.dvi: ${IN}/exposed.lsp.pamphlet
	@ echo 0 making ${DOC}/exposed.lsp.dvi from ${IN}/exposed.lsp.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/exposed.lsp.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} exposed.lsp ; \
	rm -f ${DOC}/exposed.lsp.pamphlet ; \
	rm -f ${DOC}/exposed.lsp.tex ; \
	rm -f ${DOC}/exposed.lsp )

@
\subsection{expr2ups.spad \cite{1}}
<<expr2ups.spad (SPAD from IN)>>=
${MID}/expr2ups.spad: ${IN}/expr2ups.spad.pamphlet
	@ echo 0 making ${MID}/expr2ups.spad from ${IN}/expr2ups.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/expr2ups.spad.pamphlet >expr2ups.spad )

@
<<EXPR2UPS.o (O from NRLIB)>>=
${OUT}/EXPR2UPS.o: ${MID}/EXPR2UPS.NRLIB
	@ echo 0 making ${OUT}/EXPR2UPS.o from ${MID}/EXPR2UPS.NRLIB
	@ cp ${MID}/EXPR2UPS.NRLIB/code.o ${OUT}/EXPR2UPS.o

@
<<EXPR2UPS.NRLIB (NRLIB from MID)>>=
${MID}/EXPR2UPS.NRLIB: ${MID}/EXPR2UPS.spad
	@ echo 0 making ${MID}/EXPR2UPS.NRLIB from ${MID}/EXPR2UPS.spad
	@ (cd ${MID} ; 	echo ')co EXPR2UPS.spad' | ${INTERPSYS} )

@
<<EXPR2UPS.spad (SPAD from IN)>>=
${MID}/EXPR2UPS.spad: ${IN}/expr2ups.spad.pamphlet
	@ echo 0 making ${MID}/EXPR2UPS.spad from ${IN}/expr2ups.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPR2UPS.NRLIB ; \
	${SPADBIN}/notangle -R"package EXPR2UPS ExpressionToUnivariatePowerSeries" ${IN}/expr2ups.spad.pamphlet >EXPR2UPS.spad )

@
<<expr2ups.spad.dvi (DOC from IN)>>=
${DOC}/expr2ups.spad.dvi: ${IN}/expr2ups.spad.pamphlet
	@ echo 0 making ${DOC}/expr2ups.spad.dvi from ${IN}/expr2ups.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/expr2ups.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} expr2ups.spad ; \
	rm -f ${DOC}/expr2ups.spad.pamphlet ; \
	rm -f ${DOC}/expr2ups.spad.tex ; \
	rm -f ${DOC}/expr2ups.spad )

@
\subsection{exprode.spad \cite{1}}
<<exprode.spad (SPAD from IN)>>=
${MID}/exprode.spad: ${IN}/exprode.spad.pamphlet
	@ echo 0 making ${MID}/exprode.spad from ${IN}/exprode.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/exprode.spad.pamphlet >exprode.spad )

@
<<EXPRODE.o (O from NRLIB)>>=
${OUT}/EXPRODE.o: ${MID}/EXPRODE.NRLIB
	@ echo 0 making ${OUT}/EXPRODE.o from ${MID}/EXPRODE.NRLIB
	@ cp ${MID}/EXPRODE.NRLIB/code.o ${OUT}/EXPRODE.o

@
<<EXPRODE.NRLIB (NRLIB from MID)>>=
${MID}/EXPRODE.NRLIB: ${MID}/EXPRODE.spad
	@ echo 0 making ${MID}/EXPRODE.NRLIB from ${MID}/EXPRODE.spad
	@ (cd ${MID} ; 	echo ')co EXPRODE.spad' | ${INTERPSYS} )

@
<<EXPRODE.spad (SPAD from IN)>>=
${MID}/EXPRODE.spad: ${IN}/exprode.spad.pamphlet
	@ echo 0 making ${MID}/EXPRODE.spad from ${IN}/exprode.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPRODE.NRLIB ; \
	${SPADBIN}/notangle -R"package EXPRODE ExpressionSpaceODESolver" ${IN}/exprode.spad.pamphlet >EXPRODE.spad )

@
<<exprode.spad.dvi (DOC from IN)>>=
${DOC}/exprode.spad.dvi: ${IN}/exprode.spad.pamphlet
	@ echo 0 making ${DOC}/exprode.spad.dvi from ${IN}/exprode.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/exprode.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} exprode.spad ; \
	rm -f ${DOC}/exprode.spad.pamphlet ; \
	rm -f ${DOC}/exprode.spad.tex ; \
	rm -f ${DOC}/exprode.spad )

@
\subsection{expr.spad \cite{1}}
<<expr.spad (SPAD from IN)>>=
${MID}/expr.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/expr.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/expr.spad.pamphlet >expr.spad )

@
<<EXPR.o (O from NRLIB)>>=
${OUT}/EXPR.o: ${MID}/EXPR.NRLIB
	@ echo 0 making ${OUT}/EXPR.o from ${MID}/EXPR.NRLIB
	@ cp ${MID}/EXPR.NRLIB/code.o ${OUT}/EXPR.o

@
<<EXPR.NRLIB (NRLIB from MID)>>=
${MID}/EXPR.NRLIB: ${MID}/EXPR.spad
	@ echo 0 making ${MID}/EXPR.NRLIB from ${MID}/EXPR.spad
	@ (cd ${MID} ; 	echo ')co EXPR.spad' | ${INTERPSYS} )

@
<<EXPR.spad (SPAD from IN)>>=
${MID}/EXPR.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/EXPR.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPR.NRLIB ; \
	${SPADBIN}/notangle -R"domain EXPR Expression" ${IN}/expr.spad.pamphlet >EXPR.spad )

@
<<EXPR2.o (O from NRLIB)>>=
${OUT}/EXPR2.o: ${MID}/EXPR2.NRLIB
	@ echo 0 making ${OUT}/EXPR2.o from ${MID}/EXPR2.NRLIB
	@ cp ${MID}/EXPR2.NRLIB/code.o ${OUT}/EXPR2.o

@
<<EXPR2.NRLIB (NRLIB from MID)>>=
${MID}/EXPR2.NRLIB: ${MID}/EXPR2.spad
	@ echo 0 making ${MID}/EXPR2.NRLIB from ${MID}/EXPR2.spad
	@ (cd ${MID} ; 	echo ')co EXPR2.spad' | ${INTERPSYS} )

@
<<EXPR2.spad (SPAD from IN)>>=
${MID}/EXPR2.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/EXPR2.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPR2.NRLIB ; \
	${SPADBIN}/notangle -R"package EXPR2 ExpressionFunctions2" ${IN}/expr.spad.pamphlet >EXPR2.spad )

@
<<HACKPI.o (O from NRLIB)>>=
${OUT}/HACKPI.o: ${MID}/HACKPI.NRLIB
	@ echo 0 making ${OUT}/HACKPI.o from ${MID}/HACKPI.NRLIB
	@ cp ${MID}/HACKPI.NRLIB/code.o ${OUT}/HACKPI.o

@
<<HACKPI.NRLIB (NRLIB from MID)>>=
${MID}/HACKPI.NRLIB: ${MID}/HACKPI.spad
	@ echo 0 making ${MID}/HACKPI.NRLIB from ${MID}/HACKPI.spad
	@ (cd ${MID} ; 	echo ')co HACKPI.spad' | ${INTERPSYS} )

@
<<HACKPI.spad (SPAD from IN)>>=
${MID}/HACKPI.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/HACKPI.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HACKPI.NRLIB ; \
	${SPADBIN}/notangle -R"domain HACKPI Pi" ${IN}/expr.spad.pamphlet >HACKPI.spad )

@
<<PAN2EXPR.o (O from NRLIB)>>=
${OUT}/PAN2EXPR.o: ${MID}/PAN2EXPR.NRLIB
	@ echo 0 making ${OUT}/PAN2EXPR.o from ${MID}/PAN2EXPR.NRLIB
	@ cp ${MID}/PAN2EXPR.NRLIB/code.o ${OUT}/PAN2EXPR.o

@
<<PAN2EXPR.NRLIB (NRLIB from MID)>>=
${MID}/PAN2EXPR.NRLIB: ${MID}/PAN2EXPR.spad
	@ echo 0 making ${MID}/PAN2EXPR.NRLIB from ${MID}/PAN2EXPR.spad
	@ (cd ${MID} ; 	echo ')co PAN2EXPR.spad' | ${INTERPSYS} )

@
<<PAN2EXPR.spad (SPAD from IN)>>=
${MID}/PAN2EXPR.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/PAN2EXPR.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PAN2EXPR.NRLIB ; \
	${SPADBIN}/notangle -R"package PAN2EXPR PolynomialAN2Expression" ${IN}/expr.spad.pamphlet >PAN2EXPR.spad )

@
<<PICOERCE.o (O from NRLIB)>>=
${OUT}/PICOERCE.o: ${MID}/PICOERCE.NRLIB
	@ echo 0 making ${OUT}/PICOERCE.o from ${MID}/PICOERCE.NRLIB
	@ cp ${MID}/PICOERCE.NRLIB/code.o ${OUT}/PICOERCE.o

@
<<PICOERCE.NRLIB (NRLIB from MID)>>=
${MID}/PICOERCE.NRLIB: ${MID}/PICOERCE.spad
	@ echo 0 making ${MID}/PICOERCE.NRLIB from ${MID}/PICOERCE.spad
	@ (cd ${MID} ; 	echo ')co PICOERCE.spad' | ${INTERPSYS} )

@
<<PICOERCE.spad (SPAD from IN)>>=
${MID}/PICOERCE.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/PICOERCE.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PICOERCE.NRLIB ; \
	${SPADBIN}/notangle -R"package PICOERCE PiCoercions" ${IN}/expr.spad.pamphlet >PICOERCE.spad )

@
<<PMASS.o (O from NRLIB)>>=
${OUT}/PMASS.o: ${MID}/PMASS.NRLIB
	@ echo 0 making ${OUT}/PMASS.o from ${MID}/PMASS.NRLIB
	@ cp ${MID}/PMASS.NRLIB/code.o ${OUT}/PMASS.o

@
<<PMASS.NRLIB (NRLIB from MID)>>=
${MID}/PMASS.NRLIB: ${MID}/PMASS.spad
	@ echo 0 making ${MID}/PMASS.NRLIB from ${MID}/PMASS.spad
	@ (cd ${MID} ; 	echo ')co PMASS.spad' | ${INTERPSYS} )

@
<<PMASS.spad (SPAD from IN)>>=
${MID}/PMASS.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/PMASS.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMASS.NRLIB ; \
	${SPADBIN}/notangle -R"package PMASS PatternMatchAssertions" ${IN}/expr.spad.pamphlet >PMASS.spad )

@
<<PMASSFS.o (O from NRLIB)>>=
${OUT}/PMASSFS.o: ${MID}/PMASSFS.NRLIB
	@ echo 0 making ${OUT}/PMASSFS.o from ${MID}/PMASSFS.NRLIB
	@ cp ${MID}/PMASSFS.NRLIB/code.o ${OUT}/PMASSFS.o

@
<<PMASSFS.NRLIB (NRLIB from MID)>>=
${MID}/PMASSFS.NRLIB: ${MID}/PMASSFS.spad
	@ echo 0 making ${MID}/PMASSFS.NRLIB from ${MID}/PMASSFS.spad
	@ (cd ${MID} ; 	echo ')co PMASSFS.spad' | ${INTERPSYS} )

@
<<PMASSFS.spad (SPAD from IN)>>=
${MID}/PMASSFS.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/PMASSFS.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMASSFS.NRLIB ; \
	${SPADBIN}/notangle -R"package PMASSFS FunctionSpaceAssertions" ${IN}/expr.spad.pamphlet >PMASSFS.spad )

@
<<PMPRED.o (O from NRLIB)>>=
${OUT}/PMPRED.o: ${MID}/PMPRED.NRLIB
	@ echo 0 making ${OUT}/PMPRED.o from ${MID}/PMPRED.NRLIB
	@ cp ${MID}/PMPRED.NRLIB/code.o ${OUT}/PMPRED.o

@
<<PMPRED.NRLIB (NRLIB from MID)>>=
${MID}/PMPRED.NRLIB: ${MID}/PMPRED.spad
	@ echo 0 making ${MID}/PMPRED.NRLIB from ${MID}/PMPRED.spad
	@ (cd ${MID} ; 	echo ')co PMPRED.spad' | ${INTERPSYS} )

@
<<PMPRED.spad (SPAD from IN)>>=
${MID}/PMPRED.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/PMPRED.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMPRED.NRLIB ; \
	${SPADBIN}/notangle -R"package PMPRED AttachPredicates" ${IN}/expr.spad.pamphlet >PMPRED.spad )

@
<<PMPREDFS.o (O from NRLIB)>>=
${OUT}/PMPREDFS.o: ${MID}/PMPREDFS.NRLIB
	@ echo 0 making ${OUT}/PMPREDFS.o from ${MID}/PMPREDFS.NRLIB
	@ cp ${MID}/PMPREDFS.NRLIB/code.o ${OUT}/PMPREDFS.o

@
<<PMPREDFS.NRLIB (NRLIB from MID)>>=
${MID}/PMPREDFS.NRLIB: ${MID}/PMPREDFS.spad
	@ echo 0 making ${MID}/PMPREDFS.NRLIB from ${MID}/PMPREDFS.spad
	@ (cd ${MID} ; 	echo ')co PMPREDFS.spad' | ${INTERPSYS} )

@
<<PMPREDFS.spad (SPAD from IN)>>=
${MID}/PMPREDFS.spad: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${MID}/PMPREDFS.spad from ${IN}/expr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMPREDFS.NRLIB ; \
	${SPADBIN}/notangle -R"package PMPREDFS FunctionSpaceAttachPredicates" ${IN}/expr.spad.pamphlet >PMPREDFS.spad )

@
<<expr.spad.dvi (DOC from IN)>>=
${DOC}/expr.spad.dvi: ${IN}/expr.spad.pamphlet
	@ echo 0 making ${DOC}/expr.spad.dvi from ${IN}/expr.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/expr.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} expr.spad ; \
	rm -f ${DOC}/expr.spad.pamphlet ; \
	rm -f ${DOC}/expr.spad.tex ; \
	rm -f ${DOC}/expr.spad )

@
\subsection{f01.spad \cite{1}}
<<f01.spad (SPAD from IN)>>=
${MID}/f01.spad: ${IN}/f01.spad.pamphlet
	@ echo 0 making ${MID}/f01.spad from ${IN}/f01.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/f01.spad.pamphlet >f01.spad )

@
<<NAGF01.o (O from NRLIB)>>=
${OUT}/NAGF01.o: ${MID}/NAGF01.NRLIB
	@ echo 0 making ${OUT}/NAGF01.o from ${MID}/NAGF01.NRLIB
	@ cp ${MID}/NAGF01.NRLIB/code.o ${OUT}/NAGF01.o

@
<<NAGF01.NRLIB (NRLIB from MID)>>=
${MID}/NAGF01.NRLIB: ${MID}/NAGF01.spad
	@ echo 0 making ${MID}/NAGF01.NRLIB from ${MID}/NAGF01.spad
	@ (cd ${MID} ; 	echo ')co NAGF01.spad' | ${INTERPSYS} )

@
<<NAGF01.spad (SPAD from IN)>>=
${MID}/NAGF01.spad: ${IN}/f01.spad.pamphlet
	@ echo 0 making ${MID}/NAGF01.spad from ${IN}/f01.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGF01.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGF01 NagMatrixOperationsPackage" ${IN}/f01.spad.pamphlet >NAGF01.spad )

@
<<f01.spad.dvi (DOC from IN)>>=
${DOC}/f01.spad.dvi: ${IN}/f01.spad.pamphlet
	@ echo 0 making ${DOC}/f01.spad.dvi from ${IN}/f01.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/f01.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} f01.spad ; \
	rm -f ${DOC}/f01.spad.pamphlet ; \
	rm -f ${DOC}/f01.spad.tex ; \
	rm -f ${DOC}/f01.spad )

@
\subsection{f02.spad \cite{1}}
<<f02.spad (SPAD from IN)>>=
${MID}/f02.spad: ${IN}/f02.spad.pamphlet
	@ echo 0 making ${MID}/f02.spad from ${IN}/f02.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/f02.spad.pamphlet >f02.spad )

@
<<NAGF02.o (O from NRLIB)>>=
${OUT}/NAGF02.o: ${MID}/NAGF02.NRLIB
	@ echo 0 making ${OUT}/NAGF02.o from ${MID}/NAGF02.NRLIB
	@ cp ${MID}/NAGF02.NRLIB/code.o ${OUT}/NAGF02.o

@
<<NAGF02.NRLIB (NRLIB from MID)>>=
${MID}/NAGF02.NRLIB: ${MID}/NAGF02.spad
	@ echo 0 making ${MID}/NAGF02.NRLIB from ${MID}/NAGF02.spad
	@ (cd ${MID} ; 	echo ')co NAGF02.spad' | ${INTERPSYS} )

@
<<NAGF02.spad (SPAD from IN)>>=
${MID}/NAGF02.spad: ${IN}/f02.spad.pamphlet
	@ echo 0 making ${MID}/NAGF02.spad from ${IN}/f02.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGF02.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGF02 NagEigenPackage" ${IN}/f02.spad.pamphlet >NAGF02.spad )

@
<<f02.spad.dvi (DOC from IN)>>=
${DOC}/f02.spad.dvi: ${IN}/f02.spad.pamphlet
	@ echo 0 making ${DOC}/f02.spad.dvi from ${IN}/f02.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/f02.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} f02.spad ; \
	rm -f ${DOC}/f02.spad.pamphlet ; \
	rm -f ${DOC}/f02.spad.tex ; \
	rm -f ${DOC}/f02.spad )

@
\subsection{f04.spad \cite{1}}
<<f04.spad (SPAD from IN)>>=
${MID}/f04.spad: ${IN}/f04.spad.pamphlet
	@ echo 0 making ${MID}/f04.spad from ${IN}/f04.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/f04.spad.pamphlet >f04.spad )

@
<<NAGF04.o (O from NRLIB)>>=
${OUT}/NAGF04.o: ${MID}/NAGF04.NRLIB
	@ echo 0 making ${OUT}/NAGF04.o from ${MID}/NAGF04.NRLIB
	@ cp ${MID}/NAGF04.NRLIB/code.o ${OUT}/NAGF04.o

@
<<NAGF04.NRLIB (NRLIB from MID)>>=
${MID}/NAGF04.NRLIB: ${MID}/NAGF04.spad
	@ echo 0 making ${MID}/NAGF04.NRLIB from ${MID}/NAGF04.spad
	@ (cd ${MID} ; 	echo ')co NAGF04.spad' | ${INTERPSYS} )

@
<<NAGF04.spad (SPAD from IN)>>=
${MID}/NAGF04.spad: ${IN}/f04.spad.pamphlet
	@ echo 0 making ${MID}/NAGF04.spad from ${IN}/f04.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGF04.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGF04 NagLinearEquationSolvingPackage" ${IN}/f04.spad.pamphlet >NAGF04.spad )

@
<<f04.spad.dvi (DOC from IN)>>=
${DOC}/f04.spad.dvi: ${IN}/f04.spad.pamphlet
	@ echo 0 making ${DOC}/f04.spad.dvi from ${IN}/f04.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/f04.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} f04.spad ; \
	rm -f ${DOC}/f04.spad.pamphlet ; \
	rm -f ${DOC}/f04.spad.tex ; \
	rm -f ${DOC}/f04.spad )

@
\subsection{f07.spad \cite{1}}
<<f07.spad (SPAD from IN)>>=
${MID}/f07.spad: ${IN}/f07.spad.pamphlet
	@ echo 0 making ${MID}/f07.spad from ${IN}/f07.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/f07.spad.pamphlet >f07.spad )

@
<<NAGF07.o (O from NRLIB)>>=
${OUT}/NAGF07.o: ${MID}/NAGF07.NRLIB
	@ echo 0 making ${OUT}/NAGF07.o from ${MID}/NAGF07.NRLIB
	@ cp ${MID}/NAGF07.NRLIB/code.o ${OUT}/NAGF07.o

@
<<NAGF07.NRLIB (NRLIB from MID)>>=
${MID}/NAGF07.NRLIB: ${MID}/NAGF07.spad
	@ echo 0 making ${MID}/NAGF07.NRLIB from ${MID}/NAGF07.spad
	@ (cd ${MID} ; 	echo ')co NAGF07.spad' | ${INTERPSYS} )

@
<<NAGF07.spad (SPAD from IN)>>=
${MID}/NAGF07.spad: ${IN}/f07.spad.pamphlet
	@ echo 0 making ${MID}/NAGF07.spad from ${IN}/f07.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGF07.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGF07 NagLapack" ${IN}/f07.spad.pamphlet >NAGF07.spad )

@
<<f07.spad.dvi (DOC from IN)>>=
${DOC}/f07.spad.dvi: ${IN}/f07.spad.pamphlet
	@ echo 0 making ${DOC}/f07.spad.dvi from ${IN}/f07.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/f07.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} f07.spad ; \
	rm -f ${DOC}/f07.spad.pamphlet ; \
	rm -f ${DOC}/f07.spad.tex ; \
	rm -f ${DOC}/f07.spad )

@
\subsection{facutil.spad \cite{1}}
<<facutil.spad (SPAD from IN)>>=
${MID}/facutil.spad: ${IN}/facutil.spad.pamphlet
	@ echo 0 making ${MID}/facutil.spad from ${IN}/facutil.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/facutil.spad.pamphlet >facutil.spad )

@
<<FACUTIL.o (O from NRLIB)>>=
${OUT}/FACUTIL.o: ${MID}/FACUTIL.NRLIB
	@ echo 0 making ${OUT}/FACUTIL.o from ${MID}/FACUTIL.NRLIB
	@ cp ${MID}/FACUTIL.NRLIB/code.o ${OUT}/FACUTIL.o

@
<<FACUTIL.NRLIB (NRLIB from MID)>>=
${MID}/FACUTIL.NRLIB: ${MID}/FACUTIL.spad
	@ echo 0 making ${MID}/FACUTIL.NRLIB from ${MID}/FACUTIL.spad
	@ (cd ${MID} ; 	echo ')co FACUTIL.spad' | ${INTERPSYS} )

@
<<FACUTIL.spad (SPAD from IN)>>=
${MID}/FACUTIL.spad: ${IN}/facutil.spad.pamphlet
	@ echo 0 making ${MID}/FACUTIL.spad from ${IN}/facutil.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FACUTIL.NRLIB ; \
	${SPADBIN}/notangle -R"package FACUTIL FactoringUtilities" ${IN}/facutil.spad.pamphlet >FACUTIL.spad )

@
<<PUSHVAR.o (O from NRLIB)>>=
${OUT}/PUSHVAR.o: ${MID}/PUSHVAR.NRLIB
	@ echo 0 making ${OUT}/PUSHVAR.o from ${MID}/PUSHVAR.NRLIB
	@ cp ${MID}/PUSHVAR.NRLIB/code.o ${OUT}/PUSHVAR.o

@
<<PUSHVAR.NRLIB (NRLIB from MID)>>=
${MID}/PUSHVAR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PUSHVAR.spad
	@ echo 0 making ${MID}/PUSHVAR.NRLIB from ${MID}/PUSHVAR.spad
	@ (cd ${MID} ; 	echo ')co PUSHVAR.spad' | ${INTERPSYS} )

@
<<PUSHVAR.spad (SPAD from IN)>>=
${MID}/PUSHVAR.spad: ${IN}/facutil.spad.pamphlet
	@ echo 0 making ${MID}/PUSHVAR.spad from ${IN}/facutil.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PUSHVAR.NRLIB ; \
	${SPADBIN}/notangle -R"package PUSHVAR PushVariables" ${IN}/facutil.spad.pamphlet >PUSHVAR.spad )

@
<<facutil.spad.dvi (DOC from IN)>>=
${DOC}/facutil.spad.dvi: ${IN}/facutil.spad.pamphlet
	@ echo 0 making ${DOC}/facutil.spad.dvi from ${IN}/facutil.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/facutil.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} facutil.spad ; \
	rm -f ${DOC}/facutil.spad.pamphlet ; \
	rm -f ${DOC}/facutil.spad.tex ; \
	rm -f ${DOC}/facutil.spad )

@
\subsection{ffcat.spad \cite{1}}
<<ffcat.spad (SPAD from IN)>>=
${MID}/ffcat.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/ffcat.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffcat.spad.pamphlet >ffcat.spad )

@
<<DLP.o (O from NRLIB)>>=
${OUT}/DLP.o: ${MID}/DLP.NRLIB
	@ echo 0 making ${OUT}/DLP.o from ${MID}/DLP.NRLIB
	@ cp ${MID}/DLP.NRLIB/code.o ${OUT}/DLP.o

@
<<DLP.NRLIB (NRLIB from MID)>>=
${MID}/DLP.NRLIB: ${MID}/DLP.spad
	@ echo 0 making ${MID}/DLP.NRLIB from ${MID}/DLP.spad
	@ (cd ${MID} ; 	echo ')co DLP.spad' | ${INTERPSYS} )

@
<<DLP.spad (SPAD from IN)>>=
${MID}/DLP.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/DLP.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DLP.NRLIB ; \
	${SPADBIN}/notangle -R"package DLP DiscreteLogarithmPackage" ${IN}/ffcat.spad.pamphlet >DLP.spad )

@
<<FAXF-.o (O from NRLIB)>>=
${OUT}/FAXF-.o: ${MID}/FAXF.NRLIB
	@ echo 0 making ${OUT}/FAXF-.o from ${MID}/FAXF-.NRLIB
	@ cp ${MID}/FAXF-.NRLIB/code.o ${OUT}/FAXF-.o

@
<<FAXF-.NRLIB (NRLIB from MID)>>=
${MID}/FAXF-.NRLIB: ${OUT}/TYPE.o ${MID}/FAXF.spad 
	@ echo 0 making ${MID}/FAXF-.NRLIB from ${MID}/FAXF.spad
	@ (cd ${MID} ; 	echo ')co FAXF.spad' | ${INTERPSYS} )

@
<<FAXF.o (O from NRLIB)>>=
${OUT}/FAXF.o: ${MID}/FAXF.NRLIB
	@ echo 0 making ${OUT}/FAXF.o from ${MID}/FAXF.NRLIB
	@ cp ${MID}/FAXF.NRLIB/code.o ${OUT}/FAXF.o

@
<<FAXF.NRLIB (NRLIB from MID)>>=
${MID}/FAXF.NRLIB: ${MID}/FAXF.spad
	@ echo 0 making ${MID}/FAXF.NRLIB from ${MID}/FAXF.spad
	@ (cd ${MID} ; 	echo ')co FAXF.spad' | ${INTERPSYS} )

@
<<FAXF.spad (SPAD from IN)>>=
${MID}/FAXF.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/FAXF.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FAXF.NRLIB ; \
	${SPADBIN}/notangle -R"category FAXF FiniteAlgebraicExtensionField" ${IN}/ffcat.spad.pamphlet >FAXF.spad )

@
<<FFIELDC-.o (O from NRLIB)>>=
${OUT}/FFIELDC-.o: ${MID}/FFIELDC.NRLIB
	@ echo 0 making ${OUT}/FFIELDC-.o from ${MID}/FFIELDC-.NRLIB
	@ cp ${MID}/FFIELDC-.NRLIB/code.o ${OUT}/FFIELDC-.o

@
<<FFIELDC-.NRLIB (NRLIB from MID)>>=
${MID}/FFIELDC-.NRLIB: ${OUT}/TYPE.o ${MID}/FFIELDC.spad 
	@ echo 0 making ${MID}/FFIELDC-.NRLIB from ${MID}/FFIELDC.spad
	@ (cd ${MID} ; 	echo ')co FFIELDC.spad' | ${INTERPSYS} )

@
<<FFIELDC.o (O from NRLIB)>>=
${OUT}/FFIELDC.o: ${MID}/FFIELDC.NRLIB
	@ echo 0 making ${OUT}/FFIELDC.o from ${MID}/FFIELDC.NRLIB
	@ cp ${MID}/FFIELDC.NRLIB/code.o ${OUT}/FFIELDC.o

@
<<FFIELDC.NRLIB (NRLIB from MID)>>=
${MID}/FFIELDC.NRLIB: ${MID}/FFIELDC.spad
	@ echo 0 making ${MID}/FFIELDC.NRLIB from ${MID}/FFIELDC.spad
	@ (cd ${MID} ; 	echo ')co FFIELDC.spad' | ${INTERPSYS} )

@
<<FFIELDC.spad (SPAD from IN)>>=
${MID}/FFIELDC.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/FFIELDC.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFIELDC.NRLIB ; \
	${SPADBIN}/notangle -R"category FFIELDC FiniteFieldCategory" ${IN}/ffcat.spad.pamphlet >FFIELDC.spad )

@
<<FFIELDC-.o (BOOTSTRAP from MID)>>=
${MID}/FFIELDC-.o: ${MID}/FFIELDC-.lsp 
	@ echo 0 making ${MID}/FFIELDC-.o from ${MID}/FFIELDC-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "FFIELDC-.lsp" :output-file "FFIELDC-.o"))' | ${DEPSYS} )
	@ cp ${MID}/FFIELDC-.o ${OUT}/FFIELDC-.o

@
<<FFIELDC-.lsp (LISP from IN)>>=
${MID}/FFIELDC-.lsp: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/FFIELDC-.lsp from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFIELDC-.NRLIB ; \
	rm -rf ${OUT}/FFIELDC-.o ; \
	${SPADBIN}/notangle -R"FFIELDC-.lsp BOOTSTRAP" ${IN}/ffcat.spad.pamphlet >FFIELDC-.lsp )

@
<<FFIELDC.o (BOOTSTRAP from MID)>>=
${MID}/FFIELDC.o: ${MID}/FFIELDC.lsp 
	@ echo 0 making ${MID}/FFIELDC.o from ${MID}/FFIELDC.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "FFIELDC.lsp" :output-file "FFIELDC.o"))' | ${DEPSYS} )
	@ cp ${MID}/FFIELDC.o ${OUT}/FFIELDC.o

@
<<FFIELDC.lsp (LISP from IN)>>=
${MID}/FFIELDC.lsp: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/FFIELDC.lsp from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFIELDC.NRLIB ; \
	rm -rf ${OUT}/FFIELDC.o ; \
	${SPADBIN}/notangle -R"FFIELDC.lsp BOOTSTRAP" ${IN}/ffcat.spad.pamphlet >FFIELDC.lsp )

@
<<FFSLPE.o (O from NRLIB)>>=
${OUT}/FFSLPE.o: ${MID}/FFSLPE.NRLIB
	@ echo 0 making ${OUT}/FFSLPE.o from ${MID}/FFSLPE.NRLIB
	@ cp ${MID}/FFSLPE.NRLIB/code.o ${OUT}/FFSLPE.o

@
<<FFSLPE.NRLIB (NRLIB from MID)>>=
${MID}/FFSLPE.NRLIB: ${MID}/FFSLPE.spad
	@ echo 0 making ${MID}/FFSLPE.NRLIB from ${MID}/FFSLPE.spad
	@ (cd ${MID} ; 	echo ')co FFSLPE.spad' | ${INTERPSYS} )

@
<<FFSLPE.spad (SPAD from IN)>>=
${MID}/FFSLPE.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/FFSLPE.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFSLPE.NRLIB ; \
	${SPADBIN}/notangle -R"package FFSLPE FiniteFieldSolveLinearPolynomialEquation" ${IN}/ffcat.spad.pamphlet >FFSLPE.spad )

@
<<FPC-.o (O from NRLIB)>>=
${OUT}/FPC-.o: ${MID}/FPC.NRLIB
	@ echo 0 making ${OUT}/FPC-.o from ${MID}/FPC-.NRLIB
	@ cp ${MID}/FPC-.NRLIB/code.o ${OUT}/FPC-.o

@
<<FPC-.NRLIB (NRLIB from MID)>>=
${MID}/FPC-.NRLIB: ${OUT}/TYPE.o ${MID}/FPC.spad 
	@ echo 0 making ${MID}/FPC-.NRLIB from ${MID}/FPC.spad
	@ (cd ${MID} ; 	echo ')co FPC.spad' | ${INTERPSYS} )

@
<<FPC.o (O from NRLIB)>>=
${OUT}/FPC.o: ${MID}/FPC.NRLIB
	@ echo 0 making ${OUT}/FPC.o from ${MID}/FPC.NRLIB
	@ cp ${MID}/FPC.NRLIB/code.o ${OUT}/FPC.o

@
<<FPC.NRLIB (NRLIB from MID)>>=
${MID}/FPC.NRLIB: ${MID}/FPC.spad
	@ echo 0 making ${MID}/FPC.NRLIB from ${MID}/FPC.spad
	@ (cd ${MID} ; 	echo ')co FPC.spad' | ${INTERPSYS} )

@
<<FPC.spad (SPAD from IN)>>=
${MID}/FPC.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/FPC.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FPC.NRLIB ; \
	${SPADBIN}/notangle -R"category FPC FieldOfPrimeCharacteristic" ${IN}/ffcat.spad.pamphlet >FPC.spad )

@
<<XF-.o (O from NRLIB)>>=
${OUT}/XF-.o: ${MID}/XF.NRLIB
	@ echo 0 making ${OUT}/XF-.o from ${MID}/XF-.NRLIB
	@ cp ${MID}/XF-.NRLIB/code.o ${OUT}/XF-.o

@
<<XF-.NRLIB (NRLIB from MID)>>=
${MID}/XF-.NRLIB: ${OUT}/TYPE.o ${MID}/XF.spad 
	@ echo 0 making ${MID}/XF-.NRLIB from ${MID}/XF.spad
	@ (cd ${MID} ; 	echo ')co XF.spad' | ${INTERPSYS} )

@
<<XF.o (O from NRLIB)>>=
${OUT}/XF.o: ${MID}/XF.NRLIB
	@ echo 0 making ${OUT}/XF.o from ${MID}/XF.NRLIB
	@ cp ${MID}/XF.NRLIB/code.o ${OUT}/XF.o

@
<<XF.NRLIB (NRLIB from MID)>>=
${MID}/XF.NRLIB: ${MID}/XF.spad
	@ echo 0 making ${MID}/XF.NRLIB from ${MID}/XF.spad
	@ (cd ${MID} ; 	echo ')co XF.spad' | ${INTERPSYS} )

@
<<XF.spad (SPAD from IN)>>=
${MID}/XF.spad: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${MID}/XF.spad from ${IN}/ffcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XF.NRLIB ; \
	${SPADBIN}/notangle -R"category XF ExtensionField" ${IN}/ffcat.spad.pamphlet >XF.spad )

@
<<ffcat.spad.dvi (DOC from IN)>>=
${DOC}/ffcat.spad.dvi: ${IN}/ffcat.spad.pamphlet
	@ echo 0 making ${DOC}/ffcat.spad.dvi from ${IN}/ffcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffcat.spad ; \
	rm -f ${DOC}/ffcat.spad.pamphlet ; \
	rm -f ${DOC}/ffcat.spad.tex ; \
	rm -f ${DOC}/ffcat.spad )

@
\subsection{ffcg.spad \cite{1}}
<<ffcg.spad (SPAD from IN)>>=
${MID}/ffcg.spad: ${IN}/ffcg.spad.pamphlet
	@ echo 0 making ${MID}/ffcg.spad from ${IN}/ffcg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffcg.spad.pamphlet >ffcg.spad )

@
<<FFCG.o (O from NRLIB)>>=
${OUT}/FFCG.o: ${MID}/FFCG.NRLIB
	@ echo 0 making ${OUT}/FFCG.o from ${MID}/FFCG.NRLIB
	@ cp ${MID}/FFCG.NRLIB/code.o ${OUT}/FFCG.o

@
<<FFCG.NRLIB (NRLIB from MID)>>=
${MID}/FFCG.NRLIB: ${MID}/FFCG.spad
	@ echo 0 making ${MID}/FFCG.NRLIB from ${MID}/FFCG.spad
	@ (cd ${MID} ; 	echo ')co FFCG.spad' | ${INTERPSYS} )

@
<<FFCG.spad (SPAD from IN)>>=
${MID}/FFCG.spad: ${IN}/ffcg.spad.pamphlet
	@ echo 0 making ${MID}/FFCG.spad from ${IN}/ffcg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFCG.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFCG FiniteFieldCyclicGroup" ${IN}/ffcg.spad.pamphlet >FFCG.spad )

@
<<FFCGP.o (O from NRLIB)>>=
${OUT}/FFCGP.o: ${MID}/FFCGP.NRLIB
	@ echo 0 making ${OUT}/FFCGP.o from ${MID}/FFCGP.NRLIB
	@ cp ${MID}/FFCGP.NRLIB/code.o ${OUT}/FFCGP.o

@
<<FFCGP.NRLIB (NRLIB from MID)>>=
${MID}/FFCGP.NRLIB: ${MID}/FFCGP.spad
	@ echo 0 making ${MID}/FFCGP.NRLIB from ${MID}/FFCGP.spad
	@ (cd ${MID} ; 	echo ')co FFCGP.spad' | ${INTERPSYS} )

@
<<FFCGP.spad (SPAD from IN)>>=
${MID}/FFCGP.spad: ${IN}/ffcg.spad.pamphlet
	@ echo 0 making ${MID}/FFCGP.spad from ${IN}/ffcg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFCGP.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFCGP FiniteFieldCyclicGroupExtensionByPolynomial" ${IN}/ffcg.spad.pamphlet >FFCGP.spad )

@
<<FFCGX.o (O from NRLIB)>>=
${OUT}/FFCGX.o: ${MID}/FFCGX.NRLIB
	@ echo 0 making ${OUT}/FFCGX.o from ${MID}/FFCGX.NRLIB
	@ cp ${MID}/FFCGX.NRLIB/code.o ${OUT}/FFCGX.o

@
<<FFCGX.NRLIB (NRLIB from MID)>>=
${MID}/FFCGX.NRLIB: ${MID}/FFCGX.spad
	@ echo 0 making ${MID}/FFCGX.NRLIB from ${MID}/FFCGX.spad
	@ (cd ${MID} ; 	echo ')co FFCGX.spad' | ${INTERPSYS} )

@
<<FFCGX.spad (SPAD from IN)>>=
${MID}/FFCGX.spad: ${IN}/ffcg.spad.pamphlet
	@ echo 0 making ${MID}/FFCGX.spad from ${IN}/ffcg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFCGX.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFCGX FiniteFieldCyclicGroupExtension" ${IN}/ffcg.spad.pamphlet >FFCGX.spad )

@
<<ffcg.spad.dvi (DOC from IN)>>=
${DOC}/ffcg.spad.dvi: ${IN}/ffcg.spad.pamphlet
	@ echo 0 making ${DOC}/ffcg.spad.dvi from ${IN}/ffcg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffcg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffcg.spad ; \
	rm -f ${DOC}/ffcg.spad.pamphlet ; \
	rm -f ${DOC}/ffcg.spad.tex ; \
	rm -f ${DOC}/ffcg.spad )

@
\subsection{fff.spad \cite{1}}
<<fff.spad (SPAD from IN)>>=
${MID}/fff.spad: ${IN}/fff.spad.pamphlet
	@ echo 0 making ${MID}/fff.spad from ${IN}/fff.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fff.spad.pamphlet >fff.spad )

@
<<FFF.o (O from NRLIB)>>=
${OUT}/FFF.o: ${MID}/FFF.NRLIB
	@ echo 0 making ${OUT}/FFF.o from ${MID}/FFF.NRLIB
	@ cp ${MID}/FFF.NRLIB/code.o ${OUT}/FFF.o

@
<<FFF.NRLIB (NRLIB from MID)>>=
${MID}/FFF.NRLIB: ${MID}/FFF.spad
	@ echo 0 making ${MID}/FFF.NRLIB from ${MID}/FFF.spad
	@ (cd ${MID} ; 	echo ')co FFF.spad' | ${INTERPSYS} )

@
<<FFF.spad (SPAD from IN)>>=
${MID}/FFF.spad: ${IN}/fff.spad.pamphlet
	@ echo 0 making ${MID}/FFF.spad from ${IN}/fff.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFF.NRLIB ; \
	${SPADBIN}/notangle -R"package FFF FiniteFieldFunctions" ${IN}/fff.spad.pamphlet >FFF.spad )

@
<<fff.spad.dvi (DOC from IN)>>=
${DOC}/fff.spad.dvi: ${IN}/fff.spad.pamphlet
	@ echo 0 making ${DOC}/fff.spad.dvi from ${IN}/fff.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fff.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fff.spad ; \
	rm -f ${DOC}/fff.spad.pamphlet ; \
	rm -f ${DOC}/fff.spad.tex ; \
	rm -f ${DOC}/fff.spad )

@
\subsection{ffhom.spad \cite{1}}
<<ffhom.spad (SPAD from IN)>>=
${MID}/ffhom.spad: ${IN}/ffhom.spad.pamphlet
	@ echo 0 making ${MID}/ffhom.spad from ${IN}/ffhom.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffhom.spad.pamphlet >ffhom.spad )

@
<<FFHOM.o (O from NRLIB)>>=
${OUT}/FFHOM.o: ${MID}/FFHOM.NRLIB
	@ echo 0 making ${OUT}/FFHOM.o from ${MID}/FFHOM.NRLIB
	@ cp ${MID}/FFHOM.NRLIB/code.o ${OUT}/FFHOM.o

@
<<FFHOM.NRLIB (NRLIB from MID)>>=
${MID}/FFHOM.NRLIB: ${MID}/FFHOM.spad
	@ echo 0 making ${MID}/FFHOM.NRLIB from ${MID}/FFHOM.spad
	@ (cd ${MID} ; 	echo ')co FFHOM.spad' | ${INTERPSYS} )

@
<<FFHOM.spad (SPAD from IN)>>=
${MID}/FFHOM.spad: ${IN}/ffhom.spad.pamphlet
	@ echo 0 making ${MID}/FFHOM.spad from ${IN}/ffhom.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFHOM.NRLIB ; \
	${SPADBIN}/notangle -R"package FFHOM FiniteFieldHomomorphisms" ${IN}/ffhom.spad.pamphlet >FFHOM.spad )

@
<<ffhom.spad.dvi (DOC from IN)>>=
${DOC}/ffhom.spad.dvi: ${IN}/ffhom.spad.pamphlet
	@ echo 0 making ${DOC}/ffhom.spad.dvi from ${IN}/ffhom.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffhom.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffhom.spad ; \
	rm -f ${DOC}/ffhom.spad.pamphlet ; \
	rm -f ${DOC}/ffhom.spad.tex ; \
	rm -f ${DOC}/ffhom.spad )

@
\subsection{ffnb.spad \cite{1}}
<<ffnb.spad (SPAD from IN)>>=
${MID}/ffnb.spad: ${IN}/ffnb.spad.pamphlet
	@ echo 0 making ${MID}/ffnb.spad from ${IN}/ffnb.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffnb.spad.pamphlet >ffnb.spad )

@
<<FFNB.o (O from NRLIB)>>=
${OUT}/FFNB.o: ${MID}/FFNB.NRLIB
	@ echo 0 making ${OUT}/FFNB.o from ${MID}/FFNB.NRLIB
	@ cp ${MID}/FFNB.NRLIB/code.o ${OUT}/FFNB.o

@
<<FFNB.NRLIB (NRLIB from MID)>>=
${MID}/FFNB.NRLIB: ${MID}/FFNB.spad
	@ echo 0 making ${MID}/FFNB.NRLIB from ${MID}/FFNB.spad
	@ (cd ${MID} ; 	echo ')co FFNB.spad' | ${INTERPSYS} )

@
<<FFNB.spad (SPAD from IN)>>=
${MID}/FFNB.spad: ${IN}/ffnb.spad.pamphlet
	@ echo 0 making ${MID}/FFNB.spad from ${IN}/ffnb.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFNB.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFNB FiniteFieldNormalBasis" ${IN}/ffnb.spad.pamphlet >FFNB.spad )

@
<<FFNBP.o (O from NRLIB)>>=
${OUT}/FFNBP.o: ${MID}/FFNBP.NRLIB
	@ echo 0 making ${OUT}/FFNBP.o from ${MID}/FFNBP.NRLIB
	@ cp ${MID}/FFNBP.NRLIB/code.o ${OUT}/FFNBP.o

@
<<FFNBP.NRLIB (NRLIB from MID)>>=
${MID}/FFNBP.NRLIB: ${MID}/FFNBP.spad
	@ echo 0 making ${MID}/FFNBP.NRLIB from ${MID}/FFNBP.spad
	@ (cd ${MID} ; 	echo ')co FFNBP.spad' | ${INTERPSYS} )

@
<<FFNBP.spad (SPAD from IN)>>=
${MID}/FFNBP.spad: ${IN}/ffnb.spad.pamphlet
	@ echo 0 making ${MID}/FFNBP.spad from ${IN}/ffnb.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFNBP.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFNBP FiniteFieldNormalBasisExtensionByPolynomial" ${IN}/ffnb.spad.pamphlet >FFNBP.spad )

@
<<FFNBX.o (O from NRLIB)>>=
${OUT}/FFNBX.o: ${MID}/FFNBX.NRLIB
	@ echo 0 making ${OUT}/FFNBX.o from ${MID}/FFNBX.NRLIB
	@ cp ${MID}/FFNBX.NRLIB/code.o ${OUT}/FFNBX.o

@
<<FFNBX.NRLIB (NRLIB from MID)>>=
${MID}/FFNBX.NRLIB: ${MID}/FFNBX.spad
	@ echo 0 making ${MID}/FFNBX.NRLIB from ${MID}/FFNBX.spad
	@ (cd ${MID} ; 	echo ')co FFNBX.spad' | ${INTERPSYS} )

@
<<FFNBX.spad (SPAD from IN)>>=
${MID}/FFNBX.spad: ${IN}/ffnb.spad.pamphlet
	@ echo 0 making ${MID}/FFNBX.spad from ${IN}/ffnb.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFNBX.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFNBX FiniteFieldNormalBasisExtension" ${IN}/ffnb.spad.pamphlet >FFNBX.spad )

@
<<ffnb.spad.dvi (DOC from IN)>>=
${DOC}/ffnb.spad.dvi: ${IN}/ffnb.spad.pamphlet
	@ echo 0 making ${DOC}/ffnb.spad.dvi from ${IN}/ffnb.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffnb.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffnb.spad ; \
	rm -f ${DOC}/ffnb.spad.pamphlet ; \
	rm -f ${DOC}/ffnb.spad.tex ; \
	rm -f ${DOC}/ffnb.spad )

@
\subsection{ffpoly2.spad \cite{1}}
<<ffpoly2.spad (SPAD from IN)>>=
${MID}/ffpoly2.spad: ${IN}/ffpoly2.spad.pamphlet
	@ echo 0 making ${MID}/ffpoly2.spad from ${IN}/ffpoly2.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffpoly2.spad.pamphlet >ffpoly2.spad )

@
<<FFPOLY2.o (O from NRLIB)>>=
${OUT}/FFPOLY2.o: ${MID}/FFPOLY2.NRLIB
	@ echo 0 making ${OUT}/FFPOLY2.o from ${MID}/FFPOLY2.NRLIB
	@ cp ${MID}/FFPOLY2.NRLIB/code.o ${OUT}/FFPOLY2.o

@
<<FFPOLY2.NRLIB (NRLIB from MID)>>=
${MID}/FFPOLY2.NRLIB: ${MID}/FFPOLY2.spad
	@ echo 0 making ${MID}/FFPOLY2.NRLIB from ${MID}/FFPOLY2.spad
	@ (cd ${MID} ; 	echo ')co FFPOLY2.spad' | ${INTERPSYS} )

@
<<FFPOLY2.spad (SPAD from IN)>>=
${MID}/FFPOLY2.spad: ${IN}/ffpoly2.spad.pamphlet
	@ echo 0 making ${MID}/FFPOLY2.spad from ${IN}/ffpoly2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFPOLY2.NRLIB ; \
	${SPADBIN}/notangle -R"package FFPOLY2 FiniteFieldPolynomialPackage2" ${IN}/ffpoly2.spad.pamphlet >FFPOLY2.spad )

@
<<ffpoly2.spad.dvi (DOC from IN)>>=
${DOC}/ffpoly2.spad.dvi: ${IN}/ffpoly2.spad.pamphlet
	@ echo 0 making ${DOC}/ffpoly2.spad.dvi from ${IN}/ffpoly2.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffpoly2.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffpoly2.spad ; \
	rm -f ${DOC}/ffpoly2.spad.pamphlet ; \
	rm -f ${DOC}/ffpoly2.spad.tex ; \
	rm -f ${DOC}/ffpoly2.spad )

@
\subsection{ffpoly.spad \cite{1}}
<<ffpoly.spad (SPAD from IN)>>=
${MID}/ffpoly.spad: ${IN}/ffpoly.spad.pamphlet
	@ echo 0 making ${MID}/ffpoly.spad from ${IN}/ffpoly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffpoly.spad.pamphlet >ffpoly.spad )

@
<<FFPOLY.o (O from NRLIB)>>=
${OUT}/FFPOLY.o: ${MID}/FFPOLY.NRLIB
	@ echo 0 making ${OUT}/FFPOLY.o from ${MID}/FFPOLY.NRLIB
	@ cp ${MID}/FFPOLY.NRLIB/code.o ${OUT}/FFPOLY.o

@
<<FFPOLY.NRLIB (NRLIB from MID)>>=
${MID}/FFPOLY.NRLIB: ${MID}/FFPOLY.spad
	@ echo 0 making ${MID}/FFPOLY.NRLIB from ${MID}/FFPOLY.spad
	@ (cd ${MID} ; 	echo ')co FFPOLY.spad' | ${INTERPSYS} )

@
<<FFPOLY.spad (SPAD from IN)>>=
${MID}/FFPOLY.spad: ${IN}/ffpoly.spad.pamphlet
	@ echo 0 making ${MID}/FFPOLY.spad from ${IN}/ffpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"package FFPOLY FiniteFieldPolynomialPackage" ${IN}/ffpoly.spad.pamphlet >FFPOLY.spad )

@
<<ffpoly.spad.dvi (DOC from IN)>>=
${DOC}/ffpoly.spad.dvi: ${IN}/ffpoly.spad.pamphlet
	@ echo 0 making ${DOC}/ffpoly.spad.dvi from ${IN}/ffpoly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffpoly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffpoly.spad ; \
	rm -f ${DOC}/ffpoly.spad.pamphlet ; \
	rm -f ${DOC}/ffpoly.spad.tex ; \
	rm -f ${DOC}/ffpoly.spad )

@
\subsection{ffp.spad \cite{1}}
<<ffp.spad (SPAD from IN)>>=
${MID}/ffp.spad: ${IN}/ffp.spad.pamphlet
	@ echo 0 making ${MID}/ffp.spad from ${IN}/ffp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffp.spad.pamphlet >ffp.spad )

@
<<IFF.o (O from NRLIB)>>=
${OUT}/IFF.o: ${MID}/IFF.NRLIB
	@ echo 0 making ${OUT}/IFF.o from ${MID}/IFF.NRLIB
	@ cp ${MID}/IFF.NRLIB/code.o ${OUT}/IFF.o

@
<<IFF.NRLIB (NRLIB from MID)>>=
${MID}/IFF.NRLIB: ${MID}/IFF.spad
	@ echo 0 making ${MID}/IFF.NRLIB from ${MID}/IFF.spad
	@ (cd ${MID} ; 	echo ')co IFF.spad' | ${INTERPSYS} )

@
<<IFF.spad (SPAD from IN)>>=
${MID}/IFF.spad: ${IN}/ffp.spad.pamphlet
	@ echo 0 making ${MID}/IFF.spad from ${IN}/ffp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IFF.NRLIB ; \
	${SPADBIN}/notangle -R"domain IFF InnerFiniteField" ${IN}/ffp.spad.pamphlet >IFF.spad )

@
<<FF.o (O from NRLIB)>>=
${OUT}/FF.o: ${MID}/FF.NRLIB
	@ echo 0 making ${OUT}/FF.o from ${MID}/FF.NRLIB
	@ cp ${MID}/FF.NRLIB/code.o ${OUT}/FF.o

@
<<FF.NRLIB (NRLIB from MID)>>=
${MID}/FF.NRLIB: ${MID}/FF.spad
	@ echo 0 making ${MID}/FF.NRLIB from ${MID}/FF.spad
	@ (cd ${MID} ; 	echo ')co FF.spad' | ${INTERPSYS} )

@
<<FF.spad (SPAD from IN)>>=
${MID}/FF.spad: ${IN}/ffp.spad.pamphlet
	@ echo 0 making ${MID}/FF.spad from ${IN}/ffp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FF.NRLIB ; \
	${SPADBIN}/notangle -R"domain FF FiniteField" ${IN}/ffp.spad.pamphlet >FF.spad )

@
<<FFP.o (O from NRLIB)>>=
${OUT}/FFP.o: ${MID}/FFP.NRLIB
	@ echo 0 making ${OUT}/FFP.o from ${MID}/FFP.NRLIB
	@ cp ${MID}/FFP.NRLIB/code.o ${OUT}/FFP.o

@
<<FFP.NRLIB (NRLIB from MID)>>=
${MID}/FFP.NRLIB: ${MID}/FFP.spad
	@ echo 0 making ${MID}/FFP.NRLIB from ${MID}/FFP.spad
	@ (cd ${MID} ; 	echo ')co FFP.spad' | ${INTERPSYS} )

@
<<FFP.spad (SPAD from IN)>>=
${MID}/FFP.spad: ${IN}/ffp.spad.pamphlet
	@ echo 0 making ${MID}/FFP.spad from ${IN}/ffp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFP.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFP FiniteFieldExtensionByPolynomial" ${IN}/ffp.spad.pamphlet >FFP.spad )

@
<<FFX.o (O from NRLIB)>>=
${OUT}/FFX.o: ${MID}/FFX.NRLIB
	@ echo 0 making ${OUT}/FFX.o from ${MID}/FFX.NRLIB
	@ cp ${MID}/FFX.NRLIB/code.o ${OUT}/FFX.o

@
<<FFX.NRLIB (NRLIB from MID)>>=
${MID}/FFX.NRLIB: ${MID}/FFX.spad
	@ echo 0 making ${MID}/FFX.NRLIB from ${MID}/FFX.spad
	@ (cd ${MID} ; 	echo ')co FFX.spad' | ${INTERPSYS} )

@
<<FFX.spad (SPAD from IN)>>=
${MID}/FFX.spad: ${IN}/ffp.spad.pamphlet
	@ echo 0 making ${MID}/FFX.spad from ${IN}/ffp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFX.NRLIB ; \
	${SPADBIN}/notangle -R"domain FFX FiniteFieldExtension" ${IN}/ffp.spad.pamphlet >FFX.spad )

@
<<ffp.spad.dvi (DOC from IN)>>=
${DOC}/ffp.spad.dvi: ${IN}/ffp.spad.pamphlet
	@ echo 0 making ${DOC}/ffp.spad.dvi from ${IN}/ffp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffp.spad ; \
	rm -f ${DOC}/ffp.spad.pamphlet ; \
	rm -f ${DOC}/ffp.spad.tex ; \
	rm -f ${DOC}/ffp.spad )

@
\subsection{ffrac.as \cite{1}}
<<ffrac.as (SPAD from IN)>>=
${MID}/ffrac.as: ${IN}/ffrac.as.pamphlet
	@ echo 0 making ${MID}/ffrac.as from ${IN}/ffrac.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffrac.as.pamphlet >ffrac.as )

@
<<ffrac.as.dvi (DOC from IN)>>=
${DOC}/ffrac.as.dvi: ${IN}/ffrac.as.pamphlet
	@ echo 0 making ${DOC}/ffrac.as.dvi from ${IN}/ffrac.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffrac.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffrac.as ; \
	rm -f ${DOC}/ffrac.as.pamphlet ; \
	rm -f ${DOC}/ffrac.as.tex ; \
	rm -f ${DOC}/ffrac.as )

@
\subsection{ffx.spad \cite{1}}
<<ffx.spad (SPAD from IN)>>=
${MID}/ffx.spad: ${IN}/ffx.spad.pamphlet
	@ echo 0 making ${MID}/ffx.spad from ${IN}/ffx.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ffx.spad.pamphlet >ffx.spad )

@
<<IRREDFFX.o (O from NRLIB)>>=
${OUT}/IRREDFFX.o: ${MID}/IRREDFFX.NRLIB
	@ echo 0 making ${OUT}/IRREDFFX.o from ${MID}/IRREDFFX.NRLIB
	@ cp ${MID}/IRREDFFX.NRLIB/code.o ${OUT}/IRREDFFX.o

@
<<IRREDFFX.NRLIB (NRLIB from MID)>>=
${MID}/IRREDFFX.NRLIB: ${MID}/IRREDFFX.spad
	@ echo 0 making ${MID}/IRREDFFX.NRLIB from ${MID}/IRREDFFX.spad
	@ (cd ${MID} ; 	echo ')co IRREDFFX.spad' | ${INTERPSYS} )

@
<<IRREDFFX.spad (SPAD from IN)>>=
${MID}/IRREDFFX.spad: ${IN}/ffx.spad.pamphlet
	@ echo 0 making ${MID}/IRREDFFX.spad from ${IN}/ffx.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IRREDFFX.NRLIB ; \
	${SPADBIN}/notangle -R"package IRREDFFX IrredPolyOverFiniteField" ${IN}/ffx.spad.pamphlet >IRREDFFX.spad )

@
<<ffx.spad.dvi (DOC from IN)>>=
${DOC}/ffx.spad.dvi: ${IN}/ffx.spad.pamphlet
	@ echo 0 making ${DOC}/ffx.spad.dvi from ${IN}/ffx.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ffx.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ffx.spad ; \
	rm -f ${DOC}/ffx.spad.pamphlet ; \
	rm -f ${DOC}/ffx.spad.tex ; \
	rm -f ${DOC}/ffx.spad )

@
\subsection{files.spad \cite{1}}
<<files.spad (SPAD from IN)>>=
${MID}/files.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/files.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/files.spad.pamphlet >files.spad )

@
<<BINFILE.o (O from NRLIB)>>=
${OUT}/BINFILE.o: ${MID}/BINFILE.NRLIB
	@ echo 0 making ${OUT}/BINFILE.o from ${MID}/BINFILE.NRLIB
	@ cp ${MID}/BINFILE.NRLIB/code.o ${OUT}/BINFILE.o

@
<<BINFILE.NRLIB (NRLIB from MID)>>=
${MID}/BINFILE.NRLIB: ${MID}/BINFILE.spad
	@ echo 0 making ${MID}/BINFILE.NRLIB from ${MID}/BINFILE.spad
	@ (cd ${MID} ; 	echo ')co BINFILE.spad' | ${INTERPSYS} )

@
<<BINFILE.spad (SPAD from IN)>>=
${MID}/BINFILE.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/BINFILE.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BINFILE.NRLIB ; \
	${SPADBIN}/notangle -R"domain BINFILE BinaryFile" ${IN}/files.spad.pamphlet >BINFILE.spad )

@
<<FILE.o (O from NRLIB)>>=
${OUT}/FILE.o: ${MID}/FILE.NRLIB
	@ echo 0 making ${OUT}/FILE.o from ${MID}/FILE.NRLIB
	@ cp ${MID}/FILE.NRLIB/code.o ${OUT}/FILE.o

@
<<FILE.NRLIB (NRLIB from MID)>>=
${MID}/FILE.NRLIB: ${MID}/FILE.spad
	@ echo 0 making ${MID}/FILE.NRLIB from ${MID}/FILE.spad
	@ (cd ${MID} ; 	echo ')co FILE.spad' | ${INTERPSYS} )

@
<<FILE.spad (SPAD from IN)>>=
${MID}/FILE.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/FILE.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FILE.NRLIB ; \
	${SPADBIN}/notangle -R"domain FILE File" ${IN}/files.spad.pamphlet >FILE.spad )

@
<<FILECAT.o (O from NRLIB)>>=
${OUT}/FILECAT.o: ${MID}/FILECAT.NRLIB
	@ echo 0 making ${OUT}/FILECAT.o from ${MID}/FILECAT.NRLIB
	@ cp ${MID}/FILECAT.NRLIB/code.o ${OUT}/FILECAT.o

@
<<FILECAT.NRLIB (NRLIB from MID)>>=
${MID}/FILECAT.NRLIB: ${MID}/FILECAT.spad
	@ echo 0 making ${MID}/FILECAT.NRLIB from ${MID}/FILECAT.spad
	@ (cd ${MID} ; 	echo ')co FILECAT.spad' | ${INTERPSYS} )

@
<<FILECAT.spad (SPAD from IN)>>=
${MID}/FILECAT.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/FILECAT.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FILECAT.NRLIB ; \
	${SPADBIN}/notangle -R"category FILECAT FileCategory" ${IN}/files.spad.pamphlet >FILECAT.spad )

@
<<KAFILE.o (O from NRLIB)>>=
${OUT}/KAFILE.o: ${MID}/KAFILE.NRLIB
	@ echo 0 making ${OUT}/KAFILE.o from ${MID}/KAFILE.NRLIB
	@ cp ${MID}/KAFILE.NRLIB/code.o ${OUT}/KAFILE.o

@
<<KAFILE.NRLIB (NRLIB from MID)>>=
${MID}/KAFILE.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/KAFILE.spad
	@ echo 0 making ${MID}/KAFILE.NRLIB from ${MID}/KAFILE.spad
	@ (cd ${MID} ; 	echo ')co KAFILE.spad' | ${INTERPSYS} )

@
<<KAFILE.spad (SPAD from IN)>>=
${MID}/KAFILE.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/KAFILE.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf KAFILE.NRLIB ; \
	${SPADBIN}/notangle -R"domain KAFILE KeyedAccessFile" ${IN}/files.spad.pamphlet >KAFILE.spad )

@
<<LIB.o (O from NRLIB)>>=
${OUT}/LIB.o: ${MID}/LIB.NRLIB
	@ echo 0 making ${OUT}/LIB.o from ${MID}/LIB.NRLIB
	@ cp ${MID}/LIB.NRLIB/code.o ${OUT}/LIB.o

@
<<LIB.NRLIB (NRLIB from MID)>>=
${MID}/LIB.NRLIB: ${MID}/LIB.spad
	@ echo 0 making ${MID}/LIB.NRLIB from ${MID}/LIB.spad
	@ (cd ${MID} ; 	echo ')co LIB.spad' | ${INTERPSYS} )

@
<<LIB.spad (SPAD from IN)>>=
${MID}/LIB.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/LIB.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIB.NRLIB ; \
	${SPADBIN}/notangle -R"domain LIB Library" ${IN}/files.spad.pamphlet >LIB.spad )

@
<<TEXTFILE.o (O from NRLIB)>>=
${OUT}/TEXTFILE.o: ${MID}/TEXTFILE.NRLIB
	@ echo 0 making ${OUT}/TEXTFILE.o from ${MID}/TEXTFILE.NRLIB
	@ cp ${MID}/TEXTFILE.NRLIB/code.o ${OUT}/TEXTFILE.o

@
<<TEXTFILE.NRLIB (NRLIB from MID)>>=
${MID}/TEXTFILE.NRLIB: ${MID}/TEXTFILE.spad
	@ echo 0 making ${MID}/TEXTFILE.NRLIB from ${MID}/TEXTFILE.spad
	@ (cd ${MID} ; 	echo ')co TEXTFILE.spad' | ${INTERPSYS} )

@
<<TEXTFILE.spad (SPAD from IN)>>=
${MID}/TEXTFILE.spad: ${IN}/files.spad.pamphlet
	@ echo 0 making ${MID}/TEXTFILE.spad from ${IN}/files.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TEXTFILE.NRLIB ; \
	${SPADBIN}/notangle -R"domain TEXTFILE TextFile" ${IN}/files.spad.pamphlet >TEXTFILE.spad )

@
<<files.spad.dvi (DOC from IN)>>=
${DOC}/files.spad.dvi: ${IN}/files.spad.pamphlet
	@ echo 0 making ${DOC}/files.spad.dvi from ${IN}/files.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/files.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} files.spad ; \
	rm -f ${DOC}/files.spad.pamphlet ; \
	rm -f ${DOC}/files.spad.tex ; \
	rm -f ${DOC}/files.spad )

@
\subsection{float.spad \cite{1}}
<<float.spad (SPAD from IN)>>=
${MID}/float.spad: ${IN}/float.spad.pamphlet
	@ echo 0 making ${MID}/float.spad from ${IN}/float.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/float.spad.pamphlet >float.spad )

@
<<FLOAT.o (O from NRLIB)>>=
${OUT}/FLOAT.o: ${MID}/FLOAT.NRLIB
	@ echo 0 making ${OUT}/FLOAT.o from ${MID}/FLOAT.NRLIB
	@ cp ${MID}/FLOAT.NRLIB/code.o ${OUT}/FLOAT.o

@
<<FLOAT.NRLIB (NRLIB from MID)>>=
${MID}/FLOAT.NRLIB: ${MID}/FLOAT.spad
	@ echo 0 making ${MID}/FLOAT.NRLIB from ${MID}/FLOAT.spad
	@ (cd ${MID} ; 	echo ')co FLOAT.spad' | ${INTERPSYS} )

@
<<FLOAT.spad (SPAD from IN)>>=
${MID}/FLOAT.spad: ${IN}/float.spad.pamphlet
	@ echo 0 making ${MID}/FLOAT.spad from ${IN}/float.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLOAT.NRLIB ; \
	${SPADBIN}/notangle -R"domain FLOAT Float" ${IN}/float.spad.pamphlet >FLOAT.spad )

@
<<float.spad.dvi (DOC from IN)>>=
${DOC}/float.spad.dvi: ${IN}/float.spad.pamphlet
	@ echo 0 making ${DOC}/float.spad.dvi from ${IN}/float.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/float.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} float.spad ; \
	rm -f ${DOC}/float.spad.pamphlet ; \
	rm -f ${DOC}/float.spad.tex ; \
	rm -f ${DOC}/float.spad )

@
\subsection{fmod.spad \cite{1}}
<<fmod.spad (SPAD from IN)>>=
${MID}/fmod.spad: ${IN}/fmod.spad.pamphlet
	@ echo 0 making ${MID}/fmod.spad from ${IN}/fmod.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fmod.spad.pamphlet >fmod.spad )

@
<<ZMOD.o (O from NRLIB)>>=
${OUT}/ZMOD.o: ${MID}/ZMOD.NRLIB
	@ echo 0 making ${OUT}/ZMOD.o from ${MID}/ZMOD.NRLIB
	@ cp ${MID}/ZMOD.NRLIB/code.o ${OUT}/ZMOD.o

@
<<ZMOD.NRLIB (NRLIB from MID)>>=
${MID}/ZMOD.NRLIB: ${MID}/ZMOD.spad
	@ echo 0 making ${MID}/ZMOD.NRLIB from ${MID}/ZMOD.spad
	@ (cd ${MID} ; 	echo ')co ZMOD.spad' | ${INTERPSYS} )

@
<<ZMOD.spad (SPAD from IN)>>=
${MID}/ZMOD.spad: ${IN}/fmod.spad.pamphlet
	@ echo 0 making ${MID}/ZMOD.spad from ${IN}/fmod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ZMOD.NRLIB ; \
	${SPADBIN}/notangle -R"domain ZMOD IntegerMod" ${IN}/fmod.spad.pamphlet >ZMOD.spad )

@
<<fmod.spad.dvi (DOC from IN)>>=
${DOC}/fmod.spad.dvi: ${IN}/fmod.spad.pamphlet
	@ echo 0 making ${DOC}/fmod.spad.dvi from ${IN}/fmod.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fmod.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fmod.spad ; \
	rm -f ${DOC}/fmod.spad.pamphlet ; \
	rm -f ${DOC}/fmod.spad.tex ; \
	rm -f ${DOC}/fmod.spad )

@
\subsection{fname.spad \cite{1}}
<<fname.spad (SPAD from IN)>>=
${MID}/fname.spad: ${IN}/fname.spad.pamphlet
	@ echo 0 making ${MID}/fname.spad from ${IN}/fname.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fname.spad.pamphlet >fname.spad )

@
<<FNAME.o (O from NRLIB)>>=
${OUT}/FNAME.o: ${MID}/FNAME.NRLIB
	@ echo 0 making ${OUT}/FNAME.o from ${MID}/FNAME.NRLIB
	@ cp ${MID}/FNAME.NRLIB/code.o ${OUT}/FNAME.o

@
<<FNAME.NRLIB (NRLIB from MID)>>=
${MID}/FNAME.NRLIB: ${MID}/FNAME.spad
	@ echo 0 making ${MID}/FNAME.NRLIB from ${MID}/FNAME.spad
	@ (cd ${MID} ; 	echo ')co FNAME.spad' | ${INTERPSYS} )

@
<<FNAME.spad (SPAD from IN)>>=
${MID}/FNAME.spad: ${IN}/fname.spad.pamphlet
	@ echo 0 making ${MID}/FNAME.spad from ${IN}/fname.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FNAME.NRLIB ; \
	${SPADBIN}/notangle -R"domain FNAME FileName" ${IN}/fname.spad.pamphlet >FNAME.spad )

@
<<FNCAT.o (O from NRLIB)>>=
${OUT}/FNCAT.o: ${MID}/FNCAT.NRLIB
	@ echo 0 making ${OUT}/FNCAT.o from ${MID}/FNCAT.NRLIB
	@ cp ${MID}/FNCAT.NRLIB/code.o ${OUT}/FNCAT.o

@
<<FNCAT.NRLIB (NRLIB from MID)>>=
${MID}/FNCAT.NRLIB: ${MID}/FNCAT.spad
	@ echo 0 making ${MID}/FNCAT.NRLIB from ${MID}/FNCAT.spad
	@ (cd ${MID} ; 	echo ')co FNCAT.spad' | ${INTERPSYS} )

@
<<FNCAT.spad (SPAD from IN)>>=
${MID}/FNCAT.spad: ${IN}/fname.spad.pamphlet
	@ echo 0 making ${MID}/FNCAT.spad from ${IN}/fname.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FNCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category FNCAT FileNameCategory" ${IN}/fname.spad.pamphlet >FNCAT.spad )

@
<<fname.spad.dvi (DOC from IN)>>=
${DOC}/fname.spad.dvi: ${IN}/fname.spad.pamphlet
	@ echo 0 making ${DOC}/fname.spad.dvi from ${IN}/fname.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fname.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fname.spad ; \
	rm -f ${DOC}/fname.spad.pamphlet ; \
	rm -f ${DOC}/fname.spad.tex ; \
	rm -f ${DOC}/fname.spad )

@
\subsection{fnla.spad \cite{1}}
<<fnla.spad (SPAD from IN)>>=
${MID}/fnla.spad: ${IN}/fnla.spad.pamphlet
	@ echo 0 making ${MID}/fnla.spad from ${IN}/fnla.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fnla.spad.pamphlet >fnla.spad )

@
<<COMM.o (O from NRLIB)>>=
${OUT}/COMM.o: ${MID}/COMM.NRLIB
	@ echo 0 making ${OUT}/COMM.o from ${MID}/COMM.NRLIB
	@ cp ${MID}/COMM.NRLIB/code.o ${OUT}/COMM.o

@
<<COMM.NRLIB (NRLIB from MID)>>=
${MID}/COMM.NRLIB: ${MID}/COMM.spad
	@ echo 0 making ${MID}/COMM.NRLIB from ${MID}/COMM.spad
	@ (cd ${MID} ; 	echo ')co COMM.spad' | ${INTERPSYS} )

@
<<COMM.spad (SPAD from IN)>>=
${MID}/COMM.spad: ${IN}/fnla.spad.pamphlet
	@ echo 0 making ${MID}/COMM.spad from ${IN}/fnla.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMM.NRLIB ; \
	${SPADBIN}/notangle -R"domain COMM Commutator" ${IN}/fnla.spad.pamphlet >COMM.spad )

@
<<FNLA.o (O from NRLIB)>>=
${OUT}/FNLA.o: ${MID}/FNLA.NRLIB
	@ echo 0 making ${OUT}/FNLA.o from ${MID}/FNLA.NRLIB
	@ cp ${MID}/FNLA.NRLIB/code.o ${OUT}/FNLA.o

@
<<FNLA.NRLIB (NRLIB from MID)>>=
${MID}/FNLA.NRLIB: ${MID}/FNLA.spad
	@ echo 0 making ${MID}/FNLA.NRLIB from ${MID}/FNLA.spad
	@ (cd ${MID} ; 	echo ')co FNLA.spad' | ${INTERPSYS} )

@
<<FNLA.spad (SPAD from IN)>>=
${MID}/FNLA.spad: ${IN}/fnla.spad.pamphlet
	@ echo 0 making ${MID}/FNLA.spad from ${IN}/fnla.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FNLA.NRLIB ; \
	${SPADBIN}/notangle -R"domain FNLA FreeNilpotentLie" ${IN}/fnla.spad.pamphlet >FNLA.spad )

@
<<HB.o (O from NRLIB)>>=
${OUT}/HB.o: ${MID}/HB.NRLIB
	@ echo 0 making ${OUT}/HB.o from ${MID}/HB.NRLIB
	@ cp ${MID}/HB.NRLIB/code.o ${OUT}/HB.o

@
<<HB.NRLIB (NRLIB from MID)>>=
${MID}/HB.NRLIB: ${MID}/HB.spad
	@ echo 0 making ${MID}/HB.NRLIB from ${MID}/HB.spad
	@ (cd ${MID} ; 	echo ')co HB.spad' | ${INTERPSYS} )

@
<<HB.spad (SPAD from IN)>>=
${MID}/HB.spad: ${IN}/fnla.spad.pamphlet
	@ echo 0 making ${MID}/HB.spad from ${IN}/fnla.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HB.NRLIB ; \
	${SPADBIN}/notangle -R"package HB HallBasis" ${IN}/fnla.spad.pamphlet >HB.spad )

@
<<OSI.o (O from NRLIB)>>=
${OUT}/OSI.o: ${MID}/OSI.NRLIB
	@ echo 0 making ${OUT}/OSI.o from ${MID}/OSI.NRLIB
	@ cp ${MID}/OSI.NRLIB/code.o ${OUT}/OSI.o

@
<<OSI.NRLIB (NRLIB from MID)>>=
${MID}/OSI.NRLIB: ${MID}/OSI.spad
	@ echo 0 making ${MID}/OSI.NRLIB from ${MID}/OSI.spad
	@ (cd ${MID} ; 	echo ')co OSI.spad' | ${INTERPSYS} )

@
<<OSI.spad (SPAD from IN)>>=
${MID}/OSI.spad: ${IN}/fnla.spad.pamphlet
	@ echo 0 making ${MID}/OSI.spad from ${IN}/fnla.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OSI.NRLIB ; \
	${SPADBIN}/notangle -R"domain OSI OrdSetInts" ${IN}/fnla.spad.pamphlet >OSI.spad )

@
<<fnla.spad.dvi (DOC from IN)>>=
${DOC}/fnla.spad.dvi: ${IN}/fnla.spad.pamphlet
	@ echo 0 making ${DOC}/fnla.spad.dvi from ${IN}/fnla.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fnla.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fnla.spad ; \
	rm -f ${DOC}/fnla.spad.pamphlet ; \
	rm -f ${DOC}/fnla.spad.tex ; \
	rm -f ${DOC}/fnla.spad )

@
\subsection{formula.spad \cite{1}}
<<formula.spad (SPAD from IN)>>=
${MID}/formula.spad: ${IN}/formula.spad.pamphlet
	@ echo 0 making ${MID}/formula.spad from ${IN}/formula.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/formula.spad.pamphlet >formula.spad )

@
<<FORMULA.o (O from NRLIB)>>=
${OUT}/FORMULA.o: ${MID}/FORMULA.NRLIB
	@ echo 0 making ${OUT}/FORMULA.o from ${MID}/FORMULA.NRLIB
	@ cp ${MID}/FORMULA.NRLIB/code.o ${OUT}/FORMULA.o

@
<<FORMULA.NRLIB (NRLIB from MID)>>=
${MID}/FORMULA.NRLIB: ${MID}/FORMULA.spad
	@ echo 0 making ${MID}/FORMULA.NRLIB from ${MID}/FORMULA.spad
	@ (cd ${MID} ; 	echo ')co FORMULA.spad' | ${INTERPSYS} )

@
<<FORMULA.spad (SPAD from IN)>>=
${MID}/FORMULA.spad: ${IN}/formula.spad.pamphlet
	@ echo 0 making ${MID}/FORMULA.spad from ${IN}/formula.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORMULA.NRLIB ; \
	${SPADBIN}/notangle -R"domain FORMULA ScriptFormulaFormat" ${IN}/formula.spad.pamphlet >FORMULA.spad )

@
<<FORMULA1.o (O from NRLIB)>>=
${OUT}/FORMULA1.o: ${MID}/FORMULA1.NRLIB
	@ echo 0 making ${OUT}/FORMULA1.o from ${MID}/FORMULA1.NRLIB
	@ cp ${MID}/FORMULA1.NRLIB/code.o ${OUT}/FORMULA1.o

@
<<FORMULA1.NRLIB (NRLIB from MID)>>=
${MID}/FORMULA1.NRLIB: ${MID}/FORMULA1.spad
	@ echo 0 making ${MID}/FORMULA1.NRLIB from ${MID}/FORMULA1.spad
	@ (cd ${MID} ; 	echo ')co FORMULA1.spad' | ${INTERPSYS} )

@
<<FORMULA1.spad (SPAD from IN)>>=
${MID}/FORMULA1.spad: ${IN}/formula.spad.pamphlet
	@ echo 0 making ${MID}/FORMULA1.spad from ${IN}/formula.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORMULA1.NRLIB ; \
	${SPADBIN}/notangle -R"package FORMULA1 ScriptFormulaFormat1" ${IN}/formula.spad.pamphlet >FORMULA1.spad )

@
<<formula.spad.dvi (DOC from IN)>>=
${DOC}/formula.spad.dvi: ${IN}/formula.spad.pamphlet
	@ echo 0 making ${DOC}/formula.spad.dvi from ${IN}/formula.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/formula.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} formula.spad ; \
	rm -f ${DOC}/formula.spad.pamphlet ; \
	rm -f ${DOC}/formula.spad.tex ; \
	rm -f ${DOC}/formula.spad )

@
\subsection{fortcat.spad \cite{1}}
<<fortcat.spad (SPAD from IN)>>=
${MID}/fortcat.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/fortcat.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fortcat.spad.pamphlet >fortcat.spad )

@
<<FMTC.o (O from NRLIB)>>=
${OUT}/FMTC.o: ${MID}/FMTC.NRLIB
	@ echo 0 making ${OUT}/FMTC.o from ${MID}/FMTC.NRLIB
	@ cp ${MID}/FMTC.NRLIB/code.o ${OUT}/FMTC.o

@
<<FMTC.NRLIB (NRLIB from MID)>>=
${MID}/FMTC.NRLIB: ${MID}/FMTC.spad
	@ echo 0 making ${MID}/FMTC.NRLIB from ${MID}/FMTC.spad
	@ (cd ${MID} ; 	echo ')co FMTC.spad' | ${INTERPSYS} )

@
<<FMTC.spad (SPAD from IN)>>=
${MID}/FMTC.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FMTC.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FMTC.NRLIB ; \
	${SPADBIN}/notangle -R"category FMTC FortranMachineTypeCategory" ${IN}/fortcat.spad.pamphlet >FMTC.spad )

@
<<FORTCAT.o (O from NRLIB)>>=
${OUT}/FORTCAT.o: ${MID}/FORTCAT.NRLIB
	@ echo 0 making ${OUT}/FORTCAT.o from ${MID}/FORTCAT.NRLIB
	@ cp ${MID}/FORTCAT.NRLIB/code.o ${OUT}/FORTCAT.o

@
<<FORTCAT.NRLIB (NRLIB from MID)>>=
${MID}/FORTCAT.NRLIB: ${OUT}/TYPE.o ${OUT}/KOERCE.o ${MID}/FORTCAT.spad
	@ echo 0 making ${MID}/FORTCAT.NRLIB from ${MID}/FORTCAT.spad
	@ (cd ${MID} ; 	echo ')co FORTCAT.spad' | ${INTERPSYS} )

@
<<FORTCAT.spad (SPAD from IN)>>=
${MID}/FORTCAT.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FORTCAT.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORTCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category FORTCAT FortranProgramCategory" ${IN}/fortcat.spad.pamphlet >FORTCAT.spad )

@
<<FORTFN.o (O from NRLIB)>>=
${OUT}/FORTFN.o: ${MID}/FORTFN.NRLIB
	@ echo 0 making ${OUT}/FORTFN.o from ${MID}/FORTFN.NRLIB
	@ cp ${MID}/FORTFN.NRLIB/code.o ${OUT}/FORTFN.o

@
<<FORTFN.NRLIB (NRLIB from MID)>>=
${MID}/FORTFN.NRLIB: ${OUT}/FORTCAT.o ${OUT}/TYPE.o ${OUT}/KOERCE.o \
                     ${MID}/FORTFN.spad
	@ echo 0 making ${MID}/FORTFN.NRLIB from ${MID}/FORTFN.spad
	@ (cd ${MID} ; 	echo ')co FORTFN.spad' | ${INTERPSYS} )

@
<<FORTFN.spad (SPAD from IN)>>=
${MID}/FORTFN.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FORTFN.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORTFN.NRLIB ; \
	${SPADBIN}/notangle -R"category FORTFN FortranFunctionCategory" ${IN}/fortcat.spad.pamphlet >FORTFN.spad )

@
<<FVC.o (O from NRLIB)>>=
${OUT}/FVC.o: ${MID}/FVC.NRLIB
	@ echo 0 making ${OUT}/FVC.o from ${MID}/FVC.NRLIB
	@ cp ${MID}/FVC.NRLIB/code.o ${OUT}/FVC.o

@
<<FVC.NRLIB (NRLIB from MID)>>=
${MID}/FVC.NRLIB: ${OUT}/FORTCAT.o ${OUT}/TYPE.o ${OUT}/KOERCE.o \
                  ${MID}/FVC.spad
	@ echo 0 making ${MID}/FVC.NRLIB from ${MID}/FVC.spad
	@ (cd ${MID} ; 	echo ')co FVC.spad' | ${INTERPSYS} )

@
<<FVC.spad (SPAD from IN)>>=
${MID}/FVC.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FVC.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FVC.NRLIB ; \
	${SPADBIN}/notangle -R"category FVC FortranVectorCategory" ${IN}/fortcat.spad.pamphlet >FVC.spad )

@
<<FVFUN.o (O from NRLIB)>>=
${OUT}/FVFUN.o: ${MID}/FVFUN.NRLIB
	@ echo 0 making ${OUT}/FVFUN.o from ${MID}/FVFUN.NRLIB
	@ cp ${MID}/FVFUN.NRLIB/code.o ${OUT}/FVFUN.o

@
<<FVFUN.NRLIB (NRLIB from MID)>>=
${MID}/FVFUN.NRLIB: ${OUT}/FORTCAT.o ${OUT}/TYPE.o ${OUT}/KOERCE.o \
                    ${MID}/FVFUN.spad
	@ echo 0 making ${MID}/FVFUN.NRLIB from ${MID}/FVFUN.spad
	@ (cd ${MID} ; 	echo ')co FVFUN.spad' | ${INTERPSYS} )

@
<<FVFUN.spad (SPAD from IN)>>=
${MID}/FVFUN.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FVFUN.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FVFUN.NRLIB ; \
	${SPADBIN}/notangle -R"category FVFUN FortranVectorFunctionCategory" ${IN}/fortcat.spad.pamphlet >FVFUN.spad )

@
<<FMC.o (O from NRLIB)>>=
${OUT}/FMC.o: ${MID}/FMC.NRLIB
	@ echo 0 making ${OUT}/FMC.o from ${MID}/FMC.NRLIB
	@ cp ${MID}/FMC.NRLIB/code.o ${OUT}/FMC.o

@
<<FMC.NRLIB (NRLIB from MID)>>=
${MID}/FMC.NRLIB: ${OUT}/FORTCAT.o ${OUT}/TYPE.o ${OUT}/KOERCE.o \
                    ${MID}/FMC.spad
	@ echo 0 making ${MID}/FMC.NRLIB from ${MID}/FMC.spad
	@ (cd ${MID} ; 	echo ')co FMC.spad' | ${INTERPSYS} )

@
<<FMC.spad (SPAD from IN)>>=
${MID}/FMC.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FMC.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FMC.NRLIB ; \
	${SPADBIN}/notangle -R"category FMC FortranMatrixCategory" ${IN}/fortcat.spad.pamphlet >FMC.spad )

@
<<FMFUN.o (O from NRLIB)>>=
${OUT}/FMFUN.o: ${MID}/FMFUN.NRLIB
	@ echo 0 making ${OUT}/FMFUN.o from ${MID}/FMFUN.NRLIB
	@ cp ${MID}/FMFUN.NRLIB/code.o ${OUT}/FMFUN.o

@
<<FMFUN.NRLIB (NRLIB from MID)>>=
${MID}/FMFUN.NRLIB: ${OUT}/FORTCAT.o ${OUT}/TYPE.o ${OUT}/KOERCE.o \
                    ${MID}/FMFUN.spad
	@ echo 0 making ${MID}/FMFUN.NRLIB from ${MID}/FMFUN.spad
	@ (cd ${MID} ; 	echo ')co FMFUN.spad' | ${INTERPSYS} )

@
<<FMFUN.spad (SPAD from IN)>>=
${MID}/FMFUN.spad: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${MID}/FMFUN.spad from ${IN}/fortcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FMFUN.NRLIB ; \
	${SPADBIN}/notangle -R"category FMFUN FortranMatrixFunctionCategory" ${IN}/fortcat.spad.pamphlet >FMFUN.spad )

@
<<fortcat.spad.dvi (DOC from IN)>>=
${DOC}/fortcat.spad.dvi: ${IN}/fortcat.spad.pamphlet
	@ echo 0 making ${DOC}/fortcat.spad.dvi from ${IN}/fortcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fortcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fortcat.spad ; \
	rm -f ${DOC}/fortcat.spad.pamphlet ; \
	rm -f ${DOC}/fortcat.spad.tex ; \
	rm -f ${DOC}/fortcat.spad )

@
\subsection{fortmac.spad \cite{1}}
<<fortmac.spad (SPAD from IN)>>=
${MID}/fortmac.spad: ${IN}/fortmac.spad.pamphlet
	@ echo 0 making ${MID}/fortmac.spad from ${IN}/fortmac.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fortmac.spad.pamphlet >fortmac.spad )

@
<<MCMPLX.o (O from NRLIB)>>=
${OUT}/MCMPLX.o: ${MID}/MCMPLX.NRLIB
	@ echo 0 making ${OUT}/MCMPLX.o from ${MID}/MCMPLX.NRLIB
	@ cp ${MID}/MCMPLX.NRLIB/code.o ${OUT}/MCMPLX.o

@
<<MCMPLX.NRLIB (NRLIB from MID)>>=
${MID}/MCMPLX.NRLIB: ${MID}/MCMPLX.spad
	@ echo 0 making ${MID}/MCMPLX.NRLIB from ${MID}/MCMPLX.spad
	@ (cd ${MID} ; 	echo ')co MCMPLX.spad' | ${INTERPSYS} )

@
<<MCMPLX.spad (SPAD from IN)>>=
${MID}/MCMPLX.spad: ${IN}/fortmac.spad.pamphlet
	@ echo 0 making ${MID}/MCMPLX.spad from ${IN}/fortmac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MCMPLX.NRLIB ; \
	${SPADBIN}/notangle -R"domain MCMPLX MachineComplex" ${IN}/fortmac.spad.pamphlet >MCMPLX.spad )

@
<<MFLOAT.o (O from NRLIB)>>=
${OUT}/MFLOAT.o: ${MID}/MFLOAT.NRLIB
	@ echo 0 making ${OUT}/MFLOAT.o from ${MID}/MFLOAT.NRLIB
	@ cp ${MID}/MFLOAT.NRLIB/code.o ${OUT}/MFLOAT.o

@
<<MFLOAT.NRLIB (NRLIB from MID)>>=
${MID}/MFLOAT.NRLIB: ${MID}/MFLOAT.spad
	@ echo 0 making ${MID}/MFLOAT.NRLIB from ${MID}/MFLOAT.spad
	@ (cd ${MID} ; 	echo ')co MFLOAT.spad' | ${INTERPSYS} )

@
<<MFLOAT.spad (SPAD from IN)>>=
${MID}/MFLOAT.spad: ${IN}/fortmac.spad.pamphlet
	@ echo 0 making ${MID}/MFLOAT.spad from ${IN}/fortmac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MFLOAT.NRLIB ; \
	${SPADBIN}/notangle -R"domain MFLOAT MachineFloat" ${IN}/fortmac.spad.pamphlet >MFLOAT.spad )

@
<<MINT.o (O from NRLIB)>>=
${OUT}/MINT.o: ${MID}/MINT.NRLIB
	@ echo 0 making ${OUT}/MINT.o from ${MID}/MINT.NRLIB
	@ cp ${MID}/MINT.NRLIB/code.o ${OUT}/MINT.o

@
<<MINT.NRLIB (NRLIB from MID)>>=
${MID}/MINT.NRLIB: ${MID}/MINT.spad
	@ echo 0 making ${MID}/MINT.NRLIB from ${MID}/MINT.spad
	@ (cd ${MID} ; 	echo ')co MINT.spad' | ${INTERPSYS} )

@
<<MINT.spad (SPAD from IN)>>=
${MID}/MINT.spad: ${IN}/fortmac.spad.pamphlet
	@ echo 0 making ${MID}/MINT.spad from ${IN}/fortmac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MINT.NRLIB ; \
	${SPADBIN}/notangle -R"domain MINT MachineInteger" ${IN}/fortmac.spad.pamphlet >MINT.spad )

@
<<fortmac.spad.dvi (DOC from IN)>>=
${DOC}/fortmac.spad.dvi: ${IN}/fortmac.spad.pamphlet
	@ echo 0 making ${DOC}/fortmac.spad.dvi from ${IN}/fortmac.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fortmac.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fortmac.spad ; \
	rm -f ${DOC}/fortmac.spad.pamphlet ; \
	rm -f ${DOC}/fortmac.spad.tex ; \
	rm -f ${DOC}/fortmac.spad )

@
\subsection{fortpak.spad \cite{1}}
<<fortpak.spad (SPAD from IN)>>=
${MID}/fortpak.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/fortpak.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fortpak.spad.pamphlet >fortpak.spad )

@
<<FCPAK1.o (O from NRLIB)>>=
${OUT}/FCPAK1.o: ${MID}/FCPAK1.NRLIB
	@ echo 0 making ${OUT}/FCPAK1.o from ${MID}/FCPAK1.NRLIB
	@ cp ${MID}/FCPAK1.NRLIB/code.o ${OUT}/FCPAK1.o

@
<<FCPAK1.NRLIB (NRLIB from MID)>>=
${MID}/FCPAK1.NRLIB: ${MID}/FCPAK1.spad
	@ echo 0 making ${MID}/FCPAK1.NRLIB from ${MID}/FCPAK1.spad
	@ (cd ${MID} ; 	echo ')co FCPAK1.spad' | ${INTERPSYS} )

@
<<FCPAK1.spad (SPAD from IN)>>=
${MID}/FCPAK1.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/FCPAK1.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FCPAK1.NRLIB ; \
	${SPADBIN}/notangle -R"package FCPAK1 FortranCodePackage1" ${IN}/fortpak.spad.pamphlet >FCPAK1.spad )

@
<<FOP.o (O from NRLIB)>>=
${OUT}/FOP.o: ${MID}/FOP.NRLIB
	@ echo 0 making ${OUT}/FOP.o from ${MID}/FOP.NRLIB
	@ cp ${MID}/FOP.NRLIB/code.o ${OUT}/FOP.o

@
<<FOP.NRLIB (NRLIB from MID)>>=
${MID}/FOP.NRLIB: ${MID}/FOP.spad
	@ echo 0 making ${MID}/FOP.NRLIB from ${MID}/FOP.spad
	@ (cd ${MID} ; 	echo ')co FOP.spad' | ${INTERPSYS} )

@
<<FOP.spad (SPAD from IN)>>=
${MID}/FOP.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/FOP.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FOP.NRLIB ; \
	${SPADBIN}/notangle -R"package FOP FortranOutputStackPackage" ${IN}/fortpak.spad.pamphlet >FOP.spad )

@
<<FORT.o (O from NRLIB)>>=
${OUT}/FORT.o: ${MID}/FORT.NRLIB
	@ echo 0 making ${OUT}/FORT.o from ${MID}/FORT.NRLIB
	@ cp ${MID}/FORT.NRLIB/code.o ${OUT}/FORT.o

@
<<FORT.NRLIB (NRLIB from MID)>>=
${MID}/FORT.NRLIB: ${MID}/FORT.spad
	@ echo 0 making ${MID}/FORT.NRLIB from ${MID}/FORT.spad
	@ (cd ${MID} ; 	echo ')co FORT.spad' | ${INTERPSYS} )

@
<<FORT.spad (SPAD from IN)>>=
${MID}/FORT.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/FORT.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORT.NRLIB ; \
	${SPADBIN}/notangle -R"package FORT FortranPackage" ${IN}/fortpak.spad.pamphlet >FORT.spad )

@
<<MCALCFN.o (O from NRLIB)>>=
${OUT}/MCALCFN.o: ${MID}/MCALCFN.NRLIB
	@ echo 0 making ${OUT}/MCALCFN.o from ${MID}/MCALCFN.NRLIB
	@ cp ${MID}/MCALCFN.NRLIB/code.o ${OUT}/MCALCFN.o

@
<<MCALCFN.NRLIB (NRLIB from MID)>>=
${MID}/MCALCFN.NRLIB: ${MID}/MCALCFN.spad
	@ echo 0 making ${MID}/MCALCFN.NRLIB from ${MID}/MCALCFN.spad
	@ (cd ${MID} ; 	echo ')co MCALCFN.spad' | ${INTERPSYS} )

@
<<MCALCFN.spad (SPAD from IN)>>=
${MID}/MCALCFN.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/MCALCFN.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MCALCFN.NRLIB ; \
	${SPADBIN}/notangle -R"package MCALCFN MultiVariableCalculusFunctions" ${IN}/fortpak.spad.pamphlet >MCALCFN.spad )

@
<<NAGSP.o (O from NRLIB)>>=
${OUT}/NAGSP.o: ${MID}/NAGSP.NRLIB
	@ echo 0 making ${OUT}/NAGSP.o from ${MID}/NAGSP.NRLIB
	@ cp ${MID}/NAGSP.NRLIB/code.o ${OUT}/NAGSP.o

@
<<NAGSP.NRLIB (NRLIB from MID)>>=
${MID}/NAGSP.NRLIB: ${MID}/NAGSP.spad
	@ echo 0 making ${MID}/NAGSP.NRLIB from ${MID}/NAGSP.spad
	@ (cd ${MID} ; 	echo ')co NAGSP.spad' | ${INTERPSYS} )

@
<<NAGSP.spad (SPAD from IN)>>=
${MID}/NAGSP.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/NAGSP.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGSP.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGSP NAGLinkSupportPackage" ${IN}/fortpak.spad.pamphlet >NAGSP.spad )

@
<<TEMUTL.o (O from NRLIB)>>=
${OUT}/TEMUTL.o: ${MID}/TEMUTL.NRLIB
	@ echo 0 making ${OUT}/TEMUTL.o from ${MID}/TEMUTL.NRLIB
	@ cp ${MID}/TEMUTL.NRLIB/code.o ${OUT}/TEMUTL.o

@
<<TEMUTL.NRLIB (NRLIB from MID)>>=
${MID}/TEMUTL.NRLIB: ${MID}/TEMUTL.spad
	@ echo 0 making ${MID}/TEMUTL.NRLIB from ${MID}/TEMUTL.spad
	@ (cd ${MID} ; 	echo ')co TEMUTL.spad' | ${INTERPSYS} )

@
<<TEMUTL.spad (SPAD from IN)>>=
${MID}/TEMUTL.spad: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${MID}/TEMUTL.spad from ${IN}/fortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TEMUTL.NRLIB ; \
	${SPADBIN}/notangle -R"package TEMUTL TemplateUtilities" ${IN}/fortpak.spad.pamphlet >TEMUTL.spad )

@
<<fortpak.spad.dvi (DOC from IN)>>=
${DOC}/fortpak.spad.dvi: ${IN}/fortpak.spad.pamphlet
	@ echo 0 making ${DOC}/fortpak.spad.dvi from ${IN}/fortpak.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fortpak.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fortpak.spad ; \
	rm -f ${DOC}/fortpak.spad.pamphlet ; \
	rm -f ${DOC}/fortpak.spad.tex ; \
	rm -f ${DOC}/fortpak.spad )

@
\subsection{fortran.spad \cite{1}}
<<fortran.spad (SPAD from IN)>>=
${MID}/fortran.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/fortran.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fortran.spad.pamphlet >fortran.spad )

@
<<FC.o (O from NRLIB)>>=
${OUT}/FC.o: ${MID}/FC.NRLIB
	@ echo 0 making ${OUT}/FC.o from ${MID}/FC.NRLIB
	@ cp ${MID}/FC.NRLIB/code.o ${OUT}/FC.o

@
<<FC.NRLIB (NRLIB from MID)>>=
${MID}/FC.NRLIB: ${MID}/FC.spad
	@ echo 0 making ${MID}/FC.NRLIB from ${MID}/FC.spad
	@ (cd ${MID} ; 	echo ')co FC.spad' | ${INTERPSYS} )

@
<<FC.spad (SPAD from IN)>>=
${MID}/FC.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/FC.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FC.NRLIB ; \
	${SPADBIN}/notangle -R"domain FC FortranCode" ${IN}/fortran.spad.pamphlet >FC.spad )

@
<<FEXPR.o (O from NRLIB)>>=
${OUT}/FEXPR.o: ${MID}/FEXPR.NRLIB
	@ echo 0 making ${OUT}/FEXPR.o from ${MID}/FEXPR.NRLIB
	@ cp ${MID}/FEXPR.NRLIB/code.o ${OUT}/FEXPR.o

@
<<FEXPR.NRLIB (NRLIB from MID)>>=
${MID}/FEXPR.NRLIB: ${MID}/FEXPR.spad
	@ echo 0 making ${MID}/FEXPR.NRLIB from ${MID}/FEXPR.spad
	@ (cd ${MID} ; 	echo ')co FEXPR.spad' | ${INTERPSYS} )

@
<<FEXPR.spad (SPAD from IN)>>=
${MID}/FEXPR.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/FEXPR.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FEXPR.NRLIB ; \
	${SPADBIN}/notangle -R"domain FEXPR FortranExpression" ${IN}/fortran.spad.pamphlet >FEXPR.spad )

@
<<FTEM.o (O from NRLIB)>>=
${OUT}/FTEM.o: ${MID}/FTEM.NRLIB
	@ echo 0 making ${OUT}/FTEM.o from ${MID}/FTEM.NRLIB
	@ cp ${MID}/FTEM.NRLIB/code.o ${OUT}/FTEM.o

@
<<FTEM.NRLIB (NRLIB from MID)>>=
${MID}/FTEM.NRLIB: ${MID}/FTEM.spad
	@ echo 0 making ${MID}/FTEM.NRLIB from ${MID}/FTEM.spad
	@ (cd ${MID} ; 	echo ')co FTEM.spad' | ${INTERPSYS} )

@
<<FTEM.spad (SPAD from IN)>>=
${MID}/FTEM.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/FTEM.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FTEM.NRLIB ; \
	${SPADBIN}/notangle -R"domain FTEM FortranTemplate" ${IN}/fortran.spad.pamphlet >FTEM.spad )

@
<<FORTRAN.o (O from NRLIB)>>=
${OUT}/FORTRAN.o: ${MID}/FORTRAN.NRLIB
	@ echo 0 making ${OUT}/FORTRAN.o from ${MID}/FORTRAN.NRLIB
	@ cp ${MID}/FORTRAN.NRLIB/code.o ${OUT}/FORTRAN.o

@
<<FORTRAN.NRLIB (NRLIB from MID)>>=
${MID}/FORTRAN.NRLIB: ${MID}/FORTRAN.spad
	@ echo 0 making ${MID}/FORTRAN.NRLIB from ${MID}/FORTRAN.spad
	@ (cd ${MID} ; 	echo ')co FORTRAN.spad' | ${INTERPSYS} )

@
<<FORTRAN.spad (SPAD from IN)>>=
${MID}/FORTRAN.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/FORTRAN.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORTRAN.NRLIB ; \
	${SPADBIN}/notangle -R"domain FORTRAN FortranProgram" ${IN}/fortran.spad.pamphlet >FORTRAN.spad )

@
<<M3D.o (O from NRLIB)>>=
${OUT}/M3D.o: ${MID}/M3D.NRLIB
	@ echo 0 making ${OUT}/M3D.o from ${MID}/M3D.NRLIB
	@ cp ${MID}/M3D.NRLIB/code.o ${OUT}/M3D.o

@
<<M3D.NRLIB (NRLIB from MID)>>=
${MID}/M3D.NRLIB: ${MID}/M3D.spad
	@ echo 0 making ${MID}/M3D.NRLIB from ${MID}/M3D.spad
	@ (cd ${MID} ; 	echo ')co M3D.spad' | ${INTERPSYS} )

@
<<M3D.spad (SPAD from IN)>>=
${MID}/M3D.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/M3D.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf M3D.NRLIB ; \
	${SPADBIN}/notangle -R"domain M3D ThreeDimensionalMatrix" ${IN}/fortran.spad.pamphlet >M3D.spad )

@
<<RESULT.o (O from NRLIB)>>=
${OUT}/RESULT.o: ${MID}/RESULT.NRLIB
	@ echo 0 making ${OUT}/RESULT.o from ${MID}/RESULT.NRLIB
	@ cp ${MID}/RESULT.NRLIB/code.o ${OUT}/RESULT.o

@
<<RESULT.NRLIB (NRLIB from MID)>>=
${MID}/RESULT.NRLIB: ${MID}/RESULT.spad
	@ echo 0 making ${MID}/RESULT.NRLIB from ${MID}/RESULT.spad
	@ (cd ${MID} ; 	echo ')co RESULT.spad' | ${INTERPSYS} )

@
<<RESULT.spad (SPAD from IN)>>=
${MID}/RESULT.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/RESULT.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RESULT.NRLIB ; \
	${SPADBIN}/notangle -R"domain RESULT Result" ${IN}/fortran.spad.pamphlet >RESULT.spad )

@
<<SFORT.o (O from NRLIB)>>=
${OUT}/SFORT.o: ${MID}/SFORT.NRLIB
	@ echo 0 making ${OUT}/SFORT.o from ${MID}/SFORT.NRLIB
	@ cp ${MID}/SFORT.NRLIB/code.o ${OUT}/SFORT.o

@
<<SFORT.NRLIB (NRLIB from MID)>>=
${MID}/SFORT.NRLIB: ${MID}/SFORT.spad
	@ echo 0 making ${MID}/SFORT.NRLIB from ${MID}/SFORT.spad
	@ (cd ${MID} ; 	echo ')co SFORT.spad' | ${INTERPSYS} )

@
<<SFORT.spad (SPAD from IN)>>=
${MID}/SFORT.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/SFORT.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SFORT.NRLIB ; \
	${SPADBIN}/notangle -R"domain SFORT SimpleFortranProgram" ${IN}/fortran.spad.pamphlet >SFORT.spad )

@
<<SWITCH.o (O from NRLIB)>>=
${OUT}/SWITCH.o: ${MID}/SWITCH.NRLIB
	@ echo 0 making ${OUT}/SWITCH.o from ${MID}/SWITCH.NRLIB
	@ cp ${MID}/SWITCH.NRLIB/code.o ${OUT}/SWITCH.o

@
<<SWITCH.NRLIB (NRLIB from MID)>>=
${MID}/SWITCH.NRLIB: ${MID}/SWITCH.spad
	@ echo 0 making ${MID}/SWITCH.NRLIB from ${MID}/SWITCH.spad
	@ (cd ${MID} ; 	echo ')co SWITCH.spad' | ${INTERPSYS} )

@
<<SWITCH.spad (SPAD from IN)>>=
${MID}/SWITCH.spad: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${MID}/SWITCH.spad from ${IN}/fortran.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SWITCH.NRLIB ; \
	${SPADBIN}/notangle -R"domain SWITCH Switch" ${IN}/fortran.spad.pamphlet >SWITCH.spad )

@
<<fortran.spad.dvi (DOC from IN)>>=
${DOC}/fortran.spad.dvi: ${IN}/fortran.spad.pamphlet
	@ echo 0 making ${DOC}/fortran.spad.dvi from ${IN}/fortran.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fortran.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fortran.spad ; \
	rm -f ${DOC}/fortran.spad.pamphlet ; \
	rm -f ${DOC}/fortran.spad.tex ; \
	rm -f ${DOC}/fortran.spad )

@
\subsection{forttyp.spad \cite{1}}
<<forttyp.spad (SPAD from IN)>>=
${MID}/forttyp.spad: ${IN}/forttyp.spad.pamphlet
	@ echo 0 making ${MID}/forttyp.spad from ${IN}/forttyp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/forttyp.spad.pamphlet >forttyp.spad )

@
<<FST.o (O from NRLIB)>>=
${OUT}/FST.o: ${MID}/FST.NRLIB
	@ echo 0 making ${OUT}/FST.o from ${MID}/FST.NRLIB
	@ cp ${MID}/FST.NRLIB/code.o ${OUT}/FST.o

@
<<FST.NRLIB (NRLIB from MID)>>=
${MID}/FST.NRLIB: ${MID}/FST.spad
	@ echo 0 making ${MID}/FST.NRLIB from ${MID}/FST.spad
	@ (cd ${MID} ; 	echo ')co FST.spad' | ${INTERPSYS} )

@
<<FST.spad (SPAD from IN)>>=
${MID}/FST.spad: ${IN}/forttyp.spad.pamphlet
	@ echo 0 making ${MID}/FST.spad from ${IN}/forttyp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FST.NRLIB ; \
	${SPADBIN}/notangle -R"domain FST FortranScalarType" ${IN}/forttyp.spad.pamphlet >FST.spad )

@
<<FT.o (O from NRLIB)>>=
${OUT}/FT.o: ${MID}/FT.NRLIB
	@ echo 0 making ${OUT}/FT.o from ${MID}/FT.NRLIB
	@ cp ${MID}/FT.NRLIB/code.o ${OUT}/FT.o

@
<<FT.NRLIB (NRLIB from MID)>>=
${MID}/FT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FT.spad
	@ echo 0 making ${MID}/FT.NRLIB from ${MID}/FT.spad
	@ (cd ${MID} ; 	echo ')co FT.spad' | ${INTERPSYS} )

@
<<FT.spad (SPAD from IN)>>=
${MID}/FT.spad: ${IN}/forttyp.spad.pamphlet
	@ echo 0 making ${MID}/FT.spad from ${IN}/forttyp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FT.NRLIB ; \
	${SPADBIN}/notangle -R"domain FT FortranType" ${IN}/forttyp.spad.pamphlet >FT.spad )

@
<<SYMS.o (O from NRLIB)>>=
${OUT}/SYMS.o: ${MID}/SYMS.NRLIB
	@ echo 0 making ${OUT}/SYMS.o from ${MID}/SYMS.NRLIB
	@ cp ${MID}/SYMS.NRLIB/code.o ${OUT}/SYMS.o

@
<<SYMS.NRLIB (NRLIB from MID)>>=
${MID}/SYMS.NRLIB: ${MID}/SYMS.spad
	@ echo 0 making ${MID}/SYMS.NRLIB from ${MID}/SYMS.spad
	@ (cd ${MID} ; 	echo ')co SYMS.spad' | ${INTERPSYS} )

@
<<SYMS.spad (SPAD from IN)>>=
${MID}/SYMS.spad: ${IN}/forttyp.spad.pamphlet
	@ echo 0 making ${MID}/SYMS.spad from ${IN}/forttyp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYMS.NRLIB ; \
	${SPADBIN}/notangle -R"domain SYMS TheSymbolTable" ${IN}/forttyp.spad.pamphlet >SYMS.spad )

@
<<SYMTAB.o (O from NRLIB)>>=
${OUT}/SYMTAB.o: ${MID}/SYMTAB.NRLIB
	@ echo 0 making ${OUT}/SYMTAB.o from ${MID}/SYMTAB.NRLIB
	@ cp ${MID}/SYMTAB.NRLIB/code.o ${OUT}/SYMTAB.o

@
<<SYMTAB.NRLIB (NRLIB from MID)>>=
${MID}/SYMTAB.NRLIB: ${MID}/SYMTAB.spad
	@ echo 0 making ${MID}/SYMTAB.NRLIB from ${MID}/SYMTAB.spad
	@ (cd ${MID} ; 	echo ')co SYMTAB.spad' | ${INTERPSYS} )

@
<<SYMTAB.spad (SPAD from IN)>>=
${MID}/SYMTAB.spad: ${IN}/forttyp.spad.pamphlet
	@ echo 0 making ${MID}/SYMTAB.spad from ${IN}/forttyp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYMTAB.NRLIB ; \
	${SPADBIN}/notangle -R"domain SYMTAB SymbolTable" ${IN}/forttyp.spad.pamphlet >SYMTAB.spad )

@
<<forttyp.spad.dvi (DOC from IN)>>=
${DOC}/forttyp.spad.dvi: ${IN}/forttyp.spad.pamphlet
	@ echo 0 making ${DOC}/forttyp.spad.dvi from ${IN}/forttyp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/forttyp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} forttyp.spad ; \
	rm -f ${DOC}/forttyp.spad.pamphlet ; \
	rm -f ${DOC}/forttyp.spad.tex ; \
	rm -f ${DOC}/forttyp.spad )

@
\subsection{fourier.spad \cite{1}}
<<fourier.spad (SPAD from IN)>>=
${MID}/fourier.spad: ${IN}/fourier.spad.pamphlet
	@ echo 0 making ${MID}/fourier.spad from ${IN}/fourier.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fourier.spad.pamphlet >fourier.spad )

@
<<FCOMP.o (O from NRLIB)>>=
${OUT}/FCOMP.o: ${MID}/FCOMP.NRLIB
	@ echo 0 making ${OUT}/FCOMP.o from ${MID}/FCOMP.NRLIB
	@ cp ${MID}/FCOMP.NRLIB/code.o ${OUT}/FCOMP.o

@
<<FCOMP.NRLIB (NRLIB from MID)>>=
${MID}/FCOMP.NRLIB: ${MID}/FCOMP.spad
	@ echo 0 making ${MID}/FCOMP.NRLIB from ${MID}/FCOMP.spad
	@ (cd ${MID} ; 	echo ')co FCOMP.spad' | ${INTERPSYS} )

@
<<FCOMP.spad (SPAD from IN)>>=
${MID}/FCOMP.spad: ${IN}/fourier.spad.pamphlet
	@ echo 0 making ${MID}/FCOMP.spad from ${IN}/fourier.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FCOMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain FCOMP FourierComponent" ${IN}/fourier.spad.pamphlet >FCOMP.spad )

@
<<FSERIES.o (O from NRLIB)>>=
${OUT}/FSERIES.o: ${MID}/FSERIES.NRLIB
	@ echo 0 making ${OUT}/FSERIES.o from ${MID}/FSERIES.NRLIB
	@ cp ${MID}/FSERIES.NRLIB/code.o ${OUT}/FSERIES.o

@
<<FSERIES.NRLIB (NRLIB from MID)>>=
${MID}/FSERIES.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FSERIES.spad
	@ echo 0 making ${MID}/FSERIES.NRLIB from ${MID}/FSERIES.spad
	@ (cd ${MID} ; 	echo ')co FSERIES.spad' | ${INTERPSYS} )

@
<<FSERIES.spad (SPAD from IN)>>=
${MID}/FSERIES.spad: ${IN}/fourier.spad.pamphlet
	@ echo 0 making ${MID}/FSERIES.spad from ${IN}/fourier.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSERIES.NRLIB ; \
	${SPADBIN}/notangle -R"domain FSERIES FourierSeries" ${IN}/fourier.spad.pamphlet >FSERIES.spad )

@
<<fourier.spad.dvi (DOC from IN)>>=
${DOC}/fourier.spad.dvi: ${IN}/fourier.spad.pamphlet
	@ echo 0 making ${DOC}/fourier.spad.dvi from ${IN}/fourier.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fourier.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fourier.spad ; \
	rm -f ${DOC}/fourier.spad.pamphlet ; \
	rm -f ${DOC}/fourier.spad.tex ; \
	rm -f ${DOC}/fourier.spad )

@
\subsection{fparfrac.spad \cite{1}}
<<fparfrac.spad (SPAD from IN)>>=
${MID}/fparfrac.spad: ${IN}/fparfrac.spad.pamphlet
	@ echo 0 making ${MID}/fparfrac.spad from ${IN}/fparfrac.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fparfrac.spad.pamphlet >fparfrac.spad )

@
<<FPARFRAC.o (O from NRLIB)>>=
${OUT}/FPARFRAC.o: ${MID}/FPARFRAC.NRLIB
	@ echo 0 making ${OUT}/FPARFRAC.o from ${MID}/FPARFRAC.NRLIB
	@ cp ${MID}/FPARFRAC.NRLIB/code.o ${OUT}/FPARFRAC.o

@
<<FPARFRAC.NRLIB (NRLIB from MID)>>=
${MID}/FPARFRAC.NRLIB: ${MID}/FPARFRAC.spad
	@ echo 0 making ${MID}/FPARFRAC.NRLIB from ${MID}/FPARFRAC.spad
	@ (cd ${MID} ; 	echo ')co FPARFRAC.spad' | ${INTERPSYS} )

@
<<FPARFRAC.spad (SPAD from IN)>>=
${MID}/FPARFRAC.spad: ${IN}/fparfrac.spad.pamphlet
	@ echo 0 making ${MID}/FPARFRAC.spad from ${IN}/fparfrac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FPARFRAC.NRLIB ; \
	${SPADBIN}/notangle -R"domain FPARFRAC FullPartialFractionExpansion" ${IN}/fparfrac.spad.pamphlet >FPARFRAC.spad )

@
<<fparfrac.spad.dvi (DOC from IN)>>=
${DOC}/fparfrac.spad.dvi: ${IN}/fparfrac.spad.pamphlet
	@ echo 0 making ${DOC}/fparfrac.spad.dvi from ${IN}/fparfrac.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fparfrac.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fparfrac.spad ; \
	rm -f ${DOC}/fparfrac.spad.pamphlet ; \
	rm -f ${DOC}/fparfrac.spad.tex ; \
	rm -f ${DOC}/fparfrac.spad )

@
\subsection{fraction.spad \cite{1}}
<<fraction.spad (SPAD from IN)>>=
${MID}/fraction.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/fraction.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fraction.spad.pamphlet >fraction.spad )

@
<<FRAC.o (O from NRLIB)>>=
${OUT}/FRAC.o: ${MID}/FRAC.NRLIB
	@ echo 0 making ${OUT}/FRAC.o from ${MID}/FRAC.NRLIB
	@ cp ${MID}/FRAC.NRLIB/code.o ${OUT}/FRAC.o

@
<<FRAC.NRLIB (NRLIB from MID)>>=
${MID}/FRAC.NRLIB: ${MID}/FRAC.spad
	@ echo 0 making ${MID}/FRAC.NRLIB from ${MID}/FRAC.spad
	@ (cd ${MID} ; 	echo ')co FRAC.spad' | ${INTERPSYS} )

@
<<FRAC.spad (SPAD from IN)>>=
${MID}/FRAC.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/FRAC.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRAC.NRLIB ; \
	${SPADBIN}/notangle -R"domain FRAC Fraction" ${IN}/fraction.spad.pamphlet >FRAC.spad )

@
<<FRAC2.o (O from NRLIB)>>=
${OUT}/FRAC2.o: ${MID}/FRAC2.NRLIB
	@ echo 0 making ${OUT}/FRAC2.o from ${MID}/FRAC2.NRLIB
	@ cp ${MID}/FRAC2.NRLIB/code.o ${OUT}/FRAC2.o

@
<<FRAC2.NRLIB (NRLIB from MID)>>=
${MID}/FRAC2.NRLIB: ${MID}/FRAC2.spad
	@ echo 0 making ${MID}/FRAC2.NRLIB from ${MID}/FRAC2.spad
	@ (cd ${MID} ; 	echo ')co FRAC2.spad' | ${INTERPSYS} )

@
<<FRAC2.spad (SPAD from IN)>>=
${MID}/FRAC2.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/FRAC2.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRAC2.NRLIB ; \
	${SPADBIN}/notangle -R"package FRAC2 FractionFunctions2" ${IN}/fraction.spad.pamphlet >FRAC2.spad )

@
<<LA.o (O from NRLIB)>>=
${OUT}/LA.o: ${MID}/LA.NRLIB
	@ echo 0 making ${OUT}/LA.o from ${MID}/LA.NRLIB
	@ cp ${MID}/LA.NRLIB/code.o ${OUT}/LA.o

@
<<LA.NRLIB (NRLIB from MID)>>=
${MID}/LA.NRLIB: ${MID}/LA.spad
	@ echo 0 making ${MID}/LA.NRLIB from ${MID}/LA.spad
	@ (cd ${MID} ; 	echo ')co LA.spad' | ${INTERPSYS} )

@
<<LA.spad (SPAD from IN)>>=
${MID}/LA.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/LA.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LA.NRLIB ; \
	${SPADBIN}/notangle -R"domain LA LocalAlgebra" ${IN}/fraction.spad.pamphlet >LA.spad )

@
<<LO.o (O from NRLIB)>>=
${OUT}/LO.o: ${MID}/LO.NRLIB
	@ echo 0 making ${OUT}/LO.o from ${MID}/LO.NRLIB
	@ cp ${MID}/LO.NRLIB/code.o ${OUT}/LO.o

@
<<LO.NRLIB (NRLIB from MID)>>=
${MID}/LO.NRLIB: ${MID}/LO.spad
	@ echo 0 making ${MID}/LO.NRLIB from ${MID}/LO.spad
	@ (cd ${MID} ; 	echo ')co LO.spad' | ${INTERPSYS} )

@
<<LO.spad (SPAD from IN)>>=
${MID}/LO.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/LO.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LO.NRLIB ; \
	${SPADBIN}/notangle -R"domain LO Localize" ${IN}/fraction.spad.pamphlet >LO.spad )

@
<<LPEFRAC.o (O from NRLIB)>>=
${OUT}/LPEFRAC.o: ${MID}/LPEFRAC.NRLIB
	@ echo 0 making ${OUT}/LPEFRAC.o from ${MID}/LPEFRAC.NRLIB
	@ cp ${MID}/LPEFRAC.NRLIB/code.o ${OUT}/LPEFRAC.o

@
<<LPEFRAC.NRLIB (NRLIB from MID)>>=
${MID}/LPEFRAC.NRLIB: ${MID}/LPEFRAC.spad
	@ echo 0 making ${MID}/LPEFRAC.NRLIB from ${MID}/LPEFRAC.spad
	@ (cd ${MID} ; 	echo ')co LPEFRAC.spad' | ${INTERPSYS} )

@
<<LPEFRAC.spad (SPAD from IN)>>=
${MID}/LPEFRAC.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/LPEFRAC.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LPEFRAC.NRLIB ; \
	${SPADBIN}/notangle -R"package LPEFRAC LinearPolynomialEquationByFractions" ${IN}/fraction.spad.pamphlet >LPEFRAC.spad )

@
<<QFCAT-.o (O from NRLIB)>>=
${OUT}/QFCAT-.o: ${MID}/QFCAT.NRLIB
	@ echo 0 making ${OUT}/QFCAT-.o from ${MID}/QFCAT-.NRLIB
	@ cp ${MID}/QFCAT-.NRLIB/code.o ${OUT}/QFCAT-.o

@
<<QFCAT-.NRLIB (NRLIB from MID)>>=
${MID}/QFCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/QFCAT.spad 
	@ echo 0 making ${MID}/QFCAT-.NRLIB from ${MID}/QFCAT.spad
	@ (cd ${MID} ; 	echo ')co QFCAT.spad' | ${INTERPSYS} )

@
<<QFCAT.o (O from NRLIB)>>=
${OUT}/QFCAT.o: ${MID}/QFCAT.NRLIB
	@ echo 0 making ${OUT}/QFCAT.o from ${MID}/QFCAT.NRLIB
	@ cp ${MID}/QFCAT.NRLIB/code.o ${OUT}/QFCAT.o

@
<<QFCAT.NRLIB (NRLIB from MID)>>=
${MID}/QFCAT.NRLIB: ${MID}/QFCAT.spad
	@ echo 0 making ${MID}/QFCAT.NRLIB from ${MID}/QFCAT.spad
	@ (cd ${MID} ; 	echo ')co QFCAT.spad' | ${INTERPSYS} )

@
<<QFCAT.spad (SPAD from IN)>>=
${MID}/QFCAT.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/QFCAT.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QFCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category QFCAT QuotientFieldCategory" ${IN}/fraction.spad.pamphlet >QFCAT.spad )

@
<<QFCAT-.o (BOOTSTRAP from MID)>>=
${MID}/QFCAT-.o: ${MID}/QFCAT-.lsp 
	@ echo 0 making ${MID}/QFCAT-.o from ${MID}/QFCAT-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "QFCAT-.lsp" :output-file "QFCAT-.o"))' | ${DEPSYS} )
	@ cp ${MID}/QFCAT-.o ${OUT}/QFCAT-.o

@
<<QFCAT-.lsp (LISP from IN)>>=
${MID}/QFCAT-.lsp: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/QFCAT-.lsp from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QFCAT-.NRLIB ; \
	rm -rf ${OUT}/QFCAT-.o ; \
	${SPADBIN}/notangle -R"QFCAT-.lsp BOOTSTRAP" ${IN}/fraction.spad.pamphlet >QFCAT-.lsp )

@
<<QFCAT.o (BOOTSTRAP from MID)>>=
${MID}/QFCAT.o: ${MID}/QFCAT.lsp 
	@ echo 0 making ${MID}/QFCAT.o from ${MID}/QFCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "QFCAT.lsp" :output-file "QFCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/QFCAT.o ${OUT}/QFCAT.o

@
<<QFCAT.lsp (LISP from IN)>>=
${MID}/QFCAT.lsp: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/QFCAT.lsp from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QFCAT.NRLIB ; \
	rm -rf ${OUT}/QFCAT.o ; \
	${SPADBIN}/notangle -R"QFCAT.lsp BOOTSTRAP" ${IN}/fraction.spad.pamphlet >QFCAT.lsp )

@
<<QFCAT2.o (O from NRLIB)>>=
${OUT}/QFCAT2.o: ${MID}/QFCAT2.NRLIB
	@ echo 0 making ${OUT}/QFCAT2.o from ${MID}/QFCAT2.NRLIB
	@ cp ${MID}/QFCAT2.NRLIB/code.o ${OUT}/QFCAT2.o

@
<<QFCAT2.NRLIB (NRLIB from MID)>>=
${MID}/QFCAT2.NRLIB: ${MID}/QFCAT2.spad
	@ echo 0 making ${MID}/QFCAT2.NRLIB from ${MID}/QFCAT2.spad
	@ (cd ${MID} ; 	echo ')co QFCAT2.spad' | ${INTERPSYS} )

@
<<QFCAT2.spad (SPAD from IN)>>=
${MID}/QFCAT2.spad: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${MID}/QFCAT2.spad from ${IN}/fraction.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QFCAT2.NRLIB ; \
	${SPADBIN}/notangle -R"package QFCAT2 QuotientFieldCategoryFunctions2" ${IN}/fraction.spad.pamphlet >QFCAT2.spad )

@
<<fraction.spad.dvi (DOC from IN)>>=
${DOC}/fraction.spad.dvi: ${IN}/fraction.spad.pamphlet
	@ echo 0 making ${DOC}/fraction.spad.dvi from ${IN}/fraction.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fraction.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fraction.spad ; \
	rm -f ${DOC}/fraction.spad.pamphlet ; \
	rm -f ${DOC}/fraction.spad.tex ; \
	rm -f ${DOC}/fraction.spad )

@
\subsection{free.spad \cite{1}}
<<free.spad (SPAD from IN)>>=
${MID}/free.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/free.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/free.spad.pamphlet >free.spad )

@
<<FAGROUP.o (O from NRLIB)>>=
${OUT}/FAGROUP.o: ${MID}/FAGROUP.NRLIB
	@ echo 0 making ${OUT}/FAGROUP.o from ${MID}/FAGROUP.NRLIB
	@ cp ${MID}/FAGROUP.NRLIB/code.o ${OUT}/FAGROUP.o

@
<<FAGROUP.NRLIB (NRLIB from MID)>>=
${MID}/FAGROUP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FAGROUP.spad
	@ echo 0 making ${MID}/FAGROUP.NRLIB from ${MID}/FAGROUP.spad
	@ (cd ${MID} ; 	echo ')co FAGROUP.spad' | ${INTERPSYS} )

@
<<FAGROUP.spad (SPAD from IN)>>=
${MID}/FAGROUP.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/FAGROUP.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FAGROUP.NRLIB ; \
	${SPADBIN}/notangle -R"domain FAGROUP FreeAbelianGroup" ${IN}/free.spad.pamphlet >FAGROUP.spad )

@
<<FAMONC.o (O from NRLIB)>>=
${OUT}/FAMONC.o: ${MID}/FAMONC.NRLIB
	@ echo 0 making ${OUT}/FAMONC.o from ${MID}/FAMONC.NRLIB
	@ cp ${MID}/FAMONC.NRLIB/code.o ${OUT}/FAMONC.o

@
<<FAMONC.NRLIB (NRLIB from MID)>>=
${MID}/FAMONC.NRLIB: ${OUT}/TYPE.o ${MID}/FAMONC.spad
	@ echo 0 making ${MID}/FAMONC.NRLIB from ${MID}/FAMONC.spad
	@ (cd ${MID} ; 	echo ')co FAMONC.spad' | ${INTERPSYS} )

@
<<FAMONC.spad (SPAD from IN)>>=
${MID}/FAMONC.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/FAMONC.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FAMONC.NRLIB ; \
	${SPADBIN}/notangle -R"category FAMONC FreeAbelianMonoidCategory" ${IN}/free.spad.pamphlet >FAMONC.spad )

@
<<FGROUP.o (O from NRLIB)>>=
${OUT}/FGROUP.o: ${MID}/FGROUP.NRLIB
	@ echo 0 making ${OUT}/FGROUP.o from ${MID}/FGROUP.NRLIB
	@ cp ${MID}/FGROUP.NRLIB/code.o ${OUT}/FGROUP.o

@
<<FGROUP.NRLIB (NRLIB from MID)>>=
${MID}/FGROUP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FGROUP.spad
	@ echo 0 making ${MID}/FGROUP.NRLIB from ${MID}/FGROUP.spad
	@ (cd ${MID} ; 	echo ')co FGROUP.spad' | ${INTERPSYS} )

@
<<FGROUP.spad (SPAD from IN)>>=
${MID}/FGROUP.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/FGROUP.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FGROUP.NRLIB ; \
	${SPADBIN}/notangle -R"domain FGROUP FreeGroup" ${IN}/free.spad.pamphlet >FGROUP.spad )

@
<<FAMONOID.o (O from NRLIB)>>=
${OUT}/FAMONOID.o: ${MID}/FAMONOID.NRLIB
	@ echo 0 making ${OUT}/FAMONOID.o from ${MID}/FAMONOID.NRLIB
	@ cp ${MID}/FAMONOID.NRLIB/code.o ${OUT}/FAMONOID.o

@
<<FAMONOID.NRLIB (NRLIB from MID)>>=
${MID}/FAMONOID.NRLIB: ${MID}/FAMONOID.spad
	@ echo 0 making ${MID}/FAMONOID.NRLIB from ${MID}/FAMONOID.spad
	@ (cd ${MID} ; 	echo ')co FAMONOID.spad' | ${INTERPSYS} )

@
<<FAMONOID.spad (SPAD from IN)>>=
${MID}/FAMONOID.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/FAMONOID.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FAMONOID.NRLIB ; \
	${SPADBIN}/notangle -R"domain FAMONOID FreeAbelianMonoid" ${IN}/free.spad.pamphlet >FAMONOID.spad )

@
<<FMONOID.o (O from NRLIB)>>=
${OUT}/FMONOID.o: ${MID}/FMONOID.NRLIB
	@ echo 0 making ${OUT}/FMONOID.o from ${MID}/FMONOID.NRLIB
	@ cp ${MID}/FMONOID.NRLIB/code.o ${OUT}/FMONOID.o

@
<<FMONOID.NRLIB (NRLIB from MID)>>=
${MID}/FMONOID.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FMONOID.spad
	@ echo 0 making ${MID}/FMONOID.NRLIB from ${MID}/FMONOID.spad
	@ (cd ${MID} ; 	echo ')co FMONOID.spad' | ${INTERPSYS} )

@
<<FMONOID.spad (SPAD from IN)>>=
${MID}/FMONOID.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/FMONOID.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FMONOID.NRLIB ; \
	${SPADBIN}/notangle -R"domain FMONOID FreeMonoid" ${IN}/free.spad.pamphlet >FMONOID.spad )

@
<<IFAMON.o (O from NRLIB)>>=
${OUT}/IFAMON.o: ${MID}/IFAMON.NRLIB
	@ echo 0 making ${OUT}/IFAMON.o from ${MID}/IFAMON.NRLIB
	@ cp ${MID}/IFAMON.NRLIB/code.o ${OUT}/IFAMON.o

@
<<IFAMON.NRLIB (NRLIB from MID)>>=
${MID}/IFAMON.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IFAMON.spad
	@ echo 0 making ${MID}/IFAMON.NRLIB from ${MID}/IFAMON.spad
	@ (cd ${MID} ; 	echo ')co IFAMON.spad' | ${INTERPSYS} )

@
<<IFAMON.spad (SPAD from IN)>>=
${MID}/IFAMON.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/IFAMON.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IFAMON.NRLIB ; \
	${SPADBIN}/notangle -R"domain IFAMON InnerFreeAbelianMonoid" ${IN}/free.spad.pamphlet >IFAMON.spad )

@
<<LMOPS.o (O from NRLIB)>>=
${OUT}/LMOPS.o: ${MID}/LMOPS.NRLIB
	@ echo 0 making ${OUT}/LMOPS.o from ${MID}/LMOPS.NRLIB
	@ cp ${MID}/LMOPS.NRLIB/code.o ${OUT}/LMOPS.o

@
<<LMOPS.NRLIB (NRLIB from MID)>>=
${MID}/LMOPS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/LMOPS.spad
	@ echo 0 making ${MID}/LMOPS.NRLIB from ${MID}/LMOPS.spad
	@ (cd ${MID} ; 	echo ')co LMOPS.spad' | ${INTERPSYS} )

@
<<LMOPS.spad (SPAD from IN)>>=
${MID}/LMOPS.spad: ${IN}/free.spad.pamphlet
	@ echo 0 making ${MID}/LMOPS.spad from ${IN}/free.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LMOPS.NRLIB ; \
	${SPADBIN}/notangle -R"domain LMOPS ListMonoidOps" ${IN}/free.spad.pamphlet >LMOPS.spad )

@
<<free.spad.dvi (DOC from IN)>>=
${DOC}/free.spad.dvi: ${IN}/free.spad.pamphlet
	@ echo 0 making ${DOC}/free.spad.dvi from ${IN}/free.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/free.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} free.spad ; \
	rm -f ${DOC}/free.spad.pamphlet ; \
	rm -f ${DOC}/free.spad.tex ; \
	rm -f ${DOC}/free.spad )

@
\subsection{fr.spad \cite{1}}
<<fr.spad (SPAD from IN)>>=
${MID}/fr.spad: ${IN}/fr.spad.pamphlet
	@ echo 0 making ${MID}/fr.spad from ${IN}/fr.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fr.spad.pamphlet >fr.spad )

@
<<FR.o (O from NRLIB)>>=
${OUT}/FR.o: ${MID}/FR.NRLIB
	@ echo 0 making ${OUT}/FR.o from ${MID}/FR.NRLIB
	@ cp ${MID}/FR.NRLIB/code.o ${OUT}/FR.o

@
<<FR.NRLIB (NRLIB from MID)>>=
${MID}/FR.NRLIB: ${MID}/FR.spad
	@ echo 0 making ${MID}/FR.NRLIB from ${MID}/FR.spad
	@ (cd ${MID} ; 	echo ')co FR.spad' | ${INTERPSYS} )

@
<<FR.spad (SPAD from IN)>>=
${MID}/FR.spad: ${IN}/fr.spad.pamphlet
	@ echo 0 making ${MID}/FR.spad from ${IN}/fr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FR.NRLIB ; \
	${SPADBIN}/notangle -R"domain FR Factored" ${IN}/fr.spad.pamphlet >FR.spad )

@
<<FR2.o (O from NRLIB)>>=
${OUT}/FR2.o: ${MID}/FR2.NRLIB
	@ echo 0 making ${OUT}/FR2.o from ${MID}/FR2.NRLIB
	@ cp ${MID}/FR2.NRLIB/code.o ${OUT}/FR2.o

@
<<FR2.NRLIB (NRLIB from MID)>>=
${MID}/FR2.NRLIB: ${MID}/FR2.spad
	@ echo 0 making ${MID}/FR2.NRLIB from ${MID}/FR2.spad
	@ (cd ${MID} ; 	echo ')co FR2.spad' | ${INTERPSYS} )

@
<<FR2.spad (SPAD from IN)>>=
${MID}/FR2.spad: ${IN}/fr.spad.pamphlet
	@ echo 0 making ${MID}/FR2.spad from ${IN}/fr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FR2.NRLIB ; \
	${SPADBIN}/notangle -R"package FR2 FactoredFunctions2" ${IN}/fr.spad.pamphlet >FR2.spad )

@
<<FRUTIL.o (O from NRLIB)>>=
${OUT}/FRUTIL.o: ${MID}/FRUTIL.NRLIB
	@ echo 0 making ${OUT}/FRUTIL.o from ${MID}/FRUTIL.NRLIB
	@ cp ${MID}/FRUTIL.NRLIB/code.o ${OUT}/FRUTIL.o

@
<<FRUTIL.NRLIB (NRLIB from MID)>>=
${MID}/FRUTIL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FRUTIL.spad
	@ echo 0 making ${MID}/FRUTIL.NRLIB from ${MID}/FRUTIL.spad
	@ (cd ${MID} ; 	echo ')co FRUTIL.spad' | ${INTERPSYS} )

@
<<FRUTIL.spad (SPAD from IN)>>=
${MID}/FRUTIL.spad: ${IN}/fr.spad.pamphlet
	@ echo 0 making ${MID}/FRUTIL.spad from ${IN}/fr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRUTIL.NRLIB ; \
	${SPADBIN}/notangle -R"package FRUTIL FactoredFunctionUtilities" ${IN}/fr.spad.pamphlet >FRUTIL.spad )

@
<<fr.spad.dvi (DOC from IN)>>=
${DOC}/fr.spad.dvi: ${IN}/fr.spad.pamphlet
	@ echo 0 making ${DOC}/fr.spad.dvi from ${IN}/fr.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fr.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fr.spad ; \
	rm -f ${DOC}/fr.spad.pamphlet ; \
	rm -f ${DOC}/fr.spad.tex ; \
	rm -f ${DOC}/fr.spad )

@
\subsection{fs2expxp.spad \cite{1}}
<<fs2expxp.spad (SPAD from IN)>>=
${MID}/fs2expxp.spad: ${IN}/fs2expxp.spad.pamphlet
	@ echo 0 making ${MID}/fs2expxp.spad from ${IN}/fs2expxp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fs2expxp.spad.pamphlet >fs2expxp.spad )

@
<<FS2EXPXP.o (O from NRLIB)>>=
${OUT}/FS2EXPXP.o: ${MID}/FS2EXPXP.NRLIB
	@ echo 0 making ${OUT}/FS2EXPXP.o from ${MID}/FS2EXPXP.NRLIB
	@ cp ${MID}/FS2EXPXP.NRLIB/code.o ${OUT}/FS2EXPXP.o

@
<<FS2EXPXP.NRLIB (NRLIB from MID)>>=
${MID}/FS2EXPXP.NRLIB: ${MID}/FS2EXPXP.spad
	@ echo 0 making ${MID}/FS2EXPXP.NRLIB from ${MID}/FS2EXPXP.spad
	@ (cd ${MID} ; 	echo ')co FS2EXPXP.spad' | ${INTERPSYS} )

@
<<FS2EXPXP.spad (SPAD from IN)>>=
${MID}/FS2EXPXP.spad: ${IN}/fs2expxp.spad.pamphlet
	@ echo 0 making ${MID}/FS2EXPXP.spad from ${IN}/fs2expxp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FS2EXPXP.NRLIB ; \
	${SPADBIN}/notangle -R"package FS2EXPXP FunctionSpaceToExponentialExpansion" ${IN}/fs2expxp.spad.pamphlet >FS2EXPXP.spad )

@
<<fs2expxp.spad.dvi (DOC from IN)>>=
${DOC}/fs2expxp.spad.dvi: ${IN}/fs2expxp.spad.pamphlet
	@ echo 0 making ${DOC}/fs2expxp.spad.dvi from ${IN}/fs2expxp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fs2expxp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fs2expxp.spad ; \
	rm -f ${DOC}/fs2expxp.spad.pamphlet ; \
	rm -f ${DOC}/fs2expxp.spad.tex ; \
	rm -f ${DOC}/fs2expxp.spad )

@
\subsection{fs2ups.spad \cite{1}}
<<fs2ups.spad (SPAD from IN)>>=
${MID}/fs2ups.spad: ${IN}/fs2ups.spad.pamphlet
	@ echo 0 making ${MID}/fs2ups.spad from ${IN}/fs2ups.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fs2ups.spad.pamphlet >fs2ups.spad )

@
<<FS2UPS.o (O from NRLIB)>>=
${OUT}/FS2UPS.o: ${MID}/FS2UPS.NRLIB
	@ echo 0 making ${OUT}/FS2UPS.o from ${MID}/FS2UPS.NRLIB
	@ cp ${MID}/FS2UPS.NRLIB/code.o ${OUT}/FS2UPS.o

@
<<FS2UPS.NRLIB (NRLIB from MID)>>=
${MID}/FS2UPS.NRLIB: ${MID}/FS2UPS.spad
	@ echo 0 making ${MID}/FS2UPS.NRLIB from ${MID}/FS2UPS.spad
	@ (cd ${MID} ; 	echo ')co FS2UPS.spad' | ${INTERPSYS} )

@
<<FS2UPS.spad (SPAD from IN)>>=
${MID}/FS2UPS.spad: ${IN}/fs2ups.spad.pamphlet
	@ echo 0 making ${MID}/FS2UPS.spad from ${IN}/fs2ups.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FS2UPS.NRLIB ; \
	${SPADBIN}/notangle -R"package FS2UPS FunctionSpaceToUnivariatePowerSeries" ${IN}/fs2ups.spad.pamphlet >FS2UPS.spad )

@
<<fs2ups.spad.dvi (DOC from IN)>>=
${DOC}/fs2ups.spad.dvi: ${IN}/fs2ups.spad.pamphlet
	@ echo 0 making ${DOC}/fs2ups.spad.dvi from ${IN}/fs2ups.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fs2ups.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fs2ups.spad ; \
	rm -f ${DOC}/fs2ups.spad.pamphlet ; \
	rm -f ${DOC}/fs2ups.spad.tex ; \
	rm -f ${DOC}/fs2ups.spad )

@
\subsection{fspace.spad \cite{1}}
<<fspace.spad (SPAD from IN)>>=
${MID}/fspace.spad: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/fspace.spad from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/fspace.spad.pamphlet >fspace.spad )

@
<<ES-.o (O from NRLIB)>>=
${OUT}/ES-.o: ${MID}/ES.NRLIB
	@ echo 0 making ${OUT}/ES-.o from ${MID}/ES-.NRLIB
	@ cp ${MID}/ES-.NRLIB/code.o ${OUT}/ES-.o

@
<<ES-.NRLIB (NRLIB from MID)>>=
${MID}/ES-.NRLIB: ${OUT}/TYPE.o ${MID}/ES.spad 
	@ echo 0 making ${MID}/ES-.NRLIB from ${MID}/ES.spad
	@ (cd ${MID} ; 	echo ')co ES.spad' | ${INTERPSYS} )

@
<<ES.o (O from NRLIB)>>=
${OUT}/ES.o: ${MID}/ES.NRLIB
	@ echo 0 making ${OUT}/ES.o from ${MID}/ES.NRLIB
	@ cp ${MID}/ES.NRLIB/code.o ${OUT}/ES.o

@
<<ES.NRLIB (NRLIB from MID)>>=
${MID}/ES.NRLIB: ${MID}/ES.spad
	@ echo 0 making ${MID}/ES.NRLIB from ${MID}/ES.spad
	@ (cd ${MID} ; 	echo ')co ES.spad' | ${INTERPSYS} )

@
<<ES.spad (SPAD from IN)>>=
${MID}/ES.spad: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/ES.spad from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ES.NRLIB ; \
	${SPADBIN}/notangle -R"category ES ExpressionSpace" ${IN}/fspace.spad.pamphlet >ES.spad )

@
<<ES-.o (BOOTSTRAP from MID)>>=
${MID}/ES-.o: ${MID}/ES-.lsp 
	@ echo 0 making ${MID}/ES-.o from ${MID}/ES-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ES-.lsp" :output-file "ES-.o"))' | ${DEPSYS} )
	@ cp ${MID}/ES-.o ${OUT}/ES-.o

@
<<ES-.lsp (LISP from IN)>>=
${MID}/ES-.lsp: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/ES-.lsp from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ES-.NRLIB ; \
	rm -rf ${OUT}/ES-.o ; \
	${SPADBIN}/notangle -R"ES-.lsp BOOTSTRAP" ${IN}/fspace.spad.pamphlet >ES-.lsp )

@
<<ES.o (BOOTSTRAP from MID)>>=
${MID}/ES.o: ${MID}/ES.lsp 
	@ echo 0 making ${MID}/ES.o from ${MID}/ES.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ES.lsp" :output-file "ES.o"))' | ${DEPSYS} )
	@ cp ${MID}/ES.o ${OUT}/ES.o

@
<<ES.lsp (LISP from IN)>>=
${MID}/ES.lsp: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/ES.lsp from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ES.NRLIB ; \
	rm -rf ${OUT}/ES.o ; \
	${SPADBIN}/notangle -R"ES.lsp BOOTSTRAP" ${IN}/fspace.spad.pamphlet >ES.lsp )

@
<<ES1.o (O from NRLIB)>>=
${OUT}/ES1.o: ${MID}/ES1.NRLIB
	@ echo 0 making ${OUT}/ES1.o from ${MID}/ES1.NRLIB
	@ cp ${MID}/ES1.NRLIB/code.o ${OUT}/ES1.o

@
<<ES1.NRLIB (NRLIB from MID)>>=
${MID}/ES1.NRLIB: ${MID}/ES1.spad
	@ echo 0 making ${MID}/ES1.NRLIB from ${MID}/ES1.spad
	@ (cd ${MID} ; 	echo ')co ES1.spad' | ${INTERPSYS} )

@
<<ES1.spad (SPAD from IN)>>=
${MID}/ES1.spad: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/ES1.spad from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ES1.NRLIB ; \
	${SPADBIN}/notangle -R"package ES1 ExpressionSpaceFunctions1" ${IN}/fspace.spad.pamphlet >ES1.spad )

@
<<ES2.o (O from NRLIB)>>=
${OUT}/ES2.o: ${MID}/ES2.NRLIB
	@ echo 0 making ${OUT}/ES2.o from ${MID}/ES2.NRLIB
	@ cp ${MID}/ES2.NRLIB/code.o ${OUT}/ES2.o

@
<<ES2.NRLIB (NRLIB from MID)>>=
${MID}/ES2.NRLIB: ${MID}/ES2.spad
	@ echo 0 making ${MID}/ES2.NRLIB from ${MID}/ES2.spad
	@ (cd ${MID} ; 	echo ')co ES2.spad' | ${INTERPSYS} )

@
<<ES2.spad (SPAD from IN)>>=
${MID}/ES2.spad: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/ES2.spad from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ES2.NRLIB ; \
	${SPADBIN}/notangle -R"package ES2 ExpressionSpaceFunctions2" ${IN}/fspace.spad.pamphlet >ES2.spad )

@
<<FS-.o (O from NRLIB)>>=
${OUT}/FS-.o: ${MID}/FS.NRLIB
	@ echo 0 making ${OUT}/FS-.o from ${MID}/FS-.NRLIB
	@ cp ${MID}/FS-.NRLIB/code.o ${OUT}/FS-.o

@
<<FS-.NRLIB (NRLIB from MID)>>=
${MID}/FS-.NRLIB: ${OUT}/TYPE.o ${MID}/FS.spad 
	@ echo 0 making ${MID}/FS-.NRLIB from ${MID}/FS.spad
	@ (cd ${MID} ; 	echo ')co FS.spad' | ${INTERPSYS} )

@
<<FS.o (O from NRLIB)>>=
${OUT}/FS.o: ${MID}/FS.NRLIB
	@ echo 0 making ${OUT}/FS.o from ${MID}/FS.NRLIB
	@ cp ${MID}/FS.NRLIB/code.o ${OUT}/FS.o

@
<<FS.NRLIB (NRLIB from MID)>>=
${MID}/FS.NRLIB: ${MID}/FS.spad
	@ echo 0 making ${MID}/FS.NRLIB from ${MID}/FS.spad
	@ (cd ${MID} ; 	echo ')co FS.spad' | ${INTERPSYS} )

@
<<FS.spad (SPAD from IN)>>=
${MID}/FS.spad: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/FS.spad from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FS.NRLIB ; \
	${SPADBIN}/notangle -R"category FS FunctionSpace" ${IN}/fspace.spad.pamphlet >FS.spad )

@
<<FS2.o (O from NRLIB)>>=
${OUT}/FS2.o: ${MID}/FS2.NRLIB
	@ echo 0 making ${OUT}/FS2.o from ${MID}/FS2.NRLIB
	@ cp ${MID}/FS2.NRLIB/code.o ${OUT}/FS2.o

@
<<FS2.NRLIB (NRLIB from MID)>>=
${MID}/FS2.NRLIB: ${MID}/FS2.spad
	@ echo 0 making ${MID}/FS2.NRLIB from ${MID}/FS2.spad
	@ (cd ${MID} ; 	echo ')co FS2.spad' | ${INTERPSYS} )

@
<<FS2.spad (SPAD from IN)>>=
${MID}/FS2.spad: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${MID}/FS2.spad from ${IN}/fspace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FS2.NRLIB ; \
	${SPADBIN}/notangle -R"package FS2 FunctionSpaceFunctions2" ${IN}/fspace.spad.pamphlet >FS2.spad )

@
<<fspace.spad.dvi (DOC from IN)>>=
${DOC}/fspace.spad.dvi: ${IN}/fspace.spad.pamphlet
	@ echo 0 making ${DOC}/fspace.spad.dvi from ${IN}/fspace.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/fspace.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} fspace.spad ; \
	rm -f ${DOC}/fspace.spad.pamphlet ; \
	rm -f ${DOC}/fspace.spad.tex ; \
	rm -f ${DOC}/fspace.spad )

@
\subsection{funcpkgs.spad \cite{1}}
<<funcpkgs.spad (SPAD from IN)>>=
${MID}/funcpkgs.spad: ${IN}/funcpkgs.spad.pamphlet
	@ echo 0 making ${MID}/funcpkgs.spad from ${IN}/funcpkgs.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/funcpkgs.spad.pamphlet >funcpkgs.spad )

@
<<FSUPFACT.o (O from NRLIB)>>=
${OUT}/FSUPFACT.o: ${MID}/FSUPFACT.NRLIB
	@ echo 0 making ${OUT}/FSUPFACT.o from ${MID}/FSUPFACT.NRLIB
	@ cp ${MID}/FSUPFACT.NRLIB/code.o ${OUT}/FSUPFACT.o

@
<<FSUPFACT.NRLIB (NRLIB from MID)>>=
${MID}/FSUPFACT.NRLIB: ${MID}/FSUPFACT.spad
	@ echo 0 making ${MID}/FSUPFACT.NRLIB from ${MID}/FSUPFACT.spad
	@ (cd ${MID} ; 	echo ')co FSUPFACT.spad' | ${INTERPSYS} )

@
<<FSUPFACT.spad (SPAD from IN)>>=
${MID}/FSUPFACT.spad: ${IN}/funcpkgs.spad.pamphlet
	@ echo 0 making ${MID}/FSUPFACT.spad from ${IN}/funcpkgs.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSUPFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package FSUPFACT FunctionSpaceUnivariatePolynomialFactor" ${IN}/funcpkgs.spad.pamphlet >FSUPFACT.spad )

@
<<funcpkgs.spad.dvi (DOC from IN)>>=
${DOC}/funcpkgs.spad.dvi: ${IN}/funcpkgs.spad.pamphlet
	@ echo 0 making ${DOC}/funcpkgs.spad.dvi from ${IN}/funcpkgs.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/funcpkgs.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} funcpkgs.spad ; \
	rm -f ${DOC}/funcpkgs.spad.pamphlet ; \
	rm -f ${DOC}/funcpkgs.spad.tex ; \
	rm -f ${DOC}/funcpkgs.spad )

@
\subsection{functions.spad \cite{1}}
<<functions.spad (SPAD from IN)>>=
${MID}/functions.spad: ${IN}/functions.spad.pamphlet
	@ echo 0 making ${MID}/functions.spad from ${IN}/functions.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/functions.spad.pamphlet >functions.spad )

@
<<BFUNCT.o (O from NRLIB)>>=
${OUT}/BFUNCT.o: ${MID}/BFUNCT.NRLIB
	@ echo 0 making ${OUT}/BFUNCT.o from ${MID}/BFUNCT.NRLIB
	@ cp ${MID}/BFUNCT.NRLIB/code.o ${OUT}/BFUNCT.o

@
<<BFUNCT.NRLIB (NRLIB from MID)>>=
${MID}/BFUNCT.NRLIB: ${MID}/BFUNCT.spad
	@ echo 0 making ${MID}/BFUNCT.NRLIB from ${MID}/BFUNCT.spad
	@ (cd ${MID} ; 	echo ')co BFUNCT.spad' | ${INTERPSYS} )

@
<<BFUNCT.spad (SPAD from IN)>>=
${MID}/BFUNCT.spad: ${IN}/functions.spad.pamphlet
	@ echo 0 making ${MID}/BFUNCT.spad from ${IN}/functions.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BFUNCT.NRLIB ; \
	${SPADBIN}/notangle -R"domain BFUNCT BasicFunctions" ${IN}/functions.spad.pamphlet >BFUNCT.spad )

@
<<functions.spad.dvi (DOC from IN)>>=
${DOC}/functions.spad.dvi: ${IN}/functions.spad.pamphlet
	@ echo 0 making ${DOC}/functions.spad.dvi from ${IN}/functions.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/functions.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} functions.spad ; \
	rm -f ${DOC}/functions.spad.pamphlet ; \
	rm -f ${DOC}/functions.spad.tex ; \
	rm -f ${DOC}/functions.spad )

@
\subsection{galfact.spad \cite{1}}
<<galfact.spad (SPAD from IN)>>=
${MID}/galfact.spad: ${IN}/galfact.spad.pamphlet
	@ echo 0 making ${MID}/galfact.spad from ${IN}/galfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/galfact.spad.pamphlet >galfact.spad )

@
<<GALFACT.o (O from NRLIB)>>=
${OUT}/GALFACT.o: ${MID}/GALFACT.NRLIB
	@ echo 0 making ${OUT}/GALFACT.o from ${MID}/GALFACT.NRLIB
	@ cp ${MID}/GALFACT.NRLIB/code.o ${OUT}/GALFACT.o

@
<<GALFACT.NRLIB (NRLIB from MID)>>=
${MID}/GALFACT.NRLIB: ${MID}/GALFACT.spad
	@ echo 0 making ${MID}/GALFACT.NRLIB from ${MID}/GALFACT.spad
	@ (cd ${MID} ; 	echo ')co GALFACT.spad' | ${INTERPSYS} )

@
<<GALFACT.spad (SPAD from IN)>>=
${MID}/GALFACT.spad: ${IN}/galfact.spad.pamphlet
	@ echo 0 making ${MID}/GALFACT.spad from ${IN}/galfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GALFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package GALFACT GaloisGroupFactorizer" ${IN}/galfact.spad.pamphlet >GALFACT.spad )

@
<<galfact.spad.dvi (DOC from IN)>>=
${DOC}/galfact.spad.dvi: ${IN}/galfact.spad.pamphlet
	@ echo 0 making ${DOC}/galfact.spad.dvi from ${IN}/galfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/galfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} galfact.spad ; \
	rm -f ${DOC}/galfact.spad.pamphlet ; \
	rm -f ${DOC}/galfact.spad.tex ; \
	rm -f ${DOC}/galfact.spad )

@
\subsection{galfactu.spad \cite{1}}
<<galfactu.spad (SPAD from IN)>>=
${MID}/galfactu.spad: ${IN}/galfactu.spad.pamphlet
	@ echo 0 making ${MID}/galfactu.spad from ${IN}/galfactu.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/galfactu.spad.pamphlet >galfactu.spad )

@
<<GALFACTU.o (O from NRLIB)>>=
${OUT}/GALFACTU.o: ${MID}/GALFACTU.NRLIB
	@ echo 0 making ${OUT}/GALFACTU.o from ${MID}/GALFACTU.NRLIB
	@ cp ${MID}/GALFACTU.NRLIB/code.o ${OUT}/GALFACTU.o

@
<<GALFACTU.NRLIB (NRLIB from MID)>>=
${MID}/GALFACTU.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GALFACTU.spad
	@ echo 0 making ${MID}/GALFACTU.NRLIB from ${MID}/GALFACTU.spad
	@ (cd ${MID} ; 	echo ')co GALFACTU.spad' | ${INTERPSYS} )

@
<<GALFACTU.spad (SPAD from IN)>>=
${MID}/GALFACTU.spad: ${IN}/galfactu.spad.pamphlet
	@ echo 0 making ${MID}/GALFACTU.spad from ${IN}/galfactu.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GALFACTU.NRLIB ; \
	${SPADBIN}/notangle -R"package GALFACTU GaloisGroupFactorizationUtilities" ${IN}/galfactu.spad.pamphlet >GALFACTU.spad )

@
<<galfactu.spad.dvi (DOC from IN)>>=
${DOC}/galfactu.spad.dvi: ${IN}/galfactu.spad.pamphlet
	@ echo 0 making ${DOC}/galfactu.spad.dvi from ${IN}/galfactu.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/galfactu.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} galfactu.spad ; \
	rm -f ${DOC}/galfactu.spad.pamphlet ; \
	rm -f ${DOC}/galfactu.spad.tex ; \
	rm -f ${DOC}/galfactu.spad )

@
\subsection{galpolyu.spad \cite{1}}
<<galpolyu.spad (SPAD from IN)>>=
${MID}/galpolyu.spad: ${IN}/galpolyu.spad.pamphlet
	@ echo 0 making ${MID}/galpolyu.spad from ${IN}/galpolyu.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/galpolyu.spad.pamphlet >galpolyu.spad )

@
<<GALPOLYU.o (O from NRLIB)>>=
${OUT}/GALPOLYU.o: ${MID}/GALPOLYU.NRLIB
	@ echo 0 making ${OUT}/GALPOLYU.o from ${MID}/GALPOLYU.NRLIB
	@ cp ${MID}/GALPOLYU.NRLIB/code.o ${OUT}/GALPOLYU.o

@
<<GALPOLYU.NRLIB (NRLIB from MID)>>=
${MID}/GALPOLYU.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GALPOLYU.spad
	@ echo 0 making ${MID}/GALPOLYU.NRLIB from ${MID}/GALPOLYU.spad
	@ (cd ${MID} ; 	echo ')co GALPOLYU.spad' | ${INTERPSYS} )

@
<<GALPOLYU.spad (SPAD from IN)>>=
${MID}/GALPOLYU.spad: ${IN}/galpolyu.spad.pamphlet
	@ echo 0 making ${MID}/GALPOLYU.spad from ${IN}/galpolyu.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GALPOLYU.NRLIB ; \
	${SPADBIN}/notangle -R"package GALPOLYU GaloisGroupPolynomialUtilities" ${IN}/galpolyu.spad.pamphlet >GALPOLYU.spad )

@
<<galpolyu.spad.dvi (DOC from IN)>>=
${DOC}/galpolyu.spad.dvi: ${IN}/galpolyu.spad.pamphlet
	@ echo 0 making ${DOC}/galpolyu.spad.dvi from ${IN}/galpolyu.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/galpolyu.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} galpolyu.spad ; \
	rm -f ${DOC}/galpolyu.spad.pamphlet ; \
	rm -f ${DOC}/galpolyu.spad.tex ; \
	rm -f ${DOC}/galpolyu.spad )

@
\subsection{galutil.spad \cite{1}}
<<galutil.spad (SPAD from IN)>>=
${MID}/galutil.spad: ${IN}/galutil.spad.pamphlet
	@ echo 0 making ${MID}/galutil.spad from ${IN}/galutil.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/galutil.spad.pamphlet >galutil.spad )

@
<<GALUTIL.o (O from NRLIB)>>=
${OUT}/GALUTIL.o: ${MID}/GALUTIL.NRLIB
	@ echo 0 making ${OUT}/GALUTIL.o from ${MID}/GALUTIL.NRLIB
	@ cp ${MID}/GALUTIL.NRLIB/code.o ${OUT}/GALUTIL.o

@
<<GALUTIL.NRLIB (NRLIB from MID)>>=
${MID}/GALUTIL.NRLIB: ${MID}/GALUTIL.spad
	@ echo 0 making ${MID}/GALUTIL.NRLIB from ${MID}/GALUTIL.spad
	@ (cd ${MID} ; 	echo ')co GALUTIL.spad' | ${INTERPSYS} )

@
<<GALUTIL.spad (SPAD from IN)>>=
${MID}/GALUTIL.spad: ${IN}/galutil.spad.pamphlet
	@ echo 0 making ${MID}/GALUTIL.spad from ${IN}/galutil.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GALUTIL.NRLIB ; \
	${SPADBIN}/notangle -R"package GALUTIL GaloisGroupUtilities" ${IN}/galutil.spad.pamphlet >GALUTIL.spad )

@
<<galutil.spad.dvi (DOC from IN)>>=
${DOC}/galutil.spad.dvi: ${IN}/galutil.spad.pamphlet
	@ echo 0 making ${DOC}/galutil.spad.dvi from ${IN}/galutil.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/galutil.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} galutil.spad ; \
	rm -f ${DOC}/galutil.spad.pamphlet ; \
	rm -f ${DOC}/galutil.spad.tex ; \
	rm -f ${DOC}/galutil.spad )

@
\subsection{gaussfac.spad \cite{1}}
<<gaussfac.spad (SPAD from IN)>>=
${MID}/gaussfac.spad: ${IN}/gaussfac.spad.pamphlet
	@ echo 0 making ${MID}/gaussfac.spad from ${IN}/gaussfac.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gaussfac.spad.pamphlet >gaussfac.spad )

@
<<GAUSSFAC.o (O from NRLIB)>>=
${OUT}/GAUSSFAC.o: ${MID}/GAUSSFAC.NRLIB
	@ echo 0 making ${OUT}/GAUSSFAC.o from ${MID}/GAUSSFAC.NRLIB
	@ cp ${MID}/GAUSSFAC.NRLIB/code.o ${OUT}/GAUSSFAC.o

@
<<GAUSSFAC.NRLIB (NRLIB from MID)>>=
${MID}/GAUSSFAC.NRLIB: ${MID}/GAUSSFAC.spad
	@ echo 0 making ${MID}/GAUSSFAC.NRLIB from ${MID}/GAUSSFAC.spad
	@ (cd ${MID} ; 	echo ')co GAUSSFAC.spad' | ${INTERPSYS} )

@
<<GAUSSFAC.spad (SPAD from IN)>>=
${MID}/GAUSSFAC.spad: ${IN}/gaussfac.spad.pamphlet
	@ echo 0 making ${MID}/GAUSSFAC.spad from ${IN}/gaussfac.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GAUSSFAC.NRLIB ; \
	${SPADBIN}/notangle -R"package GAUSSFAC GaussianFactorizationPackage" ${IN}/gaussfac.spad.pamphlet >GAUSSFAC.spad )

@
<<gaussfac.spad.dvi (DOC from IN)>>=
${DOC}/gaussfac.spad.dvi: ${IN}/gaussfac.spad.pamphlet
	@ echo 0 making ${DOC}/gaussfac.spad.dvi from ${IN}/gaussfac.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gaussfac.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gaussfac.spad ; \
	rm -f ${DOC}/gaussfac.spad.pamphlet ; \
	rm -f ${DOC}/gaussfac.spad.tex ; \
	rm -f ${DOC}/gaussfac.spad )

@
\subsection{gaussian.spad \cite{1}}
<<gaussian.spad (SPAD from IN)>>=
${MID}/gaussian.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/gaussian.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gaussian.spad.pamphlet >gaussian.spad )

@
<<CINTSLPE.o (O from NRLIB)>>=
${OUT}/CINTSLPE.o: ${MID}/CINTSLPE.NRLIB
	@ echo 0 making ${OUT}/CINTSLPE.o from ${MID}/CINTSLPE.NRLIB
	@ cp ${MID}/CINTSLPE.NRLIB/code.o ${OUT}/CINTSLPE.o

@
<<CINTSLPE.NRLIB (NRLIB from MID)>>=
${MID}/CINTSLPE.NRLIB: ${MID}/CINTSLPE.spad
	@ echo 0 making ${MID}/CINTSLPE.NRLIB from ${MID}/CINTSLPE.spad
	@ (cd ${MID} ; 	echo ')co CINTSLPE.spad' | ${INTERPSYS} )

@
<<CINTSLPE.spad (SPAD from IN)>>=
${MID}/CINTSLPE.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/CINTSLPE.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CINTSLPE.NRLIB ; \
	${SPADBIN}/notangle -R"package CINTSLPE ComplexIntegerSolveLinearPolynomialEquation" ${IN}/gaussian.spad.pamphlet >CINTSLPE.spad )

@
<<COMPCAT-.o (O from NRLIB)>>=
${OUT}/COMPCAT-.o: ${MID}/COMPCAT.NRLIB
	@ echo 0 making ${OUT}/COMPCAT-.o from ${MID}/COMPCAT-.NRLIB
	@ cp ${MID}/COMPCAT-.NRLIB/code.o ${OUT}/COMPCAT-.o

@
<<COMPCAT-.NRLIB (NRLIB from MID)>>=
${MID}/COMPCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/COMPCAT.spad 
	@ echo 0 making ${MID}/COMPCAT-.NRLIB from ${MID}/COMPCAT.spad
	@ (cd ${MID} ; 	echo ')co COMPCAT.spad' | ${INTERPSYS} )

@
<<COMPCAT.o (O from NRLIB)>>=
${OUT}/COMPCAT.o: ${MID}/COMPCAT.NRLIB
	@ echo 0 making ${OUT}/COMPCAT.o from ${MID}/COMPCAT.NRLIB
	@ cp ${MID}/COMPCAT.NRLIB/code.o ${OUT}/COMPCAT.o

@
<<COMPCAT.NRLIB (NRLIB from MID)>>=
${MID}/COMPCAT.NRLIB: ${MID}/COMPCAT.spad
	@ echo 0 making ${MID}/COMPCAT.NRLIB from ${MID}/COMPCAT.spad
	@ (cd ${MID} ; 	echo ')co COMPCAT.spad' | ${INTERPSYS} )

@
<<COMPCAT.spad (SPAD from IN)>>=
${MID}/COMPCAT.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/COMPCAT.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMPCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category COMPCAT ComplexCategory" ${IN}/gaussian.spad.pamphlet >COMPCAT.spad )

@
<<COMPFACT.o (O from NRLIB)>>=
${OUT}/COMPFACT.o: ${MID}/COMPFACT.NRLIB
	@ echo 0 making ${OUT}/COMPFACT.o from ${MID}/COMPFACT.NRLIB
	@ cp ${MID}/COMPFACT.NRLIB/code.o ${OUT}/COMPFACT.o

@
<<COMPFACT.NRLIB (NRLIB from MID)>>=
${MID}/COMPFACT.NRLIB: ${MID}/COMPFACT.spad
	@ echo 0 making ${MID}/COMPFACT.NRLIB from ${MID}/COMPFACT.spad
	@ (cd ${MID} ; 	echo ')co COMPFACT.spad' | ${INTERPSYS} )

@
<<COMPFACT.spad (SPAD from IN)>>=
${MID}/COMPFACT.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/COMPFACT.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMPFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package COMPFACT ComplexFactorization" ${IN}/gaussian.spad.pamphlet >COMPFACT.spad )

@
<<COMPLEX.o (O from NRLIB)>>=
${OUT}/COMPLEX.o: ${MID}/COMPLEX.NRLIB
	@ echo 0 making ${OUT}/COMPLEX.o from ${MID}/COMPLEX.NRLIB
	@ cp ${MID}/COMPLEX.NRLIB/code.o ${OUT}/COMPLEX.o

@
<<COMPLEX.NRLIB (NRLIB from MID)>>=
${MID}/COMPLEX.NRLIB: ${MID}/COMPLEX.spad
	@ echo 0 making ${MID}/COMPLEX.NRLIB from ${MID}/COMPLEX.spad
	@ (cd ${MID} ; 	echo ')co COMPLEX.spad' | ${INTERPSYS} )

@
<<COMPLEX.spad (SPAD from IN)>>=
${MID}/COMPLEX.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/COMPLEX.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMPLEX.NRLIB ; \
	${SPADBIN}/notangle -R"domain COMPLEX Complex" ${IN}/gaussian.spad.pamphlet >COMPLEX.spad )

@
<<COMPLEX2.o (O from NRLIB)>>=
${OUT}/COMPLEX2.o: ${MID}/COMPLEX2.NRLIB
	@ echo 0 making ${OUT}/COMPLEX2.o from ${MID}/COMPLEX2.NRLIB
	@ cp ${MID}/COMPLEX2.NRLIB/code.o ${OUT}/COMPLEX2.o

@
<<COMPLEX2.NRLIB (NRLIB from MID)>>=
${MID}/COMPLEX2.NRLIB: ${MID}/COMPLEX2.spad
	@ echo 0 making ${MID}/COMPLEX2.NRLIB from ${MID}/COMPLEX2.spad
	@ (cd ${MID} ; 	echo ')co COMPLEX2.spad' | ${INTERPSYS} )

@
<<COMPLEX2.spad (SPAD from IN)>>=
${MID}/COMPLEX2.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/COMPLEX2.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMPLEX2.NRLIB ; \
	${SPADBIN}/notangle -R"package COMPLEX2 ComplexFunctions2" ${IN}/gaussian.spad.pamphlet >COMPLEX2.spad )

@
<<COMPLPAT.o (O from NRLIB)>>=
${OUT}/COMPLPAT.o: ${MID}/COMPLPAT.NRLIB
	@ echo 0 making ${OUT}/COMPLPAT.o from ${MID}/COMPLPAT.NRLIB
	@ cp ${MID}/COMPLPAT.NRLIB/code.o ${OUT}/COMPLPAT.o

@
<<COMPLPAT.NRLIB (NRLIB from MID)>>=
${MID}/COMPLPAT.NRLIB: ${MID}/COMPLPAT.spad
	@ echo 0 making ${MID}/COMPLPAT.NRLIB from ${MID}/COMPLPAT.spad
	@ (cd ${MID} ; 	echo ')co COMPLPAT.spad' | ${INTERPSYS} )

@
<<COMPLPAT.spad (SPAD from IN)>>=
${MID}/COMPLPAT.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/COMPLPAT.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMPLPAT.NRLIB ; \
	${SPADBIN}/notangle -R"package COMPLPAT ComplexPattern" ${IN}/gaussian.spad.pamphlet >COMPLPAT.spad )

@
<<CPMATCH.o (O from NRLIB)>>=
${OUT}/CPMATCH.o: ${MID}/CPMATCH.NRLIB
	@ echo 0 making ${OUT}/CPMATCH.o from ${MID}/CPMATCH.NRLIB
	@ cp ${MID}/CPMATCH.NRLIB/code.o ${OUT}/CPMATCH.o

@
<<CPMATCH.NRLIB (NRLIB from MID)>>=
${MID}/CPMATCH.NRLIB: ${MID}/CPMATCH.spad
	@ echo 0 making ${MID}/CPMATCH.NRLIB from ${MID}/CPMATCH.spad
	@ (cd ${MID} ; 	echo ')co CPMATCH.spad' | ${INTERPSYS} )

@
<<CPMATCH.spad (SPAD from IN)>>=
${MID}/CPMATCH.spad: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${MID}/CPMATCH.spad from ${IN}/gaussian.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CPMATCH.NRLIB ; \
	${SPADBIN}/notangle -R"package CPMATCH ComplexPatternMatch" ${IN}/gaussian.spad.pamphlet >CPMATCH.spad )

@
<<gaussian.spad.dvi (DOC from IN)>>=
${DOC}/gaussian.spad.dvi: ${IN}/gaussian.spad.pamphlet
	@ echo 0 making ${DOC}/gaussian.spad.dvi from ${IN}/gaussian.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gaussian.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gaussian.spad ; \
	rm -f ${DOC}/gaussian.spad.pamphlet ; \
	rm -f ${DOC}/gaussian.spad.tex ; \
	rm -f ${DOC}/gaussian.spad )

@
\subsection{gbeuclid.spad \cite{1}}
<<gbeuclid.spad (SPAD from IN)>>=
${MID}/gbeuclid.spad: ${IN}/gbeuclid.spad.pamphlet
	@ echo 0 making ${MID}/gbeuclid.spad from ${IN}/gbeuclid.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gbeuclid.spad.pamphlet >gbeuclid.spad )

@
<<GBEUCLID.o (O from NRLIB)>>=
${OUT}/GBEUCLID.o: ${MID}/GBEUCLID.NRLIB
	@ echo 0 making ${OUT}/GBEUCLID.o from ${MID}/GBEUCLID.NRLIB
	@ cp ${MID}/GBEUCLID.NRLIB/code.o ${OUT}/GBEUCLID.o

@
<<GBEUCLID.NRLIB (NRLIB from MID)>>=
${MID}/GBEUCLID.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GBEUCLID.spad
	@ echo 0 making ${MID}/GBEUCLID.NRLIB from ${MID}/GBEUCLID.spad
	@ (cd ${MID} ; 	echo ')co GBEUCLID.spad' | ${INTERPSYS} )

@
<<GBEUCLID.spad (SPAD from IN)>>=
${MID}/GBEUCLID.spad: ${IN}/gbeuclid.spad.pamphlet
	@ echo 0 making ${MID}/GBEUCLID.spad from ${IN}/gbeuclid.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GBEUCLID.NRLIB ; \
	${SPADBIN}/notangle -R"package GBEUCLID EuclideanGroebnerBasisPackage" ${IN}/gbeuclid.spad.pamphlet >GBEUCLID.spad )

@
<<gbeuclid.spad.dvi (DOC from IN)>>=
${DOC}/gbeuclid.spad.dvi: ${IN}/gbeuclid.spad.pamphlet
	@ echo 0 making ${DOC}/gbeuclid.spad.dvi from ${IN}/gbeuclid.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gbeuclid.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gbeuclid.spad ; \
	rm -f ${DOC}/gbeuclid.spad.pamphlet ; \
	rm -f ${DOC}/gbeuclid.spad.tex ; \
	rm -f ${DOC}/gbeuclid.spad )

@
\subsection{gbintern.spad \cite{1}}
<<gbintern.spad (SPAD from IN)>>=
${MID}/gbintern.spad: ${IN}/gbintern.spad.pamphlet
	@ echo 0 making ${MID}/gbintern.spad from ${IN}/gbintern.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gbintern.spad.pamphlet >gbintern.spad )

@
<<GBINTERN.o (O from NRLIB)>>=
${OUT}/GBINTERN.o: ${MID}/GBINTERN.NRLIB
	@ echo 0 making ${OUT}/GBINTERN.o from ${MID}/GBINTERN.NRLIB
	@ cp ${MID}/GBINTERN.NRLIB/code.o ${OUT}/GBINTERN.o

@
<<GBINTERN.NRLIB (NRLIB from MID)>>=
${MID}/GBINTERN.NRLIB: ${MID}/GBINTERN.spad
	@ echo 0 making ${MID}/GBINTERN.NRLIB from ${MID}/GBINTERN.spad
	@ (cd ${MID} ; 	echo ')co GBINTERN.spad' | ${INTERPSYS} )

@
<<GBINTERN.spad (SPAD from IN)>>=
${MID}/GBINTERN.spad: ${IN}/gbintern.spad.pamphlet
	@ echo 0 making ${MID}/GBINTERN.spad from ${IN}/gbintern.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GBINTERN.NRLIB ; \
	${SPADBIN}/notangle -R"package GBINTERN GroebnerInternalPackage" ${IN}/gbintern.spad.pamphlet >GBINTERN.spad )

@
<<gbintern.spad.dvi (DOC from IN)>>=
${DOC}/gbintern.spad.dvi: ${IN}/gbintern.spad.pamphlet
	@ echo 0 making ${DOC}/gbintern.spad.dvi from ${IN}/gbintern.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gbintern.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gbintern.spad ; \
	rm -f ${DOC}/gbintern.spad.pamphlet ; \
	rm -f ${DOC}/gbintern.spad.tex ; \
	rm -f ${DOC}/gbintern.spad )

@
\subsection{gb.spad \cite{1}}
<<gb.spad (SPAD from IN)>>=
${MID}/gb.spad: ${IN}/gb.spad.pamphlet
	@ echo 0 making ${MID}/gb.spad from ${IN}/gb.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gb.spad.pamphlet >gb.spad )

@
<<GB.o (O from NRLIB)>>=
${OUT}/GB.o: ${MID}/GB.NRLIB
	@ echo 0 making ${OUT}/GB.o from ${MID}/GB.NRLIB
	@ cp ${MID}/GB.NRLIB/code.o ${OUT}/GB.o

@
<<GB.NRLIB (NRLIB from MID)>>=
${MID}/GB.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GB.spad
	@ echo 0 making ${MID}/GB.NRLIB from ${MID}/GB.spad
	@ (cd ${MID} ; 	echo ')co GB.spad' | ${INTERPSYS} )

@
<<GB.spad (SPAD from IN)>>=
${MID}/GB.spad: ${IN}/gb.spad.pamphlet
	@ echo 0 making ${MID}/GB.spad from ${IN}/gb.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GB.NRLIB ; \
	${SPADBIN}/notangle -R"package GB GroebnerPackage" ${IN}/gb.spad.pamphlet >GB.spad )

@
<<gb.spad.dvi (DOC from IN)>>=
${DOC}/gb.spad.dvi: ${IN}/gb.spad.pamphlet
	@ echo 0 making ${DOC}/gb.spad.dvi from ${IN}/gb.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gb.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gb.spad ; \
	rm -f ${DOC}/gb.spad.pamphlet ; \
	rm -f ${DOC}/gb.spad.tex ; \
	rm -f ${DOC}/gb.spad )

@
\subsection{gdirprod.spad \cite{1}}
<<gdirprod.spad (SPAD from IN)>>=
${MID}/gdirprod.spad: ${IN}/gdirprod.spad.pamphlet
	@ echo 0 making ${MID}/gdirprod.spad from ${IN}/gdirprod.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gdirprod.spad.pamphlet >gdirprod.spad )

@
<<HDP.o (O from NRLIB)>>=
${OUT}/HDP.o: ${MID}/HDP.NRLIB
	@ echo 0 making ${OUT}/HDP.o from ${MID}/HDP.NRLIB
	@ cp ${MID}/HDP.NRLIB/code.o ${OUT}/HDP.o

@
<<HDP.NRLIB (NRLIB from MID)>>=
${MID}/HDP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/HDP.spad
	@ echo 0 making ${MID}/HDP.NRLIB from ${MID}/HDP.spad
	@ (cd ${MID} ; 	echo ')co HDP.spad' | ${INTERPSYS} )

@
<<HDP.spad (SPAD from IN)>>=
${MID}/HDP.spad: ${IN}/gdirprod.spad.pamphlet
	@ echo 0 making ${MID}/HDP.spad from ${IN}/gdirprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HDP.NRLIB ; \
	${SPADBIN}/notangle -R"domain HDP HomogeneousDirectProduct" ${IN}/gdirprod.spad.pamphlet >HDP.spad )

@
<<ORDFUNS.o (O from NRLIB)>>=
${OUT}/ORDFUNS.o: ${MID}/ORDFUNS.NRLIB
	@ echo 0 making ${OUT}/ORDFUNS.o from ${MID}/ORDFUNS.NRLIB
	@ cp ${MID}/ORDFUNS.NRLIB/code.o ${OUT}/ORDFUNS.o

@
<<ORDFUNS.NRLIB (NRLIB from MID)>>=
${MID}/ORDFUNS.NRLIB: ${MID}/ORDFUNS.spad
	@ echo 0 making ${MID}/ORDFUNS.NRLIB from ${MID}/ORDFUNS.spad
	@ (cd ${MID} ; 	echo ')co ORDFUNS.spad' | ${INTERPSYS} )

@
<<ORDFUNS.spad (SPAD from IN)>>=
${MID}/ORDFUNS.spad: ${IN}/gdirprod.spad.pamphlet
	@ echo 0 making ${MID}/ORDFUNS.spad from ${IN}/gdirprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORDFUNS.NRLIB ; \
	${SPADBIN}/notangle -R"package ORDFUNS OrderingFunctions" ${IN}/gdirprod.spad.pamphlet >ORDFUNS.spad )

@
<<ODP.o (O from NRLIB)>>=
${OUT}/ODP.o: ${MID}/ODP.NRLIB
	@ echo 0 making ${OUT}/ODP.o from ${MID}/ODP.NRLIB
	@ cp ${MID}/ODP.NRLIB/code.o ${OUT}/ODP.o

@
<<ODP.NRLIB (NRLIB from MID)>>=
${MID}/ODP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ODP.spad
	@ echo 0 making ${MID}/ODP.NRLIB from ${MID}/ODP.spad
	@ (cd ${MID} ; 	echo ')co ODP.spad' | ${INTERPSYS} )

@
<<ODP.spad (SPAD from IN)>>=
${MID}/ODP.spad: ${IN}/gdirprod.spad.pamphlet
	@ echo 0 making ${MID}/ODP.spad from ${IN}/gdirprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODP.NRLIB ; \
	${SPADBIN}/notangle -R"domain ODP OrderedDirectProduct" ${IN}/gdirprod.spad.pamphlet >ODP.spad )

@
<<SHDP.o (O from NRLIB)>>=
${OUT}/SHDP.o: ${MID}/SHDP.NRLIB
	@ echo 0 making ${OUT}/SHDP.o from ${MID}/SHDP.NRLIB
	@ cp ${MID}/SHDP.NRLIB/code.o ${OUT}/SHDP.o

@
<<SHDP.NRLIB (NRLIB from MID)>>=
${MID}/SHDP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SHDP.spad
	@ echo 0 making ${MID}/SHDP.NRLIB from ${MID}/SHDP.spad
	@ (cd ${MID} ; 	echo ')co SHDP.spad' | ${INTERPSYS} )

@
<<SHDP.spad (SPAD from IN)>>=
${MID}/SHDP.spad: ${IN}/gdirprod.spad.pamphlet
	@ echo 0 making ${MID}/SHDP.spad from ${IN}/gdirprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SHDP.NRLIB ; \
	${SPADBIN}/notangle -R"domain SHDP SplitHomogeneousDirectProduct" ${IN}/gdirprod.spad.pamphlet >SHDP.spad )

@
<<gdirprod.spad.dvi (DOC from IN)>>=
${DOC}/gdirprod.spad.dvi: ${IN}/gdirprod.spad.pamphlet
	@ echo 0 making ${DOC}/gdirprod.spad.dvi from ${IN}/gdirprod.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gdirprod.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gdirprod.spad ; \
	rm -f ${DOC}/gdirprod.spad.pamphlet ; \
	rm -f ${DOC}/gdirprod.spad.tex ; \
	rm -f ${DOC}/gdirprod.spad )

@
\subsection{gdpoly.spad \cite{1}}
<<gdpoly.spad (SPAD from IN)>>=
${MID}/gdpoly.spad: ${IN}/gdpoly.spad.pamphlet
	@ echo 0 making ${MID}/gdpoly.spad from ${IN}/gdpoly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gdpoly.spad.pamphlet >gdpoly.spad )

@
<<DMP.o (O from NRLIB)>>=
${OUT}/DMP.o: ${MID}/DMP.NRLIB
	@ echo 0 making ${OUT}/DMP.o from ${MID}/DMP.NRLIB
	@ cp ${MID}/DMP.NRLIB/code.o ${OUT}/DMP.o

@
<<DMP.NRLIB (NRLIB from MID)>>=
${MID}/DMP.NRLIB: ${MID}/DMP.spad
	@ echo 0 making ${MID}/DMP.NRLIB from ${MID}/DMP.spad
	@ (cd ${MID} ; 	echo ')co DMP.spad' | ${INTERPSYS} )

@
<<DMP.spad (SPAD from IN)>>=
${MID}/DMP.spad: ${IN}/gdpoly.spad.pamphlet
	@ echo 0 making ${MID}/DMP.spad from ${IN}/gdpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain DMP DistributedMultivariatePolynomial" ${IN}/gdpoly.spad.pamphlet >DMP.spad )

@
<<GDMP.o (O from NRLIB)>>=
${OUT}/GDMP.o: ${MID}/GDMP.NRLIB
	@ echo 0 making ${OUT}/GDMP.o from ${MID}/GDMP.NRLIB
	@ cp ${MID}/GDMP.NRLIB/code.o ${OUT}/GDMP.o

@
<<GDMP.NRLIB (NRLIB from MID)>>=
${MID}/GDMP.NRLIB: ${MID}/GDMP.spad
	@ echo 0 making ${MID}/GDMP.NRLIB from ${MID}/GDMP.spad
	@ (cd ${MID} ; 	echo ')co GDMP.spad' | ${INTERPSYS} )

@
<<GDMP.spad (SPAD from IN)>>=
${MID}/GDMP.spad: ${IN}/gdpoly.spad.pamphlet
	@ echo 0 making ${MID}/GDMP.spad from ${IN}/gdpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GDMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain GDMP GeneralDistributedMultivariatePolynomial" ${IN}/gdpoly.spad.pamphlet >GDMP.spad )

@
<<HDMP.o (O from NRLIB)>>=
${OUT}/HDMP.o: ${MID}/HDMP.NRLIB
	@ echo 0 making ${OUT}/HDMP.o from ${MID}/HDMP.NRLIB
	@ cp ${MID}/HDMP.NRLIB/code.o ${OUT}/HDMP.o

@
<<HDMP.NRLIB (NRLIB from MID)>>=
${MID}/HDMP.NRLIB: ${MID}/HDMP.spad
	@ echo 0 making ${MID}/HDMP.NRLIB from ${MID}/HDMP.spad
	@ (cd ${MID} ; 	echo ')co HDMP.spad' | ${INTERPSYS} )

@
<<HDMP.spad (SPAD from IN)>>=
${MID}/HDMP.spad: ${IN}/gdpoly.spad.pamphlet
	@ echo 0 making ${MID}/HDMP.spad from ${IN}/gdpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HDMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain HDMP HomogeneousDistributedMultivariatePolynomial" ${IN}/gdpoly.spad.pamphlet >HDMP.spad )

@
<<gdpoly.spad.dvi (DOC from IN)>>=
${DOC}/gdpoly.spad.dvi: ${IN}/gdpoly.spad.pamphlet
	@ echo 0 making ${DOC}/gdpoly.spad.dvi from ${IN}/gdpoly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gdpoly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gdpoly.spad ; \
	rm -f ${DOC}/gdpoly.spad.pamphlet ; \
	rm -f ${DOC}/gdpoly.spad.tex ; \
	rm -f ${DOC}/gdpoly.spad )

@
\subsection{geneez.spad \cite{1}}
<<geneez.spad (SPAD from IN)>>=
${MID}/geneez.spad: ${IN}/geneez.spad.pamphlet
	@ echo 0 making ${MID}/geneez.spad from ${IN}/geneez.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/geneez.spad.pamphlet >geneez.spad )

@
<<GENEEZ.o (O from NRLIB)>>=
${OUT}/GENEEZ.o: ${MID}/GENEEZ.NRLIB
	@ echo 0 making ${OUT}/GENEEZ.o from ${MID}/GENEEZ.NRLIB
	@ cp ${MID}/GENEEZ.NRLIB/code.o ${OUT}/GENEEZ.o

@
<<GENEEZ.NRLIB (NRLIB from MID)>>=
${MID}/GENEEZ.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GENEEZ.spad
	@ echo 0 making ${MID}/GENEEZ.NRLIB from ${MID}/GENEEZ.spad
	@ (cd ${MID} ; 	echo ')co GENEEZ.spad' | ${INTERPSYS} )

@
<<GENEEZ.spad (SPAD from IN)>>=
${MID}/GENEEZ.spad: ${IN}/geneez.spad.pamphlet
	@ echo 0 making ${MID}/GENEEZ.spad from ${IN}/geneez.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GENEEZ.NRLIB ; \
	${SPADBIN}/notangle -R"package GENEEZ GenExEuclid" ${IN}/geneez.spad.pamphlet >GENEEZ.spad )

@
<<geneez.spad.dvi (DOC from IN)>>=
${DOC}/geneez.spad.dvi: ${IN}/geneez.spad.pamphlet
	@ echo 0 making ${DOC}/geneez.spad.dvi from ${IN}/geneez.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/geneez.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} geneez.spad ; \
	rm -f ${DOC}/geneez.spad.pamphlet ; \
	rm -f ${DOC}/geneez.spad.tex ; \
	rm -f ${DOC}/geneez.spad )

@
\subsection{generic.spad \cite{1}}
<<generic.spad (SPAD from IN)>>=
${MID}/generic.spad: ${IN}/generic.spad.pamphlet
	@ echo 0 making ${MID}/generic.spad from ${IN}/generic.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/generic.spad.pamphlet >generic.spad )

@
<<CVMP.o (O from NRLIB)>>=
${OUT}/CVMP.o: ${MID}/CVMP.NRLIB
	@ echo 0 making ${OUT}/CVMP.o from ${MID}/CVMP.NRLIB
	@ cp ${MID}/CVMP.NRLIB/code.o ${OUT}/CVMP.o

@
<<CVMP.NRLIB (NRLIB from MID)>>=
${MID}/CVMP.NRLIB: ${MID}/CVMP.spad
	@ echo 0 making ${MID}/CVMP.NRLIB from ${MID}/CVMP.spad
	@ (cd ${MID} ; 	echo ')co CVMP.spad' | ${INTERPSYS} )

@
<<CVMP.spad (SPAD from IN)>>=
${MID}/CVMP.spad: ${IN}/generic.spad.pamphlet
	@ echo 0 making ${MID}/CVMP.spad from ${IN}/generic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CVMP.NRLIB ; \
	${SPADBIN}/notangle -R"package CVMP CoerceVectorMatrixPackage" ${IN}/generic.spad.pamphlet >CVMP.spad )

@
<<GCNAALG.o (O from NRLIB)>>=
${OUT}/GCNAALG.o: ${MID}/GCNAALG.NRLIB
	@ echo 0 making ${OUT}/GCNAALG.o from ${MID}/GCNAALG.NRLIB
	@ cp ${MID}/GCNAALG.NRLIB/code.o ${OUT}/GCNAALG.o

@
<<GCNAALG.NRLIB (NRLIB from MID)>>=
${MID}/GCNAALG.NRLIB: ${MID}/GCNAALG.spad
	@ echo 0 making ${MID}/GCNAALG.NRLIB from ${MID}/GCNAALG.spad
	@ (cd ${MID} ; 	echo ')co GCNAALG.spad' | ${INTERPSYS} )

@
<<GCNAALG.spad (SPAD from IN)>>=
${MID}/GCNAALG.spad: ${IN}/generic.spad.pamphlet
	@ echo 0 making ${MID}/GCNAALG.spad from ${IN}/generic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GCNAALG.NRLIB ; \
	${SPADBIN}/notangle -R"domain GCNAALG GenericNonAssociativeAlgebra" ${IN}/generic.spad.pamphlet >GCNAALG.spad )

@
<<generic.spad.dvi (DOC from IN)>>=
${DOC}/generic.spad.dvi: ${IN}/generic.spad.pamphlet
	@ echo 0 making ${DOC}/generic.spad.dvi from ${IN}/generic.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/generic.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} generic.spad ; \
	rm -f ${DOC}/generic.spad.pamphlet ; \
	rm -f ${DOC}/generic.spad.tex ; \
	rm -f ${DOC}/generic.spad )

@
\subsection{genufact.spad \cite{1}}
<<genufact.spad (SPAD from IN)>>=
${MID}/genufact.spad: ${IN}/genufact.spad.pamphlet
	@ echo 0 making ${MID}/genufact.spad from ${IN}/genufact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/genufact.spad.pamphlet >genufact.spad )

@
<<GENUFACT.o (O from NRLIB)>>=
${OUT}/GENUFACT.o: ${MID}/GENUFACT.NRLIB
	@ echo 0 making ${OUT}/GENUFACT.o from ${MID}/GENUFACT.NRLIB
	@ cp ${MID}/GENUFACT.NRLIB/code.o ${OUT}/GENUFACT.o

@
<<GENUFACT.NRLIB (NRLIB from MID)>>=
${MID}/GENUFACT.NRLIB: ${MID}/GENUFACT.spad
	@ echo 0 making ${MID}/GENUFACT.NRLIB from ${MID}/GENUFACT.spad
	@ (cd ${MID} ; 	echo ')co GENUFACT.spad' | ${INTERPSYS} )

@
<<GENUFACT.spad (SPAD from IN)>>=
${MID}/GENUFACT.spad: ${IN}/genufact.spad.pamphlet
	@ echo 0 making ${MID}/GENUFACT.spad from ${IN}/genufact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GENUFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package GENUFACT GenUFactorize" ${IN}/genufact.spad.pamphlet >GENUFACT.spad )

@
<<genufact.spad.dvi (DOC from IN)>>=
${DOC}/genufact.spad.dvi: ${IN}/genufact.spad.pamphlet
	@ echo 0 making ${DOC}/genufact.spad.dvi from ${IN}/genufact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/genufact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} genufact.spad ; \
	rm -f ${DOC}/genufact.spad.pamphlet ; \
	rm -f ${DOC}/genufact.spad.tex ; \
	rm -f ${DOC}/genufact.spad )

@
\subsection{genups.spad \cite{1}}
<<genups.spad (SPAD from IN)>>=
${MID}/genups.spad: ${IN}/genups.spad.pamphlet
	@ echo 0 making ${MID}/genups.spad from ${IN}/genups.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/genups.spad.pamphlet >genups.spad )

@
<<GENUPS.o (O from NRLIB)>>=
${OUT}/GENUPS.o: ${MID}/GENUPS.NRLIB
	@ echo 0 making ${OUT}/GENUPS.o from ${MID}/GENUPS.NRLIB
	@ cp ${MID}/GENUPS.NRLIB/code.o ${OUT}/GENUPS.o

@
<<GENUPS.NRLIB (NRLIB from MID)>>=
${MID}/GENUPS.NRLIB: ${MID}/GENUPS.spad
	@ echo 0 making ${MID}/GENUPS.NRLIB from ${MID}/GENUPS.spad
	@ (cd ${MID} ; 	echo ')co GENUPS.spad' | ${INTERPSYS} )

@
<<GENUPS.spad (SPAD from IN)>>=
${MID}/GENUPS.spad: ${IN}/genups.spad.pamphlet
	@ echo 0 making ${MID}/GENUPS.spad from ${IN}/genups.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GENUPS.NRLIB ; \
	${SPADBIN}/notangle -R"package GENUPS GenerateUnivariatePowerSeries" ${IN}/genups.spad.pamphlet >GENUPS.spad )

@
<<genups.spad.dvi (DOC from IN)>>=
${DOC}/genups.spad.dvi: ${IN}/genups.spad.pamphlet
	@ echo 0 making ${DOC}/genups.spad.dvi from ${IN}/genups.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/genups.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} genups.spad ; \
	rm -f ${DOC}/genups.spad.pamphlet ; \
	rm -f ${DOC}/genups.spad.tex ; \
	rm -f ${DOC}/genups.spad )

@
\subsection{ghensel.spad \cite{1}}
<<ghensel.spad (SPAD from IN)>>=
${MID}/ghensel.spad: ${IN}/ghensel.spad.pamphlet
	@ echo 0 making ${MID}/ghensel.spad from ${IN}/ghensel.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ghensel.spad.pamphlet >ghensel.spad )

@
<<GHENSEL.o (O from NRLIB)>>=
${OUT}/GHENSEL.o: ${MID}/GHENSEL.NRLIB
	@ echo 0 making ${OUT}/GHENSEL.o from ${MID}/GHENSEL.NRLIB
	@ cp ${MID}/GHENSEL.NRLIB/code.o ${OUT}/GHENSEL.o

@
<<GHENSEL.NRLIB (NRLIB from MID)>>=
${MID}/GHENSEL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GHENSEL.spad
	@ echo 0 making ${MID}/GHENSEL.NRLIB from ${MID}/GHENSEL.spad
	@ (cd ${MID} ; 	echo ')co GHENSEL.spad' | ${INTERPSYS} )

@
<<GHENSEL.spad (SPAD from IN)>>=
${MID}/GHENSEL.spad: ${IN}/ghensel.spad.pamphlet
	@ echo 0 making ${MID}/GHENSEL.spad from ${IN}/ghensel.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GHENSEL.NRLIB ; \
	${SPADBIN}/notangle -R"package GHENSEL GeneralHenselPackage" ${IN}/ghensel.spad.pamphlet >GHENSEL.spad )

@
<<ghensel.spad.dvi (DOC from IN)>>=
${DOC}/ghensel.spad.dvi: ${IN}/ghensel.spad.pamphlet
	@ echo 0 making ${DOC}/ghensel.spad.dvi from ${IN}/ghensel.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ghensel.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ghensel.spad ; \
	rm -f ${DOC}/ghensel.spad.pamphlet ; \
	rm -f ${DOC}/ghensel.spad.tex ; \
	rm -f ${DOC}/ghensel.spad )

@
\subsection{gpgcd.spad \cite{1}}
<<gpgcd.spad (SPAD from IN)>>=
${MID}/gpgcd.spad: ${IN}/gpgcd.spad.pamphlet
	@ echo 0 making ${MID}/gpgcd.spad from ${IN}/gpgcd.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gpgcd.spad.pamphlet >gpgcd.spad )

@
<<GENPGCD.o (O from NRLIB)>>=
${OUT}/GENPGCD.o: ${MID}/GENPGCD.NRLIB
	@ echo 0 making ${OUT}/GENPGCD.o from ${MID}/GENPGCD.NRLIB
	@ cp ${MID}/GENPGCD.NRLIB/code.o ${OUT}/GENPGCD.o

@
<<GENPGCD.NRLIB (NRLIB from MID)>>=
${MID}/GENPGCD.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GENPGCD.spad
	@ echo 0 making ${MID}/GENPGCD.NRLIB from ${MID}/GENPGCD.spad
	@ (cd ${MID} ; 	echo ')co GENPGCD.spad' | ${INTERPSYS} )

@
<<GENPGCD.spad (SPAD from IN)>>=
${MID}/GENPGCD.spad: ${IN}/gpgcd.spad.pamphlet
	@ echo 0 making ${MID}/GENPGCD.spad from ${IN}/gpgcd.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GENPGCD.NRLIB ; \
	${SPADBIN}/notangle -R"package GENPGCD GeneralPolynomialGcdPackage" ${IN}/gpgcd.spad.pamphlet >GENPGCD.spad )

@
<<gpgcd.spad.dvi (DOC from IN)>>=
${DOC}/gpgcd.spad.dvi: ${IN}/gpgcd.spad.pamphlet
	@ echo 0 making ${DOC}/gpgcd.spad.dvi from ${IN}/gpgcd.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gpgcd.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gpgcd.spad ; \
	rm -f ${DOC}/gpgcd.spad.pamphlet ; \
	rm -f ${DOC}/gpgcd.spad.tex ; \
	rm -f ${DOC}/gpgcd.spad )

@
\subsection{gpol.spad \cite{1}}
<<gpol.spad (SPAD from IN)>>=
${MID}/gpol.spad: ${IN}/gpol.spad.pamphlet
	@ echo 0 making ${MID}/gpol.spad from ${IN}/gpol.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gpol.spad.pamphlet >gpol.spad )

@
<<LAUPOL.o (O from NRLIB)>>=
${OUT}/LAUPOL.o: ${MID}/LAUPOL.NRLIB
	@ echo 0 making ${OUT}/LAUPOL.o from ${MID}/LAUPOL.NRLIB
	@ cp ${MID}/LAUPOL.NRLIB/code.o ${OUT}/LAUPOL.o

@
<<LAUPOL.NRLIB (NRLIB from MID)>>=
${MID}/LAUPOL.NRLIB: ${MID}/LAUPOL.spad
	@ echo 0 making ${MID}/LAUPOL.NRLIB from ${MID}/LAUPOL.spad
	@ (cd ${MID} ; 	echo ')co LAUPOL.spad' | ${INTERPSYS} )

@
<<LAUPOL.spad (SPAD from IN)>>=
${MID}/LAUPOL.spad: ${IN}/gpol.spad.pamphlet
	@ echo 0 making ${MID}/LAUPOL.spad from ${IN}/gpol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LAUPOL.NRLIB ; \
	${SPADBIN}/notangle -R"domain LAUPOL LaurentPolynomial" ${IN}/gpol.spad.pamphlet >LAUPOL.spad )

@
<<gpol.spad.dvi (DOC from IN)>>=
${DOC}/gpol.spad.dvi: ${IN}/gpol.spad.pamphlet
	@ echo 0 making ${DOC}/gpol.spad.dvi from ${IN}/gpol.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gpol.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gpol.spad ; \
	rm -f ${DOC}/gpol.spad.pamphlet ; \
	rm -f ${DOC}/gpol.spad.tex ; \
	rm -f ${DOC}/gpol.spad )

@
\subsection{grdef.spad \cite{1}}
<<grdef.spad (SPAD from IN)>>=
${MID}/grdef.spad: ${IN}/grdef.spad.pamphlet
	@ echo 0 making ${MID}/grdef.spad from ${IN}/grdef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/grdef.spad.pamphlet >grdef.spad )

@
<<GRDEF.o (O from NRLIB)>>=
${OUT}/GRDEF.o: ${MID}/GRDEF.NRLIB
	@ echo 0 making ${OUT}/GRDEF.o from ${MID}/GRDEF.NRLIB
	@ cp ${MID}/GRDEF.NRLIB/code.o ${OUT}/GRDEF.o

@
<<GRDEF.NRLIB (NRLIB from MID)>>=
${MID}/GRDEF.NRLIB: ${MID}/GRDEF.spad
	@ echo 0 making ${MID}/GRDEF.NRLIB from ${MID}/GRDEF.spad
	@ (cd ${MID} ; 	echo ')co GRDEF.spad' | ${INTERPSYS} )

@
<<GRDEF.spad (SPAD from IN)>>=
${MID}/GRDEF.spad: ${IN}/grdef.spad.pamphlet
	@ echo 0 making ${MID}/GRDEF.spad from ${IN}/grdef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GRDEF.NRLIB ; \
	${SPADBIN}/notangle -R"package GRDEF GraphicsDefaults" ${IN}/grdef.spad.pamphlet >GRDEF.spad )

@
<<grdef.spad.dvi (DOC from IN)>>=
${DOC}/grdef.spad.dvi: ${IN}/grdef.spad.pamphlet
	@ echo 0 making ${DOC}/grdef.spad.dvi from ${IN}/grdef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/grdef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} grdef.spad ; \
	rm -f ${DOC}/grdef.spad.pamphlet ; \
	rm -f ${DOC}/grdef.spad.tex ; \
	rm -f ${DOC}/grdef.spad )

@
\subsection{groebf.spad \cite{1}}
<<groebf.spad (SPAD from IN)>>=
${MID}/groebf.spad: ${IN}/groebf.spad.pamphlet
	@ echo 0 making ${MID}/groebf.spad from ${IN}/groebf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/groebf.spad.pamphlet >groebf.spad )

@
<<GBF.o (O from NRLIB)>>=
${OUT}/GBF.o: ${MID}/GBF.NRLIB
	@ echo 0 making ${OUT}/GBF.o from ${MID}/GBF.NRLIB
	@ cp ${MID}/GBF.NRLIB/code.o ${OUT}/GBF.o

@
<<GBF.NRLIB (NRLIB from MID)>>=
${MID}/GBF.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GBF.spad
	@ echo 0 making ${MID}/GBF.NRLIB from ${MID}/GBF.spad
	@ (cd ${MID} ; 	echo ')co GBF.spad' | ${INTERPSYS} )

@
<<GBF.spad (SPAD from IN)>>=
${MID}/GBF.spad: ${IN}/groebf.spad.pamphlet
	@ echo 0 making ${MID}/GBF.spad from ${IN}/groebf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GBF.NRLIB ; \
	${SPADBIN}/notangle -R"package GBF GroebnerFactorizationPackage" ${IN}/groebf.spad.pamphlet >GBF.spad )

@
<<groebf.spad.dvi (DOC from IN)>>=
${DOC}/groebf.spad.dvi: ${IN}/groebf.spad.pamphlet
	@ echo 0 making ${DOC}/groebf.spad.dvi from ${IN}/groebf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/groebf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} groebf.spad ; \
	rm -f ${DOC}/groebf.spad.pamphlet ; \
	rm -f ${DOC}/groebf.spad.tex ; \
	rm -f ${DOC}/groebf.spad )

@
\subsection{groebsol.spad \cite{1}}
<<groebsol.spad (SPAD from IN)>>=
${MID}/groebsol.spad: ${IN}/groebsol.spad.pamphlet
	@ echo 0 making ${MID}/groebsol.spad from ${IN}/groebsol.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/groebsol.spad.pamphlet >groebsol.spad )

@
<<GROEBSOL.o (O from NRLIB)>>=
${OUT}/GROEBSOL.o: ${MID}/GROEBSOL.NRLIB
	@ echo 0 making ${OUT}/GROEBSOL.o from ${MID}/GROEBSOL.NRLIB
	@ cp ${MID}/GROEBSOL.NRLIB/code.o ${OUT}/GROEBSOL.o

@
<<GROEBSOL.NRLIB (NRLIB from MID)>>=
${MID}/GROEBSOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GROEBSOL.spad
	@ echo 0 making ${MID}/GROEBSOL.NRLIB from ${MID}/GROEBSOL.spad
	@ (cd ${MID} ; 	echo ')co GROEBSOL.spad' | ${INTERPSYS} )

@
<<GROEBSOL.spad (SPAD from IN)>>=
${MID}/GROEBSOL.spad: ${IN}/groebsol.spad.pamphlet
	@ echo 0 making ${MID}/GROEBSOL.spad from ${IN}/groebsol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GROEBSOL.NRLIB ; \
	${SPADBIN}/notangle -R"package GROEBSOL GroebnerSolve" ${IN}/groebsol.spad.pamphlet >GROEBSOL.spad )

@
<<groebsol.spad.dvi (DOC from IN)>>=
${DOC}/groebsol.spad.dvi: ${IN}/groebsol.spad.pamphlet
	@ echo 0 making ${DOC}/groebsol.spad.dvi from ${IN}/groebsol.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/groebsol.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} groebsol.spad ; \
	rm -f ${DOC}/groebsol.spad.pamphlet ; \
	rm -f ${DOC}/groebsol.spad.tex ; \
	rm -f ${DOC}/groebsol.spad )

@
\subsection{gseries.spad \cite{1}}
<<gseries.spad (SPAD from IN)>>=
${MID}/gseries.spad: ${IN}/gseries.spad.pamphlet
	@ echo 0 making ${MID}/gseries.spad from ${IN}/gseries.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/gseries.spad.pamphlet >gseries.spad )

@
<<GSERIES.o (O from NRLIB)>>=
${OUT}/GSERIES.o: ${MID}/GSERIES.NRLIB
	@ echo 0 making ${OUT}/GSERIES.o from ${MID}/GSERIES.NRLIB
	@ cp ${MID}/GSERIES.NRLIB/code.o ${OUT}/GSERIES.o

@
<<GSERIES.NRLIB (NRLIB from MID)>>=
${MID}/GSERIES.NRLIB: ${MID}/GSERIES.spad
	@ echo 0 making ${MID}/GSERIES.NRLIB from ${MID}/GSERIES.spad
	@ (cd ${MID} ; 	echo ')co GSERIES.spad' | ${INTERPSYS} )

@
<<GSERIES.spad (SPAD from IN)>>=
${MID}/GSERIES.spad: ${IN}/gseries.spad.pamphlet
	@ echo 0 making ${MID}/GSERIES.spad from ${IN}/gseries.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GSERIES.NRLIB ; \
	${SPADBIN}/notangle -R"domain GSERIES GeneralUnivariatePowerSeries" ${IN}/gseries.spad.pamphlet >GSERIES.spad )

@
<<gseries.spad.dvi (DOC from IN)>>=
${DOC}/gseries.spad.dvi: ${IN}/gseries.spad.pamphlet
	@ echo 0 making ${DOC}/gseries.spad.dvi from ${IN}/gseries.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/gseries.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} gseries.spad ; \
	rm -f ${DOC}/gseries.spad.pamphlet ; \
	rm -f ${DOC}/gseries.spad.tex ; \
	rm -f ${DOC}/gseries.spad )

@
\subsection{herm.as \cite{1}}
<<herm.as (SPAD from IN)>>=
${MID}/herm.as: ${IN}/herm.as.pamphlet
	@ echo 0 making ${MID}/herm.as from ${IN}/herm.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/herm.as.pamphlet >herm.as )

@
<<herm.as.dvi (DOC from IN)>>=
${DOC}/herm.as.dvi: ${IN}/herm.as.pamphlet
	@ echo 0 making ${DOC}/herm.as.dvi from ${IN}/herm.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/herm.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} herm.as ; \
	rm -f ${DOC}/herm.as.pamphlet ; \
	rm -f ${DOC}/herm.as.tex ; \
	rm -f ${DOC}/herm.as )

@
\subsection{ideal.spad \cite{1}}
<<ideal.spad (SPAD from IN)>>=
${MID}/ideal.spad: ${IN}/ideal.spad.pamphlet
	@ echo 0 making ${MID}/ideal.spad from ${IN}/ideal.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ideal.spad.pamphlet >ideal.spad )

@
<<IDEAL.o (O from NRLIB)>>=
${OUT}/IDEAL.o: ${MID}/IDEAL.NRLIB
	@ echo 0 making ${OUT}/IDEAL.o from ${MID}/IDEAL.NRLIB
	@ cp ${MID}/IDEAL.NRLIB/code.o ${OUT}/IDEAL.o

@
<<IDEAL.NRLIB (NRLIB from MID)>>=
${MID}/IDEAL.NRLIB: ${MID}/IDEAL.spad
	@ echo 0 making ${MID}/IDEAL.NRLIB from ${MID}/IDEAL.spad
	@ (cd ${MID} ; 	echo ')co IDEAL.spad' | ${INTERPSYS} )

@
<<IDEAL.spad (SPAD from IN)>>=
${MID}/IDEAL.spad: ${IN}/ideal.spad.pamphlet
	@ echo 0 making ${MID}/IDEAL.spad from ${IN}/ideal.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDEAL.NRLIB ; \
	${SPADBIN}/notangle -R"domain IDEAL PolynomialIdeals" ${IN}/ideal.spad.pamphlet >IDEAL.spad )

@
<<ideal.spad.dvi (DOC from IN)>>=
${DOC}/ideal.spad.dvi: ${IN}/ideal.spad.pamphlet
	@ echo 0 making ${DOC}/ideal.spad.dvi from ${IN}/ideal.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ideal.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ideal.spad ; \
	rm -f ${DOC}/ideal.spad.pamphlet ; \
	rm -f ${DOC}/ideal.spad.tex ; \
	rm -f ${DOC}/ideal.spad )

@
\subsection{idecomp.spad \cite{1}}
<<idecomp.spad (SPAD from IN)>>=
${MID}/idecomp.spad: ${IN}/idecomp.spad.pamphlet
	@ echo 0 making ${MID}/idecomp.spad from ${IN}/idecomp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/idecomp.spad.pamphlet >idecomp.spad )

@
<<IDECOMP.o (O from NRLIB)>>=
${OUT}/IDECOMP.o: ${MID}/IDECOMP.NRLIB
	@ echo 0 making ${OUT}/IDECOMP.o from ${MID}/IDECOMP.NRLIB
	@ cp ${MID}/IDECOMP.NRLIB/code.o ${OUT}/IDECOMP.o

@
<<IDECOMP.NRLIB (NRLIB from MID)>>=
${MID}/IDECOMP.NRLIB: ${MID}/IDECOMP.spad
	@ echo 0 making ${MID}/IDECOMP.NRLIB from ${MID}/IDECOMP.spad
	@ (cd ${MID} ; 	echo ')co IDECOMP.spad' | ${INTERPSYS} )

@
<<IDECOMP.spad (SPAD from IN)>>=
${MID}/IDECOMP.spad: ${IN}/idecomp.spad.pamphlet
	@ echo 0 making ${MID}/IDECOMP.spad from ${IN}/idecomp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDECOMP.NRLIB ; \
	${SPADBIN}/notangle -R"package IDECOMP IdealDecompositionPackage" ${IN}/idecomp.spad.pamphlet >IDECOMP.spad )

@
<<idecomp.spad.dvi (DOC from IN)>>=
${DOC}/idecomp.spad.dvi: ${IN}/idecomp.spad.pamphlet
	@ echo 0 making ${DOC}/idecomp.spad.dvi from ${IN}/idecomp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/idecomp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} idecomp.spad ; \
	rm -f ${DOC}/idecomp.spad.pamphlet ; \
	rm -f ${DOC}/idecomp.spad.tex ; \
	rm -f ${DOC}/idecomp.spad )

@
\subsection{indexedp.spad \cite{1}}
<<indexedp.spad (SPAD from IN)>>=
${MID}/indexedp.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/indexedp.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/indexedp.spad.pamphlet >indexedp.spad )

@
<<IDPAG.o (O from NRLIB)>>=
${OUT}/IDPAG.o: ${MID}/IDPAG.NRLIB
	@ echo 0 making ${OUT}/IDPAG.o from ${MID}/IDPAG.NRLIB
	@ cp ${MID}/IDPAG.NRLIB/code.o ${OUT}/IDPAG.o

@
<<IDPAG.NRLIB (NRLIB from MID)>>=
${MID}/IDPAG.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IDPAG.spad
	@ echo 0 making ${MID}/IDPAG.NRLIB from ${MID}/IDPAG.spad
	@ (cd ${MID} ; 	echo ')co IDPAG.spad' | ${INTERPSYS} )

@
<<IDPAG.spad (SPAD from IN)>>=
${MID}/IDPAG.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/IDPAG.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDPAG.NRLIB ; \
	${SPADBIN}/notangle -R"domain IDPAG IndexedDirectProductAbelianGroup" ${IN}/indexedp.spad.pamphlet >IDPAG.spad )

@
<<IDPAM.o (O from NRLIB)>>=
${OUT}/IDPAM.o: ${MID}/IDPAM.NRLIB
	@ echo 0 making ${OUT}/IDPAM.o from ${MID}/IDPAM.NRLIB
	@ cp ${MID}/IDPAM.NRLIB/code.o ${OUT}/IDPAM.o

@
<<IDPAM.NRLIB (NRLIB from MID)>>=
${MID}/IDPAM.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IDPAM.spad
	@ echo 0 making ${MID}/IDPAM.NRLIB from ${MID}/IDPAM.spad
	@ (cd ${MID} ; 	echo ')co IDPAM.spad' | ${INTERPSYS} )

@
<<IDPAM.spad (SPAD from IN)>>=
${MID}/IDPAM.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/IDPAM.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDPAM.NRLIB ; \
	${SPADBIN}/notangle -R"domain IDPAM IndexedDirectProductAbelianMonoid" ${IN}/indexedp.spad.pamphlet >IDPAM.spad )

@
<<IDPC.o (O from NRLIB)>>=
${OUT}/IDPC.o: ${MID}/IDPC.NRLIB
	@ echo 0 making ${OUT}/IDPC.o from ${MID}/IDPC.NRLIB
	@ cp ${MID}/IDPC.NRLIB/code.o ${OUT}/IDPC.o

@
<<IDPC.NRLIB (NRLIB from MID)>>=
${MID}/IDPC.NRLIB: ${MID}/IDPC.spad
	@ echo 0 making ${MID}/IDPC.NRLIB from ${MID}/IDPC.spad
	@ (cd ${MID} ; 	echo ')co IDPC.spad' | ${INTERPSYS} )

@
<<IDPC.spad (SPAD from IN)>>=
${MID}/IDPC.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/IDPC.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDPC.NRLIB ; \
	${SPADBIN}/notangle -R"category IDPC IndexedDirectProductCategory" ${IN}/indexedp.spad.pamphlet >IDPC.spad )

@
<<IDPO.o (O from NRLIB)>>=
${OUT}/IDPO.o: ${MID}/IDPO.NRLIB
	@ echo 0 making ${OUT}/IDPO.o from ${MID}/IDPO.NRLIB
	@ cp ${MID}/IDPO.NRLIB/code.o ${OUT}/IDPO.o

@
<<IDPO.NRLIB (NRLIB from MID)>>=
${MID}/IDPO.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IDPO.spad
	@ echo 0 making ${MID}/IDPO.NRLIB from ${MID}/IDPO.spad
	@ (cd ${MID} ; 	echo ')co IDPO.spad' | ${INTERPSYS} )

@
<<IDPO.spad (SPAD from IN)>>=
${MID}/IDPO.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/IDPO.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDPO.NRLIB ; \
	${SPADBIN}/notangle -R"domain IDPO IndexedDirectProductObject" ${IN}/indexedp.spad.pamphlet >IDPO.spad )

@
<<IDPOAM.o (O from NRLIB)>>=
${OUT}/IDPOAM.o: ${MID}/IDPOAM.NRLIB
	@ echo 0 making ${OUT}/IDPOAM.o from ${MID}/IDPOAM.NRLIB
	@ cp ${MID}/IDPOAM.NRLIB/code.o ${OUT}/IDPOAM.o

@
<<IDPOAM.NRLIB (NRLIB from MID)>>=
${MID}/IDPOAM.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IDPOAM.spad
	@ echo 0 making ${MID}/IDPOAM.NRLIB from ${MID}/IDPOAM.spad
	@ (cd ${MID} ; 	echo ')co IDPOAM.spad' | ${INTERPSYS} )

@
<<IDPOAM.spad (SPAD from IN)>>=
${MID}/IDPOAM.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/IDPOAM.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDPOAM.NRLIB ; \
	${SPADBIN}/notangle -R"domain IDPOAM IndexedDirectProductOrderedAbelianMonoid" ${IN}/indexedp.spad.pamphlet >IDPOAM.spad )

@
<<IDPOAMS.o (O from NRLIB)>>=
${OUT}/IDPOAMS.o: ${MID}/IDPOAMS.NRLIB
	@ echo 0 making ${OUT}/IDPOAMS.o from ${MID}/IDPOAMS.NRLIB
	@ cp ${MID}/IDPOAMS.NRLIB/code.o ${OUT}/IDPOAMS.o

@
<<IDPOAMS.NRLIB (NRLIB from MID)>>=
${MID}/IDPOAMS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IDPOAMS.spad
	@ echo 0 making ${MID}/IDPOAMS.NRLIB from ${MID}/IDPOAMS.spad
	@ (cd ${MID} ; 	echo ')co IDPOAMS.spad' | ${INTERPSYS} )

@
<<IDPOAMS.spad (SPAD from IN)>>=
${MID}/IDPOAMS.spad: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${MID}/IDPOAMS.spad from ${IN}/indexedp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IDPOAMS.NRLIB ; \
	${SPADBIN}/notangle -R"domain IDPOAMS IndexedDirectProductOrderedAbelianMonoidSup" ${IN}/indexedp.spad.pamphlet >IDPOAMS.spad )

@
<<indexedp.spad.dvi (DOC from IN)>>=
${DOC}/indexedp.spad.dvi: ${IN}/indexedp.spad.pamphlet
	@ echo 0 making ${DOC}/indexedp.spad.dvi from ${IN}/indexedp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/indexedp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} indexedp.spad ; \
	rm -f ${DOC}/indexedp.spad.pamphlet ; \
	rm -f ${DOC}/indexedp.spad.tex ; \
	rm -f ${DOC}/indexedp.spad )

@
\subsection{infprod.spad \cite{1}}
<<infprod.spad (SPAD from IN)>>=
${MID}/infprod.spad: ${IN}/infprod.spad.pamphlet
	@ echo 0 making ${MID}/infprod.spad from ${IN}/infprod.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/infprod.spad.pamphlet >infprod.spad )

@
<<INFPROD0.o (O from NRLIB)>>=
${OUT}/INFPROD0.o: ${MID}/INFPROD0.NRLIB
	@ echo 0 making ${OUT}/INFPROD0.o from ${MID}/INFPROD0.NRLIB
	@ cp ${MID}/INFPROD0.NRLIB/code.o ${OUT}/INFPROD0.o

@
<<INFPROD0.NRLIB (NRLIB from MID)>>=
${MID}/INFPROD0.NRLIB: ${MID}/INFPROD0.spad
	@ echo 0 making ${MID}/INFPROD0.NRLIB from ${MID}/INFPROD0.spad
	@ (cd ${MID} ; 	echo ')co INFPROD0.spad' | ${INTERPSYS} )

@
<<INFPROD0.spad (SPAD from IN)>>=
${MID}/INFPROD0.spad: ${IN}/infprod.spad.pamphlet
	@ echo 0 making ${MID}/INFPROD0.spad from ${IN}/infprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INFPROD0.NRLIB ; \
	${SPADBIN}/notangle -R"package INFPROD0 InfiniteProductCharacteristicZero" ${IN}/infprod.spad.pamphlet >INFPROD0.spad )

@
<<INPRODFF.o (O from NRLIB)>>=
${OUT}/INPRODFF.o: ${MID}/INPRODFF.NRLIB
	@ echo 0 making ${OUT}/INPRODFF.o from ${MID}/INPRODFF.NRLIB
	@ cp ${MID}/INPRODFF.NRLIB/code.o ${OUT}/INPRODFF.o

@
<<INPRODFF.NRLIB (NRLIB from MID)>>=
${MID}/INPRODFF.NRLIB: ${MID}/INPRODFF.spad
	@ echo 0 making ${MID}/INPRODFF.NRLIB from ${MID}/INPRODFF.spad
	@ (cd ${MID} ; 	echo ')co INPRODFF.spad' | ${INTERPSYS} )

@
<<INPRODFF.spad (SPAD from IN)>>=
${MID}/INPRODFF.spad: ${IN}/infprod.spad.pamphlet
	@ echo 0 making ${MID}/INPRODFF.spad from ${IN}/infprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INPRODFF.NRLIB ; \
	${SPADBIN}/notangle -R"package INPRODFF InfiniteProductFiniteField" ${IN}/infprod.spad.pamphlet >INPRODFF.spad )

@
<<INPRODPF.o (O from NRLIB)>>=
${OUT}/INPRODPF.o: ${MID}/INPRODPF.NRLIB
	@ echo 0 making ${OUT}/INPRODPF.o from ${MID}/INPRODPF.NRLIB
	@ cp ${MID}/INPRODPF.NRLIB/code.o ${OUT}/INPRODPF.o

@
<<INPRODPF.NRLIB (NRLIB from MID)>>=
${MID}/INPRODPF.NRLIB: ${MID}/INPRODPF.spad
	@ echo 0 making ${MID}/INPRODPF.NRLIB from ${MID}/INPRODPF.spad
	@ (cd ${MID} ; 	echo ')co INPRODPF.spad' | ${INTERPSYS} )

@
<<INPRODPF.spad (SPAD from IN)>>=
${MID}/INPRODPF.spad: ${IN}/infprod.spad.pamphlet
	@ echo 0 making ${MID}/INPRODPF.spad from ${IN}/infprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INPRODPF.NRLIB ; \
	${SPADBIN}/notangle -R"package INPRODPF InfiniteProductPrimeField" ${IN}/infprod.spad.pamphlet >INPRODPF.spad )

@
<<STINPROD.o (O from NRLIB)>>=
${OUT}/STINPROD.o: ${MID}/STINPROD.NRLIB
	@ echo 0 making ${OUT}/STINPROD.o from ${MID}/STINPROD.NRLIB
	@ cp ${MID}/STINPROD.NRLIB/code.o ${OUT}/STINPROD.o

@
<<STINPROD.NRLIB (NRLIB from MID)>>=
${MID}/STINPROD.NRLIB: ${MID}/STINPROD.spad
	@ echo 0 making ${MID}/STINPROD.NRLIB from ${MID}/STINPROD.spad
	@ (cd ${MID} ; 	echo ')co STINPROD.spad' | ${INTERPSYS} )

@
<<STINPROD.spad (SPAD from IN)>>=
${MID}/STINPROD.spad: ${IN}/infprod.spad.pamphlet
	@ echo 0 making ${MID}/STINPROD.spad from ${IN}/infprod.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STINPROD.NRLIB ; \
	${SPADBIN}/notangle -R"package STINPROD StreamInfiniteProduct" ${IN}/infprod.spad.pamphlet >STINPROD.spad )

@
<<infprod.spad.dvi (DOC from IN)>>=
${DOC}/infprod.spad.dvi: ${IN}/infprod.spad.pamphlet
	@ echo 0 making ${DOC}/infprod.spad.dvi from ${IN}/infprod.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/infprod.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} infprod.spad ; \
	rm -f ${DOC}/infprod.spad.pamphlet ; \
	rm -f ${DOC}/infprod.spad.tex ; \
	rm -f ${DOC}/infprod.spad )

@
\subsection{intaf.spad \cite{1}}
<<intaf.spad (SPAD from IN)>>=
${MID}/intaf.spad: ${IN}/intaf.spad.pamphlet
	@ echo 0 making ${MID}/intaf.spad from ${IN}/intaf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intaf.spad.pamphlet >intaf.spad )

@
<<INTAF.o (O from NRLIB)>>=
${OUT}/INTAF.o: ${MID}/INTAF.NRLIB
	@ echo 0 making ${OUT}/INTAF.o from ${MID}/INTAF.NRLIB
	@ cp ${MID}/INTAF.NRLIB/code.o ${OUT}/INTAF.o

@
<<INTAF.NRLIB (NRLIB from MID)>>=
${MID}/INTAF.NRLIB: ${MID}/INTAF.spad
	@ echo 0 making ${MID}/INTAF.NRLIB from ${MID}/INTAF.spad
	@ (cd ${MID} ; 	echo ')co INTAF.spad' | ${INTERPSYS} )

@
<<INTAF.spad (SPAD from IN)>>=
${MID}/INTAF.spad: ${IN}/intaf.spad.pamphlet
	@ echo 0 making ${MID}/INTAF.spad from ${IN}/intaf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTAF.NRLIB ; \
	${SPADBIN}/notangle -R"package INTAF AlgebraicIntegration" ${IN}/intaf.spad.pamphlet >INTAF.spad )

@
<<INTG0.o (O from NRLIB)>>=
${OUT}/INTG0.o: ${MID}/INTG0.NRLIB
	@ echo 0 making ${OUT}/INTG0.o from ${MID}/INTG0.NRLIB
	@ cp ${MID}/INTG0.NRLIB/code.o ${OUT}/INTG0.o

@
<<INTG0.NRLIB (NRLIB from MID)>>=
${MID}/INTG0.NRLIB: ${MID}/INTG0.spad
	@ echo 0 making ${MID}/INTG0.NRLIB from ${MID}/INTG0.spad
	@ (cd ${MID} ; 	echo ')co INTG0.spad' | ${INTERPSYS} )

@
<<INTG0.spad (SPAD from IN)>>=
${MID}/INTG0.spad: ${IN}/intaf.spad.pamphlet
	@ echo 0 making ${MID}/INTG0.spad from ${IN}/intaf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTG0.NRLIB ; \
	${SPADBIN}/notangle -R"package INTG0 GenusZeroIntegration" ${IN}/intaf.spad.pamphlet >INTG0.spad )

@
<<INTPAF.o (O from NRLIB)>>=
${OUT}/INTPAF.o: ${MID}/INTPAF.NRLIB
	@ echo 0 making ${OUT}/INTPAF.o from ${MID}/INTPAF.NRLIB
	@ cp ${MID}/INTPAF.NRLIB/code.o ${OUT}/INTPAF.o

@
<<INTPAF.NRLIB (NRLIB from MID)>>=
${MID}/INTPAF.NRLIB: ${MID}/INTPAF.spad
	@ echo 0 making ${MID}/INTPAF.NRLIB from ${MID}/INTPAF.spad
	@ (cd ${MID} ; 	echo ')co INTPAF.spad' | ${INTERPSYS} )

@
<<INTPAF.spad (SPAD from IN)>>=
${MID}/INTPAF.spad: ${IN}/intaf.spad.pamphlet
	@ echo 0 making ${MID}/INTPAF.spad from ${IN}/intaf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTPAF.NRLIB ; \
	${SPADBIN}/notangle -R"package INTPAF PureAlgebraicIntegration" ${IN}/intaf.spad.pamphlet >INTPAF.spad )

@
<<intaf.spad.dvi (DOC from IN)>>=
${DOC}/intaf.spad.dvi: ${IN}/intaf.spad.pamphlet
	@ echo 0 making ${DOC}/intaf.spad.dvi from ${IN}/intaf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intaf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intaf.spad ; \
	rm -f ${DOC}/intaf.spad.pamphlet ; \
	rm -f ${DOC}/intaf.spad.tex ; \
	rm -f ${DOC}/intaf.spad )

@
\subsection{intalg.spad \cite{1}}
<<intalg.spad (SPAD from IN)>>=
${MID}/intalg.spad: ${IN}/intalg.spad.pamphlet
	@ echo 0 making ${MID}/intalg.spad from ${IN}/intalg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intalg.spad.pamphlet >intalg.spad )

@
<<DBLRESP.o (O from NRLIB)>>=
${OUT}/DBLRESP.o: ${MID}/DBLRESP.NRLIB
	@ echo 0 making ${OUT}/DBLRESP.o from ${MID}/DBLRESP.NRLIB
	@ cp ${MID}/DBLRESP.NRLIB/code.o ${OUT}/DBLRESP.o

@
<<DBLRESP.NRLIB (NRLIB from MID)>>=
${MID}/DBLRESP.NRLIB: ${MID}/DBLRESP.spad
	@ echo 0 making ${MID}/DBLRESP.NRLIB from ${MID}/DBLRESP.spad
	@ (cd ${MID} ; 	echo ')co DBLRESP.spad' | ${INTERPSYS} )

@
<<DBLRESP.spad (SPAD from IN)>>=
${MID}/DBLRESP.spad: ${IN}/intalg.spad.pamphlet
	@ echo 0 making ${MID}/DBLRESP.spad from ${IN}/intalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DBLRESP.NRLIB ; \
	${SPADBIN}/notangle -R"package DBLRESP DoubleResultantPackage" ${IN}/intalg.spad.pamphlet >DBLRESP.spad )

@
<<INTALG.o (O from NRLIB)>>=
${OUT}/INTALG.o: ${MID}/INTALG.NRLIB
	@ echo 0 making ${OUT}/INTALG.o from ${MID}/INTALG.NRLIB
	@ cp ${MID}/INTALG.NRLIB/code.o ${OUT}/INTALG.o

@
<<INTALG.NRLIB (NRLIB from MID)>>=
${MID}/INTALG.NRLIB: ${MID}/INTALG.spad
	@ echo 0 making ${MID}/INTALG.NRLIB from ${MID}/INTALG.spad
	@ (cd ${MID} ; 	echo ')co INTALG.spad' | ${INTERPSYS} )

@
<<INTALG.spad (SPAD from IN)>>=
${MID}/INTALG.spad: ${IN}/intalg.spad.pamphlet
	@ echo 0 making ${MID}/INTALG.spad from ${IN}/intalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTALG.NRLIB ; \
	${SPADBIN}/notangle -R"package INTALG AlgebraicIntegrate" ${IN}/intalg.spad.pamphlet >INTALG.spad )

@
<<INTHERAL.o (O from NRLIB)>>=
${OUT}/INTHERAL.o: ${MID}/INTHERAL.NRLIB
	@ echo 0 making ${OUT}/INTHERAL.o from ${MID}/INTHERAL.NRLIB
	@ cp ${MID}/INTHERAL.NRLIB/code.o ${OUT}/INTHERAL.o

@
<<INTHERAL.NRLIB (NRLIB from MID)>>=
${MID}/INTHERAL.NRLIB: ${MID}/INTHERAL.spad
	@ echo 0 making ${MID}/INTHERAL.NRLIB from ${MID}/INTHERAL.spad
	@ (cd ${MID} ; 	echo ')co INTHERAL.spad' | ${INTERPSYS} )

@
<<INTHERAL.spad (SPAD from IN)>>=
${MID}/INTHERAL.spad: ${IN}/intalg.spad.pamphlet
	@ echo 0 making ${MID}/INTHERAL.spad from ${IN}/intalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTHERAL.NRLIB ; \
	${SPADBIN}/notangle -R"package INTHERAL AlgebraicHermiteIntegration" ${IN}/intalg.spad.pamphlet >INTHERAL.spad )

@
<<intalg.spad.dvi (DOC from IN)>>=
${DOC}/intalg.spad.dvi: ${IN}/intalg.spad.pamphlet
	@ echo 0 making ${DOC}/intalg.spad.dvi from ${IN}/intalg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intalg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intalg.spad ; \
	rm -f ${DOC}/intalg.spad.pamphlet ; \
	rm -f ${DOC}/intalg.spad.tex ; \
	rm -f ${DOC}/intalg.spad )

@
\subsection{intaux.spad \cite{1}}
<<intaux.spad (SPAD from IN)>>=
${MID}/intaux.spad: ${IN}/intaux.spad.pamphlet
	@ echo 0 making ${MID}/intaux.spad from ${IN}/intaux.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intaux.spad.pamphlet >intaux.spad )

@
<<IR.o (O from NRLIB)>>=
${OUT}/IR.o: ${MID}/IR.NRLIB
	@ echo 0 making ${OUT}/IR.o from ${MID}/IR.NRLIB
	@ cp ${MID}/IR.NRLIB/code.o ${OUT}/IR.o

@
<<IR.NRLIB (NRLIB from MID)>>=
${MID}/IR.NRLIB: ${MID}/IR.spad
	@ echo 0 making ${MID}/IR.NRLIB from ${MID}/IR.spad
	@ (cd ${MID} ; 	echo ')co IR.spad' | ${INTERPSYS} )

@
<<IR.spad (SPAD from IN)>>=
${MID}/IR.spad: ${IN}/intaux.spad.pamphlet
	@ echo 0 making ${MID}/IR.spad from ${IN}/intaux.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IR.NRLIB ; \
	${SPADBIN}/notangle -R"domain IR IntegrationResult" ${IN}/intaux.spad.pamphlet >IR.spad )

@
<<IR2.o (O from NRLIB)>>=
${OUT}/IR2.o: ${MID}/IR2.NRLIB
	@ echo 0 making ${OUT}/IR2.o from ${MID}/IR2.NRLIB
	@ cp ${MID}/IR2.NRLIB/code.o ${OUT}/IR2.o

@
<<IR2.NRLIB (NRLIB from MID)>>=
${MID}/IR2.NRLIB: ${MID}/IR2.spad
	@ echo 0 making ${MID}/IR2.NRLIB from ${MID}/IR2.spad
	@ (cd ${MID} ; 	echo ')co IR2.spad' | ${INTERPSYS} )

@
<<IR2.spad (SPAD from IN)>>=
${MID}/IR2.spad: ${IN}/intaux.spad.pamphlet
	@ echo 0 making ${MID}/IR2.spad from ${IN}/intaux.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IR2.NRLIB ; \
	${SPADBIN}/notangle -R"package IR2 IntegrationResultFunctions2" ${IN}/intaux.spad.pamphlet >IR2.spad )

@
<<intaux.spad.dvi (DOC from IN)>>=
${DOC}/intaux.spad.dvi: ${IN}/intaux.spad.pamphlet
	@ echo 0 making ${DOC}/intaux.spad.dvi from ${IN}/intaux.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intaux.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intaux.spad ; \
	rm -f ${DOC}/intaux.spad.pamphlet ; \
	rm -f ${DOC}/intaux.spad.tex ; \
	rm -f ${DOC}/intaux.spad )

@
\subsection{intclos.spad \cite{1}}
<<intclos.spad (SPAD from IN)>>=
${MID}/intclos.spad: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${MID}/intclos.spad from ${IN}/intclos.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intclos.spad.pamphlet >intclos.spad )

@
<<IBATOOL.o (O from NRLIB)>>=
${OUT}/IBATOOL.o: ${MID}/IBATOOL.NRLIB
	@ echo 0 making ${OUT}/IBATOOL.o from ${MID}/IBATOOL.NRLIB
	@ cp ${MID}/IBATOOL.NRLIB/code.o ${OUT}/IBATOOL.o

@
<<IBATOOL.NRLIB (NRLIB from MID)>>=
${MID}/IBATOOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IBATOOL.spad
	@ echo 0 making ${MID}/IBATOOL.NRLIB from ${MID}/IBATOOL.spad
	@ (cd ${MID} ; 	echo ')co IBATOOL.spad' | ${INTERPSYS} )

@
<<IBATOOL.spad (SPAD from IN)>>=
${MID}/IBATOOL.spad: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${MID}/IBATOOL.spad from ${IN}/intclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IBATOOL.NRLIB ; \
	${SPADBIN}/notangle -R"package IBATOOL IntegralBasisTools" ${IN}/intclos.spad.pamphlet >IBATOOL.spad )

@
<<FFINTBAS.o (O from NRLIB)>>=
${OUT}/FFINTBAS.o: ${MID}/FFINTBAS.NRLIB
	@ echo 0 making ${OUT}/FFINTBAS.o from ${MID}/FFINTBAS.NRLIB
	@ cp ${MID}/FFINTBAS.NRLIB/code.o ${OUT}/FFINTBAS.o

@
<<FFINTBAS.NRLIB (NRLIB from MID)>>=
${MID}/FFINTBAS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FFINTBAS.spad
	@ echo 0 making ${MID}/FFINTBAS.NRLIB from ${MID}/FFINTBAS.spad
	@ (cd ${MID} ; 	echo ')co FFINTBAS.spad' | ${INTERPSYS} )

@
<<FFINTBAS.spad (SPAD from IN)>>=
${MID}/FFINTBAS.spad: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${MID}/FFINTBAS.spad from ${IN}/intclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FFINTBAS.NRLIB ; \
	${SPADBIN}/notangle -R"package FFINTBAS FunctionFieldIntegralBasis" ${IN}/intclos.spad.pamphlet >FFINTBAS.spad )

@
<<NFINTBAS.o (O from NRLIB)>>=
${OUT}/NFINTBAS.o: ${MID}/NFINTBAS.NRLIB
	@ echo 0 making ${OUT}/NFINTBAS.o from ${MID}/NFINTBAS.NRLIB
	@ cp ${MID}/NFINTBAS.NRLIB/code.o ${OUT}/NFINTBAS.o

@
<<NFINTBAS.NRLIB (NRLIB from MID)>>=
${MID}/NFINTBAS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/NFINTBAS.spad
	@ echo 0 making ${MID}/NFINTBAS.NRLIB from ${MID}/NFINTBAS.spad
	@ (cd ${MID} ; 	echo ')co NFINTBAS.spad' | ${INTERPSYS} )

@
<<NFINTBAS.spad (SPAD from IN)>>=
${MID}/NFINTBAS.spad: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${MID}/NFINTBAS.spad from ${IN}/intclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NFINTBAS.NRLIB ; \
	${SPADBIN}/notangle -R"package NFINTBAS NumberFieldIntegralBasis" ${IN}/intclos.spad.pamphlet >NFINTBAS.spad )

@
<<TRIMAT.o (O from NRLIB)>>=
${OUT}/TRIMAT.o: ${MID}/TRIMAT.NRLIB
	@ echo 0 making ${OUT}/TRIMAT.o from ${MID}/TRIMAT.NRLIB
	@ cp ${MID}/TRIMAT.NRLIB/code.o ${OUT}/TRIMAT.o

@
<<TRIMAT.NRLIB (NRLIB from MID)>>=
${MID}/TRIMAT.NRLIB: ${MID}/TRIMAT.spad
	@ echo 0 making ${MID}/TRIMAT.NRLIB from ${MID}/TRIMAT.spad
	@ (cd ${MID} ; 	echo ')co TRIMAT.spad' | ${INTERPSYS} )

@
<<TRIMAT.spad (SPAD from IN)>>=
${MID}/TRIMAT.spad: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${MID}/TRIMAT.spad from ${IN}/intclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TRIMAT.NRLIB ; \
	${SPADBIN}/notangle -R"package TRIMAT TriangularMatrixOperations" ${IN}/intclos.spad.pamphlet >TRIMAT.spad )

@
<<WFFINTBS.o (O from NRLIB)>>=
${OUT}/WFFINTBS.o: ${MID}/WFFINTBS.NRLIB
	@ echo 0 making ${OUT}/WFFINTBS.o from ${MID}/WFFINTBS.NRLIB
	@ cp ${MID}/WFFINTBS.NRLIB/code.o ${OUT}/WFFINTBS.o

@
<<WFFINTBS.NRLIB (NRLIB from MID)>>=
${MID}/WFFINTBS.NRLIB: ${MID}/WFFINTBS.spad
	@ echo 0 making ${MID}/WFFINTBS.NRLIB from ${MID}/WFFINTBS.spad
	@ (cd ${MID} ; 	echo ')co WFFINTBS.spad' | ${INTERPSYS} )

@
<<WFFINTBS.spad (SPAD from IN)>>=
${MID}/WFFINTBS.spad: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${MID}/WFFINTBS.spad from ${IN}/intclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf WFFINTBS.NRLIB ; \
	${SPADBIN}/notangle -R"package WFFINTBS WildFunctionFieldIntegralBasis" ${IN}/intclos.spad.pamphlet >WFFINTBS.spad )

@
<<intclos.spad.dvi (DOC from IN)>>=
${DOC}/intclos.spad.dvi: ${IN}/intclos.spad.pamphlet
	@ echo 0 making ${DOC}/intclos.spad.dvi from ${IN}/intclos.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intclos.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intclos.spad ; \
	rm -f ${DOC}/intclos.spad.pamphlet ; \
	rm -f ${DOC}/intclos.spad.tex ; \
	rm -f ${DOC}/intclos.spad )

@
\subsection{intef.spad \cite{1}}
<<intef.spad (SPAD from IN)>>=
${MID}/intef.spad: ${IN}/intef.spad.pamphlet
	@ echo 0 making ${MID}/intef.spad from ${IN}/intef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intef.spad.pamphlet >intef.spad )

@
<<INTEF.o (O from NRLIB)>>=
${OUT}/INTEF.o: ${MID}/INTEF.NRLIB
	@ echo 0 making ${OUT}/INTEF.o from ${MID}/INTEF.NRLIB
	@ cp ${MID}/INTEF.NRLIB/code.o ${OUT}/INTEF.o

@
<<INTEF.NRLIB (NRLIB from MID)>>=
${MID}/INTEF.NRLIB: ${MID}/INTEF.spad
	@ echo 0 making ${MID}/INTEF.NRLIB from ${MID}/INTEF.spad
	@ (cd ${MID} ; 	echo ')co INTEF.spad' | ${INTERPSYS} )

@
<<INTEF.spad (SPAD from IN)>>=
${MID}/INTEF.spad: ${IN}/intef.spad.pamphlet
	@ echo 0 making ${MID}/INTEF.spad from ${IN}/intef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTEF.NRLIB ; \
	${SPADBIN}/notangle -R"package INTEF ElementaryIntegration" ${IN}/intef.spad.pamphlet >INTEF.spad )

@
<<intef.spad.dvi (DOC from IN)>>=
${DOC}/intef.spad.dvi: ${IN}/intef.spad.pamphlet
	@ echo 0 making ${DOC}/intef.spad.dvi from ${IN}/intef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intef.spad ; \
	rm -f ${DOC}/intef.spad.pamphlet ; \
	rm -f ${DOC}/intef.spad.tex ; \
	rm -f ${DOC}/intef.spad )

@
\subsection{integer.spad \cite{1}}
<<integer.spad (SPAD from IN)>>=
${MID}/integer.spad: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/integer.spad from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/integer.spad.pamphlet >integer.spad )

@
<<INT.o (O from NRLIB)>>=
${OUT}/INT.o: ${MID}/INT.NRLIB
	@ echo 0 making ${OUT}/INT.o from ${MID}/INT.NRLIB
	@ cp ${MID}/INT.NRLIB/code.o ${OUT}/INT.o

@
<<INT.NRLIB (NRLIB from MID)>>=
${MID}/INT.NRLIB: ${MID}/INT.spad
	@ echo 0 making ${MID}/INT.NRLIB from ${MID}/INT.spad
	@ (cd ${MID} ; 	echo ')co INT.spad' | ${INTERPSYS} )

@
<<INT.spad (SPAD from IN)>>=
${MID}/INT.spad: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/INT.spad from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INT.NRLIB ; \
	${SPADBIN}/notangle -R"domain INT Integer" ${IN}/integer.spad.pamphlet >INT.spad )

@
<<INT.o (BOOTSTRAP from MID)>>=
${MID}/INT.o: ${MID}/INT.lsp
	@ echo 0 making ${MID}/INT.o from ${MID}/INT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "INT.lsp" :output-file "INT.o"))' | ${DEPSYS} )
	@ cp ${MID}/INT.o ${OUT}/INT.o

@
<<INT.lsp (LISP from IN)>>=
${MID}/INT.lsp: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/INT.lsp from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INT.NRLIB ; \
	rm -rf ${OUT}/INT.o ; \
	${SPADBIN}/notangle -R"INT.lsp BOOTSTRAP" ${IN}/integer.spad.pamphlet >INT.lsp )

@
<<INTSLPE.o (O from NRLIB)>>=
${OUT}/INTSLPE.o: ${MID}/INTSLPE.NRLIB
	@ echo 0 making ${OUT}/INTSLPE.o from ${MID}/INTSLPE.NRLIB
	@ cp ${MID}/INTSLPE.NRLIB/code.o ${OUT}/INTSLPE.o

@
<<INTSLPE.NRLIB (NRLIB from MID)>>=
${MID}/INTSLPE.NRLIB: ${MID}/INTSLPE.spad
	@ echo 0 making ${MID}/INTSLPE.NRLIB from ${MID}/INTSLPE.spad
	@ (cd ${MID} ; 	echo ')co INTSLPE.spad' | ${INTERPSYS} )

@
<<INTSLPE.spad (SPAD from IN)>>=
${MID}/INTSLPE.spad: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/INTSLPE.spad from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTSLPE.NRLIB ; \
	${SPADBIN}/notangle -R"package INTSLPE IntegerSolveLinearPolynomialEquation" ${IN}/integer.spad.pamphlet >INTSLPE.spad )

@
<<NNI.o (O from NRLIB)>>=
${OUT}/NNI.o: ${MID}/NNI.NRLIB
	@ echo 0 making ${OUT}/NNI.o from ${MID}/NNI.NRLIB
	@ cp ${MID}/NNI.NRLIB/code.o ${OUT}/NNI.o

@
<<NNI.NRLIB (NRLIB from MID)>>=
${MID}/NNI.NRLIB: ${OUT}/TYPE.o ${MID}/NNI.spad
	@ echo 0 making ${MID}/NNI.NRLIB from ${MID}/NNI.spad
	@ (cd ${MID} ; 	echo ')co NNI.spad' | ${INTERPSYS} )

@
<<NNI.spad (SPAD from IN)>>=
${MID}/NNI.spad: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/NNI.spad from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NNI.NRLIB ; \
	${SPADBIN}/notangle -R"domain NNI NonNegativeInteger" ${IN}/integer.spad.pamphlet >NNI.spad )

@
<<NNI.o (BOOTSTRAP from MID)>>=
${MID}/NNI.o: ${MID}/NNI.lsp
	@ echo 0 making ${MID}/NNI.o from ${MID}/NNI.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "NNI.lsp" :output-file "NNI.o"))' | ${DEPSYS} )
	@ cp ${MID}/NNI.o ${OUT}/NNI.o

@
<<NNI.lsp (LISP from IN)>>=
${MID}/NNI.lsp: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/NNI.lsp from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NNI.NRLIB ; \
	rm -rf ${OUT}/NNI.o ; \
	${SPADBIN}/notangle -R"NNI.lsp BOOTSTRAP" ${IN}/integer.spad.pamphlet >NNI.lsp )

@
<<PI.o (O from NRLIB)>>=
${OUT}/PI.o: ${MID}/PI.NRLIB
	@ echo 0 making ${OUT}/PI.o from ${MID}/PI.NRLIB
	@ cp ${MID}/PI.NRLIB/code.o ${OUT}/PI.o

@
<<PI.NRLIB (NRLIB from MID)>>=
${MID}/PI.NRLIB: ${MID}/PI.spad
	@ echo 0 making ${MID}/PI.NRLIB from ${MID}/PI.spad
	@ (cd ${MID} ; 	echo ')co PI.spad' | ${INTERPSYS} )

@
<<PI.spad (SPAD from IN)>>=
${MID}/PI.spad: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/PI.spad from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PI.NRLIB ; \
	${SPADBIN}/notangle -R"domain PI PositiveInteger" ${IN}/integer.spad.pamphlet >PI.spad )

@
<<PI.o (BOOTSTRAP from MID)>>=
${MID}/PI.o: ${MID}/PI.lsp
	@ echo 0 making ${MID}/PI.o from ${MID}/PI.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "PI.lsp" :output-file "PI.o"))' | ${DEPSYS} )
	@ cp ${MID}/PI.o ${OUT}/PI.o

@
<<PI.lsp (LISP from IN)>>=
${MID}/PI.lsp: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/PI.lsp from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PI.NRLIB ; \
	rm -rf ${OUT}/PI.o ; \
	${SPADBIN}/notangle -R"PI.lsp BOOTSTRAP" ${IN}/integer.spad.pamphlet >PI.lsp )

@
<<ROMAN.o (O from NRLIB)>>=
${OUT}/ROMAN.o: ${MID}/ROMAN.NRLIB
	@ echo 0 making ${OUT}/ROMAN.o from ${MID}/ROMAN.NRLIB
	@ cp ${MID}/ROMAN.NRLIB/code.o ${OUT}/ROMAN.o

@
<<ROMAN.NRLIB (NRLIB from MID)>>=
${MID}/ROMAN.NRLIB: ${MID}/ROMAN.spad
	@ echo 0 making ${MID}/ROMAN.NRLIB from ${MID}/ROMAN.spad
	@ (cd ${MID} ; 	echo ')co ROMAN.spad' | ${INTERPSYS} )

@
<<ROMAN.spad (SPAD from IN)>>=
${MID}/ROMAN.spad: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${MID}/ROMAN.spad from ${IN}/integer.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ROMAN.NRLIB ; \
	${SPADBIN}/notangle -R"domain ROMAN RomanNumeral" ${IN}/integer.spad.pamphlet >ROMAN.spad )

@
<<integer.spad.dvi (DOC from IN)>>=
${DOC}/integer.spad.dvi: ${IN}/integer.spad.pamphlet
	@ echo 0 making ${DOC}/integer.spad.dvi from ${IN}/integer.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/integer.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} integer.spad ; \
	rm -f ${DOC}/integer.spad.pamphlet ; \
	rm -f ${DOC}/integer.spad.tex ; \
	rm -f ${DOC}/integer.spad )

@
\subsection{integrat.spad \cite{1}}
<<integrat.spad (SPAD from IN)>>=
${MID}/integrat.spad: ${IN}/integrat.spad.pamphlet
	@ echo 0 making ${MID}/integrat.spad from ${IN}/integrat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/integrat.spad.pamphlet >integrat.spad )

@
<<FSCINT.o (O from NRLIB)>>=
${OUT}/FSCINT.o: ${MID}/FSCINT.NRLIB
	@ echo 0 making ${OUT}/FSCINT.o from ${MID}/FSCINT.NRLIB
	@ cp ${MID}/FSCINT.NRLIB/code.o ${OUT}/FSCINT.o

@
<<FSCINT.NRLIB (NRLIB from MID)>>=
${MID}/FSCINT.NRLIB: ${MID}/FSCINT.spad
	@ echo 0 making ${MID}/FSCINT.NRLIB from ${MID}/FSCINT.spad
	@ (cd ${MID} ; 	echo ')co FSCINT.spad' | ${INTERPSYS} )

@
<<FSCINT.spad (SPAD from IN)>>=
${MID}/FSCINT.spad: ${IN}/integrat.spad.pamphlet
	@ echo 0 making ${MID}/FSCINT.spad from ${IN}/integrat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSCINT.NRLIB ; \
	${SPADBIN}/notangle -R"package FSCINT FunctionSpaceComplexIntegration" ${IN}/integrat.spad.pamphlet >FSCINT.spad )

@
<<FSINT.o (O from NRLIB)>>=
${OUT}/FSINT.o: ${MID}/FSINT.NRLIB
	@ echo 0 making ${OUT}/FSINT.o from ${MID}/FSINT.NRLIB
	@ cp ${MID}/FSINT.NRLIB/code.o ${OUT}/FSINT.o

@
<<FSINT.NRLIB (NRLIB from MID)>>=
${MID}/FSINT.NRLIB: ${MID}/FSINT.spad
	@ echo 0 making ${MID}/FSINT.NRLIB from ${MID}/FSINT.spad
	@ (cd ${MID} ; 	echo ')co FSINT.spad' | ${INTERPSYS} )

@
<<FSINT.spad (SPAD from IN)>>=
${MID}/FSINT.spad: ${IN}/integrat.spad.pamphlet
	@ echo 0 making ${MID}/FSINT.spad from ${IN}/integrat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSINT.NRLIB ; \
	${SPADBIN}/notangle -R"package FSINT FunctionSpaceIntegration" ${IN}/integrat.spad.pamphlet >FSINT.spad )

@
<<integrat.spad.dvi (DOC from IN)>>=
${DOC}/integrat.spad.dvi: ${IN}/integrat.spad.pamphlet
	@ echo 0 making ${DOC}/integrat.spad.dvi from ${IN}/integrat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/integrat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} integrat.spad ; \
	rm -f ${DOC}/integrat.spad.pamphlet ; \
	rm -f ${DOC}/integrat.spad.tex ; \
	rm -f ${DOC}/integrat.spad )

@
\subsection{INTERP.EXPOSED \cite{1}}
<<INTERP.EXPOSED (SPAD from IN)>>=
${MID}/INTERP.EXPOSED: ${IN}/INTERP.EXPOSED.pamphlet
	@ echo 0 making ${MID}/INTERP.EXPOSED from ${IN}/INTERP.EXPOSED.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/INTERP.EXPOSED.pamphlet >INTERP.EXPOSED )

@
<<INTERP.EXPOSED.dvi (DOC from IN)>>=
${DOC}/INTERP.EXPOSED.dvi: ${IN}/INTERP.EXPOSED.pamphlet
	@ echo 0 making ${DOC}/INTERP.EXPOSED.dvi from ${IN}/INTERP.EXPOSED.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/INTERP.EXPOSED.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} INTERP.EXPOSED ; \
	rm -f ${DOC}/INTERP.EXPOSED.pamphlet ; \
	rm -f ${DOC}/INTERP.EXPOSED.tex ; \
	rm -f ${DOC}/INTERP.EXPOSED )

@
\subsection{interval.as \cite{1}}
<<interval.as (SPAD from IN)>>=
${MID}/interval.as: ${IN}/interval.as.pamphlet
	@ echo 0 making ${MID}/interval.as from ${IN}/interval.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/interval.as.pamphlet >interval.as )

@
<<interval.as.dvi (DOC from IN)>>=
${DOC}/interval.as.dvi: ${IN}/interval.as.pamphlet
	@ echo 0 making ${DOC}/interval.as.dvi from ${IN}/interval.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/interval.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} interval.as ; \
	rm -f ${DOC}/interval.as.pamphlet ; \
	rm -f ${DOC}/interval.as.tex ; \
	rm -f ${DOC}/interval.as )

@
\subsection{interval.spad \cite{1}}
<<interval.spad (SPAD from IN)>>=
${MID}/interval.spad: ${IN}/interval.spad.pamphlet
	@ echo 0 making ${MID}/interval.spad from ${IN}/interval.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/interval.spad.pamphlet >interval.spad )

@
<<INTCAT.o (O from NRLIB)>>=
${OUT}/INTCAT.o: ${MID}/INTCAT.NRLIB
	@ echo 0 making ${OUT}/INTCAT.o from ${MID}/INTCAT.NRLIB
	@ cp ${MID}/INTCAT.NRLIB/code.o ${OUT}/INTCAT.o

@
<<INTCAT.NRLIB (NRLIB from MID)>>=
${MID}/INTCAT.NRLIB: ${MID}/INTCAT.spad
	@ echo 0 making ${MID}/INTCAT.NRLIB from ${MID}/INTCAT.spad
	@ (cd ${MID} ; 	echo ')co INTCAT.spad' | ${INTERPSYS} )

@
<<INTCAT.spad (SPAD from IN)>>=
${MID}/INTCAT.spad: ${IN}/interval.spad.pamphlet
	@ echo 0 making ${MID}/INTCAT.spad from ${IN}/interval.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category INTCAT IntervalCategory" ${IN}/interval.spad.pamphlet >INTCAT.spad )

@
<<INTRVL.o (O from NRLIB)>>=
${OUT}/INTRVL.o: ${MID}/INTRVL.NRLIB
	@ echo 0 making ${OUT}/INTRVL.o from ${MID}/INTRVL.NRLIB
	@ cp ${MID}/INTRVL.NRLIB/code.o ${OUT}/INTRVL.o

@
<<INTRVL.NRLIB (NRLIB from MID)>>=
${MID}/INTRVL.NRLIB: ${MID}/INTRVL.spad
	@ echo 0 making ${MID}/INTRVL.NRLIB from ${MID}/INTRVL.spad
	@ (cd ${MID} ; 	echo ')co INTRVL.spad' | ${INTERPSYS} )

@
<<INTRVL.spad (SPAD from IN)>>=
${MID}/INTRVL.spad: ${IN}/interval.spad.pamphlet
	@ echo 0 making ${MID}/INTRVL.spad from ${IN}/interval.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTRVL.NRLIB ; \
	${SPADBIN}/notangle -R"domain INTRVL Interval" ${IN}/interval.spad.pamphlet >INTRVL.spad )

@
<<interval.spad.dvi (DOC from IN)>>=
${DOC}/interval.spad.dvi: ${IN}/interval.spad.pamphlet
	@ echo 0 making ${DOC}/interval.spad.dvi from ${IN}/interval.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/interval.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} interval.spad ; \
	rm -f ${DOC}/interval.spad.pamphlet ; \
	rm -f ${DOC}/interval.spad.tex ; \
	rm -f ${DOC}/interval.spad )

@
\subsection{intfact.spad \cite{1}}
<<intfact.spad (SPAD from IN)>>=
${MID}/intfact.spad: ${IN}/intfact.spad.pamphlet
	@ echo 0 making ${MID}/intfact.spad from ${IN}/intfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intfact.spad.pamphlet >intfact.spad )

@
<<INTFACT.o (O from NRLIB)>>=
${OUT}/INTFACT.o: ${MID}/INTFACT.NRLIB
	@ echo 0 making ${OUT}/INTFACT.o from ${MID}/INTFACT.NRLIB
	@ cp ${MID}/INTFACT.NRLIB/code.o ${OUT}/INTFACT.o

@
<<INTFACT.NRLIB (NRLIB from MID)>>=
${MID}/INTFACT.NRLIB: ${MID}/INTFACT.spad
	@ echo 0 making ${MID}/INTFACT.NRLIB from ${MID}/INTFACT.spad
	@ (cd ${MID} ; 	echo ')co INTFACT.spad' | ${INTERPSYS} )

@
<<INTFACT.spad (SPAD from IN)>>=
${MID}/INTFACT.spad: ${IN}/intfact.spad.pamphlet
	@ echo 0 making ${MID}/INTFACT.spad from ${IN}/intfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package INTFACT IntegerFactorizationPackage" ${IN}/intfact.spad.pamphlet >INTFACT.spad )

@
<<IROOT.o (O from NRLIB)>>=
${OUT}/IROOT.o: ${MID}/IROOT.NRLIB
	@ echo 0 making ${OUT}/IROOT.o from ${MID}/IROOT.NRLIB
	@ cp ${MID}/IROOT.NRLIB/code.o ${OUT}/IROOT.o

@
<<IROOT.NRLIB (NRLIB from MID)>>=
${MID}/IROOT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IROOT.spad
	@ echo 0 making ${MID}/IROOT.NRLIB from ${MID}/IROOT.spad
	@ (cd ${MID} ; 	echo ')co IROOT.spad' | ${INTERPSYS} )

@
<<IROOT.spad (SPAD from IN)>>=
${MID}/IROOT.spad: ${IN}/intfact.spad.pamphlet
	@ echo 0 making ${MID}/IROOT.spad from ${IN}/intfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IROOT.NRLIB ; \
	${SPADBIN}/notangle -R"package IROOT IntegerRoots" ${IN}/intfact.spad.pamphlet >IROOT.spad )

@
<<PRIMES.o (O from NRLIB)>>=
${OUT}/PRIMES.o: ${MID}/PRIMES.NRLIB
	@ echo 0 making ${OUT}/PRIMES.o from ${MID}/PRIMES.NRLIB
	@ cp ${MID}/PRIMES.NRLIB/code.o ${OUT}/PRIMES.o

@
<<PRIMES.NRLIB (NRLIB from MID)>>=
${MID}/PRIMES.NRLIB: ${MID}/PRIMES.spad
	@ echo 0 making ${MID}/PRIMES.NRLIB from ${MID}/PRIMES.spad
	@ (cd ${MID} ; 	echo ')co PRIMES.spad' | ${INTERPSYS} )

@
<<PRIMES.spad (SPAD from IN)>>=
${MID}/PRIMES.spad: ${IN}/intfact.spad.pamphlet
	@ echo 0 making ${MID}/PRIMES.spad from ${IN}/intfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRIMES.NRLIB ; \
	${SPADBIN}/notangle -R"package PRIMES IntegerPrimesPackage" ${IN}/intfact.spad.pamphlet >PRIMES.spad )

@
<<intfact.spad.dvi (DOC from IN)>>=
${DOC}/intfact.spad.dvi: ${IN}/intfact.spad.pamphlet
	@ echo 0 making ${DOC}/intfact.spad.dvi from ${IN}/intfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intfact.spad ; \
	rm -f ${DOC}/intfact.spad.pamphlet ; \
	rm -f ${DOC}/intfact.spad.tex ; \
	rm -f ${DOC}/intfact.spad )

@
\subsection{intpm.spad \cite{1}}
<<intpm.spad (SPAD from IN)>>=
${MID}/intpm.spad: ${IN}/intpm.spad.pamphlet
	@ echo 0 making ${MID}/intpm.spad from ${IN}/intpm.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intpm.spad.pamphlet >intpm.spad )

@
<<INTPM.o (O from NRLIB)>>=
${OUT}/INTPM.o: ${MID}/INTPM.NRLIB
	@ echo 0 making ${OUT}/INTPM.o from ${MID}/INTPM.NRLIB
	@ cp ${MID}/INTPM.NRLIB/code.o ${OUT}/INTPM.o

@
<<INTPM.NRLIB (NRLIB from MID)>>=
${MID}/INTPM.NRLIB: ${MID}/INTPM.spad
	@ echo 0 making ${MID}/INTPM.NRLIB from ${MID}/INTPM.spad
	@ (cd ${MID} ; 	echo ')co INTPM.spad' | ${INTERPSYS} )

@
<<INTPM.spad (SPAD from IN)>>=
${MID}/INTPM.spad: ${IN}/intpm.spad.pamphlet
	@ echo 0 making ${MID}/INTPM.spad from ${IN}/intpm.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTPM.NRLIB ; \
	${SPADBIN}/notangle -R"package INTPM PatternMatchIntegration" ${IN}/intpm.spad.pamphlet >INTPM.spad )

@
<<intpm.spad.dvi (DOC from IN)>>=
${DOC}/intpm.spad.dvi: ${IN}/intpm.spad.pamphlet
	@ echo 0 making ${DOC}/intpm.spad.dvi from ${IN}/intpm.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intpm.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intpm.spad ; \
	rm -f ${DOC}/intpm.spad.pamphlet ; \
	rm -f ${DOC}/intpm.spad.tex ; \
	rm -f ${DOC}/intpm.spad )

@
\subsection{intrf.spad \cite{1}}
<<intrf.spad (SPAD from IN)>>=
${MID}/intrf.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/intrf.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/intrf.spad.pamphlet >intrf.spad )

@
<<INTHERTR.o (O from NRLIB)>>=
${OUT}/INTHERTR.o: ${MID}/INTHERTR.NRLIB
	@ echo 0 making ${OUT}/INTHERTR.o from ${MID}/INTHERTR.NRLIB
	@ cp ${MID}/INTHERTR.NRLIB/code.o ${OUT}/INTHERTR.o

@
<<INTHERTR.NRLIB (NRLIB from MID)>>=
${MID}/INTHERTR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/INTHERTR.spad
	@ echo 0 making ${MID}/INTHERTR.NRLIB from ${MID}/INTHERTR.spad
	@ (cd ${MID} ; 	echo ')co INTHERTR.spad' | ${INTERPSYS} )

@
<<INTHERTR.spad (SPAD from IN)>>=
${MID}/INTHERTR.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/INTHERTR.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTHERTR.NRLIB ; \
	${SPADBIN}/notangle -R"package INTHERTR TranscendentalHermiteIntegration" ${IN}/intrf.spad.pamphlet >INTHERTR.spad )

@
<<INTRAT.o (O from NRLIB)>>=
${OUT}/INTRAT.o: ${MID}/INTRAT.NRLIB
	@ echo 0 making ${OUT}/INTRAT.o from ${MID}/INTRAT.NRLIB
	@ cp ${MID}/INTRAT.NRLIB/code.o ${OUT}/INTRAT.o

@
<<INTRAT.NRLIB (NRLIB from MID)>>=
${MID}/INTRAT.NRLIB: ${MID}/INTRAT.spad
	@ echo 0 making ${MID}/INTRAT.NRLIB from ${MID}/INTRAT.spad
	@ (cd ${MID} ; 	echo ')co INTRAT.spad' | ${INTERPSYS} )

@
<<INTRAT.spad (SPAD from IN)>>=
${MID}/INTRAT.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/INTRAT.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTRAT.NRLIB ; \
	${SPADBIN}/notangle -R"package INTRAT RationalIntegration" ${IN}/intrf.spad.pamphlet >INTRAT.spad )

@
<<INTRF.o (O from NRLIB)>>=
${OUT}/INTRF.o: ${MID}/INTRF.NRLIB
	@ echo 0 making ${OUT}/INTRF.o from ${MID}/INTRF.NRLIB
	@ cp ${MID}/INTRF.NRLIB/code.o ${OUT}/INTRF.o

@
<<INTRF.NRLIB (NRLIB from MID)>>=
${MID}/INTRF.NRLIB: ${MID}/INTRF.spad
	@ echo 0 making ${MID}/INTRF.NRLIB from ${MID}/INTRF.spad
	@ (cd ${MID} ; 	echo ')co INTRF.spad' | ${INTERPSYS} )

@
<<INTRF.spad (SPAD from IN)>>=
${MID}/INTRF.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/INTRF.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTRF.NRLIB ; \
	${SPADBIN}/notangle -R"package INTRF RationalFunctionIntegration" ${IN}/intrf.spad.pamphlet >INTRF.spad )

@
<<INTTR.o (O from NRLIB)>>=
${OUT}/INTTR.o: ${MID}/INTTR.NRLIB
	@ echo 0 making ${OUT}/INTTR.o from ${MID}/INTTR.NRLIB
	@ cp ${MID}/INTTR.NRLIB/code.o ${OUT}/INTTR.o

@
<<INTTR.NRLIB (NRLIB from MID)>>=
${MID}/INTTR.NRLIB: ${MID}/INTTR.spad
	@ echo 0 making ${MID}/INTTR.NRLIB from ${MID}/INTTR.spad
	@ (cd ${MID} ; 	echo ')co INTTR.spad' | ${INTERPSYS} )

@
<<INTTR.spad (SPAD from IN)>>=
${MID}/INTTR.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/INTTR.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTTR.NRLIB ; \
	${SPADBIN}/notangle -R"package INTTR TranscendentalIntegration" ${IN}/intrf.spad.pamphlet >INTTR.spad )

@
<<MONOTOOL.o (O from NRLIB)>>=
${OUT}/MONOTOOL.o: ${MID}/MONOTOOL.NRLIB
	@ echo 0 making ${OUT}/MONOTOOL.o from ${MID}/MONOTOOL.NRLIB
	@ cp ${MID}/MONOTOOL.NRLIB/code.o ${OUT}/MONOTOOL.o

@
<<MONOTOOL.NRLIB (NRLIB from MID)>>=
${MID}/MONOTOOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MONOTOOL.spad
	@ echo 0 making ${MID}/MONOTOOL.NRLIB from ${MID}/MONOTOOL.spad
	@ (cd ${MID} ; 	echo ')co MONOTOOL.spad' | ${INTERPSYS} )

@
<<MONOTOOL.spad (SPAD from IN)>>=
${MID}/MONOTOOL.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/MONOTOOL.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONOTOOL.NRLIB ; \
	${SPADBIN}/notangle -R"package MONOTOOL MonomialExtensionTools" ${IN}/intrf.spad.pamphlet >MONOTOOL.spad )

@
<<SUBRESP.o (O from NRLIB)>>=
${OUT}/SUBRESP.o: ${MID}/SUBRESP.NRLIB
	@ echo 0 making ${OUT}/SUBRESP.o from ${MID}/SUBRESP.NRLIB
	@ cp ${MID}/SUBRESP.NRLIB/code.o ${OUT}/SUBRESP.o

@
<<SUBRESP.NRLIB (NRLIB from MID)>>=
${MID}/SUBRESP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SUBRESP.spad
	@ echo 0 making ${MID}/SUBRESP.NRLIB from ${MID}/SUBRESP.spad
	@ (cd ${MID} ; 	echo ')co SUBRESP.spad' | ${INTERPSYS} )

@
<<SUBRESP.spad (SPAD from IN)>>=
${MID}/SUBRESP.spad: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${MID}/SUBRESP.spad from ${IN}/intrf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUBRESP.NRLIB ; \
	${SPADBIN}/notangle -R"package SUBRESP SubResultantPackage" ${IN}/intrf.spad.pamphlet >SUBRESP.spad )

@
<<intrf.spad.dvi (DOC from IN)>>=
${DOC}/intrf.spad.dvi: ${IN}/intrf.spad.pamphlet
	@ echo 0 making ${DOC}/intrf.spad.dvi from ${IN}/intrf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/intrf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} intrf.spad ; \
	rm -f ${DOC}/intrf.spad.pamphlet ; \
	rm -f ${DOC}/intrf.spad.tex ; \
	rm -f ${DOC}/intrf.spad )

@
\subsection{invnode.as \cite{1}}
<<invnode.as (SPAD from IN)>>=
${MID}/invnode.as: ${IN}/invnode.as.pamphlet
	@ echo 0 making ${MID}/invnode.as from ${IN}/invnode.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/invnode.as.pamphlet >invnode.as )

@
<<invnode.as.dvi (DOC from IN)>>=
${DOC}/invnode.as.dvi: ${IN}/invnode.as.pamphlet
	@ echo 0 making ${DOC}/invnode.as.dvi from ${IN}/invnode.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/invnode.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} invnode.as ; \
	rm -f ${DOC}/invnode.as.pamphlet ; \
	rm -f ${DOC}/invnode.as.tex ; \
	rm -f ${DOC}/invnode.as )

@
\subsection{invrender.as \cite{1}}
<<invrender.as (SPAD from IN)>>=
${MID}/invrender.as: ${IN}/invrender.as.pamphlet
	@ echo 0 making ${MID}/invrender.as from ${IN}/invrender.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/invrender.as.pamphlet >invrender.as )

@
<<invrender.as.dvi (DOC from IN)>>=
${DOC}/invrender.as.dvi: ${IN}/invrender.as.pamphlet
	@ echo 0 making ${DOC}/invrender.as.dvi from ${IN}/invrender.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/invrender.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} invrender.as ; \
	rm -f ${DOC}/invrender.as.pamphlet ; \
	rm -f ${DOC}/invrender.as.tex ; \
	rm -f ${DOC}/invrender.as )

@
\subsection{invtypes.as \cite{1}}
<<invtypes.as (SPAD from IN)>>=
${MID}/invtypes.as: ${IN}/invtypes.as.pamphlet
	@ echo 0 making ${MID}/invtypes.as from ${IN}/invtypes.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/invtypes.as.pamphlet >invtypes.as )

@
<<invtypes.as.dvi (DOC from IN)>>=
${DOC}/invtypes.as.dvi: ${IN}/invtypes.as.pamphlet
	@ echo 0 making ${DOC}/invtypes.as.dvi from ${IN}/invtypes.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/invtypes.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} invtypes.as ; \
	rm -f ${DOC}/invtypes.as.pamphlet ; \
	rm -f ${DOC}/invtypes.as.tex ; \
	rm -f ${DOC}/invtypes.as )

@
\subsection{invutils.as \cite{1}}
<<invutils.as (SPAD from IN)>>=
${MID}/invutils.as: ${IN}/invutils.as.pamphlet
	@ echo 0 making ${MID}/invutils.as from ${IN}/invutils.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/invutils.as.pamphlet >invutils.as )

@
<<invutils.as.dvi (DOC from IN)>>=
${DOC}/invutils.as.dvi: ${IN}/invutils.as.pamphlet
	@ echo 0 making ${DOC}/invutils.as.dvi from ${IN}/invutils.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/invutils.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} invutils.as ; \
	rm -f ${DOC}/invutils.as.pamphlet ; \
	rm -f ${DOC}/invutils.as.tex ; \
	rm -f ${DOC}/invutils.as )

@
\subsection{irexpand.spad \cite{1}}
<<irexpand.spad (SPAD from IN)>>=
${MID}/irexpand.spad: ${IN}/irexpand.spad.pamphlet
	@ echo 0 making ${MID}/irexpand.spad from ${IN}/irexpand.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/irexpand.spad.pamphlet >irexpand.spad )

@
<<IR2F.o (O from NRLIB)>>=
${OUT}/IR2F.o: ${MID}/IR2F.NRLIB
	@ echo 0 making ${OUT}/IR2F.o from ${MID}/IR2F.NRLIB
	@ cp ${MID}/IR2F.NRLIB/code.o ${OUT}/IR2F.o

@
<<IR2F.NRLIB (NRLIB from MID)>>=
${MID}/IR2F.NRLIB: ${MID}/IR2F.spad
	@ echo 0 making ${MID}/IR2F.NRLIB from ${MID}/IR2F.spad
	@ (cd ${MID} ; 	echo ')co IR2F.spad' | ${INTERPSYS} )

@
<<IR2F.spad (SPAD from IN)>>=
${MID}/IR2F.spad: ${IN}/irexpand.spad.pamphlet
	@ echo 0 making ${MID}/IR2F.spad from ${IN}/irexpand.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IR2F.NRLIB ; \
	${SPADBIN}/notangle -R"package IR2F IntegrationResultToFunction" ${IN}/irexpand.spad.pamphlet >IR2F.spad )

@
<<IRRF2F.o (O from NRLIB)>>=
${OUT}/IRRF2F.o: ${MID}/IRRF2F.NRLIB
	@ echo 0 making ${OUT}/IRRF2F.o from ${MID}/IRRF2F.NRLIB
	@ cp ${MID}/IRRF2F.NRLIB/code.o ${OUT}/IRRF2F.o

@
<<IRRF2F.NRLIB (NRLIB from MID)>>=
${MID}/IRRF2F.NRLIB: ${MID}/IRRF2F.spad
	@ echo 0 making ${MID}/IRRF2F.NRLIB from ${MID}/IRRF2F.spad
	@ (cd ${MID} ; 	echo ')co IRRF2F.spad' | ${INTERPSYS} )

@
<<IRRF2F.spad (SPAD from IN)>>=
${MID}/IRRF2F.spad: ${IN}/irexpand.spad.pamphlet
	@ echo 0 making ${MID}/IRRF2F.spad from ${IN}/irexpand.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IRRF2F.NRLIB ; \
	${SPADBIN}/notangle -R"package IRRF2F IntegrationResultRFToFunction" ${IN}/irexpand.spad.pamphlet >IRRF2F.spad )

@
<<irexpand.spad.dvi (DOC from IN)>>=
${DOC}/irexpand.spad.dvi: ${IN}/irexpand.spad.pamphlet
	@ echo 0 making ${DOC}/irexpand.spad.dvi from ${IN}/irexpand.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/irexpand.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} irexpand.spad ; \
	rm -f ${DOC}/irexpand.spad.pamphlet ; \
	rm -f ${DOC}/irexpand.spad.tex ; \
	rm -f ${DOC}/irexpand.spad )

@
\subsection{irsn.spad \cite{1}}
<<irsn.spad (SPAD from IN)>>=
${MID}/irsn.spad: ${IN}/irsn.spad.pamphlet
	@ echo 0 making ${MID}/irsn.spad from ${IN}/irsn.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/irsn.spad.pamphlet >irsn.spad )

@
<<IRSN.o (O from NRLIB)>>=
${OUT}/IRSN.o: ${MID}/IRSN.NRLIB
	@ echo 0 making ${OUT}/IRSN.o from ${MID}/IRSN.NRLIB
	@ cp ${MID}/IRSN.NRLIB/code.o ${OUT}/IRSN.o

@
<<IRSN.NRLIB (NRLIB from MID)>>=
${MID}/IRSN.NRLIB: ${MID}/IRSN.spad
	@ echo 0 making ${MID}/IRSN.NRLIB from ${MID}/IRSN.spad
	@ (cd ${MID} ; 	echo ')co IRSN.spad' | ${INTERPSYS} )

@
<<IRSN.spad (SPAD from IN)>>=
${MID}/IRSN.spad: ${IN}/irsn.spad.pamphlet
	@ echo 0 making ${MID}/IRSN.spad from ${IN}/irsn.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IRSN.NRLIB ; \
	${SPADBIN}/notangle -R"package IRSN IrrRepSymNatPackage" ${IN}/irsn.spad.pamphlet >IRSN.spad )

@
<<irsn.spad.dvi (DOC from IN)>>=
${DOC}/irsn.spad.dvi: ${IN}/irsn.spad.pamphlet
	@ echo 0 making ${DOC}/irsn.spad.dvi from ${IN}/irsn.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/irsn.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} irsn.spad ; \
	rm -f ${DOC}/irsn.spad.pamphlet ; \
	rm -f ${DOC}/irsn.spad.tex ; \
	rm -f ${DOC}/irsn.spad )

@
\subsection{ituple.spad \cite{1}}
<<ituple.spad (SPAD from IN)>>=
${MID}/ituple.spad: ${IN}/ituple.spad.pamphlet
	@ echo 0 making ${MID}/ituple.spad from ${IN}/ituple.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ituple.spad.pamphlet >ituple.spad )

@
<<ITFUN2.o (O from NRLIB)>>=
${OUT}/ITFUN2.o: ${MID}/ITFUN2.NRLIB
	@ echo 0 making ${OUT}/ITFUN2.o from ${MID}/ITFUN2.NRLIB
	@ cp ${MID}/ITFUN2.NRLIB/code.o ${OUT}/ITFUN2.o

@
<<ITFUN2.NRLIB (NRLIB from MID)>>=
${MID}/ITFUN2.NRLIB: ${OUT}/TYPE.o ${MID}/ITFUN2.spad
	@ echo 0 making ${MID}/ITFUN2.NRLIB from ${MID}/ITFUN2.spad
	@ (cd ${MID} ; 	echo ')co ITFUN2.spad' | ${INTERPSYS} )

@
<<ITFUN2.spad (SPAD from IN)>>=
${MID}/ITFUN2.spad: ${IN}/ituple.spad.pamphlet
	@ echo 0 making ${MID}/ITFUN2.spad from ${IN}/ituple.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ITFUN2.NRLIB ; \
	${SPADBIN}/notangle -R"package ITFUN2 InfiniteTupleFunctions2" ${IN}/ituple.spad.pamphlet >ITFUN2.spad )

@
<<ITFUN3.o (O from NRLIB)>>=
${OUT}/ITFUN3.o: ${MID}/ITFUN3.NRLIB
	@ echo 0 making ${OUT}/ITFUN3.o from ${MID}/ITFUN3.NRLIB
	@ cp ${MID}/ITFUN3.NRLIB/code.o ${OUT}/ITFUN3.o

@
<<ITFUN3.NRLIB (NRLIB from MID)>>=
${MID}/ITFUN3.NRLIB: ${OUT}/TYPE.o ${MID}/ITFUN3.spad
	@ echo 0 making ${MID}/ITFUN3.NRLIB from ${MID}/ITFUN3.spad
	@ (cd ${MID} ; 	echo ')co ITFUN3.spad' | ${INTERPSYS} )

@
<<ITFUN3.spad (SPAD from IN)>>=
${MID}/ITFUN3.spad: ${IN}/ituple.spad.pamphlet
	@ echo 0 making ${MID}/ITFUN3.spad from ${IN}/ituple.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ITFUN3.NRLIB ; \
	${SPADBIN}/notangle -R"package ITFUN3 InfiniteTupleFunctions3" ${IN}/ituple.spad.pamphlet >ITFUN3.spad )

@
<<ITUPLE.o (O from NRLIB)>>=
${OUT}/ITUPLE.o: ${MID}/ITUPLE.NRLIB
	@ echo 0 making ${OUT}/ITUPLE.o from ${MID}/ITUPLE.NRLIB
	@ cp ${MID}/ITUPLE.NRLIB/code.o ${OUT}/ITUPLE.o

@
<<ITUPLE.NRLIB (NRLIB from MID)>>=
${MID}/ITUPLE.NRLIB: ${OUT}/KOERCE.o ${OUT}/TYPE.o ${MID}/ITUPLE.spad
	@ echo 0 making ${MID}/ITUPLE.NRLIB from ${MID}/ITUPLE.spad
	@ (cd ${MID} ; 	echo ')co ITUPLE.spad' | ${INTERPSYS} )

@
<<ITUPLE.spad (SPAD from IN)>>=
${MID}/ITUPLE.spad: ${IN}/ituple.spad.pamphlet
	@ echo 0 making ${MID}/ITUPLE.spad from ${IN}/ituple.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ITUPLE.NRLIB ; \
	${SPADBIN}/notangle -R"domain ITUPLE InfiniteTuple" ${IN}/ituple.spad.pamphlet >ITUPLE.spad )

@
<<ituple.spad.dvi (DOC from IN)>>=
${DOC}/ituple.spad.dvi: ${IN}/ituple.spad.pamphlet
	@ echo 0 making ${DOC}/ituple.spad.dvi from ${IN}/ituple.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ituple.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ituple.spad ; \
	rm -f ${DOC}/ituple.spad.pamphlet ; \
	rm -f ${DOC}/ituple.spad.tex ; \
	rm -f ${DOC}/ituple.spad )

@
\subsection{iviews.as \cite{1}}
<<iviews.as (SPAD from IN)>>=
${MID}/iviews.as: ${IN}/iviews.as.pamphlet
	@ echo 0 making ${MID}/iviews.as from ${IN}/iviews.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/iviews.as.pamphlet >iviews.as )

@
<<iviews.as.dvi (DOC from IN)>>=
${DOC}/iviews.as.dvi: ${IN}/iviews.as.pamphlet
	@ echo 0 making ${DOC}/iviews.as.dvi from ${IN}/iviews.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/iviews.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} iviews.as ; \
	rm -f ${DOC}/iviews.as.pamphlet ; \
	rm -f ${DOC}/iviews.as.tex ; \
	rm -f ${DOC}/iviews.as )

@
\subsection{kl.spad \cite{1}}
<<kl.spad (SPAD from IN)>>=
${MID}/kl.spad: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${MID}/kl.spad from ${IN}/kl.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/kl.spad.pamphlet >kl.spad )

@
<<CACHSET.o (O from NRLIB)>>=
${OUT}/CACHSET.o: ${MID}/CACHSET.NRLIB
	@ echo 0 making ${OUT}/CACHSET.o from ${MID}/CACHSET.NRLIB
	@ cp ${MID}/CACHSET.NRLIB/code.o ${OUT}/CACHSET.o

@
<<CACHSET.NRLIB (NRLIB from MID)>>=
${MID}/CACHSET.NRLIB: ${MID}/CACHSET.spad
	@ echo 0 making ${MID}/CACHSET.NRLIB from ${MID}/CACHSET.spad
	@ (cd ${MID} ; 	echo ')co CACHSET.spad' | ${INTERPSYS} )

@
<<CACHSET.spad (SPAD from IN)>>=
${MID}/CACHSET.spad: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${MID}/CACHSET.spad from ${IN}/kl.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CACHSET.NRLIB ; \
	${SPADBIN}/notangle -R"category CACHSET CachableSet" ${IN}/kl.spad.pamphlet >CACHSET.spad )

@
<<KERNEL.o (O from NRLIB)>>=
${OUT}/KERNEL.o: ${MID}/KERNEL.NRLIB
	@ echo 0 making ${OUT}/KERNEL.o from ${MID}/KERNEL.NRLIB
	@ cp ${MID}/KERNEL.NRLIB/code.o ${OUT}/KERNEL.o

@
<<KERNEL.NRLIB (NRLIB from MID)>>=
${MID}/KERNEL.NRLIB: ${MID}/KERNEL.spad
	@ echo 0 making ${MID}/KERNEL.NRLIB from ${MID}/KERNEL.spad
	@ (cd ${MID} ; 	echo ')co KERNEL.spad' | ${INTERPSYS} )

@
<<KERNEL.spad (SPAD from IN)>>=
${MID}/KERNEL.spad: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${MID}/KERNEL.spad from ${IN}/kl.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf KERNEL.NRLIB ; \
	${SPADBIN}/notangle -R"domain KERNEL Kernel" ${IN}/kl.spad.pamphlet >KERNEL.spad )

@
<<KERNEL2.o (O from NRLIB)>>=
${OUT}/KERNEL2.o: ${MID}/KERNEL2.NRLIB
	@ echo 0 making ${OUT}/KERNEL2.o from ${MID}/KERNEL2.NRLIB
	@ cp ${MID}/KERNEL2.NRLIB/code.o ${OUT}/KERNEL2.o

@
<<KERNEL2.NRLIB (NRLIB from MID)>>=
${MID}/KERNEL2.NRLIB: ${MID}/KERNEL2.spad
	@ echo 0 making ${MID}/KERNEL2.NRLIB from ${MID}/KERNEL2.spad
	@ (cd ${MID} ; 	echo ')co KERNEL2.spad' | ${INTERPSYS} )

@
<<KERNEL2.spad (SPAD from IN)>>=
${MID}/KERNEL2.spad: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${MID}/KERNEL2.spad from ${IN}/kl.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf KERNEL2.NRLIB ; \
	${SPADBIN}/notangle -R"package KERNEL2 KernelFunctions2" ${IN}/kl.spad.pamphlet >KERNEL2.spad )

@
<<MKCHSET.o (O from NRLIB)>>=
${OUT}/MKCHSET.o: ${MID}/MKCHSET.NRLIB
	@ echo 0 making ${OUT}/MKCHSET.o from ${MID}/MKCHSET.NRLIB
	@ cp ${MID}/MKCHSET.NRLIB/code.o ${OUT}/MKCHSET.o

@
<<MKCHSET.NRLIB (NRLIB from MID)>>=
${MID}/MKCHSET.NRLIB: ${MID}/MKCHSET.spad
	@ echo 0 making ${MID}/MKCHSET.NRLIB from ${MID}/MKCHSET.spad
	@ (cd ${MID} ; 	echo ')co MKCHSET.spad' | ${INTERPSYS} )

@
<<MKCHSET.spad (SPAD from IN)>>=
${MID}/MKCHSET.spad: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${MID}/MKCHSET.spad from ${IN}/kl.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MKCHSET.NRLIB ; \
	${SPADBIN}/notangle -R"domain MKCHSET MakeCachableSet" ${IN}/kl.spad.pamphlet >MKCHSET.spad )

@
<<SCACHE.o (O from NRLIB)>>=
${OUT}/SCACHE.o: ${MID}/SCACHE.NRLIB
	@ echo 0 making ${OUT}/SCACHE.o from ${MID}/SCACHE.NRLIB
	@ cp ${MID}/SCACHE.NRLIB/code.o ${OUT}/SCACHE.o

@
<<SCACHE.NRLIB (NRLIB from MID)>>=
${MID}/SCACHE.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SCACHE.spad
	@ echo 0 making ${MID}/SCACHE.NRLIB from ${MID}/SCACHE.spad
	@ (cd ${MID} ; 	echo ')co SCACHE.spad' | ${INTERPSYS} )

@
<<SCACHE.spad (SPAD from IN)>>=
${MID}/SCACHE.spad: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${MID}/SCACHE.spad from ${IN}/kl.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SCACHE.NRLIB ; \
	${SPADBIN}/notangle -R"package SCACHE SortedCache" ${IN}/kl.spad.pamphlet >SCACHE.spad )

@
<<kl.spad.dvi (DOC from IN)>>=
${DOC}/kl.spad.dvi: ${IN}/kl.spad.pamphlet
	@ echo 0 making ${DOC}/kl.spad.dvi from ${IN}/kl.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/kl.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} kl.spad ; \
	rm -f ${DOC}/kl.spad.pamphlet ; \
	rm -f ${DOC}/kl.spad.tex ; \
	rm -f ${DOC}/kl.spad )

@
\subsection{kovacic.spad \cite{1}}
<<kovacic.spad (SPAD from IN)>>=
${MID}/kovacic.spad: ${IN}/kovacic.spad.pamphlet
	@ echo 0 making ${MID}/kovacic.spad from ${IN}/kovacic.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/kovacic.spad.pamphlet >kovacic.spad )

@
<<KOVACIC.o (O from NRLIB)>>=
${OUT}/KOVACIC.o: ${MID}/KOVACIC.NRLIB
	@ echo 0 making ${OUT}/KOVACIC.o from ${MID}/KOVACIC.NRLIB
	@ cp ${MID}/KOVACIC.NRLIB/code.o ${OUT}/KOVACIC.o

@
<<KOVACIC.NRLIB (NRLIB from MID)>>=
${MID}/KOVACIC.NRLIB: ${MID}/KOVACIC.spad
	@ echo 0 making ${MID}/KOVACIC.NRLIB from ${MID}/KOVACIC.spad
	@ (cd ${MID} ; 	echo ')co KOVACIC.spad' | ${INTERPSYS} )

@
<<KOVACIC.spad (SPAD from IN)>>=
${MID}/KOVACIC.spad: ${IN}/kovacic.spad.pamphlet
	@ echo 0 making ${MID}/KOVACIC.spad from ${IN}/kovacic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf KOVACIC.NRLIB ; \
	${SPADBIN}/notangle -R"package KOVACIC Kovacic" ${IN}/kovacic.spad.pamphlet >KOVACIC.spad )

@
<<kovacic.spad.dvi (DOC from IN)>>=
${DOC}/kovacic.spad.dvi: ${IN}/kovacic.spad.pamphlet
	@ echo 0 making ${DOC}/kovacic.spad.dvi from ${IN}/kovacic.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/kovacic.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} kovacic.spad ; \
	rm -f ${DOC}/kovacic.spad.pamphlet ; \
	rm -f ${DOC}/kovacic.spad.tex ; \
	rm -f ${DOC}/kovacic.spad )

@
\subsection{laplace.spad \cite{1}}
<<laplace.spad (SPAD from IN)>>=
${MID}/laplace.spad: ${IN}/laplace.spad.pamphlet
	@ echo 0 making ${MID}/laplace.spad from ${IN}/laplace.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/laplace.spad.pamphlet >laplace.spad )

@
<<INVLAPLA.o (O from NRLIB)>>=
${OUT}/INVLAPLA.o: ${MID}/INVLAPLA.NRLIB
	@ echo 0 making ${OUT}/INVLAPLA.o from ${MID}/INVLAPLA.NRLIB
	@ cp ${MID}/INVLAPLA.NRLIB/code.o ${OUT}/INVLAPLA.o

@
<<INVLAPLA.NRLIB (NRLIB from MID)>>=
${MID}/INVLAPLA.NRLIB: ${MID}/INVLAPLA.spad
	@ echo 0 making ${MID}/INVLAPLA.NRLIB from ${MID}/INVLAPLA.spad
	@ (cd ${MID} ; 	echo ')co INVLAPLA.spad' | ${INTERPSYS} )

@
<<INVLAPLA.spad (SPAD from IN)>>=
${MID}/INVLAPLA.spad: ${IN}/laplace.spad.pamphlet
	@ echo 0 making ${MID}/INVLAPLA.spad from ${IN}/laplace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INVLAPLA.NRLIB ; \
	${SPADBIN}/notangle -R"package INVLAPLA InverseLaplaceTransform" ${IN}/laplace.spad.pamphlet >INVLAPLA.spad )

@
<<LAPLACE.o (O from NRLIB)>>=
${OUT}/LAPLACE.o: ${MID}/LAPLACE.NRLIB
	@ echo 0 making ${OUT}/LAPLACE.o from ${MID}/LAPLACE.NRLIB
	@ cp ${MID}/LAPLACE.NRLIB/code.o ${OUT}/LAPLACE.o

@
<<LAPLACE.NRLIB (NRLIB from MID)>>=
${MID}/LAPLACE.NRLIB: ${MID}/LAPLACE.spad
	@ echo 0 making ${MID}/LAPLACE.NRLIB from ${MID}/LAPLACE.spad
	@ (cd ${MID} ; 	echo ')co LAPLACE.spad' | ${INTERPSYS} )

@
<<LAPLACE.spad (SPAD from IN)>>=
${MID}/LAPLACE.spad: ${IN}/laplace.spad.pamphlet
	@ echo 0 making ${MID}/LAPLACE.spad from ${IN}/laplace.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LAPLACE.NRLIB ; \
	${SPADBIN}/notangle -R"package LAPLACE LaplaceTransform" ${IN}/laplace.spad.pamphlet >LAPLACE.spad )

@
<<laplace.spad.dvi (DOC from IN)>>=
${DOC}/laplace.spad.dvi: ${IN}/laplace.spad.pamphlet
	@ echo 0 making ${DOC}/laplace.spad.dvi from ${IN}/laplace.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/laplace.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} laplace.spad ; \
	rm -f ${DOC}/laplace.spad.pamphlet ; \
	rm -f ${DOC}/laplace.spad.tex ; \
	rm -f ${DOC}/laplace.spad )

@
\subsection{laurent.spad \cite{1}}
<<laurent.spad (SPAD from IN)>>=
${MID}/laurent.spad: ${IN}/laurent.spad.pamphlet
	@ echo 0 making ${MID}/laurent.spad from ${IN}/laurent.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/laurent.spad.pamphlet >laurent.spad )

@
<<ULS.o (O from NRLIB)>>=
${OUT}/ULS.o: ${MID}/ULS.NRLIB
	@ echo 0 making ${OUT}/ULS.o from ${MID}/ULS.NRLIB
	@ cp ${MID}/ULS.NRLIB/code.o ${OUT}/ULS.o

@
<<ULS.NRLIB (NRLIB from MID)>>=
${MID}/ULS.NRLIB: ${MID}/ULS.spad
	@ echo 0 making ${MID}/ULS.NRLIB from ${MID}/ULS.spad
	@ (cd ${MID} ; 	echo ')co ULS.spad' | ${INTERPSYS} )

@
<<ULS.spad (SPAD from IN)>>=
${MID}/ULS.spad: ${IN}/laurent.spad.pamphlet
	@ echo 0 making ${MID}/ULS.spad from ${IN}/laurent.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ULS.NRLIB ; \
	${SPADBIN}/notangle -R"domain ULS UnivariateLaurentSeries" ${IN}/laurent.spad.pamphlet >ULS.spad )

@
<<ULSCCAT-.o (O from NRLIB)>>=
${OUT}/ULSCCAT-.o: ${MID}/ULSCCAT.NRLIB
	@ echo 0 making ${OUT}/ULSCCAT-.o from ${MID}/ULSCCAT-.NRLIB
	@ cp ${MID}/ULSCCAT-.NRLIB/code.o ${OUT}/ULSCCAT-.o

@
<<ULSCCAT-.NRLIB (NRLIB from MID)>>=
${MID}/ULSCCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/ULSCCAT.spad 
	@ echo 0 making ${MID}/ULSCCAT-.NRLIB from ${MID}/ULSCCAT.spad
	@ (cd ${MID} ; 	echo ')co ULSCCAT.spad' | ${INTERPSYS} )

@
<<ULSCCAT.o (O from NRLIB)>>=
${OUT}/ULSCCAT.o: ${MID}/ULSCCAT.NRLIB
	@ echo 0 making ${OUT}/ULSCCAT.o from ${MID}/ULSCCAT.NRLIB
	@ cp ${MID}/ULSCCAT.NRLIB/code.o ${OUT}/ULSCCAT.o

@
<<ULSCCAT.NRLIB (NRLIB from MID)>>=
${MID}/ULSCCAT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ULSCCAT.spad
	@ echo 0 making ${MID}/ULSCCAT.NRLIB from ${MID}/ULSCCAT.spad
	@ (cd ${MID} ; 	echo ')co ULSCCAT.spad' | ${INTERPSYS} )

@
<<ULSCCAT.spad (SPAD from IN)>>=
${MID}/ULSCCAT.spad: ${IN}/laurent.spad.pamphlet
	@ echo 0 making ${MID}/ULSCCAT.spad from ${IN}/laurent.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ULSCCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category ULSCCAT UnivariateLaurentSeriesConstructorCategory" ${IN}/laurent.spad.pamphlet >ULSCCAT.spad )

@
<<ULSCONS.o (O from NRLIB)>>=
${OUT}/ULSCONS.o: ${MID}/ULSCONS.NRLIB
	@ echo 0 making ${OUT}/ULSCONS.o from ${MID}/ULSCONS.NRLIB
	@ cp ${MID}/ULSCONS.NRLIB/code.o ${OUT}/ULSCONS.o

@
<<ULSCONS.NRLIB (NRLIB from MID)>>=
${MID}/ULSCONS.NRLIB: ${MID}/ULSCONS.spad
	@ echo 0 making ${MID}/ULSCONS.NRLIB from ${MID}/ULSCONS.spad
	@ (cd ${MID} ; 	echo ')co ULSCONS.spad' | ${INTERPSYS} )

@
<<ULSCONS.spad (SPAD from IN)>>=
${MID}/ULSCONS.spad: ${IN}/laurent.spad.pamphlet
	@ echo 0 making ${MID}/ULSCONS.spad from ${IN}/laurent.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ULSCONS.NRLIB ; \
	${SPADBIN}/notangle -R"domain ULSCONS UnivariateLaurentSeriesConstructor" ${IN}/laurent.spad.pamphlet >ULSCONS.spad )

@
<<ULS2.o (O from NRLIB)>>=
${OUT}/ULS2.o: ${MID}/ULS2.NRLIB
	@ echo 0 making ${OUT}/ULS2.o from ${MID}/ULS2.NRLIB
	@ cp ${MID}/ULS2.NRLIB/code.o ${OUT}/ULS2.o

@
<<ULS2.NRLIB (NRLIB from MID)>>=
${MID}/ULS2.NRLIB: ${MID}/ULS2.spad
	@ echo 0 making ${MID}/ULS2.NRLIB from ${MID}/ULS2.spad
	@ (cd ${MID} ; 	echo ')co ULS2.spad' | ${INTERPSYS} )

@
<<ULS2.spad (SPAD from IN)>>=
${MID}/ULS2.spad: ${IN}/laurent.spad.pamphlet
	@ echo 0 making ${MID}/ULS2.spad from ${IN}/laurent.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ULS2.NRLIB ; \
	${SPADBIN}/notangle -R"package ULS2 UnivariateLaurentSeriesFunctions2" ${IN}/laurent.spad.pamphlet >ULS2.spad )

@
<<laurent.spad.dvi (DOC from IN)>>=
${DOC}/laurent.spad.dvi: ${IN}/laurent.spad.pamphlet
	@ echo 0 making ${DOC}/laurent.spad.dvi from ${IN}/laurent.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/laurent.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} laurent.spad ; \
	rm -f ${DOC}/laurent.spad.pamphlet ; \
	rm -f ${DOC}/laurent.spad.tex ; \
	rm -f ${DOC}/laurent.spad )

@
\subsection{leadcdet.spad \cite{1}}
<<leadcdet.spad (SPAD from IN)>>=
${MID}/leadcdet.spad: ${IN}/leadcdet.spad.pamphlet
	@ echo 0 making ${MID}/leadcdet.spad from ${IN}/leadcdet.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/leadcdet.spad.pamphlet >leadcdet.spad )

@
<<LEADCDET.o (O from NRLIB)>>=
${OUT}/LEADCDET.o: ${MID}/LEADCDET.NRLIB
	@ echo 0 making ${OUT}/LEADCDET.o from ${MID}/LEADCDET.NRLIB
	@ cp ${MID}/LEADCDET.NRLIB/code.o ${OUT}/LEADCDET.o

@
<<LEADCDET.NRLIB (NRLIB from MID)>>=
${MID}/LEADCDET.NRLIB: ${MID}/LEADCDET.spad
	@ echo 0 making ${MID}/LEADCDET.NRLIB from ${MID}/LEADCDET.spad
	@ (cd ${MID} ; 	echo ')co LEADCDET.spad' | ${INTERPSYS} )

@
<<LEADCDET.spad (SPAD from IN)>>=
${MID}/LEADCDET.spad: ${IN}/leadcdet.spad.pamphlet
	@ echo 0 making ${MID}/LEADCDET.spad from ${IN}/leadcdet.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LEADCDET.NRLIB ; \
	${SPADBIN}/notangle -R"package LEADCDET LeadingCoefDetermination" ${IN}/leadcdet.spad.pamphlet >LEADCDET.spad )

@
<<leadcdet.spad.dvi (DOC from IN)>>=
${DOC}/leadcdet.spad.dvi: ${IN}/leadcdet.spad.pamphlet
	@ echo 0 making ${DOC}/leadcdet.spad.dvi from ${IN}/leadcdet.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/leadcdet.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} leadcdet.spad ; \
	rm -f ${DOC}/leadcdet.spad.pamphlet ; \
	rm -f ${DOC}/leadcdet.spad.tex ; \
	rm -f ${DOC}/leadcdet.spad )

@
\subsection{lie.spad \cite{1}}
<<lie.spad (SPAD from IN)>>=
${MID}/lie.spad: ${IN}/lie.spad.pamphlet
	@ echo 0 making ${MID}/lie.spad from ${IN}/lie.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lie.spad.pamphlet >lie.spad )

@
<<JORDAN.o (O from NRLIB)>>=
${OUT}/JORDAN.o: ${MID}/JORDAN.NRLIB
	@ echo 0 making ${OUT}/JORDAN.o from ${MID}/JORDAN.NRLIB
	@ cp ${MID}/JORDAN.NRLIB/code.o ${OUT}/JORDAN.o

@
<<JORDAN.NRLIB (NRLIB from MID)>>=
${MID}/JORDAN.NRLIB: ${MID}/JORDAN.spad
	@ echo 0 making ${MID}/JORDAN.NRLIB from ${MID}/JORDAN.spad
	@ (cd ${MID} ; 	echo ')co JORDAN.spad' | ${INTERPSYS} )

@
<<JORDAN.spad (SPAD from IN)>>=
${MID}/JORDAN.spad: ${IN}/lie.spad.pamphlet
	@ echo 0 making ${MID}/JORDAN.spad from ${IN}/lie.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf JORDAN.NRLIB ; \
	${SPADBIN}/notangle -R"domain JORDAN AssociatedJordanAlgebra" ${IN}/lie.spad.pamphlet >JORDAN.spad )

@
<<LIE.o (O from NRLIB)>>=
${OUT}/LIE.o: ${MID}/LIE.NRLIB
	@ echo 0 making ${OUT}/LIE.o from ${MID}/LIE.NRLIB
	@ cp ${MID}/LIE.NRLIB/code.o ${OUT}/LIE.o

@
<<LIE.NRLIB (NRLIB from MID)>>=
${MID}/LIE.NRLIB: ${MID}/LIE.spad
	@ echo 0 making ${MID}/LIE.NRLIB from ${MID}/LIE.spad
	@ (cd ${MID} ; 	echo ')co LIE.spad' | ${INTERPSYS} )

@
<<LIE.spad (SPAD from IN)>>=
${MID}/LIE.spad: ${IN}/lie.spad.pamphlet
	@ echo 0 making ${MID}/LIE.spad from ${IN}/lie.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIE.NRLIB ; \
	${SPADBIN}/notangle -R"domain LIE AssociatedLieAlgebra" ${IN}/lie.spad.pamphlet >LIE.spad )

@
<<LSQM.o (O from NRLIB)>>=
${OUT}/LSQM.o: ${MID}/LSQM.NRLIB
	@ echo 0 making ${OUT}/LSQM.o from ${MID}/LSQM.NRLIB
	@ cp ${MID}/LSQM.NRLIB/code.o ${OUT}/LSQM.o

@
<<LSQM.NRLIB (NRLIB from MID)>>=
${MID}/LSQM.NRLIB: ${MID}/LSQM.spad
	@ echo 0 making ${MID}/LSQM.NRLIB from ${MID}/LSQM.spad
	@ (cd ${MID} ; 	echo ')co LSQM.spad' | ${INTERPSYS} )

@
<<LSQM.spad (SPAD from IN)>>=
${MID}/LSQM.spad: ${IN}/lie.spad.pamphlet
	@ echo 0 making ${MID}/LSQM.spad from ${IN}/lie.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSQM.NRLIB ; \
	${SPADBIN}/notangle -R"domain LSQM LieSquareMatrix" ${IN}/lie.spad.pamphlet >LSQM.spad )

@
<<lie.spad.dvi (DOC from IN)>>=
${DOC}/lie.spad.dvi: ${IN}/lie.spad.pamphlet
	@ echo 0 making ${DOC}/lie.spad.dvi from ${IN}/lie.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lie.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lie.spad ; \
	rm -f ${DOC}/lie.spad.pamphlet ; \
	rm -f ${DOC}/lie.spad.tex ; \
	rm -f ${DOC}/lie.spad )

@
\subsection{limitps.spad \cite{1}}
<<limitps.spad (SPAD from IN)>>=
${MID}/limitps.spad: ${IN}/limitps.spad.pamphlet
	@ echo 0 making ${MID}/limitps.spad from ${IN}/limitps.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/limitps.spad.pamphlet >limitps.spad )

@
<<LIMITPS.o (O from NRLIB)>>=
${OUT}/LIMITPS.o: ${MID}/LIMITPS.NRLIB
	@ echo 0 making ${OUT}/LIMITPS.o from ${MID}/LIMITPS.NRLIB
	@ cp ${MID}/LIMITPS.NRLIB/code.o ${OUT}/LIMITPS.o

@
<<LIMITPS.NRLIB (NRLIB from MID)>>=
${MID}/LIMITPS.NRLIB: ${MID}/LIMITPS.spad
	@ echo 0 making ${MID}/LIMITPS.NRLIB from ${MID}/LIMITPS.spad
	@ (cd ${MID} ; 	echo ')co LIMITPS.spad' | ${INTERPSYS} )

@
<<LIMITPS.spad (SPAD from IN)>>=
${MID}/LIMITPS.spad: ${IN}/limitps.spad.pamphlet
	@ echo 0 making ${MID}/LIMITPS.spad from ${IN}/limitps.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIMITPS.NRLIB ; \
	${SPADBIN}/notangle -R"package LIMITPS PowerSeriesLimitPackage" ${IN}/limitps.spad.pamphlet >LIMITPS.spad )

@
<<limitps.spad.dvi (DOC from IN)>>=
${DOC}/limitps.spad.dvi: ${IN}/limitps.spad.pamphlet
	@ echo 0 making ${DOC}/limitps.spad.dvi from ${IN}/limitps.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/limitps.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} limitps.spad ; \
	rm -f ${DOC}/limitps.spad.pamphlet ; \
	rm -f ${DOC}/limitps.spad.tex ; \
	rm -f ${DOC}/limitps.spad )

@
\subsection{lindep.spad \cite{1}}
<<lindep.spad (SPAD from IN)>>=
${MID}/lindep.spad: ${IN}/lindep.spad.pamphlet
	@ echo 0 making ${MID}/lindep.spad from ${IN}/lindep.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lindep.spad.pamphlet >lindep.spad )

@
<<LINDEP.o (O from NRLIB)>>=
${OUT}/LINDEP.o: ${MID}/LINDEP.NRLIB
	@ echo 0 making ${OUT}/LINDEP.o from ${MID}/LINDEP.NRLIB
	@ cp ${MID}/LINDEP.NRLIB/code.o ${OUT}/LINDEP.o

@
<<LINDEP.NRLIB (NRLIB from MID)>>=
${MID}/LINDEP.NRLIB: ${MID}/LINDEP.spad
	@ echo 0 making ${MID}/LINDEP.NRLIB from ${MID}/LINDEP.spad
	@ (cd ${MID} ; 	echo ')co LINDEP.spad' | ${INTERPSYS} )

@
<<LINDEP.spad (SPAD from IN)>>=
${MID}/LINDEP.spad: ${IN}/lindep.spad.pamphlet
	@ echo 0 making ${MID}/LINDEP.spad from ${IN}/lindep.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LINDEP.NRLIB ; \
	${SPADBIN}/notangle -R"package LINDEP LinearDependence" ${IN}/lindep.spad.pamphlet >LINDEP.spad )

@
<<ZLINDEP.o (O from NRLIB)>>=
${OUT}/ZLINDEP.o: ${MID}/ZLINDEP.NRLIB
	@ echo 0 making ${OUT}/ZLINDEP.o from ${MID}/ZLINDEP.NRLIB
	@ cp ${MID}/ZLINDEP.NRLIB/code.o ${OUT}/ZLINDEP.o

@
<<ZLINDEP.NRLIB (NRLIB from MID)>>=
${MID}/ZLINDEP.NRLIB: ${MID}/ZLINDEP.spad
	@ echo 0 making ${MID}/ZLINDEP.NRLIB from ${MID}/ZLINDEP.spad
	@ (cd ${MID} ; 	echo ')co ZLINDEP.spad' | ${INTERPSYS} )

@
<<ZLINDEP.spad (SPAD from IN)>>=
${MID}/ZLINDEP.spad: ${IN}/lindep.spad.pamphlet
	@ echo 0 making ${MID}/ZLINDEP.spad from ${IN}/lindep.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ZLINDEP.NRLIB ; \
	${SPADBIN}/notangle -R"package ZLINDEP IntegerLinearDependence" ${IN}/lindep.spad.pamphlet >ZLINDEP.spad )

@
<<lindep.spad.dvi (DOC from IN)>>=
${DOC}/lindep.spad.dvi: ${IN}/lindep.spad.pamphlet
	@ echo 0 making ${DOC}/lindep.spad.dvi from ${IN}/lindep.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lindep.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lindep.spad ; \
	rm -f ${DOC}/lindep.spad.pamphlet ; \
	rm -f ${DOC}/lindep.spad.tex ; \
	rm -f ${DOC}/lindep.spad )

@
\subsection{lingrob.spad \cite{1}}
<<lingrob.spad (SPAD from IN)>>=
${MID}/lingrob.spad: ${IN}/lingrob.spad.pamphlet
	@ echo 0 making ${MID}/lingrob.spad from ${IN}/lingrob.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lingrob.spad.pamphlet >lingrob.spad )

@
<<LGROBP.o (O from NRLIB)>>=
${OUT}/LGROBP.o: ${MID}/LGROBP.NRLIB
	@ echo 0 making ${OUT}/LGROBP.o from ${MID}/LGROBP.NRLIB
	@ cp ${MID}/LGROBP.NRLIB/code.o ${OUT}/LGROBP.o

@
<<LGROBP.NRLIB (NRLIB from MID)>>=
${MID}/LGROBP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/LGROBP.spad
	@ echo 0 making ${MID}/LGROBP.NRLIB from ${MID}/LGROBP.spad
	@ (cd ${MID} ; 	echo ')co LGROBP.spad' | ${INTERPSYS} )

@
<<LGROBP.spad (SPAD from IN)>>=
${MID}/LGROBP.spad: ${IN}/lingrob.spad.pamphlet
	@ echo 0 making ${MID}/LGROBP.spad from ${IN}/lingrob.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LGROBP.NRLIB ; \
	${SPADBIN}/notangle -R"package LGROBP LinGroebnerPackage" ${IN}/lingrob.spad.pamphlet >LGROBP.spad )

@
<<lingrob.spad.dvi (DOC from IN)>>=
${DOC}/lingrob.spad.dvi: ${IN}/lingrob.spad.pamphlet
	@ echo 0 making ${DOC}/lingrob.spad.dvi from ${IN}/lingrob.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lingrob.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lingrob.spad ; \
	rm -f ${DOC}/lingrob.spad.pamphlet ; \
	rm -f ${DOC}/lingrob.spad.tex ; \
	rm -f ${DOC}/lingrob.spad )

@
\subsection{liouv.spad \cite{1}}
<<liouv.spad (SPAD from IN)>>=
${MID}/liouv.spad: ${IN}/liouv.spad.pamphlet
	@ echo 0 making ${MID}/liouv.spad from ${IN}/liouv.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/liouv.spad.pamphlet >liouv.spad )

@
<<LF.o (O from NRLIB)>>=
${OUT}/LF.o: ${MID}/LF.NRLIB
	@ echo 0 making ${OUT}/LF.o from ${MID}/LF.NRLIB
	@ cp ${MID}/LF.NRLIB/code.o ${OUT}/LF.o

@
<<LF.NRLIB (NRLIB from MID)>>=
${MID}/LF.NRLIB: ${MID}/LF.spad
	@ echo 0 making ${MID}/LF.NRLIB from ${MID}/LF.spad
	@ (cd ${MID} ; 	echo ')co LF.spad' | ${INTERPSYS} )

@
<<LF.spad (SPAD from IN)>>=
${MID}/LF.spad: ${IN}/liouv.spad.pamphlet
	@ echo 0 making ${MID}/LF.spad from ${IN}/liouv.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LF.NRLIB ; \
	${SPADBIN}/notangle -R"package LF LiouvillianFunction" ${IN}/liouv.spad.pamphlet >LF.spad )

@
<<liouv.spad.dvi (DOC from IN)>>=
${DOC}/liouv.spad.dvi: ${IN}/liouv.spad.pamphlet
	@ echo 0 making ${DOC}/liouv.spad.dvi from ${IN}/liouv.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/liouv.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} liouv.spad ; \
	rm -f ${DOC}/liouv.spad.pamphlet ; \
	rm -f ${DOC}/liouv.spad.tex ; \
	rm -f ${DOC}/liouv.spad )

@
\subsection{listgcd.spad \cite{1}}
<<listgcd.spad (SPAD from IN)>>=
${MID}/listgcd.spad: ${IN}/listgcd.spad.pamphlet
	@ echo 0 making ${MID}/listgcd.spad from ${IN}/listgcd.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/listgcd.spad.pamphlet >listgcd.spad )

@
<<HEUGCD.o (O from NRLIB)>>=
${OUT}/HEUGCD.o: ${MID}/HEUGCD.NRLIB
	@ echo 0 making ${OUT}/HEUGCD.o from ${MID}/HEUGCD.NRLIB
	@ cp ${MID}/HEUGCD.NRLIB/code.o ${OUT}/HEUGCD.o

@
<<HEUGCD.NRLIB (NRLIB from MID)>>=
${MID}/HEUGCD.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/HEUGCD.spad
	@ echo 0 making ${MID}/HEUGCD.NRLIB from ${MID}/HEUGCD.spad
	@ (cd ${MID} ; 	echo ')co HEUGCD.spad' | ${INTERPSYS} )

@
<<HEUGCD.spad (SPAD from IN)>>=
${MID}/HEUGCD.spad: ${IN}/listgcd.spad.pamphlet
	@ echo 0 making ${MID}/HEUGCD.spad from ${IN}/listgcd.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HEUGCD.NRLIB ; \
	${SPADBIN}/notangle -R"package HEUGCD HeuGcd" ${IN}/listgcd.spad.pamphlet >HEUGCD.spad )

@
<<listgcd.spad.dvi (DOC from IN)>>=
${DOC}/listgcd.spad.dvi: ${IN}/listgcd.spad.pamphlet
	@ echo 0 making ${DOC}/listgcd.spad.dvi from ${IN}/listgcd.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/listgcd.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} listgcd.spad ; \
	rm -f ${DOC}/listgcd.spad.pamphlet ; \
	rm -f ${DOC}/listgcd.spad.tex ; \
	rm -f ${DOC}/listgcd.spad )

@
\subsection{list.spad \cite{1}}
<<list.spad (SPAD from IN)>>=
${MID}/list.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/list.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/list.spad.pamphlet >list.spad )

@
<<ILIST.o (O from NRLIB)>>=
${OUT}/ILIST.o: ${MID}/ILIST.NRLIB
	@ echo 0 making ${OUT}/ILIST.o from ${MID}/ILIST.NRLIB
	@ cp ${MID}/ILIST.NRLIB/code.o ${OUT}/ILIST.o

@
<<ILIST.NRLIB (NRLIB from MID)>>=
${MID}/ILIST.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ILIST.spad
	@ echo 0 making ${MID}/ILIST.NRLIB from ${MID}/ILIST.spad
	@ (cd ${MID} ; 	echo ')co ILIST.spad' | ${INTERPSYS} )

@
<<ILIST.spad (SPAD from IN)>>=
${MID}/ILIST.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/ILIST.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ILIST.NRLIB ; \
	${SPADBIN}/notangle -R"domain ILIST IndexedList" ${IN}/list.spad.pamphlet >ILIST.spad )

@
<<ILIST.o (BOOTSTRAP from MID)>>=
${MID}/ILIST.o: ${MID}/ILIST.lsp
	@ echo 0 making ${MID}/ILIST.o from ${MID}/ILIST.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ILIST.lsp" :output-file "ILIST.o"))' | ${DEPSYS} )
	@ cp ${MID}/ILIST.o ${OUT}/ILIST.o

@
<<ILIST.lsp (LISP from IN)>>=
${MID}/ILIST.lsp: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/ILIST.lsp from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ILIST.NRLIB ; \
	rm -rf ${OUT}/ILIST.o ; \
	${SPADBIN}/notangle -R"ILIST.lsp BOOTSTRAP" ${IN}/list.spad.pamphlet >ILIST.lsp )

@
<<LIST.o (O from NRLIB)>>=
${OUT}/LIST.o: ${MID}/LIST.NRLIB
	@ echo 0 making ${OUT}/LIST.o from ${MID}/LIST.NRLIB
	@ cp ${MID}/LIST.NRLIB/code.o ${OUT}/LIST.o

@
<<LIST.NRLIB (NRLIB from MID)>>=
${MID}/LIST.NRLIB: ${MID}/LIST.spad
	@ echo 0 making ${MID}/LIST.NRLIB from ${MID}/LIST.spad
	@ (cd ${MID} ; 	echo ')co LIST.spad' | ${INTERPSYS} )

@
<<LIST.spad (SPAD from IN)>>=
${MID}/LIST.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/LIST.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIST.NRLIB ; \
	${SPADBIN}/notangle -R"domain LIST List" ${IN}/list.spad.pamphlet >LIST.spad )

@
<<LIST.o (BOOTSTRAP from MID)>>=
${MID}/LIST.o: ${MID}/LIST.lsp
	@ echo 0 making ${MID}/LIST.o from ${MID}/LIST.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "LIST.lsp" :output-file "LIST.o"))' | ${DEPSYS} )
	@ cp ${MID}/LIST.o ${OUT}/LIST.o

@
<<LIST.lsp (LISP from IN)>>=
${MID}/LIST.lsp: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/LIST.lsp from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIST.NRLIB ; \
	rm -rf ${OUT}/LIST.o ; \
	${SPADBIN}/notangle -R"LIST.lsp BOOTSTRAP" ${IN}/list.spad.pamphlet >LIST.lsp )

@
<<ALIST.o (O from NRLIB)>>=
${OUT}/ALIST.o: ${MID}/ALIST.NRLIB
	@ echo 0 making ${OUT}/ALIST.o from ${MID}/ALIST.NRLIB
	@ cp ${MID}/ALIST.NRLIB/code.o ${OUT}/ALIST.o

@
<<ALIST.NRLIB (NRLIB from MID)>>=
${MID}/ALIST.NRLIB: ${MID}/ALIST.spad
	@ echo 0 making ${MID}/ALIST.NRLIB from ${MID}/ALIST.spad
	@ (cd ${MID} ; 	echo ')co ALIST.spad' | ${INTERPSYS} )

@
<<ALIST.spad (SPAD from IN)>>=
${MID}/ALIST.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/ALIST.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALIST.NRLIB ; \
	${SPADBIN}/notangle -R"domain ALIST AssociationList" ${IN}/list.spad.pamphlet >ALIST.spad )

@
<<LIST2.o (O from NRLIB)>>=
${OUT}/LIST2.o: ${MID}/LIST2.NRLIB
	@ echo 0 making ${OUT}/LIST2.o from ${MID}/LIST2.NRLIB
	@ cp ${MID}/LIST2.NRLIB/code.o ${OUT}/LIST2.o

@
<<LIST2.NRLIB (NRLIB from MID)>>=
${MID}/LIST2.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/LIST2.spad
	@ echo 0 making ${MID}/LIST2.NRLIB from ${MID}/LIST2.spad
	@ (cd ${MID} ; 	echo ')co LIST2.spad' | ${INTERPSYS} )

@
<<LIST2.spad (SPAD from IN)>>=
${MID}/LIST2.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/LIST2.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIST2.NRLIB ; \
	${SPADBIN}/notangle -R"package LIST2 ListFunctions2" ${IN}/list.spad.pamphlet >LIST2.spad )

@
<<LIST2MAP.o (O from NRLIB)>>=
${OUT}/LIST2MAP.o: ${MID}/LIST2MAP.NRLIB
	@ echo 0 making ${OUT}/LIST2MAP.o from ${MID}/LIST2MAP.NRLIB
	@ cp ${MID}/LIST2MAP.NRLIB/code.o ${OUT}/LIST2MAP.o

@
<<LIST2MAP.NRLIB (NRLIB from MID)>>=
${MID}/LIST2MAP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/LIST2MAP.spad
	@ echo 0 making ${MID}/LIST2MAP.NRLIB from ${MID}/LIST2MAP.spad
	@ (cd ${MID} ; 	echo ')co LIST2MAP.spad' | ${INTERPSYS} )

@
<<LIST2MAP.spad (SPAD from IN)>>=
${MID}/LIST2MAP.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/LIST2MAP.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIST2MAP.NRLIB ; \
	${SPADBIN}/notangle -R"package LIST2MAP ListToMap" ${IN}/list.spad.pamphlet >LIST2MAP.spad )

@
<<LIST3.o (O from NRLIB)>>=
${OUT}/LIST3.o: ${MID}/LIST3.NRLIB
	@ echo 0 making ${OUT}/LIST3.o from ${MID}/LIST3.NRLIB
	@ cp ${MID}/LIST3.NRLIB/code.o ${OUT}/LIST3.o

@
<<LIST3.NRLIB (NRLIB from MID)>>=
${MID}/LIST3.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/LIST3.spad
	@ echo 0 making ${MID}/LIST3.NRLIB from ${MID}/LIST3.spad
	@ (cd ${MID} ; 	echo ')co LIST3.spad' | ${INTERPSYS} )

@
<<LIST3.spad (SPAD from IN)>>=
${MID}/LIST3.spad: ${IN}/list.spad.pamphlet
	@ echo 0 making ${MID}/LIST3.spad from ${IN}/list.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIST3.NRLIB ; \
	${SPADBIN}/notangle -R"package LIST3 ListFunctions3" ${IN}/list.spad.pamphlet >LIST3.spad )

@
<<list.spad.dvi (DOC from IN)>>=
${DOC}/list.spad.dvi: ${IN}/list.spad.pamphlet
	@ echo 0 making ${DOC}/list.spad.dvi from ${IN}/list.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/list.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} list.spad ; \
	rm -f ${DOC}/list.spad.pamphlet ; \
	rm -f ${DOC}/list.spad.tex ; \
	rm -f ${DOC}/list.spad )

@
\subsection{lmdict.spad \cite{1}}
<<lmdict.spad (SPAD from IN)>>=
${MID}/lmdict.spad: ${IN}/lmdict.spad.pamphlet
	@ echo 0 making ${MID}/lmdict.spad from ${IN}/lmdict.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lmdict.spad.pamphlet >lmdict.spad )

@
<<LMDICT.o (O from NRLIB)>>=
${OUT}/LMDICT.o: ${MID}/LMDICT.NRLIB
	@ echo 0 making ${OUT}/LMDICT.o from ${MID}/LMDICT.NRLIB
	@ cp ${MID}/LMDICT.NRLIB/code.o ${OUT}/LMDICT.o

@
<<LMDICT.NRLIB (NRLIB from MID)>>=
${MID}/LMDICT.NRLIB: ${MID}/LMDICT.spad
	@ echo 0 making ${MID}/LMDICT.NRLIB from ${MID}/LMDICT.spad
	@ (cd ${MID} ; 	echo ')co LMDICT.spad' | ${INTERPSYS} )

@
<<LMDICT.spad (SPAD from IN)>>=
${MID}/LMDICT.spad: ${IN}/lmdict.spad.pamphlet
	@ echo 0 making ${MID}/LMDICT.spad from ${IN}/lmdict.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LMDICT.NRLIB ; \
	${SPADBIN}/notangle -R"domain LMDICT ListMultiDictionary" ${IN}/lmdict.spad.pamphlet >LMDICT.spad )

@
<<lmdict.spad.dvi (DOC from IN)>>=
${DOC}/lmdict.spad.dvi: ${IN}/lmdict.spad.pamphlet
	@ echo 0 making ${DOC}/lmdict.spad.dvi from ${IN}/lmdict.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lmdict.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lmdict.spad ; \
	rm -f ${DOC}/lmdict.spad.pamphlet ; \
	rm -f ${DOC}/lmdict.spad.tex ; \
	rm -f ${DOC}/lmdict.spad )

@
\subsection{lodof.spad \cite{1}}
<<lodof.spad (SPAD from IN)>>=
${MID}/lodof.spad: ${IN}/lodof.spad.pamphlet
	@ echo 0 making ${MID}/lodof.spad from ${IN}/lodof.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lodof.spad.pamphlet >lodof.spad )

@
<<ASSOCEQ.o (O from NRLIB)>>=
${OUT}/ASSOCEQ.o: ${MID}/ASSOCEQ.NRLIB
	@ echo 0 making ${OUT}/ASSOCEQ.o from ${MID}/ASSOCEQ.NRLIB
	@ cp ${MID}/ASSOCEQ.NRLIB/code.o ${OUT}/ASSOCEQ.o

@
<<ASSOCEQ.NRLIB (NRLIB from MID)>>=
${MID}/ASSOCEQ.NRLIB: ${MID}/ASSOCEQ.spad
	@ echo 0 making ${MID}/ASSOCEQ.NRLIB from ${MID}/ASSOCEQ.spad
	@ (cd ${MID} ; 	echo ')co ASSOCEQ.spad' | ${INTERPSYS} )

@
<<ASSOCEQ.spad (SPAD from IN)>>=
${MID}/ASSOCEQ.spad: ${IN}/lodof.spad.pamphlet
	@ echo 0 making ${MID}/ASSOCEQ.spad from ${IN}/lodof.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ASSOCEQ.NRLIB ; \
	${SPADBIN}/notangle -R"package ASSOCEQ AssociatedEquations" ${IN}/lodof.spad.pamphlet >ASSOCEQ.spad )

@
<<LODOF.o (O from NRLIB)>>=
${OUT}/LODOF.o: ${MID}/LODOF.NRLIB
	@ echo 0 making ${OUT}/LODOF.o from ${MID}/LODOF.NRLIB
	@ cp ${MID}/LODOF.NRLIB/code.o ${OUT}/LODOF.o

@
<<LODOF.NRLIB (NRLIB from MID)>>=
${MID}/LODOF.NRLIB: ${MID}/LODOF.spad
	@ echo 0 making ${MID}/LODOF.NRLIB from ${MID}/LODOF.spad
	@ (cd ${MID} ; 	echo ')co LODOF.spad' | ${INTERPSYS} )

@
<<LODOF.spad (SPAD from IN)>>=
${MID}/LODOF.spad: ${IN}/lodof.spad.pamphlet
	@ echo 0 making ${MID}/LODOF.spad from ${IN}/lodof.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LODOF.NRLIB ; \
	${SPADBIN}/notangle -R"package LODOF LinearOrdinaryDifferentialOperatorFactorizer" ${IN}/lodof.spad.pamphlet >LODOF.spad )

@
<<PREASSOC.o (O from NRLIB)>>=
${OUT}/PREASSOC.o: ${MID}/PREASSOC.NRLIB
	@ echo 0 making ${OUT}/PREASSOC.o from ${MID}/PREASSOC.NRLIB
	@ cp ${MID}/PREASSOC.NRLIB/code.o ${OUT}/PREASSOC.o

@
<<PREASSOC.NRLIB (NRLIB from MID)>>=
${MID}/PREASSOC.NRLIB: ${MID}/PREASSOC.spad
	@ echo 0 making ${MID}/PREASSOC.NRLIB from ${MID}/PREASSOC.spad
	@ (cd ${MID} ; 	echo ')co PREASSOC.spad' | ${INTERPSYS} )

@
<<PREASSOC.spad (SPAD from IN)>>=
${MID}/PREASSOC.spad: ${IN}/lodof.spad.pamphlet
	@ echo 0 making ${MID}/PREASSOC.spad from ${IN}/lodof.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PREASSOC.NRLIB ; \
	${SPADBIN}/notangle -R"package PREASSOC PrecomputedAssociatedEquations" ${IN}/lodof.spad.pamphlet >PREASSOC.spad )

@
<<SETMN.o (O from NRLIB)>>=
${OUT}/SETMN.o: ${MID}/SETMN.NRLIB
	@ echo 0 making ${OUT}/SETMN.o from ${MID}/SETMN.NRLIB
	@ cp ${MID}/SETMN.NRLIB/code.o ${OUT}/SETMN.o

@
<<SETMN.NRLIB (NRLIB from MID)>>=
${MID}/SETMN.NRLIB: ${MID}/SETMN.spad
	@ echo 0 making ${MID}/SETMN.NRLIB from ${MID}/SETMN.spad
	@ (cd ${MID} ; 	echo ')co SETMN.spad' | ${INTERPSYS} )

@
<<SETMN.spad (SPAD from IN)>>=
${MID}/SETMN.spad: ${IN}/lodof.spad.pamphlet
	@ echo 0 making ${MID}/SETMN.spad from ${IN}/lodof.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SETMN.NRLIB ; \
	${SPADBIN}/notangle -R"domain SETMN SetOfMIntegersInOneToN" ${IN}/lodof.spad.pamphlet >SETMN.spad )

@
<<lodof.spad.dvi (DOC from IN)>>=
${DOC}/lodof.spad.dvi: ${IN}/lodof.spad.pamphlet
	@ echo 0 making ${DOC}/lodof.spad.dvi from ${IN}/lodof.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lodof.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lodof.spad ; \
	rm -f ${DOC}/lodof.spad.pamphlet ; \
	rm -f ${DOC}/lodof.spad.tex ; \
	rm -f ${DOC}/lodof.spad )

@
\subsection{lodop.spad \cite{1}}
<<lodop.spad (SPAD from IN)>>=
${MID}/lodop.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/lodop.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lodop.spad.pamphlet >lodop.spad )

@
<<DPMO.o (O from NRLIB)>>=
${OUT}/DPMO.o: ${MID}/DPMO.NRLIB
	@ echo 0 making ${OUT}/DPMO.o from ${MID}/DPMO.NRLIB
	@ cp ${MID}/DPMO.NRLIB/code.o ${OUT}/DPMO.o

@
<<DPMO.NRLIB (NRLIB from MID)>>=
${MID}/DPMO.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DPMO.spad
	@ echo 0 making ${MID}/DPMO.NRLIB from ${MID}/DPMO.spad
	@ (cd ${MID} ; 	echo ')co DPMO.spad' | ${INTERPSYS} )

@
<<DPMO.spad (SPAD from IN)>>=
${MID}/DPMO.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/DPMO.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DPMO.NRLIB ; \
	${SPADBIN}/notangle -R"domain DPMO DirectProductModule" ${IN}/lodop.spad.pamphlet >DPMO.spad )

@
<<DPMM.o (O from NRLIB)>>=
${OUT}/DPMM.o: ${MID}/DPMM.NRLIB
	@ echo 0 making ${OUT}/DPMM.o from ${MID}/DPMM.NRLIB
	@ cp ${MID}/DPMM.NRLIB/code.o ${OUT}/DPMM.o

@
<<DPMM.NRLIB (NRLIB from MID)>>=
${MID}/DPMM.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DPMM.spad
	@ echo 0 making ${MID}/DPMM.NRLIB from ${MID}/DPMM.spad
	@ (cd ${MID} ; 	echo ')co DPMM.spad' | ${INTERPSYS} )

@
<<DPMM.spad (SPAD from IN)>>=
${MID}/DPMM.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/DPMM.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DPMM.NRLIB ; \
	${SPADBIN}/notangle -R"domain DPMM DirectProductMatrixModule" ${IN}/lodop.spad.pamphlet >DPMM.spad )

@
<<MLO.o (O from NRLIB)>>=
${OUT}/MLO.o: ${MID}/MLO.NRLIB
	@ echo 0 making ${OUT}/MLO.o from ${MID}/MLO.NRLIB
	@ cp ${MID}/MLO.NRLIB/code.o ${OUT}/MLO.o

@
<<MLO.NRLIB (NRLIB from MID)>>=
${MID}/MLO.NRLIB: ${MID}/MLO.spad
	@ echo 0 making ${MID}/MLO.NRLIB from ${MID}/MLO.spad
	@ (cd ${MID} ; 	echo ')co MLO.spad' | ${INTERPSYS} )

@
<<MLO.spad (SPAD from IN)>>=
${MID}/MLO.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/MLO.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MLO.NRLIB ; \
	${SPADBIN}/notangle -R"category MLO MonogenicLinearOperator" ${IN}/lodop.spad.pamphlet >MLO.spad )

@
<<NCODIV.o (O from NRLIB)>>=
${OUT}/NCODIV.o: ${MID}/NCODIV.NRLIB
	@ echo 0 making ${OUT}/NCODIV.o from ${MID}/NCODIV.NRLIB
	@ cp ${MID}/NCODIV.NRLIB/code.o ${OUT}/NCODIV.o

@
<<NCODIV.NRLIB (NRLIB from MID)>>=
${MID}/NCODIV.NRLIB: ${MID}/NCODIV.spad
	@ echo 0 making ${MID}/NCODIV.NRLIB from ${MID}/NCODIV.spad
	@ (cd ${MID} ; 	echo ')co NCODIV.spad' | ${INTERPSYS} )

@
<<NCODIV.spad (SPAD from IN)>>=
${MID}/NCODIV.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/NCODIV.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NCODIV.NRLIB ; \
	${SPADBIN}/notangle -R"package NCODIV NonCommutativeOperatorDivision" ${IN}/lodop.spad.pamphlet >NCODIV.spad )

@
<<ODR.o (O from NRLIB)>>=
${OUT}/ODR.o: ${MID}/ODR.NRLIB
	@ echo 0 making ${OUT}/ODR.o from ${MID}/ODR.NRLIB
	@ cp ${MID}/ODR.NRLIB/code.o ${OUT}/ODR.o

@
<<ODR.NRLIB (NRLIB from MID)>>=
${MID}/ODR.NRLIB: ${MID}/ODR.spad
	@ echo 0 making ${MID}/ODR.NRLIB from ${MID}/ODR.spad
	@ (cd ${MID} ; 	echo ')co ODR.spad' | ${INTERPSYS} )

@
<<ODR.spad (SPAD from IN)>>=
${MID}/ODR.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/ODR.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODR.NRLIB ; \
	${SPADBIN}/notangle -R"domain ODR OrdinaryDifferentialRing" ${IN}/lodop.spad.pamphlet >ODR.spad )

@
<<OMLO.o (O from NRLIB)>>=
${OUT}/OMLO.o: ${MID}/OMLO.NRLIB
	@ echo 0 making ${OUT}/OMLO.o from ${MID}/OMLO.NRLIB
	@ cp ${MID}/OMLO.NRLIB/code.o ${OUT}/OMLO.o

@
<<OMLO.NRLIB (NRLIB from MID)>>=
${MID}/OMLO.NRLIB: ${MID}/OMLO.spad
	@ echo 0 making ${MID}/OMLO.NRLIB from ${MID}/OMLO.spad
	@ (cd ${MID} ; 	echo ')co OMLO.spad' | ${INTERPSYS} )

@
<<OMLO.spad (SPAD from IN)>>=
${MID}/OMLO.spad: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${MID}/OMLO.spad from ${IN}/lodop.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMLO.NRLIB ; \
	${SPADBIN}/notangle -R"domain OMLO OppositeMonogenicLinearOperator" ${IN}/lodop.spad.pamphlet >OMLO.spad )

@
<<lodop.spad.dvi (DOC from IN)>>=
${DOC}/lodop.spad.dvi: ${IN}/lodop.spad.pamphlet
	@ echo 0 making ${DOC}/lodop.spad.dvi from ${IN}/lodop.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lodop.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lodop.spad ; \
	rm -f ${DOC}/lodop.spad.pamphlet ; \
	rm -f ${DOC}/lodop.spad.tex ; \
	rm -f ${DOC}/lodop.spad )

@
\subsection{lodo.spad \cite{1}}
<<lodo.spad (SPAD from IN)>>=
${MID}/lodo.spad: ${IN}/lodo.spad.pamphlet
	@ echo 0 making ${MID}/lodo.spad from ${IN}/lodo.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/lodo.spad.pamphlet >lodo.spad )

@
<<LODO1.o (O from NRLIB)>>=
${OUT}/LODO1.o: ${MID}/LODO1.NRLIB
	@ echo 0 making ${OUT}/LODO1.o from ${MID}/LODO1.NRLIB
	@ cp ${MID}/LODO1.NRLIB/code.o ${OUT}/LODO1.o

@
<<LODO1.NRLIB (NRLIB from MID)>>=
${MID}/LODO1.NRLIB: ${MID}/LODO1.spad
	@ echo 0 making ${MID}/LODO1.NRLIB from ${MID}/LODO1.spad
	@ (cd ${MID} ; 	echo ')co LODO1.spad' | ${INTERPSYS} )

@
<<LODO1.spad (SPAD from IN)>>=
${MID}/LODO1.spad: ${IN}/lodo.spad.pamphlet
	@ echo 0 making ${MID}/LODO1.spad from ${IN}/lodo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LODO1.NRLIB ; \
	${SPADBIN}/notangle -R"domain LODO1 LinearOrdinaryDifferentialOperator1" ${IN}/lodo.spad.pamphlet >LODO1.spad )

@
<<LODO2.o (O from NRLIB)>>=
${OUT}/LODO2.o: ${MID}/LODO2.NRLIB
	@ echo 0 making ${OUT}/LODO2.o from ${MID}/LODO2.NRLIB
	@ cp ${MID}/LODO2.NRLIB/code.o ${OUT}/LODO2.o

@
<<LODO2.NRLIB (NRLIB from MID)>>=
${MID}/LODO2.NRLIB: ${MID}/LODO2.spad
	@ echo 0 making ${MID}/LODO2.NRLIB from ${MID}/LODO2.spad
	@ (cd ${MID} ; 	echo ')co LODO2.spad' | ${INTERPSYS} )

@
<<LODO2.spad (SPAD from IN)>>=
${MID}/LODO2.spad: ${IN}/lodo.spad.pamphlet
	@ echo 0 making ${MID}/LODO2.spad from ${IN}/lodo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LODO2.NRLIB ; \
	${SPADBIN}/notangle -R"domain LODO2 LinearOrdinaryDifferentialOperator2" ${IN}/lodo.spad.pamphlet >LODO2.spad )

@
<<LODOCAT-.o (O from NRLIB)>>=
${OUT}/LODOCAT-.o: ${MID}/LODOCAT.NRLIB
	@ echo 0 making ${OUT}/LODOCAT-.o from ${MID}/LODOCAT-.NRLIB
	@ cp ${MID}/LODOCAT-.NRLIB/code.o ${OUT}/LODOCAT-.o

@
<<LODOCAT-.NRLIB (NRLIB from MID)>>=
${MID}/LODOCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/LODOCAT.spad 
	@ echo 0 making ${MID}/LODOCAT-.NRLIB from ${MID}/LODOCAT.spad
	@ (cd ${MID} ; 	echo ')co LODOCAT.spad' | ${INTERPSYS} )

@
<<LODOCAT.o (O from NRLIB)>>=
${OUT}/LODOCAT.o: ${MID}/LODOCAT.NRLIB
	@ echo 0 making ${OUT}/LODOCAT.o from ${MID}/LODOCAT.NRLIB
	@ cp ${MID}/LODOCAT.NRLIB/code.o ${OUT}/LODOCAT.o

@
<<LODOCAT.NRLIB (NRLIB from MID)>>=
${MID}/LODOCAT.NRLIB: ${MID}/LODOCAT.spad
	@ echo 0 making ${MID}/LODOCAT.NRLIB from ${MID}/LODOCAT.spad
	@ (cd ${MID} ; 	echo ')co LODOCAT.spad' | ${INTERPSYS} )

@
<<LODOCAT.spad (SPAD from IN)>>=
${MID}/LODOCAT.spad: ${IN}/lodo.spad.pamphlet
	@ echo 0 making ${MID}/LODOCAT.spad from ${IN}/lodo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LODOCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category LODOCAT LinearOrdinaryDifferentialOperatorCategory" ${IN}/lodo.spad.pamphlet >LODOCAT.spad )

@
<<LODOOPS.o (O from NRLIB)>>=
${OUT}/LODOOPS.o: ${MID}/LODOOPS.NRLIB
	@ echo 0 making ${OUT}/LODOOPS.o from ${MID}/LODOOPS.NRLIB
	@ cp ${MID}/LODOOPS.NRLIB/code.o ${OUT}/LODOOPS.o

@
<<LODOOPS.NRLIB (NRLIB from MID)>>=
${MID}/LODOOPS.NRLIB: ${MID}/LODOOPS.spad
	@ echo 0 making ${MID}/LODOOPS.NRLIB from ${MID}/LODOOPS.spad
	@ (cd ${MID} ; 	echo ')co LODOOPS.spad' | ${INTERPSYS} )

@
<<LODOOPS.spad (SPAD from IN)>>=
${MID}/LODOOPS.spad: ${IN}/lodo.spad.pamphlet
	@ echo 0 making ${MID}/LODOOPS.spad from ${IN}/lodo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LODOOPS.NRLIB ; \
	${SPADBIN}/notangle -R"package LODOOPS LinearOrdinaryDifferentialOperatorsOps" ${IN}/lodo.spad.pamphlet >LODOOPS.spad )

@
<<lodo.spad.dvi (DOC from IN)>>=
${DOC}/lodo.spad.dvi: ${IN}/lodo.spad.pamphlet
	@ echo 0 making ${DOC}/lodo.spad.dvi from ${IN}/lodo.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/lodo.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} lodo.spad ; \
	rm -f ${DOC}/lodo.spad.pamphlet ; \
	rm -f ${DOC}/lodo.spad.tex ; \
	rm -f ${DOC}/lodo.spad )

@
\subsection{manip.spad \cite{1}}
<<manip.spad (SPAD from IN)>>=
${MID}/manip.spad: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${MID}/manip.spad from ${IN}/manip.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/manip.spad.pamphlet >manip.spad )

@
<<ALGMANIP.o (O from NRLIB)>>=
${OUT}/ALGMANIP.o: ${MID}/ALGMANIP.NRLIB
	@ echo 0 making ${OUT}/ALGMANIP.o from ${MID}/ALGMANIP.NRLIB
	@ cp ${MID}/ALGMANIP.NRLIB/code.o ${OUT}/ALGMANIP.o

@
<<ALGMANIP.NRLIB (NRLIB from MID)>>=
${MID}/ALGMANIP.NRLIB: ${MID}/ALGMANIP.spad
	@ echo 0 making ${MID}/ALGMANIP.NRLIB from ${MID}/ALGMANIP.spad
	@ (cd ${MID} ; 	echo ')co ALGMANIP.spad' | ${INTERPSYS} )

@
<<ALGMANIP.spad (SPAD from IN)>>=
${MID}/ALGMANIP.spad: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${MID}/ALGMANIP.spad from ${IN}/manip.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGMANIP.NRLIB ; \
	${SPADBIN}/notangle -R"package ALGMANIP AlgebraicManipulations" ${IN}/manip.spad.pamphlet >ALGMANIP.spad )

@
<<FACTFUNC.o (O from NRLIB)>>=
${OUT}/FACTFUNC.o: ${MID}/FACTFUNC.NRLIB
	@ echo 0 making ${OUT}/FACTFUNC.o from ${MID}/FACTFUNC.NRLIB
	@ cp ${MID}/FACTFUNC.NRLIB/code.o ${OUT}/FACTFUNC.o

@
<<FACTFUNC.NRLIB (NRLIB from MID)>>=
${MID}/FACTFUNC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FACTFUNC.spad
	@ echo 0 making ${MID}/FACTFUNC.NRLIB from ${MID}/FACTFUNC.spad
	@ (cd ${MID} ; 	echo ')co FACTFUNC.spad' | ${INTERPSYS} )

@
<<FACTFUNC.spad (SPAD from IN)>>=
${MID}/FACTFUNC.spad: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${MID}/FACTFUNC.spad from ${IN}/manip.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FACTFUNC.NRLIB ; \
	${SPADBIN}/notangle -R"package FACTFUNC FactoredFunctions" ${IN}/manip.spad.pamphlet >FACTFUNC.spad )

@
<<POLYROOT.o (O from NRLIB)>>=
${OUT}/POLYROOT.o: ${MID}/POLYROOT.NRLIB
	@ echo 0 making ${OUT}/POLYROOT.o from ${MID}/POLYROOT.NRLIB
	@ cp ${MID}/POLYROOT.NRLIB/code.o ${OUT}/POLYROOT.o

@
<<POLYROOT.NRLIB (NRLIB from MID)>>=
${MID}/POLYROOT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLYROOT.spad
	@ echo 0 making ${MID}/POLYROOT.NRLIB from ${MID}/POLYROOT.spad
	@ (cd ${MID} ; 	echo ')co POLYROOT.spad' | ${INTERPSYS} )

@
<<POLYROOT.spad (SPAD from IN)>>=
${MID}/POLYROOT.spad: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${MID}/POLYROOT.spad from ${IN}/manip.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLYROOT.NRLIB ; \
	${SPADBIN}/notangle -R"package POLYROOT PolynomialRoots" ${IN}/manip.spad.pamphlet >POLYROOT.spad )

@
<<SIMPAN.o (O from NRLIB)>>=
${OUT}/SIMPAN.o: ${MID}/SIMPAN.NRLIB
	@ echo 0 making ${OUT}/SIMPAN.o from ${MID}/SIMPAN.NRLIB
	@ cp ${MID}/SIMPAN.NRLIB/code.o ${OUT}/SIMPAN.o

@
<<SIMPAN.NRLIB (NRLIB from MID)>>=
${MID}/SIMPAN.NRLIB: ${MID}/SIMPAN.spad
	@ echo 0 making ${MID}/SIMPAN.NRLIB from ${MID}/SIMPAN.spad
	@ (cd ${MID} ; 	echo ')co SIMPAN.spad' | ${INTERPSYS} )

@
<<SIMPAN.spad (SPAD from IN)>>=
${MID}/SIMPAN.spad: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${MID}/SIMPAN.spad from ${IN}/manip.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SIMPAN.NRLIB ; \
	${SPADBIN}/notangle -R"package SIMPAN SimplifyAlgebraicNumberConvertPackage" ${IN}/manip.spad.pamphlet >SIMPAN.spad )

@
<<TRMANIP.o (O from NRLIB)>>=
${OUT}/TRMANIP.o: ${MID}/TRMANIP.NRLIB
	@ echo 0 making ${OUT}/TRMANIP.o from ${MID}/TRMANIP.NRLIB
	@ cp ${MID}/TRMANIP.NRLIB/code.o ${OUT}/TRMANIP.o

@
<<TRMANIP.NRLIB (NRLIB from MID)>>=
${MID}/TRMANIP.NRLIB: ${MID}/TRMANIP.spad
	@ echo 0 making ${MID}/TRMANIP.NRLIB from ${MID}/TRMANIP.spad
	@ (cd ${MID} ; 	echo ')co TRMANIP.spad' | ${INTERPSYS} )

@
<<TRMANIP.spad (SPAD from IN)>>=
${MID}/TRMANIP.spad: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${MID}/TRMANIP.spad from ${IN}/manip.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TRMANIP.NRLIB ; \
	${SPADBIN}/notangle -R"package TRMANIP TranscendentalManipulations" ${IN}/manip.spad.pamphlet >TRMANIP.spad )

@
<<manip.spad.dvi (DOC from IN)>>=
${DOC}/manip.spad.dvi: ${IN}/manip.spad.pamphlet
	@ echo 0 making ${DOC}/manip.spad.dvi from ${IN}/manip.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/manip.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} manip.spad ; \
	rm -f ${DOC}/manip.spad.pamphlet ; \
	rm -f ${DOC}/manip.spad.tex ; \
	rm -f ${DOC}/manip.spad )

@
\subsection{mappkg.spad \cite{1}}
<<mappkg.spad (SPAD from IN)>>=
${MID}/mappkg.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/mappkg.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mappkg.spad.pamphlet >mappkg.spad )

@
<<MAPHACK1.o (O from NRLIB)>>=
${OUT}/MAPHACK1.o: ${MID}/MAPHACK1.NRLIB
	@ echo 0 making ${OUT}/MAPHACK1.o from ${MID}/MAPHACK1.NRLIB
	@ cp ${MID}/MAPHACK1.NRLIB/code.o ${OUT}/MAPHACK1.o

@
<<MAPHACK1.NRLIB (NRLIB from MID)>>=
${MID}/MAPHACK1.NRLIB: ${MID}/MAPHACK1.spad
	@ echo 0 making ${MID}/MAPHACK1.NRLIB from ${MID}/MAPHACK1.spad
	@ (cd ${MID} ; 	echo ')co MAPHACK1.spad' | ${INTERPSYS} )

@
<<MAPHACK1.spad (SPAD from IN)>>=
${MID}/MAPHACK1.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/MAPHACK1.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAPHACK1.NRLIB ; \
	${SPADBIN}/notangle -R"package MAPHACK1 MappingPackageInternalHacks1" ${IN}/mappkg.spad.pamphlet >MAPHACK1.spad )

@
<<MAPHACK2.o (O from NRLIB)>>=
${OUT}/MAPHACK2.o: ${MID}/MAPHACK2.NRLIB
	@ echo 0 making ${OUT}/MAPHACK2.o from ${MID}/MAPHACK2.NRLIB
	@ cp ${MID}/MAPHACK2.NRLIB/code.o ${OUT}/MAPHACK2.o

@
<<MAPHACK2.NRLIB (NRLIB from MID)>>=
${MID}/MAPHACK2.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/MAPHACK2.spad
	@ echo 0 making ${MID}/MAPHACK2.NRLIB from ${MID}/MAPHACK2.spad
	@ (cd ${MID} ; 	echo ')co MAPHACK2.spad' | ${INTERPSYS} )

@
<<MAPHACK2.spad (SPAD from IN)>>=
${MID}/MAPHACK2.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/MAPHACK2.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAPHACK2.NRLIB ; \
	${SPADBIN}/notangle -R"package MAPHACK2 MappingPackageInternalHacks2" ${IN}/mappkg.spad.pamphlet >MAPHACK2.spad )

@
<<MAPHACK3.o (O from NRLIB)>>=
${OUT}/MAPHACK3.o: ${MID}/MAPHACK3.NRLIB
	@ echo 0 making ${OUT}/MAPHACK3.o from ${MID}/MAPHACK3.NRLIB
	@ cp ${MID}/MAPHACK3.NRLIB/code.o ${OUT}/MAPHACK3.o

@
<<MAPHACK3.NRLIB (NRLIB from MID)>>=
${MID}/MAPHACK3.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/MAPHACK3.spad
	@ echo 0 making ${MID}/MAPHACK3.NRLIB from ${MID}/MAPHACK3.spad
	@ (cd ${MID} ; 	echo ')co MAPHACK3.spad' | ${INTERPSYS} )

@
<<MAPHACK3.spad (SPAD from IN)>>=
${MID}/MAPHACK3.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/MAPHACK3.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAPHACK3.NRLIB ; \
	${SPADBIN}/notangle -R"package MAPHACK3 MappingPackageInternalHacks3" ${IN}/mappkg.spad.pamphlet >MAPHACK3.spad )

@
<<MAPPKG1.o (O from NRLIB)>>=
${OUT}/MAPPKG1.o: ${MID}/MAPPKG1.NRLIB
	@ echo 0 making ${OUT}/MAPPKG1.o from ${MID}/MAPPKG1.NRLIB
	@ cp ${MID}/MAPPKG1.NRLIB/code.o ${OUT}/MAPPKG1.o

@
<<MAPPKG1.NRLIB (NRLIB from MID)>>=
${MID}/MAPPKG1.NRLIB: ${MID}/MAPPKG1.spad
	@ echo 0 making ${MID}/MAPPKG1.NRLIB from ${MID}/MAPPKG1.spad
	@ (cd ${MID} ; 	echo ')co MAPPKG1.spad' | ${INTERPSYS} )

@
<<MAPPKG1.spad (SPAD from IN)>>=
${MID}/MAPPKG1.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/MAPPKG1.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAPPKG1.NRLIB ; \
	${SPADBIN}/notangle -R"package MAPPKG1 MappingPackage1" ${IN}/mappkg.spad.pamphlet >MAPPKG1.spad )

@
<<MAPPKG2.o (O from NRLIB)>>=
${OUT}/MAPPKG2.o: ${MID}/MAPPKG2.NRLIB
	@ echo 0 making ${OUT}/MAPPKG2.o from ${MID}/MAPPKG2.NRLIB
	@ cp ${MID}/MAPPKG2.NRLIB/code.o ${OUT}/MAPPKG2.o

@
<<MAPPKG2.NRLIB (NRLIB from MID)>>=
${MID}/MAPPKG2.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/MAPPKG2.spad
	@ echo 0 making ${MID}/MAPPKG2.NRLIB from ${MID}/MAPPKG2.spad
	@ (cd ${MID} ; 	echo ')co MAPPKG2.spad' | ${INTERPSYS} )

@
<<MAPPKG2.spad (SPAD from IN)>>=
${MID}/MAPPKG2.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/MAPPKG2.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAPPKG2.NRLIB ; \
	${SPADBIN}/notangle -R"package MAPPKG2 MappingPackage2" ${IN}/mappkg.spad.pamphlet >MAPPKG2.spad )

@
<<MAPPKG3.o (O from NRLIB)>>=
${OUT}/MAPPKG3.o: ${MID}/MAPPKG3.NRLIB
	@ echo 0 making ${OUT}/MAPPKG3.o from ${MID}/MAPPKG3.NRLIB
	@ cp ${MID}/MAPPKG3.NRLIB/code.o ${OUT}/MAPPKG3.o

@
<<MAPPKG3.NRLIB (NRLIB from MID)>>=
${MID}/MAPPKG3.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/MAPPKG3.spad
	@ echo 0 making ${MID}/MAPPKG3.NRLIB from ${MID}/MAPPKG3.spad
	@ (cd ${MID} ; 	echo ')co MAPPKG3.spad' | ${INTERPSYS} )

@
<<MAPPKG3.spad (SPAD from IN)>>=
${MID}/MAPPKG3.spad: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${MID}/MAPPKG3.spad from ${IN}/mappkg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAPPKG3.NRLIB ; \
	${SPADBIN}/notangle -R"package MAPPKG3 MappingPackage3" ${IN}/mappkg.spad.pamphlet >MAPPKG3.spad )

@
<<mappkg.spad.dvi (DOC from IN)>>=
${DOC}/mappkg.spad.dvi: ${IN}/mappkg.spad.pamphlet
	@ echo 0 making ${DOC}/mappkg.spad.dvi from ${IN}/mappkg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mappkg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mappkg.spad ; \
	rm -f ${DOC}/mappkg.spad.pamphlet ; \
	rm -f ${DOC}/mappkg.spad.tex ; \
	rm -f ${DOC}/mappkg.spad )

@
\subsection{matcat.spad \cite{1}}
<<matcat.spad (SPAD from IN)>>=
${MID}/matcat.spad: ${IN}/matcat.spad.pamphlet
	@ echo 0 making ${MID}/matcat.spad from ${IN}/matcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/matcat.spad.pamphlet >matcat.spad )

@
<<MATCAT-.o (O from NRLIB)>>=
${OUT}/MATCAT-.o: ${MID}/MATCAT.NRLIB
	@ echo 0 making ${OUT}/MATCAT-.o from ${MID}/MATCAT-.NRLIB
	@ cp ${MID}/MATCAT-.NRLIB/code.o ${OUT}/MATCAT-.o

@
<<MATCAT-.NRLIB (NRLIB from MID)>>=
${MID}/MATCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/MATCAT.spad 
	@ echo 0 making ${MID}/MATCAT-.NRLIB from ${MID}/MATCAT.spad
	@ (cd ${MID} ; 	echo ')co MATCAT.spad' | ${INTERPSYS} )

@
<<MATCAT.o (O from NRLIB)>>=
${OUT}/MATCAT.o: ${MID}/MATCAT.NRLIB
	@ echo 0 making ${OUT}/MATCAT.o from ${MID}/MATCAT.NRLIB
	@ cp ${MID}/MATCAT.NRLIB/code.o ${OUT}/MATCAT.o

@
<<MATCAT.NRLIB (NRLIB from MID)>>=
${MID}/MATCAT.NRLIB: ${MID}/MATCAT.spad
	@ echo 0 making ${MID}/MATCAT.NRLIB from ${MID}/MATCAT.spad
	@ (cd ${MID} ; 	echo ')co MATCAT.spad' | ${INTERPSYS} )

@
<<MATCAT.spad (SPAD from IN)>>=
${MID}/MATCAT.spad: ${IN}/matcat.spad.pamphlet
	@ echo 0 making ${MID}/MATCAT.spad from ${IN}/matcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MATCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category MATCAT MatrixCategory" ${IN}/matcat.spad.pamphlet >MATCAT.spad )

@
<<RMATCAT-.o (O from NRLIB)>>=
${OUT}/RMATCAT-.o: ${MID}/RMATCAT.NRLIB
	@ echo 0 making ${OUT}/RMATCAT-.o from ${MID}/RMATCAT-.NRLIB
	@ cp ${MID}/RMATCAT-.NRLIB/code.o ${OUT}/RMATCAT-.o

@
<<RMATCAT-.NRLIB (NRLIB from MID)>>=
${MID}/RMATCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/RMATCAT.spad 
	@ echo 0 making ${MID}/RMATCAT-.NRLIB from ${MID}/RMATCAT.spad
	@ (cd ${MID} ; 	echo ')co RMATCAT.spad' | ${INTERPSYS} )

@
<<RMATCAT.o (O from NRLIB)>>=
${OUT}/RMATCAT.o: ${MID}/RMATCAT.NRLIB
	@ echo 0 making ${OUT}/RMATCAT.o from ${MID}/RMATCAT.NRLIB
	@ cp ${MID}/RMATCAT.NRLIB/code.o ${OUT}/RMATCAT.o

@
<<RMATCAT.NRLIB (NRLIB from MID)>>=
${MID}/RMATCAT.NRLIB: ${MID}/RMATCAT.spad
	@ echo 0 making ${MID}/RMATCAT.NRLIB from ${MID}/RMATCAT.spad
	@ (cd ${MID} ; 	echo ')co RMATCAT.spad' | ${INTERPSYS} )

@
<<RMATCAT.spad (SPAD from IN)>>=
${MID}/RMATCAT.spad: ${IN}/matcat.spad.pamphlet
	@ echo 0 making ${MID}/RMATCAT.spad from ${IN}/matcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RMATCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category RMATCAT RectangularMatrixCategory" ${IN}/matcat.spad.pamphlet >RMATCAT.spad )

@
<<SMATCAT-.o (O from NRLIB)>>=
${OUT}/SMATCAT-.o: ${MID}/SMATCAT.NRLIB
	@ echo 0 making ${OUT}/SMATCAT-.o from ${MID}/SMATCAT-.NRLIB
	@ cp ${MID}/SMATCAT-.NRLIB/code.o ${OUT}/SMATCAT-.o

@
<<SMATCAT-.NRLIB (NRLIB from MID)>>=
${MID}/SMATCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/SMATCAT.spad 
	@ echo 0 making ${MID}/SMATCAT-.NRLIB from ${MID}/SMATCAT.spad
	@ (cd ${MID} ; 	echo ')co SMATCAT.spad' | ${INTERPSYS} )

@
<<SMATCAT.o (O from NRLIB)>>=
${OUT}/SMATCAT.o: ${MID}/SMATCAT.NRLIB
	@ echo 0 making ${OUT}/SMATCAT.o from ${MID}/SMATCAT.NRLIB
	@ cp ${MID}/SMATCAT.NRLIB/code.o ${OUT}/SMATCAT.o

@
<<SMATCAT.NRLIB (NRLIB from MID)>>=
${MID}/SMATCAT.NRLIB: ${MID}/SMATCAT.spad
	@ echo 0 making ${MID}/SMATCAT.NRLIB from ${MID}/SMATCAT.spad
	@ (cd ${MID} ; 	echo ')co SMATCAT.spad' | ${INTERPSYS} )

@
<<SMATCAT.spad (SPAD from IN)>>=
${MID}/SMATCAT.spad: ${IN}/matcat.spad.pamphlet
	@ echo 0 making ${MID}/SMATCAT.spad from ${IN}/matcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SMATCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category SMATCAT SquareMatrixCategory" ${IN}/matcat.spad.pamphlet >SMATCAT.spad )

@
<<matcat.spad.dvi (DOC from IN)>>=
${DOC}/matcat.spad.dvi: ${IN}/matcat.spad.pamphlet
	@ echo 0 making ${DOC}/matcat.spad.dvi from ${IN}/matcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/matcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} matcat.spad ; \
	rm -f ${DOC}/matcat.spad.pamphlet ; \
	rm -f ${DOC}/matcat.spad.tex ; \
	rm -f ${DOC}/matcat.spad )

@
\subsection{matfuns.spad \cite{1}}
<<matfuns.spad (SPAD from IN)>>=
${MID}/matfuns.spad: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${MID}/matfuns.spad from ${IN}/matfuns.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/matfuns.spad.pamphlet >matfuns.spad )

@
<<IMATLIN.o (O from NRLIB)>>=
${OUT}/IMATLIN.o: ${MID}/IMATLIN.NRLIB
	@ echo 0 making ${OUT}/IMATLIN.o from ${MID}/IMATLIN.NRLIB
	@ cp ${MID}/IMATLIN.NRLIB/code.o ${OUT}/IMATLIN.o

@
<<IMATLIN.NRLIB (NRLIB from MID)>>=
${MID}/IMATLIN.NRLIB: ${MID}/IMATLIN.spad
	@ echo 0 making ${MID}/IMATLIN.NRLIB from ${MID}/IMATLIN.spad
	@ (cd ${MID} ; 	echo ')co IMATLIN.spad' | ${INTERPSYS} )

@
<<IMATLIN.spad (SPAD from IN)>>=
${MID}/IMATLIN.spad: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${MID}/IMATLIN.spad from ${IN}/matfuns.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IMATLIN.NRLIB ; \
	${SPADBIN}/notangle -R"package IMATLIN InnerMatrixLinearAlgebraFunctions" ${IN}/matfuns.spad.pamphlet >IMATLIN.spad )

@
<<IMATQF.o (O from NRLIB)>>=
${OUT}/IMATQF.o: ${MID}/IMATQF.NRLIB
	@ echo 0 making ${OUT}/IMATQF.o from ${MID}/IMATQF.NRLIB
	@ cp ${MID}/IMATQF.NRLIB/code.o ${OUT}/IMATQF.o

@
<<IMATQF.NRLIB (NRLIB from MID)>>=
${MID}/IMATQF.NRLIB: ${MID}/IMATQF.spad
	@ echo 0 making ${MID}/IMATQF.NRLIB from ${MID}/IMATQF.spad
	@ (cd ${MID} ; 	echo ')co IMATQF.spad' | ${INTERPSYS} )

@
<<IMATQF.spad (SPAD from IN)>>=
${MID}/IMATQF.spad: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${MID}/IMATQF.spad from ${IN}/matfuns.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IMATQF.NRLIB ; \
	${SPADBIN}/notangle -R"package IMATQF InnerMatrixQuotientFieldFunctions" ${IN}/matfuns.spad.pamphlet >IMATQF.spad )

@
<<MATCAT2.o (O from NRLIB)>>=
${OUT}/MATCAT2.o: ${MID}/MATCAT2.NRLIB
	@ echo 0 making ${OUT}/MATCAT2.o from ${MID}/MATCAT2.NRLIB
	@ cp ${MID}/MATCAT2.NRLIB/code.o ${OUT}/MATCAT2.o

@
<<MATCAT2.NRLIB (NRLIB from MID)>>=
${MID}/MATCAT2.NRLIB: ${MID}/MATCAT2.spad
	@ echo 0 making ${MID}/MATCAT2.NRLIB from ${MID}/MATCAT2.spad
	@ (cd ${MID} ; 	echo ')co MATCAT2.spad' | ${INTERPSYS} )

@
<<MATCAT2.spad (SPAD from IN)>>=
${MID}/MATCAT2.spad: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${MID}/MATCAT2.spad from ${IN}/matfuns.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MATCAT2.NRLIB ; \
	${SPADBIN}/notangle -R"package MATCAT2 MatrixCategoryFunctions2" ${IN}/matfuns.spad.pamphlet >MATCAT2.spad )

@
<<MATLIN.o (O from NRLIB)>>=
${OUT}/MATLIN.o: ${MID}/MATLIN.NRLIB
	@ echo 0 making ${OUT}/MATLIN.o from ${MID}/MATLIN.NRLIB
	@ cp ${MID}/MATLIN.NRLIB/code.o ${OUT}/MATLIN.o

@
<<MATLIN.NRLIB (NRLIB from MID)>>=
${MID}/MATLIN.NRLIB: ${MID}/MATLIN.spad
	@ echo 0 making ${MID}/MATLIN.NRLIB from ${MID}/MATLIN.spad
	@ (cd ${MID} ; 	echo ')co MATLIN.spad' | ${INTERPSYS} )

@
<<MATLIN.spad (SPAD from IN)>>=
${MID}/MATLIN.spad: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${MID}/MATLIN.spad from ${IN}/matfuns.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MATLIN.NRLIB ; \
	${SPADBIN}/notangle -R"package MATLIN MatrixLinearAlgebraFunctions" ${IN}/matfuns.spad.pamphlet >MATLIN.spad )

@
<<RMCAT2.o (O from NRLIB)>>=
${OUT}/RMCAT2.o: ${MID}/RMCAT2.NRLIB
	@ echo 0 making ${OUT}/RMCAT2.o from ${MID}/RMCAT2.NRLIB
	@ cp ${MID}/RMCAT2.NRLIB/code.o ${OUT}/RMCAT2.o

@
<<RMCAT2.NRLIB (NRLIB from MID)>>=
${MID}/RMCAT2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/RMCAT2.spad
	@ echo 0 making ${MID}/RMCAT2.NRLIB from ${MID}/RMCAT2.spad
	@ (cd ${MID} ; 	echo ')co RMCAT2.spad' | ${INTERPSYS} )

@
<<RMCAT2.spad (SPAD from IN)>>=
${MID}/RMCAT2.spad: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${MID}/RMCAT2.spad from ${IN}/matfuns.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RMCAT2.NRLIB ; \
	${SPADBIN}/notangle -R"package RMCAT2 RectangularMatrixCategoryFunctions2" ${IN}/matfuns.spad.pamphlet >RMCAT2.spad )

@
<<matfuns.spad.dvi (DOC from IN)>>=
${DOC}/matfuns.spad.dvi: ${IN}/matfuns.spad.pamphlet
	@ echo 0 making ${DOC}/matfuns.spad.dvi from ${IN}/matfuns.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/matfuns.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} matfuns.spad ; \
	rm -f ${DOC}/matfuns.spad.pamphlet ; \
	rm -f ${DOC}/matfuns.spad.tex ; \
	rm -f ${DOC}/matfuns.spad )

@
\subsection{matrix.spad \cite{1}}
<<matrix.spad (SPAD from IN)>>=
${MID}/matrix.spad: ${IN}/matrix.spad.pamphlet
	@ echo 0 making ${MID}/matrix.spad from ${IN}/matrix.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/matrix.spad.pamphlet >matrix.spad )

@
<<IMATRIX.o (O from NRLIB)>>=
${OUT}/IMATRIX.o: ${MID}/IMATRIX.NRLIB
	@ echo 0 making ${OUT}/IMATRIX.o from ${MID}/IMATRIX.NRLIB
	@ cp ${MID}/IMATRIX.NRLIB/code.o ${OUT}/IMATRIX.o

@
<<IMATRIX.NRLIB (NRLIB from MID)>>=
${MID}/IMATRIX.NRLIB: ${MID}/IMATRIX.spad
	@ echo 0 making ${MID}/IMATRIX.NRLIB from ${MID}/IMATRIX.spad
	@ (cd ${MID} ; 	echo ')co IMATRIX.spad' | ${INTERPSYS} )

@
<<IMATRIX.spad (SPAD from IN)>>=
${MID}/IMATRIX.spad: ${IN}/matrix.spad.pamphlet
	@ echo 0 making ${MID}/IMATRIX.spad from ${IN}/matrix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IMATRIX.NRLIB ; \
	${SPADBIN}/notangle -R"domain IMATRIX IndexedMatrix" ${IN}/matrix.spad.pamphlet >IMATRIX.spad )

@
<<MATRIX.o (O from NRLIB)>>=
${OUT}/MATRIX.o: ${MID}/MATRIX.NRLIB
	@ echo 0 making ${OUT}/MATRIX.o from ${MID}/MATRIX.NRLIB
	@ cp ${MID}/MATRIX.NRLIB/code.o ${OUT}/MATRIX.o

@
<<MATRIX.NRLIB (NRLIB from MID)>>=
${MID}/MATRIX.NRLIB: ${MID}/MATRIX.spad
	@ echo 0 making ${MID}/MATRIX.NRLIB from ${MID}/MATRIX.spad
	@ (cd ${MID} ; 	echo ')co MATRIX.spad' | ${INTERPSYS} )

@
<<MATRIX.spad (SPAD from IN)>>=
${MID}/MATRIX.spad: ${IN}/matrix.spad.pamphlet
	@ echo 0 making ${MID}/MATRIX.spad from ${IN}/matrix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MATRIX.NRLIB ; \
	${SPADBIN}/notangle -R"domain MATRIX Matrix" ${IN}/matrix.spad.pamphlet >MATRIX.spad )

@
<<RMATRIX.o (O from NRLIB)>>=
${OUT}/RMATRIX.o: ${MID}/RMATRIX.NRLIB
	@ echo 0 making ${OUT}/RMATRIX.o from ${MID}/RMATRIX.NRLIB
	@ cp ${MID}/RMATRIX.NRLIB/code.o ${OUT}/RMATRIX.o

@
<<RMATRIX.NRLIB (NRLIB from MID)>>=
${MID}/RMATRIX.NRLIB: ${MID}/RMATRIX.spad
	@ echo 0 making ${MID}/RMATRIX.NRLIB from ${MID}/RMATRIX.spad
	@ (cd ${MID} ; 	echo ')co RMATRIX.spad' | ${INTERPSYS} )

@
<<RMATRIX.spad (SPAD from IN)>>=
${MID}/RMATRIX.spad: ${IN}/matrix.spad.pamphlet
	@ echo 0 making ${MID}/RMATRIX.spad from ${IN}/matrix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RMATRIX.NRLIB ; \
	${SPADBIN}/notangle -R"domain RMATRIX RectangularMatrix" ${IN}/matrix.spad.pamphlet >RMATRIX.spad )

@
<<SQMATRIX.o (O from NRLIB)>>=
${OUT}/SQMATRIX.o: ${MID}/SQMATRIX.NRLIB
	@ echo 0 making ${OUT}/SQMATRIX.o from ${MID}/SQMATRIX.NRLIB
	@ cp ${MID}/SQMATRIX.NRLIB/code.o ${OUT}/SQMATRIX.o

@
<<SQMATRIX.NRLIB (NRLIB from MID)>>=
${MID}/SQMATRIX.NRLIB: ${MID}/SQMATRIX.spad
	@ echo 0 making ${MID}/SQMATRIX.NRLIB from ${MID}/SQMATRIX.spad
	@ (cd ${MID} ; 	echo ')co SQMATRIX.spad' | ${INTERPSYS} )

@
<<SQMATRIX.spad (SPAD from IN)>>=
${MID}/SQMATRIX.spad: ${IN}/matrix.spad.pamphlet
	@ echo 0 making ${MID}/SQMATRIX.spad from ${IN}/matrix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SQMATRIX.NRLIB ; \
	${SPADBIN}/notangle -R"domain SQMATRIX SquareMatrix" ${IN}/matrix.spad.pamphlet >SQMATRIX.spad )

@
<<matrix.spad.dvi (DOC from IN)>>=
${DOC}/matrix.spad.dvi: ${IN}/matrix.spad.pamphlet
	@ echo 0 making ${DOC}/matrix.spad.dvi from ${IN}/matrix.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/matrix.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} matrix.spad ; \
	rm -f ${DOC}/matrix.spad.pamphlet ; \
	rm -f ${DOC}/matrix.spad.tex ; \
	rm -f ${DOC}/matrix.spad )

@
\subsection{matstor.spad \cite{1}}
<<matstor.spad (SPAD from IN)>>=
${MID}/matstor.spad: ${IN}/matstor.spad.pamphlet
	@ echo 0 making ${MID}/matstor.spad from ${IN}/matstor.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/matstor.spad.pamphlet >matstor.spad )

@
<<MATSTOR.o (O from NRLIB)>>=
${OUT}/MATSTOR.o: ${MID}/MATSTOR.NRLIB
	@ echo 0 making ${OUT}/MATSTOR.o from ${MID}/MATSTOR.NRLIB
	@ cp ${MID}/MATSTOR.NRLIB/code.o ${OUT}/MATSTOR.o

@
<<MATSTOR.NRLIB (NRLIB from MID)>>=
${MID}/MATSTOR.NRLIB: ${MID}/MATSTOR.spad
	@ echo 0 making ${MID}/MATSTOR.NRLIB from ${MID}/MATSTOR.spad
	@ (cd ${MID} ; 	echo ')co MATSTOR.spad' | ${INTERPSYS} )

@
<<MATSTOR.spad (SPAD from IN)>>=
${MID}/MATSTOR.spad: ${IN}/matstor.spad.pamphlet
	@ echo 0 making ${MID}/MATSTOR.spad from ${IN}/matstor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MATSTOR.NRLIB ; \
	${SPADBIN}/notangle -R"package MATSTOR StorageEfficientMatrixOperations" ${IN}/matstor.spad.pamphlet >MATSTOR.spad )

@
<<matstor.spad.dvi (DOC from IN)>>=
${DOC}/matstor.spad.dvi: ${IN}/matstor.spad.pamphlet
	@ echo 0 making ${DOC}/matstor.spad.dvi from ${IN}/matstor.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/matstor.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} matstor.spad ; \
	rm -f ${DOC}/matstor.spad.pamphlet ; \
	rm -f ${DOC}/matstor.spad.tex ; \
	rm -f ${DOC}/matstor.spad )

@
\subsection{mesh.spad \cite{1}}
<<mesh.spad (SPAD from IN)>>=
${MID}/mesh.spad: ${IN}/mesh.spad.pamphlet
	@ echo 0 making ${MID}/mesh.spad from ${IN}/mesh.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mesh.spad.pamphlet >mesh.spad )

@
<<MESH.o (O from NRLIB)>>=
${OUT}/MESH.o: ${MID}/MESH.NRLIB
	@ echo 0 making ${OUT}/MESH.o from ${MID}/MESH.NRLIB
	@ cp ${MID}/MESH.NRLIB/code.o ${OUT}/MESH.o

@
<<MESH.NRLIB (NRLIB from MID)>>=
${MID}/MESH.NRLIB: ${MID}/MESH.spad
	@ echo 0 making ${MID}/MESH.NRLIB from ${MID}/MESH.spad
	@ (cd ${MID} ; 	echo ')co MESH.spad' | ${INTERPSYS} )

@
<<MESH.spad (SPAD from IN)>>=
${MID}/MESH.spad: ${IN}/mesh.spad.pamphlet
	@ echo 0 making ${MID}/MESH.spad from ${IN}/mesh.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MESH.NRLIB ; \
	${SPADBIN}/notangle -R"package MESH MeshCreationRoutinesForThreeDimensions" ${IN}/mesh.spad.pamphlet >MESH.spad )

@
<<mesh.spad.dvi (DOC from IN)>>=
${DOC}/mesh.spad.dvi: ${IN}/mesh.spad.pamphlet
	@ echo 0 making ${DOC}/mesh.spad.dvi from ${IN}/mesh.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mesh.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mesh.spad ; \
	rm -f ${DOC}/mesh.spad.pamphlet ; \
	rm -f ${DOC}/mesh.spad.tex ; \
	rm -f ${DOC}/mesh.spad )

@
\subsection{mfinfact.spad \cite{1}}
<<mfinfact.spad (SPAD from IN)>>=
${MID}/mfinfact.spad: ${IN}/mfinfact.spad.pamphlet
	@ echo 0 making ${MID}/mfinfact.spad from ${IN}/mfinfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mfinfact.spad.pamphlet >mfinfact.spad )

@
<<MFINFACT.o (O from NRLIB)>>=
${OUT}/MFINFACT.o: ${MID}/MFINFACT.NRLIB
	@ echo 0 making ${OUT}/MFINFACT.o from ${MID}/MFINFACT.NRLIB
	@ cp ${MID}/MFINFACT.NRLIB/code.o ${OUT}/MFINFACT.o

@
<<MFINFACT.NRLIB (NRLIB from MID)>>=
${MID}/MFINFACT.NRLIB: ${MID}/MFINFACT.spad
	@ echo 0 making ${MID}/MFINFACT.NRLIB from ${MID}/MFINFACT.spad
	@ (cd ${MID} ; 	echo ')co MFINFACT.spad' | ${INTERPSYS} )

@
<<MFINFACT.spad (SPAD from IN)>>=
${MID}/MFINFACT.spad: ${IN}/mfinfact.spad.pamphlet
	@ echo 0 making ${MID}/MFINFACT.spad from ${IN}/mfinfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MFINFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package MFINFACT MultFiniteFactorize" ${IN}/mfinfact.spad.pamphlet >MFINFACT.spad )

@
<<mfinfact.spad.dvi (DOC from IN)>>=
${DOC}/mfinfact.spad.dvi: ${IN}/mfinfact.spad.pamphlet
	@ echo 0 making ${DOC}/mfinfact.spad.dvi from ${IN}/mfinfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mfinfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mfinfact.spad ; \
	rm -f ${DOC}/mfinfact.spad.pamphlet ; \
	rm -f ${DOC}/mfinfact.spad.tex ; \
	rm -f ${DOC}/mfinfact.spad )

@
\subsection{misc.spad \cite{1}}
<<misc.spad (SPAD from IN)>>=
${MID}/misc.spad: ${IN}/misc.spad.pamphlet
	@ echo 0 making ${MID}/misc.spad from ${IN}/misc.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/misc.spad.pamphlet >misc.spad )

@
<<SAOS.o (O from NRLIB)>>=
${OUT}/SAOS.o: ${MID}/SAOS.NRLIB
	@ echo 0 making ${OUT}/SAOS.o from ${MID}/SAOS.NRLIB
	@ cp ${MID}/SAOS.NRLIB/code.o ${OUT}/SAOS.o

@
<<SAOS.NRLIB (NRLIB from MID)>>=
${MID}/SAOS.NRLIB: ${MID}/SAOS.spad
	@ echo 0 making ${MID}/SAOS.NRLIB from ${MID}/SAOS.spad
	@ (cd ${MID} ; 	echo ')co SAOS.spad' | ${INTERPSYS} )

@
<<SAOS.spad (SPAD from IN)>>=
${MID}/SAOS.spad: ${IN}/misc.spad.pamphlet
	@ echo 0 making ${MID}/SAOS.spad from ${IN}/misc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SAOS.NRLIB ; \
	${SPADBIN}/notangle -R"domain SAOS SingletonAsOrderedSet" ${IN}/misc.spad.pamphlet >SAOS.spad )

@
<<misc.spad.dvi (DOC from IN)>>=
${DOC}/misc.spad.dvi: ${IN}/misc.spad.pamphlet
	@ echo 0 making ${DOC}/misc.spad.dvi from ${IN}/misc.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/misc.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} misc.spad ; \
	rm -f ${DOC}/misc.spad.pamphlet ; \
	rm -f ${DOC}/misc.spad.tex ; \
	rm -f ${DOC}/misc.spad )

@
\subsection{mkfunc.spad \cite{1}}
<<mkfunc.spad (SPAD from IN)>>=
${MID}/mkfunc.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/mkfunc.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mkfunc.spad.pamphlet >mkfunc.spad )

@
<<INFORM.o (O from NRLIB)>>=
${OUT}/INFORM.o: ${MID}/INFORM.NRLIB
	@ echo 0 making ${OUT}/INFORM.o from ${MID}/INFORM.NRLIB
	@ cp ${MID}/INFORM.NRLIB/code.o ${OUT}/INFORM.o

@
<<INFORM.NRLIB (NRLIB from MID)>>=
${MID}/INFORM.NRLIB: ${MID}/INFORM.spad
	@ echo 0 making ${MID}/INFORM.NRLIB from ${MID}/INFORM.spad
	@ (cd ${MID} ; 	echo ')co INFORM.spad' | ${INTERPSYS} )

@
<<INFORM.spad (SPAD from IN)>>=
${MID}/INFORM.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/INFORM.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INFORM.NRLIB ; \
	${SPADBIN}/notangle -R"domain INFORM InputForm" ${IN}/mkfunc.spad.pamphlet >INFORM.spad )

@
<<INFORM1.o (O from NRLIB)>>=
${OUT}/INFORM1.o: ${MID}/INFORM1.NRLIB
	@ echo 0 making ${OUT}/INFORM1.o from ${MID}/INFORM1.NRLIB
	@ cp ${MID}/INFORM1.NRLIB/code.o ${OUT}/INFORM1.o

@
<<INFORM1.NRLIB (NRLIB from MID)>>=
${MID}/INFORM1.NRLIB: ${MID}/INFORM1.spad
	@ echo 0 making ${MID}/INFORM1.NRLIB from ${MID}/INFORM1.spad
	@ (cd ${MID} ; 	echo ')co INFORM1.spad' | ${INTERPSYS} )

@
<<INFORM1.spad (SPAD from IN)>>=
${MID}/INFORM1.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/INFORM1.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INFORM1.NRLIB ; \
	${SPADBIN}/notangle -R"package INFORM1 InputFormFunctions1" ${IN}/mkfunc.spad.pamphlet >INFORM1.spad )

@
<<MKFLCFN.o (O from NRLIB)>>=
${OUT}/MKFLCFN.o: ${MID}/MKFLCFN.NRLIB
	@ echo 0 making ${OUT}/MKFLCFN.o from ${MID}/MKFLCFN.NRLIB
	@ cp ${MID}/MKFLCFN.NRLIB/code.o ${OUT}/MKFLCFN.o

@
<<MKFLCFN.NRLIB (NRLIB from MID)>>=
${MID}/MKFLCFN.NRLIB: ${MID}/MKFLCFN.spad
	@ echo 0 making ${MID}/MKFLCFN.NRLIB from ${MID}/MKFLCFN.spad
	@ (cd ${MID} ; 	echo ')co MKFLCFN.spad' | ${INTERPSYS} )

@
<<MKFLCFN.spad (SPAD from IN)>>=
${MID}/MKFLCFN.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/MKFLCFN.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MKFLCFN.NRLIB ; \
	${SPADBIN}/notangle -R"package MKFLCFN MakeFloatCompiledFunction" ${IN}/mkfunc.spad.pamphlet >MKFLCFN.spad )

@
<<MKFUNC.o (O from NRLIB)>>=
${OUT}/MKFUNC.o: ${MID}/MKFUNC.NRLIB
	@ echo 0 making ${OUT}/MKFUNC.o from ${MID}/MKFUNC.NRLIB
	@ cp ${MID}/MKFUNC.NRLIB/code.o ${OUT}/MKFUNC.o

@
<<MKFUNC.NRLIB (NRLIB from MID)>>=
${MID}/MKFUNC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MKFUNC.spad
	@ echo 0 making ${MID}/MKFUNC.NRLIB from ${MID}/MKFUNC.spad
	@ (cd ${MID} ; 	echo ')co MKFUNC.spad' | ${INTERPSYS} )

@
<<MKFUNC.spad (SPAD from IN)>>=
${MID}/MKFUNC.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/MKFUNC.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MKFUNC.NRLIB ; \
	${SPADBIN}/notangle -R"package MKFUNC MakeFunction" ${IN}/mkfunc.spad.pamphlet >MKFUNC.spad )

@
<<MKBCFUNC.o (O from NRLIB)>>=
${OUT}/MKBCFUNC.o: ${MID}/MKBCFUNC.NRLIB
	@ echo 0 making ${OUT}/MKBCFUNC.o from ${MID}/MKBCFUNC.NRLIB
	@ cp ${MID}/MKBCFUNC.NRLIB/code.o ${OUT}/MKBCFUNC.o

@
<<MKBCFUNC.NRLIB (NRLIB from MID)>>=
${MID}/MKBCFUNC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MKBCFUNC.spad
	@ echo 0 making ${MID}/MKBCFUNC.NRLIB from ${MID}/MKBCFUNC.spad
	@ (cd ${MID} ; 	echo ')co MKBCFUNC.spad' | ${INTERPSYS} )

@
<<MKBCFUNC.spad (SPAD from IN)>>=
${MID}/MKBCFUNC.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/MKBCFUNC.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MKBCFUNC.NRLIB ; \
	${SPADBIN}/notangle -R"package MKBCFUNC MakeBinaryCompiledFunction" ${IN}/mkfunc.spad.pamphlet >MKBCFUNC.spad )

@
<<MKUCFUNC.o (O from NRLIB)>>=
${OUT}/MKUCFUNC.o: ${MID}/MKUCFUNC.NRLIB
	@ echo 0 making ${OUT}/MKUCFUNC.o from ${MID}/MKUCFUNC.NRLIB
	@ cp ${MID}/MKUCFUNC.NRLIB/code.o ${OUT}/MKUCFUNC.o

@
<<MKUCFUNC.NRLIB (NRLIB from MID)>>=
${MID}/MKUCFUNC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MKUCFUNC.spad
	@ echo 0 making ${MID}/MKUCFUNC.NRLIB from ${MID}/MKUCFUNC.spad
	@ (cd ${MID} ; 	echo ')co MKUCFUNC.spad' | ${INTERPSYS} )

@
<<MKUCFUNC.spad (SPAD from IN)>>=
${MID}/MKUCFUNC.spad: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${MID}/MKUCFUNC.spad from ${IN}/mkfunc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MKUCFUNC.NRLIB ; \
	${SPADBIN}/notangle -R"package MKUCFUNC MakeUnaryCompiledFunction" ${IN}/mkfunc.spad.pamphlet >MKUCFUNC.spad )

@
<<mkfunc.spad.dvi (DOC from IN)>>=
${DOC}/mkfunc.spad.dvi: ${IN}/mkfunc.spad.pamphlet
	@ echo 0 making ${DOC}/mkfunc.spad.dvi from ${IN}/mkfunc.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mkfunc.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mkfunc.spad ; \
	rm -f ${DOC}/mkfunc.spad.pamphlet ; \
	rm -f ${DOC}/mkfunc.spad.tex ; \
	rm -f ${DOC}/mkfunc.spad )

@
\subsection{mkrecord.spad \cite{1}}
<<mkrecord.spad (SPAD from IN)>>=
${MID}/mkrecord.spad: ${IN}/mkrecord.spad.pamphlet
	@ echo 0 making ${MID}/mkrecord.spad from ${IN}/mkrecord.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mkrecord.spad.pamphlet >mkrecord.spad )

@
<<MKRECORD.o (O from NRLIB)>>=
${OUT}/MKRECORD.o: ${MID}/MKRECORD.NRLIB
	@ echo 0 making ${OUT}/MKRECORD.o from ${MID}/MKRECORD.NRLIB
	@ cp ${MID}/MKRECORD.NRLIB/code.o ${OUT}/MKRECORD.o

@
<<MKRECORD.NRLIB (NRLIB from MID)>>=
${MID}/MKRECORD.NRLIB: ${OUT}/TYPE.o ${MID}/MKRECORD.spad
	@ echo 0 making ${MID}/MKRECORD.NRLIB from ${MID}/MKRECORD.spad
	@ (cd ${MID} ; 	echo ')co MKRECORD.spad' | ${INTERPSYS} )

@
<<MKRECORD.spad (SPAD from IN)>>=
${MID}/MKRECORD.spad: ${IN}/mkrecord.spad.pamphlet
	@ echo 0 making ${MID}/MKRECORD.spad from ${IN}/mkrecord.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MKRECORD.NRLIB ; \
	${SPADBIN}/notangle -R"package MKRECORD MakeRecord" ${IN}/mkrecord.spad.pamphlet >MKRECORD.spad )

@
<<mkrecord.spad.dvi (DOC from IN)>>=
${DOC}/mkrecord.spad.dvi: ${IN}/mkrecord.spad.pamphlet
	@ echo 0 making ${DOC}/mkrecord.spad.dvi from ${IN}/mkrecord.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mkrecord.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mkrecord.spad ; \
	rm -f ${DOC}/mkrecord.spad.pamphlet ; \
	rm -f ${DOC}/mkrecord.spad.tex ; \
	rm -f ${DOC}/mkrecord.spad )

@
\subsection{mlift.spad.jhd \cite{1}}
<<mlift.spad.jhd (SPAD from IN)>>=
${MID}/mlift.spad.jhd: ${IN}/mlift.spad.jhd.pamphlet
	@ echo 0 making ${MID}/mlift.spad.jhd from ${IN}/mlift.spad.jhd.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mlift.spad.jhd.pamphlet >mlift.spad.jhd )

@
<<mlift.spad.jhd.dvi (DOC from IN)>>=
${DOC}/mlift.spad.jhd.dvi: ${IN}/mlift.spad.jhd.pamphlet
	@ echo 0 making ${DOC}/mlift.spad.jhd.dvi from ${IN}/mlift.spad.jhd.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mlift.spad.jhd.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mlift.spad.jhd ; \
	rm -f ${DOC}/mlift.spad.jhd.pamphlet ; \
	rm -f ${DOC}/mlift.spad.jhd.tex ; \
	rm -f ${DOC}/mlift.spad.jhd )

@
\subsection{mlift.spad \cite{1}}
<<mlift.spad (SPAD from IN)>>=
${MID}/mlift.spad: ${IN}/mlift.spad.pamphlet
	@ echo 0 making ${MID}/mlift.spad from ${IN}/mlift.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mlift.spad.pamphlet >mlift.spad )

@
<<MLIFT.o (O from NRLIB)>>=
${OUT}/MLIFT.o: ${MID}/MLIFT.NRLIB
	@ echo 0 making ${OUT}/MLIFT.o from ${MID}/MLIFT.NRLIB
	@ cp ${MID}/MLIFT.NRLIB/code.o ${OUT}/MLIFT.o

@
<<MLIFT.NRLIB (NRLIB from MID)>>=
${MID}/MLIFT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MLIFT.spad
	@ echo 0 making ${MID}/MLIFT.NRLIB from ${MID}/MLIFT.spad
	@ (cd ${MID} ; 	echo ')co MLIFT.spad' | ${INTERPSYS} )

@
<<MLIFT.spad (SPAD from IN)>>=
${MID}/MLIFT.spad: ${IN}/mlift.spad.pamphlet
	@ echo 0 making ${MID}/MLIFT.spad from ${IN}/mlift.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MLIFT.NRLIB ; \
	${SPADBIN}/notangle -R"package MLIFT MultivariateLifting" ${IN}/mlift.spad.pamphlet >MLIFT.spad )

@
<<mlift.spad.dvi (DOC from IN)>>=
${DOC}/mlift.spad.dvi: ${IN}/mlift.spad.pamphlet
	@ echo 0 making ${DOC}/mlift.spad.dvi from ${IN}/mlift.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mlift.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mlift.spad ; \
	rm -f ${DOC}/mlift.spad.pamphlet ; \
	rm -f ${DOC}/mlift.spad.tex ; \
	rm -f ${DOC}/mlift.spad )

@
\subsection{moddfact.spad \cite{1}}
<<moddfact.spad (SPAD from IN)>>=
${MID}/moddfact.spad: ${IN}/moddfact.spad.pamphlet
	@ echo 0 making ${MID}/moddfact.spad from ${IN}/moddfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/moddfact.spad.pamphlet >moddfact.spad )

@
<<MDDFACT.o (O from NRLIB)>>=
${OUT}/MDDFACT.o: ${MID}/MDDFACT.NRLIB
	@ echo 0 making ${OUT}/MDDFACT.o from ${MID}/MDDFACT.NRLIB
	@ cp ${MID}/MDDFACT.NRLIB/code.o ${OUT}/MDDFACT.o

@
<<MDDFACT.NRLIB (NRLIB from MID)>>=
${MID}/MDDFACT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MDDFACT.spad
	@ echo 0 making ${MID}/MDDFACT.NRLIB from ${MID}/MDDFACT.spad
	@ (cd ${MID} ; 	echo ')co MDDFACT.spad' | ${INTERPSYS} )

@
<<MDDFACT.spad (SPAD from IN)>>=
${MID}/MDDFACT.spad: ${IN}/moddfact.spad.pamphlet
	@ echo 0 making ${MID}/MDDFACT.spad from ${IN}/moddfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MDDFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package MDDFACT ModularDistinctDegreeFactorizer" ${IN}/moddfact.spad.pamphlet >MDDFACT.spad )

@
<<moddfact.spad.dvi (DOC from IN)>>=
${DOC}/moddfact.spad.dvi: ${IN}/moddfact.spad.pamphlet
	@ echo 0 making ${DOC}/moddfact.spad.dvi from ${IN}/moddfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/moddfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} moddfact.spad ; \
	rm -f ${DOC}/moddfact.spad.pamphlet ; \
	rm -f ${DOC}/moddfact.spad.tex ; \
	rm -f ${DOC}/moddfact.spad )

@
\subsection{modgcd.spad \cite{1}}
<<modgcd.spad (SPAD from IN)>>=
${MID}/modgcd.spad: ${IN}/modgcd.spad.pamphlet
	@ echo 0 making ${MID}/modgcd.spad from ${IN}/modgcd.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/modgcd.spad.pamphlet >modgcd.spad )

@
<<INMODGCD.o (O from NRLIB)>>=
${OUT}/INMODGCD.o: ${MID}/INMODGCD.NRLIB
	@ echo 0 making ${OUT}/INMODGCD.o from ${MID}/INMODGCD.NRLIB
	@ cp ${MID}/INMODGCD.NRLIB/code.o ${OUT}/INMODGCD.o

@
<<INMODGCD.NRLIB (NRLIB from MID)>>=
${MID}/INMODGCD.NRLIB: ${MID}/INMODGCD.spad
	@ echo 0 making ${MID}/INMODGCD.NRLIB from ${MID}/INMODGCD.spad
	@ (cd ${MID} ; 	echo ')co INMODGCD.spad' | ${INTERPSYS} )

@
<<INMODGCD.spad (SPAD from IN)>>=
${MID}/INMODGCD.spad: ${IN}/modgcd.spad.pamphlet
	@ echo 0 making ${MID}/INMODGCD.spad from ${IN}/modgcd.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INMODGCD.NRLIB ; \
	${SPADBIN}/notangle -R"package INMODGCD InnerModularGcd" ${IN}/modgcd.spad.pamphlet >INMODGCD.spad )

@
<<modgcd.spad.dvi (DOC from IN)>>=
${DOC}/modgcd.spad.dvi: ${IN}/modgcd.spad.pamphlet
	@ echo 0 making ${DOC}/modgcd.spad.dvi from ${IN}/modgcd.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/modgcd.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} modgcd.spad ; \
	rm -f ${DOC}/modgcd.spad.pamphlet ; \
	rm -f ${DOC}/modgcd.spad.tex ; \
	rm -f ${DOC}/modgcd.spad )

@
\subsection{modmonom.spad \cite{1}}
<<modmonom.spad (SPAD from IN)>>=
${MID}/modmonom.spad: ${IN}/modmonom.spad.pamphlet
	@ echo 0 making ${MID}/modmonom.spad from ${IN}/modmonom.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/modmonom.spad.pamphlet >modmonom.spad )

@
<<GMODPOL.o (O from NRLIB)>>=
${OUT}/GMODPOL.o: ${MID}/GMODPOL.NRLIB
	@ echo 0 making ${OUT}/GMODPOL.o from ${MID}/GMODPOL.NRLIB
	@ cp ${MID}/GMODPOL.NRLIB/code.o ${OUT}/GMODPOL.o

@
<<GMODPOL.NRLIB (NRLIB from MID)>>=
${MID}/GMODPOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GMODPOL.spad
	@ echo 0 making ${MID}/GMODPOL.NRLIB from ${MID}/GMODPOL.spad
	@ (cd ${MID} ; 	echo ')co GMODPOL.spad' | ${INTERPSYS} )

@
<<GMODPOL.spad (SPAD from IN)>>=
${MID}/GMODPOL.spad: ${IN}/modmonom.spad.pamphlet
	@ echo 0 making ${MID}/GMODPOL.spad from ${IN}/modmonom.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GMODPOL.NRLIB ; \
	${SPADBIN}/notangle -R"domain GMODPOL GeneralModulePolynomial" ${IN}/modmonom.spad.pamphlet >GMODPOL.spad )

@
<<MODMONOM.o (O from NRLIB)>>=
${OUT}/MODMONOM.o: ${MID}/MODMONOM.NRLIB
	@ echo 0 making ${OUT}/MODMONOM.o from ${MID}/MODMONOM.NRLIB
	@ cp ${MID}/MODMONOM.NRLIB/code.o ${OUT}/MODMONOM.o

@
<<MODMONOM.NRLIB (NRLIB from MID)>>=
${MID}/MODMONOM.NRLIB: ${MID}/MODMONOM.spad
	@ echo 0 making ${MID}/MODMONOM.NRLIB from ${MID}/MODMONOM.spad
	@ (cd ${MID} ; 	echo ')co MODMONOM.spad' | ${INTERPSYS} )

@
<<MODMONOM.spad (SPAD from IN)>>=
${MID}/MODMONOM.spad: ${IN}/modmonom.spad.pamphlet
	@ echo 0 making ${MID}/MODMONOM.spad from ${IN}/modmonom.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MODMONOM.NRLIB ; \
	${SPADBIN}/notangle -R"domain MODMONOM ModuleMonomial" ${IN}/modmonom.spad.pamphlet >MODMONOM.spad )

@
<<modmonom.spad.dvi (DOC from IN)>>=
${DOC}/modmonom.spad.dvi: ${IN}/modmonom.spad.pamphlet
	@ echo 0 making ${DOC}/modmonom.spad.dvi from ${IN}/modmonom.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/modmonom.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} modmonom.spad ; \
	rm -f ${DOC}/modmonom.spad.pamphlet ; \
	rm -f ${DOC}/modmonom.spad.tex ; \
	rm -f ${DOC}/modmonom.spad )

@
\subsection{modmon.spad \cite{1}}
<<modmon.spad (SPAD from IN)>>=
${MID}/modmon.spad: ${IN}/modmon.spad.pamphlet
	@ echo 0 making ${MID}/modmon.spad from ${IN}/modmon.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/modmon.spad.pamphlet >modmon.spad )

@
<<MODMON.o (O from NRLIB)>>=
${OUT}/MODMON.o: ${MID}/MODMON.NRLIB
	@ echo 0 making ${OUT}/MODMON.o from ${MID}/MODMON.NRLIB
	@ cp ${MID}/MODMON.NRLIB/code.o ${OUT}/MODMON.o

@
<<MODMON.NRLIB (NRLIB from MID)>>=
${MID}/MODMON.NRLIB: ${MID}/MODMON.spad
	@ echo 0 making ${MID}/MODMON.NRLIB from ${MID}/MODMON.spad
	@ (cd ${MID} ; 	echo ')co MODMON.spad' | ${INTERPSYS} )

@
<<MODMON.spad (SPAD from IN)>>=
${MID}/MODMON.spad: ${IN}/modmon.spad.pamphlet
	@ echo 0 making ${MID}/MODMON.spad from ${IN}/modmon.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MODMON.NRLIB ; \
	${SPADBIN}/notangle -R"domain MODMON ModMonic" ${IN}/modmon.spad.pamphlet >MODMON.spad )

@
<<modmon.spad.dvi (DOC from IN)>>=
${DOC}/modmon.spad.dvi: ${IN}/modmon.spad.pamphlet
	@ echo 0 making ${DOC}/modmon.spad.dvi from ${IN}/modmon.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/modmon.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} modmon.spad ; \
	rm -f ${DOC}/modmon.spad.pamphlet ; \
	rm -f ${DOC}/modmon.spad.tex ; \
	rm -f ${DOC}/modmon.spad )

@
\subsection{modring.spad \cite{1}}
<<modring.spad (SPAD from IN)>>=
${MID}/modring.spad: ${IN}/modring.spad.pamphlet
	@ echo 0 making ${MID}/modring.spad from ${IN}/modring.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/modring.spad.pamphlet >modring.spad )

@
<<EMR.o (O from NRLIB)>>=
${OUT}/EMR.o: ${MID}/EMR.NRLIB
	@ echo 0 making ${OUT}/EMR.o from ${MID}/EMR.NRLIB
	@ cp ${MID}/EMR.NRLIB/code.o ${OUT}/EMR.o

@
<<EMR.NRLIB (NRLIB from MID)>>=
${MID}/EMR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/EMR.spad
	@ echo 0 making ${MID}/EMR.NRLIB from ${MID}/EMR.spad
	@ (cd ${MID} ; 	echo ')co EMR.spad' | ${INTERPSYS} )

@
<<EMR.spad (SPAD from IN)>>=
${MID}/EMR.spad: ${IN}/modring.spad.pamphlet
	@ echo 0 making ${MID}/EMR.spad from ${IN}/modring.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EMR.NRLIB ; \
	${SPADBIN}/notangle -R"domain EMR EuclideanModularRing" ${IN}/modring.spad.pamphlet >EMR.spad )

@
<<MODFIELD.o (O from NRLIB)>>=
${OUT}/MODFIELD.o: ${MID}/MODFIELD.NRLIB
	@ echo 0 making ${OUT}/MODFIELD.o from ${MID}/MODFIELD.NRLIB
	@ cp ${MID}/MODFIELD.NRLIB/code.o ${OUT}/MODFIELD.o

@
<<MODFIELD.NRLIB (NRLIB from MID)>>=
${MID}/MODFIELD.NRLIB: ${MID}/MODFIELD.spad
	@ echo 0 making ${MID}/MODFIELD.NRLIB from ${MID}/MODFIELD.spad
	@ (cd ${MID} ; 	echo ')co MODFIELD.spad' | ${INTERPSYS} )

@
<<MODFIELD.spad (SPAD from IN)>>=
${MID}/MODFIELD.spad: ${IN}/modring.spad.pamphlet
	@ echo 0 making ${MID}/MODFIELD.spad from ${IN}/modring.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MODFIELD.NRLIB ; \
	${SPADBIN}/notangle -R"domain MODFIELD ModularField" ${IN}/modring.spad.pamphlet >MODFIELD.spad )

@
<<MODRING.o (O from NRLIB)>>=
${OUT}/MODRING.o: ${MID}/MODRING.NRLIB
	@ echo 0 making ${OUT}/MODRING.o from ${MID}/MODRING.NRLIB
	@ cp ${MID}/MODRING.NRLIB/code.o ${OUT}/MODRING.o

@
<<MODRING.NRLIB (NRLIB from MID)>>=
${MID}/MODRING.NRLIB: ${MID}/MODRING.spad
	@ echo 0 making ${MID}/MODRING.NRLIB from ${MID}/MODRING.spad
	@ (cd ${MID} ; 	echo ')co MODRING.spad' | ${INTERPSYS} )

@
<<MODRING.spad (SPAD from IN)>>=
${MID}/MODRING.spad: ${IN}/modring.spad.pamphlet
	@ echo 0 making ${MID}/MODRING.spad from ${IN}/modring.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MODRING.NRLIB ; \
	${SPADBIN}/notangle -R"domain MODRING ModularRing" ${IN}/modring.spad.pamphlet >MODRING.spad )

@
<<modring.spad.dvi (DOC from IN)>>=
${DOC}/modring.spad.dvi: ${IN}/modring.spad.pamphlet
	@ echo 0 making ${DOC}/modring.spad.dvi from ${IN}/modring.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/modring.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} modring.spad ; \
	rm -f ${DOC}/modring.spad.pamphlet ; \
	rm -f ${DOC}/modring.spad.tex ; \
	rm -f ${DOC}/modring.spad )

@
\subsection{moebius.spad \cite{1}}
<<moebius.spad (SPAD from IN)>>=
${MID}/moebius.spad: ${IN}/moebius.spad.pamphlet
	@ echo 0 making ${MID}/moebius.spad from ${IN}/moebius.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/moebius.spad.pamphlet >moebius.spad )

@
<<MOEBIUS.o (O from NRLIB)>>=
${OUT}/MOEBIUS.o: ${MID}/MOEBIUS.NRLIB
	@ echo 0 making ${OUT}/MOEBIUS.o from ${MID}/MOEBIUS.NRLIB
	@ cp ${MID}/MOEBIUS.NRLIB/code.o ${OUT}/MOEBIUS.o

@
<<MOEBIUS.NRLIB (NRLIB from MID)>>=
${MID}/MOEBIUS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MOEBIUS.spad
	@ echo 0 making ${MID}/MOEBIUS.NRLIB from ${MID}/MOEBIUS.spad
	@ (cd ${MID} ; 	echo ')co MOEBIUS.spad' | ${INTERPSYS} )

@
<<MOEBIUS.spad (SPAD from IN)>>=
${MID}/MOEBIUS.spad: ${IN}/moebius.spad.pamphlet
	@ echo 0 making ${MID}/MOEBIUS.spad from ${IN}/moebius.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MOEBIUS.NRLIB ; \
	${SPADBIN}/notangle -R"domain MOEBIUS MoebiusTransform" ${IN}/moebius.spad.pamphlet >MOEBIUS.spad )

@
<<moebius.spad.dvi (DOC from IN)>>=
${DOC}/moebius.spad.dvi: ${IN}/moebius.spad.pamphlet
	@ echo 0 making ${DOC}/moebius.spad.dvi from ${IN}/moebius.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/moebius.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} moebius.spad ; \
	rm -f ${DOC}/moebius.spad.pamphlet ; \
	rm -f ${DOC}/moebius.spad.tex ; \
	rm -f ${DOC}/moebius.spad )

@
\subsection{mring.spad \cite{1}}
<<mring.spad (SPAD from IN)>>=
${MID}/mring.spad: ${IN}/mring.spad.pamphlet
	@ echo 0 making ${MID}/mring.spad from ${IN}/mring.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mring.spad.pamphlet >mring.spad )

@
<<MRF2.o (O from NRLIB)>>=
${OUT}/MRF2.o: ${MID}/MRF2.NRLIB
	@ echo 0 making ${OUT}/MRF2.o from ${MID}/MRF2.NRLIB
	@ cp ${MID}/MRF2.NRLIB/code.o ${OUT}/MRF2.o

@
<<MRF2.NRLIB (NRLIB from MID)>>=
${MID}/MRF2.NRLIB: ${MID}/MRF2.spad
	@ echo 0 making ${MID}/MRF2.NRLIB from ${MID}/MRF2.spad
	@ (cd ${MID} ; 	echo ')co MRF2.spad' | ${INTERPSYS} )

@
<<MRF2.spad (SPAD from IN)>>=
${MID}/MRF2.spad: ${IN}/mring.spad.pamphlet
	@ echo 0 making ${MID}/MRF2.spad from ${IN}/mring.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MRF2.NRLIB ; \
	${SPADBIN}/notangle -R"package MRF2 MonoidRingFunctions2" ${IN}/mring.spad.pamphlet >MRF2.spad )

@
<<MRING.o (O from NRLIB)>>=
${OUT}/MRING.o: ${MID}/MRING.NRLIB
	@ echo 0 making ${OUT}/MRING.o from ${MID}/MRING.NRLIB
	@ cp ${MID}/MRING.NRLIB/code.o ${OUT}/MRING.o

@
<<MRING.NRLIB (NRLIB from MID)>>=
${MID}/MRING.NRLIB: ${MID}/MRING.spad
	@ echo 0 making ${MID}/MRING.NRLIB from ${MID}/MRING.spad
	@ (cd ${MID} ; 	echo ')co MRING.spad' | ${INTERPSYS} )

@
<<MRING.spad (SPAD from IN)>>=
${MID}/MRING.spad: ${IN}/mring.spad.pamphlet
	@ echo 0 making ${MID}/MRING.spad from ${IN}/mring.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MRING.NRLIB ; \
	${SPADBIN}/notangle -R"domain MRING MonoidRing" ${IN}/mring.spad.pamphlet >MRING.spad )

@
<<mring.spad.dvi (DOC from IN)>>=
${DOC}/mring.spad.dvi: ${IN}/mring.spad.pamphlet
	@ echo 0 making ${DOC}/mring.spad.dvi from ${IN}/mring.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mring.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mring.spad ; \
	rm -f ${DOC}/mring.spad.pamphlet ; \
	rm -f ${DOC}/mring.spad.tex ; \
	rm -f ${DOC}/mring.spad )

@
\subsection{mset.spad \cite{1}}
<<mset.spad (SPAD from IN)>>=
${MID}/mset.spad: ${IN}/mset.spad.pamphlet
	@ echo 0 making ${MID}/mset.spad from ${IN}/mset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mset.spad.pamphlet >mset.spad )

@
<<MSET.o (O from NRLIB)>>=
${OUT}/MSET.o: ${MID}/MSET.NRLIB
	@ echo 0 making ${OUT}/MSET.o from ${MID}/MSET.NRLIB
	@ cp ${MID}/MSET.NRLIB/code.o ${OUT}/MSET.o

@
<<MSET.NRLIB (NRLIB from MID)>>=
${MID}/MSET.NRLIB: ${MID}/MSET.spad
	@ echo 0 making ${MID}/MSET.NRLIB from ${MID}/MSET.spad
	@ (cd ${MID} ; 	echo ')co MSET.spad' | ${INTERPSYS} )

@
<<MSET.spad (SPAD from IN)>>=
${MID}/MSET.spad: ${IN}/mset.spad.pamphlet
	@ echo 0 making ${MID}/MSET.spad from ${IN}/mset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MSET.NRLIB ; \
	${SPADBIN}/notangle -R"domain MSET Multiset" ${IN}/mset.spad.pamphlet >MSET.spad )

@
<<mset.spad.dvi (DOC from IN)>>=
${DOC}/mset.spad.dvi: ${IN}/mset.spad.pamphlet
	@ echo 0 making ${DOC}/mset.spad.dvi from ${IN}/mset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mset.spad ; \
	rm -f ${DOC}/mset.spad.pamphlet ; \
	rm -f ${DOC}/mset.spad.tex ; \
	rm -f ${DOC}/mset.spad )

@
\subsection{mts.spad \cite{1}}
<<mts.spad (SPAD from IN)>>=
${MID}/mts.spad: ${IN}/mts.spad.pamphlet
	@ echo 0 making ${MID}/mts.spad from ${IN}/mts.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/mts.spad.pamphlet >mts.spad )

@
<<SMTS.o (O from NRLIB)>>=
${OUT}/SMTS.o: ${MID}/SMTS.NRLIB
	@ echo 0 making ${OUT}/SMTS.o from ${MID}/SMTS.NRLIB
	@ cp ${MID}/SMTS.NRLIB/code.o ${OUT}/SMTS.o

@
<<SMTS.NRLIB (NRLIB from MID)>>=
${MID}/SMTS.NRLIB: ${MID}/SMTS.spad
	@ echo 0 making ${MID}/SMTS.NRLIB from ${MID}/SMTS.spad
	@ (cd ${MID} ; 	echo ')co SMTS.spad' | ${INTERPSYS} )

@
<<SMTS.spad (SPAD from IN)>>=
${MID}/SMTS.spad: ${IN}/mts.spad.pamphlet
	@ echo 0 making ${MID}/SMTS.spad from ${IN}/mts.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SMTS.NRLIB ; \
	${SPADBIN}/notangle -R"domain SMTS SparseMultivariateTaylorSeries" ${IN}/mts.spad.pamphlet >SMTS.spad )

@
<<TS.o (O from NRLIB)>>=
${OUT}/TS.o: ${MID}/TS.NRLIB
	@ echo 0 making ${OUT}/TS.o from ${MID}/TS.NRLIB
	@ cp ${MID}/TS.NRLIB/code.o ${OUT}/TS.o

@
<<TS.NRLIB (NRLIB from MID)>>=
${MID}/TS.NRLIB: ${MID}/TS.spad
	@ echo 0 making ${MID}/TS.NRLIB from ${MID}/TS.spad
	@ (cd ${MID} ; 	echo ')co TS.spad' | ${INTERPSYS} )

@
<<TS.spad (SPAD from IN)>>=
${MID}/TS.spad: ${IN}/mts.spad.pamphlet
	@ echo 0 making ${MID}/TS.spad from ${IN}/mts.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TS.NRLIB ; \
	${SPADBIN}/notangle -R"domain TS TaylorSeries" ${IN}/mts.spad.pamphlet >TS.spad )

@
<<mts.spad.dvi (DOC from IN)>>=
${DOC}/mts.spad.dvi: ${IN}/mts.spad.pamphlet
	@ echo 0 making ${DOC}/mts.spad.dvi from ${IN}/mts.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/mts.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} mts.spad ; \
	rm -f ${DOC}/mts.spad.pamphlet ; \
	rm -f ${DOC}/mts.spad.tex ; \
	rm -f ${DOC}/mts.spad )

@
\subsection{multfact.spad \cite{1}}
<<multfact.spad (SPAD from IN)>>=
${MID}/multfact.spad: ${IN}/multfact.spad.pamphlet
	@ echo 0 making ${MID}/multfact.spad from ${IN}/multfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/multfact.spad.pamphlet >multfact.spad )

@
<<ALGMFACT.o (O from NRLIB)>>=
${OUT}/ALGMFACT.o: ${MID}/ALGMFACT.NRLIB
	@ echo 0 making ${OUT}/ALGMFACT.o from ${MID}/ALGMFACT.NRLIB
	@ cp ${MID}/ALGMFACT.NRLIB/code.o ${OUT}/ALGMFACT.o

@
<<ALGMFACT.NRLIB (NRLIB from MID)>>=
${MID}/ALGMFACT.NRLIB: ${MID}/ALGMFACT.spad
	@ echo 0 making ${MID}/ALGMFACT.NRLIB from ${MID}/ALGMFACT.spad
	@ (cd ${MID} ; 	echo ')co ALGMFACT.spad' | ${INTERPSYS} )

@
<<ALGMFACT.spad (SPAD from IN)>>=
${MID}/ALGMFACT.spad: ${IN}/multfact.spad.pamphlet
	@ echo 0 making ${MID}/ALGMFACT.spad from ${IN}/multfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGMFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package ALGMFACT AlgebraicMultFact" ${IN}/multfact.spad.pamphlet >ALGMFACT.spad )

@
<<INNMFACT.o (O from NRLIB)>>=
${OUT}/INNMFACT.o: ${MID}/INNMFACT.NRLIB
	@ echo 0 making ${OUT}/INNMFACT.o from ${MID}/INNMFACT.NRLIB
	@ cp ${MID}/INNMFACT.NRLIB/code.o ${OUT}/INNMFACT.o

@
<<INNMFACT.NRLIB (NRLIB from MID)>>=
${MID}/INNMFACT.NRLIB: ${MID}/INNMFACT.spad
	@ echo 0 making ${MID}/INNMFACT.NRLIB from ${MID}/INNMFACT.spad
	@ (cd ${MID} ; 	echo ')co INNMFACT.spad' | ${INTERPSYS} )

@
<<INNMFACT.spad (SPAD from IN)>>=
${MID}/INNMFACT.spad: ${IN}/multfact.spad.pamphlet
	@ echo 0 making ${MID}/INNMFACT.spad from ${IN}/multfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INNMFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package INNMFACT InnerMultFact" ${IN}/multfact.spad.pamphlet >INNMFACT.spad )

@
<<MULTFACT.o (O from NRLIB)>>=
${OUT}/MULTFACT.o: ${MID}/MULTFACT.NRLIB
	@ echo 0 making ${OUT}/MULTFACT.o from ${MID}/MULTFACT.NRLIB
	@ cp ${MID}/MULTFACT.NRLIB/code.o ${OUT}/MULTFACT.o

@
<<MULTFACT.NRLIB (NRLIB from MID)>>=
${MID}/MULTFACT.NRLIB: ${MID}/MULTFACT.spad
	@ echo 0 making ${MID}/MULTFACT.NRLIB from ${MID}/MULTFACT.spad
	@ (cd ${MID} ; 	echo ')co MULTFACT.spad' | ${INTERPSYS} )

@
<<MULTFACT.spad (SPAD from IN)>>=
${MID}/MULTFACT.spad: ${IN}/multfact.spad.pamphlet
	@ echo 0 making ${MID}/MULTFACT.spad from ${IN}/multfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MULTFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package MULTFACT MultivariateFactorize" ${IN}/multfact.spad.pamphlet >MULTFACT.spad )

@
<<multfact.spad.dvi (DOC from IN)>>=
${DOC}/multfact.spad.dvi: ${IN}/multfact.spad.pamphlet
	@ echo 0 making ${DOC}/multfact.spad.dvi from ${IN}/multfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/multfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} multfact.spad ; \
	rm -f ${DOC}/multfact.spad.pamphlet ; \
	rm -f ${DOC}/multfact.spad.tex ; \
	rm -f ${DOC}/multfact.spad )

@
\subsection{multpoly.spad \cite{1}}
<<multpoly.spad (SPAD from IN)>>=
${MID}/multpoly.spad: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${MID}/multpoly.spad from ${IN}/multpoly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/multpoly.spad.pamphlet >multpoly.spad )

@
<<INDE.o (O from NRLIB)>>=
${OUT}/INDE.o: ${MID}/INDE.NRLIB
	@ echo 0 making ${OUT}/INDE.o from ${MID}/INDE.NRLIB
	@ cp ${MID}/INDE.NRLIB/code.o ${OUT}/INDE.o

@
<<INDE.NRLIB (NRLIB from MID)>>=
${MID}/INDE.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/INDE.spad
	@ echo 0 making ${MID}/INDE.NRLIB from ${MID}/INDE.spad
	@ (cd ${MID} ; 	echo ')co INDE.spad' | ${INTERPSYS} )

@
<<INDE.spad (SPAD from IN)>>=
${MID}/INDE.spad: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${MID}/INDE.spad from ${IN}/multpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INDE.NRLIB ; \
	${SPADBIN}/notangle -R"domain INDE IndexedExponents" ${IN}/multpoly.spad.pamphlet >INDE.spad )

@
<<MPOLY.o (O from NRLIB)>>=
${OUT}/MPOLY.o: ${MID}/MPOLY.NRLIB
	@ echo 0 making ${OUT}/MPOLY.o from ${MID}/MPOLY.NRLIB
	@ cp ${MID}/MPOLY.NRLIB/code.o ${OUT}/MPOLY.o

@
<<MPOLY.NRLIB (NRLIB from MID)>>=
${MID}/MPOLY.NRLIB: ${MID}/MPOLY.spad
	@ echo 0 making ${MID}/MPOLY.NRLIB from ${MID}/MPOLY.spad
	@ (cd ${MID} ; 	echo ')co MPOLY.spad' | ${INTERPSYS} )

@
<<MPOLY.spad (SPAD from IN)>>=
${MID}/MPOLY.spad: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${MID}/MPOLY.spad from ${IN}/multpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain MPOLY MultivariatePolynomial" ${IN}/multpoly.spad.pamphlet >MPOLY.spad )

@
<<POLY.o (O from NRLIB)>>=
${OUT}/POLY.o: ${MID}/POLY.NRLIB
	@ echo 0 making ${OUT}/POLY.o from ${MID}/POLY.NRLIB
	@ cp ${MID}/POLY.NRLIB/code.o ${OUT}/POLY.o

@
<<POLY.NRLIB (NRLIB from MID)>>=
${MID}/POLY.NRLIB: ${MID}/POLY.spad
	@ echo 0 making ${MID}/POLY.NRLIB from ${MID}/POLY.spad
	@ (cd ${MID} ; 	echo ')co POLY.spad' | ${INTERPSYS} )

@
<<POLY.spad (SPAD from IN)>>=
${MID}/POLY.spad: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${MID}/POLY.spad from ${IN}/multpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain POLY Polynomial" ${IN}/multpoly.spad.pamphlet >POLY.spad )

@
<<POLY2.o (O from NRLIB)>>=
${OUT}/POLY2.o: ${MID}/POLY2.NRLIB
	@ echo 0 making ${OUT}/POLY2.o from ${MID}/POLY2.NRLIB
	@ cp ${MID}/POLY2.NRLIB/code.o ${OUT}/POLY2.o

@
<<POLY2.NRLIB (NRLIB from MID)>>=
${MID}/POLY2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLY2.spad
	@ echo 0 making ${MID}/POLY2.NRLIB from ${MID}/POLY2.spad
	@ (cd ${MID} ; 	echo ')co POLY2.spad' | ${INTERPSYS} )

@
<<POLY2.spad (SPAD from IN)>>=
${MID}/POLY2.spad: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${MID}/POLY2.spad from ${IN}/multpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLY2.NRLIB ; \
	${SPADBIN}/notangle -R"package POLY2 PolynomialFunctions2" ${IN}/multpoly.spad.pamphlet >POLY2.spad )

@
<<SMP.o (O from NRLIB)>>=
${OUT}/SMP.o: ${MID}/SMP.NRLIB
	@ echo 0 making ${OUT}/SMP.o from ${MID}/SMP.NRLIB
	@ cp ${MID}/SMP.NRLIB/code.o ${OUT}/SMP.o

@
<<SMP.NRLIB (NRLIB from MID)>>=
${MID}/SMP.NRLIB: ${MID}/SMP.spad
	@ echo 0 making ${MID}/SMP.NRLIB from ${MID}/SMP.spad
	@ (cd ${MID} ; 	echo ')co SMP.spad' | ${INTERPSYS} )

@
<<SMP.spad (SPAD from IN)>>=
${MID}/SMP.spad: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${MID}/SMP.spad from ${IN}/multpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain SMP SparseMultivariatePolynomial" ${IN}/multpoly.spad.pamphlet >SMP.spad )

@
<<multpoly.spad.dvi (DOC from IN)>>=
${DOC}/multpoly.spad.dvi: ${IN}/multpoly.spad.pamphlet
	@ echo 0 making ${DOC}/multpoly.spad.dvi from ${IN}/multpoly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/multpoly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} multpoly.spad ; \
	rm -f ${DOC}/multpoly.spad.pamphlet ; \
	rm -f ${DOC}/multpoly.spad.tex ; \
	rm -f ${DOC}/multpoly.spad )

@
\subsection{multsqfr.spad \cite{1}}
<<multsqfr.spad (SPAD from IN)>>=
${MID}/multsqfr.spad: ${IN}/multsqfr.spad.pamphlet
	@ echo 0 making ${MID}/multsqfr.spad from ${IN}/multsqfr.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/multsqfr.spad.pamphlet >multsqfr.spad )

@
<<MULTSQFR.o (O from NRLIB)>>=
${OUT}/MULTSQFR.o: ${MID}/MULTSQFR.NRLIB
	@ echo 0 making ${OUT}/MULTSQFR.o from ${MID}/MULTSQFR.NRLIB
	@ cp ${MID}/MULTSQFR.NRLIB/code.o ${OUT}/MULTSQFR.o

@
<<MULTSQFR.NRLIB (NRLIB from MID)>>=
${MID}/MULTSQFR.NRLIB: ${MID}/MULTSQFR.spad
	@ echo 0 making ${MID}/MULTSQFR.NRLIB from ${MID}/MULTSQFR.spad
	@ (cd ${MID} ; 	echo ')co MULTSQFR.spad' | ${INTERPSYS} )

@
<<MULTSQFR.spad (SPAD from IN)>>=
${MID}/MULTSQFR.spad: ${IN}/multsqfr.spad.pamphlet
	@ echo 0 making ${MID}/MULTSQFR.spad from ${IN}/multsqfr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MULTSQFR.NRLIB ; \
	${SPADBIN}/notangle -R"package MULTSQFR MultivariateSquareFree" ${IN}/multsqfr.spad.pamphlet >MULTSQFR.spad )

@
<<multsqfr.spad.dvi (DOC from IN)>>=
${DOC}/multsqfr.spad.dvi: ${IN}/multsqfr.spad.pamphlet
	@ echo 0 making ${DOC}/multsqfr.spad.dvi from ${IN}/multsqfr.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/multsqfr.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} multsqfr.spad ; \
	rm -f ${DOC}/multsqfr.spad.pamphlet ; \
	rm -f ${DOC}/multsqfr.spad.tex ; \
	rm -f ${DOC}/multsqfr.spad )

@
\subsection{naalgc.spad \cite{1}}
<<naalgc.spad (SPAD from IN)>>=
${MID}/naalgc.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/naalgc.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/naalgc.spad.pamphlet >naalgc.spad )

@
<<FINAALG-.o (O from NRLIB)>>=
${OUT}/FINAALG-.o: ${MID}/FINAALG.NRLIB
	@ echo 0 making ${OUT}/FINAALG-.o from ${MID}/FINAALG-.NRLIB
	@ cp ${MID}/FINAALG-.NRLIB/code.o ${OUT}/FINAALG-.o

@
<<FINAALG-.NRLIB (NRLIB from MID)>>=
${MID}/FINAALG-.NRLIB: ${OUT}/TYPE.o ${MID}/FINAALG.spad 
	@ echo 0 making ${MID}/FINAALG-.NRLIB from ${MID}/FINAALG.spad
	@ (cd ${MID} ; 	echo ')co FINAALG.spad' | ${INTERPSYS} )

@
<<FINAALG.o (O from NRLIB)>>=
${OUT}/FINAALG.o: ${MID}/FINAALG.NRLIB
	@ echo 0 making ${OUT}/FINAALG.o from ${MID}/FINAALG.NRLIB
	@ cp ${MID}/FINAALG.NRLIB/code.o ${OUT}/FINAALG.o

@
<<FINAALG.NRLIB (NRLIB from MID)>>=
${MID}/FINAALG.NRLIB: ${MID}/FINAALG.spad
	@ echo 0 making ${MID}/FINAALG.NRLIB from ${MID}/FINAALG.spad
	@ (cd ${MID} ; 	echo ')co FINAALG.spad' | ${INTERPSYS} )

@
<<FINAALG.spad (SPAD from IN)>>=
${MID}/FINAALG.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/FINAALG.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FINAALG.NRLIB ; \
	${SPADBIN}/notangle -R"category FINAALG FiniteRankNonAssociativeAlgebra" ${IN}/naalgc.spad.pamphlet >FINAALG.spad )

@
<<FRNAALG-.o (O from NRLIB)>>=
${OUT}/FRNAALG-.o: ${MID}/FRNAALG.NRLIB
	@ echo 0 making ${OUT}/FRNAALG-.o from ${MID}/FRNAALG-.NRLIB
	@ cp ${MID}/FRNAALG-.NRLIB/code.o ${OUT}/FRNAALG-.o

@
<<FRNAALG-.NRLIB (NRLIB from MID)>>=
${MID}/FRNAALG-.NRLIB: ${OUT}/TYPE.o ${MID}/FRNAALG.spad 
	@ echo 0 making ${MID}/FRNAALG-.NRLIB from ${MID}/FRNAALG.spad
	@ (cd ${MID} ; 	echo ')co FRNAALG.spad' | ${INTERPSYS} )

@
<<FRNAALG.o (O from NRLIB)>>=
${OUT}/FRNAALG.o: ${MID}/FRNAALG.NRLIB
	@ echo 0 making ${OUT}/FRNAALG.o from ${MID}/FRNAALG.NRLIB
	@ cp ${MID}/FRNAALG.NRLIB/code.o ${OUT}/FRNAALG.o

@
<<FRNAALG.NRLIB (NRLIB from MID)>>=
${MID}/FRNAALG.NRLIB: ${MID}/FRNAALG.spad
	@ echo 0 making ${MID}/FRNAALG.NRLIB from ${MID}/FRNAALG.spad
	@ (cd ${MID} ; 	echo ')co FRNAALG.spad' | ${INTERPSYS} )

@
<<FRNAALG.spad (SPAD from IN)>>=
${MID}/FRNAALG.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/FRNAALG.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRNAALG.NRLIB ; \
	${SPADBIN}/notangle -R"category FRNAALG FramedNonAssociativeAlgebra" ${IN}/naalgc.spad.pamphlet >FRNAALG.spad )

@
<<MONAD-.o (O from NRLIB)>>=
${OUT}/MONAD-.o: ${MID}/MONAD.NRLIB
	@ echo 0 making ${OUT}/MONAD-.o from ${MID}/MONAD-.NRLIB
	@ cp ${MID}/MONAD-.NRLIB/code.o ${OUT}/MONAD-.o

@
<<MONAD-.NRLIB (NRLIB from MID)>>=
${MID}/MONAD-.NRLIB: ${OUT}/TYPE.o ${MID}/MONAD.spad 
	@ echo 0 making ${MID}/MONAD-.NRLIB from ${MID}/MONAD.spad
	@ (cd ${MID} ; 	echo ')co MONAD.spad' | ${INTERPSYS} )

@
<<MONAD.o (O from NRLIB)>>=
${OUT}/MONAD.o: ${MID}/MONAD.NRLIB
	@ echo 0 making ${OUT}/MONAD.o from ${MID}/MONAD.NRLIB
	@ cp ${MID}/MONAD.NRLIB/code.o ${OUT}/MONAD.o

@
<<MONAD.NRLIB (NRLIB from MID)>>=
${MID}/MONAD.NRLIB: ${MID}/MONAD.spad
	@ echo 0 making ${MID}/MONAD.NRLIB from ${MID}/MONAD.spad
	@ (cd ${MID} ; 	echo ')co MONAD.spad' | ${INTERPSYS} )

@
<<MONAD.spad (SPAD from IN)>>=
${MID}/MONAD.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/MONAD.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONAD.NRLIB ; \
	${SPADBIN}/notangle -R"category MONAD Monad" ${IN}/naalgc.spad.pamphlet >MONAD.spad )

@
<<MONADWU-.o (O from NRLIB)>>=
${OUT}/MONADWU-.o: ${MID}/MONADWU.NRLIB
	@ echo 0 making ${OUT}/MONADWU-.o from ${MID}/MONADWU-.NRLIB
	@ cp ${MID}/MONADWU-.NRLIB/code.o ${OUT}/MONADWU-.o

@
<<MONADWU-.NRLIB (NRLIB from MID)>>=
${MID}/MONADWU-.NRLIB: ${OUT}/TYPE.o ${MID}/MONADWU.spad 
	@ echo 0 making ${MID}/MONADWU-.NRLIB from ${MID}/MONADWU.spad
	@ (cd ${MID} ; 	echo ')co MONADWU.spad' | ${INTERPSYS} )

@
<<MONADWU.o (O from NRLIB)>>=
${OUT}/MONADWU.o: ${MID}/MONADWU.NRLIB
	@ echo 0 making ${OUT}/MONADWU.o from ${MID}/MONADWU.NRLIB
	@ cp ${MID}/MONADWU.NRLIB/code.o ${OUT}/MONADWU.o

@
<<MONADWU.NRLIB (NRLIB from MID)>>=
${MID}/MONADWU.NRLIB: ${MID}/MONADWU.spad
	@ echo 0 making ${MID}/MONADWU.NRLIB from ${MID}/MONADWU.spad
	@ (cd ${MID} ; 	echo ')co MONADWU.spad' | ${INTERPSYS} )

@
<<MONADWU.spad (SPAD from IN)>>=
${MID}/MONADWU.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/MONADWU.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MONADWU.NRLIB ; \
	${SPADBIN}/notangle -R"category MONADWU MonadWithUnit" ${IN}/naalgc.spad.pamphlet >MONADWU.spad )

@
<<NAALG-.o (O from NRLIB)>>=
${OUT}/NAALG-.o: ${MID}/NAALG.NRLIB
	@ echo 0 making ${OUT}/NAALG-.o from ${MID}/NAALG-.NRLIB
	@ cp ${MID}/NAALG-.NRLIB/code.o ${OUT}/NAALG-.o

@
<<NAALG-.NRLIB (NRLIB from MID)>>=
${MID}/NAALG-.NRLIB: ${OUT}/TYPE.o ${MID}/NAALG.spad 
	@ echo 0 making ${MID}/NAALG-.NRLIB from ${MID}/NAALG.spad
	@ (cd ${MID} ; 	echo ')co NAALG.spad' | ${INTERPSYS} )

@
<<NAALG.o (O from NRLIB)>>=
${OUT}/NAALG.o: ${MID}/NAALG.NRLIB
	@ echo 0 making ${OUT}/NAALG.o from ${MID}/NAALG.NRLIB
	@ cp ${MID}/NAALG.NRLIB/code.o ${OUT}/NAALG.o

@
<<NAALG.NRLIB (NRLIB from MID)>>=
${MID}/NAALG.NRLIB: ${MID}/NAALG.spad
	@ echo 0 making ${MID}/NAALG.NRLIB from ${MID}/NAALG.spad
	@ (cd ${MID} ; 	echo ')co NAALG.spad' | ${INTERPSYS} )

@
<<NAALG.spad (SPAD from IN)>>=
${MID}/NAALG.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/NAALG.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAALG.NRLIB ; \
	${SPADBIN}/notangle -R"category NAALG NonAssociativeAlgebra" ${IN}/naalgc.spad.pamphlet >NAALG.spad )

@
<<NARNG-.o (O from NRLIB)>>=
${OUT}/NARNG-.o: ${MID}/NARNG.NRLIB
	@ echo 0 making ${OUT}/NARNG-.o from ${MID}/NARNG-.NRLIB
	@ cp ${MID}/NARNG-.NRLIB/code.o ${OUT}/NARNG-.o

@
<<NARNG-.NRLIB (NRLIB from MID)>>=
${MID}/NARNG-.NRLIB: ${OUT}/TYPE.o ${MID}/NARNG.spad 
	@ echo 0 making ${MID}/NARNG-.NRLIB from ${MID}/NARNG.spad
	@ (cd ${MID} ; 	echo ')co NARNG.spad' | ${INTERPSYS} )

@
<<NARNG.o (O from NRLIB)>>=
${OUT}/NARNG.o: ${MID}/NARNG.NRLIB
	@ echo 0 making ${OUT}/NARNG.o from ${MID}/NARNG.NRLIB
	@ cp ${MID}/NARNG.NRLIB/code.o ${OUT}/NARNG.o

@
<<NARNG.NRLIB (NRLIB from MID)>>=
${MID}/NARNG.NRLIB: ${MID}/NARNG.spad
	@ echo 0 making ${MID}/NARNG.NRLIB from ${MID}/NARNG.spad
	@ (cd ${MID} ; 	echo ')co NARNG.spad' | ${INTERPSYS} )

@
<<NARNG.spad (SPAD from IN)>>=
${MID}/NARNG.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/NARNG.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NARNG.NRLIB ; \
	${SPADBIN}/notangle -R"category NARNG NonAssociativeRng" ${IN}/naalgc.spad.pamphlet >NARNG.spad )

@
<<NASRING-.o (O from NRLIB)>>=
${OUT}/NASRING-.o: ${MID}/NASRING.NRLIB
	@ echo 0 making ${OUT}/NASRING-.o from ${MID}/NASRING-.NRLIB
	@ cp ${MID}/NASRING-.NRLIB/code.o ${OUT}/NASRING-.o

@
<<NASRING-.NRLIB (NRLIB from MID)>>=
${MID}/NASRING-.NRLIB: ${OUT}/TYPE.o ${MID}/NASRING.spad 
	@ echo 0 making ${MID}/NASRING-.NRLIB from ${MID}/NASRING.spad
	@ (cd ${MID} ; 	echo ')co NASRING.spad' | ${INTERPSYS} )

@
<<NASRING.o (O from NRLIB)>>=
${OUT}/NASRING.o: ${MID}/NASRING.NRLIB
	@ echo 0 making ${OUT}/NASRING.o from ${MID}/NASRING.NRLIB
	@ cp ${MID}/NASRING.NRLIB/code.o ${OUT}/NASRING.o

@
<<NASRING.NRLIB (NRLIB from MID)>>=
${MID}/NASRING.NRLIB: ${MID}/NASRING.spad
	@ echo 0 making ${MID}/NASRING.NRLIB from ${MID}/NASRING.spad
	@ (cd ${MID} ; 	echo ')co NASRING.spad' | ${INTERPSYS} )

@
<<NASRING.spad (SPAD from IN)>>=
${MID}/NASRING.spad: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${MID}/NASRING.spad from ${IN}/naalgc.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NASRING.NRLIB ; \
	${SPADBIN}/notangle -R"category NASRING NonAssociativeRing" ${IN}/naalgc.spad.pamphlet >NASRING.spad )

@
<<naalgc.spad.dvi (DOC from IN)>>=
${DOC}/naalgc.spad.dvi: ${IN}/naalgc.spad.pamphlet
	@ echo 0 making ${DOC}/naalgc.spad.dvi from ${IN}/naalgc.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/naalgc.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} naalgc.spad ; \
	rm -f ${DOC}/naalgc.spad.pamphlet ; \
	rm -f ${DOC}/naalgc.spad.tex ; \
	rm -f ${DOC}/naalgc.spad )

@
\subsection{naalg.spad \cite{1}}
<<naalg.spad (SPAD from IN)>>=
${MID}/naalg.spad: ${IN}/naalg.spad.pamphlet
	@ echo 0 making ${MID}/naalg.spad from ${IN}/naalg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/naalg.spad.pamphlet >naalg.spad )

@
<<ALGPKG.o (O from NRLIB)>>=
${OUT}/ALGPKG.o: ${MID}/ALGPKG.NRLIB
	@ echo 0 making ${OUT}/ALGPKG.o from ${MID}/ALGPKG.NRLIB
	@ cp ${MID}/ALGPKG.NRLIB/code.o ${OUT}/ALGPKG.o

@
<<ALGPKG.NRLIB (NRLIB from MID)>>=
${MID}/ALGPKG.NRLIB: ${MID}/ALGPKG.spad
	@ echo 0 making ${MID}/ALGPKG.NRLIB from ${MID}/ALGPKG.spad
	@ (cd ${MID} ; 	echo ')co ALGPKG.spad' | ${INTERPSYS} )

@
<<ALGPKG.spad (SPAD from IN)>>=
${MID}/ALGPKG.spad: ${IN}/naalg.spad.pamphlet
	@ echo 0 making ${MID}/ALGPKG.spad from ${IN}/naalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGPKG.NRLIB ; \
	${SPADBIN}/notangle -R"package ALGPKG AlgebraPackage" ${IN}/naalg.spad.pamphlet >ALGPKG.spad )

@
<<ALGSC.o (O from NRLIB)>>=
${OUT}/ALGSC.o: ${MID}/ALGSC.NRLIB
	@ echo 0 making ${OUT}/ALGSC.o from ${MID}/ALGSC.NRLIB
	@ cp ${MID}/ALGSC.NRLIB/code.o ${OUT}/ALGSC.o

@
<<ALGSC.NRLIB (NRLIB from MID)>>=
${MID}/ALGSC.NRLIB: ${MID}/ALGSC.spad
	@ echo 0 making ${MID}/ALGSC.NRLIB from ${MID}/ALGSC.spad
	@ (cd ${MID} ; 	echo ')co ALGSC.spad' | ${INTERPSYS} )

@
<<ALGSC.spad (SPAD from IN)>>=
${MID}/ALGSC.spad: ${IN}/naalg.spad.pamphlet
	@ echo 0 making ${MID}/ALGSC.spad from ${IN}/naalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ALGSC.NRLIB ; \
	${SPADBIN}/notangle -R"domain ALGSC AlgebraGivenByStructuralConstants" ${IN}/naalg.spad.pamphlet >ALGSC.spad )

@
<<FRNAAF2.o (O from NRLIB)>>=
${OUT}/FRNAAF2.o: ${MID}/FRNAAF2.NRLIB
	@ echo 0 making ${OUT}/FRNAAF2.o from ${MID}/FRNAAF2.NRLIB
	@ cp ${MID}/FRNAAF2.NRLIB/code.o ${OUT}/FRNAAF2.o

@
<<FRNAAF2.NRLIB (NRLIB from MID)>>=
${MID}/FRNAAF2.NRLIB: ${MID}/FRNAAF2.spad
	@ echo 0 making ${MID}/FRNAAF2.NRLIB from ${MID}/FRNAAF2.spad
	@ (cd ${MID} ; 	echo ')co FRNAAF2.spad' | ${INTERPSYS} )

@
<<FRNAAF2.spad (SPAD from IN)>>=
${MID}/FRNAAF2.spad: ${IN}/naalg.spad.pamphlet
	@ echo 0 making ${MID}/FRNAAF2.spad from ${IN}/naalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRNAAF2.NRLIB ; \
	${SPADBIN}/notangle -R"package FRNAAF2 FramedNonAssociativeAlgebraFunctions2" ${IN}/naalg.spad.pamphlet >FRNAAF2.spad )

@
<<SCPKG.o (O from NRLIB)>>=
${OUT}/SCPKG.o: ${MID}/SCPKG.NRLIB
	@ echo 0 making ${OUT}/SCPKG.o from ${MID}/SCPKG.NRLIB
	@ cp ${MID}/SCPKG.NRLIB/code.o ${OUT}/SCPKG.o

@
<<SCPKG.NRLIB (NRLIB from MID)>>=
${MID}/SCPKG.NRLIB: ${MID}/SCPKG.spad
	@ echo 0 making ${MID}/SCPKG.NRLIB from ${MID}/SCPKG.spad
	@ (cd ${MID} ; 	echo ')co SCPKG.spad' | ${INTERPSYS} )

@
<<SCPKG.spad (SPAD from IN)>>=
${MID}/SCPKG.spad: ${IN}/naalg.spad.pamphlet
	@ echo 0 making ${MID}/SCPKG.spad from ${IN}/naalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SCPKG.NRLIB ; \
	${SPADBIN}/notangle -R"package SCPKG StructuralConstantsPackage" ${IN}/naalg.spad.pamphlet >SCPKG.spad )

@
<<naalg.spad.dvi (DOC from IN)>>=
${DOC}/naalg.spad.dvi: ${IN}/naalg.spad.pamphlet
	@ echo 0 making ${DOC}/naalg.spad.dvi from ${IN}/naalg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/naalg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} naalg.spad ; \
	rm -f ${DOC}/naalg.spad.pamphlet ; \
	rm -f ${DOC}/naalg.spad.tex ; \
	rm -f ${DOC}/naalg.spad )

@
\subsection{ndftip.as \cite{1}}
<<ndftip.as (SPAD from IN)>>=
${MID}/ndftip.as: ${IN}/ndftip.as.pamphlet
	@ echo 0 making ${MID}/ndftip.as from ${IN}/ndftip.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ndftip.as.pamphlet >ndftip.as )

@
<<ndftip.as.dvi (DOC from IN)>>=
${DOC}/ndftip.as.dvi: ${IN}/ndftip.as.pamphlet
	@ echo 0 making ${DOC}/ndftip.as.dvi from ${IN}/ndftip.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ndftip.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ndftip.as ; \
	rm -f ${DOC}/ndftip.as.pamphlet ; \
	rm -f ${DOC}/ndftip.as.tex ; \
	rm -f ${DOC}/ndftip.as )

@
\subsection{nepip.as \cite{1}}
<<nepip.as (SPAD from IN)>>=
${MID}/nepip.as: ${IN}/nepip.as.pamphlet
	@ echo 0 making ${MID}/nepip.as from ${IN}/nepip.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nepip.as.pamphlet >nepip.as )

@
<<nepip.as.dvi (DOC from IN)>>=
${DOC}/nepip.as.dvi: ${IN}/nepip.as.pamphlet
	@ echo 0 making ${DOC}/nepip.as.dvi from ${IN}/nepip.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nepip.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nepip.as ; \
	rm -f ${DOC}/nepip.as.pamphlet ; \
	rm -f ${DOC}/nepip.as.tex ; \
	rm -f ${DOC}/nepip.as )

@
\subsection{newdata.spad \cite{1}}
<<newdata.spad (SPAD from IN)>>=
${MID}/newdata.spad: ${IN}/newdata.spad.pamphlet
	@ echo 0 making ${MID}/newdata.spad from ${IN}/newdata.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/newdata.spad.pamphlet >newdata.spad )

@
<<IPRNTPK.o (O from NRLIB)>>=
${OUT}/IPRNTPK.o: ${MID}/IPRNTPK.NRLIB
	@ echo 0 making ${OUT}/IPRNTPK.o from ${MID}/IPRNTPK.NRLIB
	@ cp ${MID}/IPRNTPK.NRLIB/code.o ${OUT}/IPRNTPK.o

@
<<IPRNTPK.NRLIB (NRLIB from MID)>>=
${MID}/IPRNTPK.NRLIB: ${MID}/IPRNTPK.spad
	@ echo 0 making ${MID}/IPRNTPK.NRLIB from ${MID}/IPRNTPK.spad
	@ (cd ${MID} ; 	echo ')co IPRNTPK.spad' | ${INTERPSYS} )

@
<<IPRNTPK.spad (SPAD from IN)>>=
${MID}/IPRNTPK.spad: ${IN}/newdata.spad.pamphlet
	@ echo 0 making ${MID}/IPRNTPK.spad from ${IN}/newdata.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IPRNTPK.NRLIB ; \
	${SPADBIN}/notangle -R"package IPRNTPK InternalPrintPackage" ${IN}/newdata.spad.pamphlet >IPRNTPK.spad )

@
<<SPLNODE.o (O from NRLIB)>>=
${OUT}/SPLNODE.o: ${MID}/SPLNODE.NRLIB
	@ echo 0 making ${OUT}/SPLNODE.o from ${MID}/SPLNODE.NRLIB
	@ cp ${MID}/SPLNODE.NRLIB/code.o ${OUT}/SPLNODE.o

@
<<SPLNODE.NRLIB (NRLIB from MID)>>=
${MID}/SPLNODE.NRLIB: ${MID}/SPLNODE.spad
	@ echo 0 making ${MID}/SPLNODE.NRLIB from ${MID}/SPLNODE.spad
	@ (cd ${MID} ; 	echo ')co SPLNODE.spad' | ${INTERPSYS} )

@
<<SPLNODE.spad (SPAD from IN)>>=
${MID}/SPLNODE.spad: ${IN}/newdata.spad.pamphlet
	@ echo 0 making ${MID}/SPLNODE.spad from ${IN}/newdata.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SPLNODE.NRLIB ; \
	${SPADBIN}/notangle -R"domain SPLNODE SplittingNode" ${IN}/newdata.spad.pamphlet >SPLNODE.spad )

@
<<SPLTREE.o (O from NRLIB)>>=
${OUT}/SPLTREE.o: ${MID}/SPLTREE.NRLIB
	@ echo 0 making ${OUT}/SPLTREE.o from ${MID}/SPLTREE.NRLIB
	@ cp ${MID}/SPLTREE.NRLIB/code.o ${OUT}/SPLTREE.o

@
<<SPLTREE.NRLIB (NRLIB from MID)>>=
${MID}/SPLTREE.NRLIB: ${MID}/SPLTREE.spad
	@ echo 0 making ${MID}/SPLTREE.NRLIB from ${MID}/SPLTREE.spad
	@ (cd ${MID} ; 	echo ')co SPLTREE.spad' | ${INTERPSYS} )

@
<<SPLTREE.spad (SPAD from IN)>>=
${MID}/SPLTREE.spad: ${IN}/newdata.spad.pamphlet
	@ echo 0 making ${MID}/SPLTREE.spad from ${IN}/newdata.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SPLTREE.NRLIB ; \
	${SPADBIN}/notangle -R"domain SPLTREE SplittingTree" ${IN}/newdata.spad.pamphlet >SPLTREE.spad )

@
<<TBCMPPK.o (O from NRLIB)>>=
${OUT}/TBCMPPK.o: ${MID}/TBCMPPK.NRLIB
	@ echo 0 making ${OUT}/TBCMPPK.o from ${MID}/TBCMPPK.NRLIB
	@ cp ${MID}/TBCMPPK.NRLIB/code.o ${OUT}/TBCMPPK.o

@
<<TBCMPPK.NRLIB (NRLIB from MID)>>=
${MID}/TBCMPPK.NRLIB: ${MID}/TBCMPPK.spad
	@ echo 0 making ${MID}/TBCMPPK.NRLIB from ${MID}/TBCMPPK.spad
	@ (cd ${MID} ; 	echo ')co TBCMPPK.spad' | ${INTERPSYS} )

@
<<TBCMPPK.spad (SPAD from IN)>>=
${MID}/TBCMPPK.spad: ${IN}/newdata.spad.pamphlet
	@ echo 0 making ${MID}/TBCMPPK.spad from ${IN}/newdata.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TBCMPPK.NRLIB ; \
	${SPADBIN}/notangle -R"package TBCMPPK TabulatedComputationPackage" ${IN}/newdata.spad.pamphlet >TBCMPPK.spad )

@
<<newdata.spad.dvi (DOC from IN)>>=
${DOC}/newdata.spad.dvi: ${IN}/newdata.spad.pamphlet
	@ echo 0 making ${DOC}/newdata.spad.dvi from ${IN}/newdata.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/newdata.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} newdata.spad ; \
	rm -f ${DOC}/newdata.spad.pamphlet ; \
	rm -f ${DOC}/newdata.spad.tex ; \
	rm -f ${DOC}/newdata.spad )

@
\subsection{newpoint.spad \cite{1}}
<<newpoint.spad (SPAD from IN)>>=
${MID}/newpoint.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/newpoint.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/newpoint.spad.pamphlet >newpoint.spad )

@
<<COMPPROP.o (O from NRLIB)>>=
${OUT}/COMPPROP.o: ${MID}/COMPPROP.NRLIB
	@ echo 0 making ${OUT}/COMPPROP.o from ${MID}/COMPPROP.NRLIB
	@ cp ${MID}/COMPPROP.NRLIB/code.o ${OUT}/COMPPROP.o

@
<<COMPPROP.NRLIB (NRLIB from MID)>>=
${MID}/COMPPROP.NRLIB: ${MID}/COMPPROP.spad
	@ echo 0 making ${MID}/COMPPROP.NRLIB from ${MID}/COMPPROP.spad
	@ (cd ${MID} ; 	echo ')co COMPPROP.spad' | ${INTERPSYS} )

@
<<COMPPROP.spad (SPAD from IN)>>=
${MID}/COMPPROP.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/COMPPROP.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMPPROP.NRLIB ; \
	${SPADBIN}/notangle -R"domain COMPPROP SubSpaceComponentProperty" ${IN}/newpoint.spad.pamphlet >COMPPROP.spad )

@
<<SUBSPACE.o (O from NRLIB)>>=
${OUT}/SUBSPACE.o: ${MID}/SUBSPACE.NRLIB
	@ echo 0 making ${OUT}/SUBSPACE.o from ${MID}/SUBSPACE.NRLIB
	@ cp ${MID}/SUBSPACE.NRLIB/code.o ${OUT}/SUBSPACE.o

@
<<SUBSPACE.NRLIB (NRLIB from MID)>>=
${MID}/SUBSPACE.NRLIB: ${MID}/SUBSPACE.spad
	@ echo 0 making ${MID}/SUBSPACE.NRLIB from ${MID}/SUBSPACE.spad
	@ (cd ${MID} ; 	echo ')co SUBSPACE.spad' | ${INTERPSYS} )

@
<<SUBSPACE.spad (SPAD from IN)>>=
${MID}/SUBSPACE.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/SUBSPACE.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUBSPACE.NRLIB ; \
	${SPADBIN}/notangle -R"domain SUBSPACE SubSpace" ${IN}/newpoint.spad.pamphlet >SUBSPACE.spad )

@
<<POINT.o (O from NRLIB)>>=
${OUT}/POINT.o: ${MID}/POINT.NRLIB
	@ echo 0 making ${OUT}/POINT.o from ${MID}/POINT.NRLIB
	@ cp ${MID}/POINT.NRLIB/code.o ${OUT}/POINT.o

@
<<POINT.NRLIB (NRLIB from MID)>>=
${MID}/POINT.NRLIB: ${MID}/POINT.spad
	@ echo 0 making ${MID}/POINT.NRLIB from ${MID}/POINT.spad
	@ (cd ${MID} ; 	echo ')co POINT.spad' | ${INTERPSYS} )

@
<<POINT.spad (SPAD from IN)>>=
${MID}/POINT.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/POINT.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POINT.NRLIB ; \
	${SPADBIN}/notangle -R"domain POINT Point" ${IN}/newpoint.spad.pamphlet >POINT.spad )

@
<<PTCAT.o (O from NRLIB)>>=
${OUT}/PTCAT.o: ${MID}/PTCAT.NRLIB
	@ echo 0 making ${OUT}/PTCAT.o from ${MID}/PTCAT.NRLIB
	@ cp ${MID}/PTCAT.NRLIB/code.o ${OUT}/PTCAT.o

@
<<PTCAT.NRLIB (NRLIB from MID)>>=
${MID}/PTCAT.NRLIB: ${MID}/PTCAT.spad
	@ echo 0 making ${MID}/PTCAT.NRLIB from ${MID}/PTCAT.spad
	@ (cd ${MID} ; 	echo ')co PTCAT.spad' | ${INTERPSYS} )

@
<<PTCAT.spad (SPAD from IN)>>=
${MID}/PTCAT.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/PTCAT.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PTCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PTCAT PointCategory" ${IN}/newpoint.spad.pamphlet >PTCAT.spad )

@
<<PTFUNC2.o (O from NRLIB)>>=
${OUT}/PTFUNC2.o: ${MID}/PTFUNC2.NRLIB
	@ echo 0 making ${OUT}/PTFUNC2.o from ${MID}/PTFUNC2.NRLIB
	@ cp ${MID}/PTFUNC2.NRLIB/code.o ${OUT}/PTFUNC2.o

@
<<PTFUNC2.NRLIB (NRLIB from MID)>>=
${MID}/PTFUNC2.NRLIB: ${MID}/PTFUNC2.spad
	@ echo 0 making ${MID}/PTFUNC2.NRLIB from ${MID}/PTFUNC2.spad
	@ (cd ${MID} ; 	echo ')co PTFUNC2.spad' | ${INTERPSYS} )

@
<<PTFUNC2.spad (SPAD from IN)>>=
${MID}/PTFUNC2.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/PTFUNC2.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PTFUNC2.NRLIB ; \
	${SPADBIN}/notangle -R"package PTFUNC2 PointFunctions2" ${IN}/newpoint.spad.pamphlet >PTFUNC2.spad )

@
<<PTPACK.o (O from NRLIB)>>=
${OUT}/PTPACK.o: ${MID}/PTPACK.NRLIB
	@ echo 0 making ${OUT}/PTPACK.o from ${MID}/PTPACK.NRLIB
	@ cp ${MID}/PTPACK.NRLIB/code.o ${OUT}/PTPACK.o

@
<<PTPACK.NRLIB (NRLIB from MID)>>=
${MID}/PTPACK.NRLIB: ${MID}/PTPACK.spad
	@ echo 0 making ${MID}/PTPACK.NRLIB from ${MID}/PTPACK.spad
	@ (cd ${MID} ; 	echo ')co PTPACK.spad' | ${INTERPSYS} )

@
<<PTPACK.spad (SPAD from IN)>>=
${MID}/PTPACK.spad: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${MID}/PTPACK.spad from ${IN}/newpoint.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PTPACK.NRLIB ; \
	${SPADBIN}/notangle -R"package PTPACK PointPackage" ${IN}/newpoint.spad.pamphlet >PTPACK.spad )

@
<<newpoint.spad.dvi (DOC from IN)>>=
${DOC}/newpoint.spad.dvi: ${IN}/newpoint.spad.pamphlet
	@ echo 0 making ${DOC}/newpoint.spad.dvi from ${IN}/newpoint.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/newpoint.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} newpoint.spad ; \
	rm -f ${DOC}/newpoint.spad.pamphlet ; \
	rm -f ${DOC}/newpoint.spad.tex ; \
	rm -f ${DOC}/newpoint.spad )

@
\subsection{newpoly.spad \cite{1}}
<<newpoly.spad (SPAD from IN)>>=
${MID}/newpoly.spad: ${IN}/newpoly.spad.pamphlet
	@ echo 0 making ${MID}/newpoly.spad from ${IN}/newpoly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/newpoly.spad.pamphlet >newpoly.spad )

@
<<NSMP.o (O from NRLIB)>>=
${OUT}/NSMP.o: ${MID}/NSMP.NRLIB
	@ echo 0 making ${OUT}/NSMP.o from ${MID}/NSMP.NRLIB
	@ cp ${MID}/NSMP.NRLIB/code.o ${OUT}/NSMP.o

@
<<NSMP.NRLIB (NRLIB from MID)>>=
${MID}/NSMP.NRLIB: ${MID}/NSMP.spad
	@ echo 0 making ${MID}/NSMP.NRLIB from ${MID}/NSMP.spad
	@ (cd ${MID} ; 	echo ')co NSMP.spad' | ${INTERPSYS} )

@
<<NSMP.spad (SPAD from IN)>>=
${MID}/NSMP.spad: ${IN}/newpoly.spad.pamphlet
	@ echo 0 making ${MID}/NSMP.spad from ${IN}/newpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NSMP.NRLIB ; \
	${SPADBIN}/notangle -R"domain NSMP NewSparseMultivariatePolynomial" ${IN}/newpoly.spad.pamphlet >NSMP.spad )

@
<<NSUP.o (O from NRLIB)>>=
${OUT}/NSUP.o: ${MID}/NSUP.NRLIB
	@ echo 0 making ${OUT}/NSUP.o from ${MID}/NSUP.NRLIB
	@ cp ${MID}/NSUP.NRLIB/code.o ${OUT}/NSUP.o

@
<<NSUP.NRLIB (NRLIB from MID)>>=
${MID}/NSUP.NRLIB: ${MID}/NSUP.spad
	@ echo 0 making ${MID}/NSUP.NRLIB from ${MID}/NSUP.spad
	@ (cd ${MID} ; 	echo ')co NSUP.spad' | ${INTERPSYS} )

@
<<NSUP.spad (SPAD from IN)>>=
${MID}/NSUP.spad: ${IN}/newpoly.spad.pamphlet
	@ echo 0 making ${MID}/NSUP.spad from ${IN}/newpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NSUP.NRLIB ; \
	${SPADBIN}/notangle -R"domain NSUP NewSparseUnivariatePolynomial" ${IN}/newpoly.spad.pamphlet >NSUP.spad )

@
<<NSUP2.o (O from NRLIB)>>=
${OUT}/NSUP2.o: ${MID}/NSUP2.NRLIB
	@ echo 0 making ${OUT}/NSUP2.o from ${MID}/NSUP2.NRLIB
	@ cp ${MID}/NSUP2.NRLIB/code.o ${OUT}/NSUP2.o

@
<<NSUP2.NRLIB (NRLIB from MID)>>=
${MID}/NSUP2.NRLIB: ${MID}/NSUP2.spad
	@ echo 0 making ${MID}/NSUP2.NRLIB from ${MID}/NSUP2.spad
	@ (cd ${MID} ; 	echo ')co NSUP2.spad' | ${INTERPSYS} )

@
<<NSUP2.spad (SPAD from IN)>>=
${MID}/NSUP2.spad: ${IN}/newpoly.spad.pamphlet
	@ echo 0 making ${MID}/NSUP2.spad from ${IN}/newpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NSUP2.NRLIB ; \
	${SPADBIN}/notangle -R"package NSUP2 NewSparseUnivariatePolynomialFunctions2" ${IN}/newpoly.spad.pamphlet >NSUP2.spad )

@
<<RPOLCAT-.o (O from NRLIB)>>=
${OUT}/RPOLCAT-.o: ${MID}/RPOLCAT.NRLIB
	@ echo 0 making ${OUT}/RPOLCAT-.o from ${MID}/RPOLCAT-.NRLIB
	@ cp ${MID}/RPOLCAT-.NRLIB/code.o ${OUT}/RPOLCAT-.o

@
<<RPOLCAT-.NRLIB (NRLIB from MID)>>=
${MID}/RPOLCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/RPOLCAT.spad 
	@ echo 0 making ${MID}/RPOLCAT-.NRLIB from ${MID}/RPOLCAT.spad
	@ (cd ${MID} ; 	echo ')co RPOLCAT.spad' | ${INTERPSYS} )

@
<<RPOLCAT.o (O from NRLIB)>>=
${OUT}/RPOLCAT.o: ${MID}/RPOLCAT.NRLIB
	@ echo 0 making ${OUT}/RPOLCAT.o from ${MID}/RPOLCAT.NRLIB
	@ cp ${MID}/RPOLCAT.NRLIB/code.o ${OUT}/RPOLCAT.o

@
<<RPOLCAT.NRLIB (NRLIB from MID)>>=
${MID}/RPOLCAT.NRLIB: ${MID}/RPOLCAT.spad
	@ echo 0 making ${MID}/RPOLCAT.NRLIB from ${MID}/RPOLCAT.spad
	@ (cd ${MID} ; 	echo ')co RPOLCAT.spad' | ${INTERPSYS} )

@
<<RPOLCAT.spad (SPAD from IN)>>=
${MID}/RPOLCAT.spad: ${IN}/newpoly.spad.pamphlet
	@ echo 0 making ${MID}/RPOLCAT.spad from ${IN}/newpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RPOLCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category RPOLCAT RecursivePolynomialCategory" ${IN}/newpoly.spad.pamphlet >RPOLCAT.spad )

@
<<newpoly.spad.dvi (DOC from IN)>>=
${DOC}/newpoly.spad.dvi: ${IN}/newpoly.spad.pamphlet
	@ echo 0 making ${DOC}/newpoly.spad.dvi from ${IN}/newpoly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/newpoly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} newpoly.spad ; \
	rm -f ${DOC}/newpoly.spad.pamphlet ; \
	rm -f ${DOC}/newpoly.spad.tex ; \
	rm -f ${DOC}/newpoly.spad )

@
\subsection{nlinsol.spad \cite{1}}
<<nlinsol.spad (SPAD from IN)>>=
${MID}/nlinsol.spad: ${IN}/nlinsol.spad.pamphlet
	@ echo 0 making ${MID}/nlinsol.spad from ${IN}/nlinsol.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nlinsol.spad.pamphlet >nlinsol.spad )

@
<<NLINSOL.o (O from NRLIB)>>=
${OUT}/NLINSOL.o: ${MID}/NLINSOL.NRLIB
	@ echo 0 making ${OUT}/NLINSOL.o from ${MID}/NLINSOL.NRLIB
	@ cp ${MID}/NLINSOL.NRLIB/code.o ${OUT}/NLINSOL.o

@
<<NLINSOL.NRLIB (NRLIB from MID)>>=
${MID}/NLINSOL.NRLIB: ${MID}/NLINSOL.spad
	@ echo 0 making ${MID}/NLINSOL.NRLIB from ${MID}/NLINSOL.spad
	@ (cd ${MID} ; 	echo ')co NLINSOL.spad' | ${INTERPSYS} )

@
<<NLINSOL.spad (SPAD from IN)>>=
${MID}/NLINSOL.spad: ${IN}/nlinsol.spad.pamphlet
	@ echo 0 making ${MID}/NLINSOL.spad from ${IN}/nlinsol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NLINSOL.NRLIB ; \
	${SPADBIN}/notangle -R"package NLINSOL NonLinearSolvePackage" ${IN}/nlinsol.spad.pamphlet >NLINSOL.spad )

@
<<RETSOL.o (O from NRLIB)>>=
${OUT}/RETSOL.o: ${MID}/RETSOL.NRLIB
	@ echo 0 making ${OUT}/RETSOL.o from ${MID}/RETSOL.NRLIB
	@ cp ${MID}/RETSOL.NRLIB/code.o ${OUT}/RETSOL.o

@
<<RETSOL.NRLIB (NRLIB from MID)>>=
${MID}/RETSOL.NRLIB: ${MID}/RETSOL.spad
	@ echo 0 making ${MID}/RETSOL.NRLIB from ${MID}/RETSOL.spad
	@ (cd ${MID} ; 	echo ')co RETSOL.spad' | ${INTERPSYS} )

@
<<RETSOL.spad (SPAD from IN)>>=
${MID}/RETSOL.spad: ${IN}/nlinsol.spad.pamphlet
	@ echo 0 making ${MID}/RETSOL.spad from ${IN}/nlinsol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RETSOL.NRLIB ; \
	${SPADBIN}/notangle -R"package RETSOL RetractSolvePackage" ${IN}/nlinsol.spad.pamphlet >RETSOL.spad )

@
<<nlinsol.spad.dvi (DOC from IN)>>=
${DOC}/nlinsol.spad.dvi: ${IN}/nlinsol.spad.pamphlet
	@ echo 0 making ${DOC}/nlinsol.spad.dvi from ${IN}/nlinsol.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nlinsol.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nlinsol.spad ; \
	rm -f ${DOC}/nlinsol.spad.pamphlet ; \
	rm -f ${DOC}/nlinsol.spad.tex ; \
	rm -f ${DOC}/nlinsol.spad )

@
\subsection{nlode.spad \cite{1}}
<<nlode.spad (SPAD from IN)>>=
${MID}/nlode.spad: ${IN}/nlode.spad.pamphlet
	@ echo 0 making ${MID}/nlode.spad from ${IN}/nlode.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nlode.spad.pamphlet >nlode.spad )

@
<<NODE1.o (O from NRLIB)>>=
${OUT}/NODE1.o: ${MID}/NODE1.NRLIB
	@ echo 0 making ${OUT}/NODE1.o from ${MID}/NODE1.NRLIB
	@ cp ${MID}/NODE1.NRLIB/code.o ${OUT}/NODE1.o

@
<<NODE1.NRLIB (NRLIB from MID)>>=
${MID}/NODE1.NRLIB: ${MID}/NODE1.spad
	@ echo 0 making ${MID}/NODE1.NRLIB from ${MID}/NODE1.spad
	@ (cd ${MID} ; 	echo ')co NODE1.spad' | ${INTERPSYS} )

@
<<NODE1.spad (SPAD from IN)>>=
${MID}/NODE1.spad: ${IN}/nlode.spad.pamphlet
	@ echo 0 making ${MID}/NODE1.spad from ${IN}/nlode.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NODE1.NRLIB ; \
	${SPADBIN}/notangle -R"package NODE1 NonLinearFirstOrderODESolver" ${IN}/nlode.spad.pamphlet >NODE1.spad )

@
<<nlode.spad.dvi (DOC from IN)>>=
${DOC}/nlode.spad.dvi: ${IN}/nlode.spad.pamphlet
	@ echo 0 making ${DOC}/nlode.spad.dvi from ${IN}/nlode.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nlode.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nlode.spad ; \
	rm -f ${DOC}/nlode.spad.pamphlet ; \
	rm -f ${DOC}/nlode.spad.tex ; \
	rm -f ${DOC}/nlode.spad )

@
\subsection{noptip.as \cite{1}}
<<noptip.as (SPAD from IN)>>=
${MID}/noptip.as: ${IN}/noptip.as.pamphlet
	@ echo 0 making ${MID}/noptip.as from ${IN}/noptip.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/noptip.as.pamphlet >noptip.as )

@
<<noptip.as.dvi (DOC from IN)>>=
${DOC}/noptip.as.dvi: ${IN}/noptip.as.pamphlet
	@ echo 0 making ${DOC}/noptip.as.dvi from ${IN}/noptip.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/noptip.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} noptip.as ; \
	rm -f ${DOC}/noptip.as.pamphlet ; \
	rm -f ${DOC}/noptip.as.tex ; \
	rm -f ${DOC}/noptip.as )

@
\subsection{npcoef.spad \cite{1}}
<<npcoef.spad (SPAD from IN)>>=
${MID}/npcoef.spad: ${IN}/npcoef.spad.pamphlet
	@ echo 0 making ${MID}/npcoef.spad from ${IN}/npcoef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/npcoef.spad.pamphlet >npcoef.spad )

@
<<NPCOEF.o (O from NRLIB)>>=
${OUT}/NPCOEF.o: ${MID}/NPCOEF.NRLIB
	@ echo 0 making ${OUT}/NPCOEF.o from ${MID}/NPCOEF.NRLIB
	@ cp ${MID}/NPCOEF.NRLIB/code.o ${OUT}/NPCOEF.o

@
<<NPCOEF.NRLIB (NRLIB from MID)>>=
${MID}/NPCOEF.NRLIB: ${MID}/NPCOEF.spad
	@ echo 0 making ${MID}/NPCOEF.NRLIB from ${MID}/NPCOEF.spad
	@ (cd ${MID} ; 	echo ')co NPCOEF.spad' | ${INTERPSYS} )

@
<<NPCOEF.spad (SPAD from IN)>>=
${MID}/NPCOEF.spad: ${IN}/npcoef.spad.pamphlet
	@ echo 0 making ${MID}/NPCOEF.spad from ${IN}/npcoef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NPCOEF.NRLIB ; \
	${SPADBIN}/notangle -R"package NPCOEF NPCoef" ${IN}/npcoef.spad.pamphlet >NPCOEF.spad )

@
<<npcoef.spad.dvi (DOC from IN)>>=
${DOC}/npcoef.spad.dvi: ${IN}/npcoef.spad.pamphlet
	@ echo 0 making ${DOC}/npcoef.spad.dvi from ${IN}/npcoef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/npcoef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} npcoef.spad ; \
	rm -f ${DOC}/npcoef.spad.pamphlet ; \
	rm -f ${DOC}/npcoef.spad.tex ; \
	rm -f ${DOC}/npcoef.spad )

@
\subsection{nqip.as \cite{1}}
<<nqip.as (SPAD from IN)>>=
${MID}/nqip.as: ${IN}/nqip.as.pamphlet
	@ echo 0 making ${MID}/nqip.as from ${IN}/nqip.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nqip.as.pamphlet >nqip.as )

@
<<nqip.as.dvi (DOC from IN)>>=
${DOC}/nqip.as.dvi: ${IN}/nqip.as.pamphlet
	@ echo 0 making ${DOC}/nqip.as.dvi from ${IN}/nqip.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nqip.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nqip.as ; \
	rm -f ${DOC}/nqip.as.pamphlet ; \
	rm -f ${DOC}/nqip.as.tex ; \
	rm -f ${DOC}/nqip.as )

@
\subsection{nrc.as \cite{1}}
<<nrc.as (SPAD from IN)>>=
${MID}/nrc.as: ${IN}/nrc.as.pamphlet
	@ echo 0 making ${MID}/nrc.as from ${IN}/nrc.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nrc.as.pamphlet >nrc.as )

@
<<nrc.as.dvi (DOC from IN)>>=
${DOC}/nrc.as.dvi: ${IN}/nrc.as.pamphlet
	@ echo 0 making ${DOC}/nrc.as.dvi from ${IN}/nrc.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nrc.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nrc.as ; \
	rm -f ${DOC}/nrc.as.pamphlet ; \
	rm -f ${DOC}/nrc.as.tex ; \
	rm -f ${DOC}/nrc.as )

@
\subsection{nregset.spad \cite{1}}
<<nregset.spad (SPAD from IN)>>=
${MID}/nregset.spad: ${IN}/nregset.spad.pamphlet
	@ echo 0 making ${MID}/nregset.spad from ${IN}/nregset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nregset.spad.pamphlet >nregset.spad )

@
<<nregset.spad.dvi (DOC from IN)>>=
${DOC}/nregset.spad.dvi: ${IN}/nregset.spad.pamphlet
	@ echo 0 making ${DOC}/nregset.spad.dvi from ${IN}/nregset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nregset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nregset.spad ; \
	rm -f ${DOC}/nregset.spad.pamphlet ; \
	rm -f ${DOC}/nregset.spad.tex ; \
	rm -f ${DOC}/nregset.spad )

@
\subsection{nsfip.as \cite{1}}
<<nsfip.as (SPAD from IN)>>=
${MID}/nsfip.as: ${IN}/nsfip.as.pamphlet
	@ echo 0 making ${MID}/nsfip.as from ${IN}/nsfip.as.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nsfip.as.pamphlet >nsfip.as )

@
<<nsfip.as.dvi (DOC from IN)>>=
${DOC}/nsfip.as.dvi: ${IN}/nsfip.as.pamphlet
	@ echo 0 making ${DOC}/nsfip.as.dvi from ${IN}/nsfip.as.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nsfip.as.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nsfip.as ; \
	rm -f ${DOC}/nsfip.as.pamphlet ; \
	rm -f ${DOC}/nsfip.as.tex ; \
	rm -f ${DOC}/nsfip.as )

@
\subsection{nsregset.spad \cite{1}}
<<nsregset.spad (SPAD from IN)>>=
${MID}/nsregset.spad: ${IN}/nsregset.spad.pamphlet
	@ echo 0 making ${MID}/nsregset.spad from ${IN}/nsregset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/nsregset.spad.pamphlet >nsregset.spad )

@
<<nsregset.spad.dvi (DOC from IN)>>=
${DOC}/nsregset.spad.dvi: ${IN}/nsregset.spad.pamphlet
	@ echo 0 making ${DOC}/nsregset.spad.dvi from ${IN}/nsregset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/nsregset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} nsregset.spad ; \
	rm -f ${DOC}/nsregset.spad.pamphlet ; \
	rm -f ${DOC}/nsregset.spad.tex ; \
	rm -f ${DOC}/nsregset.spad )

@
\subsection{numeigen.spad \cite{1}}
<<numeigen.spad (SPAD from IN)>>=
${MID}/numeigen.spad: ${IN}/numeigen.spad.pamphlet
	@ echo 0 making ${MID}/numeigen.spad from ${IN}/numeigen.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/numeigen.spad.pamphlet >numeigen.spad )

@
<<INEP.o (O from NRLIB)>>=
${OUT}/INEP.o: ${MID}/INEP.NRLIB
	@ echo 0 making ${OUT}/INEP.o from ${MID}/INEP.NRLIB
	@ cp ${MID}/INEP.NRLIB/code.o ${OUT}/INEP.o

@
<<INEP.NRLIB (NRLIB from MID)>>=
${MID}/INEP.NRLIB: ${MID}/INEP.spad
	@ echo 0 making ${MID}/INEP.NRLIB from ${MID}/INEP.spad
	@ (cd ${MID} ; 	echo ')co INEP.spad' | ${INTERPSYS} )

@
<<INEP.spad (SPAD from IN)>>=
${MID}/INEP.spad: ${IN}/numeigen.spad.pamphlet
	@ echo 0 making ${MID}/INEP.spad from ${IN}/numeigen.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INEP.NRLIB ; \
	${SPADBIN}/notangle -R"package INEP InnerNumericEigenPackage" ${IN}/numeigen.spad.pamphlet >INEP.spad )

@
<<NCEP.o (O from NRLIB)>>=
${OUT}/NCEP.o: ${MID}/NCEP.NRLIB
	@ echo 0 making ${OUT}/NCEP.o from ${MID}/NCEP.NRLIB
	@ cp ${MID}/NCEP.NRLIB/code.o ${OUT}/NCEP.o

@
<<NCEP.NRLIB (NRLIB from MID)>>=
${MID}/NCEP.NRLIB: ${MID}/NCEP.spad
	@ echo 0 making ${MID}/NCEP.NRLIB from ${MID}/NCEP.spad
	@ (cd ${MID} ; 	echo ')co NCEP.spad' | ${INTERPSYS} )

@
<<NCEP.spad (SPAD from IN)>>=
${MID}/NCEP.spad: ${IN}/numeigen.spad.pamphlet
	@ echo 0 making ${MID}/NCEP.spad from ${IN}/numeigen.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NCEP.NRLIB ; \
	${SPADBIN}/notangle -R"package NCEP NumericComplexEigenPackage" ${IN}/numeigen.spad.pamphlet >NCEP.spad )

@
<<NREP.o (O from NRLIB)>>=
${OUT}/NREP.o: ${MID}/NREP.NRLIB
	@ echo 0 making ${OUT}/NREP.o from ${MID}/NREP.NRLIB
	@ cp ${MID}/NREP.NRLIB/code.o ${OUT}/NREP.o

@
<<NREP.NRLIB (NRLIB from MID)>>=
${MID}/NREP.NRLIB: ${MID}/NREP.spad
	@ echo 0 making ${MID}/NREP.NRLIB from ${MID}/NREP.spad
	@ (cd ${MID} ; 	echo ')co NREP.spad' | ${INTERPSYS} )

@
<<NREP.spad (SPAD from IN)>>=
${MID}/NREP.spad: ${IN}/numeigen.spad.pamphlet
	@ echo 0 making ${MID}/NREP.spad from ${IN}/numeigen.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NREP.NRLIB ; \
	${SPADBIN}/notangle -R"package NREP NumericRealEigenPackage" ${IN}/numeigen.spad.pamphlet >NREP.spad )

@
<<numeigen.spad.dvi (DOC from IN)>>=
${DOC}/numeigen.spad.dvi: ${IN}/numeigen.spad.pamphlet
	@ echo 0 making ${DOC}/numeigen.spad.dvi from ${IN}/numeigen.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/numeigen.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} numeigen.spad ; \
	rm -f ${DOC}/numeigen.spad.pamphlet ; \
	rm -f ${DOC}/numeigen.spad.tex ; \
	rm -f ${DOC}/numeigen.spad )

@
\subsection{numeric.spad \cite{1}}
<<numeric.spad (SPAD from IN)>>=
${MID}/numeric.spad: ${IN}/numeric.spad.pamphlet
	@ echo 0 making ${MID}/numeric.spad from ${IN}/numeric.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/numeric.spad.pamphlet >numeric.spad )

@
<<DRAWHACK.o (O from NRLIB)>>=
${OUT}/DRAWHACK.o: ${MID}/DRAWHACK.NRLIB
	@ echo 0 making ${OUT}/DRAWHACK.o from ${MID}/DRAWHACK.NRLIB
	@ cp ${MID}/DRAWHACK.NRLIB/code.o ${OUT}/DRAWHACK.o

@
<<DRAWHACK.NRLIB (NRLIB from MID)>>=
${MID}/DRAWHACK.NRLIB: ${OUT}/CFCAT.o ${MID}/DRAWHACK.spad
	@ echo 0 making ${MID}/DRAWHACK.NRLIB from ${MID}/DRAWHACK.spad
	@ (cd ${MID} ; 	echo ')co DRAWHACK.spad' | ${INTERPSYS} )

@
<<DRAWHACK.spad (SPAD from IN)>>=
${MID}/DRAWHACK.spad: ${IN}/numeric.spad.pamphlet
	@ echo 0 making ${MID}/DRAWHACK.spad from ${IN}/numeric.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DRAWHACK.NRLIB ; \
	${SPADBIN}/notangle -R"package DRAWHACK DrawNumericHack" ${IN}/numeric.spad.pamphlet >DRAWHACK.spad )

@
<<NUMERIC.o (O from NRLIB)>>=
${OUT}/NUMERIC.o: ${MID}/NUMERIC.NRLIB
	@ echo 0 making ${OUT}/NUMERIC.o from ${MID}/NUMERIC.NRLIB
	@ cp ${MID}/NUMERIC.NRLIB/code.o ${OUT}/NUMERIC.o

@
<<NUMERIC.NRLIB (NRLIB from MID)>>=
${MID}/NUMERIC.NRLIB: ${MID}/NUMERIC.spad
	@ echo 0 making ${MID}/NUMERIC.NRLIB from ${MID}/NUMERIC.spad
	@ (cd ${MID} ; 	echo ')co NUMERIC.spad' | ${INTERPSYS} )

@
<<NUMERIC.spad (SPAD from IN)>>=
${MID}/NUMERIC.spad: ${IN}/numeric.spad.pamphlet
	@ echo 0 making ${MID}/NUMERIC.spad from ${IN}/numeric.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NUMERIC.NRLIB ; \
	${SPADBIN}/notangle -R"package NUMERIC Numeric" ${IN}/numeric.spad.pamphlet >NUMERIC.spad )

@
<<numeric.spad.dvi (DOC from IN)>>=
${DOC}/numeric.spad.dvi: ${IN}/numeric.spad.pamphlet
	@ echo 0 making ${DOC}/numeric.spad.dvi from ${IN}/numeric.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/numeric.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} numeric.spad ; \
	rm -f ${DOC}/numeric.spad.pamphlet ; \
	rm -f ${DOC}/numeric.spad.tex ; \
	rm -f ${DOC}/numeric.spad )

@
\subsection{numode.spad \cite{1}}
<<numode.spad (SPAD from IN)>>=
${MID}/numode.spad: ${IN}/numode.spad.pamphlet
	@ echo 0 making ${MID}/numode.spad from ${IN}/numode.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/numode.spad.pamphlet >numode.spad )

@
<<NUMODE.o (O from NRLIB)>>=
${OUT}/NUMODE.o: ${MID}/NUMODE.NRLIB
	@ echo 0 making ${OUT}/NUMODE.o from ${MID}/NUMODE.NRLIB
	@ cp ${MID}/NUMODE.NRLIB/code.o ${OUT}/NUMODE.o

@
<<NUMODE.NRLIB (NRLIB from MID)>>=
${MID}/NUMODE.NRLIB: ${MID}/NUMODE.spad
	@ echo 0 making ${MID}/NUMODE.NRLIB from ${MID}/NUMODE.spad
	@ (cd ${MID} ; 	echo ')co NUMODE.spad' | ${INTERPSYS} )

@
<<NUMODE.spad (SPAD from IN)>>=
${MID}/NUMODE.spad: ${IN}/numode.spad.pamphlet
	@ echo 0 making ${MID}/NUMODE.spad from ${IN}/numode.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NUMODE.NRLIB ; \
	${SPADBIN}/notangle -R"package NUMODE NumericalOrdinaryDifferentialEquations" ${IN}/numode.spad.pamphlet >NUMODE.spad )

@
<<numode.spad.dvi (DOC from IN)>>=
${DOC}/numode.spad.dvi: ${IN}/numode.spad.pamphlet
	@ echo 0 making ${DOC}/numode.spad.dvi from ${IN}/numode.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/numode.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} numode.spad ; \
	rm -f ${DOC}/numode.spad.pamphlet ; \
	rm -f ${DOC}/numode.spad.tex ; \
	rm -f ${DOC}/numode.spad )

@
\subsection{numquad.spad \cite{1}}
<<numquad.spad (SPAD from IN)>>=
${MID}/numquad.spad: ${IN}/numquad.spad.pamphlet
	@ echo 0 making ${MID}/numquad.spad from ${IN}/numquad.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/numquad.spad.pamphlet >numquad.spad )

@
<<NUMQUAD.o (O from NRLIB)>>=
${OUT}/NUMQUAD.o: ${MID}/NUMQUAD.NRLIB
	@ echo 0 making ${OUT}/NUMQUAD.o from ${MID}/NUMQUAD.NRLIB
	@ cp ${MID}/NUMQUAD.NRLIB/code.o ${OUT}/NUMQUAD.o

@
<<NUMQUAD.NRLIB (NRLIB from MID)>>=
${MID}/NUMQUAD.NRLIB: ${MID}/NUMQUAD.spad
	@ echo 0 making ${MID}/NUMQUAD.NRLIB from ${MID}/NUMQUAD.spad
	@ (cd ${MID} ; 	echo ')co NUMQUAD.spad' | ${INTERPSYS} )

@
<<NUMQUAD.spad (SPAD from IN)>>=
${MID}/NUMQUAD.spad: ${IN}/numquad.spad.pamphlet
	@ echo 0 making ${MID}/NUMQUAD.spad from ${IN}/numquad.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NUMQUAD.NRLIB ; \
	${SPADBIN}/notangle -R"package NUMQUAD NumericalQuadrature" ${IN}/numquad.spad.pamphlet >NUMQUAD.spad )

@
<<numquad.spad.dvi (DOC from IN)>>=
${DOC}/numquad.spad.dvi: ${IN}/numquad.spad.pamphlet
	@ echo 0 making ${DOC}/numquad.spad.dvi from ${IN}/numquad.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/numquad.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} numquad.spad ; \
	rm -f ${DOC}/numquad.spad.pamphlet ; \
	rm -f ${DOC}/numquad.spad.tex ; \
	rm -f ${DOC}/numquad.spad )

@
\subsection{numsolve.spad \cite{1}}
<<numsolve.spad (SPAD from IN)>>=
${MID}/numsolve.spad: ${IN}/numsolve.spad.pamphlet
	@ echo 0 making ${MID}/numsolve.spad from ${IN}/numsolve.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/numsolve.spad.pamphlet >numsolve.spad )

@
<<FLOATCP.o (O from NRLIB)>>=
${OUT}/FLOATCP.o: ${MID}/FLOATCP.NRLIB
	@ echo 0 making ${OUT}/FLOATCP.o from ${MID}/FLOATCP.NRLIB
	@ cp ${MID}/FLOATCP.NRLIB/code.o ${OUT}/FLOATCP.o

@
<<FLOATCP.NRLIB (NRLIB from MID)>>=
${MID}/FLOATCP.NRLIB: ${MID}/FLOATCP.spad
	@ echo 0 making ${MID}/FLOATCP.NRLIB from ${MID}/FLOATCP.spad
	@ (cd ${MID} ; 	echo ')co FLOATCP.spad' | ${INTERPSYS} )

@
<<FLOATCP.spad (SPAD from IN)>>=
${MID}/FLOATCP.spad: ${IN}/numsolve.spad.pamphlet
	@ echo 0 making ${MID}/FLOATCP.spad from ${IN}/numsolve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLOATCP.NRLIB ; \
	${SPADBIN}/notangle -R"package FLOATCP FloatingComplexPackage" ${IN}/numsolve.spad.pamphlet >FLOATCP.spad )

@
<<FLOATRP.o (O from NRLIB)>>=
${OUT}/FLOATRP.o: ${MID}/FLOATRP.NRLIB
	@ echo 0 making ${OUT}/FLOATRP.o from ${MID}/FLOATRP.NRLIB
	@ cp ${MID}/FLOATRP.NRLIB/code.o ${OUT}/FLOATRP.o

@
<<FLOATRP.NRLIB (NRLIB from MID)>>=
${MID}/FLOATRP.NRLIB: ${OUT}/CFCAT.o ${MID}/FLOATRP.spad
	@ echo 0 making ${MID}/FLOATRP.NRLIB from ${MID}/FLOATRP.spad
	@ (cd ${MID} ; 	echo ')co FLOATRP.spad' | ${INTERPSYS} )

@
<<FLOATRP.spad (SPAD from IN)>>=
${MID}/FLOATRP.spad: ${IN}/numsolve.spad.pamphlet
	@ echo 0 making ${MID}/FLOATRP.spad from ${IN}/numsolve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLOATRP.NRLIB ; \
	${SPADBIN}/notangle -R"package FLOATRP FloatingRealPackage" ${IN}/numsolve.spad.pamphlet >FLOATRP.spad )

@
<<INFSP.o (O from NRLIB)>>=
${OUT}/INFSP.o: ${MID}/INFSP.NRLIB
	@ echo 0 making ${OUT}/INFSP.o from ${MID}/INFSP.NRLIB
	@ cp ${MID}/INFSP.NRLIB/code.o ${OUT}/INFSP.o

@
<<INFSP.NRLIB (NRLIB from MID)>>=
${MID}/INFSP.NRLIB: ${MID}/INFSP.spad
	@ echo 0 making ${MID}/INFSP.NRLIB from ${MID}/INFSP.spad
	@ (cd ${MID} ; 	echo ')co INFSP.spad' | ${INTERPSYS} )

@
<<INFSP.spad (SPAD from IN)>>=
${MID}/INFSP.spad: ${IN}/numsolve.spad.pamphlet
	@ echo 0 making ${MID}/INFSP.spad from ${IN}/numsolve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INFSP.NRLIB ; \
	${SPADBIN}/notangle -R"package INFSP InnerNumericFloatSolvePackage" ${IN}/numsolve.spad.pamphlet >INFSP.spad )

@
<<numsolve.spad.dvi (DOC from IN)>>=
${DOC}/numsolve.spad.dvi: ${IN}/numsolve.spad.pamphlet
	@ echo 0 making ${DOC}/numsolve.spad.dvi from ${IN}/numsolve.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/numsolve.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} numsolve.spad ; \
	rm -f ${DOC}/numsolve.spad.pamphlet ; \
	rm -f ${DOC}/numsolve.spad.tex ; \
	rm -f ${DOC}/numsolve.spad )

@
\subsection{numtheor.spad \cite{1}}
<<numtheor.spad (SPAD from IN)>>=
${MID}/numtheor.spad: ${IN}/numtheor.spad.pamphlet
	@ echo 0 making ${MID}/numtheor.spad from ${IN}/numtheor.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/numtheor.spad.pamphlet >numtheor.spad )

@
<<INTHEORY.o (O from NRLIB)>>=
${OUT}/INTHEORY.o: ${MID}/INTHEORY.NRLIB
	@ echo 0 making ${OUT}/INTHEORY.o from ${MID}/INTHEORY.NRLIB
	@ cp ${MID}/INTHEORY.NRLIB/code.o ${OUT}/INTHEORY.o

@
<<INTHEORY.NRLIB (NRLIB from MID)>>=
${MID}/INTHEORY.NRLIB: ${MID}/INTHEORY.spad
	@ echo 0 making ${MID}/INTHEORY.NRLIB from ${MID}/INTHEORY.spad
	@ (cd ${MID} ; 	echo ')co INTHEORY.spad' | ${INTERPSYS} )

@
<<INTHEORY.spad (SPAD from IN)>>=
${MID}/INTHEORY.spad: ${IN}/numtheor.spad.pamphlet
	@ echo 0 making ${MID}/INTHEORY.spad from ${IN}/numtheor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTHEORY.NRLIB ; \
	${SPADBIN}/notangle -R"package INTHEORY IntegerNumberTheoryFunctions" ${IN}/numtheor.spad.pamphlet >INTHEORY.spad )

@
<<PNTHEORY.o (O from NRLIB)>>=
${OUT}/PNTHEORY.o: ${MID}/PNTHEORY.NRLIB
	@ echo 0 making ${OUT}/PNTHEORY.o from ${MID}/PNTHEORY.NRLIB
	@ cp ${MID}/PNTHEORY.NRLIB/code.o ${OUT}/PNTHEORY.o

@
<<PNTHEORY.NRLIB (NRLIB from MID)>>=
${MID}/PNTHEORY.NRLIB: ${MID}/PNTHEORY.spad
	@ echo 0 making ${MID}/PNTHEORY.NRLIB from ${MID}/PNTHEORY.spad
	@ (cd ${MID} ; 	echo ')co PNTHEORY.spad' | ${INTERPSYS} )

@
<<PNTHEORY.spad (SPAD from IN)>>=
${MID}/PNTHEORY.spad: ${IN}/numtheor.spad.pamphlet
	@ echo 0 making ${MID}/PNTHEORY.spad from ${IN}/numtheor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PNTHEORY.NRLIB ; \
	${SPADBIN}/notangle -R"package PNTHEORY PolynomialNumberTheoryFunctions" ${IN}/numtheor.spad.pamphlet >PNTHEORY.spad )

@
<<numtheor.spad.dvi (DOC from IN)>>=
${DOC}/numtheor.spad.dvi: ${IN}/numtheor.spad.pamphlet
	@ echo 0 making ${DOC}/numtheor.spad.dvi from ${IN}/numtheor.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/numtheor.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} numtheor.spad ; \
	rm -f ${DOC}/numtheor.spad.pamphlet ; \
	rm -f ${DOC}/numtheor.spad.tex ; \
	rm -f ${DOC}/numtheor.spad )

@
\subsection{oct.spad \cite{1}}
<<oct.spad (SPAD from IN)>>=
${MID}/oct.spad: ${IN}/oct.spad.pamphlet
	@ echo 0 making ${MID}/oct.spad from ${IN}/oct.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/oct.spad.pamphlet >oct.spad )

@
<<OC-.o (O from NRLIB)>>=
${OUT}/OC-.o: ${MID}/OC.NRLIB
	@ echo 0 making ${OUT}/OC-.o from ${MID}/OC-.NRLIB
	@ cp ${MID}/OC-.NRLIB/code.o ${OUT}/OC-.o

@
<<OC-.NRLIB (NRLIB from MID)>>=
${MID}/OC-.NRLIB: ${OUT}/TYPE.o ${MID}/OC.spad 
	@ echo 0 making ${MID}/OC-.NRLIB from ${MID}/OC.spad
	@ (cd ${MID} ; 	echo ')co OC.spad' | ${INTERPSYS} )

@
<<OC.o (O from NRLIB)>>=
${OUT}/OC.o: ${MID}/OC.NRLIB
	@ echo 0 making ${OUT}/OC.o from ${MID}/OC.NRLIB
	@ cp ${MID}/OC.NRLIB/code.o ${OUT}/OC.o

@
<<OC.NRLIB (NRLIB from MID)>>=
${MID}/OC.NRLIB: ${MID}/OC.spad
	@ echo 0 making ${MID}/OC.NRLIB from ${MID}/OC.spad
	@ (cd ${MID} ; 	echo ')co OC.spad' | ${INTERPSYS} )

@
<<OC.spad (SPAD from IN)>>=
${MID}/OC.spad: ${IN}/oct.spad.pamphlet
	@ echo 0 making ${MID}/OC.spad from ${IN}/oct.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OC.NRLIB ; \
	${SPADBIN}/notangle -R"category OC OctonionCategory" ${IN}/oct.spad.pamphlet >OC.spad )

@
<<OCT.o (O from NRLIB)>>=
${OUT}/OCT.o: ${MID}/OCT.NRLIB
	@ echo 0 making ${OUT}/OCT.o from ${MID}/OCT.NRLIB
	@ cp ${MID}/OCT.NRLIB/code.o ${OUT}/OCT.o

@
<<OCT.NRLIB (NRLIB from MID)>>=
${MID}/OCT.NRLIB: ${MID}/OCT.spad
	@ echo 0 making ${MID}/OCT.NRLIB from ${MID}/OCT.spad
	@ (cd ${MID} ; 	echo ')co OCT.spad' | ${INTERPSYS} )

@
<<OCT.spad (SPAD from IN)>>=
${MID}/OCT.spad: ${IN}/oct.spad.pamphlet
	@ echo 0 making ${MID}/OCT.spad from ${IN}/oct.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OCT.NRLIB ; \
	${SPADBIN}/notangle -R"domain OCT Octonion" ${IN}/oct.spad.pamphlet >OCT.spad )

@
<<OCTCT2.o (O from NRLIB)>>=
${OUT}/OCTCT2.o: ${MID}/OCTCT2.NRLIB
	@ echo 0 making ${OUT}/OCTCT2.o from ${MID}/OCTCT2.NRLIB
	@ cp ${MID}/OCTCT2.NRLIB/code.o ${OUT}/OCTCT2.o

@
<<OCTCT2.NRLIB (NRLIB from MID)>>=
${MID}/OCTCT2.NRLIB: ${MID}/OCTCT2.spad
	@ echo 0 making ${MID}/OCTCT2.NRLIB from ${MID}/OCTCT2.spad
	@ (cd ${MID} ; 	echo ')co OCTCT2.spad' | ${INTERPSYS} )

@
<<OCTCT2.spad (SPAD from IN)>>=
${MID}/OCTCT2.spad: ${IN}/oct.spad.pamphlet
	@ echo 0 making ${MID}/OCTCT2.spad from ${IN}/oct.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OCTCT2.NRLIB ; \
	${SPADBIN}/notangle -R"package OCTCT2 OctonionCategoryFunctions2" ${IN}/oct.spad.pamphlet >OCTCT2.spad )

@
<<oct.spad.dvi (DOC from IN)>>=
${DOC}/oct.spad.dvi: ${IN}/oct.spad.pamphlet
	@ echo 0 making ${DOC}/oct.spad.dvi from ${IN}/oct.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/oct.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} oct.spad ; \
	rm -f ${DOC}/oct.spad.pamphlet ; \
	rm -f ${DOC}/oct.spad.tex ; \
	rm -f ${DOC}/oct.spad )

@
\subsection{odealg.spad \cite{1}}
<<odealg.spad (SPAD from IN)>>=
${MID}/odealg.spad: ${IN}/odealg.spad.pamphlet
	@ echo 0 making ${MID}/odealg.spad from ${IN}/odealg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/odealg.spad.pamphlet >odealg.spad )

@
<<ODEPAL.o (O from NRLIB)>>=
${OUT}/ODEPAL.o: ${MID}/ODEPAL.NRLIB
	@ echo 0 making ${OUT}/ODEPAL.o from ${MID}/ODEPAL.NRLIB
	@ cp ${MID}/ODEPAL.NRLIB/code.o ${OUT}/ODEPAL.o

@
<<ODEPAL.NRLIB (NRLIB from MID)>>=
${MID}/ODEPAL.NRLIB: ${MID}/ODEPAL.spad
	@ echo 0 making ${MID}/ODEPAL.NRLIB from ${MID}/ODEPAL.spad
	@ (cd ${MID} ; 	echo ')co ODEPAL.spad' | ${INTERPSYS} )

@
<<ODEPAL.spad (SPAD from IN)>>=
${MID}/ODEPAL.spad: ${IN}/odealg.spad.pamphlet
	@ echo 0 making ${MID}/ODEPAL.spad from ${IN}/odealg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEPAL.NRLIB ; \
	${SPADBIN}/notangle -R"package ODEPAL PureAlgebraicLODE" ${IN}/odealg.spad.pamphlet >ODEPAL.spad )

@
<<ODERED.o (O from NRLIB)>>=
${OUT}/ODERED.o: ${MID}/ODERED.NRLIB
	@ echo 0 making ${OUT}/ODERED.o from ${MID}/ODERED.NRLIB
	@ cp ${MID}/ODERED.NRLIB/code.o ${OUT}/ODERED.o

@
<<ODERED.NRLIB (NRLIB from MID)>>=
${MID}/ODERED.NRLIB: ${MID}/ODERED.spad
	@ echo 0 making ${MID}/ODERED.NRLIB from ${MID}/ODERED.spad
	@ (cd ${MID} ; 	echo ')co ODERED.spad' | ${INTERPSYS} )

@
<<ODERED.spad (SPAD from IN)>>=
${MID}/ODERED.spad: ${IN}/odealg.spad.pamphlet
	@ echo 0 making ${MID}/ODERED.spad from ${IN}/odealg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODERED.NRLIB ; \
	${SPADBIN}/notangle -R"package ODERED ReduceLODE" ${IN}/odealg.spad.pamphlet >ODERED.spad )

@
<<ODESYS.o (O from NRLIB)>>=
${OUT}/ODESYS.o: ${MID}/ODESYS.NRLIB
	@ echo 0 making ${OUT}/ODESYS.o from ${MID}/ODESYS.NRLIB
	@ cp ${MID}/ODESYS.NRLIB/code.o ${OUT}/ODESYS.o

@
<<ODESYS.NRLIB (NRLIB from MID)>>=
${MID}/ODESYS.NRLIB: ${MID}/ODESYS.spad
	@ echo 0 making ${MID}/ODESYS.NRLIB from ${MID}/ODESYS.spad
	@ (cd ${MID} ; 	echo ')co ODESYS.spad' | ${INTERPSYS} )

@
<<ODESYS.spad (SPAD from IN)>>=
${MID}/ODESYS.spad: ${IN}/odealg.spad.pamphlet
	@ echo 0 making ${MID}/ODESYS.spad from ${IN}/odealg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODESYS.NRLIB ; \
	${SPADBIN}/notangle -R"package ODESYS SystemODESolver" ${IN}/odealg.spad.pamphlet >ODESYS.spad )

@
<<odealg.spad.dvi (DOC from IN)>>=
${DOC}/odealg.spad.dvi: ${IN}/odealg.spad.pamphlet
	@ echo 0 making ${DOC}/odealg.spad.dvi from ${IN}/odealg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/odealg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} odealg.spad ; \
	rm -f ${DOC}/odealg.spad.pamphlet ; \
	rm -f ${DOC}/odealg.spad.tex ; \
	rm -f ${DOC}/odealg.spad )

@
\subsection{odeef.spad \cite{1}}
<<odeef.spad (SPAD from IN)>>=
${MID}/odeef.spad: ${IN}/odeef.spad.pamphlet
	@ echo 0 making ${MID}/odeef.spad from ${IN}/odeef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/odeef.spad.pamphlet >odeef.spad )

@
<<LODEEF.o (O from NRLIB)>>=
${OUT}/LODEEF.o: ${MID}/LODEEF.NRLIB
	@ echo 0 making ${OUT}/LODEEF.o from ${MID}/LODEEF.NRLIB
	@ cp ${MID}/LODEEF.NRLIB/code.o ${OUT}/LODEEF.o

@
<<LODEEF.NRLIB (NRLIB from MID)>>=
${MID}/LODEEF.NRLIB: ${MID}/LODEEF.spad
	@ echo 0 making ${MID}/LODEEF.NRLIB from ${MID}/LODEEF.spad
	@ (cd ${MID} ; 	echo ')co LODEEF.spad' | ${INTERPSYS} )

@
<<LODEEF.spad (SPAD from IN)>>=
${MID}/LODEEF.spad: ${IN}/odeef.spad.pamphlet
	@ echo 0 making ${MID}/LODEEF.spad from ${IN}/odeef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LODEEF.NRLIB ; \
	${SPADBIN}/notangle -R"package LODEEF ElementaryFunctionLODESolver" ${IN}/odeef.spad.pamphlet >LODEEF.spad )

@
<<REDORDER.o (O from NRLIB)>>=
${OUT}/REDORDER.o: ${MID}/REDORDER.NRLIB
	@ echo 0 making ${OUT}/REDORDER.o from ${MID}/REDORDER.NRLIB
	@ cp ${MID}/REDORDER.NRLIB/code.o ${OUT}/REDORDER.o

@
<<REDORDER.NRLIB (NRLIB from MID)>>=
${MID}/REDORDER.NRLIB: ${MID}/REDORDER.spad
	@ echo 0 making ${MID}/REDORDER.NRLIB from ${MID}/REDORDER.spad
	@ (cd ${MID} ; 	echo ')co REDORDER.spad' | ${INTERPSYS} )

@
<<REDORDER.spad (SPAD from IN)>>=
${MID}/REDORDER.spad: ${IN}/odeef.spad.pamphlet
	@ echo 0 making ${MID}/REDORDER.spad from ${IN}/odeef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REDORDER.NRLIB ; \
	${SPADBIN}/notangle -R"package REDORDER ReductionOfOrder" ${IN}/odeef.spad.pamphlet >REDORDER.spad )

@
<<odeef.spad.dvi (DOC from IN)>>=
${DOC}/odeef.spad.dvi: ${IN}/odeef.spad.pamphlet
	@ echo 0 making ${DOC}/odeef.spad.dvi from ${IN}/odeef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/odeef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} odeef.spad ; \
	rm -f ${DOC}/odeef.spad.pamphlet ; \
	rm -f ${DOC}/odeef.spad.tex ; \
	rm -f ${DOC}/odeef.spad )

@
\subsection{oderf.spad \cite{1}}
<<oderf.spad (SPAD from IN)>>=
${MID}/oderf.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/oderf.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/oderf.spad.pamphlet >oderf.spad )

@
<<BALFACT.o (O from NRLIB)>>=
${OUT}/BALFACT.o: ${MID}/BALFACT.NRLIB
	@ echo 0 making ${OUT}/BALFACT.o from ${MID}/BALFACT.NRLIB
	@ cp ${MID}/BALFACT.NRLIB/code.o ${OUT}/BALFACT.o

@
<<BALFACT.NRLIB (NRLIB from MID)>>=
${MID}/BALFACT.NRLIB: ${MID}/BALFACT.spad
	@ echo 0 making ${MID}/BALFACT.NRLIB from ${MID}/BALFACT.spad
	@ (cd ${MID} ; 	echo ')co BALFACT.spad' | ${INTERPSYS} )

@
<<BALFACT.spad (SPAD from IN)>>=
${MID}/BALFACT.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/BALFACT.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BALFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package BALFACT BalancedFactorisation" ${IN}/oderf.spad.pamphlet >BALFACT.spad )

@
<<BOUNDZRO.o (O from NRLIB)>>=
${OUT}/BOUNDZRO.o: ${MID}/BOUNDZRO.NRLIB
	@ echo 0 making ${OUT}/BOUNDZRO.o from ${MID}/BOUNDZRO.NRLIB
	@ cp ${MID}/BOUNDZRO.NRLIB/code.o ${OUT}/BOUNDZRO.o

@
<<BOUNDZRO.NRLIB (NRLIB from MID)>>=
${MID}/BOUNDZRO.NRLIB: ${MID}/BOUNDZRO.spad
	@ echo 0 making ${MID}/BOUNDZRO.NRLIB from ${MID}/BOUNDZRO.spad
	@ (cd ${MID} ; 	echo ')co BOUNDZRO.spad' | ${INTERPSYS} )

@
<<BOUNDZRO.spad (SPAD from IN)>>=
${MID}/BOUNDZRO.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/BOUNDZRO.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BOUNDZRO.NRLIB ; \
	${SPADBIN}/notangle -R"package BOUNDZRO BoundIntegerRoots" ${IN}/oderf.spad.pamphlet >BOUNDZRO.spad )

@
<<ODECONST.o (O from NRLIB)>>=
${OUT}/ODECONST.o: ${MID}/ODECONST.NRLIB
	@ echo 0 making ${OUT}/ODECONST.o from ${MID}/ODECONST.NRLIB
	@ cp ${MID}/ODECONST.NRLIB/code.o ${OUT}/ODECONST.o

@
<<ODECONST.NRLIB (NRLIB from MID)>>=
${MID}/ODECONST.NRLIB: ${MID}/ODECONST.spad
	@ echo 0 making ${MID}/ODECONST.NRLIB from ${MID}/ODECONST.spad
	@ (cd ${MID} ; 	echo ')co ODECONST.spad' | ${INTERPSYS} )

@
<<ODECONST.spad (SPAD from IN)>>=
${MID}/ODECONST.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/ODECONST.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODECONST.NRLIB ; \
	${SPADBIN}/notangle -R"package ODECONST ConstantLODE" ${IN}/oderf.spad.pamphlet >ODECONST.spad )

@
<<ODEINT.o (O from NRLIB)>>=
${OUT}/ODEINT.o: ${MID}/ODEINT.NRLIB
	@ echo 0 making ${OUT}/ODEINT.o from ${MID}/ODEINT.NRLIB
	@ cp ${MID}/ODEINT.NRLIB/code.o ${OUT}/ODEINT.o

@
<<ODEINT.NRLIB (NRLIB from MID)>>=
${MID}/ODEINT.NRLIB: ${MID}/ODEINT.spad
	@ echo 0 making ${MID}/ODEINT.NRLIB from ${MID}/ODEINT.spad
	@ (cd ${MID} ; 	echo ')co ODEINT.spad' | ${INTERPSYS} )

@
<<ODEINT.spad (SPAD from IN)>>=
${MID}/ODEINT.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/ODEINT.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEINT.NRLIB ; \
	${SPADBIN}/notangle -R"package ODEINT ODEIntegration" ${IN}/oderf.spad.pamphlet >ODEINT.spad )

@
<<ODEPRIM.o (O from NRLIB)>>=
${OUT}/ODEPRIM.o: ${MID}/ODEPRIM.NRLIB
	@ echo 0 making ${OUT}/ODEPRIM.o from ${MID}/ODEPRIM.NRLIB
	@ cp ${MID}/ODEPRIM.NRLIB/code.o ${OUT}/ODEPRIM.o

@
<<ODEPRIM.NRLIB (NRLIB from MID)>>=
${MID}/ODEPRIM.NRLIB: ${MID}/ODEPRIM.spad
	@ echo 0 making ${MID}/ODEPRIM.NRLIB from ${MID}/ODEPRIM.spad
	@ (cd ${MID} ; 	echo ')co ODEPRIM.spad' | ${INTERPSYS} )

@
<<ODEPRIM.spad (SPAD from IN)>>=
${MID}/ODEPRIM.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/ODEPRIM.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEPRIM.NRLIB ; \
	${SPADBIN}/notangle -R"package ODEPRIM PrimitiveRatDE" ${IN}/oderf.spad.pamphlet >ODEPRIM.spad )

@
<<ODERAT.o (O from NRLIB)>>=
${OUT}/ODERAT.o: ${MID}/ODERAT.NRLIB
	@ echo 0 making ${OUT}/ODERAT.o from ${MID}/ODERAT.NRLIB
	@ cp ${MID}/ODERAT.NRLIB/code.o ${OUT}/ODERAT.o

@
<<ODERAT.NRLIB (NRLIB from MID)>>=
${MID}/ODERAT.NRLIB: ${MID}/ODERAT.spad
	@ echo 0 making ${MID}/ODERAT.NRLIB from ${MID}/ODERAT.spad
	@ (cd ${MID} ; 	echo ')co ODERAT.spad' | ${INTERPSYS} )

@
<<ODERAT.spad (SPAD from IN)>>=
${MID}/ODERAT.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/ODERAT.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODERAT.NRLIB ; \
	${SPADBIN}/notangle -R"package ODERAT RationalLODE" ${IN}/oderf.spad.pamphlet >ODERAT.spad )

@
<<ODETOOLS.o (O from NRLIB)>>=
${OUT}/ODETOOLS.o: ${MID}/ODETOOLS.NRLIB
	@ echo 0 making ${OUT}/ODETOOLS.o from ${MID}/ODETOOLS.NRLIB
	@ cp ${MID}/ODETOOLS.NRLIB/code.o ${OUT}/ODETOOLS.o

@
<<ODETOOLS.NRLIB (NRLIB from MID)>>=
${MID}/ODETOOLS.NRLIB: ${MID}/ODETOOLS.spad
	@ echo 0 making ${MID}/ODETOOLS.NRLIB from ${MID}/ODETOOLS.spad
	@ (cd ${MID} ; 	echo ')co ODETOOLS.spad' | ${INTERPSYS} )

@
<<ODETOOLS.spad (SPAD from IN)>>=
${MID}/ODETOOLS.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/ODETOOLS.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODETOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package ODETOOLS ODETools" ${IN}/oderf.spad.pamphlet >ODETOOLS.spad )

@
<<UTSODETL.o (O from NRLIB)>>=
${OUT}/UTSODETL.o: ${MID}/UTSODETL.NRLIB
	@ echo 0 making ${OUT}/UTSODETL.o from ${MID}/UTSODETL.NRLIB
	@ cp ${MID}/UTSODETL.NRLIB/code.o ${OUT}/UTSODETL.o

@
<<UTSODETL.NRLIB (NRLIB from MID)>>=
${MID}/UTSODETL.NRLIB: ${MID}/UTSODETL.spad
	@ echo 0 making ${MID}/UTSODETL.NRLIB from ${MID}/UTSODETL.spad
	@ (cd ${MID} ; 	echo ')co UTSODETL.spad' | ${INTERPSYS} )

@
<<UTSODETL.spad (SPAD from IN)>>=
${MID}/UTSODETL.spad: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${MID}/UTSODETL.spad from ${IN}/oderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UTSODETL.NRLIB ; \
	${SPADBIN}/notangle -R"package UTSODETL UTSodetools" ${IN}/oderf.spad.pamphlet >UTSODETL.spad )

@
<<oderf.spad.dvi (DOC from IN)>>=
${DOC}/oderf.spad.dvi: ${IN}/oderf.spad.pamphlet
	@ echo 0 making ${DOC}/oderf.spad.dvi from ${IN}/oderf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/oderf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} oderf.spad ; \
	rm -f ${DOC}/oderf.spad.pamphlet ; \
	rm -f ${DOC}/oderf.spad.tex ; \
	rm -f ${DOC}/oderf.spad )

@
\subsection{omcat.spad \cite{1}}
<<omcat.spad (SPAD from IN)>>=
${MID}/omcat.spad: ${IN}/omcat.spad.pamphlet
	@ echo 0 making ${MID}/omcat.spad from ${IN}/omcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/omcat.spad.pamphlet >omcat.spad )

@
<<OM.o (O from NRLIB)>>=
${OUT}/OM.o: ${MID}/OM.NRLIB
	@ echo 0 making ${OUT}/OM.o from ${MID}/OM.NRLIB
	@ cp ${MID}/OM.NRLIB/code.o ${OUT}/OM.o

@
<<OM.NRLIB (NRLIB from MID)>>=
${MID}/OM.NRLIB: ${MID}/OM.spad
	@ echo 0 making ${MID}/OM.NRLIB from ${MID}/OM.spad
	@ (cd ${MID} ; 	echo ')co OM.spad' | ${INTERPSYS} )

@
<<OM.spad (SPAD from IN)>>=
${MID}/OM.spad: ${IN}/omcat.spad.pamphlet
	@ echo 0 making ${MID}/OM.spad from ${IN}/omcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OM.NRLIB ; \
	${SPADBIN}/notangle -R"category OM OpenMath" ${IN}/omcat.spad.pamphlet >OM.spad )

@
<<omcat.spad.dvi (DOC from IN)>>=
${DOC}/omcat.spad.dvi: ${IN}/omcat.spad.pamphlet
	@ echo 0 making ${DOC}/omcat.spad.dvi from ${IN}/omcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/omcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} omcat.spad ; \
	rm -f ${DOC}/omcat.spad.pamphlet ; \
	rm -f ${DOC}/omcat.spad.tex ; \
	rm -f ${DOC}/omcat.spad )

@
\subsection{omdev.spad \cite{1}}
<<omdev.spad (SPAD from IN)>>=
${MID}/omdev.spad: ${IN}/omdev.spad.pamphlet
	@ echo 0 making ${MID}/omdev.spad from ${IN}/omdev.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/omdev.spad.pamphlet >omdev.spad )

@
<<OMENC.o (O from NRLIB)>>=
${OUT}/OMENC.o: ${MID}/OMENC.NRLIB
	@ echo 0 making ${OUT}/OMENC.o from ${MID}/OMENC.NRLIB
	@ cp ${MID}/OMENC.NRLIB/code.o ${OUT}/OMENC.o

@
<<OMENC.NRLIB (NRLIB from MID)>>=
${MID}/OMENC.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/OMENC.spad
	@ echo 0 making ${MID}/OMENC.NRLIB from ${MID}/OMENC.spad
	@ (cd ${MID} ; 	echo ')co OMENC.spad' | ${INTERPSYS} )

@
<<OMENC.spad (SPAD from IN)>>=
${MID}/OMENC.spad: ${IN}/omdev.spad.pamphlet
	@ echo 0 making ${MID}/OMENC.spad from ${IN}/omdev.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMENC.NRLIB ; \
	${SPADBIN}/notangle -R"domain OMENC OpenMathEncoding" ${IN}/omdev.spad.pamphlet >OMENC.spad )

@
<<OMCONN.o (O from NRLIB)>>=
${OUT}/OMCONN.o: ${MID}/OMCONN.NRLIB
	@ echo 0 making ${OUT}/OMCONN.o from ${MID}/OMCONN.NRLIB
	@ cp ${MID}/OMCONN.NRLIB/code.o ${OUT}/OMCONN.o

@
<<OMCONN.NRLIB (NRLIB from MID)>>=
${MID}/OMCONN.NRLIB: ${MID}/OMCONN.spad
	@ echo 0 making ${MID}/OMCONN.NRLIB from ${MID}/OMCONN.spad
	@ (cd ${MID} ; 	echo ')co OMCONN.spad' | ${INTERPSYS} )

@
<<OMCONN.spad (SPAD from IN)>>=
${MID}/OMCONN.spad: ${IN}/omdev.spad.pamphlet
	@ echo 0 making ${MID}/OMCONN.spad from ${IN}/omdev.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMCONN.NRLIB ; \
	${SPADBIN}/notangle -R"domain OMCONN OpenMathConnection" ${IN}/omdev.spad.pamphlet >OMCONN.spad )

@
<<OMDEV.o (O from NRLIB)>>=
${OUT}/OMDEV.o: ${MID}/OMDEV.NRLIB
	@ echo 0 making ${OUT}/OMDEV.o from ${MID}/OMDEV.NRLIB
	@ cp ${MID}/OMDEV.NRLIB/code.o ${OUT}/OMDEV.o

@
<<OMDEV.NRLIB (NRLIB from MID)>>=
${MID}/OMDEV.NRLIB: ${MID}/OMDEV.spad
	@ echo 0 making ${MID}/OMDEV.NRLIB from ${MID}/OMDEV.spad
	@ (cd ${MID} ; 	echo ')co OMDEV.spad' | ${INTERPSYS} )

@
<<OMDEV.spad (SPAD from IN)>>=
${MID}/OMDEV.spad: ${IN}/omdev.spad.pamphlet
	@ echo 0 making ${MID}/OMDEV.spad from ${IN}/omdev.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMDEV.NRLIB ; \
	${SPADBIN}/notangle -R"domain OMDEV OpenMathDevice" ${IN}/omdev.spad.pamphlet >OMDEV.spad )

@
<<OMPKG.o (O from NRLIB)>>=
${OUT}/OMPKG.o: ${MID}/OMPKG.NRLIB
	@ echo 0 making ${OUT}/OMPKG.o from ${MID}/OMPKG.NRLIB
	@ cp ${MID}/OMPKG.NRLIB/code.o ${OUT}/OMPKG.o

@
<<OMPKG.NRLIB (NRLIB from MID)>>=
${MID}/OMPKG.NRLIB: ${MID}/OMPKG.spad
	@ echo 0 making ${MID}/OMPKG.NRLIB from ${MID}/OMPKG.spad
	@ (cd ${MID} ; 	echo ')co OMPKG.spad' | ${INTERPSYS} )

@
<<OMPKG.spad (SPAD from IN)>>=
${MID}/OMPKG.spad: ${IN}/omdev.spad.pamphlet
	@ echo 0 making ${MID}/OMPKG.spad from ${IN}/omdev.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMPKG.NRLIB ; \
	${SPADBIN}/notangle -R"package OMPKG OpenMathPackage" ${IN}/omdev.spad.pamphlet >OMPKG.spad )

@
<<omdev.spad.dvi (DOC from IN)>>=
${DOC}/omdev.spad.dvi: ${IN}/omdev.spad.pamphlet
	@ echo 0 making ${DOC}/omdev.spad.dvi from ${IN}/omdev.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/omdev.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} omdev.spad ; \
	rm -f ${DOC}/omdev.spad.pamphlet ; \
	rm -f ${DOC}/omdev.spad.tex ; \
	rm -f ${DOC}/omdev.spad )

@
\subsection{omerror.spad \cite{1}}
<<omerror.spad (SPAD from IN)>>=
${MID}/omerror.spad: ${IN}/omerror.spad.pamphlet
	@ echo 0 making ${MID}/omerror.spad from ${IN}/omerror.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/omerror.spad.pamphlet >omerror.spad )

@
<<OMERR.o (O from NRLIB)>>=
${OUT}/OMERR.o: ${MID}/OMERR.NRLIB
	@ echo 0 making ${OUT}/OMERR.o from ${MID}/OMERR.NRLIB
	@ cp ${MID}/OMERR.NRLIB/code.o ${OUT}/OMERR.o

@
<<OMERR.NRLIB (NRLIB from MID)>>=
${MID}/OMERR.NRLIB: ${MID}/OMERR.spad
	@ echo 0 making ${MID}/OMERR.NRLIB from ${MID}/OMERR.spad
	@ (cd ${MID} ; 	echo ')co OMERR.spad' | ${INTERPSYS} )

@
<<OMERR.spad (SPAD from IN)>>=
${MID}/OMERR.spad: ${IN}/omerror.spad.pamphlet
	@ echo 0 making ${MID}/OMERR.spad from ${IN}/omerror.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMERR.NRLIB ; \
	${SPADBIN}/notangle -R"domain OMERR OpenMathError" ${IN}/omerror.spad.pamphlet >OMERR.spad )

@
<<OMERRK.o (O from NRLIB)>>=
${OUT}/OMERRK.o: ${MID}/OMERRK.NRLIB
	@ echo 0 making ${OUT}/OMERRK.o from ${MID}/OMERRK.NRLIB
	@ cp ${MID}/OMERRK.NRLIB/code.o ${OUT}/OMERRK.o

@
<<OMERRK.NRLIB (NRLIB from MID)>>=
${MID}/OMERRK.NRLIB: ${MID}/OMERRK.spad
	@ echo 0 making ${MID}/OMERRK.NRLIB from ${MID}/OMERRK.spad
	@ (cd ${MID} ; 	echo ')co OMERRK.spad' | ${INTERPSYS} )

@
<<OMERRK.spad (SPAD from IN)>>=
${MID}/OMERRK.spad: ${IN}/omerror.spad.pamphlet
	@ echo 0 making ${MID}/OMERRK.spad from ${IN}/omerror.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMERRK.NRLIB ; \
	${SPADBIN}/notangle -R"domain OMERRK OpenMathErrorKind" ${IN}/omerror.spad.pamphlet >OMERRK.spad )

@
<<omerror.spad.dvi (DOC from IN)>>=
${DOC}/omerror.spad.dvi: ${IN}/omerror.spad.pamphlet
	@ echo 0 making ${DOC}/omerror.spad.dvi from ${IN}/omerror.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/omerror.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} omerror.spad ; \
	rm -f ${DOC}/omerror.spad.pamphlet ; \
	rm -f ${DOC}/omerror.spad.tex ; \
	rm -f ${DOC}/omerror.spad )

@
\subsection{omserver.spad \cite{1}}
<<omserver.spad (SPAD from IN)>>=
${MID}/omserver.spad: ${IN}/omserver.spad.pamphlet
	@ echo 0 making ${MID}/omserver.spad from ${IN}/omserver.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/omserver.spad.pamphlet >omserver.spad )

@
<<OMSERVER.o (O from NRLIB)>>=
${OUT}/OMSERVER.o: ${MID}/OMSERVER.NRLIB
	@ echo 0 making ${OUT}/OMSERVER.o from ${MID}/OMSERVER.NRLIB
	@ cp ${MID}/OMSERVER.NRLIB/code.o ${OUT}/OMSERVER.o

@
<<OMSERVER.NRLIB (NRLIB from MID)>>=
${MID}/OMSERVER.NRLIB: ${MID}/OMSERVER.spad
	@ echo 0 making ${MID}/OMSERVER.NRLIB from ${MID}/OMSERVER.spad
	@ (cd ${MID} ; 	echo ')co OMSERVER.spad' | ${INTERPSYS} )

@
<<OMSERVER.spad (SPAD from IN)>>=
${MID}/OMSERVER.spad: ${IN}/omserver.spad.pamphlet
	@ echo 0 making ${MID}/OMSERVER.spad from ${IN}/omserver.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMSERVER.NRLIB ; \
	${SPADBIN}/notangle -R"package OMSERVER OpenMathServerPackage" ${IN}/omserver.spad.pamphlet >OMSERVER.spad )

@
<<omserver.spad.dvi (DOC from IN)>>=
${DOC}/omserver.spad.dvi: ${IN}/omserver.spad.pamphlet
	@ echo 0 making ${DOC}/omserver.spad.dvi from ${IN}/omserver.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/omserver.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} omserver.spad ; \
	rm -f ${DOC}/omserver.spad.pamphlet ; \
	rm -f ${DOC}/omserver.spad.tex ; \
	rm -f ${DOC}/omserver.spad )

@
\subsection{opalg.spad \cite{1}}
<<opalg.spad (SPAD from IN)>>=
${MID}/opalg.spad: ${IN}/opalg.spad.pamphlet
	@ echo 0 making ${MID}/opalg.spad from ${IN}/opalg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/opalg.spad.pamphlet >opalg.spad )

@
<<MODOP.o (O from NRLIB)>>=
${OUT}/MODOP.o: ${MID}/MODOP.NRLIB
	@ echo 0 making ${OUT}/MODOP.o from ${MID}/MODOP.NRLIB
	@ cp ${MID}/MODOP.NRLIB/code.o ${OUT}/MODOP.o

@
<<MODOP.NRLIB (NRLIB from MID)>>=
${MID}/MODOP.NRLIB: ${MID}/MODOP.spad
	@ echo 0 making ${MID}/MODOP.NRLIB from ${MID}/MODOP.spad
	@ (cd ${MID} ; 	echo ')co MODOP.spad' | ${INTERPSYS} )

@
<<MODOP.spad (SPAD from IN)>>=
${MID}/MODOP.spad: ${IN}/opalg.spad.pamphlet
	@ echo 0 making ${MID}/MODOP.spad from ${IN}/opalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MODOP.NRLIB ; \
	${SPADBIN}/notangle -R"domain MODOP ModuleOperator" ${IN}/opalg.spad.pamphlet >MODOP.spad )

@
<<OP.o (O from NRLIB)>>=
${OUT}/OP.o: ${MID}/OP.NRLIB
	@ echo 0 making ${OUT}/OP.o from ${MID}/OP.NRLIB
	@ cp ${MID}/OP.NRLIB/code.o ${OUT}/OP.o

@
<<OP.NRLIB (NRLIB from MID)>>=
${MID}/OP.NRLIB: ${MID}/OP.spad
	@ echo 0 making ${MID}/OP.NRLIB from ${MID}/OP.spad
	@ (cd ${MID} ; 	echo ')co OP.spad' | ${INTERPSYS} )

@
<<OP.spad (SPAD from IN)>>=
${MID}/OP.spad: ${IN}/opalg.spad.pamphlet
	@ echo 0 making ${MID}/OP.spad from ${IN}/opalg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OP.NRLIB ; \
	${SPADBIN}/notangle -R"domain OP Operator" ${IN}/opalg.spad.pamphlet >OP.spad )

@
<<opalg.spad.dvi (DOC from IN)>>=
${DOC}/opalg.spad.dvi: ${IN}/opalg.spad.pamphlet
	@ echo 0 making ${DOC}/opalg.spad.dvi from ${IN}/opalg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/opalg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} opalg.spad ; \
	rm -f ${DOC}/opalg.spad.pamphlet ; \
	rm -f ${DOC}/opalg.spad.tex ; \
	rm -f ${DOC}/opalg.spad )

@
\subsection{openmath.spad \cite{1}}
<<openmath.spad (SPAD from IN)>>=
${MID}/openmath.spad: ${IN}/openmath.spad.pamphlet
	@ echo 0 making ${MID}/openmath.spad from ${IN}/openmath.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/openmath.spad.pamphlet >openmath.spad )

@
<<OMEXPR.o (O from NRLIB)>>=
${OUT}/OMEXPR.o: ${MID}/OMEXPR.NRLIB
	@ echo 0 making ${OUT}/OMEXPR.o from ${MID}/OMEXPR.NRLIB
	@ cp ${MID}/OMEXPR.NRLIB/code.o ${OUT}/OMEXPR.o

@
<<OMEXPR.NRLIB (NRLIB from MID)>>=
${MID}/OMEXPR.NRLIB: ${MID}/OMEXPR.spad
	@ echo 0 making ${MID}/OMEXPR.NRLIB from ${MID}/OMEXPR.spad
	@ (cd ${MID} ; 	echo ')co OMEXPR.spad' | ${INTERPSYS} )

@
<<OMEXPR.spad (SPAD from IN)>>=
${MID}/OMEXPR.spad: ${IN}/openmath.spad.pamphlet
	@ echo 0 making ${MID}/OMEXPR.spad from ${IN}/openmath.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OMEXPR.NRLIB ; \
	${SPADBIN}/notangle -R"package OMEXPR ExpressionToOpenMath" ${IN}/openmath.spad.pamphlet >OMEXPR.spad )

@
<<openmath.spad.dvi (DOC from IN)>>=
${DOC}/openmath.spad.dvi: ${IN}/openmath.spad.pamphlet
	@ echo 0 making ${DOC}/openmath.spad.dvi from ${IN}/openmath.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/openmath.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} openmath.spad ; \
	rm -f ${DOC}/openmath.spad.pamphlet ; \
	rm -f ${DOC}/openmath.spad.tex ; \
	rm -f ${DOC}/openmath.spad )

@
\subsection{op.spad \cite{1}}
<<op.spad (SPAD from IN)>>=
${MID}/op.spad: ${IN}/op.spad.pamphlet
	@ echo 0 making ${MID}/op.spad from ${IN}/op.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/op.spad.pamphlet >op.spad )

@
<<BOP.o (O from NRLIB)>>=
${OUT}/BOP.o: ${MID}/BOP.NRLIB
	@ echo 0 making ${OUT}/BOP.o from ${MID}/BOP.NRLIB
	@ cp ${MID}/BOP.NRLIB/code.o ${OUT}/BOP.o

@
<<BOP.NRLIB (NRLIB from MID)>>=
${MID}/BOP.NRLIB: ${MID}/BOP.spad
	@ echo 0 making ${MID}/BOP.NRLIB from ${MID}/BOP.spad
	@ (cd ${MID} ; 	echo ')co BOP.spad' | ${INTERPSYS} )

@
<<BOP.spad (SPAD from IN)>>=
${MID}/BOP.spad: ${IN}/op.spad.pamphlet
	@ echo 0 making ${MID}/BOP.spad from ${IN}/op.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BOP.NRLIB ; \
	${SPADBIN}/notangle -R"domain BOP BasicOperator" ${IN}/op.spad.pamphlet >BOP.spad )

@
<<BOP1.o (O from NRLIB)>>=
${OUT}/BOP1.o: ${MID}/BOP1.NRLIB
	@ echo 0 making ${OUT}/BOP1.o from ${MID}/BOP1.NRLIB
	@ cp ${MID}/BOP1.NRLIB/code.o ${OUT}/BOP1.o

@
<<BOP1.NRLIB (NRLIB from MID)>>=
${MID}/BOP1.NRLIB: ${MID}/BOP1.spad
	@ echo 0 making ${MID}/BOP1.NRLIB from ${MID}/BOP1.spad
	@ (cd ${MID} ; 	echo ')co BOP1.spad' | ${INTERPSYS} )

@
<<BOP1.spad (SPAD from IN)>>=
${MID}/BOP1.spad: ${IN}/op.spad.pamphlet
	@ echo 0 making ${MID}/BOP1.spad from ${IN}/op.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BOP1.NRLIB ; \
	${SPADBIN}/notangle -R"package BOP1 BasicOperatorFunctions1" ${IN}/op.spad.pamphlet >BOP1.spad )

@
<<COMMONOP.o (O from NRLIB)>>=
${OUT}/COMMONOP.o: ${MID}/COMMONOP.NRLIB
	@ echo 0 making ${OUT}/COMMONOP.o from ${MID}/COMMONOP.NRLIB
	@ cp ${MID}/COMMONOP.NRLIB/code.o ${OUT}/COMMONOP.o

@
<<COMMONOP.NRLIB (NRLIB from MID)>>=
${MID}/COMMONOP.NRLIB: ${MID}/COMMONOP.spad
	@ echo 0 making ${MID}/COMMONOP.NRLIB from ${MID}/COMMONOP.spad
	@ (cd ${MID} ; 	echo ')co COMMONOP.spad' | ${INTERPSYS} )

@
<<COMMONOP.spad (SPAD from IN)>>=
${MID}/COMMONOP.spad: ${IN}/op.spad.pamphlet
	@ echo 0 making ${MID}/COMMONOP.spad from ${IN}/op.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMMONOP.NRLIB ; \
	${SPADBIN}/notangle -R"package COMMONOP CommonOperators" ${IN}/op.spad.pamphlet >COMMONOP.spad )

@
<<op.spad.dvi (DOC from IN)>>=
${DOC}/op.spad.dvi: ${IN}/op.spad.pamphlet
	@ echo 0 making ${DOC}/op.spad.dvi from ${IN}/op.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/op.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} op.spad ; \
	rm -f ${DOC}/op.spad.pamphlet ; \
	rm -f ${DOC}/op.spad.tex ; \
	rm -f ${DOC}/op.spad )

@
\subsection{ore.spad \cite{1}}
<<ore.spad (SPAD from IN)>>=
${MID}/ore.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/ore.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ore.spad.pamphlet >ore.spad )

@
<<APPLYORE.o (O from NRLIB)>>=
${OUT}/APPLYORE.o: ${MID}/APPLYORE.NRLIB
	@ echo 0 making ${OUT}/APPLYORE.o from ${MID}/APPLYORE.NRLIB
	@ cp ${MID}/APPLYORE.NRLIB/code.o ${OUT}/APPLYORE.o

@
<<APPLYORE.NRLIB (NRLIB from MID)>>=
${MID}/APPLYORE.NRLIB: ${MID}/APPLYORE.spad
	@ echo 0 making ${MID}/APPLYORE.NRLIB from ${MID}/APPLYORE.spad
	@ (cd ${MID} ; 	echo ')co APPLYORE.spad' | ${INTERPSYS} )

@
<<APPLYORE.spad (SPAD from IN)>>=
${MID}/APPLYORE.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/APPLYORE.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf APPLYORE.NRLIB ; \
	${SPADBIN}/notangle -R"package APPLYORE ApplyUnivariateSkewPolynomial" ${IN}/ore.spad.pamphlet >APPLYORE.spad )

@
<<AUTOMOR.o (O from NRLIB)>>=
${OUT}/AUTOMOR.o: ${MID}/AUTOMOR.NRLIB
	@ echo 0 making ${OUT}/AUTOMOR.o from ${MID}/AUTOMOR.NRLIB
	@ cp ${MID}/AUTOMOR.NRLIB/code.o ${OUT}/AUTOMOR.o

@
<<AUTOMOR.NRLIB (NRLIB from MID)>>=
${MID}/AUTOMOR.NRLIB: ${MID}/AUTOMOR.spad
	@ echo 0 making ${MID}/AUTOMOR.NRLIB from ${MID}/AUTOMOR.spad
	@ (cd ${MID} ; 	echo ')co AUTOMOR.spad' | ${INTERPSYS} )

@
<<AUTOMOR.spad (SPAD from IN)>>=
${MID}/AUTOMOR.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/AUTOMOR.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf AUTOMOR.NRLIB ; \
	${SPADBIN}/notangle -R"domain AUTOMOR Automorphism" ${IN}/ore.spad.pamphlet >AUTOMOR.spad )

@
<<OREPCAT-.o (O from NRLIB)>>=
${OUT}/OREPCAT-.o: ${MID}/OREPCAT.NRLIB
	@ echo 0 making ${OUT}/OREPCAT-.o from ${MID}/OREPCAT-.NRLIB
	@ cp ${MID}/OREPCAT-.NRLIB/code.o ${OUT}/OREPCAT-.o

@
<<OREPCAT-.NRLIB (NRLIB from MID)>>=
${MID}/OREPCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/OREPCAT.spad 
	@ echo 0 making ${MID}/OREPCAT-.NRLIB from ${MID}/OREPCAT.spad
	@ (cd ${MID} ; 	echo ')co OREPCAT.spad' | ${INTERPSYS} )

@
<<OREPCAT.o (O from NRLIB)>>=
${OUT}/OREPCAT.o: ${MID}/OREPCAT.NRLIB
	@ echo 0 making ${OUT}/OREPCAT.o from ${MID}/OREPCAT.NRLIB
	@ cp ${MID}/OREPCAT.NRLIB/code.o ${OUT}/OREPCAT.o

@
<<OREPCAT.NRLIB (NRLIB from MID)>>=
${MID}/OREPCAT.NRLIB: ${MID}/OREPCAT.spad
	@ echo 0 making ${MID}/OREPCAT.NRLIB from ${MID}/OREPCAT.spad
	@ (cd ${MID} ; 	echo ')co OREPCAT.spad' | ${INTERPSYS} )

@
<<OREPCAT.spad (SPAD from IN)>>=
${MID}/OREPCAT.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/OREPCAT.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OREPCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category OREPCAT UnivariateSkewPolynomialCategory" ${IN}/ore.spad.pamphlet >OREPCAT.spad )

@
<<OREPCTO.o (O from NRLIB)>>=
${OUT}/OREPCTO.o: ${MID}/OREPCTO.NRLIB
	@ echo 0 making ${OUT}/OREPCTO.o from ${MID}/OREPCTO.NRLIB
	@ cp ${MID}/OREPCTO.NRLIB/code.o ${OUT}/OREPCTO.o

@
<<OREPCTO.NRLIB (NRLIB from MID)>>=
${MID}/OREPCTO.NRLIB: ${MID}/OREPCTO.spad
	@ echo 0 making ${MID}/OREPCTO.NRLIB from ${MID}/OREPCTO.spad
	@ (cd ${MID} ; 	echo ')co OREPCTO.spad' | ${INTERPSYS} )

@
<<OREPCTO.spad (SPAD from IN)>>=
${MID}/OREPCTO.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/OREPCTO.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OREPCTO.NRLIB ; \
	${SPADBIN}/notangle -R"package OREPCTO UnivariateSkewPolynomialCategoryOps" ${IN}/ore.spad.pamphlet >OREPCTO.spad )

@
<<ORESUP.o (O from NRLIB)>>=
${OUT}/ORESUP.o: ${MID}/ORESUP.NRLIB
	@ echo 0 making ${OUT}/ORESUP.o from ${MID}/ORESUP.NRLIB
	@ cp ${MID}/ORESUP.NRLIB/code.o ${OUT}/ORESUP.o

@
<<ORESUP.NRLIB (NRLIB from MID)>>=
${MID}/ORESUP.NRLIB: ${MID}/ORESUP.spad
	@ echo 0 making ${MID}/ORESUP.NRLIB from ${MID}/ORESUP.spad
	@ (cd ${MID} ; 	echo ')co ORESUP.spad' | ${INTERPSYS} )

@
<<ORESUP.spad (SPAD from IN)>>=
${MID}/ORESUP.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/ORESUP.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORESUP.NRLIB ; \
	${SPADBIN}/notangle -R"domain ORESUP SparseUnivariateSkewPolynomial" ${IN}/ore.spad.pamphlet >ORESUP.spad )

@
<<OREUP.o (O from NRLIB)>>=
${OUT}/OREUP.o: ${MID}/OREUP.NRLIB
	@ echo 0 making ${OUT}/OREUP.o from ${MID}/OREUP.NRLIB
	@ cp ${MID}/OREUP.NRLIB/code.o ${OUT}/OREUP.o

@
<<OREUP.NRLIB (NRLIB from MID)>>=
${MID}/OREUP.NRLIB: ${MID}/OREUP.spad
	@ echo 0 making ${MID}/OREUP.NRLIB from ${MID}/OREUP.spad
	@ (cd ${MID} ; 	echo ')co OREUP.spad' | ${INTERPSYS} )

@
<<OREUP.spad (SPAD from IN)>>=
${MID}/OREUP.spad: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${MID}/OREUP.spad from ${IN}/ore.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OREUP.NRLIB ; \
	${SPADBIN}/notangle -R"domain OREUP UnivariateSkewPolynomial" ${IN}/ore.spad.pamphlet >OREUP.spad )

@
<<ore.spad.dvi (DOC from IN)>>=
${DOC}/ore.spad.dvi: ${IN}/ore.spad.pamphlet
	@ echo 0 making ${DOC}/ore.spad.dvi from ${IN}/ore.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ore.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ore.spad ; \
	rm -f ${DOC}/ore.spad.pamphlet ; \
	rm -f ${DOC}/ore.spad.tex ; \
	rm -f ${DOC}/ore.spad )

@
\subsection{outform.spad \cite{1}}
<<outform.spad (SPAD from IN)>>=
${MID}/outform.spad: ${IN}/outform.spad.pamphlet
	@ echo 0 making ${MID}/outform.spad from ${IN}/outform.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/outform.spad.pamphlet >outform.spad )

@
<<NUMFMT.o (O from NRLIB)>>=
${OUT}/NUMFMT.o: ${MID}/NUMFMT.NRLIB
	@ echo 0 making ${OUT}/NUMFMT.o from ${MID}/NUMFMT.NRLIB
	@ cp ${MID}/NUMFMT.NRLIB/code.o ${OUT}/NUMFMT.o

@
<<NUMFMT.NRLIB (NRLIB from MID)>>=
${MID}/NUMFMT.NRLIB: ${MID}/NUMFMT.spad
	@ echo 0 making ${MID}/NUMFMT.NRLIB from ${MID}/NUMFMT.spad
	@ (cd ${MID} ; 	echo ')co NUMFMT.spad' | ${INTERPSYS} )

@
<<NUMFMT.spad (SPAD from IN)>>=
${MID}/NUMFMT.spad: ${IN}/outform.spad.pamphlet
	@ echo 0 making ${MID}/NUMFMT.spad from ${IN}/outform.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NUMFMT.NRLIB ; \
	${SPADBIN}/notangle -R"package NUMFMT NumberFormats" ${IN}/outform.spad.pamphlet >NUMFMT.spad )

@
<<OUTFORM.o (O from NRLIB)>>=
${OUT}/OUTFORM.o: ${MID}/OUTFORM.NRLIB
	@ echo 0 making ${OUT}/OUTFORM.o from ${MID}/OUTFORM.NRLIB
	@ cp ${MID}/OUTFORM.NRLIB/code.o ${OUT}/OUTFORM.o

@
<<OUTFORM.NRLIB (NRLIB from MID)>>=
${MID}/OUTFORM.NRLIB: ${MID}/OUTFORM.spad
	@ echo 0 making ${MID}/OUTFORM.NRLIB from ${MID}/OUTFORM.spad
	@ (cd ${MID} ; 	echo ')co OUTFORM.spad' | ${INTERPSYS} )

@
<<OUTFORM.spad (SPAD from IN)>>=
${MID}/OUTFORM.spad: ${IN}/outform.spad.pamphlet
	@ echo 0 making ${MID}/OUTFORM.spad from ${IN}/outform.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OUTFORM.NRLIB ; \
	${SPADBIN}/notangle -R"domain OUTFORM OutputForm" ${IN}/outform.spad.pamphlet >OUTFORM.spad )

@
<<OUTFORM.o (BOOTSTRAP from MID)>>=
${MID}/OUTFORM.o: ${MID}/OUTFORM.lsp
	@ echo 0 making ${MID}/OUTFORM.o from ${MID}/OUTFORM.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "OUTFORM.lsp" :output-file "OUTFORM.o"))' | ${DEPSYS} )
	@ cp ${MID}/OUTFORM.o ${OUT}/OUTFORM.o

@
<<OUTFORM.lsp (LISP from IN)>>=
${MID}/OUTFORM.lsp: ${IN}/outform.spad.pamphlet
	@ echo 0 making ${MID}/OUTFORM.lsp from ${IN}/outform.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OUTFORM.NRLIB ; \
	rm -rf ${OUT}/OUTFORM.o ; \
	${SPADBIN}/notangle -R"OUTFORM.lsp BOOTSTRAP" ${IN}/outform.spad.pamphlet >OUTFORM.lsp )

@
<<outform.spad.dvi (DOC from IN)>>=
${DOC}/outform.spad.dvi: ${IN}/outform.spad.pamphlet
	@ echo 0 making ${DOC}/outform.spad.dvi from ${IN}/outform.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/outform.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} outform.spad ; \
	rm -f ${DOC}/outform.spad.pamphlet ; \
	rm -f ${DOC}/outform.spad.tex ; \
	rm -f ${DOC}/outform.spad )

@
\subsection{out.spad \cite{1}}
<<out.spad (SPAD from IN)>>=
${MID}/out.spad: ${IN}/out.spad.pamphlet
	@ echo 0 making ${MID}/out.spad from ${IN}/out.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/out.spad.pamphlet >out.spad )

@
<<DISPLAY.o (O from NRLIB)>>=
${OUT}/DISPLAY.o: ${MID}/DISPLAY.NRLIB
	@ echo 0 making ${OUT}/DISPLAY.o from ${MID}/DISPLAY.NRLIB
	@ cp ${MID}/DISPLAY.NRLIB/code.o ${OUT}/DISPLAY.o

@
<<DISPLAY.NRLIB (NRLIB from MID)>>=
${MID}/DISPLAY.NRLIB: ${MID}/DISPLAY.spad
	@ echo 0 making ${MID}/DISPLAY.NRLIB from ${MID}/DISPLAY.spad
	@ (cd ${MID} ; 	echo ')co DISPLAY.spad' | ${INTERPSYS} )

@
<<DISPLAY.spad (SPAD from IN)>>=
${MID}/DISPLAY.spad: ${IN}/out.spad.pamphlet
	@ echo 0 making ${MID}/DISPLAY.spad from ${IN}/out.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DISPLAY.NRLIB ; \
	${SPADBIN}/notangle -R"package DISPLAY DisplayPackage" ${IN}/out.spad.pamphlet >DISPLAY.spad )

@
<<OUT.o (O from NRLIB)>>=
${OUT}/OUT.o: ${MID}/OUT.NRLIB
	@ echo 0 making ${OUT}/OUT.o from ${MID}/OUT.NRLIB
	@ cp ${MID}/OUT.NRLIB/code.o ${OUT}/OUT.o

@
<<OUT.NRLIB (NRLIB from MID)>>=
${MID}/OUT.NRLIB: ${MID}/OUT.spad
	@ echo 0 making ${MID}/OUT.NRLIB from ${MID}/OUT.spad
	@ (cd ${MID} ; 	echo ')co OUT.spad' | ${INTERPSYS} )

@
<<OUT.spad (SPAD from IN)>>=
${MID}/OUT.spad: ${IN}/out.spad.pamphlet
	@ echo 0 making ${MID}/OUT.spad from ${IN}/out.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OUT.NRLIB ; \
	${SPADBIN}/notangle -R"package OUT OutputPackage" ${IN}/out.spad.pamphlet >OUT.spad )

@
<<SPECOUT.o (O from NRLIB)>>=
${OUT}/SPECOUT.o: ${MID}/SPECOUT.NRLIB
	@ echo 0 making ${OUT}/SPECOUT.o from ${MID}/SPECOUT.NRLIB
	@ cp ${MID}/SPECOUT.NRLIB/code.o ${OUT}/SPECOUT.o

@
<<SPECOUT.NRLIB (NRLIB from MID)>>=
${MID}/SPECOUT.NRLIB: ${MID}/SPECOUT.spad
	@ echo 0 making ${MID}/SPECOUT.NRLIB from ${MID}/SPECOUT.spad
	@ (cd ${MID} ; 	echo ')co SPECOUT.spad' | ${INTERPSYS} )

@
<<SPECOUT.spad (SPAD from IN)>>=
${MID}/SPECOUT.spad: ${IN}/out.spad.pamphlet
	@ echo 0 making ${MID}/SPECOUT.spad from ${IN}/out.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SPECOUT.NRLIB ; \
	${SPADBIN}/notangle -R"package SPECOUT SpecialOutputPackage" ${IN}/out.spad.pamphlet >SPECOUT.spad )

@
<<out.spad.dvi (DOC from IN)>>=
${DOC}/out.spad.dvi: ${IN}/out.spad.pamphlet
	@ echo 0 making ${DOC}/out.spad.dvi from ${IN}/out.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/out.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} out.spad ; \
	rm -f ${DOC}/out.spad.pamphlet ; \
	rm -f ${DOC}/out.spad.tex ; \
	rm -f ${DOC}/out.spad )

@
\subsection{pade.spad \cite{1}}
<<pade.spad (SPAD from IN)>>=
${MID}/pade.spad: ${IN}/pade.spad.pamphlet
	@ echo 0 making ${MID}/pade.spad from ${IN}/pade.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pade.spad.pamphlet >pade.spad )

@
<<PADE.o (O from NRLIB)>>=
${OUT}/PADE.o: ${MID}/PADE.NRLIB
	@ echo 0 making ${OUT}/PADE.o from ${MID}/PADE.NRLIB
	@ cp ${MID}/PADE.NRLIB/code.o ${OUT}/PADE.o

@
<<PADE.NRLIB (NRLIB from MID)>>=
${MID}/PADE.NRLIB: ${MID}/PADE.spad
	@ echo 0 making ${MID}/PADE.NRLIB from ${MID}/PADE.spad
	@ (cd ${MID} ; 	echo ')co PADE.spad' | ${INTERPSYS} )

@
<<PADE.spad (SPAD from IN)>>=
${MID}/PADE.spad: ${IN}/pade.spad.pamphlet
	@ echo 0 making ${MID}/PADE.spad from ${IN}/pade.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PADE.NRLIB ; \
	${SPADBIN}/notangle -R"package PADE PadeApproximants" ${IN}/pade.spad.pamphlet >PADE.spad )

@
<<PADEPAC.o (O from NRLIB)>>=
${OUT}/PADEPAC.o: ${MID}/PADEPAC.NRLIB
	@ echo 0 making ${OUT}/PADEPAC.o from ${MID}/PADEPAC.NRLIB
	@ cp ${MID}/PADEPAC.NRLIB/code.o ${OUT}/PADEPAC.o

@
<<PADEPAC.NRLIB (NRLIB from MID)>>=
${MID}/PADEPAC.NRLIB: ${MID}/PADEPAC.spad
	@ echo 0 making ${MID}/PADEPAC.NRLIB from ${MID}/PADEPAC.spad
	@ (cd ${MID} ; 	echo ')co PADEPAC.spad' | ${INTERPSYS} )

@
<<PADEPAC.spad (SPAD from IN)>>=
${MID}/PADEPAC.spad: ${IN}/pade.spad.pamphlet
	@ echo 0 making ${MID}/PADEPAC.spad from ${IN}/pade.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PADEPAC.NRLIB ; \
	${SPADBIN}/notangle -R"package PADEPAC PadeApproximantPackage" ${IN}/pade.spad.pamphlet >PADEPAC.spad )

@
<<pade.spad.dvi (DOC from IN)>>=
${DOC}/pade.spad.dvi: ${IN}/pade.spad.pamphlet
	@ echo 0 making ${DOC}/pade.spad.dvi from ${IN}/pade.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pade.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pade.spad ; \
	rm -f ${DOC}/pade.spad.pamphlet ; \
	rm -f ${DOC}/pade.spad.tex ; \
	rm -f ${DOC}/pade.spad )

@
\subsection{padiclib.spad \cite{1}}
<<padiclib.spad (SPAD from IN)>>=
${MID}/padiclib.spad: ${IN}/padiclib.spad.pamphlet
	@ echo 0 making ${MID}/padiclib.spad from ${IN}/padiclib.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/padiclib.spad.pamphlet >padiclib.spad )

@
<<IBACHIN.o (O from NRLIB)>>=
${OUT}/IBACHIN.o: ${MID}/IBACHIN.NRLIB
	@ echo 0 making ${OUT}/IBACHIN.o from ${MID}/IBACHIN.NRLIB
	@ cp ${MID}/IBACHIN.NRLIB/code.o ${OUT}/IBACHIN.o

@
<<IBACHIN.NRLIB (NRLIB from MID)>>=
${MID}/IBACHIN.NRLIB: ${MID}/IBACHIN.spad
	@ echo 0 making ${MID}/IBACHIN.NRLIB from ${MID}/IBACHIN.spad
	@ (cd ${MID} ; 	echo ')co IBACHIN.spad' | ${INTERPSYS} )

@
<<IBACHIN.spad (SPAD from IN)>>=
${MID}/IBACHIN.spad: ${IN}/padiclib.spad.pamphlet
	@ echo 0 making ${MID}/IBACHIN.spad from ${IN}/padiclib.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IBACHIN.NRLIB ; \
	${SPADBIN}/notangle -R"package IBACHIN ChineseRemainderToolsForIntegralBases" ${IN}/padiclib.spad.pamphlet >IBACHIN.spad )

@
<<IBPTOOLS.o (O from NRLIB)>>=
${OUT}/IBPTOOLS.o: ${MID}/IBPTOOLS.NRLIB
	@ echo 0 making ${OUT}/IBPTOOLS.o from ${MID}/IBPTOOLS.NRLIB
	@ cp ${MID}/IBPTOOLS.NRLIB/code.o ${OUT}/IBPTOOLS.o

@
<<IBPTOOLS.NRLIB (NRLIB from MID)>>=
${MID}/IBPTOOLS.NRLIB: ${MID}/IBPTOOLS.spad
	@ echo 0 making ${MID}/IBPTOOLS.NRLIB from ${MID}/IBPTOOLS.spad
	@ (cd ${MID} ; 	echo ')co IBPTOOLS.spad' | ${INTERPSYS} )

@
<<IBPTOOLS.spad (SPAD from IN)>>=
${MID}/IBPTOOLS.spad: ${IN}/padiclib.spad.pamphlet
	@ echo 0 making ${MID}/IBPTOOLS.spad from ${IN}/padiclib.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IBPTOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package IBPTOOLS IntegralBasisPolynomialTools" ${IN}/padiclib.spad.pamphlet >IBPTOOLS.spad )

@
<<PWFFINTB.o (O from NRLIB)>>=
${OUT}/PWFFINTB.o: ${MID}/PWFFINTB.NRLIB
	@ echo 0 making ${OUT}/PWFFINTB.o from ${MID}/PWFFINTB.NRLIB
	@ cp ${MID}/PWFFINTB.NRLIB/code.o ${OUT}/PWFFINTB.o

@
<<PWFFINTB.NRLIB (NRLIB from MID)>>=
${MID}/PWFFINTB.NRLIB: ${MID}/PWFFINTB.spad
	@ echo 0 making ${MID}/PWFFINTB.NRLIB from ${MID}/PWFFINTB.spad
	@ (cd ${MID} ; 	echo ')co PWFFINTB.spad' | ${INTERPSYS} )

@
<<PWFFINTB.spad (SPAD from IN)>>=
${MID}/PWFFINTB.spad: ${IN}/padiclib.spad.pamphlet
	@ echo 0 making ${MID}/PWFFINTB.spad from ${IN}/padiclib.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PWFFINTB.NRLIB ; \
	${SPADBIN}/notangle -R"package PWFFINTB PAdicWildFunctionFieldIntegralBasis" ${IN}/padiclib.spad.pamphlet >PWFFINTB.spad )

@
<<padiclib.spad.dvi (DOC from IN)>>=
${DOC}/padiclib.spad.dvi: ${IN}/padiclib.spad.pamphlet
	@ echo 0 making ${DOC}/padiclib.spad.dvi from ${IN}/padiclib.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/padiclib.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} padiclib.spad ; \
	rm -f ${DOC}/padiclib.spad.pamphlet ; \
	rm -f ${DOC}/padiclib.spad.tex ; \
	rm -f ${DOC}/padiclib.spad )

@
\subsection{padic.spad \cite{1}}
<<padic.spad (SPAD from IN)>>=
${MID}/padic.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/padic.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/padic.spad.pamphlet >padic.spad )

@
<<BPADIC.o (O from NRLIB)>>=
${OUT}/BPADIC.o: ${MID}/BPADIC.NRLIB
	@ echo 0 making ${OUT}/BPADIC.o from ${MID}/BPADIC.NRLIB
	@ cp ${MID}/BPADIC.NRLIB/code.o ${OUT}/BPADIC.o

@
<<BPADIC.NRLIB (NRLIB from MID)>>=
${MID}/BPADIC.NRLIB: ${MID}/BPADIC.spad
	@ echo 0 making ${MID}/BPADIC.NRLIB from ${MID}/BPADIC.spad
	@ (cd ${MID} ; 	echo ')co BPADIC.spad' | ${INTERPSYS} )

@
<<BPADIC.spad (SPAD from IN)>>=
${MID}/BPADIC.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/BPADIC.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BPADIC.NRLIB ; \
	${SPADBIN}/notangle -R"domain BPADIC BalancedPAdicInteger" ${IN}/padic.spad.pamphlet >BPADIC.spad )

@
<<BPADICRT.o (O from NRLIB)>>=
${OUT}/BPADICRT.o: ${MID}/BPADICRT.NRLIB
	@ echo 0 making ${OUT}/BPADICRT.o from ${MID}/BPADICRT.NRLIB
	@ cp ${MID}/BPADICRT.NRLIB/code.o ${OUT}/BPADICRT.o

@
<<BPADICRT.NRLIB (NRLIB from MID)>>=
${MID}/BPADICRT.NRLIB: ${MID}/BPADICRT.spad
	@ echo 0 making ${MID}/BPADICRT.NRLIB from ${MID}/BPADICRT.spad
	@ (cd ${MID} ; 	echo ')co BPADICRT.spad' | ${INTERPSYS} )

@
<<BPADICRT.spad (SPAD from IN)>>=
${MID}/BPADICRT.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/BPADICRT.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BPADICRT.NRLIB ; \
	${SPADBIN}/notangle -R"domain BPADICRT BalancedPAdicRational" ${IN}/padic.spad.pamphlet >BPADICRT.spad )

@
<<IPADIC.o (O from NRLIB)>>=
${OUT}/IPADIC.o: ${MID}/IPADIC.NRLIB
	@ echo 0 making ${OUT}/IPADIC.o from ${MID}/IPADIC.NRLIB
	@ cp ${MID}/IPADIC.NRLIB/code.o ${OUT}/IPADIC.o

@
<<IPADIC.NRLIB (NRLIB from MID)>>=
${MID}/IPADIC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/IPADIC.spad
	@ echo 0 making ${MID}/IPADIC.NRLIB from ${MID}/IPADIC.spad
	@ (cd ${MID} ; 	echo ')co IPADIC.spad' | ${INTERPSYS} )

@
<<IPADIC.spad (SPAD from IN)>>=
${MID}/IPADIC.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/IPADIC.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IPADIC.NRLIB ; \
	${SPADBIN}/notangle -R"domain IPADIC InnerPAdicInteger" ${IN}/padic.spad.pamphlet >IPADIC.spad )

@
<<PADIC.o (O from NRLIB)>>=
${OUT}/PADIC.o: ${MID}/PADIC.NRLIB
	@ echo 0 making ${OUT}/PADIC.o from ${MID}/PADIC.NRLIB
	@ cp ${MID}/PADIC.NRLIB/code.o ${OUT}/PADIC.o

@
<<PADIC.NRLIB (NRLIB from MID)>>=
${MID}/PADIC.NRLIB: ${MID}/PADIC.spad
	@ echo 0 making ${MID}/PADIC.NRLIB from ${MID}/PADIC.spad
	@ (cd ${MID} ; 	echo ')co PADIC.spad' | ${INTERPSYS} )

@
<<PADIC.spad (SPAD from IN)>>=
${MID}/PADIC.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/PADIC.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PADIC.NRLIB ; \
	${SPADBIN}/notangle -R"domain PADIC PAdicInteger" ${IN}/padic.spad.pamphlet >PADIC.spad )

@
<<PADICCT.o (O from NRLIB)>>=
${OUT}/PADICCT.o: ${MID}/PADICCT.NRLIB
	@ echo 0 making ${OUT}/PADICCT.o from ${MID}/PADICCT.NRLIB
	@ cp ${MID}/PADICCT.NRLIB/code.o ${OUT}/PADICCT.o

@
<<PADICCT.NRLIB (NRLIB from MID)>>=
${MID}/PADICCT.NRLIB: ${MID}/PADICCT.spad
	@ echo 0 making ${MID}/PADICCT.NRLIB from ${MID}/PADICCT.spad
	@ (cd ${MID} ; 	echo ')co PADICCT.spad' | ${INTERPSYS} )

@
<<PADICCT.spad (SPAD from IN)>>=
${MID}/PADICCT.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/PADICCT.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PADICCT.NRLIB ; \
	${SPADBIN}/notangle -R"category PADICCT PAdicIntegerCategory" ${IN}/padic.spad.pamphlet >PADICCT.spad )

@
<<PADICRAT.o (O from NRLIB)>>=
${OUT}/PADICRAT.o: ${MID}/PADICRAT.NRLIB
	@ echo 0 making ${OUT}/PADICRAT.o from ${MID}/PADICRAT.NRLIB
	@ cp ${MID}/PADICRAT.NRLIB/code.o ${OUT}/PADICRAT.o

@
<<PADICRAT.NRLIB (NRLIB from MID)>>=
${MID}/PADICRAT.NRLIB: ${MID}/PADICRAT.spad
	@ echo 0 making ${MID}/PADICRAT.NRLIB from ${MID}/PADICRAT.spad
	@ (cd ${MID} ; 	echo ')co PADICRAT.spad' | ${INTERPSYS} )

@
<<PADICRAT.spad (SPAD from IN)>>=
${MID}/PADICRAT.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/PADICRAT.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PADICRAT.NRLIB ; \
	${SPADBIN}/notangle -R"domain PADICRAT PAdicRational" ${IN}/padic.spad.pamphlet >PADICRAT.spad )

@
<<PADICRC.o (O from NRLIB)>>=
${OUT}/PADICRC.o: ${MID}/PADICRC.NRLIB
	@ echo 0 making ${OUT}/PADICRC.o from ${MID}/PADICRC.NRLIB
	@ cp ${MID}/PADICRC.NRLIB/code.o ${OUT}/PADICRC.o

@
<<PADICRC.NRLIB (NRLIB from MID)>>=
${MID}/PADICRC.NRLIB: ${MID}/PADICRC.spad
	@ echo 0 making ${MID}/PADICRC.NRLIB from ${MID}/PADICRC.spad
	@ (cd ${MID} ; 	echo ')co PADICRC.spad' | ${INTERPSYS} )

@
<<PADICRC.spad (SPAD from IN)>>=
${MID}/PADICRC.spad: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${MID}/PADICRC.spad from ${IN}/padic.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PADICRC.NRLIB ; \
	${SPADBIN}/notangle -R"domain PADICRC PAdicRationalConstructor" ${IN}/padic.spad.pamphlet >PADICRC.spad )

@
<<padic.spad.dvi (DOC from IN)>>=
${DOC}/padic.spad.dvi: ${IN}/padic.spad.pamphlet
	@ echo 0 making ${DOC}/padic.spad.dvi from ${IN}/padic.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/padic.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} padic.spad ; \
	rm -f ${DOC}/padic.spad.pamphlet ; \
	rm -f ${DOC}/padic.spad.tex ; \
	rm -f ${DOC}/padic.spad )

@
\subsection{paramete.spad \cite{1}}
<<paramete.spad (SPAD from IN)>>=
${MID}/paramete.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/paramete.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/paramete.spad.pamphlet >paramete.spad )

@
<<PARPCURV.o (O from NRLIB)>>=
${OUT}/PARPCURV.o: ${MID}/PARPCURV.NRLIB
	@ echo 0 making ${OUT}/PARPCURV.o from ${MID}/PARPCURV.NRLIB
	@ cp ${MID}/PARPCURV.NRLIB/code.o ${OUT}/PARPCURV.o

@
<<PARPCURV.NRLIB (NRLIB from MID)>>=
${MID}/PARPCURV.NRLIB: ${MID}/PARPCURV.spad
	@ echo 0 making ${MID}/PARPCURV.NRLIB from ${MID}/PARPCURV.spad
	@ (cd ${MID} ; 	echo ')co PARPCURV.spad' | ${INTERPSYS} )

@
<<PARPCURV.spad (SPAD from IN)>>=
${MID}/PARPCURV.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/PARPCURV.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARPCURV.NRLIB ; \
	${SPADBIN}/notangle -R"domain PARPCURV ParametricPlaneCurve" ${IN}/paramete.spad.pamphlet >PARPCURV.spad )

@
<<PARPC2.o (O from NRLIB)>>=
${OUT}/PARPC2.o: ${MID}/PARPC2.NRLIB
	@ echo 0 making ${OUT}/PARPC2.o from ${MID}/PARPC2.NRLIB
	@ cp ${MID}/PARPC2.NRLIB/code.o ${OUT}/PARPC2.o

@
<<PARPC2.NRLIB (NRLIB from MID)>>=
${MID}/PARPC2.NRLIB: ${MID}/PARPC2.spad
	@ echo 0 making ${MID}/PARPC2.NRLIB from ${MID}/PARPC2.spad
	@ (cd ${MID} ; 	echo ')co PARPC2.spad' | ${INTERPSYS} )

@
<<PARPC2.spad (SPAD from IN)>>=
${MID}/PARPC2.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/PARPC2.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARPC2.NRLIB ; \
	${SPADBIN}/notangle -R"package PARPC2 ParametricPlaneCurveFunctions2" ${IN}/paramete.spad.pamphlet >PARPC2.spad )

@
<<PARSCURV.o (O from NRLIB)>>=
${OUT}/PARSCURV.o: ${MID}/PARSCURV.NRLIB
	@ echo 0 making ${OUT}/PARSCURV.o from ${MID}/PARSCURV.NRLIB
	@ cp ${MID}/PARSCURV.NRLIB/code.o ${OUT}/PARSCURV.o

@
<<PARSCURV.NRLIB (NRLIB from MID)>>=
${MID}/PARSCURV.NRLIB: ${MID}/PARSCURV.spad
	@ echo 0 making ${MID}/PARSCURV.NRLIB from ${MID}/PARSCURV.spad
	@ (cd ${MID} ; 	echo ')co PARSCURV.spad' | ${INTERPSYS} )

@
<<PARSCURV.spad (SPAD from IN)>>=
${MID}/PARSCURV.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/PARSCURV.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARSCURV.NRLIB ; \
	${SPADBIN}/notangle -R"domain PARSCURV ParametricSpaceCurve" ${IN}/paramete.spad.pamphlet >PARSCURV.spad )

@
<<PARSC2.o (O from NRLIB)>>=
${OUT}/PARSC2.o: ${MID}/PARSC2.NRLIB
	@ echo 0 making ${OUT}/PARSC2.o from ${MID}/PARSC2.NRLIB
	@ cp ${MID}/PARSC2.NRLIB/code.o ${OUT}/PARSC2.o

@
<<PARSC2.NRLIB (NRLIB from MID)>>=
${MID}/PARSC2.NRLIB: ${MID}/PARSC2.spad
	@ echo 0 making ${MID}/PARSC2.NRLIB from ${MID}/PARSC2.spad
	@ (cd ${MID} ; 	echo ')co PARSC2.spad' | ${INTERPSYS} )

@
<<PARSC2.spad (SPAD from IN)>>=
${MID}/PARSC2.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/PARSC2.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARSC2.NRLIB ; \
	${SPADBIN}/notangle -R"package PARSC2 ParametricSpaceCurveFunctions2" ${IN}/paramete.spad.pamphlet >PARSC2.spad )

@
<<PARSURF.o (O from NRLIB)>>=
${OUT}/PARSURF.o: ${MID}/PARSURF.NRLIB
	@ echo 0 making ${OUT}/PARSURF.o from ${MID}/PARSURF.NRLIB
	@ cp ${MID}/PARSURF.NRLIB/code.o ${OUT}/PARSURF.o

@
<<PARSURF.NRLIB (NRLIB from MID)>>=
${MID}/PARSURF.NRLIB: ${MID}/PARSURF.spad
	@ echo 0 making ${MID}/PARSURF.NRLIB from ${MID}/PARSURF.spad
	@ (cd ${MID} ; 	echo ')co PARSURF.spad' | ${INTERPSYS} )

@
<<PARSURF.spad (SPAD from IN)>>=
${MID}/PARSURF.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/PARSURF.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARSURF.NRLIB ; \
	${SPADBIN}/notangle -R"domain PARSURF ParametricSurface" ${IN}/paramete.spad.pamphlet >PARSURF.spad )

@
<<PARSU2.o (O from NRLIB)>>=
${OUT}/PARSU2.o: ${MID}/PARSU2.NRLIB
	@ echo 0 making ${OUT}/PARSU2.o from ${MID}/PARSU2.NRLIB
	@ cp ${MID}/PARSU2.NRLIB/code.o ${OUT}/PARSU2.o

@
<<PARSU2.NRLIB (NRLIB from MID)>>=
${MID}/PARSU2.NRLIB: ${MID}/PARSU2.spad
	@ echo 0 making ${MID}/PARSU2.NRLIB from ${MID}/PARSU2.spad
	@ (cd ${MID} ; 	echo ')co PARSU2.spad' | ${INTERPSYS} )

@
<<PARSU2.spad (SPAD from IN)>>=
${MID}/PARSU2.spad: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${MID}/PARSU2.spad from ${IN}/paramete.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARSU2.NRLIB ; \
	${SPADBIN}/notangle -R"package PARSU2 ParametricSurfaceFunctions2" ${IN}/paramete.spad.pamphlet >PARSU2.spad )

@
<<paramete.spad.dvi (DOC from IN)>>=
${DOC}/paramete.spad.dvi: ${IN}/paramete.spad.pamphlet
	@ echo 0 making ${DOC}/paramete.spad.dvi from ${IN}/paramete.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/paramete.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} paramete.spad ; \
	rm -f ${DOC}/paramete.spad.pamphlet ; \
	rm -f ${DOC}/paramete.spad.tex ; \
	rm -f ${DOC}/paramete.spad )

@
\subsection{partperm.spad \cite{1}}
<<partperm.spad (SPAD from IN)>>=
${MID}/partperm.spad: ${IN}/partperm.spad.pamphlet
	@ echo 0 making ${MID}/partperm.spad from ${IN}/partperm.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/partperm.spad.pamphlet >partperm.spad )

@
<<PARTPERM.o (O from NRLIB)>>=
${OUT}/PARTPERM.o: ${MID}/PARTPERM.NRLIB
	@ echo 0 making ${OUT}/PARTPERM.o from ${MID}/PARTPERM.NRLIB
	@ cp ${MID}/PARTPERM.NRLIB/code.o ${OUT}/PARTPERM.o

@
<<PARTPERM.NRLIB (NRLIB from MID)>>=
${MID}/PARTPERM.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PARTPERM.spad
	@ echo 0 making ${MID}/PARTPERM.NRLIB from ${MID}/PARTPERM.spad
	@ (cd ${MID} ; 	echo ')co PARTPERM.spad' | ${INTERPSYS} )

@
<<PARTPERM.spad (SPAD from IN)>>=
${MID}/PARTPERM.spad: ${IN}/partperm.spad.pamphlet
	@ echo 0 making ${MID}/PARTPERM.spad from ${IN}/partperm.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PARTPERM.NRLIB ; \
	${SPADBIN}/notangle -R"package PARTPERM PartitionsAndPermutations" ${IN}/partperm.spad.pamphlet >PARTPERM.spad )

@
<<partperm.spad.dvi (DOC from IN)>>=
${DOC}/partperm.spad.dvi: ${IN}/partperm.spad.pamphlet
	@ echo 0 making ${DOC}/partperm.spad.dvi from ${IN}/partperm.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/partperm.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} partperm.spad ; \
	rm -f ${DOC}/partperm.spad.pamphlet ; \
	rm -f ${DOC}/partperm.spad.tex ; \
	rm -f ${DOC}/partperm.spad )

@
\subsection{patmatch1.spad \cite{1}}
<<patmatch1.spad (SPAD from IN)>>=
${MID}/patmatch1.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/patmatch1.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/patmatch1.spad.pamphlet >patmatch1.spad )

@
<<FPATMAB.o (O from NRLIB)>>=
${OUT}/FPATMAB.o: ${MID}/FPATMAB.NRLIB
	@ echo 0 making ${OUT}/FPATMAB.o from ${MID}/FPATMAB.NRLIB
	@ cp ${MID}/FPATMAB.NRLIB/code.o ${OUT}/FPATMAB.o

@
<<FPATMAB.NRLIB (NRLIB from MID)>>=
${MID}/FPATMAB.NRLIB: ${MID}/FPATMAB.spad
	@ echo 0 making ${MID}/FPATMAB.NRLIB from ${MID}/FPATMAB.spad
	@ (cd ${MID} ; 	echo ')co FPATMAB.spad' | ${INTERPSYS} )

@
<<FPATMAB.spad (SPAD from IN)>>=
${MID}/FPATMAB.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/FPATMAB.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FPATMAB.NRLIB ; \
	${SPADBIN}/notangle -R"category FPATMAB FullyPatternMatchable" ${IN}/patmatch1.spad.pamphlet >FPATMAB.spad )

@
<<PATLRES.o (O from NRLIB)>>=
${OUT}/PATLRES.o: ${MID}/PATLRES.NRLIB
	@ echo 0 making ${OUT}/PATLRES.o from ${MID}/PATLRES.NRLIB
	@ cp ${MID}/PATLRES.NRLIB/code.o ${OUT}/PATLRES.o

@
<<PATLRES.NRLIB (NRLIB from MID)>>=
${MID}/PATLRES.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/PATLRES.spad
	@ echo 0 making ${MID}/PATLRES.NRLIB from ${MID}/PATLRES.spad
	@ (cd ${MID} ; 	echo ')co PATLRES.spad' | ${INTERPSYS} )

@
<<PATLRES.spad (SPAD from IN)>>=
${MID}/PATLRES.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PATLRES.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATLRES.NRLIB ; \
	${SPADBIN}/notangle -R"domain PATLRES PatternMatchListResult" ${IN}/patmatch1.spad.pamphlet >PATLRES.spad )

@
<<PATMAB.o (O from NRLIB)>>=
${OUT}/PATMAB.o: ${MID}/PATMAB.NRLIB
	@ echo 0 making ${OUT}/PATMAB.o from ${MID}/PATMAB.NRLIB
	@ cp ${MID}/PATMAB.NRLIB/code.o ${OUT}/PATMAB.o

@
<<PATMAB.NRLIB (NRLIB from MID)>>=
${MID}/PATMAB.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/PATMAB.spad
	@ echo 0 making ${MID}/PATMAB.NRLIB from ${MID}/PATMAB.spad
	@ (cd ${MID} ; 	echo ')co PATMAB.spad' | ${INTERPSYS} )

@
<<PATMAB.spad (SPAD from IN)>>=
${MID}/PATMAB.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PATMAB.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATMAB.NRLIB ; \
	${SPADBIN}/notangle -R"category PATMAB PatternMatchable" ${IN}/patmatch1.spad.pamphlet >PATMAB.spad )

@
<<PATRES.o (O from NRLIB)>>=
${OUT}/PATRES.o: ${MID}/PATRES.NRLIB
	@ echo 0 making ${OUT}/PATRES.o from ${MID}/PATRES.NRLIB
	@ cp ${MID}/PATRES.NRLIB/code.o ${OUT}/PATRES.o

@
<<PATRES.NRLIB (NRLIB from MID)>>=
${MID}/PATRES.NRLIB: ${MID}/PATRES.spad
	@ echo 0 making ${MID}/PATRES.NRLIB from ${MID}/PATRES.spad
	@ (cd ${MID} ; 	echo ')co PATRES.spad' | ${INTERPSYS} )

@
<<PATRES.spad (SPAD from IN)>>=
${MID}/PATRES.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PATRES.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATRES.NRLIB ; \
	${SPADBIN}/notangle -R"domain PATRES PatternMatchResult" ${IN}/patmatch1.spad.pamphlet >PATRES.spad )

@
<<PATRES2.o (O from NRLIB)>>=
${OUT}/PATRES2.o: ${MID}/PATRES2.NRLIB
	@ echo 0 making ${OUT}/PATRES2.o from ${MID}/PATRES2.NRLIB
	@ cp ${MID}/PATRES2.NRLIB/code.o ${OUT}/PATRES2.o

@
<<PATRES2.NRLIB (NRLIB from MID)>>=
${MID}/PATRES2.NRLIB: ${MID}/PATRES2.spad
	@ echo 0 making ${MID}/PATRES2.NRLIB from ${MID}/PATRES2.spad
	@ (cd ${MID} ; 	echo ')co PATRES2.spad' | ${INTERPSYS} )

@
<<PATRES2.spad (SPAD from IN)>>=
${MID}/PATRES2.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PATRES2.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATRES2.NRLIB ; \
	${SPADBIN}/notangle -R"package PATRES2 PatternMatchResultFunctions2" ${IN}/patmatch1.spad.pamphlet >PATRES2.spad )

@
<<PMDOWN.o (O from NRLIB)>>=
${OUT}/PMDOWN.o: ${MID}/PMDOWN.NRLIB
	@ echo 0 making ${OUT}/PMDOWN.o from ${MID}/PMDOWN.NRLIB
	@ cp ${MID}/PMDOWN.NRLIB/code.o ${OUT}/PMDOWN.o

@
<<PMDOWN.NRLIB (NRLIB from MID)>>=
${MID}/PMDOWN.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PMDOWN.spad
	@ echo 0 making ${MID}/PMDOWN.NRLIB from ${MID}/PMDOWN.spad
	@ (cd ${MID} ; 	echo ')co PMDOWN.spad' | ${INTERPSYS} )

@
<<PMDOWN.spad (SPAD from IN)>>=
${MID}/PMDOWN.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PMDOWN.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMDOWN.NRLIB ; \
	${SPADBIN}/notangle -R"package PMDOWN PatternMatchPushDown" ${IN}/patmatch1.spad.pamphlet >PMDOWN.spad )

@
<<PMKERNEL.o (O from NRLIB)>>=
${OUT}/PMKERNEL.o: ${MID}/PMKERNEL.NRLIB
	@ echo 0 making ${OUT}/PMKERNEL.o from ${MID}/PMKERNEL.NRLIB
	@ cp ${MID}/PMKERNEL.NRLIB/code.o ${OUT}/PMKERNEL.o

@
<<PMKERNEL.NRLIB (NRLIB from MID)>>=
${MID}/PMKERNEL.NRLIB: ${MID}/PMKERNEL.spad
	@ echo 0 making ${MID}/PMKERNEL.NRLIB from ${MID}/PMKERNEL.spad
	@ (cd ${MID} ; 	echo ')co PMKERNEL.spad' | ${INTERPSYS} )

@
<<PMKERNEL.spad (SPAD from IN)>>=
${MID}/PMKERNEL.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PMKERNEL.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMKERNEL.NRLIB ; \
	${SPADBIN}/notangle -R"package PMKERNEL PatternMatchKernel" ${IN}/patmatch1.spad.pamphlet >PMKERNEL.spad )

@
<<PMLSAGG.o (O from NRLIB)>>=
${OUT}/PMLSAGG.o: ${MID}/PMLSAGG.NRLIB
	@ echo 0 making ${OUT}/PMLSAGG.o from ${MID}/PMLSAGG.NRLIB
	@ cp ${MID}/PMLSAGG.NRLIB/code.o ${OUT}/PMLSAGG.o

@
<<PMLSAGG.NRLIB (NRLIB from MID)>>=
${MID}/PMLSAGG.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PMLSAGG.spad
	@ echo 0 making ${MID}/PMLSAGG.NRLIB from ${MID}/PMLSAGG.spad
	@ (cd ${MID} ; 	echo ')co PMLSAGG.spad' | ${INTERPSYS} )

@
<<PMLSAGG.spad (SPAD from IN)>>=
${MID}/PMLSAGG.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PMLSAGG.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMLSAGG.NRLIB ; \
	${SPADBIN}/notangle -R"package PMLSAGG PatternMatchListAggregate" ${IN}/patmatch1.spad.pamphlet >PMLSAGG.spad )

@
<<PMSYM.o (O from NRLIB)>>=
${OUT}/PMSYM.o: ${MID}/PMSYM.NRLIB
	@ echo 0 making ${OUT}/PMSYM.o from ${MID}/PMSYM.NRLIB
	@ cp ${MID}/PMSYM.NRLIB/code.o ${OUT}/PMSYM.o

@
<<PMSYM.NRLIB (NRLIB from MID)>>=
${MID}/PMSYM.NRLIB: ${MID}/PMSYM.spad
	@ echo 0 making ${MID}/PMSYM.NRLIB from ${MID}/PMSYM.spad
	@ (cd ${MID} ; 	echo ')co PMSYM.spad' | ${INTERPSYS} )

@
<<PMSYM.spad (SPAD from IN)>>=
${MID}/PMSYM.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PMSYM.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMSYM.NRLIB ; \
	${SPADBIN}/notangle -R"package PMSYM PatternMatchSymbol" ${IN}/patmatch1.spad.pamphlet >PMSYM.spad )

@
<<PMTOOLS.o (O from NRLIB)>>=
${OUT}/PMTOOLS.o: ${MID}/PMTOOLS.NRLIB
	@ echo 0 making ${OUT}/PMTOOLS.o from ${MID}/PMTOOLS.NRLIB
	@ cp ${MID}/PMTOOLS.NRLIB/code.o ${OUT}/PMTOOLS.o

@
<<PMTOOLS.NRLIB (NRLIB from MID)>>=
${MID}/PMTOOLS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PMTOOLS.spad
	@ echo 0 making ${MID}/PMTOOLS.NRLIB from ${MID}/PMTOOLS.spad
	@ (cd ${MID} ; 	echo ')co PMTOOLS.spad' | ${INTERPSYS} )

@
<<PMTOOLS.spad (SPAD from IN)>>=
${MID}/PMTOOLS.spad: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${MID}/PMTOOLS.spad from ${IN}/patmatch1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMTOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package PMTOOLS PatternMatchTools" ${IN}/patmatch1.spad.pamphlet >PMTOOLS.spad )

@
<<patmatch1.spad.dvi (DOC from IN)>>=
${DOC}/patmatch1.spad.dvi: ${IN}/patmatch1.spad.pamphlet
	@ echo 0 making ${DOC}/patmatch1.spad.dvi from ${IN}/patmatch1.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/patmatch1.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} patmatch1.spad ; \
	rm -f ${DOC}/patmatch1.spad.pamphlet ; \
	rm -f ${DOC}/patmatch1.spad.tex ; \
	rm -f ${DOC}/patmatch1.spad )

@
\subsection{patmatch2.spad \cite{1}}
<<patmatch2.spad (SPAD from IN)>>=
${MID}/patmatch2.spad: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${MID}/patmatch2.spad from ${IN}/patmatch2.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/patmatch2.spad.pamphlet >patmatch2.spad )

@
<<PATMATCH.o (O from NRLIB)>>=
${OUT}/PATMATCH.o: ${MID}/PATMATCH.NRLIB
	@ echo 0 making ${OUT}/PATMATCH.o from ${MID}/PATMATCH.NRLIB
	@ cp ${MID}/PATMATCH.NRLIB/code.o ${OUT}/PATMATCH.o

@
<<PATMATCH.NRLIB (NRLIB from MID)>>=
${MID}/PATMATCH.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PATMATCH.spad
	@ echo 0 making ${MID}/PATMATCH.NRLIB from ${MID}/PATMATCH.spad
	@ (cd ${MID} ; 	echo ')co PATMATCH.spad' | ${INTERPSYS} )

@
<<PATMATCH.spad (SPAD from IN)>>=
${MID}/PATMATCH.spad: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${MID}/PATMATCH.spad from ${IN}/patmatch2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATMATCH.NRLIB ; \
	${SPADBIN}/notangle -R"package PATMATCH PatternMatch" ${IN}/patmatch2.spad.pamphlet >PATMATCH.spad )

@
<<PMFS.o (O from NRLIB)>>=
${OUT}/PMFS.o: ${MID}/PMFS.NRLIB
	@ echo 0 making ${OUT}/PMFS.o from ${MID}/PMFS.NRLIB
	@ cp ${MID}/PMFS.NRLIB/code.o ${OUT}/PMFS.o

@
<<PMFS.NRLIB (NRLIB from MID)>>=
${MID}/PMFS.NRLIB: ${MID}/PMFS.spad
	@ echo 0 making ${MID}/PMFS.NRLIB from ${MID}/PMFS.spad
	@ (cd ${MID} ; 	echo ')co PMFS.spad' | ${INTERPSYS} )

@
<<PMFS.spad (SPAD from IN)>>=
${MID}/PMFS.spad: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${MID}/PMFS.spad from ${IN}/patmatch2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMFS.NRLIB ; \
	${SPADBIN}/notangle -R"package PMFS PatternMatchFunctionSpace" ${IN}/patmatch2.spad.pamphlet >PMFS.spad )

@
<<PMINS.o (O from NRLIB)>>=
${OUT}/PMINS.o: ${MID}/PMINS.NRLIB
	@ echo 0 making ${OUT}/PMINS.o from ${MID}/PMINS.NRLIB
	@ cp ${MID}/PMINS.NRLIB/code.o ${OUT}/PMINS.o

@
<<PMINS.NRLIB (NRLIB from MID)>>=
${MID}/PMINS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PMINS.spad
	@ echo 0 making ${MID}/PMINS.NRLIB from ${MID}/PMINS.spad
	@ (cd ${MID} ; 	echo ')co PMINS.spad' | ${INTERPSYS} )

@
<<PMINS.spad (SPAD from IN)>>=
${MID}/PMINS.spad: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${MID}/PMINS.spad from ${IN}/patmatch2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMINS.NRLIB ; \
	${SPADBIN}/notangle -R"package PMINS PatternMatchIntegerNumberSystem" ${IN}/patmatch2.spad.pamphlet >PMINS.spad )

@
<<PMPLCAT.o (O from NRLIB)>>=
${OUT}/PMPLCAT.o: ${MID}/PMPLCAT.NRLIB
	@ echo 0 making ${OUT}/PMPLCAT.o from ${MID}/PMPLCAT.NRLIB
	@ cp ${MID}/PMPLCAT.NRLIB/code.o ${OUT}/PMPLCAT.o

@
<<PMPLCAT.NRLIB (NRLIB from MID)>>=
${MID}/PMPLCAT.NRLIB: ${MID}/PMPLCAT.spad
	@ echo 0 making ${MID}/PMPLCAT.NRLIB from ${MID}/PMPLCAT.spad
	@ (cd ${MID} ; 	echo ')co PMPLCAT.spad' | ${INTERPSYS} )

@
<<PMPLCAT.spad (SPAD from IN)>>=
${MID}/PMPLCAT.spad: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${MID}/PMPLCAT.spad from ${IN}/patmatch2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMPLCAT.NRLIB ; \
	${SPADBIN}/notangle -R"package PMPLCAT PatternMatchPolynomialCategory" ${IN}/patmatch2.spad.pamphlet >PMPLCAT.spad )

@
<<PMQFCAT.o (O from NRLIB)>>=
${OUT}/PMQFCAT.o: ${MID}/PMQFCAT.NRLIB
	@ echo 0 making ${OUT}/PMQFCAT.o from ${MID}/PMQFCAT.NRLIB
	@ cp ${MID}/PMQFCAT.NRLIB/code.o ${OUT}/PMQFCAT.o

@
<<PMQFCAT.NRLIB (NRLIB from MID)>>=
${MID}/PMQFCAT.NRLIB: ${MID}/PMQFCAT.spad
	@ echo 0 making ${MID}/PMQFCAT.NRLIB from ${MID}/PMQFCAT.spad
	@ (cd ${MID} ; 	echo ')co PMQFCAT.spad' | ${INTERPSYS} )

@
<<PMQFCAT.spad (SPAD from IN)>>=
${MID}/PMQFCAT.spad: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${MID}/PMQFCAT.spad from ${IN}/patmatch2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PMQFCAT.NRLIB ; \
	${SPADBIN}/notangle -R"package PMQFCAT PatternMatchQuotientFieldCategory" ${IN}/patmatch2.spad.pamphlet >PMQFCAT.spad )

@
<<patmatch2.spad.dvi (DOC from IN)>>=
${DOC}/patmatch2.spad.dvi: ${IN}/patmatch2.spad.pamphlet
	@ echo 0 making ${DOC}/patmatch2.spad.dvi from ${IN}/patmatch2.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/patmatch2.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} patmatch2.spad ; \
	rm -f ${DOC}/patmatch2.spad.pamphlet ; \
	rm -f ${DOC}/patmatch2.spad.tex ; \
	rm -f ${DOC}/patmatch2.spad )

@
\subsection{pattern.spad \cite{1}}
<<pattern.spad (SPAD from IN)>>=
${MID}/pattern.spad: ${IN}/pattern.spad.pamphlet
	@ echo 0 making ${MID}/pattern.spad from ${IN}/pattern.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pattern.spad.pamphlet >pattern.spad )

@
<<PATAB.o (O from NRLIB)>>=
${OUT}/PATAB.o: ${MID}/PATAB.NRLIB
	@ echo 0 making ${OUT}/PATAB.o from ${MID}/PATAB.NRLIB
	@ cp ${MID}/PATAB.NRLIB/code.o ${OUT}/PATAB.o

@
<<PATAB.NRLIB (NRLIB from MID)>>=
${MID}/PATAB.NRLIB: ${OUT}/KONVERT.o ${MID}/PATAB.spad
	@ echo 0 making ${MID}/PATAB.NRLIB from ${MID}/PATAB.spad
	@ (cd ${MID} ; 	echo ')co PATAB.spad' | ${INTERPSYS} )

@
<<PATAB.spad (SPAD from IN)>>=
${MID}/PATAB.spad: ${IN}/pattern.spad.pamphlet
	@ echo 0 making ${MID}/PATAB.spad from ${IN}/pattern.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATAB.NRLIB ; \
	${SPADBIN}/notangle -R"category PATAB Patternable" ${IN}/pattern.spad.pamphlet >PATAB.spad )

@
<<PATTERN.o (O from NRLIB)>>=
${OUT}/PATTERN.o: ${MID}/PATTERN.NRLIB
	@ echo 0 making ${OUT}/PATTERN.o from ${MID}/PATTERN.NRLIB
	@ cp ${MID}/PATTERN.NRLIB/code.o ${OUT}/PATTERN.o

@
<<PATTERN.NRLIB (NRLIB from MID)>>=
${MID}/PATTERN.NRLIB: ${MID}/PATTERN.spad
	@ echo 0 making ${MID}/PATTERN.NRLIB from ${MID}/PATTERN.spad
	@ (cd ${MID} ; 	echo ')co PATTERN.spad' | ${INTERPSYS} )

@
<<PATTERN.spad (SPAD from IN)>>=
${MID}/PATTERN.spad: ${IN}/pattern.spad.pamphlet
	@ echo 0 making ${MID}/PATTERN.spad from ${IN}/pattern.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATTERN.NRLIB ; \
	${SPADBIN}/notangle -R"domain PATTERN Pattern" ${IN}/pattern.spad.pamphlet >PATTERN.spad )

@
<<PATTERN1.o (O from NRLIB)>>=
${OUT}/PATTERN1.o: ${MID}/PATTERN1.NRLIB
	@ echo 0 making ${OUT}/PATTERN1.o from ${MID}/PATTERN1.NRLIB
	@ cp ${MID}/PATTERN1.NRLIB/code.o ${OUT}/PATTERN1.o

@
<<PATTERN1.NRLIB (NRLIB from MID)>>=
${MID}/PATTERN1.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PATTERN1.spad
	@ echo 0 making ${MID}/PATTERN1.NRLIB from ${MID}/PATTERN1.spad
	@ (cd ${MID} ; 	echo ')co PATTERN1.spad' | ${INTERPSYS} )

@
<<PATTERN1.spad (SPAD from IN)>>=
${MID}/PATTERN1.spad: ${IN}/pattern.spad.pamphlet
	@ echo 0 making ${MID}/PATTERN1.spad from ${IN}/pattern.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATTERN1.NRLIB ; \
	${SPADBIN}/notangle -R"package PATTERN1 PatternFunctions1" ${IN}/pattern.spad.pamphlet >PATTERN1.spad )

@
<<PATTERN2.o (O from NRLIB)>>=
${OUT}/PATTERN2.o: ${MID}/PATTERN2.NRLIB
	@ echo 0 making ${OUT}/PATTERN2.o from ${MID}/PATTERN2.NRLIB
	@ cp ${MID}/PATTERN2.NRLIB/code.o ${OUT}/PATTERN2.o

@
<<PATTERN2.NRLIB (NRLIB from MID)>>=
${MID}/PATTERN2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PATTERN2.spad
	@ echo 0 making ${MID}/PATTERN2.NRLIB from ${MID}/PATTERN2.spad
	@ (cd ${MID} ; 	echo ')co PATTERN2.spad' | ${INTERPSYS} )

@
<<PATTERN2.spad (SPAD from IN)>>=
${MID}/PATTERN2.spad: ${IN}/pattern.spad.pamphlet
	@ echo 0 making ${MID}/PATTERN2.spad from ${IN}/pattern.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PATTERN2.NRLIB ; \
	${SPADBIN}/notangle -R"package PATTERN2 PatternFunctions2" ${IN}/pattern.spad.pamphlet >PATTERN2.spad )

@
<<pattern.spad.dvi (DOC from IN)>>=
${DOC}/pattern.spad.dvi: ${IN}/pattern.spad.pamphlet
	@ echo 0 making ${DOC}/pattern.spad.dvi from ${IN}/pattern.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pattern.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pattern.spad ; \
	rm -f ${DOC}/pattern.spad.pamphlet ; \
	rm -f ${DOC}/pattern.spad.tex ; \
	rm -f ${DOC}/pattern.spad )

@
\subsection{pcurve.spad \cite{1}}
<<pcurve.spad (SPAD from IN)>>=
${MID}/pcurve.spad: ${IN}/pcurve.spad.pamphlet
	@ echo 0 making ${MID}/pcurve.spad from ${IN}/pcurve.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pcurve.spad.pamphlet >pcurve.spad )

@
<<PPCURVE.o (O from NRLIB)>>=
${OUT}/PPCURVE.o: ${MID}/PPCURVE.NRLIB
	@ echo 0 making ${OUT}/PPCURVE.o from ${MID}/PPCURVE.NRLIB
	@ cp ${MID}/PPCURVE.NRLIB/code.o ${OUT}/PPCURVE.o

@
<<PPCURVE.NRLIB (NRLIB from MID)>>=
${MID}/PPCURVE.NRLIB: ${OUT}/KOERCE.o ${MID}/PPCURVE.spad
	@ echo 0 making ${MID}/PPCURVE.NRLIB from ${MID}/PPCURVE.spad
	@ (cd ${MID} ; 	echo ')co PPCURVE.spad' | ${INTERPSYS} )

@
<<PPCURVE.spad (SPAD from IN)>>=
${MID}/PPCURVE.spad: ${IN}/pcurve.spad.pamphlet
	@ echo 0 making ${MID}/PPCURVE.spad from ${IN}/pcurve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PPCURVE.NRLIB ; \
	${SPADBIN}/notangle -R"category PPCURVE PlottablePlaneCurveCategory" ${IN}/pcurve.spad.pamphlet >PPCURVE.spad )

@
<<PSCURVE.o (O from NRLIB)>>=
${OUT}/PSCURVE.o: ${MID}/PSCURVE.NRLIB
	@ echo 0 making ${OUT}/PSCURVE.o from ${MID}/PSCURVE.NRLIB
	@ cp ${MID}/PSCURVE.NRLIB/code.o ${OUT}/PSCURVE.o

@
<<PSCURVE.NRLIB (NRLIB from MID)>>=
${MID}/PSCURVE.NRLIB: ${OUT}/KOERCE.o ${MID}/PSCURVE.spad
	@ echo 0 making ${MID}/PSCURVE.NRLIB from ${MID}/PSCURVE.spad
	@ (cd ${MID} ; 	echo ')co PSCURVE.spad' | ${INTERPSYS} )

@
<<PSCURVE.spad (SPAD from IN)>>=
${MID}/PSCURVE.spad: ${IN}/pcurve.spad.pamphlet
	@ echo 0 making ${MID}/PSCURVE.spad from ${IN}/pcurve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSCURVE.NRLIB ; \
	${SPADBIN}/notangle -R"category PSCURVE PlottableSpaceCurveCategory" ${IN}/pcurve.spad.pamphlet >PSCURVE.spad )

@
<<pcurve.spad.dvi (DOC from IN)>>=
${DOC}/pcurve.spad.dvi: ${IN}/pcurve.spad.pamphlet
	@ echo 0 making ${DOC}/pcurve.spad.dvi from ${IN}/pcurve.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pcurve.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pcurve.spad ; \
	rm -f ${DOC}/pcurve.spad.pamphlet ; \
	rm -f ${DOC}/pcurve.spad.tex ; \
	rm -f ${DOC}/pcurve.spad )

@
\subsection{pdecomp.spad \cite{1}}
<<pdecomp.spad (SPAD from IN)>>=
${MID}/pdecomp.spad: ${IN}/pdecomp.spad.pamphlet
	@ echo 0 making ${MID}/pdecomp.spad from ${IN}/pdecomp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pdecomp.spad.pamphlet >pdecomp.spad )

@
<<PCOMP.o (O from NRLIB)>>=
${OUT}/PCOMP.o: ${MID}/PCOMP.NRLIB
	@ echo 0 making ${OUT}/PCOMP.o from ${MID}/PCOMP.NRLIB
	@ cp ${MID}/PCOMP.NRLIB/code.o ${OUT}/PCOMP.o

@
<<PCOMP.NRLIB (NRLIB from MID)>>=
${MID}/PCOMP.NRLIB: ${MID}/PCOMP.spad
	@ echo 0 making ${MID}/PCOMP.NRLIB from ${MID}/PCOMP.spad
	@ (cd ${MID} ; 	echo ')co PCOMP.spad' | ${INTERPSYS} )

@
<<PCOMP.spad (SPAD from IN)>>=
${MID}/PCOMP.spad: ${IN}/pdecomp.spad.pamphlet
	@ echo 0 making ${MID}/PCOMP.spad from ${IN}/pdecomp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PCOMP.NRLIB ; \
	${SPADBIN}/notangle -R"package PCOMP PolynomialComposition" ${IN}/pdecomp.spad.pamphlet >PCOMP.spad )

@
<<PDECOMP.o (O from NRLIB)>>=
${OUT}/PDECOMP.o: ${MID}/PDECOMP.NRLIB
	@ echo 0 making ${OUT}/PDECOMP.o from ${MID}/PDECOMP.NRLIB
	@ cp ${MID}/PDECOMP.NRLIB/code.o ${OUT}/PDECOMP.o

@
<<PDECOMP.NRLIB (NRLIB from MID)>>=
${MID}/PDECOMP.NRLIB: ${MID}/PDECOMP.spad
	@ echo 0 making ${MID}/PDECOMP.NRLIB from ${MID}/PDECOMP.spad
	@ (cd ${MID} ; 	echo ')co PDECOMP.spad' | ${INTERPSYS} )

@
<<PDECOMP.spad (SPAD from IN)>>=
${MID}/PDECOMP.spad: ${IN}/pdecomp.spad.pamphlet
	@ echo 0 making ${MID}/PDECOMP.spad from ${IN}/pdecomp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PDECOMP.NRLIB ; \
	${SPADBIN}/notangle -R"package PDECOMP PolynomialDecomposition" ${IN}/pdecomp.spad.pamphlet >PDECOMP.spad )

@
<<pdecomp.spad.dvi (DOC from IN)>>=
${DOC}/pdecomp.spad.dvi: ${IN}/pdecomp.spad.pamphlet
	@ echo 0 making ${DOC}/pdecomp.spad.dvi from ${IN}/pdecomp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pdecomp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pdecomp.spad ; \
	rm -f ${DOC}/pdecomp.spad.pamphlet ; \
	rm -f ${DOC}/pdecomp.spad.tex ; \
	rm -f ${DOC}/pdecomp.spad )

@
\subsection{perman.spad \cite{1}}
<<perman.spad (SPAD from IN)>>=
${MID}/perman.spad: ${IN}/perman.spad.pamphlet
	@ echo 0 making ${MID}/perman.spad from ${IN}/perman.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/perman.spad.pamphlet >perman.spad )

@
<<GRAY.o (O from NRLIB)>>=
${OUT}/GRAY.o: ${MID}/GRAY.NRLIB
	@ echo 0 making ${OUT}/GRAY.o from ${MID}/GRAY.NRLIB
	@ cp ${MID}/GRAY.NRLIB/code.o ${OUT}/GRAY.o

@
<<GRAY.NRLIB (NRLIB from MID)>>=
${MID}/GRAY.NRLIB: ${MID}/GRAY.spad
	@ echo 0 making ${MID}/GRAY.NRLIB from ${MID}/GRAY.spad
	@ (cd ${MID} ; 	echo ')co GRAY.spad' | ${INTERPSYS} )

@
<<GRAY.spad (SPAD from IN)>>=
${MID}/GRAY.spad: ${IN}/perman.spad.pamphlet
	@ echo 0 making ${MID}/GRAY.spad from ${IN}/perman.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GRAY.NRLIB ; \
	${SPADBIN}/notangle -R"package GRAY GrayCode" ${IN}/perman.spad.pamphlet >GRAY.spad )

@
<<PERMAN.o (O from NRLIB)>>=
${OUT}/PERMAN.o: ${MID}/PERMAN.NRLIB
	@ echo 0 making ${OUT}/PERMAN.o from ${MID}/PERMAN.NRLIB
	@ cp ${MID}/PERMAN.NRLIB/code.o ${OUT}/PERMAN.o

@
<<PERMAN.NRLIB (NRLIB from MID)>>=
${MID}/PERMAN.NRLIB: ${MID}/PERMAN.spad
	@ echo 0 making ${MID}/PERMAN.NRLIB from ${MID}/PERMAN.spad
	@ (cd ${MID} ; 	echo ')co PERMAN.spad' | ${INTERPSYS} )

@
<<PERMAN.spad (SPAD from IN)>>=
${MID}/PERMAN.spad: ${IN}/perman.spad.pamphlet
	@ echo 0 making ${MID}/PERMAN.spad from ${IN}/perman.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PERMAN.NRLIB ; \
	${SPADBIN}/notangle -R"package PERMAN Permanent" ${IN}/perman.spad.pamphlet >PERMAN.spad )

@
<<perman.spad.dvi (DOC from IN)>>=
${DOC}/perman.spad.dvi: ${IN}/perman.spad.pamphlet
	@ echo 0 making ${DOC}/perman.spad.dvi from ${IN}/perman.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/perman.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} perman.spad ; \
	rm -f ${DOC}/perman.spad.pamphlet ; \
	rm -f ${DOC}/perman.spad.tex ; \
	rm -f ${DOC}/perman.spad )

@
\subsection{permgrps.spad \cite{1}}
<<permgrps.spad (SPAD from IN)>>=
${MID}/permgrps.spad: ${IN}/permgrps.spad.pamphlet
	@ echo 0 making ${MID}/permgrps.spad from ${IN}/permgrps.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/permgrps.spad.pamphlet >permgrps.spad )

@
<<PERMGRP.o (O from NRLIB)>>=
${OUT}/PERMGRP.o: ${MID}/PERMGRP.NRLIB
	@ echo 0 making ${OUT}/PERMGRP.o from ${MID}/PERMGRP.NRLIB
	@ cp ${MID}/PERMGRP.NRLIB/code.o ${OUT}/PERMGRP.o

@
<<PERMGRP.NRLIB (NRLIB from MID)>>=
${MID}/PERMGRP.NRLIB: ${MID}/PERMGRP.spad
	@ echo 0 making ${MID}/PERMGRP.NRLIB from ${MID}/PERMGRP.spad
	@ (cd ${MID} ; 	echo ')co PERMGRP.spad' | ${INTERPSYS} )

@
<<PERMGRP.spad (SPAD from IN)>>=
${MID}/PERMGRP.spad: ${IN}/permgrps.spad.pamphlet
	@ echo 0 making ${MID}/PERMGRP.spad from ${IN}/permgrps.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PERMGRP.NRLIB ; \
	${SPADBIN}/notangle -R"domain PERMGRP PermutationGroup" ${IN}/permgrps.spad.pamphlet >PERMGRP.spad )

@
<<PGE.o (O from NRLIB)>>=
${OUT}/PGE.o: ${MID}/PGE.NRLIB
	@ echo 0 making ${OUT}/PGE.o from ${MID}/PGE.NRLIB
	@ cp ${MID}/PGE.NRLIB/code.o ${OUT}/PGE.o

@
<<PGE.NRLIB (NRLIB from MID)>>=
${MID}/PGE.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PGE.spad
	@ echo 0 making ${MID}/PGE.NRLIB from ${MID}/PGE.spad
	@ (cd ${MID} ; 	echo ')co PGE.spad' | ${INTERPSYS} )

@
<<PGE.spad (SPAD from IN)>>=
${MID}/PGE.spad: ${IN}/permgrps.spad.pamphlet
	@ echo 0 making ${MID}/PGE.spad from ${IN}/permgrps.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PGE.NRLIB ; \
	${SPADBIN}/notangle -R"package PGE PermutationGroupExamples" ${IN}/permgrps.spad.pamphlet >PGE.spad )

@
<<permgrps.spad.dvi (DOC from IN)>>=
${DOC}/permgrps.spad.dvi: ${IN}/permgrps.spad.pamphlet
	@ echo 0 making ${DOC}/permgrps.spad.dvi from ${IN}/permgrps.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/permgrps.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} permgrps.spad ; \
	rm -f ${DOC}/permgrps.spad.pamphlet ; \
	rm -f ${DOC}/permgrps.spad.tex ; \
	rm -f ${DOC}/permgrps.spad )

@
\subsection{perm.spad \cite{1}}
<<perm.spad (SPAD from IN)>>=
${MID}/perm.spad: ${IN}/perm.spad.pamphlet
	@ echo 0 making ${MID}/perm.spad from ${IN}/perm.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/perm.spad.pamphlet >perm.spad )

@
<<PERM.o (O from NRLIB)>>=
${OUT}/PERM.o: ${MID}/PERM.NRLIB
	@ echo 0 making ${OUT}/PERM.o from ${MID}/PERM.NRLIB
	@ cp ${MID}/PERM.NRLIB/code.o ${OUT}/PERM.o

@
<<PERM.NRLIB (NRLIB from MID)>>=
${MID}/PERM.NRLIB: ${MID}/PERM.spad
	@ echo 0 making ${MID}/PERM.NRLIB from ${MID}/PERM.spad
	@ (cd ${MID} ; 	echo ')co PERM.spad' | ${INTERPSYS} )

@
<<PERM.spad (SPAD from IN)>>=
${MID}/PERM.spad: ${IN}/perm.spad.pamphlet
	@ echo 0 making ${MID}/PERM.spad from ${IN}/perm.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PERM.NRLIB ; \
	${SPADBIN}/notangle -R"domain PERM Permutation" ${IN}/perm.spad.pamphlet >PERM.spad )

@
<<PERMCAT.o (O from NRLIB)>>=
${OUT}/PERMCAT.o: ${MID}/PERMCAT.NRLIB
	@ echo 0 making ${OUT}/PERMCAT.o from ${MID}/PERMCAT.NRLIB
	@ cp ${MID}/PERMCAT.NRLIB/code.o ${OUT}/PERMCAT.o

@
<<PERMCAT.NRLIB (NRLIB from MID)>>=
${MID}/PERMCAT.NRLIB: ${MID}/PERMCAT.spad
	@ echo 0 making ${MID}/PERMCAT.NRLIB from ${MID}/PERMCAT.spad
	@ (cd ${MID} ; 	echo ')co PERMCAT.spad' | ${INTERPSYS} )

@
<<PERMCAT.spad (SPAD from IN)>>=
${MID}/PERMCAT.spad: ${IN}/perm.spad.pamphlet
	@ echo 0 making ${MID}/PERMCAT.spad from ${IN}/perm.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PERMCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PERMCAT PermutationCategory" ${IN}/perm.spad.pamphlet >PERMCAT.spad )

@
<<perm.spad.dvi (DOC from IN)>>=
${DOC}/perm.spad.dvi: ${IN}/perm.spad.pamphlet
	@ echo 0 making ${DOC}/perm.spad.dvi from ${IN}/perm.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/perm.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} perm.spad ; \
	rm -f ${DOC}/perm.spad.pamphlet ; \
	rm -f ${DOC}/perm.spad.tex ; \
	rm -f ${DOC}/perm.spad )

@
\subsection{pfbr.spad \cite{1}}
<<pfbr.spad (SPAD from IN)>>=
${MID}/pfbr.spad: ${IN}/pfbr.spad.pamphlet
	@ echo 0 making ${MID}/pfbr.spad from ${IN}/pfbr.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pfbr.spad.pamphlet >pfbr.spad )

@
<<PFBR.o (O from NRLIB)>>=
${OUT}/PFBR.o: ${MID}/PFBR.NRLIB
	@ echo 0 making ${OUT}/PFBR.o from ${MID}/PFBR.NRLIB
	@ cp ${MID}/PFBR.NRLIB/code.o ${OUT}/PFBR.o

@
<<PFBR.NRLIB (NRLIB from MID)>>=
${MID}/PFBR.NRLIB: ${MID}/PFBR.spad
	@ echo 0 making ${MID}/PFBR.NRLIB from ${MID}/PFBR.spad
	@ (cd ${MID} ; 	echo ')co PFBR.spad' | ${INTERPSYS} )

@
<<PFBR.spad (SPAD from IN)>>=
${MID}/PFBR.spad: ${IN}/pfbr.spad.pamphlet
	@ echo 0 making ${MID}/PFBR.spad from ${IN}/pfbr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFBR.NRLIB ; \
	${SPADBIN}/notangle -R"package PFBR PolynomialFactorizationByRecursion" ${IN}/pfbr.spad.pamphlet >PFBR.spad )

@
<<PFBRU.o (O from NRLIB)>>=
${OUT}/PFBRU.o: ${MID}/PFBRU.NRLIB
	@ echo 0 making ${OUT}/PFBRU.o from ${MID}/PFBRU.NRLIB
	@ cp ${MID}/PFBRU.NRLIB/code.o ${OUT}/PFBRU.o

@
<<PFBRU.NRLIB (NRLIB from MID)>>=
${MID}/PFBRU.NRLIB: ${MID}/PFBRU.spad
	@ echo 0 making ${MID}/PFBRU.NRLIB from ${MID}/PFBRU.spad
	@ (cd ${MID} ; 	echo ')co PFBRU.spad' | ${INTERPSYS} )

@
<<PFBRU.spad (SPAD from IN)>>=
${MID}/PFBRU.spad: ${IN}/pfbr.spad.pamphlet
	@ echo 0 making ${MID}/PFBRU.spad from ${IN}/pfbr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFBRU.NRLIB ; \
	${SPADBIN}/notangle -R"package PFBRU PolynomialFactorizationByRecursionUnivariate" ${IN}/pfbr.spad.pamphlet >PFBRU.spad )

@
<<pfbr.spad.dvi (DOC from IN)>>=
${DOC}/pfbr.spad.dvi: ${IN}/pfbr.spad.pamphlet
	@ echo 0 making ${DOC}/pfbr.spad.dvi from ${IN}/pfbr.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pfbr.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pfbr.spad ; \
	rm -f ${DOC}/pfbr.spad.pamphlet ; \
	rm -f ${DOC}/pfbr.spad.tex ; \
	rm -f ${DOC}/pfbr.spad )

@
\subsection{pfo.spad \cite{1}}
<<pfo.spad (SPAD from IN)>>=
${MID}/pfo.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/pfo.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pfo.spad.pamphlet >pfo.spad )

@
<<FORDER.o (O from NRLIB)>>=
${OUT}/FORDER.o: ${MID}/FORDER.NRLIB
	@ echo 0 making ${OUT}/FORDER.o from ${MID}/FORDER.NRLIB
	@ cp ${MID}/FORDER.NRLIB/code.o ${OUT}/FORDER.o

@
<<FORDER.NRLIB (NRLIB from MID)>>=
${MID}/FORDER.NRLIB: ${MID}/FORDER.spad
	@ echo 0 making ${MID}/FORDER.NRLIB from ${MID}/FORDER.spad
	@ (cd ${MID} ; 	echo ')co FORDER.spad' | ${INTERPSYS} )

@
<<FORDER.spad (SPAD from IN)>>=
${MID}/FORDER.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/FORDER.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FORDER.NRLIB ; \
	${SPADBIN}/notangle -R"package FORDER FindOrderFinite" ${IN}/pfo.spad.pamphlet >FORDER.spad )

@
<<FSRED.o (O from NRLIB)>>=
${OUT}/FSRED.o: ${MID}/FSRED.NRLIB
	@ echo 0 making ${OUT}/FSRED.o from ${MID}/FSRED.NRLIB
	@ cp ${MID}/FSRED.NRLIB/code.o ${OUT}/FSRED.o

@
<<FSRED.NRLIB (NRLIB from MID)>>=
${MID}/FSRED.NRLIB: ${MID}/FSRED.spad
	@ echo 0 making ${MID}/FSRED.NRLIB from ${MID}/FSRED.spad
	@ (cd ${MID} ; 	echo ')co FSRED.spad' | ${INTERPSYS} )

@
<<FSRED.spad (SPAD from IN)>>=
${MID}/FSRED.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/FSRED.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSRED.NRLIB ; \
	${SPADBIN}/notangle -R"package FSRED FunctionSpaceReduce" ${IN}/pfo.spad.pamphlet >FSRED.spad )

@
<<PFO.o (O from NRLIB)>>=
${OUT}/PFO.o: ${MID}/PFO.NRLIB
	@ echo 0 making ${OUT}/PFO.o from ${MID}/PFO.NRLIB
	@ cp ${MID}/PFO.NRLIB/code.o ${OUT}/PFO.o

@
<<PFO.NRLIB (NRLIB from MID)>>=
${MID}/PFO.NRLIB: ${MID}/PFO.spad
	@ echo 0 making ${MID}/PFO.NRLIB from ${MID}/PFO.spad
	@ (cd ${MID} ; 	echo ')co PFO.spad' | ${INTERPSYS} )

@
<<PFO.spad (SPAD from IN)>>=
${MID}/PFO.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/PFO.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFO.NRLIB ; \
	${SPADBIN}/notangle -R"package PFO PointsOfFiniteOrder" ${IN}/pfo.spad.pamphlet >PFO.spad )

@
<<PFOQ.o (O from NRLIB)>>=
${OUT}/PFOQ.o: ${MID}/PFOQ.NRLIB
	@ echo 0 making ${OUT}/PFOQ.o from ${MID}/PFOQ.NRLIB
	@ cp ${MID}/PFOQ.NRLIB/code.o ${OUT}/PFOQ.o

@
<<PFOQ.NRLIB (NRLIB from MID)>>=
${MID}/PFOQ.NRLIB: ${MID}/PFOQ.spad
	@ echo 0 making ${MID}/PFOQ.NRLIB from ${MID}/PFOQ.spad
	@ (cd ${MID} ; 	echo ')co PFOQ.spad' | ${INTERPSYS} )

@
<<PFOQ.spad (SPAD from IN)>>=
${MID}/PFOQ.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/PFOQ.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFOQ.NRLIB ; \
	${SPADBIN}/notangle -R"package PFOQ PointsOfFiniteOrderRational" ${IN}/pfo.spad.pamphlet >PFOQ.spad )

@
<<PFOTOOLS.o (O from NRLIB)>>=
${OUT}/PFOTOOLS.o: ${MID}/PFOTOOLS.NRLIB
	@ echo 0 making ${OUT}/PFOTOOLS.o from ${MID}/PFOTOOLS.NRLIB
	@ cp ${MID}/PFOTOOLS.NRLIB/code.o ${OUT}/PFOTOOLS.o

@
<<PFOTOOLS.NRLIB (NRLIB from MID)>>=
${MID}/PFOTOOLS.NRLIB: ${MID}/PFOTOOLS.spad
	@ echo 0 making ${MID}/PFOTOOLS.NRLIB from ${MID}/PFOTOOLS.spad
	@ (cd ${MID} ; 	echo ')co PFOTOOLS.spad' | ${INTERPSYS} )

@
<<PFOTOOLS.spad (SPAD from IN)>>=
${MID}/PFOTOOLS.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/PFOTOOLS.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFOTOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package PFOTOOLS PointsOfFiniteOrderTools" ${IN}/pfo.spad.pamphlet >PFOTOOLS.spad )

@
<<RDIV.o (O from NRLIB)>>=
${OUT}/RDIV.o: ${MID}/RDIV.NRLIB
	@ echo 0 making ${OUT}/RDIV.o from ${MID}/RDIV.NRLIB
	@ cp ${MID}/RDIV.NRLIB/code.o ${OUT}/RDIV.o

@
<<RDIV.NRLIB (NRLIB from MID)>>=
${MID}/RDIV.NRLIB: ${MID}/RDIV.spad
	@ echo 0 making ${MID}/RDIV.NRLIB from ${MID}/RDIV.spad
	@ (cd ${MID} ; 	echo ')co RDIV.spad' | ${INTERPSYS} )

@
<<RDIV.spad (SPAD from IN)>>=
${MID}/RDIV.spad: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${MID}/RDIV.spad from ${IN}/pfo.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RDIV.NRLIB ; \
	${SPADBIN}/notangle -R"package RDIV ReducedDivisor" ${IN}/pfo.spad.pamphlet >RDIV.spad )

@
<<pfo.spad.dvi (DOC from IN)>>=
${DOC}/pfo.spad.dvi: ${IN}/pfo.spad.pamphlet
	@ echo 0 making ${DOC}/pfo.spad.dvi from ${IN}/pfo.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pfo.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pfo.spad ; \
	rm -f ${DOC}/pfo.spad.pamphlet ; \
	rm -f ${DOC}/pfo.spad.tex ; \
	rm -f ${DOC}/pfo.spad )

@
\subsection{pfr.spad \cite{1}}
<<pfr.spad (SPAD from IN)>>=
${MID}/pfr.spad: ${IN}/pfr.spad.pamphlet
	@ echo 0 making ${MID}/pfr.spad from ${IN}/pfr.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pfr.spad.pamphlet >pfr.spad )

@
<<PFR.o (O from NRLIB)>>=
${OUT}/PFR.o: ${MID}/PFR.NRLIB
	@ echo 0 making ${OUT}/PFR.o from ${MID}/PFR.NRLIB
	@ cp ${MID}/PFR.NRLIB/code.o ${OUT}/PFR.o

@
<<PFR.NRLIB (NRLIB from MID)>>=
${MID}/PFR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PFR.spad
	@ echo 0 making ${MID}/PFR.NRLIB from ${MID}/PFR.spad
	@ (cd ${MID} ; 	echo ')co PFR.spad' | ${INTERPSYS} )

@
<<PFR.spad (SPAD from IN)>>=
${MID}/PFR.spad: ${IN}/pfr.spad.pamphlet
	@ echo 0 making ${MID}/PFR.spad from ${IN}/pfr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFR.NRLIB ; \
	${SPADBIN}/notangle -R"domain PFR PartialFraction" ${IN}/pfr.spad.pamphlet >PFR.spad )

@
<<PFRPAC.o (O from NRLIB)>>=
${OUT}/PFRPAC.o: ${MID}/PFRPAC.NRLIB
	@ echo 0 making ${OUT}/PFRPAC.o from ${MID}/PFRPAC.NRLIB
	@ cp ${MID}/PFRPAC.NRLIB/code.o ${OUT}/PFRPAC.o

@
<<PFRPAC.NRLIB (NRLIB from MID)>>=
${MID}/PFRPAC.NRLIB: ${MID}/PFRPAC.spad
	@ echo 0 making ${MID}/PFRPAC.NRLIB from ${MID}/PFRPAC.spad
	@ (cd ${MID} ; 	echo ')co PFRPAC.spad' | ${INTERPSYS} )

@
<<PFRPAC.spad (SPAD from IN)>>=
${MID}/PFRPAC.spad: ${IN}/pfr.spad.pamphlet
	@ echo 0 making ${MID}/PFRPAC.spad from ${IN}/pfr.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PFRPAC.NRLIB ; \
	${SPADBIN}/notangle -R"package PFRPAC PartialFractionPackage" ${IN}/pfr.spad.pamphlet >PFRPAC.spad )

@
<<pfr.spad.dvi (DOC from IN)>>=
${DOC}/pfr.spad.dvi: ${IN}/pfr.spad.pamphlet
	@ echo 0 making ${DOC}/pfr.spad.dvi from ${IN}/pfr.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pfr.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pfr.spad ; \
	rm -f ${DOC}/pfr.spad.pamphlet ; \
	rm -f ${DOC}/pfr.spad.tex ; \
	rm -f ${DOC}/pfr.spad )

@
\subsection{pf.spad \cite{1}}
<<pf.spad (SPAD from IN)>>=
${MID}/pf.spad: ${IN}/pf.spad.pamphlet
	@ echo 0 making ${MID}/pf.spad from ${IN}/pf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pf.spad.pamphlet >pf.spad )

@
<<IPF.o (O from NRLIB)>>=
${OUT}/IPF.o: ${MID}/IPF.NRLIB
	@ echo 0 making ${OUT}/IPF.o from ${MID}/IPF.NRLIB
	@ cp ${MID}/IPF.NRLIB/code.o ${OUT}/IPF.o

@
<<IPF.NRLIB (NRLIB from MID)>>=
${MID}/IPF.NRLIB: ${MID}/IPF.spad
	@ echo 0 making ${MID}/IPF.NRLIB from ${MID}/IPF.spad
	@ (cd ${MID} ; 	echo ')co IPF.spad' | ${INTERPSYS} )

@
<<IPF.spad (SPAD from IN)>>=
${MID}/IPF.spad: ${IN}/pf.spad.pamphlet
	@ echo 0 making ${MID}/IPF.spad from ${IN}/pf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IPF.NRLIB ; \
	${SPADBIN}/notangle -R"domain IPF InnerPrimeField" ${IN}/pf.spad.pamphlet >IPF.spad )

@
<<PF.o (O from NRLIB)>>=
${OUT}/PF.o: ${MID}/PF.NRLIB
	@ echo 0 making ${OUT}/PF.o from ${MID}/PF.NRLIB
	@ cp ${MID}/PF.NRLIB/code.o ${OUT}/PF.o

@
<<PF.NRLIB (NRLIB from MID)>>=
${MID}/PF.NRLIB: ${MID}/PF.spad
	@ echo 0 making ${MID}/PF.NRLIB from ${MID}/PF.spad
	@ (cd ${MID} ; 	echo ')co PF.spad' | ${INTERPSYS} )

@
<<PF.spad (SPAD from IN)>>=
${MID}/PF.spad: ${IN}/pf.spad.pamphlet
	@ echo 0 making ${MID}/PF.spad from ${IN}/pf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PF.NRLIB ; \
	${SPADBIN}/notangle -R"domain PF PrimeField" ${IN}/pf.spad.pamphlet >PF.spad )

@
<<pf.spad.dvi (DOC from IN)>>=
${DOC}/pf.spad.dvi: ${IN}/pf.spad.pamphlet
	@ echo 0 making ${DOC}/pf.spad.dvi from ${IN}/pf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pf.spad ; \
	rm -f ${DOC}/pf.spad.pamphlet ; \
	rm -f ${DOC}/pf.spad.tex ; \
	rm -f ${DOC}/pf.spad )

@
\subsection{pgcd.spad \cite{1}}
<<pgcd.spad (SPAD from IN)>>=
${MID}/pgcd.spad: ${IN}/pgcd.spad.pamphlet
	@ echo 0 making ${MID}/pgcd.spad from ${IN}/pgcd.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pgcd.spad.pamphlet >pgcd.spad )

@
<<PGCD.o (O from NRLIB)>>=
${OUT}/PGCD.o: ${MID}/PGCD.NRLIB
	@ echo 0 making ${OUT}/PGCD.o from ${MID}/PGCD.NRLIB
	@ cp ${MID}/PGCD.NRLIB/code.o ${OUT}/PGCD.o

@
<<PGCD.NRLIB (NRLIB from MID)>>=
${MID}/PGCD.NRLIB: ${MID}/PGCD.spad
	@ echo 0 making ${MID}/PGCD.NRLIB from ${MID}/PGCD.spad
	@ (cd ${MID} ; 	echo ')co PGCD.spad' | ${INTERPSYS} )

@
<<PGCD.spad (SPAD from IN)>>=
${MID}/PGCD.spad: ${IN}/pgcd.spad.pamphlet
	@ echo 0 making ${MID}/PGCD.spad from ${IN}/pgcd.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PGCD.NRLIB ; \
	${SPADBIN}/notangle -R"package PGCD PolynomialGcdPackage" ${IN}/pgcd.spad.pamphlet >PGCD.spad )

@
<<pgcd.spad.dvi (DOC from IN)>>=
${DOC}/pgcd.spad.dvi: ${IN}/pgcd.spad.pamphlet
	@ echo 0 making ${DOC}/pgcd.spad.dvi from ${IN}/pgcd.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pgcd.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pgcd.spad ; \
	rm -f ${DOC}/pgcd.spad.pamphlet ; \
	rm -f ${DOC}/pgcd.spad.tex ; \
	rm -f ${DOC}/pgcd.spad )

@
\subsection{pgrobner.spad \cite{1}}
<<pgrobner.spad (SPAD from IN)>>=
${MID}/pgrobner.spad: ${IN}/pgrobner.spad.pamphlet
	@ echo 0 making ${MID}/pgrobner.spad from ${IN}/pgrobner.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pgrobner.spad.pamphlet >pgrobner.spad )

@
<<PGROEB.o (O from NRLIB)>>=
${OUT}/PGROEB.o: ${MID}/PGROEB.NRLIB
	@ echo 0 making ${OUT}/PGROEB.o from ${MID}/PGROEB.NRLIB
	@ cp ${MID}/PGROEB.NRLIB/code.o ${OUT}/PGROEB.o

@
<<PGROEB.NRLIB (NRLIB from MID)>>=
${MID}/PGROEB.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PGROEB.spad
	@ echo 0 making ${MID}/PGROEB.NRLIB from ${MID}/PGROEB.spad
	@ (cd ${MID} ; 	echo ')co PGROEB.spad' | ${INTERPSYS} )

@
<<PGROEB.spad (SPAD from IN)>>=
${MID}/PGROEB.spad: ${IN}/pgrobner.spad.pamphlet
	@ echo 0 making ${MID}/PGROEB.spad from ${IN}/pgrobner.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PGROEB.NRLIB ; \
	${SPADBIN}/notangle -R"package PGROEB PolyGroebner" ${IN}/pgrobner.spad.pamphlet >PGROEB.spad )

@
<<pgrobner.spad.dvi (DOC from IN)>>=
${DOC}/pgrobner.spad.dvi: ${IN}/pgrobner.spad.pamphlet
	@ echo 0 making ${DOC}/pgrobner.spad.dvi from ${IN}/pgrobner.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pgrobner.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pgrobner.spad ; \
	rm -f ${DOC}/pgrobner.spad.pamphlet ; \
	rm -f ${DOC}/pgrobner.spad.tex ; \
	rm -f ${DOC}/pgrobner.spad )

@
\subsection{pinterp.spad \cite{1}}
<<pinterp.spad (SPAD from IN)>>=
${MID}/pinterp.spad: ${IN}/pinterp.spad.pamphlet
	@ echo 0 making ${MID}/pinterp.spad from ${IN}/pinterp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pinterp.spad.pamphlet >pinterp.spad )

@
<<PINTERP.o (O from NRLIB)>>=
${OUT}/PINTERP.o: ${MID}/PINTERP.NRLIB
	@ echo 0 making ${OUT}/PINTERP.o from ${MID}/PINTERP.NRLIB
	@ cp ${MID}/PINTERP.NRLIB/code.o ${OUT}/PINTERP.o

@
<<PINTERP.NRLIB (NRLIB from MID)>>=
${MID}/PINTERP.NRLIB: ${MID}/PINTERP.spad
	@ echo 0 making ${MID}/PINTERP.NRLIB from ${MID}/PINTERP.spad
	@ (cd ${MID} ; 	echo ')co PINTERP.spad' | ${INTERPSYS} )

@
<<PINTERP.spad (SPAD from IN)>>=
${MID}/PINTERP.spad: ${IN}/pinterp.spad.pamphlet
	@ echo 0 making ${MID}/PINTERP.spad from ${IN}/pinterp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PINTERP.NRLIB ; \
	${SPADBIN}/notangle -R"package PINTERP PolynomialInterpolation" ${IN}/pinterp.spad.pamphlet >PINTERP.spad )

@
<<PINTERPA.o (O from NRLIB)>>=
${OUT}/PINTERPA.o: ${MID}/PINTERPA.NRLIB
	@ echo 0 making ${OUT}/PINTERPA.o from ${MID}/PINTERPA.NRLIB
	@ cp ${MID}/PINTERPA.NRLIB/code.o ${OUT}/PINTERPA.o

@
<<PINTERPA.NRLIB (NRLIB from MID)>>=
${MID}/PINTERPA.NRLIB: ${MID}/PINTERPA.spad
	@ echo 0 making ${MID}/PINTERPA.NRLIB from ${MID}/PINTERPA.spad
	@ (cd ${MID} ; 	echo ')co PINTERPA.spad' | ${INTERPSYS} )

@
<<PINTERPA.spad (SPAD from IN)>>=
${MID}/PINTERPA.spad: ${IN}/pinterp.spad.pamphlet
	@ echo 0 making ${MID}/PINTERPA.spad from ${IN}/pinterp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PINTERPA.NRLIB ; \
	${SPADBIN}/notangle -R"package PINTERPA PolynomialInterpolationAlgorithms" ${IN}/pinterp.spad.pamphlet >PINTERPA.spad )

@
<<pinterp.spad.dvi (DOC from IN)>>=
${DOC}/pinterp.spad.dvi: ${IN}/pinterp.spad.pamphlet
	@ echo 0 making ${DOC}/pinterp.spad.dvi from ${IN}/pinterp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pinterp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pinterp.spad ; \
	rm -f ${DOC}/pinterp.spad.pamphlet ; \
	rm -f ${DOC}/pinterp.spad.tex ; \
	rm -f ${DOC}/pinterp.spad )

@
\subsection{pleqn.spad \cite{1}}
<<pleqn.spad (SPAD from IN)>>=
${MID}/pleqn.spad: ${IN}/pleqn.spad.pamphlet
	@ echo 0 making ${MID}/pleqn.spad from ${IN}/pleqn.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pleqn.spad.pamphlet >pleqn.spad )

@
<<PLEQN.o (O from NRLIB)>>=
${OUT}/PLEQN.o: ${MID}/PLEQN.NRLIB
	@ echo 0 making ${OUT}/PLEQN.o from ${MID}/PLEQN.NRLIB
	@ cp ${MID}/PLEQN.NRLIB/code.o ${OUT}/PLEQN.o

@
<<PLEQN.NRLIB (NRLIB from MID)>>=
${MID}/PLEQN.NRLIB: ${MID}/PLEQN.spad
	@ echo 0 making ${MID}/PLEQN.NRLIB from ${MID}/PLEQN.spad
	@ (cd ${MID} ; 	echo ')co PLEQN.spad' | ${INTERPSYS} )

@
<<PLEQN.spad (SPAD from IN)>>=
${MID}/PLEQN.spad: ${IN}/pleqn.spad.pamphlet
	@ echo 0 making ${MID}/PLEQN.spad from ${IN}/pleqn.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PLEQN.NRLIB ; \
	${SPADBIN}/notangle -R"package PLEQN ParametricLinearEquations" ${IN}/pleqn.spad.pamphlet >PLEQN.spad )

@
<<pleqn.spad.dvi (DOC from IN)>>=
${DOC}/pleqn.spad.dvi: ${IN}/pleqn.spad.pamphlet
	@ echo 0 making ${DOC}/pleqn.spad.dvi from ${IN}/pleqn.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pleqn.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pleqn.spad ; \
	rm -f ${DOC}/pleqn.spad.pamphlet ; \
	rm -f ${DOC}/pleqn.spad.tex ; \
	rm -f ${DOC}/pleqn.spad )

@
\subsection{plot3d.spad \cite{1}}
<<plot3d.spad (SPAD from IN)>>=
${MID}/plot3d.spad: ${IN}/plot3d.spad.pamphlet
	@ echo 0 making ${MID}/plot3d.spad from ${IN}/plot3d.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/plot3d.spad.pamphlet >plot3d.spad )

@
<<PLOT3D.o (O from NRLIB)>>=
${OUT}/PLOT3D.o: ${MID}/PLOT3D.NRLIB
	@ echo 0 making ${OUT}/PLOT3D.o from ${MID}/PLOT3D.NRLIB
	@ cp ${MID}/PLOT3D.NRLIB/code.o ${OUT}/PLOT3D.o

@
<<PLOT3D.NRLIB (NRLIB from MID)>>=
${MID}/PLOT3D.NRLIB: ${MID}/PLOT3D.spad
	@ echo 0 making ${MID}/PLOT3D.NRLIB from ${MID}/PLOT3D.spad
	@ (cd ${MID} ; 	echo ')co PLOT3D.spad' | ${INTERPSYS} )

@
<<PLOT3D.spad (SPAD from IN)>>=
${MID}/PLOT3D.spad: ${IN}/plot3d.spad.pamphlet
	@ echo 0 making ${MID}/PLOT3D.spad from ${IN}/plot3d.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PLOT3D.NRLIB ; \
	${SPADBIN}/notangle -R"domain PLOT3D Plot3D" ${IN}/plot3d.spad.pamphlet >PLOT3D.spad )

@
<<plot3d.spad.dvi (DOC from IN)>>=
${DOC}/plot3d.spad.dvi: ${IN}/plot3d.spad.pamphlet
	@ echo 0 making ${DOC}/plot3d.spad.dvi from ${IN}/plot3d.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/plot3d.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} plot3d.spad ; \
	rm -f ${DOC}/plot3d.spad.pamphlet ; \
	rm -f ${DOC}/plot3d.spad.tex ; \
	rm -f ${DOC}/plot3d.spad )

@
\subsection{plot.spad \cite{1}}
<<plot.spad (SPAD from IN)>>=
${MID}/plot.spad: ${IN}/plot.spad.pamphlet
	@ echo 0 making ${MID}/plot.spad from ${IN}/plot.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/plot.spad.pamphlet >plot.spad )

@
<<PLOT1.o (O from NRLIB)>>=
${OUT}/PLOT1.o: ${MID}/PLOT1.NRLIB
	@ echo 0 making ${OUT}/PLOT1.o from ${MID}/PLOT1.NRLIB
	@ cp ${MID}/PLOT1.NRLIB/code.o ${OUT}/PLOT1.o

@
<<PLOT1.NRLIB (NRLIB from MID)>>=
${MID}/PLOT1.NRLIB: ${OUT}/KONVERT.o ${MID}/PLOT1.spad
	@ echo 0 making ${MID}/PLOT1.NRLIB from ${MID}/PLOT1.spad
	@ (cd ${MID} ; 	echo ')co PLOT1.spad' | ${INTERPSYS} )

@
<<PLOT1.spad (SPAD from IN)>>=
${MID}/PLOT1.spad: ${IN}/plot.spad.pamphlet
	@ echo 0 making ${MID}/PLOT1.spad from ${IN}/plot.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PLOT1.NRLIB ; \
	${SPADBIN}/notangle -R"package PLOT1 PlotFunctions1" ${IN}/plot.spad.pamphlet >PLOT1.spad )

@
<<PLOT.o (O from NRLIB)>>=
${OUT}/PLOT.o: ${MID}/PLOT.NRLIB
	@ echo 0 making ${OUT}/PLOT.o from ${MID}/PLOT.NRLIB
	@ cp ${MID}/PLOT.NRLIB/code.o ${OUT}/PLOT.o

@
<<PLOT.NRLIB (NRLIB from MID)>>=
${MID}/PLOT.NRLIB: ${OUT}/KONVERT.o ${MID}/PLOT.spad
	@ echo 0 making ${MID}/PLOT.NRLIB from ${MID}/PLOT.spad
	@ (cd ${MID} ; 	echo ')co PLOT.spad' | ${INTERPSYS} )

@
<<PLOT.spad (SPAD from IN)>>=
${MID}/PLOT.spad: ${IN}/plot.spad.pamphlet
	@ echo 0 making ${MID}/PLOT.spad from ${IN}/plot.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PLOT.NRLIB ; \
	${SPADBIN}/notangle -R"domain PLOT Plot" ${IN}/plot.spad.pamphlet >PLOT.spad )

@
<<plot.spad.dvi (DOC from IN)>>=
${DOC}/plot.spad.dvi: ${IN}/plot.spad.pamphlet
	@ echo 0 making ${DOC}/plot.spad.dvi from ${IN}/plot.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/plot.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} plot.spad ; \
	rm -f ${DOC}/plot.spad.pamphlet ; \
	rm -f ${DOC}/plot.spad.tex ; \
	rm -f ${DOC}/plot.spad )

@
\subsection{plottool.spad \cite{1}}
<<plottool.spad (SPAD from IN)>>=
${MID}/plottool.spad: ${IN}/plottool.spad.pamphlet
	@ echo 0 making ${MID}/plottool.spad from ${IN}/plottool.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/plottool.spad.pamphlet >plottool.spad )

@
<<PLOTTOOL.o (O from NRLIB)>>=
${OUT}/PLOTTOOL.o: ${MID}/PLOTTOOL.NRLIB
	@ echo 0 making ${OUT}/PLOTTOOL.o from ${MID}/PLOTTOOL.NRLIB
	@ cp ${MID}/PLOTTOOL.NRLIB/code.o ${OUT}/PLOTTOOL.o

@
<<PLOTTOOL.NRLIB (NRLIB from MID)>>=
${MID}/PLOTTOOL.NRLIB: ${MID}/PLOTTOOL.spad
	@ echo 0 making ${MID}/PLOTTOOL.NRLIB from ${MID}/PLOTTOOL.spad
	@ (cd ${MID} ; 	echo ')co PLOTTOOL.spad' | ${INTERPSYS} )

@
<<PLOTTOOL.spad (SPAD from IN)>>=
${MID}/PLOTTOOL.spad: ${IN}/plottool.spad.pamphlet
	@ echo 0 making ${MID}/PLOTTOOL.spad from ${IN}/plottool.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PLOTTOOL.NRLIB ; \
	${SPADBIN}/notangle -R"package PLOTTOOL PlotTools" ${IN}/plottool.spad.pamphlet >PLOTTOOL.spad )

@
<<plottool.spad.dvi (DOC from IN)>>=
${DOC}/plottool.spad.dvi: ${IN}/plottool.spad.pamphlet
	@ echo 0 making ${DOC}/plottool.spad.dvi from ${IN}/plottool.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/plottool.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} plottool.spad ; \
	rm -f ${DOC}/plottool.spad.pamphlet ; \
	rm -f ${DOC}/plottool.spad.tex ; \
	rm -f ${DOC}/plottool.spad )

@
\subsection{polset.spad \cite{1}}
<<polset.spad (SPAD from IN)>>=
${MID}/polset.spad: ${IN}/polset.spad.pamphlet
	@ echo 0 making ${MID}/polset.spad from ${IN}/polset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/polset.spad.pamphlet >polset.spad )

@
<<GPOLSET.o (O from NRLIB)>>=
${OUT}/GPOLSET.o: ${MID}/GPOLSET.NRLIB
	@ echo 0 making ${OUT}/GPOLSET.o from ${MID}/GPOLSET.NRLIB
	@ cp ${MID}/GPOLSET.NRLIB/code.o ${OUT}/GPOLSET.o

@
<<GPOLSET.NRLIB (NRLIB from MID)>>=
${MID}/GPOLSET.NRLIB: ${MID}/GPOLSET.spad
	@ echo 0 making ${MID}/GPOLSET.NRLIB from ${MID}/GPOLSET.spad
	@ (cd ${MID} ; 	echo ')co GPOLSET.spad' | ${INTERPSYS} )

@
<<GPOLSET.spad (SPAD from IN)>>=
${MID}/GPOLSET.spad: ${IN}/polset.spad.pamphlet
	@ echo 0 making ${MID}/GPOLSET.spad from ${IN}/polset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GPOLSET.NRLIB ; \
	${SPADBIN}/notangle -R"domain GPOLSET GeneralPolynomialSet" ${IN}/polset.spad.pamphlet >GPOLSET.spad )

@
<<PSETCAT-.o (O from NRLIB)>>=
${OUT}/PSETCAT-.o: ${MID}/PSETCAT.NRLIB
	@ echo 0 making ${OUT}/PSETCAT-.o from ${MID}/PSETCAT-.NRLIB
	@ cp ${MID}/PSETCAT-.NRLIB/code.o ${OUT}/PSETCAT-.o

@
<<PSETCAT-.NRLIB (NRLIB from MID)>>=
${MID}/PSETCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/PSETCAT.spad 
	@ echo 0 making ${MID}/PSETCAT-.NRLIB from ${MID}/PSETCAT.spad
	@ (cd ${MID} ; 	echo ')co PSETCAT.spad' | ${INTERPSYS} )

@
<<PSETCAT.o (O from NRLIB)>>=
${OUT}/PSETCAT.o: ${MID}/PSETCAT.NRLIB
	@ echo 0 making ${OUT}/PSETCAT.o from ${MID}/PSETCAT.NRLIB
	@ cp ${MID}/PSETCAT.NRLIB/code.o ${OUT}/PSETCAT.o

@
<<PSETCAT.NRLIB (NRLIB from MID)>>=
${MID}/PSETCAT.NRLIB: ${MID}/PSETCAT.spad
	@ echo 0 making ${MID}/PSETCAT.NRLIB from ${MID}/PSETCAT.spad
	@ (cd ${MID} ; 	echo ')co PSETCAT.spad' | ${INTERPSYS} )

@
<<PSETCAT.spad (SPAD from IN)>>=
${MID}/PSETCAT.spad: ${IN}/polset.spad.pamphlet
	@ echo 0 making ${MID}/PSETCAT.spad from ${IN}/polset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSETCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PSETCAT PolynomialSetCategory" ${IN}/polset.spad.pamphlet >PSETCAT.spad )

@
<<PSETCAT-.o (BOOTSTRAP from MID)>>=
${MID}/PSETCAT-.o: ${MID}/PSETCAT-.lsp 
	@ echo 0 making ${MID}/PSETCAT-.o from ${MID}/PSETCAT-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "PSETCAT-.lsp" :output-file "PSETCAT-.o"))' | ${DEPSYS} )
	@ cp ${MID}/PSETCAT-.o ${OUT}/PSETCAT-.o

@
<<PSETCAT-.lsp (LISP from IN)>>=
${MID}/PSETCAT-.lsp: ${IN}/polset.spad.pamphlet
	@ echo 0 making ${MID}/PSETCAT-.lsp from ${IN}/polset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSETCAT-.NRLIB ; \
	rm -rf ${OUT}/PSETCAT-.o ; \
	${SPADBIN}/notangle -R"PSETCAT-.lsp BOOTSTRAP" ${IN}/polset.spad.pamphlet >PSETCAT-.lsp )

@
<<PSETCAT.o (BOOTSTRAP from MID)>>=
${MID}/PSETCAT.o: ${MID}/PSETCAT.lsp 
	@ echo 0 making ${MID}/PSETCAT.o from ${MID}/PSETCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "PSETCAT.lsp" :output-file "PSETCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/PSETCAT.o ${OUT}/PSETCAT.o

@
<<PSETCAT.lsp (LISP from IN)>>=
${MID}/PSETCAT.lsp: ${IN}/polset.spad.pamphlet
	@ echo 0 making ${MID}/PSETCAT.lsp from ${IN}/polset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSETCAT.NRLIB ; \
	rm -rf ${OUT}/PSETCAT.o ; \
	${SPADBIN}/notangle -R"PSETCAT.lsp BOOTSTRAP" ${IN}/polset.spad.pamphlet >PSETCAT.lsp )

@
<<polset.spad.dvi (DOC from IN)>>=
${DOC}/polset.spad.dvi: ${IN}/polset.spad.pamphlet
	@ echo 0 making ${DOC}/polset.spad.dvi from ${IN}/polset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/polset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} polset.spad ; \
	rm -f ${DOC}/polset.spad.pamphlet ; \
	rm -f ${DOC}/polset.spad.tex ; \
	rm -f ${DOC}/polset.spad )

@
\subsection{poltopol.spad \cite{1}}
<<poltopol.spad (SPAD from IN)>>=
${MID}/poltopol.spad: ${IN}/poltopol.spad.pamphlet
	@ echo 0 making ${MID}/poltopol.spad from ${IN}/poltopol.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/poltopol.spad.pamphlet >poltopol.spad )

@
<<MPC2.o (O from NRLIB)>>=
${OUT}/MPC2.o: ${MID}/MPC2.NRLIB
	@ echo 0 making ${OUT}/MPC2.o from ${MID}/MPC2.NRLIB
	@ cp ${MID}/MPC2.NRLIB/code.o ${OUT}/MPC2.o

@
<<MPC2.NRLIB (NRLIB from MID)>>=
${MID}/MPC2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MPC2.spad
	@ echo 0 making ${MID}/MPC2.NRLIB from ${MID}/MPC2.spad
	@ (cd ${MID} ; 	echo ')co MPC2.spad' | ${INTERPSYS} )

@
<<MPC2.spad (SPAD from IN)>>=
${MID}/MPC2.spad: ${IN}/poltopol.spad.pamphlet
	@ echo 0 making ${MID}/MPC2.spad from ${IN}/poltopol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MPC2.NRLIB ; \
	${SPADBIN}/notangle -R"package MPC2 MPolyCatFunctions2" ${IN}/poltopol.spad.pamphlet >MPC2.spad )

@
<<MPC3.o (O from NRLIB)>>=
${OUT}/MPC3.o: ${MID}/MPC3.NRLIB
	@ echo 0 making ${OUT}/MPC3.o from ${MID}/MPC3.NRLIB
	@ cp ${MID}/MPC3.NRLIB/code.o ${OUT}/MPC3.o

@
<<MPC3.NRLIB (NRLIB from MID)>>=
${MID}/MPC3.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/MPC3.spad
	@ echo 0 making ${MID}/MPC3.NRLIB from ${MID}/MPC3.spad
	@ (cd ${MID} ; 	echo ')co MPC3.spad' | ${INTERPSYS} )

@
<<MPC3.spad (SPAD from IN)>>=
${MID}/MPC3.spad: ${IN}/poltopol.spad.pamphlet
	@ echo 0 making ${MID}/MPC3.spad from ${IN}/poltopol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MPC3.NRLIB ; \
	${SPADBIN}/notangle -R"package MPC3 MPolyCatFunctions3" ${IN}/poltopol.spad.pamphlet >MPC3.spad )

@
<<POLTOPOL.o (O from NRLIB)>>=
${OUT}/POLTOPOL.o: ${MID}/POLTOPOL.NRLIB
	@ echo 0 making ${OUT}/POLTOPOL.o from ${MID}/POLTOPOL.NRLIB
	@ cp ${MID}/POLTOPOL.NRLIB/code.o ${OUT}/POLTOPOL.o

@
<<POLTOPOL.NRLIB (NRLIB from MID)>>=
${MID}/POLTOPOL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLTOPOL.spad
	@ echo 0 making ${MID}/POLTOPOL.NRLIB from ${MID}/POLTOPOL.spad
	@ (cd ${MID} ; 	echo ')co POLTOPOL.spad' | ${INTERPSYS} )

@
<<POLTOPOL.spad (SPAD from IN)>>=
${MID}/POLTOPOL.spad: ${IN}/poltopol.spad.pamphlet
	@ echo 0 making ${MID}/POLTOPOL.spad from ${IN}/poltopol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLTOPOL.NRLIB ; \
	${SPADBIN}/notangle -R"package POLTOPOL PolToPol" ${IN}/poltopol.spad.pamphlet >POLTOPOL.spad )

@
<<poltopol.spad.dvi (DOC from IN)>>=
${DOC}/poltopol.spad.dvi: ${IN}/poltopol.spad.pamphlet
	@ echo 0 making ${DOC}/poltopol.spad.dvi from ${IN}/poltopol.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/poltopol.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} poltopol.spad ; \
	rm -f ${DOC}/poltopol.spad.pamphlet ; \
	rm -f ${DOC}/poltopol.spad.tex ; \
	rm -f ${DOC}/poltopol.spad )

@
\subsection{polycat.spad \cite{1}}
<<polycat.spad (SPAD from IN)>>=
${MID}/polycat.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/polycat.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/polycat.spad.pamphlet >polycat.spad )

@
<<AMR-.o (O from NRLIB)>>=
${OUT}/AMR-.o: ${MID}/AMR.NRLIB
	@ echo 0 making ${OUT}/AMR-.o from ${MID}/AMR-.NRLIB
	@ cp ${MID}/AMR-.NRLIB/code.o ${OUT}/AMR-.o

@
<<AMR-.NRLIB (NRLIB from MID)>>=
${MID}/AMR-.NRLIB: ${OUT}/TYPE.o ${MID}/AMR.spad 
	@ echo 0 making ${MID}/AMR-.NRLIB from ${MID}/AMR.spad
	@ (cd ${MID} ; 	echo ')co AMR.spad' | ${INTERPSYS} )

@
<<AMR.o (O from NRLIB)>>=
${OUT}/AMR.o: ${MID}/AMR.NRLIB
	@ echo 0 making ${OUT}/AMR.o from ${MID}/AMR.NRLIB
	@ cp ${MID}/AMR.NRLIB/code.o ${OUT}/AMR.o

@
<<AMR.NRLIB (NRLIB from MID)>>=
${MID}/AMR.NRLIB: ${MID}/AMR.spad
	@ echo 0 making ${MID}/AMR.NRLIB from ${MID}/AMR.spad
	@ (cd ${MID} ; 	echo ')co AMR.spad' | ${INTERPSYS} )

@
<<AMR.spad (SPAD from IN)>>=
${MID}/AMR.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/AMR.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf AMR.NRLIB ; \
	${SPADBIN}/notangle -R"category AMR AbelianMonoidRing" ${IN}/polycat.spad.pamphlet >AMR.spad )

@
<<COMMUPC.o (O from NRLIB)>>=
${OUT}/COMMUPC.o: ${MID}/COMMUPC.NRLIB
	@ echo 0 making ${OUT}/COMMUPC.o from ${MID}/COMMUPC.NRLIB
	@ cp ${MID}/COMMUPC.NRLIB/code.o ${OUT}/COMMUPC.o

@
<<COMMUPC.NRLIB (NRLIB from MID)>>=
${MID}/COMMUPC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/COMMUPC.spad
	@ echo 0 making ${MID}/COMMUPC.NRLIB from ${MID}/COMMUPC.spad
	@ (cd ${MID} ; 	echo ')co COMMUPC.spad' | ${INTERPSYS} )

@
<<COMMUPC.spad (SPAD from IN)>>=
${MID}/COMMUPC.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/COMMUPC.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf COMMUPC.NRLIB ; \
	${SPADBIN}/notangle -R"package COMMUPC CommuteUnivariatePolynomialCategory" ${IN}/polycat.spad.pamphlet >COMMUPC.spad )

@
<<FAMR-.o (O from NRLIB)>>=
${OUT}/FAMR-.o: ${MID}/FAMR.NRLIB
	@ echo 0 making ${OUT}/FAMR-.o from ${MID}/FAMR-.NRLIB
	@ cp ${MID}/FAMR-.NRLIB/code.o ${OUT}/FAMR-.o

@
<<FAMR-.NRLIB (NRLIB from MID)>>=
${MID}/FAMR-.NRLIB: ${OUT}/TYPE.o ${MID}/FAMR.spad 
	@ echo 0 making ${MID}/FAMR-.NRLIB from ${MID}/FAMR.spad
	@ (cd ${MID} ; 	echo ')co FAMR.spad' | ${INTERPSYS} )

@
<<FAMR.o (O from NRLIB)>>=
${OUT}/FAMR.o: ${MID}/FAMR.NRLIB
	@ echo 0 making ${OUT}/FAMR.o from ${MID}/FAMR.NRLIB
	@ cp ${MID}/FAMR.NRLIB/code.o ${OUT}/FAMR.o

@
<<FAMR.NRLIB (NRLIB from MID)>>=
${MID}/FAMR.NRLIB: ${MID}/FAMR.spad
	@ echo 0 making ${MID}/FAMR.NRLIB from ${MID}/FAMR.spad
	@ (cd ${MID} ; 	echo ')co FAMR.spad' | ${INTERPSYS} )

@
<<FAMR.spad (SPAD from IN)>>=
${MID}/FAMR.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/FAMR.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FAMR.NRLIB ; \
	${SPADBIN}/notangle -R"category FAMR FiniteAbelianMonoidRing" ${IN}/polycat.spad.pamphlet >FAMR.spad )

@
<<POLYCAT-.o (O from NRLIB)>>=
${OUT}/POLYCAT-.o: ${MID}/POLYCAT.NRLIB
	@ echo 0 making ${OUT}/POLYCAT-.o from ${MID}/POLYCAT-.NRLIB
	@ cp ${MID}/POLYCAT-.NRLIB/code.o ${OUT}/POLYCAT-.o

@
<<POLYCAT-.NRLIB (NRLIB from MID)>>=
${MID}/POLYCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/POLYCAT.spad 
	@ echo 0 making ${MID}/POLYCAT-.NRLIB from ${MID}/POLYCAT.spad
	@ (cd ${MID} ; 	echo ')co POLYCAT.spad' | ${INTERPSYS} )

@
<<POLYCAT.o (O from NRLIB)>>=
${OUT}/POLYCAT.o: ${MID}/POLYCAT.NRLIB
	@ echo 0 making ${OUT}/POLYCAT.o from ${MID}/POLYCAT.NRLIB
	@ cp ${MID}/POLYCAT.NRLIB/code.o ${OUT}/POLYCAT.o

@
<<POLYCAT.NRLIB (NRLIB from MID)>>=
${MID}/POLYCAT.NRLIB: ${MID}/POLYCAT.spad
	@ echo 0 making ${MID}/POLYCAT.NRLIB from ${MID}/POLYCAT.spad
	@ (cd ${MID} ; 	echo ')co POLYCAT.spad' | ${INTERPSYS} )

@
<<POLYCAT.spad (SPAD from IN)>>=
${MID}/POLYCAT.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/POLYCAT.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLYCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category POLYCAT PolynomialCategory" ${IN}/polycat.spad.pamphlet >POLYCAT.spad )

@
<<POLYCAT-.o (BOOTSTRAP from MID)>>=
${MID}/POLYCAT-.o: ${MID}/POLYCAT-.lsp 
	@ echo 0 making ${MID}/POLYCAT-.o from ${MID}/POLYCAT-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "POLYCAT-.lsp" :output-file "POLYCAT-.o"))' | ${DEPSYS} )
	@ cp ${MID}/POLYCAT-.o ${OUT}/POLYCAT-.o

@
<<POLYCAT-.lsp (LISP from IN)>>=
${MID}/POLYCAT-.lsp: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/POLYCAT-.lsp from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLYCAT-.NRLIB ; \
	rm -rf ${OUT}/POLYCAT-.o ; \
	${SPADBIN}/notangle -R"POLYCAT-.lsp BOOTSTRAP" ${IN}/polycat.spad.pamphlet >POLYCAT-.lsp )

@
<<POLYCAT.o (BOOTSTRAP from MID)>>=
${MID}/POLYCAT.o: ${MID}/POLYCAT.lsp
	@ echo 0 making ${MID}/POLYCAT.o from ${MID}/POLYCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "POLYCAT.lsp" :output-file "POLYCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/POLYCAT.o ${OUT}/POLYCAT.o

@
<<POLYCAT.lsp (LISP from IN)>>=
${MID}/POLYCAT.lsp: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/POLYCAT.lsp from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLYCAT.NRLIB ; \
	rm -rf ${OUT}/POLYCAT.o ; \
	${SPADBIN}/notangle -R"POLYCAT.lsp BOOTSTRAP" ${IN}/polycat.spad.pamphlet >POLYCAT.lsp )

@
<<POLYLIFT.o (O from NRLIB)>>=
${OUT}/POLYLIFT.o: ${MID}/POLYLIFT.NRLIB
	@ echo 0 making ${OUT}/POLYLIFT.o from ${MID}/POLYLIFT.NRLIB
	@ cp ${MID}/POLYLIFT.NRLIB/code.o ${OUT}/POLYLIFT.o

@
<<POLYLIFT.NRLIB (NRLIB from MID)>>=
${MID}/POLYLIFT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLYLIFT.spad
	@ echo 0 making ${MID}/POLYLIFT.NRLIB from ${MID}/POLYLIFT.spad
	@ (cd ${MID} ; 	echo ')co POLYLIFT.spad' | ${INTERPSYS} )

@
<<POLYLIFT.spad (SPAD from IN)>>=
${MID}/POLYLIFT.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/POLYLIFT.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLYLIFT.NRLIB ; \
	${SPADBIN}/notangle -R"package POLYLIFT PolynomialCategoryLifting" ${IN}/polycat.spad.pamphlet >POLYLIFT.spad )

@
<<UPOLYC-.o (O from NRLIB)>>=
${OUT}/UPOLYC-.o: ${MID}/UPOLYC.NRLIB
	@ echo 0 making ${OUT}/UPOLYC-.o from ${MID}/UPOLYC-.NRLIB
	@ cp ${MID}/UPOLYC-.NRLIB/code.o ${OUT}/UPOLYC-.o

@
<<UPOLYC-.NRLIB (NRLIB from MID)>>=
${MID}/UPOLYC-.NRLIB: ${OUT}/TYPE.o ${MID}/UPOLYC.spad 
	@ echo 0 making ${MID}/UPOLYC-.NRLIB from ${MID}/UPOLYC.spad
	@ (cd ${MID} ; 	echo ')co UPOLYC.spad' | ${INTERPSYS} )

@
<<UPOLYC.o (O from NRLIB)>>=
${OUT}/UPOLYC.o: ${MID}/UPOLYC.NRLIB
	@ echo 0 making ${OUT}/UPOLYC.o from ${MID}/UPOLYC.NRLIB
	@ cp ${MID}/UPOLYC.NRLIB/code.o ${OUT}/UPOLYC.o

@
<<UPOLYC.NRLIB (NRLIB from MID)>>=
${MID}/UPOLYC.NRLIB: ${MID}/UPOLYC.spad
	@ echo 0 making ${MID}/UPOLYC.NRLIB from ${MID}/UPOLYC.spad
	@ (cd ${MID} ; 	echo ')co UPOLYC.spad' | ${INTERPSYS} )

@
<<UPOLYC.spad (SPAD from IN)>>=
${MID}/UPOLYC.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/UPOLYC.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPOLYC.NRLIB ; \
	${SPADBIN}/notangle -R"category UPOLYC UnivariatePolynomialCategory" ${IN}/polycat.spad.pamphlet >UPOLYC.spad )

@
<<UPOLYC-.o (BOOTSTRAP from MID)>>=
${MID}/UPOLYC-.o: ${MID}/UPOLYC-.lsp 
	@ echo 0 making ${MID}/UPOLYC-.o from ${MID}/UPOLYC-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "UPOLYC-.lsp" :output-file "UPOLYC-.o"))' | ${DEPSYS} )
	@ cp ${MID}/UPOLYC-.o ${OUT}/UPOLYC-.o

@
<<UPOLYC-.lsp (LISP from IN)>>=
${MID}/UPOLYC-.lsp: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/UPOLYC-.lsp from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPOLYC-.NRLIB ; \
	rm -rf ${OUT}/UPOLYC-.o ; \
	${SPADBIN}/notangle -R"UPOLYC-.lsp BOOTSTRAP" ${IN}/polycat.spad.pamphlet >UPOLYC-.lsp )

@
<<UPOLYC.o (BOOTSTRAP from MID)>>=
${MID}/UPOLYC.o: ${MID}/UPOLYC.lsp
	@ echo 0 making ${MID}/UPOLYC.o from ${MID}/UPOLYC.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "UPOLYC.lsp" :output-file "UPOLYC.o"))' | ${DEPSYS} )
	@ cp ${MID}/UPOLYC.o ${OUT}/UPOLYC.o

@
<<UPOLYC.lsp (LISP from IN)>>=
${MID}/UPOLYC.lsp: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/UPOLYC.lsp from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPOLYC.NRLIB ; \
	rm -rf ${OUT}/UPOLYC.o ; \
	${SPADBIN}/notangle -R"UPOLYC.lsp BOOTSTRAP" ${IN}/polycat.spad.pamphlet >UPOLYC.lsp )

@
<<UPOLYC2.o (O from NRLIB)>>=
${OUT}/UPOLYC2.o: ${MID}/UPOLYC2.NRLIB
	@ echo 0 making ${OUT}/UPOLYC2.o from ${MID}/UPOLYC2.NRLIB
	@ cp ${MID}/UPOLYC2.NRLIB/code.o ${OUT}/UPOLYC2.o

@
<<UPOLYC2.NRLIB (NRLIB from MID)>>=
${MID}/UPOLYC2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UPOLYC2.spad
	@ echo 0 making ${MID}/UPOLYC2.NRLIB from ${MID}/UPOLYC2.spad
	@ (cd ${MID} ; 	echo ')co UPOLYC2.spad' | ${INTERPSYS} )

@
<<UPOLYC2.spad (SPAD from IN)>>=
${MID}/UPOLYC2.spad: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${MID}/UPOLYC2.spad from ${IN}/polycat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPOLYC2.NRLIB ; \
	${SPADBIN}/notangle -R"package UPOLYC2 UnivariatePolynomialCategoryFunctions2" ${IN}/polycat.spad.pamphlet >UPOLYC2.spad )

@
<<polycat.spad.dvi (DOC from IN)>>=
${DOC}/polycat.spad.dvi: ${IN}/polycat.spad.pamphlet
	@ echo 0 making ${DOC}/polycat.spad.dvi from ${IN}/polycat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/polycat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} polycat.spad ; \
	rm -f ${DOC}/polycat.spad.pamphlet ; \
	rm -f ${DOC}/polycat.spad.tex ; \
	rm -f ${DOC}/polycat.spad )

@
\subsection{poly.spad \cite{1}}
<<poly.spad (SPAD from IN)>>=
${MID}/poly.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/poly.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/poly.spad.pamphlet >poly.spad )

@
<<FM.o (O from NRLIB)>>=
${OUT}/FM.o: ${MID}/FM.NRLIB
	@ echo 0 making ${OUT}/FM.o from ${MID}/FM.NRLIB
	@ cp ${MID}/FM.NRLIB/code.o ${OUT}/FM.o

@
<<FM.NRLIB (NRLIB from MID)>>=
${MID}/FM.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FM.spad
	@ echo 0 making ${MID}/FM.NRLIB from ${MID}/FM.spad
	@ (cd ${MID} ; 	echo ')co FM.spad' | ${INTERPSYS} )

@
<<FM.spad (SPAD from IN)>>=
${MID}/FM.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/FM.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FM.NRLIB ; \
	${SPADBIN}/notangle -R"domain FM FreeModule" ${IN}/poly.spad.pamphlet >FM.spad )

@
<<POLY2UP.o (O from NRLIB)>>=
${OUT}/POLY2UP.o: ${MID}/POLY2UP.NRLIB
	@ echo 0 making ${OUT}/POLY2UP.o from ${MID}/POLY2UP.NRLIB
	@ cp ${MID}/POLY2UP.NRLIB/code.o ${OUT}/POLY2UP.o

@
<<POLY2UP.NRLIB (NRLIB from MID)>>=
${MID}/POLY2UP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLY2UP.spad
	@ echo 0 making ${MID}/POLY2UP.NRLIB from ${MID}/POLY2UP.spad
	@ (cd ${MID} ; 	echo ')co POLY2UP.spad' | ${INTERPSYS} )

@
<<POLY2UP.spad (SPAD from IN)>>=
${MID}/POLY2UP.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/POLY2UP.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLY2UP.NRLIB ; \
	${SPADBIN}/notangle -R"package POLY2UP PolynomialToUnivariatePolynomial" ${IN}/poly.spad.pamphlet >POLY2UP.spad )

@
<<PR.o (O from NRLIB)>>=
${OUT}/PR.o: ${MID}/PR.NRLIB
	@ echo 0 making ${OUT}/PR.o from ${MID}/PR.NRLIB
	@ cp ${MID}/PR.NRLIB/code.o ${OUT}/PR.o

@
<<PR.NRLIB (NRLIB from MID)>>=
${MID}/PR.NRLIB: ${MID}/PR.spad
	@ echo 0 making ${MID}/PR.NRLIB from ${MID}/PR.spad
	@ (cd ${MID} ; 	echo ')co PR.spad' | ${INTERPSYS} )

@
<<PR.spad (SPAD from IN)>>=
${MID}/PR.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/PR.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PR.NRLIB ; \
	${SPADBIN}/notangle -R"domain PR PolynomialRing" ${IN}/poly.spad.pamphlet >PR.spad )

@
<<PSQFR.o (O from NRLIB)>>=
${OUT}/PSQFR.o: ${MID}/PSQFR.NRLIB
	@ echo 0 making ${OUT}/PSQFR.o from ${MID}/PSQFR.NRLIB
	@ cp ${MID}/PSQFR.NRLIB/code.o ${OUT}/PSQFR.o

@
<<PSQFR.NRLIB (NRLIB from MID)>>=
${MID}/PSQFR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PSQFR.spad
	@ echo 0 making ${MID}/PSQFR.NRLIB from ${MID}/PSQFR.spad
	@ (cd ${MID} ; 	echo ')co PSQFR.spad' | ${INTERPSYS} )

@
<<PSQFR.spad (SPAD from IN)>>=
${MID}/PSQFR.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/PSQFR.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSQFR.NRLIB ; \
	${SPADBIN}/notangle -R"package PSQFR PolynomialSquareFree" ${IN}/poly.spad.pamphlet >PSQFR.spad )

@
<<SUP.o (O from NRLIB)>>=
${OUT}/SUP.o: ${MID}/SUP.NRLIB
	@ echo 0 making ${OUT}/SUP.o from ${MID}/SUP.NRLIB
	@ cp ${MID}/SUP.NRLIB/code.o ${OUT}/SUP.o

@
<<SUP.NRLIB (NRLIB from MID)>>=
${MID}/SUP.NRLIB: ${MID}/SUP.spad
	@ echo 0 making ${MID}/SUP.NRLIB from ${MID}/SUP.spad
	@ (cd ${MID} ; 	echo ')co SUP.spad' | ${INTERPSYS} )

@
<<SUP.spad (SPAD from IN)>>=
${MID}/SUP.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/SUP.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUP.NRLIB ; \
	${SPADBIN}/notangle -R"domain SUP SparseUnivariatePolynomial" ${IN}/poly.spad.pamphlet >SUP.spad )

@
<<SUP2.o (O from NRLIB)>>=
${OUT}/SUP2.o: ${MID}/SUP2.NRLIB
	@ echo 0 making ${OUT}/SUP2.o from ${MID}/SUP2.NRLIB
	@ cp ${MID}/SUP2.NRLIB/code.o ${OUT}/SUP2.o

@
<<SUP2.NRLIB (NRLIB from MID)>>=
${MID}/SUP2.NRLIB: ${MID}/SUP2.spad
	@ echo 0 making ${MID}/SUP2.NRLIB from ${MID}/SUP2.spad
	@ (cd ${MID} ; 	echo ')co SUP2.spad' | ${INTERPSYS} )

@
<<SUP2.spad (SPAD from IN)>>=
${MID}/SUP2.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/SUP2.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUP2.NRLIB ; \
	${SPADBIN}/notangle -R"package SUP2 SparseUnivariatePolynomialFunctions2" ${IN}/poly.spad.pamphlet >SUP2.spad )

@
<<UP.o (O from NRLIB)>>=
${OUT}/UP.o: ${MID}/UP.NRLIB
	@ echo 0 making ${OUT}/UP.o from ${MID}/UP.NRLIB
	@ cp ${MID}/UP.NRLIB/code.o ${OUT}/UP.o

@
<<UP.NRLIB (NRLIB from MID)>>=
${MID}/UP.NRLIB: ${MID}/UP.spad
	@ echo 0 making ${MID}/UP.NRLIB from ${MID}/UP.spad
	@ (cd ${MID} ; 	echo ')co UP.spad' | ${INTERPSYS} )

@
<<UP.spad (SPAD from IN)>>=
${MID}/UP.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/UP.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UP.NRLIB ; \
	${SPADBIN}/notangle -R"domain UP UnivariatePolynomial" ${IN}/poly.spad.pamphlet >UP.spad )

@
<<UPMP.o (O from NRLIB)>>=
${OUT}/UPMP.o: ${MID}/UPMP.NRLIB
	@ echo 0 making ${OUT}/UPMP.o from ${MID}/UPMP.NRLIB
	@ cp ${MID}/UPMP.NRLIB/code.o ${OUT}/UPMP.o

@
<<UPMP.NRLIB (NRLIB from MID)>>=
${MID}/UPMP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UPMP.spad
	@ echo 0 making ${MID}/UPMP.NRLIB from ${MID}/UPMP.spad
	@ (cd ${MID} ; 	echo ')co UPMP.spad' | ${INTERPSYS} )

@
<<UPMP.spad (SPAD from IN)>>=
${MID}/UPMP.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/UPMP.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPMP.NRLIB ; \
	${SPADBIN}/notangle -R"package UPMP UnivariatePolynomialMultiplicationPackage" ${IN}/poly.spad.pamphlet >UPMP.spad )

@
<<UP2.o (O from NRLIB)>>=
${OUT}/UP2.o: ${MID}/UP2.NRLIB
	@ echo 0 making ${OUT}/UP2.o from ${MID}/UP2.NRLIB
	@ cp ${MID}/UP2.NRLIB/code.o ${OUT}/UP2.o

@
<<UP2.NRLIB (NRLIB from MID)>>=
${MID}/UP2.NRLIB: ${MID}/UP2.spad
	@ echo 0 making ${MID}/UP2.NRLIB from ${MID}/UP2.spad
	@ (cd ${MID} ; 	echo ')co UP2.spad' | ${INTERPSYS} )

@
<<UP2.spad (SPAD from IN)>>=
${MID}/UP2.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/UP2.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UP2.NRLIB ; \
	${SPADBIN}/notangle -R"package UP2 UnivariatePolynomialFunctions2" ${IN}/poly.spad.pamphlet >UP2.spad )

@
<<UPSQFREE.o (O from NRLIB)>>=
${OUT}/UPSQFREE.o: ${MID}/UPSQFREE.NRLIB
	@ echo 0 making ${OUT}/UPSQFREE.o from ${MID}/UPSQFREE.NRLIB
	@ cp ${MID}/UPSQFREE.NRLIB/code.o ${OUT}/UPSQFREE.o

@
<<UPSQFREE.NRLIB (NRLIB from MID)>>=
${MID}/UPSQFREE.NRLIB: ${MID}/UPSQFREE.spad
	@ echo 0 making ${MID}/UPSQFREE.NRLIB from ${MID}/UPSQFREE.spad
	@ (cd ${MID} ; 	echo ')co UPSQFREE.spad' | ${INTERPSYS} )

@
<<UPSQFREE.spad (SPAD from IN)>>=
${MID}/UPSQFREE.spad: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${MID}/UPSQFREE.spad from ${IN}/poly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPSQFREE.NRLIB ; \
	${SPADBIN}/notangle -R"package UPSQFREE UnivariatePolynomialSquareFree" ${IN}/poly.spad.pamphlet >UPSQFREE.spad )

@
<<poly.spad.dvi (DOC from IN)>>=
${DOC}/poly.spad.dvi: ${IN}/poly.spad.pamphlet
	@ echo 0 making ${DOC}/poly.spad.dvi from ${IN}/poly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/poly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} poly.spad ; \
	rm -f ${DOC}/poly.spad.pamphlet ; \
	rm -f ${DOC}/poly.spad.tex ; \
	rm -f ${DOC}/poly.spad )

@
\subsection{primelt.spad \cite{1}}
<<primelt.spad (SPAD from IN)>>=
${MID}/primelt.spad: ${IN}/primelt.spad.pamphlet
	@ echo 0 making ${MID}/primelt.spad from ${IN}/primelt.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/primelt.spad.pamphlet >primelt.spad )

@
<<FSPRMELT.o (O from NRLIB)>>=
${OUT}/FSPRMELT.o: ${MID}/FSPRMELT.NRLIB
	@ echo 0 making ${OUT}/FSPRMELT.o from ${MID}/FSPRMELT.NRLIB
	@ cp ${MID}/FSPRMELT.NRLIB/code.o ${OUT}/FSPRMELT.o

@
<<FSPRMELT.NRLIB (NRLIB from MID)>>=
${MID}/FSPRMELT.NRLIB: ${MID}/FSPRMELT.spad
	@ echo 0 making ${MID}/FSPRMELT.NRLIB from ${MID}/FSPRMELT.spad
	@ (cd ${MID} ; 	echo ')co FSPRMELT.spad' | ${INTERPSYS} )

@
<<FSPRMELT.spad (SPAD from IN)>>=
${MID}/FSPRMELT.spad: ${IN}/primelt.spad.pamphlet
	@ echo 0 making ${MID}/FSPRMELT.spad from ${IN}/primelt.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FSPRMELT.NRLIB ; \
	${SPADBIN}/notangle -R"package FSPRMELT FunctionSpacePrimitiveElement" ${IN}/primelt.spad.pamphlet >FSPRMELT.spad )

@
<<PRIMELT.o (O from NRLIB)>>=
${OUT}/PRIMELT.o: ${MID}/PRIMELT.NRLIB
	@ echo 0 making ${OUT}/PRIMELT.o from ${MID}/PRIMELT.NRLIB
	@ cp ${MID}/PRIMELT.NRLIB/code.o ${OUT}/PRIMELT.o

@
<<PRIMELT.NRLIB (NRLIB from MID)>>=
${MID}/PRIMELT.NRLIB: ${MID}/PRIMELT.spad
	@ echo 0 making ${MID}/PRIMELT.NRLIB from ${MID}/PRIMELT.spad
	@ (cd ${MID} ; 	echo ')co PRIMELT.spad' | ${INTERPSYS} )

@
<<PRIMELT.spad (SPAD from IN)>>=
${MID}/PRIMELT.spad: ${IN}/primelt.spad.pamphlet
	@ echo 0 making ${MID}/PRIMELT.spad from ${IN}/primelt.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRIMELT.NRLIB ; \
	${SPADBIN}/notangle -R"package PRIMELT PrimitiveElement" ${IN}/primelt.spad.pamphlet >PRIMELT.spad )

@
<<primelt.spad.dvi (DOC from IN)>>=
${DOC}/primelt.spad.dvi: ${IN}/primelt.spad.pamphlet
	@ echo 0 making ${DOC}/primelt.spad.dvi from ${IN}/primelt.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/primelt.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} primelt.spad ; \
	rm -f ${DOC}/primelt.spad.pamphlet ; \
	rm -f ${DOC}/primelt.spad.tex ; \
	rm -f ${DOC}/primelt.spad )

@
\subsection{print.spad \cite{1}}
<<print.spad (SPAD from IN)>>=
${MID}/print.spad: ${IN}/print.spad.pamphlet
	@ echo 0 making ${MID}/print.spad from ${IN}/print.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/print.spad.pamphlet >print.spad )

@
<<PRINT.o (O from NRLIB)>>=
${OUT}/PRINT.o: ${MID}/PRINT.NRLIB
	@ echo 0 making ${OUT}/PRINT.o from ${MID}/PRINT.NRLIB
	@ cp ${MID}/PRINT.NRLIB/code.o ${OUT}/PRINT.o

@
<<PRINT.NRLIB (NRLIB from MID)>>=
${MID}/PRINT.NRLIB: ${MID}/PRINT.spad
	@ echo 0 making ${MID}/PRINT.NRLIB from ${MID}/PRINT.spad
	@ (cd ${MID} ; 	echo ')co PRINT.spad' | ${INTERPSYS} )

@
<<PRINT.spad (SPAD from IN)>>=
${MID}/PRINT.spad: ${IN}/print.spad.pamphlet
	@ echo 0 making ${MID}/PRINT.spad from ${IN}/print.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRINT.NRLIB ; \
	${SPADBIN}/notangle -R"package PRINT PrintPackage" ${IN}/print.spad.pamphlet >PRINT.spad )

@
<<print.spad.dvi (DOC from IN)>>=
${DOC}/print.spad.dvi: ${IN}/print.spad.pamphlet
	@ echo 0 making ${DOC}/print.spad.dvi from ${IN}/print.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/print.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} print.spad ; \
	rm -f ${DOC}/print.spad.pamphlet ; \
	rm -f ${DOC}/print.spad.tex ; \
	rm -f ${DOC}/print.spad )

@
\subsection{product.spad \cite{1}}
<<product.spad (SPAD from IN)>>=
${MID}/product.spad: ${IN}/product.spad.pamphlet
	@ echo 0 making ${MID}/product.spad from ${IN}/product.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/product.spad.pamphlet >product.spad )

@
<<PRODUCT.o (O from NRLIB)>>=
${OUT}/PRODUCT.o: ${MID}/PRODUCT.NRLIB
	@ echo 0 making ${OUT}/PRODUCT.o from ${MID}/PRODUCT.NRLIB
	@ cp ${MID}/PRODUCT.NRLIB/code.o ${OUT}/PRODUCT.o

@
<<PRODUCT.NRLIB (NRLIB from MID)>>=
${MID}/PRODUCT.NRLIB: ${MID}/PRODUCT.spad
	@ echo 0 making ${MID}/PRODUCT.NRLIB from ${MID}/PRODUCT.spad
	@ (cd ${MID} ; 	echo ')co PRODUCT.spad' | ${INTERPSYS} )

@
<<PRODUCT.spad (SPAD from IN)>>=
${MID}/PRODUCT.spad: ${IN}/product.spad.pamphlet
	@ echo 0 making ${MID}/PRODUCT.spad from ${IN}/product.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRODUCT.NRLIB ; \
	${SPADBIN}/notangle -R"domain PRODUCT Product" ${IN}/product.spad.pamphlet >PRODUCT.spad )

@
<<product.spad.dvi (DOC from IN)>>=
${DOC}/product.spad.dvi: ${IN}/product.spad.pamphlet
	@ echo 0 making ${DOC}/product.spad.dvi from ${IN}/product.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/product.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} product.spad ; \
	rm -f ${DOC}/product.spad.pamphlet ; \
	rm -f ${DOC}/product.spad.tex ; \
	rm -f ${DOC}/product.spad )

@
\subsection{prs.spad \cite{1}}
<<prs.spad (SPAD from IN)>>=
${MID}/prs.spad: ${IN}/prs.spad.pamphlet
	@ echo 0 making ${MID}/prs.spad from ${IN}/prs.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/prs.spad.pamphlet >prs.spad )

@
<<PRS.o (O from NRLIB)>>=
${OUT}/PRS.o: ${MID}/PRS.NRLIB
	@ echo 0 making ${OUT}/PRS.o from ${MID}/PRS.NRLIB
	@ cp ${MID}/PRS.NRLIB/code.o ${OUT}/PRS.o

@
<<PRS.NRLIB (NRLIB from MID)>>=
${MID}/PRS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PRS.spad
	@ echo 0 making ${MID}/PRS.NRLIB from ${MID}/PRS.spad
	@ (cd ${MID} ; 	echo ')co PRS.spad' | ${INTERPSYS} )

@
<<PRS.spad (SPAD from IN)>>=
${MID}/PRS.spad: ${IN}/prs.spad.pamphlet
	@ echo 0 making ${MID}/PRS.spad from ${IN}/prs.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRS.NRLIB ; \
	${SPADBIN}/notangle -R"package PRS PseudoRemainderSequence" ${IN}/prs.spad.pamphlet >PRS.spad )

@
<<prs.spad.dvi (DOC from IN)>>=
${DOC}/prs.spad.dvi: ${IN}/prs.spad.pamphlet
	@ echo 0 making ${DOC}/prs.spad.dvi from ${IN}/prs.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/prs.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} prs.spad ; \
	rm -f ${DOC}/prs.spad.pamphlet ; \
	rm -f ${DOC}/prs.spad.tex ; \
	rm -f ${DOC}/prs.spad )

@
\subsection{prtition.spad \cite{1}}
<<prtition.spad (SPAD from IN)>>=
${MID}/prtition.spad: ${IN}/prtition.spad.pamphlet
	@ echo 0 making ${MID}/prtition.spad from ${IN}/prtition.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/prtition.spad.pamphlet >prtition.spad )

@
<<SYMPOLY.o (O from NRLIB)>>=
${OUT}/SYMPOLY.o: ${MID}/SYMPOLY.NRLIB
	@ echo 0 making ${OUT}/SYMPOLY.o from ${MID}/SYMPOLY.NRLIB
	@ cp ${MID}/SYMPOLY.NRLIB/code.o ${OUT}/SYMPOLY.o

@
<<SYMPOLY.NRLIB (NRLIB from MID)>>=
${MID}/SYMPOLY.NRLIB: ${MID}/SYMPOLY.spad
	@ echo 0 making ${MID}/SYMPOLY.NRLIB from ${MID}/SYMPOLY.spad
	@ (cd ${MID} ; 	echo ')co SYMPOLY.spad' | ${INTERPSYS} )

@
<<SYMPOLY.spad (SPAD from IN)>>=
${MID}/SYMPOLY.spad: ${IN}/prtition.spad.pamphlet
	@ echo 0 making ${MID}/SYMPOLY.spad from ${IN}/prtition.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYMPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain SYMPOLY SymmetricPolynomial" ${IN}/prtition.spad.pamphlet >SYMPOLY.spad )

@
<<PRTITION.o (O from NRLIB)>>=
${OUT}/PRTITION.o: ${MID}/PRTITION.NRLIB
	@ echo 0 making ${OUT}/PRTITION.o from ${MID}/PRTITION.NRLIB
	@ cp ${MID}/PRTITION.NRLIB/code.o ${OUT}/PRTITION.o

@
<<PRTITION.NRLIB (NRLIB from MID)>>=
${MID}/PRTITION.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PRTITION.spad
	@ echo 0 making ${MID}/PRTITION.NRLIB from ${MID}/PRTITION.spad
	@ (cd ${MID} ; 	echo ')co PRTITION.spad' | ${INTERPSYS} )

@
<<PRTITION.spad (SPAD from IN)>>=
${MID}/PRTITION.spad: ${IN}/prtition.spad.pamphlet
	@ echo 0 making ${MID}/PRTITION.spad from ${IN}/prtition.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRTITION.NRLIB ; \
	${SPADBIN}/notangle -R"domain PRTITION Partition" ${IN}/prtition.spad.pamphlet >PRTITION.spad )

@
<<prtition.spad.dvi (DOC from IN)>>=
${DOC}/prtition.spad.dvi: ${IN}/prtition.spad.pamphlet
	@ echo 0 making ${DOC}/prtition.spad.dvi from ${IN}/prtition.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/prtition.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} prtition.spad ; \
	rm -f ${DOC}/prtition.spad.pamphlet ; \
	rm -f ${DOC}/prtition.spad.tex ; \
	rm -f ${DOC}/prtition.spad )

@
\subsection{pscat.spad \cite{1}}
<<pscat.spad (SPAD from IN)>>=
${MID}/pscat.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/pscat.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pscat.spad.pamphlet >pscat.spad )

@
<<MTSCAT.o (O from NRLIB)>>=
${OUT}/MTSCAT.o: ${MID}/MTSCAT.NRLIB
	@ echo 0 making ${OUT}/MTSCAT.o from ${MID}/MTSCAT.NRLIB
	@ cp ${MID}/MTSCAT.NRLIB/code.o ${OUT}/MTSCAT.o

@
<<MTSCAT.NRLIB (NRLIB from MID)>>=
${MID}/MTSCAT.NRLIB: ${MID}/MTSCAT.spad
	@ echo 0 making ${MID}/MTSCAT.NRLIB from ${MID}/MTSCAT.spad
	@ (cd ${MID} ; 	echo ')co MTSCAT.spad' | ${INTERPSYS} )

@
<<MTSCAT.spad (SPAD from IN)>>=
${MID}/MTSCAT.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/MTSCAT.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MTSCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category MTSCAT MultivariateTaylorSeriesCategory" ${IN}/pscat.spad.pamphlet >MTSCAT.spad )

@
<<MTSCAT.o (BOOTSTRAP from MID)>>=
${MID}/MTSCAT.o: ${MID}/MTSCAT.lsp
	@ echo 0 making ${MID}/MTSCAT.o from ${MID}/MTSCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "MTSCAT.lsp" :output-file "MTSCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/MTSCAT.o ${OUT}/MTSCAT.o

@
<<MTSCAT.lsp (LISP from IN)>>=
${MID}/MTSCAT.lsp: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/MTSCAT.lsp from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MTSCAT.NRLIB ; \
	rm -rf ${OUT}/MTSCAT.o ; \
	${SPADBIN}/notangle -R"MTSCAT.lsp BOOTSTRAP" ${IN}/pscat.spad.pamphlet >MTSCAT.lsp )

@
<<PSCAT-.o (O from NRLIB)>>=
${OUT}/PSCAT-.o: ${MID}/PSCAT.NRLIB
	@ echo 0 making ${OUT}/PSCAT-.o from ${MID}/PSCAT-.NRLIB
	@ cp ${MID}/PSCAT-.NRLIB/code.o ${OUT}/PSCAT-.o

@
<<PSCAT-.NRLIB (NRLIB from MID)>>=
${MID}/PSCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/PSCAT.spad 
	@ echo 0 making ${MID}/PSCAT-.NRLIB from ${MID}/PSCAT.spad
	@ (cd ${MID} ; 	echo ')co PSCAT.spad' | ${INTERPSYS} )

@
<<PSCAT.o (O from NRLIB)>>=
${OUT}/PSCAT.o: ${MID}/PSCAT.NRLIB
	@ echo 0 making ${OUT}/PSCAT.o from ${MID}/PSCAT.NRLIB
	@ cp ${MID}/PSCAT.NRLIB/code.o ${OUT}/PSCAT.o

@
<<PSCAT.NRLIB (NRLIB from MID)>>=
${MID}/PSCAT.NRLIB: ${MID}/PSCAT.spad
	@ echo 0 making ${MID}/PSCAT.NRLIB from ${MID}/PSCAT.spad
	@ (cd ${MID} ; 	echo ')co PSCAT.spad' | ${INTERPSYS} )

@
<<PSCAT.spad (SPAD from IN)>>=
${MID}/PSCAT.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/PSCAT.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PSCAT PowerSeriesCategory" ${IN}/pscat.spad.pamphlet >PSCAT.spad )

@
<<ULSCAT.o (O from NRLIB)>>=
${OUT}/ULSCAT.o: ${MID}/ULSCAT.NRLIB
	@ echo 0 making ${OUT}/ULSCAT.o from ${MID}/ULSCAT.NRLIB
	@ cp ${MID}/ULSCAT.NRLIB/code.o ${OUT}/ULSCAT.o

@
<<ULSCAT.NRLIB (NRLIB from MID)>>=
${MID}/ULSCAT.NRLIB: ${MID}/ULSCAT.spad
	@ echo 0 making ${MID}/ULSCAT.NRLIB from ${MID}/ULSCAT.spad
	@ (cd ${MID} ; 	echo ')co ULSCAT.spad' | ${INTERPSYS} )

@
<<ULSCAT.spad (SPAD from IN)>>=
${MID}/ULSCAT.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/ULSCAT.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ULSCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category ULSCAT UnivariateLaurentSeriesCategory" ${IN}/pscat.spad.pamphlet >ULSCAT.spad )

@
<<ULSCAT.o (BOOTSTRAP from MID)>>=
${MID}/ULSCAT.o: ${MID}/ULSCAT.lsp
	@ echo 0 making ${MID}/ULSCAT.o from ${MID}/ULSCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ULSCAT.lsp" :output-file "ULSCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/ULSCAT.o ${OUT}/ULSCAT.o

@
<<ULSCAT.lsp (LISP from IN)>>=
${MID}/ULSCAT.lsp: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/ULSCAT.lsp from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ULSCAT.NRLIB ; \
	rm -rf ${OUT}/ULSCAT.o ; \
	${SPADBIN}/notangle -R"ULSCAT.lsp BOOTSTRAP" ${IN}/pscat.spad.pamphlet >ULSCAT.lsp )

@
<<UPSCAT-.o (O from NRLIB)>>=
${OUT}/UPSCAT-.o: ${MID}/UPSCAT.NRLIB
	@ echo 0 making ${OUT}/UPSCAT-.o from ${MID}/UPSCAT-.NRLIB
	@ cp ${MID}/UPSCAT-.NRLIB/code.o ${OUT}/UPSCAT-.o

@
<<UPSCAT-.NRLIB (NRLIB from MID)>>=
${MID}/UPSCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/UPSCAT.spad 
	@ echo 0 making ${MID}/UPSCAT-.NRLIB from ${MID}/UPSCAT.spad
	@ (cd ${MID} ; 	echo ')co UPSCAT.spad' | ${INTERPSYS} )

@
<<UPSCAT.o (O from NRLIB)>>=
${OUT}/UPSCAT.o: ${MID}/UPSCAT.NRLIB
	@ echo 0 making ${OUT}/UPSCAT.o from ${MID}/UPSCAT.NRLIB
	@ cp ${MID}/UPSCAT.NRLIB/code.o ${OUT}/UPSCAT.o

@
<<UPSCAT.NRLIB (NRLIB from MID)>>=
${MID}/UPSCAT.NRLIB: ${MID}/UPSCAT.spad
	@ echo 0 making ${MID}/UPSCAT.NRLIB from ${MID}/UPSCAT.spad
	@ (cd ${MID} ; 	echo ')co UPSCAT.spad' | ${INTERPSYS} )

@
<<UPSCAT.spad (SPAD from IN)>>=
${MID}/UPSCAT.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/UPSCAT.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPSCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category UPSCAT UnivariatePowerSeriesCategory" ${IN}/pscat.spad.pamphlet >UPSCAT.spad )

@
<<UPXSCAT.o (O from NRLIB)>>=
${OUT}/UPXSCAT.o: ${MID}/UPXSCAT.NRLIB
	@ echo 0 making ${OUT}/UPXSCAT.o from ${MID}/UPXSCAT.NRLIB
	@ cp ${MID}/UPXSCAT.NRLIB/code.o ${OUT}/UPXSCAT.o

@
<<UPXSCAT.NRLIB (NRLIB from MID)>>=
${MID}/UPXSCAT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UPXSCAT.spad
	@ echo 0 making ${MID}/UPXSCAT.NRLIB from ${MID}/UPXSCAT.spad
	@ (cd ${MID} ; 	echo ')co UPXSCAT.spad' | ${INTERPSYS} )

@
<<UPXSCAT.spad (SPAD from IN)>>=
${MID}/UPXSCAT.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/UPXSCAT.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPXSCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category UPXSCAT UnivariatePuiseuxSeriesCategory" ${IN}/pscat.spad.pamphlet >UPXSCAT.spad )

@
<<UTSCAT-.o (O from NRLIB)>>=
${OUT}/UTSCAT-.o: ${MID}/UTSCAT.NRLIB
	@ echo 0 making ${OUT}/UTSCAT-.o from ${MID}/UTSCAT-.NRLIB
	@ cp ${MID}/UTSCAT-.NRLIB/code.o ${OUT}/UTSCAT-.o

@
<<UTSCAT-.NRLIB (NRLIB from MID)>>=
${MID}/UTSCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/UTSCAT.spad 
	@ echo 0 making ${MID}/UTSCAT-.NRLIB from ${MID}/UTSCAT.spad
	@ (cd ${MID} ; 	echo ')co UTSCAT.spad' | ${INTERPSYS} )

@
<<UTSCAT.o (O from NRLIB)>>=
${OUT}/UTSCAT.o: ${MID}/UTSCAT.NRLIB
	@ echo 0 making ${OUT}/UTSCAT.o from ${MID}/UTSCAT.NRLIB
	@ cp ${MID}/UTSCAT.NRLIB/code.o ${OUT}/UTSCAT.o

@
<<UTSCAT.NRLIB (NRLIB from MID)>>=
${MID}/UTSCAT.NRLIB: ${MID}/UTSCAT.spad
	@ echo 0 making ${MID}/UTSCAT.NRLIB from ${MID}/UTSCAT.spad
	@ (cd ${MID} ; 	echo ')co UTSCAT.spad' | ${INTERPSYS} )

@
<<UTSCAT.spad (SPAD from IN)>>=
${MID}/UTSCAT.spad: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${MID}/UTSCAT.spad from ${IN}/pscat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UTSCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category UTSCAT UnivariateTaylorSeriesCategory" ${IN}/pscat.spad.pamphlet >UTSCAT.spad )

@
<<pscat.spad.dvi (DOC from IN)>>=
${DOC}/pscat.spad.dvi: ${IN}/pscat.spad.pamphlet
	@ echo 0 making ${DOC}/pscat.spad.dvi from ${IN}/pscat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pscat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pscat.spad ; \
	rm -f ${DOC}/pscat.spad.pamphlet ; \
	rm -f ${DOC}/pscat.spad.tex ; \
	rm -f ${DOC}/pscat.spad )

@
\subsection{pseudolin.spad \cite{1}}
<<pseudolin.spad (SPAD from IN)>>=
${MID}/pseudolin.spad: ${IN}/pseudolin.spad.pamphlet
	@ echo 0 making ${MID}/pseudolin.spad from ${IN}/pseudolin.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/pseudolin.spad.pamphlet >pseudolin.spad )

@
<<PSEUDLIN.o (O from NRLIB)>>=
${OUT}/PSEUDLIN.o: ${MID}/PSEUDLIN.NRLIB
	@ echo 0 making ${OUT}/PSEUDLIN.o from ${MID}/PSEUDLIN.NRLIB
	@ cp ${MID}/PSEUDLIN.NRLIB/code.o ${OUT}/PSEUDLIN.o

@
<<PSEUDLIN.NRLIB (NRLIB from MID)>>=
${MID}/PSEUDLIN.NRLIB: ${MID}/PSEUDLIN.spad
	@ echo 0 making ${MID}/PSEUDLIN.NRLIB from ${MID}/PSEUDLIN.spad
	@ (cd ${MID} ; 	echo ')co PSEUDLIN.spad' | ${INTERPSYS} )

@
<<PSEUDLIN.spad (SPAD from IN)>>=
${MID}/PSEUDLIN.spad: ${IN}/pseudolin.spad.pamphlet
	@ echo 0 making ${MID}/PSEUDLIN.spad from ${IN}/pseudolin.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSEUDLIN.NRLIB ; \
	${SPADBIN}/notangle -R"package PSEUDLIN PseudoLinearNormalForm" ${IN}/pseudolin.spad.pamphlet >PSEUDLIN.spad )

@
<<pseudolin.spad.dvi (DOC from IN)>>=
${DOC}/pseudolin.spad.dvi: ${IN}/pseudolin.spad.pamphlet
	@ echo 0 making ${DOC}/pseudolin.spad.dvi from ${IN}/pseudolin.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/pseudolin.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} pseudolin.spad ; \
	rm -f ${DOC}/pseudolin.spad.pamphlet ; \
	rm -f ${DOC}/pseudolin.spad.tex ; \
	rm -f ${DOC}/pseudolin.spad )

@
\subsection{ptranfn.spad \cite{1}}
<<ptranfn.spad (SPAD from IN)>>=
${MID}/ptranfn.spad: ${IN}/ptranfn.spad.pamphlet
	@ echo 0 making ${MID}/ptranfn.spad from ${IN}/ptranfn.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ptranfn.spad.pamphlet >ptranfn.spad )

@
<<PTRANFN.o (O from NRLIB)>>=
${OUT}/PTRANFN.o: ${MID}/PTRANFN.NRLIB
	@ echo 0 making ${OUT}/PTRANFN.o from ${MID}/PTRANFN.NRLIB
	@ cp ${MID}/PTRANFN.NRLIB/code.o ${OUT}/PTRANFN.o

@
<<PTRANFN.NRLIB (NRLIB from MID)>>=
${MID}/PTRANFN.NRLIB: ${MID}/PTRANFN.spad
	@ echo 0 making ${MID}/PTRANFN.NRLIB from ${MID}/PTRANFN.spad
	@ (cd ${MID} ; 	echo ')co PTRANFN.spad' | ${INTERPSYS} )

@
<<PTRANFN.spad (SPAD from IN)>>=
${MID}/PTRANFN.spad: ${IN}/ptranfn.spad.pamphlet
	@ echo 0 making ${MID}/PTRANFN.spad from ${IN}/ptranfn.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PTRANFN.NRLIB ; \
	${SPADBIN}/notangle -R"category PTRANFN PartialTranscendentalFunctions" ${IN}/ptranfn.spad.pamphlet >PTRANFN.spad )

@
<<ptranfn.spad.dvi (DOC from IN)>>=
${DOC}/ptranfn.spad.dvi: ${IN}/ptranfn.spad.pamphlet
	@ echo 0 making ${DOC}/ptranfn.spad.dvi from ${IN}/ptranfn.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ptranfn.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ptranfn.spad ; \
	rm -f ${DOC}/ptranfn.spad.pamphlet ; \
	rm -f ${DOC}/ptranfn.spad.tex ; \
	rm -f ${DOC}/ptranfn.spad )

@
\subsection{puiseux.spad \cite{1}}
<<puiseux.spad (SPAD from IN)>>=
${MID}/puiseux.spad: ${IN}/puiseux.spad.pamphlet
	@ echo 0 making ${MID}/puiseux.spad from ${IN}/puiseux.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/puiseux.spad.pamphlet >puiseux.spad )

@
<<UPXS.o (O from NRLIB)>>=
${OUT}/UPXS.o: ${MID}/UPXS.NRLIB
	@ echo 0 making ${OUT}/UPXS.o from ${MID}/UPXS.NRLIB
	@ cp ${MID}/UPXS.NRLIB/code.o ${OUT}/UPXS.o

@
<<UPXS.NRLIB (NRLIB from MID)>>=
${MID}/UPXS.NRLIB: ${MID}/UPXS.spad
	@ echo 0 making ${MID}/UPXS.NRLIB from ${MID}/UPXS.spad
	@ (cd ${MID} ; 	echo ')co UPXS.spad' | ${INTERPSYS} )

@
<<UPXS.spad (SPAD from IN)>>=
${MID}/UPXS.spad: ${IN}/puiseux.spad.pamphlet
	@ echo 0 making ${MID}/UPXS.spad from ${IN}/puiseux.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPXS.NRLIB ; \
	${SPADBIN}/notangle -R"domain UPXS UnivariatePuiseuxSeries" ${IN}/puiseux.spad.pamphlet >UPXS.spad )

@
<<UPXSCCA-.o (O from NRLIB)>>=
${OUT}/UPXSCCA-.o: ${MID}/UPXSCCA.NRLIB
	@ echo 0 making ${OUT}/UPXSCCA-.o from ${MID}/UPXSCCA-.NRLIB
	@ cp ${MID}/UPXSCCA-.NRLIB/code.o ${OUT}/UPXSCCA-.o

@
<<UPXSCCA-.NRLIB (NRLIB from MID)>>=
${MID}/UPXSCCA-.NRLIB: ${OUT}/TYPE.o ${MID}/UPXSCCA.spad 
	@ echo 0 making ${MID}/UPXSCCA-.NRLIB from ${MID}/UPXSCCA.spad
	@ (cd ${MID} ; 	echo ')co UPXSCCA.spad' | ${INTERPSYS} )

@
<<UPXSCCA.o (O from NRLIB)>>=
${OUT}/UPXSCCA.o: ${MID}/UPXSCCA.NRLIB
	@ echo 0 making ${OUT}/UPXSCCA.o from ${MID}/UPXSCCA.NRLIB
	@ cp ${MID}/UPXSCCA.NRLIB/code.o ${OUT}/UPXSCCA.o

@
<<UPXSCCA.NRLIB (NRLIB from MID)>>=
${MID}/UPXSCCA.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UPXSCCA.spad
	@ echo 0 making ${MID}/UPXSCCA.NRLIB from ${MID}/UPXSCCA.spad
	@ (cd ${MID} ; 	echo ')co UPXSCCA.spad' | ${INTERPSYS} )

@
<<UPXSCCA.spad (SPAD from IN)>>=
${MID}/UPXSCCA.spad: ${IN}/puiseux.spad.pamphlet
	@ echo 0 making ${MID}/UPXSCCA.spad from ${IN}/puiseux.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPXSCCA.NRLIB ; \
	${SPADBIN}/notangle -R"category UPXSCCA UnivariatePuiseuxSeriesConstructorCategory" ${IN}/puiseux.spad.pamphlet >UPXSCCA.spad )

@
<<UPXSCONS.o (O from NRLIB)>>=
${OUT}/UPXSCONS.o: ${MID}/UPXSCONS.NRLIB
	@ echo 0 making ${OUT}/UPXSCONS.o from ${MID}/UPXSCONS.NRLIB
	@ cp ${MID}/UPXSCONS.NRLIB/code.o ${OUT}/UPXSCONS.o

@
<<UPXSCONS.NRLIB (NRLIB from MID)>>=
${MID}/UPXSCONS.NRLIB: ${MID}/UPXSCONS.spad
	@ echo 0 making ${MID}/UPXSCONS.NRLIB from ${MID}/UPXSCONS.spad
	@ (cd ${MID} ; 	echo ')co UPXSCONS.spad' | ${INTERPSYS} )

@
<<UPXSCONS.spad (SPAD from IN)>>=
${MID}/UPXSCONS.spad: ${IN}/puiseux.spad.pamphlet
	@ echo 0 making ${MID}/UPXSCONS.spad from ${IN}/puiseux.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPXSCONS.NRLIB ; \
	${SPADBIN}/notangle -R"domain UPXSCONS UnivariatePuiseuxSeriesConstructor" ${IN}/puiseux.spad.pamphlet >UPXSCONS.spad )

@
<<UPXS2.o (O from NRLIB)>>=
${OUT}/UPXS2.o: ${MID}/UPXS2.NRLIB
	@ echo 0 making ${OUT}/UPXS2.o from ${MID}/UPXS2.NRLIB
	@ cp ${MID}/UPXS2.NRLIB/code.o ${OUT}/UPXS2.o

@
<<UPXS2.NRLIB (NRLIB from MID)>>=
${MID}/UPXS2.NRLIB: ${MID}/UPXS2.spad
	@ echo 0 making ${MID}/UPXS2.NRLIB from ${MID}/UPXS2.spad
	@ (cd ${MID} ; 	echo ')co UPXS2.spad' | ${INTERPSYS} )

@
<<UPXS2.spad (SPAD from IN)>>=
${MID}/UPXS2.spad: ${IN}/puiseux.spad.pamphlet
	@ echo 0 making ${MID}/UPXS2.spad from ${IN}/puiseux.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPXS2.NRLIB ; \
	${SPADBIN}/notangle -R"package UPXS2 UnivariatePuiseuxSeriesFunctions2" ${IN}/puiseux.spad.pamphlet >UPXS2.spad )

@
<<puiseux.spad.dvi (DOC from IN)>>=
${DOC}/puiseux.spad.dvi: ${IN}/puiseux.spad.pamphlet
	@ echo 0 making ${DOC}/puiseux.spad.dvi from ${IN}/puiseux.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/puiseux.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} puiseux.spad ; \
	rm -f ${DOC}/puiseux.spad.pamphlet ; \
	rm -f ${DOC}/puiseux.spad.tex ; \
	rm -f ${DOC}/puiseux.spad )

@
\subsection{qalgset.spad \cite{1}}
<<qalgset.spad (SPAD from IN)>>=
${MID}/qalgset.spad: ${IN}/qalgset.spad.pamphlet
	@ echo 0 making ${MID}/qalgset.spad from ${IN}/qalgset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/qalgset.spad.pamphlet >qalgset.spad )

@
<<QALGSET.o (O from NRLIB)>>=
${OUT}/QALGSET.o: ${MID}/QALGSET.NRLIB
	@ echo 0 making ${OUT}/QALGSET.o from ${MID}/QALGSET.NRLIB
	@ cp ${MID}/QALGSET.NRLIB/code.o ${OUT}/QALGSET.o

@
<<QALGSET.NRLIB (NRLIB from MID)>>=
${MID}/QALGSET.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/QALGSET.spad
	@ echo 0 making ${MID}/QALGSET.NRLIB from ${MID}/QALGSET.spad
	@ (cd ${MID} ; 	echo ')co QALGSET.spad' | ${INTERPSYS} )

@
<<QALGSET.spad (SPAD from IN)>>=
${MID}/QALGSET.spad: ${IN}/qalgset.spad.pamphlet
	@ echo 0 making ${MID}/QALGSET.spad from ${IN}/qalgset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QALGSET.NRLIB ; \
	${SPADBIN}/notangle -R"domain QALGSET QuasiAlgebraicSet" ${IN}/qalgset.spad.pamphlet >QALGSET.spad )

@
<<QALGSET2.o (O from NRLIB)>>=
${OUT}/QALGSET2.o: ${MID}/QALGSET2.NRLIB
	@ echo 0 making ${OUT}/QALGSET2.o from ${MID}/QALGSET2.NRLIB
	@ cp ${MID}/QALGSET2.NRLIB/code.o ${OUT}/QALGSET2.o

@
<<QALGSET2.NRLIB (NRLIB from MID)>>=
${MID}/QALGSET2.NRLIB: ${MID}/QALGSET2.spad
	@ echo 0 making ${MID}/QALGSET2.NRLIB from ${MID}/QALGSET2.spad
	@ (cd ${MID} ; 	echo ')co QALGSET2.spad' | ${INTERPSYS} )

@
<<QALGSET2.spad (SPAD from IN)>>=
${MID}/QALGSET2.spad: ${IN}/qalgset.spad.pamphlet
	@ echo 0 making ${MID}/QALGSET2.spad from ${IN}/qalgset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QALGSET2.NRLIB ; \
	${SPADBIN}/notangle -R"package QALGSET2 QuasiAlgebraicSet2" ${IN}/qalgset.spad.pamphlet >QALGSET2.spad )

@
<<qalgset.spad.dvi (DOC from IN)>>=
${DOC}/qalgset.spad.dvi: ${IN}/qalgset.spad.pamphlet
	@ echo 0 making ${DOC}/qalgset.spad.dvi from ${IN}/qalgset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/qalgset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} qalgset.spad ; \
	rm -f ${DOC}/qalgset.spad.pamphlet ; \
	rm -f ${DOC}/qalgset.spad.tex ; \
	rm -f ${DOC}/qalgset.spad )

@
\subsection{quat.spad \cite{1}}
<<quat.spad (SPAD from IN)>>=
${MID}/quat.spad: ${IN}/quat.spad.pamphlet
	@ echo 0 making ${MID}/quat.spad from ${IN}/quat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/quat.spad.pamphlet >quat.spad )

@
<<QUAT.o (O from NRLIB)>>=
${OUT}/QUAT.o: ${MID}/QUAT.NRLIB
	@ echo 0 making ${OUT}/QUAT.o from ${MID}/QUAT.NRLIB
	@ cp ${MID}/QUAT.NRLIB/code.o ${OUT}/QUAT.o

@
<<QUAT.NRLIB (NRLIB from MID)>>=
${MID}/QUAT.NRLIB: ${MID}/QUAT.spad
	@ echo 0 making ${MID}/QUAT.NRLIB from ${MID}/QUAT.spad
	@ (cd ${MID} ; 	echo ')co QUAT.spad' | ${INTERPSYS} )

@
<<QUAT.spad (SPAD from IN)>>=
${MID}/QUAT.spad: ${IN}/quat.spad.pamphlet
	@ echo 0 making ${MID}/QUAT.spad from ${IN}/quat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QUAT.NRLIB ; \
	${SPADBIN}/notangle -R"domain QUAT Quaternion" ${IN}/quat.spad.pamphlet >QUAT.spad )

@
<<QUATCAT-.o (O from NRLIB)>>=
${OUT}/QUATCAT-.o: ${MID}/QUATCAT.NRLIB
	@ echo 0 making ${OUT}/QUATCAT-.o from ${MID}/QUATCAT-.NRLIB
	@ cp ${MID}/QUATCAT-.NRLIB/code.o ${OUT}/QUATCAT-.o

@
<<QUATCAT-.NRLIB (NRLIB from MID)>>=
${MID}/QUATCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/QUATCAT.spad 
	@ echo 0 making ${MID}/QUATCAT-.NRLIB from ${MID}/QUATCAT.spad
	@ (cd ${MID} ; 	echo ')co QUATCAT.spad' | ${INTERPSYS} )

@
<<QUATCAT.o (O from NRLIB)>>=
${OUT}/QUATCAT.o: ${MID}/QUATCAT.NRLIB
	@ echo 0 making ${OUT}/QUATCAT.o from ${MID}/QUATCAT.NRLIB
	@ cp ${MID}/QUATCAT.NRLIB/code.o ${OUT}/QUATCAT.o

@
<<QUATCAT.NRLIB (NRLIB from MID)>>=
${MID}/QUATCAT.NRLIB: ${MID}/QUATCAT.spad
	@ echo 0 making ${MID}/QUATCAT.NRLIB from ${MID}/QUATCAT.spad
	@ (cd ${MID} ; 	echo ')co QUATCAT.spad' | ${INTERPSYS} )

@
<<QUATCAT.spad (SPAD from IN)>>=
${MID}/QUATCAT.spad: ${IN}/quat.spad.pamphlet
	@ echo 0 making ${MID}/QUATCAT.spad from ${IN}/quat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QUATCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category QUATCAT QuaternionCategory" ${IN}/quat.spad.pamphlet >QUATCAT.spad )

@
<<QUATCT2.o (O from NRLIB)>>=
${OUT}/QUATCT2.o: ${MID}/QUATCT2.NRLIB
	@ echo 0 making ${OUT}/QUATCT2.o from ${MID}/QUATCT2.NRLIB
	@ cp ${MID}/QUATCT2.NRLIB/code.o ${OUT}/QUATCT2.o

@
<<QUATCT2.NRLIB (NRLIB from MID)>>=
${MID}/QUATCT2.NRLIB: ${MID}/QUATCT2.spad
	@ echo 0 making ${MID}/QUATCT2.NRLIB from ${MID}/QUATCT2.spad
	@ (cd ${MID} ; 	echo ')co QUATCT2.spad' | ${INTERPSYS} )

@
<<QUATCT2.spad (SPAD from IN)>>=
${MID}/QUATCT2.spad: ${IN}/quat.spad.pamphlet
	@ echo 0 making ${MID}/QUATCT2.spad from ${IN}/quat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf QUATCT2.NRLIB ; \
	${SPADBIN}/notangle -R"package QUATCT2 QuaternionCategoryFunctions2" ${IN}/quat.spad.pamphlet >QUATCT2.spad )

@
<<quat.spad.dvi (DOC from IN)>>=
${DOC}/quat.spad.dvi: ${IN}/quat.spad.pamphlet
	@ echo 0 making ${DOC}/quat.spad.dvi from ${IN}/quat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/quat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} quat.spad ; \
	rm -f ${DOC}/quat.spad.pamphlet ; \
	rm -f ${DOC}/quat.spad.tex ; \
	rm -f ${DOC}/quat.spad )

@
\subsection{radeigen.spad \cite{1}}
<<radeigen.spad (SPAD from IN)>>=
${MID}/radeigen.spad: ${IN}/radeigen.spad.pamphlet
	@ echo 0 making ${MID}/radeigen.spad from ${IN}/radeigen.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/radeigen.spad.pamphlet >radeigen.spad )

@
<<REP.o (O from NRLIB)>>=
${OUT}/REP.o: ${MID}/REP.NRLIB
	@ echo 0 making ${OUT}/REP.o from ${MID}/REP.NRLIB
	@ cp ${MID}/REP.NRLIB/code.o ${OUT}/REP.o

@
<<REP.NRLIB (NRLIB from MID)>>=
${MID}/REP.NRLIB: ${MID}/REP.spad
	@ echo 0 making ${MID}/REP.NRLIB from ${MID}/REP.spad
	@ (cd ${MID} ; 	echo ')co REP.spad' | ${INTERPSYS} )

@
<<REP.spad (SPAD from IN)>>=
${MID}/REP.spad: ${IN}/radeigen.spad.pamphlet
	@ echo 0 making ${MID}/REP.spad from ${IN}/radeigen.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REP.NRLIB ; \
	${SPADBIN}/notangle -R"package REP RadicalEigenPackage" ${IN}/radeigen.spad.pamphlet >REP.spad )

@
<<radeigen.spad.dvi (DOC from IN)>>=
${DOC}/radeigen.spad.dvi: ${IN}/radeigen.spad.pamphlet
	@ echo 0 making ${DOC}/radeigen.spad.dvi from ${IN}/radeigen.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/radeigen.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} radeigen.spad ; \
	rm -f ${DOC}/radeigen.spad.pamphlet ; \
	rm -f ${DOC}/radeigen.spad.tex ; \
	rm -f ${DOC}/radeigen.spad )

@
\subsection{radix.spad \cite{1}}
<<radix.spad (SPAD from IN)>>=
${MID}/radix.spad: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${MID}/radix.spad from ${IN}/radix.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/radix.spad.pamphlet >radix.spad )

@
<<BINARY.o (O from NRLIB)>>=
${OUT}/BINARY.o: ${MID}/BINARY.NRLIB
	@ echo 0 making ${OUT}/BINARY.o from ${MID}/BINARY.NRLIB
	@ cp ${MID}/BINARY.NRLIB/code.o ${OUT}/BINARY.o

@
<<BINARY.NRLIB (NRLIB from MID)>>=
${MID}/BINARY.NRLIB: ${MID}/BINARY.spad
	@ echo 0 making ${MID}/BINARY.NRLIB from ${MID}/BINARY.spad
	@ (cd ${MID} ; 	echo ')co BINARY.spad' | ${INTERPSYS} )

@
<<BINARY.spad (SPAD from IN)>>=
${MID}/BINARY.spad: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${MID}/BINARY.spad from ${IN}/radix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BINARY.NRLIB ; \
	${SPADBIN}/notangle -R"domain BINARY BinaryExpansion" ${IN}/radix.spad.pamphlet >BINARY.spad )

@
<<DECIMAL.o (O from NRLIB)>>=
${OUT}/DECIMAL.o: ${MID}/DECIMAL.NRLIB
	@ echo 0 making ${OUT}/DECIMAL.o from ${MID}/DECIMAL.NRLIB
	@ cp ${MID}/DECIMAL.NRLIB/code.o ${OUT}/DECIMAL.o

@
<<DECIMAL.NRLIB (NRLIB from MID)>>=
${MID}/DECIMAL.NRLIB: ${MID}/DECIMAL.spad
	@ echo 0 making ${MID}/DECIMAL.NRLIB from ${MID}/DECIMAL.spad
	@ (cd ${MID} ; 	echo ')co DECIMAL.spad' | ${INTERPSYS} )

@
<<DECIMAL.spad (SPAD from IN)>>=
${MID}/DECIMAL.spad: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${MID}/DECIMAL.spad from ${IN}/radix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DECIMAL.NRLIB ; \
	${SPADBIN}/notangle -R"domain DECIMAL DecimalExpansion" ${IN}/radix.spad.pamphlet >DECIMAL.spad )

@
<<HEXADEC.o (O from NRLIB)>>=
${OUT}/HEXADEC.o: ${MID}/HEXADEC.NRLIB
	@ echo 0 making ${OUT}/HEXADEC.o from ${MID}/HEXADEC.NRLIB
	@ cp ${MID}/HEXADEC.NRLIB/code.o ${OUT}/HEXADEC.o

@
<<HEXADEC.NRLIB (NRLIB from MID)>>=
${MID}/HEXADEC.NRLIB: ${MID}/HEXADEC.spad
	@ echo 0 making ${MID}/HEXADEC.NRLIB from ${MID}/HEXADEC.spad
	@ (cd ${MID} ; 	echo ')co HEXADEC.spad' | ${INTERPSYS} )

@
<<HEXADEC.spad (SPAD from IN)>>=
${MID}/HEXADEC.spad: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${MID}/HEXADEC.spad from ${IN}/radix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HEXADEC.NRLIB ; \
	${SPADBIN}/notangle -R"domain HEXADEC HexadecimalExpansion" ${IN}/radix.spad.pamphlet >HEXADEC.spad )

@
<<RADIX.o (O from NRLIB)>>=
${OUT}/RADIX.o: ${MID}/RADIX.NRLIB
	@ echo 0 making ${OUT}/RADIX.o from ${MID}/RADIX.NRLIB
	@ cp ${MID}/RADIX.NRLIB/code.o ${OUT}/RADIX.o

@
<<RADIX.NRLIB (NRLIB from MID)>>=
${MID}/RADIX.NRLIB: ${MID}/RADIX.spad
	@ echo 0 making ${MID}/RADIX.NRLIB from ${MID}/RADIX.spad
	@ (cd ${MID} ; 	echo ')co RADIX.spad' | ${INTERPSYS} )

@
<<RADIX.spad (SPAD from IN)>>=
${MID}/RADIX.spad: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${MID}/RADIX.spad from ${IN}/radix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RADIX.NRLIB ; \
	${SPADBIN}/notangle -R"domain RADIX RadixExpansion" ${IN}/radix.spad.pamphlet >RADIX.spad )

@
<<RADUTIL.o (O from NRLIB)>>=
${OUT}/RADUTIL.o: ${MID}/RADUTIL.NRLIB
	@ echo 0 making ${OUT}/RADUTIL.o from ${MID}/RADUTIL.NRLIB
	@ cp ${MID}/RADUTIL.NRLIB/code.o ${OUT}/RADUTIL.o

@
<<RADUTIL.NRLIB (NRLIB from MID)>>=
${MID}/RADUTIL.NRLIB: ${MID}/RADUTIL.spad
	@ echo 0 making ${MID}/RADUTIL.NRLIB from ${MID}/RADUTIL.spad
	@ (cd ${MID} ; 	echo ')co RADUTIL.spad' | ${INTERPSYS} )

@
<<RADUTIL.spad (SPAD from IN)>>=
${MID}/RADUTIL.spad: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${MID}/RADUTIL.spad from ${IN}/radix.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RADUTIL.NRLIB ; \
	${SPADBIN}/notangle -R"package RADUTIL RadixUtilities" ${IN}/radix.spad.pamphlet >RADUTIL.spad )

@
<<radix.spad.dvi (DOC from IN)>>=
${DOC}/radix.spad.dvi: ${IN}/radix.spad.pamphlet
	@ echo 0 making ${DOC}/radix.spad.dvi from ${IN}/radix.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/radix.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} radix.spad ; \
	rm -f ${DOC}/radix.spad.pamphlet ; \
	rm -f ${DOC}/radix.spad.tex ; \
	rm -f ${DOC}/radix.spad )

@
\subsection{random.spad \cite{1}}
<<random.spad (SPAD from IN)>>=
${MID}/random.spad: ${IN}/random.spad.pamphlet
	@ echo 0 making ${MID}/random.spad from ${IN}/random.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/random.spad.pamphlet >random.spad )

@
<<INTBIT.o (O from NRLIB)>>=
${OUT}/INTBIT.o: ${MID}/INTBIT.NRLIB
	@ echo 0 making ${OUT}/INTBIT.o from ${MID}/INTBIT.NRLIB
	@ cp ${MID}/INTBIT.NRLIB/code.o ${OUT}/INTBIT.o

@
<<INTBIT.NRLIB (NRLIB from MID)>>=
${MID}/INTBIT.NRLIB: ${MID}/INTBIT.spad
	@ echo 0 making ${MID}/INTBIT.NRLIB from ${MID}/INTBIT.spad
	@ (cd ${MID} ; 	echo ')co INTBIT.spad' | ${INTERPSYS} )

@
<<INTBIT.spad (SPAD from IN)>>=
${MID}/INTBIT.spad: ${IN}/random.spad.pamphlet
	@ echo 0 making ${MID}/INTBIT.spad from ${IN}/random.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTBIT.NRLIB ; \
	${SPADBIN}/notangle -R"package INTBIT IntegerBits" ${IN}/random.spad.pamphlet >INTBIT.spad )

@
<<RANDSRC.o (O from NRLIB)>>=
${OUT}/RANDSRC.o: ${MID}/RANDSRC.NRLIB
	@ echo 0 making ${OUT}/RANDSRC.o from ${MID}/RANDSRC.NRLIB
	@ cp ${MID}/RANDSRC.NRLIB/code.o ${OUT}/RANDSRC.o

@
<<RANDSRC.NRLIB (NRLIB from MID)>>=
${MID}/RANDSRC.NRLIB: ${MID}/RANDSRC.spad
	@ echo 0 making ${MID}/RANDSRC.NRLIB from ${MID}/RANDSRC.spad
	@ (cd ${MID} ; 	echo ')co RANDSRC.spad' | ${INTERPSYS} )

@
<<RANDSRC.spad (SPAD from IN)>>=
${MID}/RANDSRC.spad: ${IN}/random.spad.pamphlet
	@ echo 0 making ${MID}/RANDSRC.spad from ${IN}/random.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RANDSRC.NRLIB ; \
	${SPADBIN}/notangle -R"package RANDSRC RandomNumberSource" ${IN}/random.spad.pamphlet >RANDSRC.spad )

@
<<RDIST.o (O from NRLIB)>>=
${OUT}/RDIST.o: ${MID}/RDIST.NRLIB
	@ echo 0 making ${OUT}/RDIST.o from ${MID}/RDIST.NRLIB
	@ cp ${MID}/RDIST.NRLIB/code.o ${OUT}/RDIST.o

@
<<RDIST.NRLIB (NRLIB from MID)>>=
${MID}/RDIST.NRLIB: ${MID}/RDIST.spad
	@ echo 0 making ${MID}/RDIST.NRLIB from ${MID}/RDIST.spad
	@ (cd ${MID} ; 	echo ')co RDIST.spad' | ${INTERPSYS} )

@
<<RDIST.spad (SPAD from IN)>>=
${MID}/RDIST.spad: ${IN}/random.spad.pamphlet
	@ echo 0 making ${MID}/RDIST.spad from ${IN}/random.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RDIST.NRLIB ; \
	${SPADBIN}/notangle -R"package RDIST RandomDistributions" ${IN}/random.spad.pamphlet >RDIST.spad )

@
<<RFDIST.o (O from NRLIB)>>=
${OUT}/RFDIST.o: ${MID}/RFDIST.NRLIB
	@ echo 0 making ${OUT}/RFDIST.o from ${MID}/RFDIST.NRLIB
	@ cp ${MID}/RFDIST.NRLIB/code.o ${OUT}/RFDIST.o

@
<<RFDIST.NRLIB (NRLIB from MID)>>=
${MID}/RFDIST.NRLIB: ${MID}/RFDIST.spad
	@ echo 0 making ${MID}/RFDIST.NRLIB from ${MID}/RFDIST.spad
	@ (cd ${MID} ; 	echo ')co RFDIST.spad' | ${INTERPSYS} )

@
<<RFDIST.spad (SPAD from IN)>>=
${MID}/RFDIST.spad: ${IN}/random.spad.pamphlet
	@ echo 0 making ${MID}/RFDIST.spad from ${IN}/random.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RFDIST.NRLIB ; \
	${SPADBIN}/notangle -R"package RFDIST RandomFloatDistributions" ${IN}/random.spad.pamphlet >RFDIST.spad )

@
<<RIDIST.o (O from NRLIB)>>=
${OUT}/RIDIST.o: ${MID}/RIDIST.NRLIB
	@ echo 0 making ${OUT}/RIDIST.o from ${MID}/RIDIST.NRLIB
	@ cp ${MID}/RIDIST.NRLIB/code.o ${OUT}/RIDIST.o

@
<<RIDIST.NRLIB (NRLIB from MID)>>=
${MID}/RIDIST.NRLIB: ${MID}/RIDIST.spad
	@ echo 0 making ${MID}/RIDIST.NRLIB from ${MID}/RIDIST.spad
	@ (cd ${MID} ; 	echo ')co RIDIST.spad' | ${INTERPSYS} )

@
<<RIDIST.spad (SPAD from IN)>>=
${MID}/RIDIST.spad: ${IN}/random.spad.pamphlet
	@ echo 0 making ${MID}/RIDIST.spad from ${IN}/random.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RIDIST.NRLIB ; \
	${SPADBIN}/notangle -R"package RIDIST RandomIntegerDistributions" ${IN}/random.spad.pamphlet >RIDIST.spad )

@
<<random.spad.dvi (DOC from IN)>>=
${DOC}/random.spad.dvi: ${IN}/random.spad.pamphlet
	@ echo 0 making ${DOC}/random.spad.dvi from ${IN}/random.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/random.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} random.spad ; \
	rm -f ${DOC}/random.spad.pamphlet ; \
	rm -f ${DOC}/random.spad.tex ; \
	rm -f ${DOC}/random.spad )

@
\subsection{ratfact.spad \cite{1}}
<<ratfact.spad (SPAD from IN)>>=
${MID}/ratfact.spad: ${IN}/ratfact.spad.pamphlet
	@ echo 0 making ${MID}/ratfact.spad from ${IN}/ratfact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ratfact.spad.pamphlet >ratfact.spad )

@
<<RATFACT.o (O from NRLIB)>>=
${OUT}/RATFACT.o: ${MID}/RATFACT.NRLIB
	@ echo 0 making ${OUT}/RATFACT.o from ${MID}/RATFACT.NRLIB
	@ cp ${MID}/RATFACT.NRLIB/code.o ${OUT}/RATFACT.o

@
<<RATFACT.NRLIB (NRLIB from MID)>>=
${MID}/RATFACT.NRLIB: ${MID}/RATFACT.spad
	@ echo 0 making ${MID}/RATFACT.NRLIB from ${MID}/RATFACT.spad
	@ (cd ${MID} ; 	echo ')co RATFACT.spad' | ${INTERPSYS} )

@
<<RATFACT.spad (SPAD from IN)>>=
${MID}/RATFACT.spad: ${IN}/ratfact.spad.pamphlet
	@ echo 0 making ${MID}/RATFACT.spad from ${IN}/ratfact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RATFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package RATFACT RationalFactorize" ${IN}/ratfact.spad.pamphlet >RATFACT.spad )

@
<<ratfact.spad.dvi (DOC from IN)>>=
${DOC}/ratfact.spad.dvi: ${IN}/ratfact.spad.pamphlet
	@ echo 0 making ${DOC}/ratfact.spad.dvi from ${IN}/ratfact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ratfact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ratfact.spad ; \
	rm -f ${DOC}/ratfact.spad.pamphlet ; \
	rm -f ${DOC}/ratfact.spad.tex ; \
	rm -f ${DOC}/ratfact.spad )

@
\subsection{rdeef.spad \cite{1}}
<<rdeef.spad (SPAD from IN)>>=
${MID}/rdeef.spad: ${IN}/rdeef.spad.pamphlet
	@ echo 0 making ${MID}/rdeef.spad from ${IN}/rdeef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rdeef.spad.pamphlet >rdeef.spad )

@
<<INTTOOLS.o (O from NRLIB)>>=
${OUT}/INTTOOLS.o: ${MID}/INTTOOLS.NRLIB
	@ echo 0 making ${OUT}/INTTOOLS.o from ${MID}/INTTOOLS.NRLIB
	@ cp ${MID}/INTTOOLS.NRLIB/code.o ${OUT}/INTTOOLS.o

@
<<INTTOOLS.NRLIB (NRLIB from MID)>>=
${MID}/INTTOOLS.NRLIB: ${MID}/INTTOOLS.spad
	@ echo 0 making ${MID}/INTTOOLS.NRLIB from ${MID}/INTTOOLS.spad
	@ (cd ${MID} ; 	echo ')co INTTOOLS.spad' | ${INTERPSYS} )

@
<<INTTOOLS.spad (SPAD from IN)>>=
${MID}/INTTOOLS.spad: ${IN}/rdeef.spad.pamphlet
	@ echo 0 making ${MID}/INTTOOLS.spad from ${IN}/rdeef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTTOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package INTTOOLS IntegrationTools" ${IN}/rdeef.spad.pamphlet >INTTOOLS.spad )

@
<<RDEEF.o (O from NRLIB)>>=
${OUT}/RDEEF.o: ${MID}/RDEEF.NRLIB
	@ echo 0 making ${OUT}/RDEEF.o from ${MID}/RDEEF.NRLIB
	@ cp ${MID}/RDEEF.NRLIB/code.o ${OUT}/RDEEF.o

@
<<RDEEF.NRLIB (NRLIB from MID)>>=
${MID}/RDEEF.NRLIB: ${MID}/RDEEF.spad
	@ echo 0 making ${MID}/RDEEF.NRLIB from ${MID}/RDEEF.spad
	@ (cd ${MID} ; 	echo ')co RDEEF.spad' | ${INTERPSYS} )

@
<<RDEEF.spad (SPAD from IN)>>=
${MID}/RDEEF.spad: ${IN}/rdeef.spad.pamphlet
	@ echo 0 making ${MID}/RDEEF.spad from ${IN}/rdeef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RDEEF.NRLIB ; \
	${SPADBIN}/notangle -R"package RDEEF ElementaryRischDE" ${IN}/rdeef.spad.pamphlet >RDEEF.spad )

@
<<rdeef.spad.dvi (DOC from IN)>>=
${DOC}/rdeef.spad.dvi: ${IN}/rdeef.spad.pamphlet
	@ echo 0 making ${DOC}/rdeef.spad.dvi from ${IN}/rdeef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rdeef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rdeef.spad ; \
	rm -f ${DOC}/rdeef.spad.pamphlet ; \
	rm -f ${DOC}/rdeef.spad.tex ; \
	rm -f ${DOC}/rdeef.spad )

@
\subsection{rderf.spad \cite{1}}
<<rderf.spad (SPAD from IN)>>=
${MID}/rderf.spad: ${IN}/rderf.spad.pamphlet
	@ echo 0 making ${MID}/rderf.spad from ${IN}/rderf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rderf.spad.pamphlet >rderf.spad )

@
<<RDETR.o (O from NRLIB)>>=
${OUT}/RDETR.o: ${MID}/RDETR.NRLIB
	@ echo 0 making ${OUT}/RDETR.o from ${MID}/RDETR.NRLIB
	@ cp ${MID}/RDETR.NRLIB/code.o ${OUT}/RDETR.o

@
<<RDETR.NRLIB (NRLIB from MID)>>=
${MID}/RDETR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/RDETR.spad
	@ echo 0 making ${MID}/RDETR.NRLIB from ${MID}/RDETR.spad
	@ (cd ${MID} ; 	echo ')co RDETR.spad' | ${INTERPSYS} )

@
<<RDETR.spad (SPAD from IN)>>=
${MID}/RDETR.spad: ${IN}/rderf.spad.pamphlet
	@ echo 0 making ${MID}/RDETR.spad from ${IN}/rderf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RDETR.NRLIB ; \
	${SPADBIN}/notangle -R"package RDETR TranscendentalRischDE" ${IN}/rderf.spad.pamphlet >RDETR.spad )

@
<<rderf.spad.dvi (DOC from IN)>>=
${DOC}/rderf.spad.dvi: ${IN}/rderf.spad.pamphlet
	@ echo 0 making ${DOC}/rderf.spad.dvi from ${IN}/rderf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rderf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rderf.spad ; \
	rm -f ${DOC}/rderf.spad.pamphlet ; \
	rm -f ${DOC}/rderf.spad.tex ; \
	rm -f ${DOC}/rderf.spad )

@
\subsection{rdesys.spad \cite{1}}
<<rdesys.spad (SPAD from IN)>>=
${MID}/rdesys.spad: ${IN}/rdesys.spad.pamphlet
	@ echo 0 making ${MID}/rdesys.spad from ${IN}/rdesys.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rdesys.spad.pamphlet >rdesys.spad )

@
<<RDEEFS.o (O from NRLIB)>>=
${OUT}/RDEEFS.o: ${MID}/RDEEFS.NRLIB
	@ echo 0 making ${OUT}/RDEEFS.o from ${MID}/RDEEFS.NRLIB
	@ cp ${MID}/RDEEFS.NRLIB/code.o ${OUT}/RDEEFS.o

@
<<RDEEFS.NRLIB (NRLIB from MID)>>=
${MID}/RDEEFS.NRLIB: ${MID}/RDEEFS.spad
	@ echo 0 making ${MID}/RDEEFS.NRLIB from ${MID}/RDEEFS.spad
	@ (cd ${MID} ; 	echo ')co RDEEFS.spad' | ${INTERPSYS} )

@
<<RDEEFS.spad (SPAD from IN)>>=
${MID}/RDEEFS.spad: ${IN}/rdesys.spad.pamphlet
	@ echo 0 making ${MID}/RDEEFS.spad from ${IN}/rdesys.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RDEEFS.NRLIB ; \
	${SPADBIN}/notangle -R"package RDEEFS ElementaryRischDESystem" ${IN}/rdesys.spad.pamphlet >RDEEFS.spad )

@
<<RDETRS.o (O from NRLIB)>>=
${OUT}/RDETRS.o: ${MID}/RDETRS.NRLIB
	@ echo 0 making ${OUT}/RDETRS.o from ${MID}/RDETRS.NRLIB
	@ cp ${MID}/RDETRS.NRLIB/code.o ${OUT}/RDETRS.o

@
<<RDETRS.NRLIB (NRLIB from MID)>>=
${MID}/RDETRS.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/RDETRS.spad
	@ echo 0 making ${MID}/RDETRS.NRLIB from ${MID}/RDETRS.spad
	@ (cd ${MID} ; 	echo ')co RDETRS.spad' | ${INTERPSYS} )

@
<<RDETRS.spad (SPAD from IN)>>=
${MID}/RDETRS.spad: ${IN}/rdesys.spad.pamphlet
	@ echo 0 making ${MID}/RDETRS.spad from ${IN}/rdesys.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RDETRS.NRLIB ; \
	${SPADBIN}/notangle -R"package RDETRS TranscendentalRischDESystem" ${IN}/rdesys.spad.pamphlet >RDETRS.spad )

@
<<rdesys.spad.dvi (DOC from IN)>>=
${DOC}/rdesys.spad.dvi: ${IN}/rdesys.spad.pamphlet
	@ echo 0 making ${DOC}/rdesys.spad.dvi from ${IN}/rdesys.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rdesys.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rdesys.spad ; \
	rm -f ${DOC}/rdesys.spad.pamphlet ; \
	rm -f ${DOC}/rdesys.spad.tex ; \
	rm -f ${DOC}/rdesys.spad )

@
\subsection{real0q.spad \cite{1}}
<<real0q.spad (SPAD from IN)>>=
${MID}/real0q.spad: ${IN}/real0q.spad.pamphlet
	@ echo 0 making ${MID}/real0q.spad from ${IN}/real0q.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/real0q.spad.pamphlet >real0q.spad )

@
<<REAL0Q.o (O from NRLIB)>>=
${OUT}/REAL0Q.o: ${MID}/REAL0Q.NRLIB
	@ echo 0 making ${OUT}/REAL0Q.o from ${MID}/REAL0Q.NRLIB
	@ cp ${MID}/REAL0Q.NRLIB/code.o ${OUT}/REAL0Q.o

@
<<REAL0Q.NRLIB (NRLIB from MID)>>=
${MID}/REAL0Q.NRLIB: ${MID}/REAL0Q.spad
	@ echo 0 making ${MID}/REAL0Q.NRLIB from ${MID}/REAL0Q.spad
	@ (cd ${MID} ; 	echo ')co REAL0Q.spad' | ${INTERPSYS} )

@
<<REAL0Q.spad (SPAD from IN)>>=
${MID}/REAL0Q.spad: ${IN}/real0q.spad.pamphlet
	@ echo 0 making ${MID}/REAL0Q.spad from ${IN}/real0q.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REAL0Q.NRLIB ; \
	${SPADBIN}/notangle -R"package REAL0Q RealZeroPackageQ" ${IN}/real0q.spad.pamphlet >REAL0Q.spad )

@
<<real0q.spad.dvi (DOC from IN)>>=
${DOC}/real0q.spad.dvi: ${IN}/real0q.spad.pamphlet
	@ echo 0 making ${DOC}/real0q.spad.dvi from ${IN}/real0q.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/real0q.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} real0q.spad ; \
	rm -f ${DOC}/real0q.spad.pamphlet ; \
	rm -f ${DOC}/real0q.spad.tex ; \
	rm -f ${DOC}/real0q.spad )

@
\subsection{realzero.spad \cite{1}}
<<realzero.spad (SPAD from IN)>>=
${MID}/realzero.spad: ${IN}/realzero.spad.pamphlet
	@ echo 0 making ${MID}/realzero.spad from ${IN}/realzero.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/realzero.spad.pamphlet >realzero.spad )

@
<<REAL0.o (O from NRLIB)>>=
${OUT}/REAL0.o: ${MID}/REAL0.NRLIB
	@ echo 0 making ${OUT}/REAL0.o from ${MID}/REAL0.NRLIB
	@ cp ${MID}/REAL0.NRLIB/code.o ${OUT}/REAL0.o

@
<<REAL0.NRLIB (NRLIB from MID)>>=
${MID}/REAL0.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/REAL0.spad
	@ echo 0 making ${MID}/REAL0.NRLIB from ${MID}/REAL0.spad
	@ (cd ${MID} ; 	echo ')co REAL0.spad' | ${INTERPSYS} )

@
<<REAL0.spad (SPAD from IN)>>=
${MID}/REAL0.spad: ${IN}/realzero.spad.pamphlet
	@ echo 0 making ${MID}/REAL0.spad from ${IN}/realzero.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REAL0.NRLIB ; \
	${SPADBIN}/notangle -R"package REAL0 RealZeroPackage" ${IN}/realzero.spad.pamphlet >REAL0.spad )

@
<<realzero.spad.dvi (DOC from IN)>>=
${DOC}/realzero.spad.dvi: ${IN}/realzero.spad.pamphlet
	@ echo 0 making ${DOC}/realzero.spad.dvi from ${IN}/realzero.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/realzero.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} realzero.spad ; \
	rm -f ${DOC}/realzero.spad.pamphlet ; \
	rm -f ${DOC}/realzero.spad.tex ; \
	rm -f ${DOC}/realzero.spad )

@
\subsection{reclos.spad \cite{1}}
<<reclos.spad (SPAD from IN)>>=
${MID}/reclos.spad: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${MID}/reclos.spad from ${IN}/reclos.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/reclos.spad.pamphlet >reclos.spad )

@
<<POLUTIL.o (O from NRLIB)>>=
${OUT}/POLUTIL.o: ${MID}/POLUTIL.NRLIB
	@ echo 0 making ${OUT}/POLUTIL.o from ${MID}/POLUTIL.NRLIB
	@ cp ${MID}/POLUTIL.NRLIB/code.o ${OUT}/POLUTIL.o

@
<<POLUTIL.NRLIB (NRLIB from MID)>>=
${MID}/POLUTIL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLUTIL.spad
	@ echo 0 making ${MID}/POLUTIL.NRLIB from ${MID}/POLUTIL.spad
	@ (cd ${MID} ; 	echo ')co POLUTIL.spad' | ${INTERPSYS} )

@
<<POLUTIL.spad (SPAD from IN)>>=
${MID}/POLUTIL.spad: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${MID}/POLUTIL.spad from ${IN}/reclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLUTIL.NRLIB ; \
	${SPADBIN}/notangle -R"package POLUTIL RealPolynomialUtilitiesPackage" ${IN}/reclos.spad.pamphlet >POLUTIL.spad )

@
<<RCFIELD-.o (O from NRLIB)>>=
${OUT}/RCFIELD-.o: ${MID}/RCFIELD.NRLIB
	@ echo 0 making ${OUT}/RCFIELD-.o from ${MID}/RCFIELD-.NRLIB
	@ cp ${MID}/RCFIELD-.NRLIB/code.o ${OUT}/RCFIELD-.o

@
<<RCFIELD-.NRLIB (NRLIB from MID)>>=
${MID}/RCFIELD-.NRLIB: ${OUT}/TYPE.o ${MID}/RCFIELD.spad 
	@ echo 0 making ${MID}/RCFIELD-.NRLIB from ${MID}/RCFIELD.spad
	@ (cd ${MID} ; 	echo ')co RCFIELD.spad' | ${INTERPSYS} )

@
<<RCFIELD.o (O from NRLIB)>>=
${OUT}/RCFIELD.o: ${MID}/RCFIELD.NRLIB
	@ echo 0 making ${OUT}/RCFIELD.o from ${MID}/RCFIELD.NRLIB
	@ cp ${MID}/RCFIELD.NRLIB/code.o ${OUT}/RCFIELD.o

@
<<RCFIELD.NRLIB (NRLIB from MID)>>=
${MID}/RCFIELD.NRLIB: ${MID}/RCFIELD.spad
	@ echo 0 making ${MID}/RCFIELD.NRLIB from ${MID}/RCFIELD.spad
	@ (cd ${MID} ; 	echo ')co RCFIELD.spad' | ${INTERPSYS} )

@
<<RCFIELD.spad (SPAD from IN)>>=
${MID}/RCFIELD.spad: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${MID}/RCFIELD.spad from ${IN}/reclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RCFIELD.NRLIB ; \
	${SPADBIN}/notangle -R"category RCFIELD RealClosedField" ${IN}/reclos.spad.pamphlet >RCFIELD.spad )

@
<<RECLOS.o (O from NRLIB)>>=
${OUT}/RECLOS.o: ${MID}/RECLOS.NRLIB
	@ echo 0 making ${OUT}/RECLOS.o from ${MID}/RECLOS.NRLIB
	@ cp ${MID}/RECLOS.NRLIB/code.o ${OUT}/RECLOS.o

@
<<RECLOS.NRLIB (NRLIB from MID)>>=
${MID}/RECLOS.NRLIB: ${MID}/RECLOS.spad
	@ echo 0 making ${MID}/RECLOS.NRLIB from ${MID}/RECLOS.spad
	@ (cd ${MID} ; 	echo ')co RECLOS.spad' | ${INTERPSYS} )

@
<<RECLOS.spad (SPAD from IN)>>=
${MID}/RECLOS.spad: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${MID}/RECLOS.spad from ${IN}/reclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RECLOS.NRLIB ; \
	${SPADBIN}/notangle -R"domain RECLOS RealClosure" ${IN}/reclos.spad.pamphlet >RECLOS.spad )

@
<<ROIRC.o (O from NRLIB)>>=
${OUT}/ROIRC.o: ${MID}/ROIRC.NRLIB
	@ echo 0 making ${OUT}/ROIRC.o from ${MID}/ROIRC.NRLIB
	@ cp ${MID}/ROIRC.NRLIB/code.o ${OUT}/ROIRC.o

@
<<ROIRC.NRLIB (NRLIB from MID)>>=
${MID}/ROIRC.NRLIB: ${MID}/ROIRC.spad
	@ echo 0 making ${MID}/ROIRC.NRLIB from ${MID}/ROIRC.spad
	@ (cd ${MID} ; 	echo ')co ROIRC.spad' | ${INTERPSYS} )

@
<<ROIRC.spad (SPAD from IN)>>=
${MID}/ROIRC.spad: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${MID}/ROIRC.spad from ${IN}/reclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ROIRC.NRLIB ; \
	${SPADBIN}/notangle -R"domain ROIRC RightOpenIntervalRootCharacterization" ${IN}/reclos.spad.pamphlet >ROIRC.spad )

@
<<RRCC-.o (O from NRLIB)>>=
${OUT}/RRCC-.o: ${MID}/RRCC.NRLIB
	@ echo 0 making ${OUT}/RRCC-.o from ${MID}/RRCC-.NRLIB
	@ cp ${MID}/RRCC-.NRLIB/code.o ${OUT}/RRCC-.o

@
<<RRCC-.NRLIB (NRLIB from MID)>>=
${MID}/RRCC-.NRLIB: ${OUT}/TYPE.o ${MID}/RRCC.spad 
	@ echo 0 making ${MID}/RRCC-.NRLIB from ${MID}/RRCC.spad
	@ (cd ${MID} ; 	echo ')co RRCC.spad' | ${INTERPSYS} )

@
<<RRCC.o (O from NRLIB)>>=
${OUT}/RRCC.o: ${MID}/RRCC.NRLIB
	@ echo 0 making ${OUT}/RRCC.o from ${MID}/RRCC.NRLIB
	@ cp ${MID}/RRCC.NRLIB/code.o ${OUT}/RRCC.o

@
<<RRCC.NRLIB (NRLIB from MID)>>=
${MID}/RRCC.NRLIB: ${MID}/RRCC.spad
	@ echo 0 making ${MID}/RRCC.NRLIB from ${MID}/RRCC.spad
	@ (cd ${MID} ; 	echo ')co RRCC.spad' | ${INTERPSYS} )

@
<<RRCC.spad (SPAD from IN)>>=
${MID}/RRCC.spad: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${MID}/RRCC.spad from ${IN}/reclos.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RRCC.NRLIB ; \
	${SPADBIN}/notangle -R"category RRCC RealRootCharacterizationCategory" ${IN}/reclos.spad.pamphlet >RRCC.spad )

@
<<reclos.spad.dvi (DOC from IN)>>=
${DOC}/reclos.spad.dvi: ${IN}/reclos.spad.pamphlet
	@ echo 0 making ${DOC}/reclos.spad.dvi from ${IN}/reclos.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/reclos.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} reclos.spad ; \
	rm -f ${DOC}/reclos.spad.pamphlet ; \
	rm -f ${DOC}/reclos.spad.tex ; \
	rm -f ${DOC}/reclos.spad )

@
\subsection{regset.spad \cite{1}}
<<regset.spad (SPAD from IN)>>=
${MID}/regset.spad: ${IN}/regset.spad.pamphlet
	@ echo 0 making ${MID}/regset.spad from ${IN}/regset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/regset.spad.pamphlet >regset.spad )

@
<<RSETCAT-.o (O from NRLIB)>>=
${OUT}/RSETCAT-.o: ${MID}/RSETCAT.NRLIB
	@ echo 0 making ${OUT}/RSETCAT-.o from ${MID}/RSETCAT-.NRLIB
	@ cp ${MID}/RSETCAT-.NRLIB/code.o ${OUT}/RSETCAT-.o

@
<<RSETCAT-.NRLIB (NRLIB from MID)>>=
${MID}/RSETCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/RSETCAT.spad 
	@ echo 0 making ${MID}/RSETCAT-.NRLIB from ${MID}/RSETCAT.spad
	@ (cd ${MID} ; 	echo ')co RSETCAT.spad' | ${INTERPSYS} )

@
<<RSETCAT.o (O from NRLIB)>>=
${OUT}/RSETCAT.o: ${MID}/RSETCAT.NRLIB
	@ echo 0 making ${OUT}/RSETCAT.o from ${MID}/RSETCAT.NRLIB
	@ cp ${MID}/RSETCAT.NRLIB/code.o ${OUT}/RSETCAT.o

@
<<RSETCAT.NRLIB (NRLIB from MID)>>=
${MID}/RSETCAT.NRLIB: ${MID}/RSETCAT.spad
	@ echo 0 making ${MID}/RSETCAT.NRLIB from ${MID}/RSETCAT.spad
	@ (cd ${MID} ; 	echo ')co RSETCAT.spad' | ${INTERPSYS} )

@
<<RSETCAT.spad (SPAD from IN)>>=
${MID}/RSETCAT.spad: ${IN}/regset.spad.pamphlet
	@ echo 0 making ${MID}/RSETCAT.spad from ${IN}/regset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RSETCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category RSETCAT RegularTriangularSetCategory" ${IN}/regset.spad.pamphlet >RSETCAT.spad )

@
<<regset.spad.dvi (DOC from IN)>>=
${DOC}/regset.spad.dvi: ${IN}/regset.spad.pamphlet
	@ echo 0 making ${DOC}/regset.spad.dvi from ${IN}/regset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/regset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} regset.spad ; \
	rm -f ${DOC}/regset.spad.pamphlet ; \
	rm -f ${DOC}/regset.spad.tex ; \
	rm -f ${DOC}/regset.spad )

@
\subsection{rep1.spad \cite{1}}
<<rep1.spad (SPAD from IN)>>=
${MID}/rep1.spad: ${IN}/rep1.spad.pamphlet
	@ echo 0 making ${MID}/rep1.spad from ${IN}/rep1.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rep1.spad.pamphlet >rep1.spad )

@
<<REP1.o (O from NRLIB)>>=
${OUT}/REP1.o: ${MID}/REP1.NRLIB
	@ echo 0 making ${OUT}/REP1.o from ${MID}/REP1.NRLIB
	@ cp ${MID}/REP1.NRLIB/code.o ${OUT}/REP1.o

@
<<REP1.NRLIB (NRLIB from MID)>>=
${MID}/REP1.NRLIB: ${MID}/REP1.spad
	@ echo 0 making ${MID}/REP1.NRLIB from ${MID}/REP1.spad
	@ (cd ${MID} ; 	echo ')co REP1.spad' | ${INTERPSYS} )

@
<<REP1.spad (SPAD from IN)>>=
${MID}/REP1.spad: ${IN}/rep1.spad.pamphlet
	@ echo 0 making ${MID}/REP1.spad from ${IN}/rep1.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REP1.NRLIB ; \
	${SPADBIN}/notangle -R"package REP1 RepresentationPackage1" ${IN}/rep1.spad.pamphlet >REP1.spad )

@
<<rep1.spad.dvi (DOC from IN)>>=
${DOC}/rep1.spad.dvi: ${IN}/rep1.spad.pamphlet
	@ echo 0 making ${DOC}/rep1.spad.dvi from ${IN}/rep1.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rep1.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rep1.spad ; \
	rm -f ${DOC}/rep1.spad.pamphlet ; \
	rm -f ${DOC}/rep1.spad.tex ; \
	rm -f ${DOC}/rep1.spad )

@
\subsection{rep2.spad \cite{1}}
<<rep2.spad (SPAD from IN)>>=
${MID}/rep2.spad: ${IN}/rep2.spad.pamphlet
	@ echo 0 making ${MID}/rep2.spad from ${IN}/rep2.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rep2.spad.pamphlet >rep2.spad )

@
<<REP2.o (O from NRLIB)>>=
${OUT}/REP2.o: ${MID}/REP2.NRLIB
	@ echo 0 making ${OUT}/REP2.o from ${MID}/REP2.NRLIB
	@ cp ${MID}/REP2.NRLIB/code.o ${OUT}/REP2.o

@
<<REP2.NRLIB (NRLIB from MID)>>=
${MID}/REP2.NRLIB: ${MID}/REP2.spad
	@ echo 0 making ${MID}/REP2.NRLIB from ${MID}/REP2.spad
	@ (cd ${MID} ; 	echo ')co REP2.spad' | ${INTERPSYS} )

@
<<REP2.spad (SPAD from IN)>>=
${MID}/REP2.spad: ${IN}/rep2.spad.pamphlet
	@ echo 0 making ${MID}/REP2.spad from ${IN}/rep2.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REP2.NRLIB ; \
	${SPADBIN}/notangle -R"package REP2 RepresentationPackage2" ${IN}/rep2.spad.pamphlet >REP2.spad )

@
<<rep2.spad.dvi (DOC from IN)>>=
${DOC}/rep2.spad.dvi: ${IN}/rep2.spad.pamphlet
	@ echo 0 making ${DOC}/rep2.spad.dvi from ${IN}/rep2.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rep2.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rep2.spad ; \
	rm -f ${DOC}/rep2.spad.pamphlet ; \
	rm -f ${DOC}/rep2.spad.tex ; \
	rm -f ${DOC}/rep2.spad )

@
\subsection{resring.spad \cite{1}}
<<resring.spad (SPAD from IN)>>=
${MID}/resring.spad: ${IN}/resring.spad.pamphlet
	@ echo 0 making ${MID}/resring.spad from ${IN}/resring.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/resring.spad.pamphlet >resring.spad )

@
<<RESRING.o (O from NRLIB)>>=
${OUT}/RESRING.o: ${MID}/RESRING.NRLIB
	@ echo 0 making ${OUT}/RESRING.o from ${MID}/RESRING.NRLIB
	@ cp ${MID}/RESRING.NRLIB/code.o ${OUT}/RESRING.o

@
<<RESRING.NRLIB (NRLIB from MID)>>=
${MID}/RESRING.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/RESRING.spad
	@ echo 0 making ${MID}/RESRING.NRLIB from ${MID}/RESRING.spad
	@ (cd ${MID} ; 	echo ')co RESRING.spad' | ${INTERPSYS} )

@
<<RESRING.spad (SPAD from IN)>>=
${MID}/RESRING.spad: ${IN}/resring.spad.pamphlet
	@ echo 0 making ${MID}/RESRING.spad from ${IN}/resring.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RESRING.NRLIB ; \
	${SPADBIN}/notangle -R"domain RESRING ResidueRing" ${IN}/resring.spad.pamphlet >RESRING.spad )

@
<<resring.spad.dvi (DOC from IN)>>=
${DOC}/resring.spad.dvi: ${IN}/resring.spad.pamphlet
	@ echo 0 making ${DOC}/resring.spad.dvi from ${IN}/resring.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/resring.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} resring.spad ; \
	rm -f ${DOC}/resring.spad.pamphlet ; \
	rm -f ${DOC}/resring.spad.tex ; \
	rm -f ${DOC}/resring.spad )

@
\subsection{retract.spad \cite{1}}
<<retract.spad (SPAD from IN)>>=
${MID}/retract.spad: ${IN}/retract.spad.pamphlet
	@ echo 0 making ${MID}/retract.spad from ${IN}/retract.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/retract.spad.pamphlet >retract.spad )

@
<<FRETRCT-.o (O from NRLIB)>>=
${OUT}/FRETRCT-.o: ${MID}/FRETRCT.NRLIB
	@ echo 0 making ${OUT}/FRETRCT-.o from ${MID}/FRETRCT-.NRLIB
	@ cp ${MID}/FRETRCT-.NRLIB/code.o ${OUT}/FRETRCT-.o

@
<<FRETRCT-.NRLIB (NRLIB from MID)>>=
${MID}/FRETRCT-.NRLIB: ${OUT}/TYPE.o ${MID}/FRETRCT.spad 
	@ echo 0 making ${MID}/FRETRCT-.NRLIB from ${MID}/FRETRCT.spad
	@ (cd ${MID} ; 	echo ')co FRETRCT.spad' | ${INTERPSYS} )

@
<<FRETRCT.o (O from NRLIB)>>=
${OUT}/FRETRCT.o: ${MID}/FRETRCT.NRLIB
	@ echo 0 making ${OUT}/FRETRCT.o from ${MID}/FRETRCT.NRLIB
	@ cp ${MID}/FRETRCT.NRLIB/code.o ${OUT}/FRETRCT.o

@
<<FRETRCT.NRLIB (NRLIB from MID)>>=
${MID}/FRETRCT.NRLIB: ${MID}/FRETRCT.spad
	@ echo 0 making ${MID}/FRETRCT.NRLIB from ${MID}/FRETRCT.spad
	@ (cd ${MID} ; 	echo ')co FRETRCT.spad' | ${INTERPSYS} )

@
<<FRETRCT.spad (SPAD from IN)>>=
${MID}/FRETRCT.spad: ${IN}/retract.spad.pamphlet
	@ echo 0 making ${MID}/FRETRCT.spad from ${IN}/retract.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FRETRCT.NRLIB ; \
	${SPADBIN}/notangle -R"category FRETRCT FullyRetractableTo" ${IN}/retract.spad.pamphlet >FRETRCT.spad )

@
<<INTRET.o (O from NRLIB)>>=
${OUT}/INTRET.o: ${MID}/INTRET.NRLIB
	@ echo 0 making ${OUT}/INTRET.o from ${MID}/INTRET.NRLIB
	@ cp ${MID}/INTRET.NRLIB/code.o ${OUT}/INTRET.o

@
<<INTRET.NRLIB (NRLIB from MID)>>=
${MID}/INTRET.NRLIB: ${OUT}/RETRACT.o ${MID}/INTRET.spad
	@ echo 0 making ${MID}/INTRET.NRLIB from ${MID}/INTRET.spad
	@ (cd ${MID} ; 	echo ')co INTRET.spad' | ${INTERPSYS} )

@
<<INTRET.spad (SPAD from IN)>>=
${MID}/INTRET.spad: ${IN}/retract.spad.pamphlet
	@ echo 0 making ${MID}/INTRET.spad from ${IN}/retract.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTRET.NRLIB ; \
	${SPADBIN}/notangle -R"package INTRET IntegerRetractions" ${IN}/retract.spad.pamphlet >INTRET.spad )

@
<<RATRET.o (O from NRLIB)>>=
${OUT}/RATRET.o: ${MID}/RATRET.NRLIB
	@ echo 0 making ${OUT}/RATRET.o from ${MID}/RATRET.NRLIB
	@ cp ${MID}/RATRET.NRLIB/code.o ${OUT}/RATRET.o

@
<<RATRET.NRLIB (NRLIB from MID)>>=
${MID}/RATRET.NRLIB: ${MID}/RATRET.spad
	@ echo 0 making ${MID}/RATRET.NRLIB from ${MID}/RATRET.spad
	@ (cd ${MID} ; 	echo ')co RATRET.spad' | ${INTERPSYS} )

@
<<RATRET.spad (SPAD from IN)>>=
${MID}/RATRET.spad: ${IN}/retract.spad.pamphlet
	@ echo 0 making ${MID}/RATRET.spad from ${IN}/retract.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RATRET.NRLIB ; \
	${SPADBIN}/notangle -R"package RATRET RationalRetractions" ${IN}/retract.spad.pamphlet >RATRET.spad )

@
<<retract.spad.dvi (DOC from IN)>>=
${DOC}/retract.spad.dvi: ${IN}/retract.spad.pamphlet
	@ echo 0 making ${DOC}/retract.spad.dvi from ${IN}/retract.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/retract.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} retract.spad ; \
	rm -f ${DOC}/retract.spad.pamphlet ; \
	rm -f ${DOC}/retract.spad.tex ; \
	rm -f ${DOC}/retract.spad )

@
\subsection{rf.spad \cite{1}}
<<rf.spad (SPAD from IN)>>=
${MID}/rf.spad: ${IN}/rf.spad.pamphlet
	@ echo 0 making ${MID}/rf.spad from ${IN}/rf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rf.spad.pamphlet >rf.spad )

@
<<POLYCATQ.o (O from NRLIB)>>=
${OUT}/POLYCATQ.o: ${MID}/POLYCATQ.NRLIB
	@ echo 0 making ${OUT}/POLYCATQ.o from ${MID}/POLYCATQ.NRLIB
	@ cp ${MID}/POLYCATQ.NRLIB/code.o ${OUT}/POLYCATQ.o

@
<<POLYCATQ.NRLIB (NRLIB from MID)>>=
${MID}/POLYCATQ.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/POLYCATQ.spad
	@ echo 0 making ${MID}/POLYCATQ.NRLIB from ${MID}/POLYCATQ.spad
	@ (cd ${MID} ; 	echo ')co POLYCATQ.spad' | ${INTERPSYS} )

@
<<POLYCATQ.spad (SPAD from IN)>>=
${MID}/POLYCATQ.spad: ${IN}/rf.spad.pamphlet
	@ echo 0 making ${MID}/POLYCATQ.spad from ${IN}/rf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf POLYCATQ.NRLIB ; \
	${SPADBIN}/notangle -R"package POLYCATQ PolynomialCategoryQuotientFunctions" ${IN}/rf.spad.pamphlet >POLYCATQ.spad )

@
<<RF.o (O from NRLIB)>>=
${OUT}/RF.o: ${MID}/RF.NRLIB
	@ echo 0 making ${OUT}/RF.o from ${MID}/RF.NRLIB
	@ cp ${MID}/RF.NRLIB/code.o ${OUT}/RF.o

@
<<RF.NRLIB (NRLIB from MID)>>=
${MID}/RF.NRLIB: ${MID}/RF.spad
	@ echo 0 making ${MID}/RF.NRLIB from ${MID}/RF.spad
	@ (cd ${MID} ; 	echo ')co RF.spad' | ${INTERPSYS} )

@
<<RF.spad (SPAD from IN)>>=
${MID}/RF.spad: ${IN}/rf.spad.pamphlet
	@ echo 0 making ${MID}/RF.spad from ${IN}/rf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RF.NRLIB ; \
	${SPADBIN}/notangle -R"package RF RationalFunction" ${IN}/rf.spad.pamphlet >RF.spad )

@
<<rf.spad.dvi (DOC from IN)>>=
${DOC}/rf.spad.dvi: ${IN}/rf.spad.pamphlet
	@ echo 0 making ${DOC}/rf.spad.dvi from ${IN}/rf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rf.spad ; \
	rm -f ${DOC}/rf.spad.pamphlet ; \
	rm -f ${DOC}/rf.spad.tex ; \
	rm -f ${DOC}/rf.spad )

@
\subsection{riccati.spad \cite{1}}
<<riccati.spad (SPAD from IN)>>=
${MID}/riccati.spad: ${IN}/riccati.spad.pamphlet
	@ echo 0 making ${MID}/riccati.spad from ${IN}/riccati.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/riccati.spad.pamphlet >riccati.spad )

@
<<ODEPRRIC.o (O from NRLIB)>>=
${OUT}/ODEPRRIC.o: ${MID}/ODEPRRIC.NRLIB
	@ echo 0 making ${OUT}/ODEPRRIC.o from ${MID}/ODEPRRIC.NRLIB
	@ cp ${MID}/ODEPRRIC.NRLIB/code.o ${OUT}/ODEPRRIC.o

@
<<ODEPRRIC.NRLIB (NRLIB from MID)>>=
${MID}/ODEPRRIC.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ODEPRRIC.spad
	@ echo 0 making ${MID}/ODEPRRIC.NRLIB from ${MID}/ODEPRRIC.spad
	@ (cd ${MID} ; 	echo ')co ODEPRRIC.spad' | ${INTERPSYS} )

@
<<ODEPRRIC.spad (SPAD from IN)>>=
${MID}/ODEPRRIC.spad: ${IN}/riccati.spad.pamphlet
	@ echo 0 making ${MID}/ODEPRRIC.spad from ${IN}/riccati.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODEPRRIC.NRLIB ; \
	${SPADBIN}/notangle -R"package ODEPRRIC PrimitiveRatRicDE" ${IN}/riccati.spad.pamphlet >ODEPRRIC.spad )

@
<<ODERTRIC.o (O from NRLIB)>>=
${OUT}/ODERTRIC.o: ${MID}/ODERTRIC.NRLIB
	@ echo 0 making ${OUT}/ODERTRIC.o from ${MID}/ODERTRIC.NRLIB
	@ cp ${MID}/ODERTRIC.NRLIB/code.o ${OUT}/ODERTRIC.o

@
<<ODERTRIC.NRLIB (NRLIB from MID)>>=
${MID}/ODERTRIC.NRLIB: ${MID}/ODERTRIC.spad
	@ echo 0 making ${MID}/ODERTRIC.NRLIB from ${MID}/ODERTRIC.spad
	@ (cd ${MID} ; 	echo ')co ODERTRIC.spad' | ${INTERPSYS} )

@
<<ODERTRIC.spad (SPAD from IN)>>=
${MID}/ODERTRIC.spad: ${IN}/riccati.spad.pamphlet
	@ echo 0 making ${MID}/ODERTRIC.spad from ${IN}/riccati.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ODERTRIC.NRLIB ; \
	${SPADBIN}/notangle -R"package ODERTRIC RationalRicDE" ${IN}/riccati.spad.pamphlet >ODERTRIC.spad )

@
<<riccati.spad.dvi (DOC from IN)>>=
${DOC}/riccati.spad.dvi: ${IN}/riccati.spad.pamphlet
	@ echo 0 making ${DOC}/riccati.spad.dvi from ${IN}/riccati.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/riccati.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} riccati.spad ; \
	rm -f ${DOC}/riccati.spad.pamphlet ; \
	rm -f ${DOC}/riccati.spad.tex ; \
	rm -f ${DOC}/riccati.spad )

@
\subsection{routines.spad \cite{1}}
<<routines.spad (SPAD from IN)>>=
${MID}/routines.spad: ${IN}/routines.spad.pamphlet
	@ echo 0 making ${MID}/routines.spad from ${IN}/routines.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/routines.spad.pamphlet >routines.spad )

@
<<ATTRBUT.o (O from NRLIB)>>=
${OUT}/ATTRBUT.o: ${MID}/ATTRBUT.NRLIB
	@ echo 0 making ${OUT}/ATTRBUT.o from ${MID}/ATTRBUT.NRLIB
	@ cp ${MID}/ATTRBUT.NRLIB/code.o ${OUT}/ATTRBUT.o

@
<<ATTRBUT.NRLIB (NRLIB from MID)>>=
${MID}/ATTRBUT.NRLIB: ${MID}/ATTRBUT.spad
	@ echo 0 making ${MID}/ATTRBUT.NRLIB from ${MID}/ATTRBUT.spad
	@ (cd ${MID} ; 	echo ')co ATTRBUT.spad' | ${INTERPSYS} )

@
<<ATTRBUT.spad (SPAD from IN)>>=
${MID}/ATTRBUT.spad: ${IN}/routines.spad.pamphlet
	@ echo 0 making ${MID}/ATTRBUT.spad from ${IN}/routines.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ATTRBUT.NRLIB ; \
	${SPADBIN}/notangle -R"domain ATTRBUT AttributeButtons" ${IN}/routines.spad.pamphlet >ATTRBUT.spad )

@
<<ROUTINE.o (O from NRLIB)>>=
${OUT}/ROUTINE.o: ${MID}/ROUTINE.NRLIB
	@ echo 0 making ${OUT}/ROUTINE.o from ${MID}/ROUTINE.NRLIB
	@ cp ${MID}/ROUTINE.NRLIB/code.o ${OUT}/ROUTINE.o

@
<<ROUTINE.NRLIB (NRLIB from MID)>>=
${MID}/ROUTINE.NRLIB: ${MID}/ROUTINE.spad
	@ echo 0 making ${MID}/ROUTINE.NRLIB from ${MID}/ROUTINE.spad
	@ (cd ${MID} ; 	echo ')co ROUTINE.spad' | ${INTERPSYS} )

@
<<ROUTINE.spad (SPAD from IN)>>=
${MID}/ROUTINE.spad: ${IN}/routines.spad.pamphlet
	@ echo 0 making ${MID}/ROUTINE.spad from ${IN}/routines.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ROUTINE.NRLIB ; \
	${SPADBIN}/notangle -R"domain ROUTINE RoutinesTable" ${IN}/routines.spad.pamphlet >ROUTINE.spad )

@
<<routines.spad.dvi (DOC from IN)>>=
${DOC}/routines.spad.dvi: ${IN}/routines.spad.pamphlet
	@ echo 0 making ${DOC}/routines.spad.dvi from ${IN}/routines.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/routines.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} routines.spad ; \
	rm -f ${DOC}/routines.spad.pamphlet ; \
	rm -f ${DOC}/routines.spad.tex ; \
	rm -f ${DOC}/routines.spad )

@
\subsection{rule.spad \cite{1}}
<<rule.spad (SPAD from IN)>>=
${MID}/rule.spad: ${IN}/rule.spad.pamphlet
	@ echo 0 making ${MID}/rule.spad from ${IN}/rule.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/rule.spad.pamphlet >rule.spad )

@
<<APPRULE.o (O from NRLIB)>>=
${OUT}/APPRULE.o: ${MID}/APPRULE.NRLIB
	@ echo 0 making ${OUT}/APPRULE.o from ${MID}/APPRULE.NRLIB
	@ cp ${MID}/APPRULE.NRLIB/code.o ${OUT}/APPRULE.o

@
<<APPRULE.NRLIB (NRLIB from MID)>>=
${MID}/APPRULE.NRLIB: ${MID}/APPRULE.spad
	@ echo 0 making ${MID}/APPRULE.NRLIB from ${MID}/APPRULE.spad
	@ (cd ${MID} ; 	echo ')co APPRULE.spad' | ${INTERPSYS} )

@
<<APPRULE.spad (SPAD from IN)>>=
${MID}/APPRULE.spad: ${IN}/rule.spad.pamphlet
	@ echo 0 making ${MID}/APPRULE.spad from ${IN}/rule.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf APPRULE.NRLIB ; \
	${SPADBIN}/notangle -R"package APPRULE ApplyRules" ${IN}/rule.spad.pamphlet >APPRULE.spad )

@
<<RULE.o (O from NRLIB)>>=
${OUT}/RULE.o: ${MID}/RULE.NRLIB
	@ echo 0 making ${OUT}/RULE.o from ${MID}/RULE.NRLIB
	@ cp ${MID}/RULE.NRLIB/code.o ${OUT}/RULE.o

@
<<RULE.NRLIB (NRLIB from MID)>>=
${MID}/RULE.NRLIB: ${MID}/RULE.spad
	@ echo 0 making ${MID}/RULE.NRLIB from ${MID}/RULE.spad
	@ (cd ${MID} ; 	echo ')co RULE.spad' | ${INTERPSYS} )

@
<<RULE.spad (SPAD from IN)>>=
${MID}/RULE.spad: ${IN}/rule.spad.pamphlet
	@ echo 0 making ${MID}/RULE.spad from ${IN}/rule.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RULE.NRLIB ; \
	${SPADBIN}/notangle -R"domain RULE RewriteRule" ${IN}/rule.spad.pamphlet >RULE.spad )

@
<<RULESET.o (O from NRLIB)>>=
${OUT}/RULESET.o: ${MID}/RULESET.NRLIB
	@ echo 0 making ${OUT}/RULESET.o from ${MID}/RULESET.NRLIB
	@ cp ${MID}/RULESET.NRLIB/code.o ${OUT}/RULESET.o

@
<<RULESET.NRLIB (NRLIB from MID)>>=
${MID}/RULESET.NRLIB: ${MID}/RULESET.spad
	@ echo 0 making ${MID}/RULESET.NRLIB from ${MID}/RULESET.spad
	@ (cd ${MID} ; 	echo ')co RULESET.spad' | ${INTERPSYS} )

@
<<RULESET.spad (SPAD from IN)>>=
${MID}/RULESET.spad: ${IN}/rule.spad.pamphlet
	@ echo 0 making ${MID}/RULESET.spad from ${IN}/rule.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RULESET.NRLIB ; \
	${SPADBIN}/notangle -R"domain RULESET Ruleset" ${IN}/rule.spad.pamphlet >RULESET.spad )

@
<<rule.spad.dvi (DOC from IN)>>=
${DOC}/rule.spad.dvi: ${IN}/rule.spad.pamphlet
	@ echo 0 making ${DOC}/rule.spad.dvi from ${IN}/rule.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/rule.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} rule.spad ; \
	rm -f ${DOC}/rule.spad.pamphlet ; \
	rm -f ${DOC}/rule.spad.tex ; \
	rm -f ${DOC}/rule.spad )

@
\subsection{seg.spad \cite{1}}
<<seg.spad (SPAD from IN)>>=
${MID}/seg.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/seg.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/seg.spad.pamphlet >seg.spad )

@
<<INCRMAPS.o (O from NRLIB)>>=
${OUT}/INCRMAPS.o: ${MID}/INCRMAPS.NRLIB
	@ echo 0 making ${OUT}/INCRMAPS.o from ${MID}/INCRMAPS.NRLIB
	@ cp ${MID}/INCRMAPS.NRLIB/code.o ${OUT}/INCRMAPS.o

@
<<INCRMAPS.NRLIB (NRLIB from MID)>>=
${MID}/INCRMAPS.NRLIB: ${MID}/INCRMAPS.spad
	@ echo 0 making ${MID}/INCRMAPS.NRLIB from ${MID}/INCRMAPS.spad
	@ (cd ${MID} ; 	echo ')co INCRMAPS.spad' | ${INTERPSYS} )

@
<<INCRMAPS.spad (SPAD from IN)>>=
${MID}/INCRMAPS.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/INCRMAPS.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INCRMAPS.NRLIB ; \
	${SPADBIN}/notangle -R"package INCRMAPS IncrementingMaps" ${IN}/seg.spad.pamphlet >INCRMAPS.spad )

@
<<SEG.o (O from NRLIB)>>=
${OUT}/SEG.o: ${MID}/SEG.NRLIB
	@ echo 0 making ${OUT}/SEG.o from ${MID}/SEG.NRLIB
	@ cp ${MID}/SEG.NRLIB/code.o ${OUT}/SEG.o

@
<<SEG.NRLIB (NRLIB from MID)>>=
${MID}/SEG.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SEG.spad
	@ echo 0 making ${MID}/SEG.NRLIB from ${MID}/SEG.spad
	@ (cd ${MID} ; 	echo ')co SEG.spad' | ${INTERPSYS} )

@
<<SEG.spad (SPAD from IN)>>=
${MID}/SEG.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/SEG.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEG.NRLIB ; \
	${SPADBIN}/notangle -R"domain SEG Segment" ${IN}/seg.spad.pamphlet >SEG.spad )

@
<<SEG2.o (O from NRLIB)>>=
${OUT}/SEG2.o: ${MID}/SEG2.NRLIB
	@ echo 0 making ${OUT}/SEG2.o from ${MID}/SEG2.NRLIB
	@ cp ${MID}/SEG2.NRLIB/code.o ${OUT}/SEG2.o

@
<<SEG2.NRLIB (NRLIB from MID)>>=
${MID}/SEG2.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SEG2.spad
	@ echo 0 making ${MID}/SEG2.NRLIB from ${MID}/SEG2.spad
	@ (cd ${MID} ; 	echo ')co SEG2.spad' | ${INTERPSYS} )

@
<<SEG2.spad (SPAD from IN)>>=
${MID}/SEG2.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/SEG2.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEG2.NRLIB ; \
	${SPADBIN}/notangle -R"package SEG2 SegmentFunctions2" ${IN}/seg.spad.pamphlet >SEG2.spad )

@
<<SEGBIND.o (O from NRLIB)>>=
${OUT}/SEGBIND.o: ${MID}/SEGBIND.NRLIB
	@ echo 0 making ${OUT}/SEGBIND.o from ${MID}/SEGBIND.NRLIB
	@ cp ${MID}/SEGBIND.NRLIB/code.o ${OUT}/SEGBIND.o

@
<<SEGBIND.NRLIB (NRLIB from MID)>>=
${MID}/SEGBIND.NRLIB: ${MID}/SEGBIND.spad
	@ echo 0 making ${MID}/SEGBIND.NRLIB from ${MID}/SEGBIND.spad
	@ (cd ${MID} ; 	echo ')co SEGBIND.spad' | ${INTERPSYS} )

@
<<SEGBIND.spad (SPAD from IN)>>=
${MID}/SEGBIND.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/SEGBIND.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEGBIND.NRLIB ; \
	${SPADBIN}/notangle -R"domain SEGBIND SegmentBinding" ${IN}/seg.spad.pamphlet >SEGBIND.spad )

@
<<SEGBIND2.o (O from NRLIB)>>=
${OUT}/SEGBIND2.o: ${MID}/SEGBIND2.NRLIB
	@ echo 0 making ${OUT}/SEGBIND2.o from ${MID}/SEGBIND2.NRLIB
	@ cp ${MID}/SEGBIND2.NRLIB/code.o ${OUT}/SEGBIND2.o

@
<<SEGBIND2.NRLIB (NRLIB from MID)>>=
${MID}/SEGBIND2.NRLIB: ${OUT}/TYPE.o ${MID}/SEGBIND2.spad
	@ echo 0 making ${MID}/SEGBIND2.NRLIB from ${MID}/SEGBIND2.spad
	@ (cd ${MID} ; 	echo ')co SEGBIND2.spad' | ${INTERPSYS} )

@
<<SEGBIND2.spad (SPAD from IN)>>=
${MID}/SEGBIND2.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/SEGBIND2.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEGBIND2.NRLIB ; \
	${SPADBIN}/notangle -R"package SEGBIND2 SegmentBindingFunctions2" ${IN}/seg.spad.pamphlet >SEGBIND2.spad )

@
<<SEGCAT.o (O from NRLIB)>>=
${OUT}/SEGCAT.o: ${MID}/SEGCAT.NRLIB
	@ echo 0 making ${OUT}/SEGCAT.o from ${MID}/SEGCAT.NRLIB
	@ cp ${MID}/SEGCAT.NRLIB/code.o ${OUT}/SEGCAT.o

@
<<SEGCAT.NRLIB (NRLIB from MID)>>=
${MID}/SEGCAT.NRLIB: ${OUT}/TYPE.o ${MID}/SEGCAT.spad
	@ echo 0 making ${MID}/SEGCAT.NRLIB from ${MID}/SEGCAT.spad
	@ (cd ${MID} ; 	echo ')co SEGCAT.spad' | ${INTERPSYS} )

@
<<SEGCAT.spad (SPAD from IN)>>=
${MID}/SEGCAT.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/SEGCAT.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEGCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category SEGCAT SegmentCategory" ${IN}/seg.spad.pamphlet >SEGCAT.spad )

@
<<SEGXCAT.o (O from NRLIB)>>=
${OUT}/SEGXCAT.o: ${MID}/SEGXCAT.NRLIB
	@ echo 0 making ${OUT}/SEGXCAT.o from ${MID}/SEGXCAT.NRLIB
	@ cp ${MID}/SEGXCAT.NRLIB/code.o ${OUT}/SEGXCAT.o

@
<<SEGXCAT.NRLIB (NRLIB from MID)>>=
${MID}/SEGXCAT.NRLIB: ${OUT}/SEGCAT.o ${OUT}/TYPE.o ${MID}/SEGXCAT.spad
	@ echo 0 making ${MID}/SEGXCAT.NRLIB from ${MID}/SEGXCAT.spad
	@ (cd ${MID} ; 	echo ')co SEGXCAT.spad' | ${INTERPSYS} )

@
<<SEGXCAT.spad (SPAD from IN)>>=
${MID}/SEGXCAT.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/SEGXCAT.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEGXCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category SEGXCAT SegmentExpansionCategory" ${IN}/seg.spad.pamphlet >SEGXCAT.spad )

@
<<UNISEG.o (O from NRLIB)>>=
${OUT}/UNISEG.o: ${MID}/UNISEG.NRLIB
	@ echo 0 making ${OUT}/UNISEG.o from ${MID}/UNISEG.NRLIB
	@ cp ${MID}/UNISEG.NRLIB/code.o ${OUT}/UNISEG.o

@
<<UNISEG.NRLIB (NRLIB from MID)>>=
${MID}/UNISEG.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UNISEG.spad
	@ echo 0 making ${MID}/UNISEG.NRLIB from ${MID}/UNISEG.spad
	@ (cd ${MID} ; 	echo ')co UNISEG.spad' | ${INTERPSYS} )

@
<<UNISEG.spad (SPAD from IN)>>=
${MID}/UNISEG.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/UNISEG.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UNISEG.NRLIB ; \
	${SPADBIN}/notangle -R"domain UNISEG UniversalSegment" ${IN}/seg.spad.pamphlet >UNISEG.spad )

@
<<UNISEG2.o (O from NRLIB)>>=
${OUT}/UNISEG2.o: ${MID}/UNISEG2.NRLIB
	@ echo 0 making ${OUT}/UNISEG2.o from ${MID}/UNISEG2.NRLIB
	@ cp ${MID}/UNISEG2.NRLIB/code.o ${OUT}/UNISEG2.o

@
<<UNISEG2.NRLIB (NRLIB from MID)>>=
${MID}/UNISEG2.NRLIB: ${MID}/UNISEG2.spad
	@ echo 0 making ${MID}/UNISEG2.NRLIB from ${MID}/UNISEG2.spad
	@ (cd ${MID} ; 	echo ')co UNISEG2.spad' | ${INTERPSYS} )

@
<<UNISEG2.spad (SPAD from IN)>>=
${MID}/UNISEG2.spad: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${MID}/UNISEG2.spad from ${IN}/seg.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UNISEG2.NRLIB ; \
	${SPADBIN}/notangle -R"package UNISEG2 UniversalSegmentFunctions2" ${IN}/seg.spad.pamphlet >UNISEG2.spad )

@
<<seg.spad.dvi (DOC from IN)>>=
${DOC}/seg.spad.dvi: ${IN}/seg.spad.pamphlet
	@ echo 0 making ${DOC}/seg.spad.dvi from ${IN}/seg.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/seg.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} seg.spad ; \
	rm -f ${DOC}/seg.spad.pamphlet ; \
	rm -f ${DOC}/seg.spad.tex ; \
	rm -f ${DOC}/seg.spad )

@
\subsection{setorder.spad \cite{1}}
<<setorder.spad (SPAD from IN)>>=
${MID}/setorder.spad: ${IN}/setorder.spad.pamphlet
	@ echo 0 making ${MID}/setorder.spad from ${IN}/setorder.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/setorder.spad.pamphlet >setorder.spad )

@
<<UDPO.o (O from NRLIB)>>=
${OUT}/UDPO.o: ${MID}/UDPO.NRLIB
	@ echo 0 making ${OUT}/UDPO.o from ${MID}/UDPO.NRLIB
	@ cp ${MID}/UDPO.NRLIB/code.o ${OUT}/UDPO.o

@
<<UDPO.NRLIB (NRLIB from MID)>>=
${MID}/UDPO.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UDPO.spad
	@ echo 0 making ${MID}/UDPO.NRLIB from ${MID}/UDPO.spad
	@ (cd ${MID} ; 	echo ')co UDPO.spad' | ${INTERPSYS} )

@
<<UDPO.spad (SPAD from IN)>>=
${MID}/UDPO.spad: ${IN}/setorder.spad.pamphlet
	@ echo 0 making ${MID}/UDPO.spad from ${IN}/setorder.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UDPO.NRLIB ; \
	${SPADBIN}/notangle -R"package UDPO UserDefinedPartialOrdering" ${IN}/setorder.spad.pamphlet >UDPO.spad )

@
<<UDVO.o (O from NRLIB)>>=
${OUT}/UDVO.o: ${MID}/UDVO.NRLIB
	@ echo 0 making ${OUT}/UDVO.o from ${MID}/UDVO.NRLIB
	@ cp ${MID}/UDVO.NRLIB/code.o ${OUT}/UDVO.o

@
<<UDVO.NRLIB (NRLIB from MID)>>=
${MID}/UDVO.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UDVO.spad
	@ echo 0 making ${MID}/UDVO.NRLIB from ${MID}/UDVO.spad
	@ (cd ${MID} ; 	echo ')co UDVO.spad' | ${INTERPSYS} )

@
<<UDVO.spad (SPAD from IN)>>=
${MID}/UDVO.spad: ${IN}/setorder.spad.pamphlet
	@ echo 0 making ${MID}/UDVO.spad from ${IN}/setorder.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UDVO.NRLIB ; \
	${SPADBIN}/notangle -R"package UDVO UserDefinedVariableOrdering" ${IN}/setorder.spad.pamphlet >UDVO.spad )

@
<<setorder.spad.dvi (DOC from IN)>>=
${DOC}/setorder.spad.dvi: ${IN}/setorder.spad.pamphlet
	@ echo 0 making ${DOC}/setorder.spad.dvi from ${IN}/setorder.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/setorder.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} setorder.spad ; \
	rm -f ${DOC}/setorder.spad.pamphlet ; \
	rm -f ${DOC}/setorder.spad.tex ; \
	rm -f ${DOC}/setorder.spad )

@
\subsection{sets.spad \cite{1}}
<<sets.spad (SPAD from IN)>>=
${MID}/sets.spad: ${IN}/sets.spad.pamphlet
	@ echo 0 making ${MID}/sets.spad from ${IN}/sets.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sets.spad.pamphlet >sets.spad )

@
<<SET.o (O from NRLIB)>>=
${OUT}/SET.o: ${MID}/SET.NRLIB
	@ echo 0 making ${OUT}/SET.o from ${MID}/SET.NRLIB
	@ cp ${MID}/SET.NRLIB/code.o ${OUT}/SET.o

@
<<SET.NRLIB (NRLIB from MID)>>=
${MID}/SET.NRLIB: ${MID}/SET.spad
	@ echo 0 making ${MID}/SET.NRLIB from ${MID}/SET.spad
	@ (cd ${MID} ; 	echo ')co SET.spad' | ${INTERPSYS} )

@
<<SET.spad (SPAD from IN)>>=
${MID}/SET.spad: ${IN}/sets.spad.pamphlet
	@ echo 0 making ${MID}/SET.spad from ${IN}/sets.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SET.NRLIB ; \
	${SPADBIN}/notangle -R"domain SET Set" ${IN}/sets.spad.pamphlet >SET.spad )

@
<<sets.spad.dvi (DOC from IN)>>=
${DOC}/sets.spad.dvi: ${IN}/sets.spad.pamphlet
	@ echo 0 making ${DOC}/sets.spad.dvi from ${IN}/sets.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sets.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sets.spad ; \
	rm -f ${DOC}/sets.spad.pamphlet ; \
	rm -f ${DOC}/sets.spad.tex ; \
	rm -f ${DOC}/sets.spad )

@
\subsection{sex.spad \cite{1}}
<<sex.spad (SPAD from IN)>>=
${MID}/sex.spad: ${IN}/sex.spad.pamphlet
	@ echo 0 making ${MID}/sex.spad from ${IN}/sex.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sex.spad.pamphlet >sex.spad )

@
<<SEX.o (O from NRLIB)>>=
${OUT}/SEX.o: ${MID}/SEX.NRLIB
	@ echo 0 making ${OUT}/SEX.o from ${MID}/SEX.NRLIB
	@ cp ${MID}/SEX.NRLIB/code.o ${OUT}/SEX.o

@
<<SEX.NRLIB (NRLIB from MID)>>=
${MID}/SEX.NRLIB: ${MID}/SEX.spad
	@ echo 0 making ${MID}/SEX.NRLIB from ${MID}/SEX.spad
	@ (cd ${MID} ; 	echo ')co SEX.spad' | ${INTERPSYS} )

@
<<SEX.spad (SPAD from IN)>>=
${MID}/SEX.spad: ${IN}/sex.spad.pamphlet
	@ echo 0 making ${MID}/SEX.spad from ${IN}/sex.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEX.NRLIB ; \
	${SPADBIN}/notangle -R"domain SEX SExpression" ${IN}/sex.spad.pamphlet >SEX.spad )

@
<<SEXCAT.o (O from NRLIB)>>=
${OUT}/SEXCAT.o: ${MID}/SEXCAT.NRLIB
	@ echo 0 making ${OUT}/SEXCAT.o from ${MID}/SEXCAT.NRLIB
	@ cp ${MID}/SEXCAT.NRLIB/code.o ${OUT}/SEXCAT.o

@
<<SEXCAT.NRLIB (NRLIB from MID)>>=
${MID}/SEXCAT.NRLIB: ${OUT}/BASTYPE.o ${OUT}/KOERCE.o ${MID}/SEXCAT.spad
	@ echo 0 making ${MID}/SEXCAT.NRLIB from ${MID}/SEXCAT.spad
	@ (cd ${MID} ; 	echo ')co SEXCAT.spad' | ${INTERPSYS} )

@
<<SEXCAT.spad (SPAD from IN)>>=
${MID}/SEXCAT.spad: ${IN}/sex.spad.pamphlet
	@ echo 0 making ${MID}/SEXCAT.spad from ${IN}/sex.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEXCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category SEXCAT SExpressionCategory" ${IN}/sex.spad.pamphlet >SEXCAT.spad )

@
<<SEXOF.o (O from NRLIB)>>=
${OUT}/SEXOF.o: ${MID}/SEXOF.NRLIB
	@ echo 0 making ${OUT}/SEXOF.o from ${MID}/SEXOF.NRLIB
	@ cp ${MID}/SEXOF.NRLIB/code.o ${OUT}/SEXOF.o

@
<<SEXOF.NRLIB (NRLIB from MID)>>=
${MID}/SEXOF.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SEXOF.spad
	@ echo 0 making ${MID}/SEXOF.NRLIB from ${MID}/SEXOF.spad
	@ (cd ${MID} ; 	echo ')co SEXOF.spad' | ${INTERPSYS} )

@
<<SEXOF.spad (SPAD from IN)>>=
${MID}/SEXOF.spad: ${IN}/sex.spad.pamphlet
	@ echo 0 making ${MID}/SEXOF.spad from ${IN}/sex.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SEXOF.NRLIB ; \
	${SPADBIN}/notangle -R"domain SEXOF SExpressionOf" ${IN}/sex.spad.pamphlet >SEXOF.spad )

@
<<sex.spad.dvi (DOC from IN)>>=
${DOC}/sex.spad.dvi: ${IN}/sex.spad.pamphlet
	@ echo 0 making ${DOC}/sex.spad.dvi from ${IN}/sex.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sex.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sex.spad ; \
	rm -f ${DOC}/sex.spad.pamphlet ; \
	rm -f ${DOC}/sex.spad.tex ; \
	rm -f ${DOC}/sex.spad )

@
\subsection{sf.spad \cite{1}}
<<sf.spad (SPAD from IN)>>=
${MID}/sf.spad: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/sf.spad from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sf.spad.pamphlet >sf.spad )

@
<<DFLOAT.o (O from NRLIB)>>=
${OUT}/DFLOAT.o: ${MID}/DFLOAT.NRLIB
	@ echo 0 making ${OUT}/DFLOAT.o from ${MID}/DFLOAT.NRLIB
	@ cp ${MID}/DFLOAT.NRLIB/code.o ${OUT}/DFLOAT.o

@
<<DFLOAT.NRLIB (NRLIB from MID)>>=
${MID}/DFLOAT.NRLIB: ${MID}/DFLOAT.spad
	@ echo 0 making ${MID}/DFLOAT.NRLIB from ${MID}/DFLOAT.spad
	@ (cd ${MID} ; 	echo ')co DFLOAT.spad' | ${INTERPSYS} )

@
<<DFLOAT.spad (SPAD from IN)>>=
${MID}/DFLOAT.spad: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/DFLOAT.spad from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DFLOAT.NRLIB ; \
	${SPADBIN}/notangle -R"domain DFLOAT DoubleFloat" ${IN}/sf.spad.pamphlet >DFLOAT.spad )

@
<<DFLOAT.o (BOOTSTRAP from MID)>>=
${MID}/DFLOAT.o: ${MID}/DFLOAT.lsp
	@ echo 0 making ${MID}/DFLOAT.o from ${MID}/DFLOAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "DFLOAT.lsp" :output-file "DFLOAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/DFLOAT.o ${OUT}/DFLOAT.o

@
<<DFLOAT.lsp (LISP from IN)>>=
${MID}/DFLOAT.lsp: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/DFLOAT.lsp from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DFLOAT.NRLIB ; \
	rm -rf ${OUT}/DFLOAT.o ; \
	${SPADBIN}/notangle -R"DFLOAT.lsp BOOTSTRAP" ${IN}/sf.spad.pamphlet >DFLOAT.lsp )

@
<<FPS-.o (O from NRLIB)>>=
${OUT}/FPS-.o: ${MID}/FPS.NRLIB
	@ echo 0 making ${OUT}/FPS-.o from ${MID}/FPS-.NRLIB
	@ cp ${MID}/FPS-.NRLIB/code.o ${OUT}/FPS-.o

@
<<FPS-.NRLIB (NRLIB from MID)>>=
${MID}/FPS-.NRLIB: ${OUT}/TYPE.o ${MID}/FPS.spad 
	@ echo 0 making ${MID}/FPS-.NRLIB from ${MID}/FPS.spad
	@ (cd ${MID} ; 	echo ')co FPS.spad' | ${INTERPSYS} )

@
<<FPS.o (O from NRLIB)>>=
${OUT}/FPS.o: ${MID}/FPS.NRLIB
	@ echo 0 making ${OUT}/FPS.o from ${MID}/FPS.NRLIB
	@ cp ${MID}/FPS.NRLIB/code.o ${OUT}/FPS.o

@
<<FPS.NRLIB (NRLIB from MID)>>=
${MID}/FPS.NRLIB: ${MID}/FPS.spad
	@ echo 0 making ${MID}/FPS.NRLIB from ${MID}/FPS.spad
	@ (cd ${MID} ; 	echo ')co FPS.spad' | ${INTERPSYS} )

@
<<FPS.spad (SPAD from IN)>>=
${MID}/FPS.spad: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/FPS.spad from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FPS.NRLIB ; \
	${SPADBIN}/notangle -R"category FPS FloatingPointSystem" ${IN}/sf.spad.pamphlet >FPS.spad )

@
<<FPS-.o (BOOTSTRAP from MID)>>=
${MID}/FPS-.o: ${MID}/FPS-.lsp 
	@ echo 0 making ${MID}/FPS-.o from ${MID}/FPS-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "FPS-.lsp" :output-file "FPS-.o"))' | ${DEPSYS} )
	@ cp ${MID}/FPS-.o ${OUT}/FPS-.o

@
<<FPS-.lsp (LISP from IN)>>=
${MID}/FPS-.lsp: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/FPS-.lsp from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FPS-.NRLIB ; \
	rm -rf ${OUT}/FPS-.o ; \
	${SPADBIN}/notangle -R"FPS-.lsp BOOTSTRAP" ${IN}/sf.spad.pamphlet >FPS-.lsp )

@
<<FPS.o (BOOTSTRAP from MID)>>=
${MID}/FPS.o: ${MID}/FPS.lsp 
	@ echo 0 making ${MID}/FPS.o from ${MID}/FPS.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "FPS.lsp" :output-file "FPS.o"))' | ${DEPSYS} )
	@ cp ${MID}/FPS.o ${OUT}/FPS.o

@
<<FPS.lsp (LISP from IN)>>=
${MID}/FPS.lsp: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/FPS.lsp from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FPS.NRLIB ; \
	rm -rf ${OUT}/FPS.o ; \
	${SPADBIN}/notangle -R"FPS.lsp BOOTSTRAP" ${IN}/sf.spad.pamphlet >FPS.lsp )

@
<<RADCAT-.o (O from NRLIB)>>=
${OUT}/RADCAT-.o: ${MID}/RADCAT.NRLIB
	@ echo 0 making ${OUT}/RADCAT-.o from ${MID}/RADCAT-.NRLIB
	@ cp ${MID}/RADCAT-.NRLIB/code.o ${OUT}/RADCAT-.o

@
<<RADCAT-.NRLIB (NRLIB from MID)>>=
${MID}/RADCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/RADCAT.spad 
	@ echo 0 making ${MID}/RADCAT-.NRLIB from ${MID}/RADCAT.spad
	@ (cd ${MID} ; 	echo ')co RADCAT.spad' | ${INTERPSYS} )

@
<<RADCAT.o (O from NRLIB)>>=
${OUT}/RADCAT.o: ${MID}/RADCAT.NRLIB
	@ echo 0 making ${OUT}/RADCAT.o from ${MID}/RADCAT.NRLIB
	@ cp ${MID}/RADCAT.NRLIB/code.o ${OUT}/RADCAT.o

@
<<RADCAT.NRLIB (NRLIB from MID)>>=
${MID}/RADCAT.NRLIB: ${MID}/RADCAT.spad
	@ echo 0 making ${MID}/RADCAT.NRLIB from ${MID}/RADCAT.spad
	@ (cd ${MID} ; 	echo ')co RADCAT.spad' | ${INTERPSYS} )

@
<<RADCAT.spad (SPAD from IN)>>=
${MID}/RADCAT.spad: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/RADCAT.spad from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RADCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category RADCAT RadicalCategory" ${IN}/sf.spad.pamphlet >RADCAT.spad )

@
<<REAL.o (O from NRLIB)>>=
${OUT}/REAL.o: ${MID}/REAL.NRLIB
	@ echo 0 making ${OUT}/REAL.o from ${MID}/REAL.NRLIB
	@ cp ${MID}/REAL.NRLIB/code.o ${OUT}/REAL.o

@
<<REAL.NRLIB (NRLIB from MID)>>=
${MID}/REAL.NRLIB: ${OUT}/KONVERT.o ${MID}/REAL.spad
	@ echo 0 making ${MID}/REAL.NRLIB from ${MID}/REAL.spad
	@ (cd ${MID} ; 	echo ')co REAL.spad' | ${INTERPSYS} )

@
<<REAL.spad (SPAD from IN)>>=
${MID}/REAL.spad: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/REAL.spad from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf REAL.NRLIB ; \
	${SPADBIN}/notangle -R"category REAL RealConstant" ${IN}/sf.spad.pamphlet >REAL.spad )

@
<<RNS-.o (O from NRLIB)>>=
${OUT}/RNS-.o: ${MID}/RNS.NRLIB
	@ echo 0 making ${OUT}/RNS-.o from ${MID}/RNS-.NRLIB
	@ cp ${MID}/RNS-.NRLIB/code.o ${OUT}/RNS-.o

@
<<RNS-.NRLIB (NRLIB from MID)>>=
${MID}/RNS-.NRLIB: ${OUT}/TYPE.o ${MID}/RNS.spad 
	@ echo 0 making ${MID}/RNS-.NRLIB from ${MID}/RNS.spad
	@ (cd ${MID} ; 	echo ')co RNS.spad' | ${INTERPSYS} )

@
<<RNS.o (O from NRLIB)>>=
${OUT}/RNS.o: ${MID}/RNS.NRLIB
	@ echo 0 making ${OUT}/RNS.o from ${MID}/RNS.NRLIB
	@ cp ${MID}/RNS.NRLIB/code.o ${OUT}/RNS.o

@
<<RNS.NRLIB (NRLIB from MID)>>=
${MID}/RNS.NRLIB: ${MID}/RNS.spad
	@ echo 0 making ${MID}/RNS.NRLIB from ${MID}/RNS.spad
	@ (cd ${MID} ; 	echo ')co RNS.spad' | ${INTERPSYS} )

@
<<RNS.spad (SPAD from IN)>>=
${MID}/RNS.spad: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/RNS.spad from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RNS.NRLIB ; \
	${SPADBIN}/notangle -R"category RNS RealNumberSystem" ${IN}/sf.spad.pamphlet >RNS.spad )

@
<<RNS-.o (BOOTSTRAP from MID)>>=
${MID}/RNS-.o: ${MID}/RNS-.lsp 
	@ echo 0 making ${MID}/RNS-.o from ${MID}/RNS-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RNS-.lsp" :output-file "RNS-.o"))' | ${DEPSYS} )
	@ cp ${MID}/RNS-.o ${OUT}/RNS-.o

@
<<RNS-.lsp (LISP from IN)>>=
${MID}/RNS-.lsp: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/RNS-.lsp from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RNS-.NRLIB ; \
	rm -rf ${OUT}/RNS-.o ; \
	${SPADBIN}/notangle -R"RNS-.lsp BOOTSTRAP" ${IN}/sf.spad.pamphlet >RNS-.lsp )

@
<<RNS.o (BOOTSTRAP from MID)>>=
${MID}/RNS.o: ${MID}/RNS.lsp 
	@ echo 0 making ${MID}/RNS.o from ${MID}/RNS.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "RNS.lsp" :output-file "RNS.o"))' | ${DEPSYS} )
	@ cp ${MID}/RNS.o ${OUT}/RNS.o

@
<<RNS.lsp (LISP from IN)>>=
${MID}/RNS.lsp: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${MID}/RNS.lsp from ${IN}/sf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RNS.NRLIB ; \
	rm -rf ${OUT}/RNS.o ; \
	${SPADBIN}/notangle -R"RNS.lsp BOOTSTRAP" ${IN}/sf.spad.pamphlet >RNS.lsp )

@
<<sf.spad.dvi (DOC from IN)>>=
${DOC}/sf.spad.dvi: ${IN}/sf.spad.pamphlet
	@ echo 0 making ${DOC}/sf.spad.dvi from ${IN}/sf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sf.spad ; \
	rm -f ${DOC}/sf.spad.pamphlet ; \
	rm -f ${DOC}/sf.spad.tex ; \
	rm -f ${DOC}/sf.spad )

@
\subsection{sgcf.spad \cite{1}}
<<sgcf.spad (SPAD from IN)>>=
${MID}/sgcf.spad: ${IN}/sgcf.spad.pamphlet
	@ echo 0 making ${MID}/sgcf.spad from ${IN}/sgcf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sgcf.spad.pamphlet >sgcf.spad )

@
<<SGCF.o (O from NRLIB)>>=
${OUT}/SGCF.o: ${MID}/SGCF.NRLIB
	@ echo 0 making ${OUT}/SGCF.o from ${MID}/SGCF.NRLIB
	@ cp ${MID}/SGCF.NRLIB/code.o ${OUT}/SGCF.o

@
<<SGCF.NRLIB (NRLIB from MID)>>=
${MID}/SGCF.NRLIB: ${MID}/SGCF.spad
	@ echo 0 making ${MID}/SGCF.NRLIB from ${MID}/SGCF.spad
	@ (cd ${MID} ; 	echo ')co SGCF.spad' | ${INTERPSYS} )

@
<<SGCF.spad (SPAD from IN)>>=
${MID}/SGCF.spad: ${IN}/sgcf.spad.pamphlet
	@ echo 0 making ${MID}/SGCF.spad from ${IN}/sgcf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SGCF.NRLIB ; \
	${SPADBIN}/notangle -R"package SGCF SymmetricGroupCombinatoricFunctions" ${IN}/sgcf.spad.pamphlet >SGCF.spad )

@
<<sgcf.spad.dvi (DOC from IN)>>=
${DOC}/sgcf.spad.dvi: ${IN}/sgcf.spad.pamphlet
	@ echo 0 making ${DOC}/sgcf.spad.dvi from ${IN}/sgcf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sgcf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sgcf.spad ; \
	rm -f ${DOC}/sgcf.spad.pamphlet ; \
	rm -f ${DOC}/sgcf.spad.tex ; \
	rm -f ${DOC}/sgcf.spad )

@
\subsection{sign.spad \cite{1}}
<<sign.spad (SPAD from IN)>>=
${MID}/sign.spad: ${IN}/sign.spad.pamphlet
	@ echo 0 making ${MID}/sign.spad from ${IN}/sign.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sign.spad.pamphlet >sign.spad )

@
<<INPSIGN.o (O from NRLIB)>>=
${OUT}/INPSIGN.o: ${MID}/INPSIGN.NRLIB
	@ echo 0 making ${OUT}/INPSIGN.o from ${MID}/INPSIGN.NRLIB
	@ cp ${MID}/INPSIGN.NRLIB/code.o ${OUT}/INPSIGN.o

@
<<INPSIGN.NRLIB (NRLIB from MID)>>=
${MID}/INPSIGN.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/INPSIGN.spad
	@ echo 0 making ${MID}/INPSIGN.NRLIB from ${MID}/INPSIGN.spad
	@ (cd ${MID} ; 	echo ')co INPSIGN.spad' | ${INTERPSYS} )

@
<<INPSIGN.spad (SPAD from IN)>>=
${MID}/INPSIGN.spad: ${IN}/sign.spad.pamphlet
	@ echo 0 making ${MID}/INPSIGN.spad from ${IN}/sign.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INPSIGN.NRLIB ; \
	${SPADBIN}/notangle -R"package INPSIGN InnerPolySign" ${IN}/sign.spad.pamphlet >INPSIGN.spad )

@
<<LIMITRF.o (O from NRLIB)>>=
${OUT}/LIMITRF.o: ${MID}/LIMITRF.NRLIB
	@ echo 0 making ${OUT}/LIMITRF.o from ${MID}/LIMITRF.NRLIB
	@ cp ${MID}/LIMITRF.NRLIB/code.o ${OUT}/LIMITRF.o

@
<<LIMITRF.NRLIB (NRLIB from MID)>>=
${MID}/LIMITRF.NRLIB: ${MID}/LIMITRF.spad
	@ echo 0 making ${MID}/LIMITRF.NRLIB from ${MID}/LIMITRF.spad
	@ (cd ${MID} ; 	echo ')co LIMITRF.spad' | ${INTERPSYS} )

@
<<LIMITRF.spad (SPAD from IN)>>=
${MID}/LIMITRF.spad: ${IN}/sign.spad.pamphlet
	@ echo 0 making ${MID}/LIMITRF.spad from ${IN}/sign.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIMITRF.NRLIB ; \
	${SPADBIN}/notangle -R"package LIMITRF RationalFunctionLimitPackage" ${IN}/sign.spad.pamphlet >LIMITRF.spad )

@
<<SIGNRF.o (O from NRLIB)>>=
${OUT}/SIGNRF.o: ${MID}/SIGNRF.NRLIB
	@ echo 0 making ${OUT}/SIGNRF.o from ${MID}/SIGNRF.NRLIB
	@ cp ${MID}/SIGNRF.NRLIB/code.o ${OUT}/SIGNRF.o

@
<<SIGNRF.NRLIB (NRLIB from MID)>>=
${MID}/SIGNRF.NRLIB: ${MID}/SIGNRF.spad
	@ echo 0 making ${MID}/SIGNRF.NRLIB from ${MID}/SIGNRF.spad
	@ (cd ${MID} ; 	echo ')co SIGNRF.spad' | ${INTERPSYS} )

@
<<SIGNRF.spad (SPAD from IN)>>=
${MID}/SIGNRF.spad: ${IN}/sign.spad.pamphlet
	@ echo 0 making ${MID}/SIGNRF.spad from ${IN}/sign.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SIGNRF.NRLIB ; \
	${SPADBIN}/notangle -R"package SIGNRF RationalFunctionSign" ${IN}/sign.spad.pamphlet >SIGNRF.spad )

@
<<TOOLSIGN.o (O from NRLIB)>>=
${OUT}/TOOLSIGN.o: ${MID}/TOOLSIGN.NRLIB
	@ echo 0 making ${OUT}/TOOLSIGN.o from ${MID}/TOOLSIGN.NRLIB
	@ cp ${MID}/TOOLSIGN.NRLIB/code.o ${OUT}/TOOLSIGN.o

@
<<TOOLSIGN.NRLIB (NRLIB from MID)>>=
${MID}/TOOLSIGN.NRLIB: ${MID}/TOOLSIGN.spad
	@ echo 0 making ${MID}/TOOLSIGN.NRLIB from ${MID}/TOOLSIGN.spad
	@ (cd ${MID} ; 	echo ')co TOOLSIGN.spad' | ${INTERPSYS} )

@
<<TOOLSIGN.spad (SPAD from IN)>>=
${MID}/TOOLSIGN.spad: ${IN}/sign.spad.pamphlet
	@ echo 0 making ${MID}/TOOLSIGN.spad from ${IN}/sign.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TOOLSIGN.NRLIB ; \
	${SPADBIN}/notangle -R"package TOOLSIGN ToolsForSign" ${IN}/sign.spad.pamphlet >TOOLSIGN.spad )

@
<<sign.spad.dvi (DOC from IN)>>=
${DOC}/sign.spad.dvi: ${IN}/sign.spad.pamphlet
	@ echo 0 making ${DOC}/sign.spad.dvi from ${IN}/sign.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sign.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sign.spad ; \
	rm -f ${DOC}/sign.spad.pamphlet ; \
	rm -f ${DOC}/sign.spad.tex ; \
	rm -f ${DOC}/sign.spad )

@
\subsection{si.spad \cite{1}}
<<si.spad (SPAD from IN)>>=
${MID}/si.spad: ${IN}/si.spad.pamphlet
	@ echo 0 making ${MID}/si.spad from ${IN}/si.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/si.spad.pamphlet >si.spad )

@
<<SINT.o (O from NRLIB)>>=
${OUT}/SINT.o: ${MID}/SINT.NRLIB
	@ echo 0 making ${OUT}/SINT.o from ${MID}/SINT.NRLIB
	@ cp ${MID}/SINT.NRLIB/code.o ${OUT}/SINT.o

@
<<SINT.NRLIB (NRLIB from MID)>>=
${MID}/SINT.NRLIB: ${MID}/SINT.spad
	@ echo 0 making ${MID}/SINT.NRLIB from ${MID}/SINT.spad
	@ (cd ${MID} ; 	echo ')co SINT.spad' | ${INTERPSYS} )

@
<<SINT.spad (SPAD from IN)>>=
${MID}/SINT.spad: ${IN}/si.spad.pamphlet
	@ echo 0 making ${MID}/SINT.spad from ${IN}/si.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SINT.NRLIB ; \
	${SPADBIN}/notangle -R"domain SINT SingleInteger" ${IN}/si.spad.pamphlet >SINT.spad )

@
<<SINT.o (BOOTSTRAP from MID)>>=
${MID}/SINT.o: ${MID}/SINT.lsp
	@ echo 0 making ${MID}/SINT.o from ${MID}/SINT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "SINT.lsp" :output-file "SINT.o"))' | ${DEPSYS} )
	@ cp ${MID}/SINT.o ${OUT}/SINT.o

@
<<SINT.lsp (LISP from IN)>>=
${MID}/SINT.lsp: ${IN}/si.spad.pamphlet
	@ echo 0 making ${MID}/SINT.lsp from ${IN}/si.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SINT.NRLIB ; \
	rm -rf ${OUT}/SINT.o ; \
	${SPADBIN}/notangle -R"SINT.lsp BOOTSTRAP" ${IN}/si.spad.pamphlet >SINT.lsp )

@
<<INS-.o (O from NRLIB)>>=
${OUT}/INS-.o: ${MID}/INS.NRLIB
	@ echo 0 making ${OUT}/INS-.o from ${MID}/INS-.NRLIB
	@ cp ${MID}/INS-.NRLIB/code.o ${OUT}/INS-.o

@
<<INS-.NRLIB (NRLIB from MID)>>=
${MID}/INS-.NRLIB: ${OUT}/TYPE.o ${MID}/INS.spad 
	@ echo 0 making ${MID}/INS-.NRLIB from ${MID}/INS.spad
	@ (cd ${MID} ; 	echo ')co INS.spad' | ${INTERPSYS} )

@
<<INS.o (O from NRLIB)>>=
${OUT}/INS.o: ${MID}/INS.NRLIB
	@ echo 0 making ${OUT}/INS.o from ${MID}/INS.NRLIB
	@ cp ${MID}/INS.NRLIB/code.o ${OUT}/INS.o

@
<<INS.NRLIB (NRLIB from MID)>>=
${MID}/INS.NRLIB: ${MID}/INS.spad
	@ echo 0 making ${MID}/INS.NRLIB from ${MID}/INS.spad
	@ (cd ${MID} ; 	echo ')co INS.spad' | ${INTERPSYS} )

@
<<INS.spad (SPAD from IN)>>=
${MID}/INS.spad: ${IN}/si.spad.pamphlet
	@ echo 0 making ${MID}/INS.spad from ${IN}/si.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INS.NRLIB ; \
	${SPADBIN}/notangle -R"category INS IntegerNumberSystem" ${IN}/si.spad.pamphlet >INS.spad )

@
<<INS-.o (BOOTSTRAP from MID)>>=
${MID}/INS-.o: ${MID}/INS-.lsp 
	@ echo 0 making ${MID}/INS-.o from ${MID}/INS-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "INS-.lsp" :output-file "INS-.o"))' | ${DEPSYS} )
	@ cp ${MID}/INS-.o ${OUT}/INS-.o

@
<<INS-.lsp (LISP from IN)>>=
${MID}/INS-.lsp: ${IN}/si.spad.pamphlet
	@ echo 0 making ${MID}/INS-.lsp from ${IN}/si.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INS-.NRLIB ; \
	rm -rf ${OUT}/INS-.o ; \
	${SPADBIN}/notangle -R"INS-.lsp BOOTSTRAP" ${IN}/si.spad.pamphlet >INS-.lsp )

@
<<INS.o (BOOTSTRAP from MID)>>=
${MID}/INS.o: ${MID}/INS.lsp
	@ echo 0 making ${MID}/INS.o from ${MID}/INS.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "INS.lsp" :output-file "INS.o"))' | ${DEPSYS} )
	@ cp ${MID}/INS.o ${OUT}/INS.o

@
<<INS.lsp (LISP from IN)>>=
${MID}/INS.lsp: ${IN}/si.spad.pamphlet
	@ echo 0 making ${MID}/INS.lsp from ${IN}/si.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INS.NRLIB ; \
	rm -rf ${OUT}/INS.o ; \
	${SPADBIN}/notangle -R"INS.lsp BOOTSTRAP" ${IN}/si.spad.pamphlet >INS.lsp )

@
<<si.spad.dvi (DOC from IN)>>=
${DOC}/si.spad.dvi: ${IN}/si.spad.pamphlet
	@ echo 0 making ${DOC}/si.spad.dvi from ${IN}/si.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/si.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} si.spad ; \
	rm -f ${DOC}/si.spad.pamphlet ; \
	rm -f ${DOC}/si.spad.tex ; \
	rm -f ${DOC}/si.spad )

@
\subsection{smith.spad \cite{1}}
<<smith.spad (SPAD from IN)>>=
${MID}/smith.spad: ${IN}/smith.spad.pamphlet
	@ echo 0 making ${MID}/smith.spad from ${IN}/smith.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/smith.spad.pamphlet >smith.spad )

@
<<SMITH.o (O from NRLIB)>>=
${OUT}/SMITH.o: ${MID}/SMITH.NRLIB
	@ echo 0 making ${OUT}/SMITH.o from ${MID}/SMITH.NRLIB
	@ cp ${MID}/SMITH.NRLIB/code.o ${OUT}/SMITH.o

@
<<SMITH.NRLIB (NRLIB from MID)>>=
${MID}/SMITH.NRLIB: ${MID}/SMITH.spad
	@ echo 0 making ${MID}/SMITH.NRLIB from ${MID}/SMITH.spad
	@ (cd ${MID} ; 	echo ')co SMITH.spad' | ${INTERPSYS} )

@
<<SMITH.spad (SPAD from IN)>>=
${MID}/SMITH.spad: ${IN}/smith.spad.pamphlet
	@ echo 0 making ${MID}/SMITH.spad from ${IN}/smith.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SMITH.NRLIB ; \
	${SPADBIN}/notangle -R"package SMITH SmithNormalForm" ${IN}/smith.spad.pamphlet >SMITH.spad )

@
<<smith.spad.dvi (DOC from IN)>>=
${DOC}/smith.spad.dvi: ${IN}/smith.spad.pamphlet
	@ echo 0 making ${DOC}/smith.spad.dvi from ${IN}/smith.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/smith.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} smith.spad ; \
	rm -f ${DOC}/smith.spad.pamphlet ; \
	rm -f ${DOC}/smith.spad.tex ; \
	rm -f ${DOC}/smith.spad )

@
\subsection{solvedio.spad \cite{1}}
<<solvedio.spad (SPAD from IN)>>=
${MID}/solvedio.spad: ${IN}/solvedio.spad.pamphlet
	@ echo 0 making ${MID}/solvedio.spad from ${IN}/solvedio.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/solvedio.spad.pamphlet >solvedio.spad )

@
<<DIOSP.o (O from NRLIB)>>=
${OUT}/DIOSP.o: ${MID}/DIOSP.NRLIB
	@ echo 0 making ${OUT}/DIOSP.o from ${MID}/DIOSP.NRLIB
	@ cp ${MID}/DIOSP.NRLIB/code.o ${OUT}/DIOSP.o

@
<<DIOSP.NRLIB (NRLIB from MID)>>=
${MID}/DIOSP.NRLIB: ${MID}/DIOSP.spad
	@ echo 0 making ${MID}/DIOSP.NRLIB from ${MID}/DIOSP.spad
	@ (cd ${MID} ; 	echo ')co DIOSP.spad' | ${INTERPSYS} )

@
<<DIOSP.spad (SPAD from IN)>>=
${MID}/DIOSP.spad: ${IN}/solvedio.spad.pamphlet
	@ echo 0 making ${MID}/DIOSP.spad from ${IN}/solvedio.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIOSP.NRLIB ; \
	${SPADBIN}/notangle -R"package DIOSP DiophantineSolutionPackage" ${IN}/solvedio.spad.pamphlet >DIOSP.spad )

@
<<solvedio.spad.dvi (DOC from IN)>>=
${DOC}/solvedio.spad.dvi: ${IN}/solvedio.spad.pamphlet
	@ echo 0 making ${DOC}/solvedio.spad.dvi from ${IN}/solvedio.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/solvedio.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} solvedio.spad ; \
	rm -f ${DOC}/solvedio.spad.pamphlet ; \
	rm -f ${DOC}/solvedio.spad.tex ; \
	rm -f ${DOC}/solvedio.spad )

@
\subsection{solvefor.spad \cite{1}}
<<solvefor.spad (SPAD from IN)>>=
${MID}/solvefor.spad: ${IN}/solvefor.spad.pamphlet
	@ echo 0 making ${MID}/solvefor.spad from ${IN}/solvefor.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/solvefor.spad.pamphlet >solvefor.spad )

@
<<SOLVEFOR.o (O from NRLIB)>>=
${OUT}/SOLVEFOR.o: ${MID}/SOLVEFOR.NRLIB
	@ echo 0 making ${OUT}/SOLVEFOR.o from ${MID}/SOLVEFOR.NRLIB
	@ cp ${MID}/SOLVEFOR.NRLIB/code.o ${OUT}/SOLVEFOR.o

@
<<SOLVEFOR.NRLIB (NRLIB from MID)>>=
${MID}/SOLVEFOR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SOLVEFOR.spad
	@ echo 0 making ${MID}/SOLVEFOR.NRLIB from ${MID}/SOLVEFOR.spad
	@ (cd ${MID} ; 	echo ')co SOLVEFOR.spad' | ${INTERPSYS} )

@
<<SOLVEFOR.spad (SPAD from IN)>>=
${MID}/SOLVEFOR.spad: ${IN}/solvefor.spad.pamphlet
	@ echo 0 making ${MID}/SOLVEFOR.spad from ${IN}/solvefor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SOLVEFOR.NRLIB ; \
	${SPADBIN}/notangle -R"package SOLVEFOR PolynomialSolveByFormulas" ${IN}/solvefor.spad.pamphlet >SOLVEFOR.spad )

@
<<solvefor.spad.dvi (DOC from IN)>>=
${DOC}/solvefor.spad.dvi: ${IN}/solvefor.spad.pamphlet
	@ echo 0 making ${DOC}/solvefor.spad.dvi from ${IN}/solvefor.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/solvefor.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} solvefor.spad ; \
	rm -f ${DOC}/solvefor.spad.pamphlet ; \
	rm -f ${DOC}/solvefor.spad.tex ; \
	rm -f ${DOC}/solvefor.spad )

@
\subsection{solvelin.spad \cite{1}}
<<solvelin.spad (SPAD from IN)>>=
${MID}/solvelin.spad: ${IN}/solvelin.spad.pamphlet
	@ echo 0 making ${MID}/solvelin.spad from ${IN}/solvelin.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/solvelin.spad.pamphlet >solvelin.spad )

@
<<LSMP.o (O from NRLIB)>>=
${OUT}/LSMP.o: ${MID}/LSMP.NRLIB
	@ echo 0 making ${OUT}/LSMP.o from ${MID}/LSMP.NRLIB
	@ cp ${MID}/LSMP.NRLIB/code.o ${OUT}/LSMP.o

@
<<LSMP.NRLIB (NRLIB from MID)>>=
${MID}/LSMP.NRLIB: ${MID}/LSMP.spad
	@ echo 0 making ${MID}/LSMP.NRLIB from ${MID}/LSMP.spad
	@ (cd ${MID} ; 	echo ')co LSMP.spad' | ${INTERPSYS} )

@
<<LSMP.spad (SPAD from IN)>>=
${MID}/LSMP.spad: ${IN}/solvelin.spad.pamphlet
	@ echo 0 making ${MID}/LSMP.spad from ${IN}/solvelin.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSMP.NRLIB ; \
	${SPADBIN}/notangle -R"package LSMP LinearSystemMatrixPackage" ${IN}/solvelin.spad.pamphlet >LSMP.spad )

@
<<LSMP1.o (O from NRLIB)>>=
${OUT}/LSMP1.o: ${MID}/LSMP1.NRLIB
	@ echo 0 making ${OUT}/LSMP1.o from ${MID}/LSMP1.NRLIB
	@ cp ${MID}/LSMP1.NRLIB/code.o ${OUT}/LSMP1.o

@
<<LSMP1.NRLIB (NRLIB from MID)>>=
${MID}/LSMP1.NRLIB: ${MID}/LSMP1.spad
	@ echo 0 making ${MID}/LSMP1.NRLIB from ${MID}/LSMP1.spad
	@ (cd ${MID} ; 	echo ')co LSMP1.spad' | ${INTERPSYS} )

@
<<LSMP1.spad (SPAD from IN)>>=
${MID}/LSMP1.spad: ${IN}/solvelin.spad.pamphlet
	@ echo 0 making ${MID}/LSMP1.spad from ${IN}/solvelin.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSMP1.NRLIB ; \
	${SPADBIN}/notangle -R"package LSMP1 LinearSystemMatrixPackage1" ${IN}/solvelin.spad.pamphlet >LSMP1.spad )

@
<<LSPP.o (O from NRLIB)>>=
${OUT}/LSPP.o: ${MID}/LSPP.NRLIB
	@ echo 0 making ${OUT}/LSPP.o from ${MID}/LSPP.NRLIB
	@ cp ${MID}/LSPP.NRLIB/code.o ${OUT}/LSPP.o

@
<<LSPP.NRLIB (NRLIB from MID)>>=
${MID}/LSPP.NRLIB: ${MID}/LSPP.spad
	@ echo 0 making ${MID}/LSPP.NRLIB from ${MID}/LSPP.spad
	@ (cd ${MID} ; 	echo ')co LSPP.spad' | ${INTERPSYS} )

@
<<LSPP.spad (SPAD from IN)>>=
${MID}/LSPP.spad: ${IN}/solvelin.spad.pamphlet
	@ echo 0 making ${MID}/LSPP.spad from ${IN}/solvelin.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LSPP.NRLIB ; \
	${SPADBIN}/notangle -R"package LSPP LinearSystemPolynomialPackage" ${IN}/solvelin.spad.pamphlet >LSPP.spad )

@
<<solvelin.spad.dvi (DOC from IN)>>=
${DOC}/solvelin.spad.dvi: ${IN}/solvelin.spad.pamphlet
	@ echo 0 making ${DOC}/solvelin.spad.dvi from ${IN}/solvelin.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/solvelin.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} solvelin.spad ; \
	rm -f ${DOC}/solvelin.spad.pamphlet ; \
	rm -f ${DOC}/solvelin.spad.tex ; \
	rm -f ${DOC}/solvelin.spad )

@
\subsection{solverad.spad \cite{1}}
<<solverad.spad (SPAD from IN)>>=
${MID}/solverad.spad: ${IN}/solverad.spad.pamphlet
	@ echo 0 making ${MID}/solverad.spad from ${IN}/solverad.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/solverad.spad.pamphlet >solverad.spad )

@
<<SOLVERAD.o (O from NRLIB)>>=
${OUT}/SOLVERAD.o: ${MID}/SOLVERAD.NRLIB
	@ echo 0 making ${OUT}/SOLVERAD.o from ${MID}/SOLVERAD.NRLIB
	@ cp ${MID}/SOLVERAD.NRLIB/code.o ${OUT}/SOLVERAD.o

@
<<SOLVERAD.NRLIB (NRLIB from MID)>>=
${MID}/SOLVERAD.NRLIB: ${MID}/SOLVERAD.spad
	@ echo 0 making ${MID}/SOLVERAD.NRLIB from ${MID}/SOLVERAD.spad
	@ (cd ${MID} ; 	echo ')co SOLVERAD.spad' | ${INTERPSYS} )

@
<<SOLVERAD.spad (SPAD from IN)>>=
${MID}/SOLVERAD.spad: ${IN}/solverad.spad.pamphlet
	@ echo 0 making ${MID}/SOLVERAD.spad from ${IN}/solverad.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SOLVERAD.NRLIB ; \
	${SPADBIN}/notangle -R"package SOLVERAD RadicalSolvePackage" ${IN}/solverad.spad.pamphlet >SOLVERAD.spad )

@
<<solverad.spad.dvi (DOC from IN)>>=
${DOC}/solverad.spad.dvi: ${IN}/solverad.spad.pamphlet
	@ echo 0 making ${DOC}/solverad.spad.dvi from ${IN}/solverad.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/solverad.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} solverad.spad ; \
	rm -f ${DOC}/solverad.spad.pamphlet ; \
	rm -f ${DOC}/solverad.spad.tex ; \
	rm -f ${DOC}/solverad.spad )

@
\subsection{sortpak.spad \cite{1}}
<<sortpak.spad (SPAD from IN)>>=
${MID}/sortpak.spad: ${IN}/sortpak.spad.pamphlet
	@ echo 0 making ${MID}/sortpak.spad from ${IN}/sortpak.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sortpak.spad.pamphlet >sortpak.spad )

@
<<SORTPAK.o (O from NRLIB)>>=
${OUT}/SORTPAK.o: ${MID}/SORTPAK.NRLIB
	@ echo 0 making ${OUT}/SORTPAK.o from ${MID}/SORTPAK.NRLIB
	@ cp ${MID}/SORTPAK.NRLIB/code.o ${OUT}/SORTPAK.o

@
<<SORTPAK.NRLIB (NRLIB from MID)>>=
${MID}/SORTPAK.NRLIB: ${MID}/SORTPAK.spad
	@ echo 0 making ${MID}/SORTPAK.NRLIB from ${MID}/SORTPAK.spad
	@ (cd ${MID} ; 	echo ')co SORTPAK.spad' | ${INTERPSYS} )

@
<<SORTPAK.spad (SPAD from IN)>>=
${MID}/SORTPAK.spad: ${IN}/sortpak.spad.pamphlet
	@ echo 0 making ${MID}/SORTPAK.spad from ${IN}/sortpak.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SORTPAK.NRLIB ; \
	${SPADBIN}/notangle -R"package SORTPAK SortPackage" ${IN}/sortpak.spad.pamphlet >SORTPAK.spad )

@
<<sortpak.spad.dvi (DOC from IN)>>=
${DOC}/sortpak.spad.dvi: ${IN}/sortpak.spad.pamphlet
	@ echo 0 making ${DOC}/sortpak.spad.dvi from ${IN}/sortpak.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sortpak.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sortpak.spad ; \
	rm -f ${DOC}/sortpak.spad.pamphlet ; \
	rm -f ${DOC}/sortpak.spad.tex ; \
	rm -f ${DOC}/sortpak.spad )

@
\subsection{space.spad \cite{1}}
<<space.spad (SPAD from IN)>>=
${MID}/space.spad: ${IN}/space.spad.pamphlet
	@ echo 0 making ${MID}/space.spad from ${IN}/space.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/space.spad.pamphlet >space.spad )

@
<<SPACEC.o (O from NRLIB)>>=
${OUT}/SPACEC.o: ${MID}/SPACEC.NRLIB
	@ echo 0 making ${OUT}/SPACEC.o from ${MID}/SPACEC.NRLIB
	@ cp ${MID}/SPACEC.NRLIB/code.o ${OUT}/SPACEC.o

@
<<SPACEC.NRLIB (NRLIB from MID)>>=
${MID}/SPACEC.NRLIB: ${MID}/SPACEC.spad
	@ echo 0 making ${MID}/SPACEC.NRLIB from ${MID}/SPACEC.spad
	@ (cd ${MID} ; 	echo ')co SPACEC.spad' | ${INTERPSYS} )

@
<<SPACEC.spad (SPAD from IN)>>=
${MID}/SPACEC.spad: ${IN}/space.spad.pamphlet
	@ echo 0 making ${MID}/SPACEC.spad from ${IN}/space.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SPACEC.NRLIB ; \
	${SPADBIN}/notangle -R"category SPACEC ThreeSpaceCategory" ${IN}/space.spad.pamphlet >SPACEC.spad )

@
<<SPACE3.o (O from NRLIB)>>=
${OUT}/SPACE3.o: ${MID}/SPACE3.NRLIB
	@ echo 0 making ${OUT}/SPACE3.o from ${MID}/SPACE3.NRLIB
	@ cp ${MID}/SPACE3.NRLIB/code.o ${OUT}/SPACE3.o

@
<<SPACE3.NRLIB (NRLIB from MID)>>=
${MID}/SPACE3.NRLIB: ${MID}/SPACE3.spad
	@ echo 0 making ${MID}/SPACE3.NRLIB from ${MID}/SPACE3.spad
	@ (cd ${MID} ; 	echo ')co SPACE3.spad' | ${INTERPSYS} )

@
<<SPACE3.spad (SPAD from IN)>>=
${MID}/SPACE3.spad: ${IN}/space.spad.pamphlet
	@ echo 0 making ${MID}/SPACE3.spad from ${IN}/space.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SPACE3.NRLIB ; \
	${SPADBIN}/notangle -R"domain SPACE3 ThreeSpace" ${IN}/space.spad.pamphlet >SPACE3.spad )

@
<<TOPSP.o (O from NRLIB)>>=
${OUT}/TOPSP.o: ${MID}/TOPSP.NRLIB
	@ echo 0 making ${OUT}/TOPSP.o from ${MID}/TOPSP.NRLIB
	@ cp ${MID}/TOPSP.NRLIB/code.o ${OUT}/TOPSP.o

@
<<TOPSP.NRLIB (NRLIB from MID)>>=
${MID}/TOPSP.NRLIB: ${MID}/TOPSP.spad
	@ echo 0 making ${MID}/TOPSP.NRLIB from ${MID}/TOPSP.spad
	@ (cd ${MID} ; 	echo ')co TOPSP.spad' | ${INTERPSYS} )

@
<<TOPSP.spad (SPAD from IN)>>=
${MID}/TOPSP.spad: ${IN}/space.spad.pamphlet
	@ echo 0 making ${MID}/TOPSP.spad from ${IN}/space.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TOPSP.NRLIB ; \
	${SPADBIN}/notangle -R"package TOPSP TopLevelThreeSpace" ${IN}/space.spad.pamphlet >TOPSP.spad )

@
<<space.spad.dvi (DOC from IN)>>=
${DOC}/space.spad.dvi: ${IN}/space.spad.pamphlet
	@ echo 0 making ${DOC}/space.spad.dvi from ${IN}/space.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/space.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} space.spad ; \
	rm -f ${DOC}/space.spad.pamphlet ; \
	rm -f ${DOC}/space.spad.tex ; \
	rm -f ${DOC}/space.spad )

@
\subsection{special.spad \cite{1}}
<<special.spad (SPAD from IN)>>=
${MID}/special.spad: ${IN}/special.spad.pamphlet
	@ echo 0 making ${MID}/special.spad from ${IN}/special.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/special.spad.pamphlet >special.spad )

@
<<DFSFUN.o (O from NRLIB)>>=
${OUT}/DFSFUN.o: ${MID}/DFSFUN.NRLIB
	@ echo 0 making ${OUT}/DFSFUN.o from ${MID}/DFSFUN.NRLIB
	@ cp ${MID}/DFSFUN.NRLIB/code.o ${OUT}/DFSFUN.o

@
<<DFSFUN.NRLIB (NRLIB from MID)>>=
${MID}/DFSFUN.NRLIB: ${MID}/DFSFUN.spad
	@ echo 0 making ${MID}/DFSFUN.NRLIB from ${MID}/DFSFUN.spad
	@ (cd ${MID} ; 	echo ')co DFSFUN.spad' | ${INTERPSYS} )

@
<<DFSFUN.spad (SPAD from IN)>>=
${MID}/DFSFUN.spad: ${IN}/special.spad.pamphlet
	@ echo 0 making ${MID}/DFSFUN.spad from ${IN}/special.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DFSFUN.NRLIB ; \
	${SPADBIN}/notangle -R"package DFSFUN DoubleFloatSpecialFunctions" ${IN}/special.spad.pamphlet >DFSFUN.spad )

@
<<NTPOLFN.o (O from NRLIB)>>=
${OUT}/NTPOLFN.o: ${MID}/NTPOLFN.NRLIB
	@ echo 0 making ${OUT}/NTPOLFN.o from ${MID}/NTPOLFN.NRLIB
	@ cp ${MID}/NTPOLFN.NRLIB/code.o ${OUT}/NTPOLFN.o

@
<<NTPOLFN.NRLIB (NRLIB from MID)>>=
${MID}/NTPOLFN.NRLIB: ${MID}/NTPOLFN.spad
	@ echo 0 making ${MID}/NTPOLFN.NRLIB from ${MID}/NTPOLFN.spad
	@ (cd ${MID} ; 	echo ')co NTPOLFN.spad' | ${INTERPSYS} )

@
<<NTPOLFN.spad (SPAD from IN)>>=
${MID}/NTPOLFN.spad: ${IN}/special.spad.pamphlet
	@ echo 0 making ${MID}/NTPOLFN.spad from ${IN}/special.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NTPOLFN.NRLIB ; \
	${SPADBIN}/notangle -R"package NTPOLFN NumberTheoreticPolynomialFunctions" ${IN}/special.spad.pamphlet >NTPOLFN.spad )

@
<<ORTHPOL.o (O from NRLIB)>>=
${OUT}/ORTHPOL.o: ${MID}/ORTHPOL.NRLIB
	@ echo 0 making ${OUT}/ORTHPOL.o from ${MID}/ORTHPOL.NRLIB
	@ cp ${MID}/ORTHPOL.NRLIB/code.o ${OUT}/ORTHPOL.o

@
<<ORTHPOL.NRLIB (NRLIB from MID)>>=
${MID}/ORTHPOL.NRLIB: ${MID}/ORTHPOL.spad
	@ echo 0 making ${MID}/ORTHPOL.NRLIB from ${MID}/ORTHPOL.spad
	@ (cd ${MID} ; 	echo ')co ORTHPOL.spad' | ${INTERPSYS} )

@
<<ORTHPOL.spad (SPAD from IN)>>=
${MID}/ORTHPOL.spad: ${IN}/special.spad.pamphlet
	@ echo 0 making ${MID}/ORTHPOL.spad from ${IN}/special.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ORTHPOL.NRLIB ; \
	${SPADBIN}/notangle -R"package ORTHPOL OrthogonalPolynomialFunctions" ${IN}/special.spad.pamphlet >ORTHPOL.spad )

@
<<special.spad.dvi (DOC from IN)>>=
${DOC}/special.spad.dvi: ${IN}/special.spad.pamphlet
	@ echo 0 making ${DOC}/special.spad.dvi from ${IN}/special.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/special.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} special.spad ; \
	rm -f ${DOC}/special.spad.pamphlet ; \
	rm -f ${DOC}/special.spad.tex ; \
	rm -f ${DOC}/special.spad )

@
\subsection{sregset.spad \cite{1}}
<<sregset.spad (SPAD from IN)>>=
${MID}/sregset.spad: ${IN}/sregset.spad.pamphlet
	@ echo 0 making ${MID}/sregset.spad from ${IN}/sregset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sregset.spad.pamphlet >sregset.spad )

@
<<sregset.spad.dvi (DOC from IN)>>=
${DOC}/sregset.spad.dvi: ${IN}/sregset.spad.pamphlet
	@ echo 0 making ${DOC}/sregset.spad.dvi from ${IN}/sregset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sregset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sregset.spad ; \
	rm -f ${DOC}/sregset.spad.pamphlet ; \
	rm -f ${DOC}/sregset.spad.tex ; \
	rm -f ${DOC}/sregset.spad )

@
\subsection{s.spad \cite{1}}
<<s.spad (SPAD from IN)>>=
${MID}/s.spad: ${IN}/s.spad.pamphlet
	@ echo 0 making ${MID}/s.spad from ${IN}/s.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/s.spad.pamphlet >s.spad )

@
<<NAGS.o (O from NRLIB)>>=
${OUT}/NAGS.o: ${MID}/NAGS.NRLIB
	@ echo 0 making ${OUT}/NAGS.o from ${MID}/NAGS.NRLIB
	@ cp ${MID}/NAGS.NRLIB/code.o ${OUT}/NAGS.o

@
<<NAGS.NRLIB (NRLIB from MID)>>=
${MID}/NAGS.NRLIB: ${MID}/NAGS.spad
	@ echo 0 making ${MID}/NAGS.NRLIB from ${MID}/NAGS.spad
	@ (cd ${MID} ; 	echo ')co NAGS.spad' | ${INTERPSYS} )

@
<<NAGS.spad (SPAD from IN)>>=
${MID}/NAGS.spad: ${IN}/s.spad.pamphlet
	@ echo 0 making ${MID}/NAGS.spad from ${IN}/s.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NAGS.NRLIB ; \
	${SPADBIN}/notangle -R"package NAGS NagSpecialFunctionsPackage" ${IN}/s.spad.pamphlet >NAGS.spad )

@
<<s.spad.dvi (DOC from IN)>>=
${DOC}/s.spad.dvi: ${IN}/s.spad.pamphlet
	@ echo 0 making ${DOC}/s.spad.dvi from ${IN}/s.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/s.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} s.spad ; \
	rm -f ${DOC}/s.spad.pamphlet ; \
	rm -f ${DOC}/s.spad.tex ; \
	rm -f ${DOC}/s.spad )

@
\subsection{stream.spad \cite{1}}
<<stream.spad (SPAD from IN)>>=
${MID}/stream.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/stream.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/stream.spad.pamphlet >stream.spad )

@
<<CSTTOOLS.o (O from NRLIB)>>=
${OUT}/CSTTOOLS.o: ${MID}/CSTTOOLS.NRLIB
	@ echo 0 making ${OUT}/CSTTOOLS.o from ${MID}/CSTTOOLS.NRLIB
	@ cp ${MID}/CSTTOOLS.NRLIB/code.o ${OUT}/CSTTOOLS.o

@
<<CSTTOOLS.NRLIB (NRLIB from MID)>>=
${MID}/CSTTOOLS.NRLIB: ${MID}/CSTTOOLS.spad
	@ echo 0 making ${MID}/CSTTOOLS.NRLIB from ${MID}/CSTTOOLS.spad
	@ (cd ${MID} ; 	echo ')co CSTTOOLS.spad' | ${INTERPSYS} )

@
<<CSTTOOLS.spad (SPAD from IN)>>=
${MID}/CSTTOOLS.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/CSTTOOLS.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CSTTOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package CSTTOOLS CyclicStreamTools" ${IN}/stream.spad.pamphlet >CSTTOOLS.spad )

@
<<LZSTAGG-.o (O from NRLIB)>>=
${OUT}/LZSTAGG-.o: ${MID}/LZSTAGG.NRLIB
	@ echo 0 making ${OUT}/LZSTAGG-.o from ${MID}/LZSTAGG-.NRLIB
	@ cp ${MID}/LZSTAGG-.NRLIB/code.o ${OUT}/LZSTAGG-.o

@
<<LZSTAGG-.NRLIB (NRLIB from MID)>>=
${MID}/LZSTAGG-.NRLIB: ${OUT}/TYPE.o ${MID}/LZSTAGG.spad 
	@ echo 0 making ${MID}/LZSTAGG-.NRLIB from ${MID}/LZSTAGG.spad
	@ (cd ${MID} ; 	echo ')co LZSTAGG.spad' | ${INTERPSYS} )

@
<<LZSTAGG.o (O from NRLIB)>>=
${OUT}/LZSTAGG.o: ${MID}/LZSTAGG.NRLIB
	@ echo 0 making ${OUT}/LZSTAGG.o from ${MID}/LZSTAGG.NRLIB
	@ cp ${MID}/LZSTAGG.NRLIB/code.o ${OUT}/LZSTAGG.o

@
<<LZSTAGG.NRLIB (NRLIB from MID)>>=
${MID}/LZSTAGG.NRLIB: ${MID}/LZSTAGG.spad
	@ echo 0 making ${MID}/LZSTAGG.NRLIB from ${MID}/LZSTAGG.spad
	@ (cd ${MID} ; 	echo ')co LZSTAGG.spad' | ${INTERPSYS} )

@
<<LZSTAGG.spad (SPAD from IN)>>=
${MID}/LZSTAGG.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/LZSTAGG.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LZSTAGG.NRLIB ; \
	${SPADBIN}/notangle -R"category LZSTAGG LazyStreamAggregate" ${IN}/stream.spad.pamphlet >LZSTAGG.spad )

@
<<STREAM.o (O from NRLIB)>>=
${OUT}/STREAM.o: ${MID}/STREAM.NRLIB
	@ echo 0 making ${OUT}/STREAM.o from ${MID}/STREAM.NRLIB
	@ cp ${MID}/STREAM.NRLIB/code.o ${OUT}/STREAM.o

@
<<STREAM.NRLIB (NRLIB from MID)>>=
${MID}/STREAM.NRLIB: ${MID}/STREAM.spad
	@ echo 0 making ${MID}/STREAM.NRLIB from ${MID}/STREAM.spad
	@ (cd ${MID} ; 	echo ')co STREAM.spad' | ${INTERPSYS} )

@
<<STREAM.spad (SPAD from IN)>>=
${MID}/STREAM.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/STREAM.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STREAM.NRLIB ; \
	${SPADBIN}/notangle -R"domain STREAM Stream" ${IN}/stream.spad.pamphlet >STREAM.spad )

@
<<STREAM1.o (O from NRLIB)>>=
${OUT}/STREAM1.o: ${MID}/STREAM1.NRLIB
	@ echo 0 making ${OUT}/STREAM1.o from ${MID}/STREAM1.NRLIB
	@ cp ${MID}/STREAM1.NRLIB/code.o ${OUT}/STREAM1.o

@
<<STREAM1.NRLIB (NRLIB from MID)>>=
${MID}/STREAM1.NRLIB: ${OUT}/TYPE.o ${MID}/STREAM1.spad
	@ echo 0 making ${MID}/STREAM1.NRLIB from ${MID}/STREAM1.spad
	@ (cd ${MID} ; 	echo ')co STREAM1.spad' | ${INTERPSYS} )

@
<<STREAM1.spad (SPAD from IN)>>=
${MID}/STREAM1.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/STREAM1.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STREAM1.NRLIB ; \
	${SPADBIN}/notangle -R"package STREAM1 StreamFunctions1" ${IN}/stream.spad.pamphlet >STREAM1.spad )

@
<<STREAM2.o (O from NRLIB)>>=
${OUT}/STREAM2.o: ${MID}/STREAM2.NRLIB
	@ echo 0 making ${OUT}/STREAM2.o from ${MID}/STREAM2.NRLIB
	@ cp ${MID}/STREAM2.NRLIB/code.o ${OUT}/STREAM2.o

@
<<STREAM2.NRLIB (NRLIB from MID)>>=
${MID}/STREAM2.NRLIB: ${OUT}/TYPE.o ${MID}/STREAM2.spad
	@ echo 0 making ${MID}/STREAM2.NRLIB from ${MID}/STREAM2.spad
	@ (cd ${MID} ; 	echo ')co STREAM2.spad' | ${INTERPSYS} )

@
<<STREAM2.spad (SPAD from IN)>>=
${MID}/STREAM2.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/STREAM2.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STREAM2.NRLIB ; \
	${SPADBIN}/notangle -R"package STREAM2 StreamFunctions2" ${IN}/stream.spad.pamphlet >STREAM2.spad )

@
<<STREAM3.o (O from NRLIB)>>=
${OUT}/STREAM3.o: ${MID}/STREAM3.NRLIB
	@ echo 0 making ${OUT}/STREAM3.o from ${MID}/STREAM3.NRLIB
	@ cp ${MID}/STREAM3.NRLIB/code.o ${OUT}/STREAM3.o

@
<<STREAM3.NRLIB (NRLIB from MID)>>=
${MID}/STREAM3.NRLIB: ${OUT}/TYPE.o ${MID}/STREAM3.spad
	@ echo 0 making ${MID}/STREAM3.NRLIB from ${MID}/STREAM3.spad
	@ (cd ${MID} ; 	echo ')co STREAM3.spad' | ${INTERPSYS} )

@
<<STREAM3.spad (SPAD from IN)>>=
${MID}/STREAM3.spad: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${MID}/STREAM3.spad from ${IN}/stream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STREAM3.NRLIB ; \
	${SPADBIN}/notangle -R"package STREAM3 StreamFunctions3" ${IN}/stream.spad.pamphlet >STREAM3.spad )

@
<<stream.spad.dvi (DOC from IN)>>=
${DOC}/stream.spad.dvi: ${IN}/stream.spad.pamphlet
	@ echo 0 making ${DOC}/stream.spad.dvi from ${IN}/stream.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/stream.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} stream.spad ; \
	rm -f ${DOC}/stream.spad.pamphlet ; \
	rm -f ${DOC}/stream.spad.tex ; \
	rm -f ${DOC}/stream.spad )

@
\subsection{string.spad \cite{1}}
<<string.spad (SPAD from IN)>>=
${MID}/string.spad: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/string.spad from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/string.spad.pamphlet >string.spad )

@
<<CCLASS.o (O from NRLIB)>>=
${OUT}/CCLASS.o: ${MID}/CCLASS.NRLIB
	@ echo 0 making ${OUT}/CCLASS.o from ${MID}/CCLASS.NRLIB
	@ cp ${MID}/CCLASS.NRLIB/code.o ${OUT}/CCLASS.o

@
<<CCLASS.NRLIB (NRLIB from MID)>>=
${MID}/CCLASS.NRLIB: ${MID}/CCLASS.spad
	@ echo 0 making ${MID}/CCLASS.NRLIB from ${MID}/CCLASS.spad
	@ (cd ${MID} ; 	echo ')co CCLASS.spad' | ${INTERPSYS} )

@
<<CCLASS.spad (SPAD from IN)>>=
${MID}/CCLASS.spad: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/CCLASS.spad from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CCLASS.NRLIB ; \
	${SPADBIN}/notangle -R"domain CCLASS CharacterClass" ${IN}/string.spad.pamphlet >CCLASS.spad )

@
<<CHAR.o (O from NRLIB)>>=
${OUT}/CHAR.o: ${MID}/CHAR.NRLIB
	@ echo 0 making ${OUT}/CHAR.o from ${MID}/CHAR.NRLIB
	@ cp ${MID}/CHAR.NRLIB/code.o ${OUT}/CHAR.o

@
<<CHAR.NRLIB (NRLIB from MID)>>=
${MID}/CHAR.NRLIB: ${MID}/CHAR.spad
	@ echo 0 making ${MID}/CHAR.NRLIB from ${MID}/CHAR.spad
	@ (cd ${MID} ; 	echo ')co CHAR.spad' | ${INTERPSYS} )

@
<<CHAR.spad (SPAD from IN)>>=
${MID}/CHAR.spad: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/CHAR.spad from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CHAR.NRLIB ; \
	${SPADBIN}/notangle -R"domain CHAR Character" ${IN}/string.spad.pamphlet >CHAR.spad )

@
<<CHAR.o (BOOTSTRAP from MID)>>=
${MID}/CHAR.o: ${MID}/CHAR.lsp
	@ echo 0 making ${MID}/CHAR.o from ${MID}/CHAR.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "CHAR.lsp" :output-file "CHAR.o"))' | ${DEPSYS} )
	@ cp ${MID}/CHAR.o ${OUT}/CHAR.o

@
<<CHAR.lsp (LISP from IN)>>=
${MID}/CHAR.lsp: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/CHAR.lsp from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CHAR.NRLIB ; \
	rm -rf ${OUT}/CHAR.o ; \
	${SPADBIN}/notangle -R"CHAR.lsp BOOTSTRAP" ${IN}/string.spad.pamphlet >CHAR.lsp )

@
<<ISTRING.o (O from NRLIB)>>=
${OUT}/ISTRING.o: ${MID}/ISTRING.NRLIB
	@ echo 0 making ${OUT}/ISTRING.o from ${MID}/ISTRING.NRLIB
	@ cp ${MID}/ISTRING.NRLIB/code.o ${OUT}/ISTRING.o

@
<<ISTRING.NRLIB (NRLIB from MID)>>=
${MID}/ISTRING.NRLIB: ${MID}/ISTRING.spad
	@ echo 0 making ${MID}/ISTRING.NRLIB from ${MID}/ISTRING.spad
	@ (cd ${MID} ; 	echo ')co ISTRING.spad' | ${INTERPSYS} )

@
<<ISTRING.spad (SPAD from IN)>>=
${MID}/ISTRING.spad: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/ISTRING.spad from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ISTRING.NRLIB ; \
	${SPADBIN}/notangle -R"domain ISTRING IndexedString" ${IN}/string.spad.pamphlet >ISTRING.spad )

@
<<ISTRING.o (BOOTSTRAP from MID)>>=
${MID}/ISTRING.o: ${MID}/ISTRING.lsp
	@ echo 0 making ${MID}/ISTRING.o from ${MID}/ISTRING.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "ISTRING.lsp" :output-file "ISTRING.o"))' | ${DEPSYS} )
	@ cp ${MID}/ISTRING.o ${OUT}/ISTRING.o

@
<<ISTRING.lsp (LISP from IN)>>=
${MID}/ISTRING.lsp: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/ISTRING.lsp from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ISTRING.NRLIB ; \
	rm -rf ${OUT}/ISTRING.o ; \
	${SPADBIN}/notangle -R"ISTRING.lsp BOOTSTRAP" ${IN}/string.spad.pamphlet >ISTRING.lsp )

@
<<STRICAT.o (O from NRLIB)>>=
${OUT}/STRICAT.o: ${MID}/STRICAT.NRLIB
	@ echo 0 making ${OUT}/STRICAT.o from ${MID}/STRICAT.NRLIB
	@ cp ${MID}/STRICAT.NRLIB/code.o ${OUT}/STRICAT.o

@
<<STRICAT.NRLIB (NRLIB from MID)>>=
${MID}/STRICAT.NRLIB: ${MID}/STRICAT.spad
	@ echo 0 making ${MID}/STRICAT.NRLIB from ${MID}/STRICAT.spad
	@ (cd ${MID} ; 	echo ')co STRICAT.spad' | ${INTERPSYS} )

@
<<STRICAT.spad (SPAD from IN)>>=
${MID}/STRICAT.spad: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/STRICAT.spad from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STRICAT.NRLIB ; \
	${SPADBIN}/notangle -R"category STRICAT StringCategory" ${IN}/string.spad.pamphlet >STRICAT.spad )

@
<<STRING.o (O from NRLIB)>>=
${OUT}/STRING.o: ${MID}/STRING.NRLIB
	@ echo 0 making ${OUT}/STRING.o from ${MID}/STRING.NRLIB
	@ cp ${MID}/STRING.NRLIB/code.o ${OUT}/STRING.o

@
<<STRING.NRLIB (NRLIB from MID)>>=
${MID}/STRING.NRLIB: ${MID}/STRING.spad
	@ echo 0 making ${MID}/STRING.NRLIB from ${MID}/STRING.spad
	@ (cd ${MID} ; 	echo ')co STRING.spad' | ${INTERPSYS} )

@
<<STRING.spad (SPAD from IN)>>=
${MID}/STRING.spad: ${IN}/string.spad.pamphlet
	@ echo 0 making ${MID}/STRING.spad from ${IN}/string.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STRING.NRLIB ; \
	${SPADBIN}/notangle -R"domain STRING String" ${IN}/string.spad.pamphlet >STRING.spad )

@
<<string.spad.dvi (DOC from IN)>>=
${DOC}/string.spad.dvi: ${IN}/string.spad.pamphlet
	@ echo 0 making ${DOC}/string.spad.dvi from ${IN}/string.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/string.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} string.spad ; \
	rm -f ${DOC}/string.spad.pamphlet ; \
	rm -f ${DOC}/string.spad.tex ; \
	rm -f ${DOC}/string.spad )

@
\subsection{sttaylor.spad \cite{1}}
<<sttaylor.spad (SPAD from IN)>>=
${MID}/sttaylor.spad: ${IN}/sttaylor.spad.pamphlet
	@ echo 0 making ${MID}/sttaylor.spad from ${IN}/sttaylor.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sttaylor.spad.pamphlet >sttaylor.spad )

@
<<STTAYLOR.o (O from NRLIB)>>=
${OUT}/STTAYLOR.o: ${MID}/STTAYLOR.NRLIB
	@ echo 0 making ${OUT}/STTAYLOR.o from ${MID}/STTAYLOR.NRLIB
	@ cp ${MID}/STTAYLOR.NRLIB/code.o ${OUT}/STTAYLOR.o

@
<<STTAYLOR.NRLIB (NRLIB from MID)>>=
${MID}/STTAYLOR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/STTAYLOR.spad
	@ echo 0 making ${MID}/STTAYLOR.NRLIB from ${MID}/STTAYLOR.spad
	@ (cd ${MID} ; 	echo ')co STTAYLOR.spad' | ${INTERPSYS} )

@
<<STTAYLOR.spad (SPAD from IN)>>=
${MID}/STTAYLOR.spad: ${IN}/sttaylor.spad.pamphlet
	@ echo 0 making ${MID}/STTAYLOR.spad from ${IN}/sttaylor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STTAYLOR.NRLIB ; \
	${SPADBIN}/notangle -R"package STTAYLOR StreamTaylorSeriesOperations" ${IN}/sttaylor.spad.pamphlet >STTAYLOR.spad )

@
<<sttaylor.spad.dvi (DOC from IN)>>=
${DOC}/sttaylor.spad.dvi: ${IN}/sttaylor.spad.pamphlet
	@ echo 0 making ${DOC}/sttaylor.spad.dvi from ${IN}/sttaylor.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sttaylor.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sttaylor.spad ; \
	rm -f ${DOC}/sttaylor.spad.pamphlet ; \
	rm -f ${DOC}/sttaylor.spad.tex ; \
	rm -f ${DOC}/sttaylor.spad )

@
\subsection{sttf.spad \cite{1}}
<<sttf.spad (SPAD from IN)>>=
${MID}/sttf.spad: ${IN}/sttf.spad.pamphlet
	@ echo 0 making ${MID}/sttf.spad from ${IN}/sttf.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sttf.spad.pamphlet >sttf.spad )

@
<<STTF.o (O from NRLIB)>>=
${OUT}/STTF.o: ${MID}/STTF.NRLIB
	@ echo 0 making ${OUT}/STTF.o from ${MID}/STTF.NRLIB
	@ cp ${MID}/STTF.NRLIB/code.o ${OUT}/STTF.o

@
<<STTF.NRLIB (NRLIB from MID)>>=
${MID}/STTF.NRLIB: ${MID}/STTF.spad
	@ echo 0 making ${MID}/STTF.NRLIB from ${MID}/STTF.spad
	@ (cd ${MID} ; 	echo ')co STTF.spad' | ${INTERPSYS} )

@
<<STTF.spad (SPAD from IN)>>=
${MID}/STTF.spad: ${IN}/sttf.spad.pamphlet
	@ echo 0 making ${MID}/STTF.spad from ${IN}/sttf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STTF.NRLIB ; \
	${SPADBIN}/notangle -R"package STTF StreamTranscendentalFunctions" ${IN}/sttf.spad.pamphlet >STTF.spad )

@
<<STTFNC.o (O from NRLIB)>>=
${OUT}/STTFNC.o: ${MID}/STTFNC.NRLIB
	@ echo 0 making ${OUT}/STTFNC.o from ${MID}/STTFNC.NRLIB
	@ cp ${MID}/STTFNC.NRLIB/code.o ${OUT}/STTFNC.o

@
<<STTFNC.NRLIB (NRLIB from MID)>>=
${MID}/STTFNC.NRLIB: ${MID}/STTFNC.spad
	@ echo 0 making ${MID}/STTFNC.NRLIB from ${MID}/STTFNC.spad
	@ (cd ${MID} ; 	echo ')co STTFNC.spad' | ${INTERPSYS} )

@
<<STTFNC.spad (SPAD from IN)>>=
${MID}/STTFNC.spad: ${IN}/sttf.spad.pamphlet
	@ echo 0 making ${MID}/STTFNC.spad from ${IN}/sttf.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STTFNC.NRLIB ; \
	${SPADBIN}/notangle -R"package STTFNC StreamTranscendentalFunctionsNonCommutative" ${IN}/sttf.spad.pamphlet >STTFNC.spad )

@
<<sttf.spad.dvi (DOC from IN)>>=
${DOC}/sttf.spad.dvi: ${IN}/sttf.spad.pamphlet
	@ echo 0 making ${DOC}/sttf.spad.dvi from ${IN}/sttf.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sttf.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sttf.spad ; \
	rm -f ${DOC}/sttf.spad.pamphlet ; \
	rm -f ${DOC}/sttf.spad.tex ; \
	rm -f ${DOC}/sttf.spad )

@
\subsection{sturm.spad \cite{1}}
<<sturm.spad (SPAD from IN)>>=
${MID}/sturm.spad: ${IN}/sturm.spad.pamphlet
	@ echo 0 making ${MID}/sturm.spad from ${IN}/sturm.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sturm.spad.pamphlet >sturm.spad )

@
<<SHP.o (O from NRLIB)>>=
${OUT}/SHP.o: ${MID}/SHP.NRLIB
	@ echo 0 making ${OUT}/SHP.o from ${MID}/SHP.NRLIB
	@ cp ${MID}/SHP.NRLIB/code.o ${OUT}/SHP.o

@
<<SHP.NRLIB (NRLIB from MID)>>=
${MID}/SHP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SHP.spad
	@ echo 0 making ${MID}/SHP.NRLIB from ${MID}/SHP.spad
	@ (cd ${MID} ; 	echo ')co SHP.spad' | ${INTERPSYS} )

@
<<SHP.spad (SPAD from IN)>>=
${MID}/SHP.spad: ${IN}/sturm.spad.pamphlet
	@ echo 0 making ${MID}/SHP.spad from ${IN}/sturm.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SHP.NRLIB ; \
	${SPADBIN}/notangle -R"package SHP SturmHabichtPackage" ${IN}/sturm.spad.pamphlet >SHP.spad )

@
<<sturm.spad.dvi (DOC from IN)>>=
${DOC}/sturm.spad.dvi: ${IN}/sturm.spad.pamphlet
	@ echo 0 making ${DOC}/sturm.spad.dvi from ${IN}/sturm.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sturm.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sturm.spad ; \
	rm -f ${DOC}/sturm.spad.pamphlet ; \
	rm -f ${DOC}/sturm.spad.tex ; \
	rm -f ${DOC}/sturm.spad )

@
\subsection{suchthat.spad \cite{1}}
<<suchthat.spad (SPAD from IN)>>=
${MID}/suchthat.spad: ${IN}/suchthat.spad.pamphlet
	@ echo 0 making ${MID}/suchthat.spad from ${IN}/suchthat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/suchthat.spad.pamphlet >suchthat.spad )

@
<<SUCH.o (O from NRLIB)>>=
${OUT}/SUCH.o: ${MID}/SUCH.NRLIB
	@ echo 0 making ${OUT}/SUCH.o from ${MID}/SUCH.NRLIB
	@ cp ${MID}/SUCH.NRLIB/code.o ${OUT}/SUCH.o

@
<<SUCH.NRLIB (NRLIB from MID)>>=
${MID}/SUCH.NRLIB: ${MID}/SUCH.spad
	@ echo 0 making ${MID}/SUCH.NRLIB from ${MID}/SUCH.spad
	@ (cd ${MID} ; 	echo ')co SUCH.spad' | ${INTERPSYS} )

@
<<SUCH.spad (SPAD from IN)>>=
${MID}/SUCH.spad: ${IN}/suchthat.spad.pamphlet
	@ echo 0 making ${MID}/SUCH.spad from ${IN}/suchthat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUCH.NRLIB ; \
	${SPADBIN}/notangle -R"domain SUCH SuchThat" ${IN}/suchthat.spad.pamphlet >SUCH.spad )

@
<<suchthat.spad.dvi (DOC from IN)>>=
${DOC}/suchthat.spad.dvi: ${IN}/suchthat.spad.pamphlet
	@ echo 0 making ${DOC}/suchthat.spad.dvi from ${IN}/suchthat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/suchthat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} suchthat.spad ; \
	rm -f ${DOC}/suchthat.spad.pamphlet ; \
	rm -f ${DOC}/suchthat.spad.tex ; \
	rm -f ${DOC}/suchthat.spad )

@
\subsection{suls.spad \cite{1}}
<<suls.spad (SPAD from IN)>>=
${MID}/suls.spad: ${IN}/suls.spad.pamphlet
	@ echo 0 making ${MID}/suls.spad from ${IN}/suls.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/suls.spad.pamphlet >suls.spad )

@
<<SULS.o (O from NRLIB)>>=
${OUT}/SULS.o: ${MID}/SULS.NRLIB
	@ echo 0 making ${OUT}/SULS.o from ${MID}/SULS.NRLIB
	@ cp ${MID}/SULS.NRLIB/code.o ${OUT}/SULS.o

@
<<SULS.NRLIB (NRLIB from MID)>>=
${MID}/SULS.NRLIB: ${MID}/SULS.spad
	@ echo 0 making ${MID}/SULS.NRLIB from ${MID}/SULS.spad
	@ (cd ${MID} ; 	echo ')co SULS.spad' | ${INTERPSYS} )

@
<<SULS.spad (SPAD from IN)>>=
${MID}/SULS.spad: ${IN}/suls.spad.pamphlet
	@ echo 0 making ${MID}/SULS.spad from ${IN}/suls.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SULS.NRLIB ; \
	${SPADBIN}/notangle -R"domain SULS SparseUnivariateLaurentSeries" ${IN}/suls.spad.pamphlet >SULS.spad )

@
<<suls.spad.dvi (DOC from IN)>>=
${DOC}/suls.spad.dvi: ${IN}/suls.spad.pamphlet
	@ echo 0 making ${DOC}/suls.spad.dvi from ${IN}/suls.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/suls.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} suls.spad ; \
	rm -f ${DOC}/suls.spad.pamphlet ; \
	rm -f ${DOC}/suls.spad.tex ; \
	rm -f ${DOC}/suls.spad )

@
\subsection{sum.spad \cite{1}}
<<sum.spad (SPAD from IN)>>=
${MID}/sum.spad: ${IN}/sum.spad.pamphlet
	@ echo 0 making ${MID}/sum.spad from ${IN}/sum.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sum.spad.pamphlet >sum.spad )

@
<<GOSPER.o (O from NRLIB)>>=
${OUT}/GOSPER.o: ${MID}/GOSPER.NRLIB
	@ echo 0 making ${OUT}/GOSPER.o from ${MID}/GOSPER.NRLIB
	@ cp ${MID}/GOSPER.NRLIB/code.o ${OUT}/GOSPER.o

@
<<GOSPER.NRLIB (NRLIB from MID)>>=
${MID}/GOSPER.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GOSPER.spad
	@ echo 0 making ${MID}/GOSPER.NRLIB from ${MID}/GOSPER.spad
	@ (cd ${MID} ; 	echo ')co GOSPER.spad' | ${INTERPSYS} )

@
<<GOSPER.spad (SPAD from IN)>>=
${MID}/GOSPER.spad: ${IN}/sum.spad.pamphlet
	@ echo 0 making ${MID}/GOSPER.spad from ${IN}/sum.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GOSPER.NRLIB ; \
	${SPADBIN}/notangle -R"package GOSPER GosperSummationMethod" ${IN}/sum.spad.pamphlet >GOSPER.spad )

@
<<ISUMP.o (O from NRLIB)>>=
${OUT}/ISUMP.o: ${MID}/ISUMP.NRLIB
	@ echo 0 making ${OUT}/ISUMP.o from ${MID}/ISUMP.NRLIB
	@ cp ${MID}/ISUMP.NRLIB/code.o ${OUT}/ISUMP.o

@
<<ISUMP.NRLIB (NRLIB from MID)>>=
${MID}/ISUMP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/ISUMP.spad
	@ echo 0 making ${MID}/ISUMP.NRLIB from ${MID}/ISUMP.spad
	@ (cd ${MID} ; 	echo ')co ISUMP.spad' | ${INTERPSYS} )

@
<<ISUMP.spad (SPAD from IN)>>=
${MID}/ISUMP.spad: ${IN}/sum.spad.pamphlet
	@ echo 0 making ${MID}/ISUMP.spad from ${IN}/sum.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ISUMP.NRLIB ; \
	${SPADBIN}/notangle -R"package ISUMP InnerPolySum" ${IN}/sum.spad.pamphlet >ISUMP.spad )

@
<<SUMRF.o (O from NRLIB)>>=
${OUT}/SUMRF.o: ${MID}/SUMRF.NRLIB
	@ echo 0 making ${OUT}/SUMRF.o from ${MID}/SUMRF.NRLIB
	@ cp ${MID}/SUMRF.NRLIB/code.o ${OUT}/SUMRF.o

@
<<SUMRF.NRLIB (NRLIB from MID)>>=
${MID}/SUMRF.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/SUMRF.spad
	@ echo 0 making ${MID}/SUMRF.NRLIB from ${MID}/SUMRF.spad
	@ (cd ${MID} ; 	echo ')co SUMRF.spad' | ${INTERPSYS} )

@
<<SUMRF.spad (SPAD from IN)>>=
${MID}/SUMRF.spad: ${IN}/sum.spad.pamphlet
	@ echo 0 making ${MID}/SUMRF.spad from ${IN}/sum.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUMRF.NRLIB ; \
	${SPADBIN}/notangle -R"package SUMRF RationalFunctionSum" ${IN}/sum.spad.pamphlet >SUMRF.spad )

@
<<sum.spad.dvi (DOC from IN)>>=
${DOC}/sum.spad.dvi: ${IN}/sum.spad.pamphlet
	@ echo 0 making ${DOC}/sum.spad.dvi from ${IN}/sum.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sum.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sum.spad ; \
	rm -f ${DOC}/sum.spad.pamphlet ; \
	rm -f ${DOC}/sum.spad.tex ; \
	rm -f ${DOC}/sum.spad )

@
\subsection{sups.spad \cite{1}}
<<sups.spad (SPAD from IN)>>=
${MID}/sups.spad: ${IN}/sups.spad.pamphlet
	@ echo 0 making ${MID}/sups.spad from ${IN}/sups.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/sups.spad.pamphlet >sups.spad )

@
<<ISUPS.o (O from NRLIB)>>=
${OUT}/ISUPS.o: ${MID}/ISUPS.NRLIB
	@ echo 0 making ${OUT}/ISUPS.o from ${MID}/ISUPS.NRLIB
	@ cp ${MID}/ISUPS.NRLIB/code.o ${OUT}/ISUPS.o

@
<<ISUPS.NRLIB (NRLIB from MID)>>=
${MID}/ISUPS.NRLIB: ${MID}/ISUPS.spad
	@ echo 0 making ${MID}/ISUPS.NRLIB from ${MID}/ISUPS.spad
	@ (cd ${MID} ; 	echo ')co ISUPS.spad' | ${INTERPSYS} )

@
<<ISUPS.spad (SPAD from IN)>>=
${MID}/ISUPS.spad: ${IN}/sups.spad.pamphlet
	@ echo 0 making ${MID}/ISUPS.spad from ${IN}/sups.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ISUPS.NRLIB ; \
	${SPADBIN}/notangle -R"domain ISUPS InnerSparseUnivariatePowerSeries" ${IN}/sups.spad.pamphlet >ISUPS.spad )

@
<<sups.spad.dvi (DOC from IN)>>=
${DOC}/sups.spad.dvi: ${IN}/sups.spad.pamphlet
	@ echo 0 making ${DOC}/sups.spad.dvi from ${IN}/sups.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/sups.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} sups.spad ; \
	rm -f ${DOC}/sups.spad.pamphlet ; \
	rm -f ${DOC}/sups.spad.tex ; \
	rm -f ${DOC}/sups.spad )

@
\subsection{supxs.spad \cite{1}}
<<supxs.spad (SPAD from IN)>>=
${MID}/supxs.spad: ${IN}/supxs.spad.pamphlet
	@ echo 0 making ${MID}/supxs.spad from ${IN}/supxs.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/supxs.spad.pamphlet >supxs.spad )

@
<<SUPXS.o (O from NRLIB)>>=
${OUT}/SUPXS.o: ${MID}/SUPXS.NRLIB
	@ echo 0 making ${OUT}/SUPXS.o from ${MID}/SUPXS.NRLIB
	@ cp ${MID}/SUPXS.NRLIB/code.o ${OUT}/SUPXS.o

@
<<SUPXS.NRLIB (NRLIB from MID)>>=
${MID}/SUPXS.NRLIB: ${MID}/SUPXS.spad
	@ echo 0 making ${MID}/SUPXS.NRLIB from ${MID}/SUPXS.spad
	@ (cd ${MID} ; 	echo ')co SUPXS.spad' | ${INTERPSYS} )

@
<<SUPXS.spad (SPAD from IN)>>=
${MID}/SUPXS.spad: ${IN}/supxs.spad.pamphlet
	@ echo 0 making ${MID}/SUPXS.spad from ${IN}/supxs.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUPXS.NRLIB ; \
	${SPADBIN}/notangle -R"domain SUPXS SparseUnivariatePuiseuxSeries" ${IN}/supxs.spad.pamphlet >SUPXS.spad )

@
<<supxs.spad.dvi (DOC from IN)>>=
${DOC}/supxs.spad.dvi: ${IN}/supxs.spad.pamphlet
	@ echo 0 making ${DOC}/supxs.spad.dvi from ${IN}/supxs.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/supxs.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} supxs.spad ; \
	rm -f ${DOC}/supxs.spad.pamphlet ; \
	rm -f ${DOC}/supxs.spad.tex ; \
	rm -f ${DOC}/supxs.spad )

@
\subsection{suts.spad \cite{1}}
<<suts.spad (SPAD from IN)>>=
${MID}/suts.spad: ${IN}/suts.spad.pamphlet
	@ echo 0 making ${MID}/suts.spad from ${IN}/suts.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/suts.spad.pamphlet >suts.spad )

@
<<SUTS.o (O from NRLIB)>>=
${OUT}/SUTS.o: ${MID}/SUTS.NRLIB
	@ echo 0 making ${OUT}/SUTS.o from ${MID}/SUTS.NRLIB
	@ cp ${MID}/SUTS.NRLIB/code.o ${OUT}/SUTS.o

@
<<SUTS.NRLIB (NRLIB from MID)>>=
${MID}/SUTS.NRLIB: ${MID}/SUTS.spad
	@ echo 0 making ${MID}/SUTS.NRLIB from ${MID}/SUTS.spad
	@ (cd ${MID} ; 	echo ')co SUTS.spad' | ${INTERPSYS} )

@
<<SUTS.spad (SPAD from IN)>>=
${MID}/SUTS.spad: ${IN}/suts.spad.pamphlet
	@ echo 0 making ${MID}/SUTS.spad from ${IN}/suts.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SUTS.NRLIB ; \
	${SPADBIN}/notangle -R"domain SUTS SparseUnivariateTaylorSeries" ${IN}/suts.spad.pamphlet >SUTS.spad )

@
<<suts.spad.dvi (DOC from IN)>>=
${DOC}/suts.spad.dvi: ${IN}/suts.spad.pamphlet
	@ echo 0 making ${DOC}/suts.spad.dvi from ${IN}/suts.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/suts.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} suts.spad ; \
	rm -f ${DOC}/suts.spad.pamphlet ; \
	rm -f ${DOC}/suts.spad.tex ; \
	rm -f ${DOC}/suts.spad )

@
\subsection{symbol.spad \cite{1}}
<<symbol.spad (SPAD from IN)>>=
${MID}/symbol.spad: ${IN}/symbol.spad.pamphlet
	@ echo 0 making ${MID}/symbol.spad from ${IN}/symbol.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/symbol.spad.pamphlet >symbol.spad )

@
<<SYMBOL.o (O from NRLIB)>>=
${OUT}/SYMBOL.o: ${MID}/SYMBOL.NRLIB
	@ echo 0 making ${OUT}/SYMBOL.o from ${MID}/SYMBOL.NRLIB
	@ cp ${MID}/SYMBOL.NRLIB/code.o ${OUT}/SYMBOL.o

@
<<SYMBOL.NRLIB (NRLIB from MID)>>=
${MID}/SYMBOL.NRLIB: ${MID}/SYMBOL.spad
	@ echo 0 making ${MID}/SYMBOL.NRLIB from ${MID}/SYMBOL.spad
	@ (cd ${MID} ; 	echo ')co SYMBOL.spad' | ${INTERPSYS} )

@
<<SYMBOL.spad (SPAD from IN)>>=
${MID}/SYMBOL.spad: ${IN}/symbol.spad.pamphlet
	@ echo 0 making ${MID}/SYMBOL.spad from ${IN}/symbol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYMBOL.NRLIB ; \
	${SPADBIN}/notangle -R"domain SYMBOL Symbol" ${IN}/symbol.spad.pamphlet >SYMBOL.spad )

@
<<SYMBOL.o (BOOTSTRAP from MID)>>=
${MID}/SYMBOL.o: ${MID}/SYMBOL.lsp
	@ echo 0 making ${MID}/SYMBOL.o from ${MID}/SYMBOL.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "SYMBOL.lsp" :output-file "SYMBOL.o"))' | ${DEPSYS} )
	@ cp ${MID}/SYMBOL.o ${OUT}/SYMBOL.o

@
<<SYMBOL.lsp (LISP from IN)>>=
${MID}/SYMBOL.lsp: ${IN}/symbol.spad.pamphlet
	@ echo 0 making ${MID}/SYMBOL.lsp from ${IN}/symbol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYMBOL.NRLIB ; \
	rm -rf ${OUT}/SYMBOL.o ; \
	${SPADBIN}/notangle -R"SYMBOL.lsp BOOTSTRAP" ${IN}/symbol.spad.pamphlet >SYMBOL.lsp )

@
<<symbol.spad.dvi (DOC from IN)>>=
${DOC}/symbol.spad.dvi: ${IN}/symbol.spad.pamphlet
	@ echo 0 making ${DOC}/symbol.spad.dvi from ${IN}/symbol.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/symbol.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} symbol.spad ; \
	rm -f ${DOC}/symbol.spad.pamphlet ; \
	rm -f ${DOC}/symbol.spad.tex ; \
	rm -f ${DOC}/symbol.spad )

@
\subsection{syssolp.spad \cite{1}}
<<syssolp.spad (SPAD from IN)>>=
${MID}/syssolp.spad: ${IN}/syssolp.spad.pamphlet
	@ echo 0 making ${MID}/syssolp.spad from ${IN}/syssolp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/syssolp.spad.pamphlet >syssolp.spad )

@
<<SYSSOLP.o (O from NRLIB)>>=
${OUT}/SYSSOLP.o: ${MID}/SYSSOLP.NRLIB
	@ echo 0 making ${OUT}/SYSSOLP.o from ${MID}/SYSSOLP.NRLIB
	@ cp ${MID}/SYSSOLP.NRLIB/code.o ${OUT}/SYSSOLP.o

@
<<SYSSOLP.NRLIB (NRLIB from MID)>>=
${MID}/SYSSOLP.NRLIB: ${MID}/SYSSOLP.spad
	@ echo 0 making ${MID}/SYSSOLP.NRLIB from ${MID}/SYSSOLP.spad
	@ (cd ${MID} ; 	echo ')co SYSSOLP.spad' | ${INTERPSYS} )

@
<<SYSSOLP.spad (SPAD from IN)>>=
${MID}/SYSSOLP.spad: ${IN}/syssolp.spad.pamphlet
	@ echo 0 making ${MID}/SYSSOLP.spad from ${IN}/syssolp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SYSSOLP.NRLIB ; \
	${SPADBIN}/notangle -R"package SYSSOLP SystemSolvePackage" ${IN}/syssolp.spad.pamphlet >SYSSOLP.spad )

@
<<syssolp.spad.dvi (DOC from IN)>>=
${DOC}/syssolp.spad.dvi: ${IN}/syssolp.spad.pamphlet
	@ echo 0 making ${DOC}/syssolp.spad.dvi from ${IN}/syssolp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/syssolp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} syssolp.spad ; \
	rm -f ${DOC}/syssolp.spad.pamphlet ; \
	rm -f ${DOC}/syssolp.spad.tex ; \
	rm -f ${DOC}/syssolp.spad )

@
\subsection{system.spad \cite{1}}
<<system.spad (SPAD from IN)>>=
${MID}/system.spad: ${IN}/system.spad.pamphlet
	@ echo 0 making ${MID}/system.spad from ${IN}/system.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/system.spad.pamphlet >system.spad )

@
<<MSYSCMD.o (O from NRLIB)>>=
${OUT}/MSYSCMD.o: ${MID}/MSYSCMD.NRLIB
	@ echo 0 making ${OUT}/MSYSCMD.o from ${MID}/MSYSCMD.NRLIB
	@ cp ${MID}/MSYSCMD.NRLIB/code.o ${OUT}/MSYSCMD.o

@
<<MSYSCMD.NRLIB (NRLIB from MID)>>=
${MID}/MSYSCMD.NRLIB: ${MID}/MSYSCMD.spad
	@ echo 0 making ${MID}/MSYSCMD.NRLIB from ${MID}/MSYSCMD.spad
	@ (cd ${MID} ; 	echo ')co MSYSCMD.spad' | ${INTERPSYS} )

@
<<MSYSCMD.spad (SPAD from IN)>>=
${MID}/MSYSCMD.spad: ${IN}/system.spad.pamphlet
	@ echo 0 making ${MID}/MSYSCMD.spad from ${IN}/system.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MSYSCMD.NRLIB ; \
	${SPADBIN}/notangle -R"package MSYSCMD MoreSystemCommands" ${IN}/system.spad.pamphlet >MSYSCMD.spad )

@
<<system.spad.dvi (DOC from IN)>>=
${DOC}/system.spad.dvi: ${IN}/system.spad.pamphlet
	@ echo 0 making ${DOC}/system.spad.dvi from ${IN}/system.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/system.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} system.spad ; \
	rm -f ${DOC}/system.spad.pamphlet ; \
	rm -f ${DOC}/system.spad.tex ; \
	rm -f ${DOC}/system.spad )

@
\subsection{tableau.spad \cite{1}}
<<tableau.spad (SPAD from IN)>>=
${MID}/tableau.spad: ${IN}/tableau.spad.pamphlet
	@ echo 0 making ${MID}/tableau.spad from ${IN}/tableau.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/tableau.spad.pamphlet >tableau.spad )

@
<<TABLBUMP.o (O from NRLIB)>>=
${OUT}/TABLBUMP.o: ${MID}/TABLBUMP.NRLIB
	@ echo 0 making ${OUT}/TABLBUMP.o from ${MID}/TABLBUMP.NRLIB
	@ cp ${MID}/TABLBUMP.NRLIB/code.o ${OUT}/TABLBUMP.o

@
<<TABLBUMP.NRLIB (NRLIB from MID)>>=
${MID}/TABLBUMP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/TABLBUMP.spad
	@ echo 0 making ${MID}/TABLBUMP.NRLIB from ${MID}/TABLBUMP.spad
	@ (cd ${MID} ; 	echo ')co TABLBUMP.spad' | ${INTERPSYS} )

@
<<TABLBUMP.spad (SPAD from IN)>>=
${MID}/TABLBUMP.spad: ${IN}/tableau.spad.pamphlet
	@ echo 0 making ${MID}/TABLBUMP.spad from ${IN}/tableau.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TABLBUMP.NRLIB ; \
	${SPADBIN}/notangle -R"package TABLBUMP TableauxBumpers" ${IN}/tableau.spad.pamphlet >TABLBUMP.spad )

@
<<TABLEAU.o (O from NRLIB)>>=
${OUT}/TABLEAU.o: ${MID}/TABLEAU.NRLIB
	@ echo 0 making ${OUT}/TABLEAU.o from ${MID}/TABLEAU.NRLIB
	@ cp ${MID}/TABLEAU.NRLIB/code.o ${OUT}/TABLEAU.o

@
<<TABLEAU.NRLIB (NRLIB from MID)>>=
${MID}/TABLEAU.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/TABLEAU.spad
	@ echo 0 making ${MID}/TABLEAU.NRLIB from ${MID}/TABLEAU.spad
	@ (cd ${MID} ; 	echo ')co TABLEAU.spad' | ${INTERPSYS} )

@
<<TABLEAU.spad (SPAD from IN)>>=
${MID}/TABLEAU.spad: ${IN}/tableau.spad.pamphlet
	@ echo 0 making ${MID}/TABLEAU.spad from ${IN}/tableau.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TABLEAU.NRLIB ; \
	${SPADBIN}/notangle -R"domain TABLEAU Tableau" ${IN}/tableau.spad.pamphlet >TABLEAU.spad )

@
<<tableau.spad.dvi (DOC from IN)>>=
${DOC}/tableau.spad.dvi: ${IN}/tableau.spad.pamphlet
	@ echo 0 making ${DOC}/tableau.spad.dvi from ${IN}/tableau.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/tableau.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} tableau.spad ; \
	rm -f ${DOC}/tableau.spad.pamphlet ; \
	rm -f ${DOC}/tableau.spad.tex ; \
	rm -f ${DOC}/tableau.spad )

@
\subsection{table.spad \cite{1}}
<<table.spad (SPAD from IN)>>=
${MID}/table.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/table.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/table.spad.pamphlet >table.spad )

@
<<EQTBL.o (O from NRLIB)>>=
${OUT}/EQTBL.o: ${MID}/EQTBL.NRLIB
	@ echo 0 making ${OUT}/EQTBL.o from ${MID}/EQTBL.NRLIB
	@ cp ${MID}/EQTBL.NRLIB/code.o ${OUT}/EQTBL.o

@
<<EQTBL.NRLIB (NRLIB from MID)>>=
${MID}/EQTBL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/EQTBL.spad
	@ echo 0 making ${MID}/EQTBL.NRLIB from ${MID}/EQTBL.spad
	@ (cd ${MID} ; 	echo ')co EQTBL.spad' | ${INTERPSYS} )

@
<<EQTBL.spad (SPAD from IN)>>=
${MID}/EQTBL.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/EQTBL.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EQTBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain EQTBL EqTable" ${IN}/table.spad.pamphlet >EQTBL.spad )

@
<<GSTBL.o (O from NRLIB)>>=
${OUT}/GSTBL.o: ${MID}/GSTBL.NRLIB
	@ echo 0 making ${OUT}/GSTBL.o from ${MID}/GSTBL.NRLIB
	@ cp ${MID}/GSTBL.NRLIB/code.o ${OUT}/GSTBL.o

@
<<GSTBL.NRLIB (NRLIB from MID)>>=
${MID}/GSTBL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/GSTBL.spad
	@ echo 0 making ${MID}/GSTBL.NRLIB from ${MID}/GSTBL.spad
	@ (cd ${MID} ; 	echo ')co GSTBL.spad' | ${INTERPSYS} )

@
<<GSTBL.spad (SPAD from IN)>>=
${MID}/GSTBL.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/GSTBL.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GSTBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain GSTBL GeneralSparseTable" ${IN}/table.spad.pamphlet >GSTBL.spad )

@
<<HASHTBL.o (O from NRLIB)>>=
${OUT}/HASHTBL.o: ${MID}/HASHTBL.NRLIB
	@ echo 0 making ${OUT}/HASHTBL.o from ${MID}/HASHTBL.NRLIB
	@ cp ${MID}/HASHTBL.NRLIB/code.o ${OUT}/HASHTBL.o

@
<<HASHTBL.NRLIB (NRLIB from MID)>>=
${MID}/HASHTBL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/HASHTBL.spad
	@ echo 0 making ${MID}/HASHTBL.NRLIB from ${MID}/HASHTBL.spad
	@ (cd ${MID} ; 	echo ')co HASHTBL.spad' | ${INTERPSYS} )

@
<<HASHTBL.spad (SPAD from IN)>>=
${MID}/HASHTBL.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/HASHTBL.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HASHTBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain HASHTBL HashTable" ${IN}/table.spad.pamphlet >HASHTBL.spad )

@
<<INTABL.o (O from NRLIB)>>=
${OUT}/INTABL.o: ${MID}/INTABL.NRLIB
	@ echo 0 making ${OUT}/INTABL.o from ${MID}/INTABL.NRLIB
	@ cp ${MID}/INTABL.NRLIB/code.o ${OUT}/INTABL.o

@
<<INTABL.NRLIB (NRLIB from MID)>>=
${MID}/INTABL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/INTABL.spad
	@ echo 0 making ${MID}/INTABL.NRLIB from ${MID}/INTABL.spad
	@ (cd ${MID} ; 	echo ')co INTABL.spad' | ${INTERPSYS} )

@
<<INTABL.spad (SPAD from IN)>>=
${MID}/INTABL.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/INTABL.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf INTABL.NRLIB ; \
	${SPADBIN}/notangle -R"domain INTABL InnerTable" ${IN}/table.spad.pamphlet >INTABL.spad )

@
<<STBL.o (O from NRLIB)>>=
${OUT}/STBL.o: ${MID}/STBL.NRLIB
	@ echo 0 making ${OUT}/STBL.o from ${MID}/STBL.NRLIB
	@ cp ${MID}/STBL.NRLIB/code.o ${OUT}/STBL.o

@
<<STBL.NRLIB (NRLIB from MID)>>=
${MID}/STBL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/STBL.spad
	@ echo 0 making ${MID}/STBL.NRLIB from ${MID}/STBL.spad
	@ (cd ${MID} ; 	echo ')co STBL.spad' | ${INTERPSYS} )

@
<<STBL.spad (SPAD from IN)>>=
${MID}/STBL.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/STBL.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain STBL SparseTable" ${IN}/table.spad.pamphlet >STBL.spad )

@
<<STRTBL.o (O from NRLIB)>>=
${OUT}/STRTBL.o: ${MID}/STRTBL.NRLIB
	@ echo 0 making ${OUT}/STRTBL.o from ${MID}/STRTBL.NRLIB
	@ cp ${MID}/STRTBL.NRLIB/code.o ${OUT}/STRTBL.o

@
<<STRTBL.NRLIB (NRLIB from MID)>>=
${MID}/STRTBL.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/STRTBL.spad
	@ echo 0 making ${MID}/STRTBL.NRLIB from ${MID}/STRTBL.spad
	@ (cd ${MID} ; 	echo ')co STRTBL.spad' | ${INTERPSYS} )

@
<<STRTBL.spad (SPAD from IN)>>=
${MID}/STRTBL.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/STRTBL.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf STRTBL.NRLIB ; \
	${SPADBIN}/notangle -R"domain STRTBL StringTable" ${IN}/table.spad.pamphlet >STRTBL.spad )

@
<<TABLE.o (O from NRLIB)>>=
${OUT}/TABLE.o: ${MID}/TABLE.NRLIB
	@ echo 0 making ${OUT}/TABLE.o from ${MID}/TABLE.NRLIB
	@ cp ${MID}/TABLE.NRLIB/code.o ${OUT}/TABLE.o

@
<<TABLE.NRLIB (NRLIB from MID)>>=
${MID}/TABLE.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/TABLE.spad
	@ echo 0 making ${MID}/TABLE.NRLIB from ${MID}/TABLE.spad
	@ (cd ${MID} ; 	echo ')co TABLE.spad' | ${INTERPSYS} )

@
<<TABLE.spad (SPAD from IN)>>=
${MID}/TABLE.spad: ${IN}/table.spad.pamphlet
	@ echo 0 making ${MID}/TABLE.spad from ${IN}/table.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TABLE.NRLIB ; \
	${SPADBIN}/notangle -R"domain TABLE Table" ${IN}/table.spad.pamphlet >TABLE.spad )

@
<<table.spad.dvi (DOC from IN)>>=
${DOC}/table.spad.dvi: ${IN}/table.spad.pamphlet
	@ echo 0 making ${DOC}/table.spad.dvi from ${IN}/table.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/table.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} table.spad ; \
	rm -f ${DOC}/table.spad.pamphlet ; \
	rm -f ${DOC}/table.spad.tex ; \
	rm -f ${DOC}/table.spad )

@
\subsection{taylor.spad \cite{1}}
<<taylor.spad (SPAD from IN)>>=
${MID}/taylor.spad: ${IN}/taylor.spad.pamphlet
	@ echo 0 making ${MID}/taylor.spad from ${IN}/taylor.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/taylor.spad.pamphlet >taylor.spad )

@
<<ITAYLOR.o (O from NRLIB)>>=
${OUT}/ITAYLOR.o: ${MID}/ITAYLOR.NRLIB
	@ echo 0 making ${OUT}/ITAYLOR.o from ${MID}/ITAYLOR.NRLIB
	@ cp ${MID}/ITAYLOR.NRLIB/code.o ${OUT}/ITAYLOR.o

@
<<ITAYLOR.NRLIB (NRLIB from MID)>>=
${MID}/ITAYLOR.NRLIB: ${MID}/ITAYLOR.spad
	@ echo 0 making ${MID}/ITAYLOR.NRLIB from ${MID}/ITAYLOR.spad
	@ (cd ${MID} ; 	echo ')co ITAYLOR.spad' | ${INTERPSYS} )

@
<<ITAYLOR.spad (SPAD from IN)>>=
${MID}/ITAYLOR.spad: ${IN}/taylor.spad.pamphlet
	@ echo 0 making ${MID}/ITAYLOR.spad from ${IN}/taylor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ITAYLOR.NRLIB ; \
	${SPADBIN}/notangle -R"domain ITAYLOR InnerTaylorSeries" ${IN}/taylor.spad.pamphlet >ITAYLOR.spad )

@
<<UTS.o (O from NRLIB)>>=
${OUT}/UTS.o: ${MID}/UTS.NRLIB
	@ echo 0 making ${OUT}/UTS.o from ${MID}/UTS.NRLIB
	@ cp ${MID}/UTS.NRLIB/code.o ${OUT}/UTS.o

@
<<UTS.NRLIB (NRLIB from MID)>>=
${MID}/UTS.NRLIB: ${MID}/UTS.spad
	@ echo 0 making ${MID}/UTS.NRLIB from ${MID}/UTS.spad
	@ (cd ${MID} ; 	echo ')co UTS.spad' | ${INTERPSYS} )

@
<<UTS.spad (SPAD from IN)>>=
${MID}/UTS.spad: ${IN}/taylor.spad.pamphlet
	@ echo 0 making ${MID}/UTS.spad from ${IN}/taylor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UTS.NRLIB ; \
	${SPADBIN}/notangle -R"domain UTS UnivariateTaylorSeries" ${IN}/taylor.spad.pamphlet >UTS.spad )

@
<<UTS2.o (O from NRLIB)>>=
${OUT}/UTS2.o: ${MID}/UTS2.NRLIB
	@ echo 0 making ${OUT}/UTS2.o from ${MID}/UTS2.NRLIB
	@ cp ${MID}/UTS2.NRLIB/code.o ${OUT}/UTS2.o

@
<<UTS2.NRLIB (NRLIB from MID)>>=
${MID}/UTS2.NRLIB: ${MID}/UTS2.spad
	@ echo 0 making ${MID}/UTS2.NRLIB from ${MID}/UTS2.spad
	@ (cd ${MID} ; 	echo ')co UTS2.spad' | ${INTERPSYS} )

@
<<UTS2.spad (SPAD from IN)>>=
${MID}/UTS2.spad: ${IN}/taylor.spad.pamphlet
	@ echo 0 making ${MID}/UTS2.spad from ${IN}/taylor.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UTS2.NRLIB ; \
	${SPADBIN}/notangle -R"package UTS2 UnivariateTaylorSeriesFunctions2" ${IN}/taylor.spad.pamphlet >UTS2.spad )

@
<<taylor.spad.dvi (DOC from IN)>>=
${DOC}/taylor.spad.dvi: ${IN}/taylor.spad.pamphlet
	@ echo 0 making ${DOC}/taylor.spad.dvi from ${IN}/taylor.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/taylor.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} taylor.spad ; \
	rm -f ${DOC}/taylor.spad.pamphlet ; \
	rm -f ${DOC}/taylor.spad.tex ; \
	rm -f ${DOC}/taylor.spad )

@
\subsection{tex.spad \cite{1}}
<<tex.spad (SPAD from IN)>>=
${MID}/tex.spad: ${IN}/tex.spad.pamphlet
	@ echo 0 making ${MID}/tex.spad from ${IN}/tex.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/tex.spad.pamphlet >tex.spad )

@
<<TEX.o (O from NRLIB)>>=
${OUT}/TEX.o: ${MID}/TEX.NRLIB
	@ echo 0 making ${OUT}/TEX.o from ${MID}/TEX.NRLIB
	@ cp ${MID}/TEX.NRLIB/code.o ${OUT}/TEX.o

@
<<TEX.NRLIB (NRLIB from MID)>>=
${MID}/TEX.NRLIB: ${MID}/TEX.spad
	@ echo 0 making ${MID}/TEX.NRLIB from ${MID}/TEX.spad
	@ (cd ${MID} ; 	echo ')co TEX.spad' | ${INTERPSYS} )

@
<<TEX.spad (SPAD from IN)>>=
${MID}/TEX.spad: ${IN}/tex.spad.pamphlet
	@ echo 0 making ${MID}/TEX.spad from ${IN}/tex.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TEX.NRLIB ; \
	${SPADBIN}/notangle -R"domain TEX TexFormat" ${IN}/tex.spad.pamphlet >TEX.spad )

@
<<TEX1.o (O from NRLIB)>>=
${OUT}/TEX1.o: ${MID}/TEX1.NRLIB
	@ echo 0 making ${OUT}/TEX1.o from ${MID}/TEX1.NRLIB
	@ cp ${MID}/TEX1.NRLIB/code.o ${OUT}/TEX1.o

@
<<TEX1.NRLIB (NRLIB from MID)>>=
${MID}/TEX1.NRLIB: ${MID}/TEX1.spad
	@ echo 0 making ${MID}/TEX1.NRLIB from ${MID}/TEX1.spad
	@ (cd ${MID} ; 	echo ')co TEX1.spad' | ${INTERPSYS} )

@
<<TEX1.spad (SPAD from IN)>>=
${MID}/TEX1.spad: ${IN}/tex.spad.pamphlet
	@ echo 0 making ${MID}/TEX1.spad from ${IN}/tex.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TEX1.NRLIB ; \
	${SPADBIN}/notangle -R"package TEX1 TexFormat1" ${IN}/tex.spad.pamphlet >TEX1.spad )

@
<<tex.spad.dvi (DOC from IN)>>=
${DOC}/tex.spad.dvi: ${IN}/tex.spad.pamphlet
	@ echo 0 making ${DOC}/tex.spad.dvi from ${IN}/tex.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/tex.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} tex.spad ; \
	rm -f ${DOC}/tex.spad.pamphlet ; \
	rm -f ${DOC}/tex.spad.tex ; \
	rm -f ${DOC}/tex.spad )

@
\subsection{tools.spad \cite{1}}
<<tools.spad (SPAD from IN)>>=
${MID}/tools.spad: ${IN}/tools.spad.pamphlet
	@ echo 0 making ${MID}/tools.spad from ${IN}/tools.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/tools.spad.pamphlet >tools.spad )

@
<<ESTOOLS.o (O from NRLIB)>>=
${OUT}/ESTOOLS.o: ${MID}/ESTOOLS.NRLIB
	@ echo 0 making ${OUT}/ESTOOLS.o from ${MID}/ESTOOLS.NRLIB
	@ cp ${MID}/ESTOOLS.NRLIB/code.o ${OUT}/ESTOOLS.o

@
<<ESTOOLS.NRLIB (NRLIB from MID)>>=
${MID}/ESTOOLS.NRLIB: ${MID}/ESTOOLS.spad
	@ echo 0 making ${MID}/ESTOOLS.NRLIB from ${MID}/ESTOOLS.spad
	@ (cd ${MID} ; 	echo ')co ESTOOLS.spad' | ${INTERPSYS} )

@
<<ESTOOLS.spad (SPAD from IN)>>=
${MID}/ESTOOLS.spad: ${IN}/tools.spad.pamphlet
	@ echo 0 making ${MID}/ESTOOLS.spad from ${IN}/tools.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ESTOOLS.NRLIB ; \
	${SPADBIN}/notangle -R"package ESTOOLS ExpertSystemToolsPackage" ${IN}/tools.spad.pamphlet >ESTOOLS.spad )

@
<<ESTOOLS1.o (O from NRLIB)>>=
${OUT}/ESTOOLS1.o: ${MID}/ESTOOLS1.NRLIB
	@ echo 0 making ${OUT}/ESTOOLS1.o from ${MID}/ESTOOLS1.NRLIB
	@ cp ${MID}/ESTOOLS1.NRLIB/code.o ${OUT}/ESTOOLS1.o

@
<<ESTOOLS1.NRLIB (NRLIB from MID)>>=
${MID}/ESTOOLS1.NRLIB: ${MID}/ESTOOLS1.spad
	@ echo 0 making ${MID}/ESTOOLS1.NRLIB from ${MID}/ESTOOLS1.spad
	@ (cd ${MID} ; 	echo ')co ESTOOLS1.spad' | ${INTERPSYS} )

@
<<ESTOOLS1.spad (SPAD from IN)>>=
${MID}/ESTOOLS1.spad: ${IN}/tools.spad.pamphlet
	@ echo 0 making ${MID}/ESTOOLS1.spad from ${IN}/tools.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ESTOOLS1.NRLIB ; \
	${SPADBIN}/notangle -R"package ESTOOLS1 ExpertSystemToolsPackage1" ${IN}/tools.spad.pamphlet >ESTOOLS1.spad )

@
<<ESTOOLS2.o (O from NRLIB)>>=
${OUT}/ESTOOLS2.o: ${MID}/ESTOOLS2.NRLIB
	@ echo 0 making ${OUT}/ESTOOLS2.o from ${MID}/ESTOOLS2.NRLIB
	@ cp ${MID}/ESTOOLS2.NRLIB/code.o ${OUT}/ESTOOLS2.o

@
<<ESTOOLS2.NRLIB (NRLIB from MID)>>=
${MID}/ESTOOLS2.NRLIB: ${MID}/ESTOOLS2.spad
	@ echo 0 making ${MID}/ESTOOLS2.NRLIB from ${MID}/ESTOOLS2.spad
	@ (cd ${MID} ; 	echo ')co ESTOOLS2.spad' | ${INTERPSYS} )

@
<<ESTOOLS2.spad (SPAD from IN)>>=
${MID}/ESTOOLS2.spad: ${IN}/tools.spad.pamphlet
	@ echo 0 making ${MID}/ESTOOLS2.spad from ${IN}/tools.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ESTOOLS2.NRLIB ; \
	${SPADBIN}/notangle -R"package ESTOOLS2 ExpertSystemToolsPackage2" ${IN}/tools.spad.pamphlet >ESTOOLS2.spad )

@
<<tools.spad.dvi (DOC from IN)>>=
${DOC}/tools.spad.dvi: ${IN}/tools.spad.pamphlet
	@ echo 0 making ${DOC}/tools.spad.dvi from ${IN}/tools.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/tools.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} tools.spad ; \
	rm -f ${DOC}/tools.spad.pamphlet ; \
	rm -f ${DOC}/tools.spad.tex ; \
	rm -f ${DOC}/tools.spad )

@
\subsection{transsolve.spad \cite{1}}
<<transsolve.spad (SPAD from IN)>>=
${MID}/transsolve.spad: ${IN}/transsolve.spad.pamphlet
	@ echo 0 making ${MID}/transsolve.spad from ${IN}/transsolve.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/transsolve.spad.pamphlet >transsolve.spad )

@
<<SOLVESER.o (O from NRLIB)>>=
${OUT}/SOLVESER.o: ${MID}/SOLVESER.NRLIB
	@ echo 0 making ${OUT}/SOLVESER.o from ${MID}/SOLVESER.NRLIB
	@ cp ${MID}/SOLVESER.NRLIB/code.o ${OUT}/SOLVESER.o

@
<<SOLVESER.NRLIB (NRLIB from MID)>>=
${MID}/SOLVESER.NRLIB: ${MID}/SOLVESER.spad
	@ echo 0 making ${MID}/SOLVESER.NRLIB from ${MID}/SOLVESER.spad
	@ (cd ${MID} ; 	echo ')co SOLVESER.spad' | ${INTERPSYS} )

@
<<SOLVESER.spad (SPAD from IN)>>=
${MID}/SOLVESER.spad: ${IN}/transsolve.spad.pamphlet
	@ echo 0 making ${MID}/SOLVESER.spad from ${IN}/transsolve.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SOLVESER.NRLIB ; \
	${SPADBIN}/notangle -R"package SOLVESER TransSolvePackageService" ${IN}/transsolve.spad.pamphlet >SOLVESER.spad )

@
<<transsolve.spad.dvi (DOC from IN)>>=
${DOC}/transsolve.spad.dvi: ${IN}/transsolve.spad.pamphlet
	@ echo 0 making ${DOC}/transsolve.spad.dvi from ${IN}/transsolve.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/transsolve.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} transsolve.spad ; \
	rm -f ${DOC}/transsolve.spad.pamphlet ; \
	rm -f ${DOC}/transsolve.spad.tex ; \
	rm -f ${DOC}/transsolve.spad )

@
\subsection{tree.spad \cite{1}}
<<tree.spad (SPAD from IN)>>=
${MID}/tree.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/tree.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/tree.spad.pamphlet >tree.spad )

@
<<BBTREE.o (O from NRLIB)>>=
${OUT}/BBTREE.o: ${MID}/BBTREE.NRLIB
	@ echo 0 making ${OUT}/BBTREE.o from ${MID}/BBTREE.NRLIB
	@ cp ${MID}/BBTREE.NRLIB/code.o ${OUT}/BBTREE.o

@
<<BBTREE.NRLIB (NRLIB from MID)>>=
${MID}/BBTREE.NRLIB: ${MID}/BBTREE.spad
	@ echo 0 making ${MID}/BBTREE.NRLIB from ${MID}/BBTREE.spad
	@ (cd ${MID} ; 	echo ')co BBTREE.spad' | ${INTERPSYS} )

@
<<BBTREE.spad (SPAD from IN)>>=
${MID}/BBTREE.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/BBTREE.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BBTREE.NRLIB ; \
	${SPADBIN}/notangle -R"domain BBTREE BalancedBinaryTree" ${IN}/tree.spad.pamphlet >BBTREE.spad )

@
<<BSTREE.o (O from NRLIB)>>=
${OUT}/BSTREE.o: ${MID}/BSTREE.NRLIB
	@ echo 0 making ${OUT}/BSTREE.o from ${MID}/BSTREE.NRLIB
	@ cp ${MID}/BSTREE.NRLIB/code.o ${OUT}/BSTREE.o

@
<<BSTREE.NRLIB (NRLIB from MID)>>=
${MID}/BSTREE.NRLIB: ${MID}/BSTREE.spad
	@ echo 0 making ${MID}/BSTREE.NRLIB from ${MID}/BSTREE.spad
	@ (cd ${MID} ; 	echo ')co BSTREE.spad' | ${INTERPSYS} )

@
<<BSTREE.spad (SPAD from IN)>>=
${MID}/BSTREE.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/BSTREE.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BSTREE.NRLIB ; \
	${SPADBIN}/notangle -R"domain BSTREE BinarySearchTree" ${IN}/tree.spad.pamphlet >BSTREE.spad )

@
<<BTCAT-.o (O from NRLIB)>>=
${OUT}/BTCAT-.o: ${MID}/BTCAT.NRLIB
	@ echo 0 making ${OUT}/BTCAT-.o from ${MID}/BTCAT-.NRLIB
	@ cp ${MID}/BTCAT-.NRLIB/code.o ${OUT}/BTCAT-.o

@
<<BTCAT-.NRLIB (NRLIB from MID)>>=
${MID}/BTCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/BTCAT.spad 
	@ echo 0 making ${MID}/BTCAT-.NRLIB from ${MID}/BTCAT.spad
	@ (cd ${MID} ; 	echo ')co BTCAT.spad' | ${INTERPSYS} )

@
<<BTCAT.o (O from NRLIB)>>=
${OUT}/BTCAT.o: ${MID}/BTCAT.NRLIB
	@ echo 0 making ${OUT}/BTCAT.o from ${MID}/BTCAT.NRLIB
	@ cp ${MID}/BTCAT.NRLIB/code.o ${OUT}/BTCAT.o

@
<<BTCAT.NRLIB (NRLIB from MID)>>=
${MID}/BTCAT.NRLIB: ${MID}/BTCAT.spad
	@ echo 0 making ${MID}/BTCAT.NRLIB from ${MID}/BTCAT.spad
	@ (cd ${MID} ; 	echo ')co BTCAT.spad' | ${INTERPSYS} )

@
<<BTCAT.spad (SPAD from IN)>>=
${MID}/BTCAT.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/BTCAT.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BTCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category BTCAT BinaryTreeCategory" ${IN}/tree.spad.pamphlet >BTCAT.spad )

@
<<BTOURN.o (O from NRLIB)>>=
${OUT}/BTOURN.o: ${MID}/BTOURN.NRLIB
	@ echo 0 making ${OUT}/BTOURN.o from ${MID}/BTOURN.NRLIB
	@ cp ${MID}/BTOURN.NRLIB/code.o ${OUT}/BTOURN.o

@
<<BTOURN.NRLIB (NRLIB from MID)>>=
${MID}/BTOURN.NRLIB: ${MID}/BTOURN.spad
	@ echo 0 making ${MID}/BTOURN.NRLIB from ${MID}/BTOURN.spad
	@ (cd ${MID} ; 	echo ')co BTOURN.spad' | ${INTERPSYS} )

@
<<BTOURN.spad (SPAD from IN)>>=
${MID}/BTOURN.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/BTOURN.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BTOURN.NRLIB ; \
	${SPADBIN}/notangle -R"domain BTOURN BinaryTournament" ${IN}/tree.spad.pamphlet >BTOURN.spad )

@
<<BTREE.o (O from NRLIB)>>=
${OUT}/BTREE.o: ${MID}/BTREE.NRLIB
	@ echo 0 making ${OUT}/BTREE.o from ${MID}/BTREE.NRLIB
	@ cp ${MID}/BTREE.NRLIB/code.o ${OUT}/BTREE.o

@
<<BTREE.NRLIB (NRLIB from MID)>>=
${MID}/BTREE.NRLIB: ${MID}/BTREE.spad
	@ echo 0 making ${MID}/BTREE.NRLIB from ${MID}/BTREE.spad
	@ (cd ${MID} ; 	echo ')co BTREE.spad' | ${INTERPSYS} )

@
<<BTREE.spad (SPAD from IN)>>=
${MID}/BTREE.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/BTREE.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf BTREE.NRLIB ; \
	${SPADBIN}/notangle -R"domain BTREE BinaryTree" ${IN}/tree.spad.pamphlet >BTREE.spad )

@
<<PENDTREE.o (O from NRLIB)>>=
${OUT}/PENDTREE.o: ${MID}/PENDTREE.NRLIB
	@ echo 0 making ${OUT}/PENDTREE.o from ${MID}/PENDTREE.NRLIB
	@ cp ${MID}/PENDTREE.NRLIB/code.o ${OUT}/PENDTREE.o

@
<<PENDTREE.NRLIB (NRLIB from MID)>>=
${MID}/PENDTREE.NRLIB: ${MID}/PENDTREE.spad
	@ echo 0 making ${MID}/PENDTREE.NRLIB from ${MID}/PENDTREE.spad
	@ (cd ${MID} ; 	echo ')co PENDTREE.spad' | ${INTERPSYS} )

@
<<PENDTREE.spad (SPAD from IN)>>=
${MID}/PENDTREE.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/PENDTREE.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PENDTREE.NRLIB ; \
	${SPADBIN}/notangle -R"domain PENDTREE PendantTree" ${IN}/tree.spad.pamphlet >PENDTREE.spad )

@
<<TREE.o (O from NRLIB)>>=
${OUT}/TREE.o: ${MID}/TREE.NRLIB
	@ echo 0 making ${OUT}/TREE.o from ${MID}/TREE.NRLIB
	@ cp ${MID}/TREE.NRLIB/code.o ${OUT}/TREE.o

@
<<TREE.NRLIB (NRLIB from MID)>>=
${MID}/TREE.NRLIB: ${MID}/TREE.spad
	@ echo 0 making ${MID}/TREE.NRLIB from ${MID}/TREE.spad
	@ (cd ${MID} ; 	echo ')co TREE.spad' | ${INTERPSYS} )

@
<<TREE.spad (SPAD from IN)>>=
${MID}/TREE.spad: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${MID}/TREE.spad from ${IN}/tree.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TREE.NRLIB ; \
	${SPADBIN}/notangle -R"domain TREE Tree" ${IN}/tree.spad.pamphlet >TREE.spad )

@
<<tree.spad.dvi (DOC from IN)>>=
${DOC}/tree.spad.dvi: ${IN}/tree.spad.pamphlet
	@ echo 0 making ${DOC}/tree.spad.dvi from ${IN}/tree.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/tree.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} tree.spad ; \
	rm -f ${DOC}/tree.spad.pamphlet ; \
	rm -f ${DOC}/tree.spad.tex ; \
	rm -f ${DOC}/tree.spad )

@
\subsection{trigcat.spad \cite{1}}
<<trigcat.spad (SPAD from IN)>>=
${MID}/trigcat.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/trigcat.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/trigcat.spad.pamphlet >trigcat.spad )

@
<<AHYP.o (O from NRLIB)>>=
${OUT}/AHYP.o: ${MID}/AHYP.NRLIB
	@ echo 0 making ${OUT}/AHYP.o from ${MID}/AHYP.NRLIB
	@ cp ${MID}/AHYP.NRLIB/code.o ${OUT}/AHYP.o

@
<<AHYP.NRLIB (NRLIB from MID)>>=
${MID}/AHYP.NRLIB: ${MID}/AHYP.spad
	@ echo 0 making ${MID}/AHYP.NRLIB from ${MID}/AHYP.spad
	@ (cd ${MID} ; 	echo ')co AHYP.spad' | ${INTERPSYS} )

@
<<AHYP.spad (SPAD from IN)>>=
${MID}/AHYP.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/AHYP.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf AHYP.NRLIB ; \
	${SPADBIN}/notangle -R"category AHYP ArcHyperbolicFunctionCategory" ${IN}/trigcat.spad.pamphlet >AHYP.spad )

@
<<ATRIG-.o (O from NRLIB)>>=
${OUT}/ATRIG-.o: ${MID}/ATRIG.NRLIB
	@ echo 0 making ${OUT}/ATRIG-.o from ${MID}/ATRIG-.NRLIB
	@ cp ${MID}/ATRIG-.NRLIB/code.o ${OUT}/ATRIG-.o

@
<<ATRIG-.NRLIB (NRLIB from MID)>>=
${MID}/ATRIG-.NRLIB: ${OUT}/TYPE.o ${MID}/ATRIG.spad 
	@ echo 0 making ${MID}/ATRIG-.NRLIB from ${MID}/ATRIG.spad
	@ (cd ${MID} ; 	echo ')co ATRIG.spad' | ${INTERPSYS} )

@
<<ATRIG.o (O from NRLIB)>>=
${OUT}/ATRIG.o: ${MID}/ATRIG.NRLIB
	@ echo 0 making ${OUT}/ATRIG.o from ${MID}/ATRIG.NRLIB
	@ cp ${MID}/ATRIG.NRLIB/code.o ${OUT}/ATRIG.o

@
<<ATRIG.NRLIB (NRLIB from MID)>>=
${MID}/ATRIG.NRLIB: ${MID}/ATRIG.spad
	@ echo 0 making ${MID}/ATRIG.NRLIB from ${MID}/ATRIG.spad
	@ (cd ${MID} ; 	echo ')co ATRIG.spad' | ${INTERPSYS} )

@
<<ATRIG.spad (SPAD from IN)>>=
${MID}/ATRIG.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/ATRIG.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ATRIG.NRLIB ; \
	${SPADBIN}/notangle -R"category ATRIG ArcTrigonometricFunctionCategory" ${IN}/trigcat.spad.pamphlet >ATRIG.spad )

@
<<CFCAT.o (O from NRLIB)>>=
${OUT}/CFCAT.o: ${MID}/CFCAT.NRLIB
	@ echo 0 making ${OUT}/CFCAT.o from ${MID}/CFCAT.NRLIB
	@ cp ${MID}/CFCAT.NRLIB/code.o ${OUT}/CFCAT.o

@
<<CFCAT.NRLIB (NRLIB from MID)>>=
${MID}/CFCAT.NRLIB: ${MID}/CFCAT.spad
	@ echo 0 making ${MID}/CFCAT.NRLIB from ${MID}/CFCAT.spad
	@ (cd ${MID} ; 	echo ')co CFCAT.spad' | ${INTERPSYS} )

@
<<CFCAT.spad (SPAD from IN)>>=
${MID}/CFCAT.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/CFCAT.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf CFCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category CFCAT CombinatorialFunctionCategory" ${IN}/trigcat.spad.pamphlet >CFCAT.spad )

@
<<ELEMFUN-.o (O from NRLIB)>>=
${OUT}/ELEMFUN-.o: ${MID}/ELEMFUN.NRLIB
	@ echo 0 making ${OUT}/ELEMFUN-.o from ${MID}/ELEMFUN-.NRLIB
	@ cp ${MID}/ELEMFUN-.NRLIB/code.o ${OUT}/ELEMFUN-.o

@
<<ELEMFUN-.NRLIB (NRLIB from MID)>>=
${MID}/ELEMFUN-.NRLIB: ${OUT}/TYPE.o ${MID}/ELEMFUN.spad 
	@ echo 0 making ${MID}/ELEMFUN-.NRLIB from ${MID}/ELEMFUN.spad
	@ (cd ${MID} ; 	echo ')co ELEMFUN.spad' | ${INTERPSYS} )

@
<<ELEMFUN.o (O from NRLIB)>>=
${OUT}/ELEMFUN.o: ${MID}/ELEMFUN.NRLIB
	@ echo 0 making ${OUT}/ELEMFUN.o from ${MID}/ELEMFUN.NRLIB
	@ cp ${MID}/ELEMFUN.NRLIB/code.o ${OUT}/ELEMFUN.o

@
<<ELEMFUN.NRLIB (NRLIB from MID)>>=
${MID}/ELEMFUN.NRLIB: ${MID}/ELEMFUN.spad
	@ echo 0 making ${MID}/ELEMFUN.NRLIB from ${MID}/ELEMFUN.spad
	@ (cd ${MID} ; 	echo ')co ELEMFUN.spad' | ${INTERPSYS} )

@
<<ELEMFUN.spad (SPAD from IN)>>=
${MID}/ELEMFUN.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/ELEMFUN.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ELEMFUN.NRLIB ; \
	${SPADBIN}/notangle -R"category ELEMFUN ElementaryFunctionCategory" ${IN}/trigcat.spad.pamphlet >ELEMFUN.spad )

@
<<HYPCAT-.o (O from NRLIB)>>=
${OUT}/HYPCAT-.o: ${MID}/HYPCAT.NRLIB
	@ echo 0 making ${OUT}/HYPCAT-.o from ${MID}/HYPCAT-.NRLIB
	@ cp ${MID}/HYPCAT-.NRLIB/code.o ${OUT}/HYPCAT-.o

@
<<HYPCAT-.NRLIB (NRLIB from MID)>>=
${MID}/HYPCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/HYPCAT.spad 
	@ echo 0 making ${MID}/HYPCAT-.NRLIB from ${MID}/HYPCAT.spad
	@ (cd ${MID} ; 	echo ')co HYPCAT.spad' | ${INTERPSYS} )

@
<<HYPCAT.o (O from NRLIB)>>=
${OUT}/HYPCAT.o: ${MID}/HYPCAT.NRLIB
	@ echo 0 making ${OUT}/HYPCAT.o from ${MID}/HYPCAT.NRLIB
	@ cp ${MID}/HYPCAT.NRLIB/code.o ${OUT}/HYPCAT.o

@
<<HYPCAT.NRLIB (NRLIB from MID)>>=
${MID}/HYPCAT.NRLIB: ${MID}/HYPCAT.spad
	@ echo 0 making ${MID}/HYPCAT.NRLIB from ${MID}/HYPCAT.spad
	@ (cd ${MID} ; 	echo ')co HYPCAT.spad' | ${INTERPSYS} )

@
<<HYPCAT.spad (SPAD from IN)>>=
${MID}/HYPCAT.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/HYPCAT.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf HYPCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category HYPCAT HyperbolicFunctionCategory" ${IN}/trigcat.spad.pamphlet >HYPCAT.spad )

@
<<LFCAT.o (O from NRLIB)>>=
${OUT}/LFCAT.o: ${MID}/LFCAT.NRLIB
	@ echo 0 making ${OUT}/LFCAT.o from ${MID}/LFCAT.NRLIB
	@ cp ${MID}/LFCAT.NRLIB/code.o ${OUT}/LFCAT.o

@
<<LFCAT.NRLIB (NRLIB from MID)>>=
${MID}/LFCAT.NRLIB: ${MID}/LFCAT.spad
	@ echo 0 making ${MID}/LFCAT.NRLIB from ${MID}/LFCAT.spad
	@ (cd ${MID} ; 	echo ')co LFCAT.spad' | ${INTERPSYS} )

@
<<LFCAT.spad (SPAD from IN)>>=
${MID}/LFCAT.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/LFCAT.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LFCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category LFCAT LiouvillianFunctionCategory" ${IN}/trigcat.spad.pamphlet >LFCAT.spad )

@
<<PRIMCAT.o (O from NRLIB)>>=
${OUT}/PRIMCAT.o: ${MID}/PRIMCAT.NRLIB
	@ echo 0 making ${OUT}/PRIMCAT.o from ${MID}/PRIMCAT.NRLIB
	@ cp ${MID}/PRIMCAT.NRLIB/code.o ${OUT}/PRIMCAT.o

@
<<PRIMCAT.NRLIB (NRLIB from MID)>>=
${MID}/PRIMCAT.NRLIB: ${MID}/PRIMCAT.spad
	@ echo 0 making ${MID}/PRIMCAT.NRLIB from ${MID}/PRIMCAT.spad
	@ (cd ${MID} ; 	echo ')co PRIMCAT.spad' | ${INTERPSYS} )

@
<<PRIMCAT.spad (SPAD from IN)>>=
${MID}/PRIMCAT.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/PRIMCAT.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PRIMCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category PRIMCAT PrimitiveFunctionCategory" ${IN}/trigcat.spad.pamphlet >PRIMCAT.spad )

@
<<SPFCAT.o (O from NRLIB)>>=
${OUT}/SPFCAT.o: ${MID}/SPFCAT.NRLIB
	@ echo 0 making ${OUT}/SPFCAT.o from ${MID}/SPFCAT.NRLIB
	@ cp ${MID}/SPFCAT.NRLIB/code.o ${OUT}/SPFCAT.o

@
<<SPFCAT.NRLIB (NRLIB from MID)>>=
${MID}/SPFCAT.NRLIB: ${MID}/SPFCAT.spad
	@ echo 0 making ${MID}/SPFCAT.NRLIB from ${MID}/SPFCAT.spad
	@ (cd ${MID} ; 	echo ')co SPFCAT.spad' | ${INTERPSYS} )

@
<<SPFCAT.spad (SPAD from IN)>>=
${MID}/SPFCAT.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/SPFCAT.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf SPFCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category SPFCAT SpecialFunctionCategory" ${IN}/trigcat.spad.pamphlet >SPFCAT.spad )

@
<<TRANFUN-.o (O from NRLIB)>>=
${OUT}/TRANFUN-.o: ${MID}/TRANFUN.NRLIB
	@ echo 0 making ${OUT}/TRANFUN-.o from ${MID}/TRANFUN-.NRLIB
	@ cp ${MID}/TRANFUN-.NRLIB/code.o ${OUT}/TRANFUN-.o

@
<<TRANFUN-.NRLIB (NRLIB from MID)>>=
${MID}/TRANFUN-.NRLIB: ${OUT}/TYPE.o ${MID}/TRANFUN.spad 
	@ echo 0 making ${MID}/TRANFUN-.NRLIB from ${MID}/TRANFUN.spad
	@ (cd ${MID} ; 	echo ')co TRANFUN.spad' | ${INTERPSYS} )

@
<<TRANFUN.o (O from NRLIB)>>=
${OUT}/TRANFUN.o: ${MID}/TRANFUN.NRLIB
	@ echo 0 making ${OUT}/TRANFUN.o from ${MID}/TRANFUN.NRLIB
	@ cp ${MID}/TRANFUN.NRLIB/code.o ${OUT}/TRANFUN.o

@
<<TRANFUN.NRLIB (NRLIB from MID)>>=
${MID}/TRANFUN.NRLIB: ${MID}/TRANFUN.spad
	@ echo 0 making ${MID}/TRANFUN.NRLIB from ${MID}/TRANFUN.spad
	@ (cd ${MID} ; 	echo ')co TRANFUN.spad' | ${INTERPSYS} )

@
<<TRANFUN.spad (SPAD from IN)>>=
${MID}/TRANFUN.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/TRANFUN.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TRANFUN.NRLIB ; \
	${SPADBIN}/notangle -R"category TRANFUN TranscendentalFunctionCategory" ${IN}/trigcat.spad.pamphlet >TRANFUN.spad )

@
<<TRIGCAT-.o (O from NRLIB)>>=
${OUT}/TRIGCAT-.o: ${MID}/TRIGCAT.NRLIB
	@ echo 0 making ${OUT}/TRIGCAT-.o from ${MID}/TRIGCAT-.NRLIB
	@ cp ${MID}/TRIGCAT-.NRLIB/code.o ${OUT}/TRIGCAT-.o

@
<<TRIGCAT-.NRLIB (NRLIB from MID)>>=
${MID}/TRIGCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/TRIGCAT.spad 
	@ echo 0 making ${MID}/TRIGCAT-.NRLIB from ${MID}/TRIGCAT.spad
	@ (cd ${MID} ; 	echo ')co TRIGCAT.spad' | ${INTERPSYS} )

@
<<TRIGCAT.o (O from NRLIB)>>=
${OUT}/TRIGCAT.o: ${MID}/TRIGCAT.NRLIB
	@ echo 0 making ${OUT}/TRIGCAT.o from ${MID}/TRIGCAT.NRLIB
	@ cp ${MID}/TRIGCAT.NRLIB/code.o ${OUT}/TRIGCAT.o

@
<<TRIGCAT.NRLIB (NRLIB from MID)>>=
${MID}/TRIGCAT.NRLIB: ${MID}/TRIGCAT.spad
	@ echo 0 making ${MID}/TRIGCAT.NRLIB from ${MID}/TRIGCAT.spad
	@ (cd ${MID} ; 	echo ')co TRIGCAT.spad' | ${INTERPSYS} )

@
<<TRIGCAT.spad (SPAD from IN)>>=
${MID}/TRIGCAT.spad: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${MID}/TRIGCAT.spad from ${IN}/trigcat.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TRIGCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category TRIGCAT TrigonometricFunctionCategory" ${IN}/trigcat.spad.pamphlet >TRIGCAT.spad )

@
<<trigcat.spad.dvi (DOC from IN)>>=
${DOC}/trigcat.spad.dvi: ${IN}/trigcat.spad.pamphlet
	@ echo 0 making ${DOC}/trigcat.spad.dvi from ${IN}/trigcat.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/trigcat.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} trigcat.spad ; \
	rm -f ${DOC}/trigcat.spad.pamphlet ; \
	rm -f ${DOC}/trigcat.spad.tex ; \
	rm -f ${DOC}/trigcat.spad )

@
\subsection{triset.spad \cite{1}}
<<triset.spad (SPAD from IN)>>=
${MID}/triset.spad: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/triset.spad from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/triset.spad.pamphlet >triset.spad )

@
<<GTSET.o (O from NRLIB)>>=
${OUT}/GTSET.o: ${MID}/GTSET.NRLIB
	@ echo 0 making ${OUT}/GTSET.o from ${MID}/GTSET.NRLIB
	@ cp ${MID}/GTSET.NRLIB/code.o ${OUT}/GTSET.o

@
<<GTSET.NRLIB (NRLIB from MID)>>=
${MID}/GTSET.NRLIB: ${MID}/GTSET.spad
	@ echo 0 making ${MID}/GTSET.NRLIB from ${MID}/GTSET.spad
	@ (cd ${MID} ; 	echo ')co GTSET.spad' | ${INTERPSYS} )

@
<<GTSET.spad (SPAD from IN)>>=
${MID}/GTSET.spad: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/GTSET.spad from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GTSET.NRLIB ; \
	${SPADBIN}/notangle -R"domain GTSET GeneralTriangularSet" ${IN}/triset.spad.pamphlet >GTSET.spad )

@
<<PSETPK.o (O from NRLIB)>>=
${OUT}/PSETPK.o: ${MID}/PSETPK.NRLIB
	@ echo 0 making ${OUT}/PSETPK.o from ${MID}/PSETPK.NRLIB
	@ cp ${MID}/PSETPK.NRLIB/code.o ${OUT}/PSETPK.o

@
<<PSETPK.NRLIB (NRLIB from MID)>>=
${MID}/PSETPK.NRLIB: ${MID}/PSETPK.spad
	@ echo 0 making ${MID}/PSETPK.NRLIB from ${MID}/PSETPK.spad
	@ (cd ${MID} ; 	echo ')co PSETPK.spad' | ${INTERPSYS} )

@
<<PSETPK.spad (SPAD from IN)>>=
${MID}/PSETPK.spad: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/PSETPK.spad from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PSETPK.NRLIB ; \
	${SPADBIN}/notangle -R"package PSETPK PolynomialSetUtilitiesPackage" ${IN}/triset.spad.pamphlet >PSETPK.spad )

@
<<TSETCAT-.o (O from NRLIB)>>=
${OUT}/TSETCAT-.o: ${MID}/TSETCAT.NRLIB
	@ echo 0 making ${OUT}/TSETCAT-.o from ${MID}/TSETCAT-.NRLIB
	@ cp ${MID}/TSETCAT-.NRLIB/code.o ${OUT}/TSETCAT-.o

@
<<TSETCAT-.NRLIB (NRLIB from MID)>>=
${MID}/TSETCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/TSETCAT.spad 
	@ echo 0 making ${MID}/TSETCAT-.NRLIB from ${MID}/TSETCAT.spad
	@ (cd ${MID} ; 	echo ')co TSETCAT.spad' | ${INTERPSYS} )

@
<<TSETCAT.o (O from NRLIB)>>=
${OUT}/TSETCAT.o: ${MID}/TSETCAT.NRLIB
	@ echo 0 making ${OUT}/TSETCAT.o from ${MID}/TSETCAT.NRLIB
	@ cp ${MID}/TSETCAT.NRLIB/code.o ${OUT}/TSETCAT.o

@
<<TSETCAT.NRLIB (NRLIB from MID)>>=
${MID}/TSETCAT.NRLIB: ${MID}/TSETCAT.spad
	@ echo 0 making ${MID}/TSETCAT.NRLIB from ${MID}/TSETCAT.spad
	@ (cd ${MID} ; 	echo ')co TSETCAT.spad' | ${INTERPSYS} )

@
<<TSETCAT.spad (SPAD from IN)>>=
${MID}/TSETCAT.spad: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/TSETCAT.spad from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TSETCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category TSETCAT TriangularSetCategory" ${IN}/triset.spad.pamphlet >TSETCAT.spad )

@
<<TSETCAT-.o (BOOTSTRAP from MID)>>=
${MID}/TSETCAT-.o: ${MID}/TSETCAT-.lsp 
	@ echo 0 making ${MID}/TSETCAT-.o from ${MID}/TSETCAT-.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "TSETCAT-.lsp" :output-file "TSETCAT-.o"))' | ${DEPSYS} )
	@ cp ${MID}/TSETCAT-.o ${OUT}/TSETCAT-.o

@
<<TSETCAT-.lsp (LISP from IN)>>=
${MID}/TSETCAT-.lsp: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/TSETCAT-.lsp from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TSETCAT-.NRLIB ; \
	rm -rf ${OUT}/TSETCAT-.o ; \
	${SPADBIN}/notangle -R"TSETCAT-.lsp BOOTSTRAP" ${IN}/triset.spad.pamphlet >TSETCAT-.lsp )

@
<<TSETCAT.o (BOOTSTRAP from MID)>>=
${MID}/TSETCAT.o: ${MID}/TSETCAT.lsp 
	@ echo 0 making ${MID}/TSETCAT.o from ${MID}/TSETCAT.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "TSETCAT.lsp" :output-file "TSETCAT.o"))' | ${DEPSYS} )
	@ cp ${MID}/TSETCAT.o ${OUT}/TSETCAT.o

@
<<TSETCAT.lsp (LISP from IN)>>=
${MID}/TSETCAT.lsp: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/TSETCAT.lsp from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TSETCAT.NRLIB ; \
	rm -rf ${OUT}/TSETCAT.o ; \
	${SPADBIN}/notangle -R"TSETCAT.lsp BOOTSTRAP" ${IN}/triset.spad.pamphlet >TSETCAT.lsp )

<<WUTSET.o (O from NRLIB)>>=
${OUT}/WUTSET.o: ${MID}/WUTSET.NRLIB
	@ echo 0 making ${OUT}/WUTSET.o from ${MID}/WUTSET.NRLIB
	@ cp ${MID}/WUTSET.NRLIB/code.o ${OUT}/WUTSET.o

@
<<WUTSET.NRLIB (NRLIB from MID)>>=
${MID}/WUTSET.NRLIB: ${MID}/WUTSET.spad
	@ echo 0 making ${MID}/WUTSET.NRLIB from ${MID}/WUTSET.spad
	@ (cd ${MID} ; 	echo ')co WUTSET.spad' | ${INTERPSYS} )

@
<<WUTSET.spad (SPAD from IN)>>=
${MID}/WUTSET.spad: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${MID}/WUTSET.spad from ${IN}/triset.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf WUTSET.NRLIB ; \
	${SPADBIN}/notangle -R"domain WUTSET WuWenTsunTriangularSet" ${IN}/triset.spad.pamphlet >WUTSET.spad )

@
<<triset.spad.dvi (DOC from IN)>>=
${DOC}/triset.spad.dvi: ${IN}/triset.spad.pamphlet
	@ echo 0 making ${DOC}/triset.spad.dvi from ${IN}/triset.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/triset.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} triset.spad ; \
	rm -f ${DOC}/triset.spad.pamphlet ; \
	rm -f ${DOC}/triset.spad.tex ; \
	rm -f ${DOC}/triset.spad )

@
\subsection{tube.spad \cite{1}}
<<tube.spad (SPAD from IN)>>=
${MID}/tube.spad: ${IN}/tube.spad.pamphlet
	@ echo 0 making ${MID}/tube.spad from ${IN}/tube.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/tube.spad.pamphlet >tube.spad )

@
<<EXPRTUBE.o (O from NRLIB)>>=
${OUT}/EXPRTUBE.o: ${MID}/EXPRTUBE.NRLIB
	@ echo 0 making ${OUT}/EXPRTUBE.o from ${MID}/EXPRTUBE.NRLIB
	@ cp ${MID}/EXPRTUBE.NRLIB/code.o ${OUT}/EXPRTUBE.o

@
<<EXPRTUBE.NRLIB (NRLIB from MID)>>=
${MID}/EXPRTUBE.NRLIB: ${MID}/EXPRTUBE.spad
	@ echo 0 making ${MID}/EXPRTUBE.NRLIB from ${MID}/EXPRTUBE.spad
	@ (cd ${MID} ; 	echo ')co EXPRTUBE.spad' | ${INTERPSYS} )

@
<<EXPRTUBE.spad (SPAD from IN)>>=
${MID}/EXPRTUBE.spad: ${IN}/tube.spad.pamphlet
	@ echo 0 making ${MID}/EXPRTUBE.spad from ${IN}/tube.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXPRTUBE.NRLIB ; \
	${SPADBIN}/notangle -R"package EXPRTUBE ExpressionTubePlot" ${IN}/tube.spad.pamphlet >EXPRTUBE.spad )

@
<<NUMTUBE.o (O from NRLIB)>>=
${OUT}/NUMTUBE.o: ${MID}/NUMTUBE.NRLIB
	@ echo 0 making ${OUT}/NUMTUBE.o from ${MID}/NUMTUBE.NRLIB
	@ cp ${MID}/NUMTUBE.NRLIB/code.o ${OUT}/NUMTUBE.o

@
<<NUMTUBE.NRLIB (NRLIB from MID)>>=
${MID}/NUMTUBE.NRLIB: ${MID}/NUMTUBE.spad
	@ echo 0 making ${MID}/NUMTUBE.NRLIB from ${MID}/NUMTUBE.spad
	@ (cd ${MID} ; 	echo ')co NUMTUBE.spad' | ${INTERPSYS} )

@
<<NUMTUBE.spad (SPAD from IN)>>=
${MID}/NUMTUBE.spad: ${IN}/tube.spad.pamphlet
	@ echo 0 making ${MID}/NUMTUBE.spad from ${IN}/tube.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NUMTUBE.NRLIB ; \
	${SPADBIN}/notangle -R"package NUMTUBE NumericTubePlot" ${IN}/tube.spad.pamphlet >NUMTUBE.spad )

@
<<TUBE.o (O from NRLIB)>>=
${OUT}/TUBE.o: ${MID}/TUBE.NRLIB
	@ echo 0 making ${OUT}/TUBE.o from ${MID}/TUBE.NRLIB
	@ cp ${MID}/TUBE.NRLIB/code.o ${OUT}/TUBE.o

@
<<TUBE.NRLIB (NRLIB from MID)>>=
${MID}/TUBE.NRLIB: ${MID}/TUBE.spad
	@ echo 0 making ${MID}/TUBE.NRLIB from ${MID}/TUBE.spad
	@ (cd ${MID} ; 	echo ')co TUBE.spad' | ${INTERPSYS} )

@
<<TUBE.spad (SPAD from IN)>>=
${MID}/TUBE.spad: ${IN}/tube.spad.pamphlet
	@ echo 0 making ${MID}/TUBE.spad from ${IN}/tube.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TUBE.NRLIB ; \
	${SPADBIN}/notangle -R"domain TUBE TubePlot" ${IN}/tube.spad.pamphlet >TUBE.spad )

@
<<TUBETOOL.o (O from NRLIB)>>=
${OUT}/TUBETOOL.o: ${MID}/TUBETOOL.NRLIB
	@ echo 0 making ${OUT}/TUBETOOL.o from ${MID}/TUBETOOL.NRLIB
	@ cp ${MID}/TUBETOOL.NRLIB/code.o ${OUT}/TUBETOOL.o

@
<<TUBETOOL.NRLIB (NRLIB from MID)>>=
${MID}/TUBETOOL.NRLIB: ${MID}/TUBETOOL.spad
	@ echo 0 making ${MID}/TUBETOOL.NRLIB from ${MID}/TUBETOOL.spad
	@ (cd ${MID} ; 	echo ')co TUBETOOL.spad' | ${INTERPSYS} )

@
<<TUBETOOL.spad (SPAD from IN)>>=
${MID}/TUBETOOL.spad: ${IN}/tube.spad.pamphlet
	@ echo 0 making ${MID}/TUBETOOL.spad from ${IN}/tube.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TUBETOOL.NRLIB ; \
	${SPADBIN}/notangle -R"package TUBETOOL TubePlotTools" ${IN}/tube.spad.pamphlet >TUBETOOL.spad )

@
<<tube.spad.dvi (DOC from IN)>>=
${DOC}/tube.spad.dvi: ${IN}/tube.spad.pamphlet
	@ echo 0 making ${DOC}/tube.spad.dvi from ${IN}/tube.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/tube.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} tube.spad ; \
	rm -f ${DOC}/tube.spad.pamphlet ; \
	rm -f ${DOC}/tube.spad.tex ; \
	rm -f ${DOC}/tube.spad )

@
\subsection{twofact.spad \cite{1}}
<<twofact.spad (SPAD from IN)>>=
${MID}/twofact.spad: ${IN}/twofact.spad.pamphlet
	@ echo 0 making ${MID}/twofact.spad from ${IN}/twofact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/twofact.spad.pamphlet >twofact.spad )

@
<<NORMRETR.o (O from NRLIB)>>=
${OUT}/NORMRETR.o: ${MID}/NORMRETR.NRLIB
	@ echo 0 making ${OUT}/NORMRETR.o from ${MID}/NORMRETR.NRLIB
	@ cp ${MID}/NORMRETR.NRLIB/code.o ${OUT}/NORMRETR.o

@
<<NORMRETR.NRLIB (NRLIB from MID)>>=
${MID}/NORMRETR.NRLIB: ${MID}/NORMRETR.spad
	@ echo 0 making ${MID}/NORMRETR.NRLIB from ${MID}/NORMRETR.spad
	@ (cd ${MID} ; 	echo ')co NORMRETR.spad' | ${INTERPSYS} )

@
<<NORMRETR.spad (SPAD from IN)>>=
${MID}/NORMRETR.spad: ${IN}/twofact.spad.pamphlet
	@ echo 0 making ${MID}/NORMRETR.spad from ${IN}/twofact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf NORMRETR.NRLIB ; \
	${SPADBIN}/notangle -R"package NORMRETR NormRetractPackage" ${IN}/twofact.spad.pamphlet >NORMRETR.spad )

@
<<TWOFACT.o (O from NRLIB)>>=
${OUT}/TWOFACT.o: ${MID}/TWOFACT.NRLIB
	@ echo 0 making ${OUT}/TWOFACT.o from ${MID}/TWOFACT.NRLIB
	@ cp ${MID}/TWOFACT.NRLIB/code.o ${OUT}/TWOFACT.o

@
<<TWOFACT.NRLIB (NRLIB from MID)>>=
${MID}/TWOFACT.NRLIB: ${MID}/TWOFACT.spad
	@ echo 0 making ${MID}/TWOFACT.NRLIB from ${MID}/TWOFACT.spad
	@ (cd ${MID} ; 	echo ')co TWOFACT.spad' | ${INTERPSYS} )

@
<<TWOFACT.spad (SPAD from IN)>>=
${MID}/TWOFACT.spad: ${IN}/twofact.spad.pamphlet
	@ echo 0 making ${MID}/TWOFACT.spad from ${IN}/twofact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf TWOFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package TWOFACT TwoFactorize" ${IN}/twofact.spad.pamphlet >TWOFACT.spad )

@
<<twofact.spad.dvi (DOC from IN)>>=
${DOC}/twofact.spad.dvi: ${IN}/twofact.spad.pamphlet
	@ echo 0 making ${DOC}/twofact.spad.dvi from ${IN}/twofact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/twofact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} twofact.spad ; \
	rm -f ${DOC}/twofact.spad.pamphlet ; \
	rm -f ${DOC}/twofact.spad.tex ; \
	rm -f ${DOC}/twofact.spad )

@
\subsection{unifact.spad \cite{1}}
<<unifact.spad (SPAD from IN)>>=
${MID}/unifact.spad: ${IN}/unifact.spad.pamphlet
	@ echo 0 making ${MID}/unifact.spad from ${IN}/unifact.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/unifact.spad.pamphlet >unifact.spad )

@
<<UNIFACT.o (O from NRLIB)>>=
${OUT}/UNIFACT.o: ${MID}/UNIFACT.NRLIB
	@ echo 0 making ${OUT}/UNIFACT.o from ${MID}/UNIFACT.NRLIB
	@ cp ${MID}/UNIFACT.NRLIB/code.o ${OUT}/UNIFACT.o

@
<<UNIFACT.NRLIB (NRLIB from MID)>>=
${MID}/UNIFACT.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UNIFACT.spad
	@ echo 0 making ${MID}/UNIFACT.NRLIB from ${MID}/UNIFACT.spad
	@ (cd ${MID} ; 	echo ')co UNIFACT.spad' | ${INTERPSYS} )

@
<<UNIFACT.spad (SPAD from IN)>>=
${MID}/UNIFACT.spad: ${IN}/unifact.spad.pamphlet
	@ echo 0 making ${MID}/UNIFACT.spad from ${IN}/unifact.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UNIFACT.NRLIB ; \
	${SPADBIN}/notangle -R"package UNIFACT UnivariateFactorize" ${IN}/unifact.spad.pamphlet >UNIFACT.spad )

@
<<unifact.spad.dvi (DOC from IN)>>=
${DOC}/unifact.spad.dvi: ${IN}/unifact.spad.pamphlet
	@ echo 0 making ${DOC}/unifact.spad.dvi from ${IN}/unifact.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/unifact.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} unifact.spad ; \
	rm -f ${DOC}/unifact.spad.pamphlet ; \
	rm -f ${DOC}/unifact.spad.tex ; \
	rm -f ${DOC}/unifact.spad )

@
\subsection{updecomp.spad \cite{1}}
<<updecomp.spad (SPAD from IN)>>=
${MID}/updecomp.spad: ${IN}/updecomp.spad.pamphlet
	@ echo 0 making ${MID}/updecomp.spad from ${IN}/updecomp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/updecomp.spad.pamphlet >updecomp.spad )

@
<<UPDECOMP.o (O from NRLIB)>>=
${OUT}/UPDECOMP.o: ${MID}/UPDECOMP.NRLIB
	@ echo 0 making ${OUT}/UPDECOMP.o from ${MID}/UPDECOMP.NRLIB
	@ cp ${MID}/UPDECOMP.NRLIB/code.o ${OUT}/UPDECOMP.o

@
<<UPDECOMP.NRLIB (NRLIB from MID)>>=
${MID}/UPDECOMP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UPDECOMP.spad
	@ echo 0 making ${MID}/UPDECOMP.NRLIB from ${MID}/UPDECOMP.spad
	@ (cd ${MID} ; 	echo ')co UPDECOMP.spad' | ${INTERPSYS} )

@
<<UPDECOMP.spad (SPAD from IN)>>=
${MID}/UPDECOMP.spad: ${IN}/updecomp.spad.pamphlet
	@ echo 0 making ${MID}/UPDECOMP.spad from ${IN}/updecomp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPDECOMP.NRLIB ; \
	${SPADBIN}/notangle -R"package UPDECOMP UnivariatePolynomialDecompositionPackage" ${IN}/updecomp.spad.pamphlet >UPDECOMP.spad )

@
<<updecomp.spad.dvi (DOC from IN)>>=
${DOC}/updecomp.spad.dvi: ${IN}/updecomp.spad.pamphlet
	@ echo 0 making ${DOC}/updecomp.spad.dvi from ${IN}/updecomp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/updecomp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} updecomp.spad ; \
	rm -f ${DOC}/updecomp.spad.pamphlet ; \
	rm -f ${DOC}/updecomp.spad.tex ; \
	rm -f ${DOC}/updecomp.spad )

@
\subsection{updivp.spad \cite{1}}
<<updivp.spad (SPAD from IN)>>=
${MID}/updivp.spad: ${IN}/updivp.spad.pamphlet
	@ echo 0 making ${MID}/updivp.spad from ${IN}/updivp.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/updivp.spad.pamphlet >updivp.spad )

@
<<UPDIVP.o (O from NRLIB)>>=
${OUT}/UPDIVP.o: ${MID}/UPDIVP.NRLIB
	@ echo 0 making ${OUT}/UPDIVP.o from ${MID}/UPDIVP.NRLIB
	@ cp ${MID}/UPDIVP.NRLIB/code.o ${OUT}/UPDIVP.o

@
<<UPDIVP.NRLIB (NRLIB from MID)>>=
${MID}/UPDIVP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/UPDIVP.spad
	@ echo 0 making ${MID}/UPDIVP.NRLIB from ${MID}/UPDIVP.spad
	@ (cd ${MID} ; 	echo ')co UPDIVP.spad' | ${INTERPSYS} )

@
<<UPDIVP.spad (SPAD from IN)>>=
${MID}/UPDIVP.spad: ${IN}/updivp.spad.pamphlet
	@ echo 0 making ${MID}/UPDIVP.spad from ${IN}/updivp.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UPDIVP.NRLIB ; \
	${SPADBIN}/notangle -R"package UPDIVP UnivariatePolynomialDivisionPackage" ${IN}/updivp.spad.pamphlet >UPDIVP.spad )

@
<<updivp.spad.dvi (DOC from IN)>>=
${DOC}/updivp.spad.dvi: ${IN}/updivp.spad.pamphlet
	@ echo 0 making ${DOC}/updivp.spad.dvi from ${IN}/updivp.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/updivp.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} updivp.spad ; \
	rm -f ${DOC}/updivp.spad.pamphlet ; \
	rm -f ${DOC}/updivp.spad.tex ; \
	rm -f ${DOC}/updivp.spad )

@
\subsection{utsode.spad \cite{1}}
<<utsode.spad (SPAD from IN)>>=
${MID}/utsode.spad: ${IN}/utsode.spad.pamphlet
	@ echo 0 making ${MID}/utsode.spad from ${IN}/utsode.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/utsode.spad.pamphlet >utsode.spad )

@
<<UTSODE.o (O from NRLIB)>>=
${OUT}/UTSODE.o: ${MID}/UTSODE.NRLIB
	@ echo 0 making ${OUT}/UTSODE.o from ${MID}/UTSODE.NRLIB
	@ cp ${MID}/UTSODE.NRLIB/code.o ${OUT}/UTSODE.o

@
<<UTSODE.NRLIB (NRLIB from MID)>>=
${MID}/UTSODE.NRLIB: ${MID}/UTSODE.spad
	@ echo 0 making ${MID}/UTSODE.NRLIB from ${MID}/UTSODE.spad
	@ (cd ${MID} ; 	echo ')co UTSODE.spad' | ${INTERPSYS} )

@
<<UTSODE.spad (SPAD from IN)>>=
${MID}/UTSODE.spad: ${IN}/utsode.spad.pamphlet
	@ echo 0 making ${MID}/UTSODE.spad from ${IN}/utsode.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf UTSODE.NRLIB ; \
	${SPADBIN}/notangle -R"package UTSODE UnivariateTaylorSeriesODESolver" ${IN}/utsode.spad.pamphlet >UTSODE.spad )

@
<<utsode.spad.dvi (DOC from IN)>>=
${DOC}/utsode.spad.dvi: ${IN}/utsode.spad.pamphlet
	@ echo 0 making ${DOC}/utsode.spad.dvi from ${IN}/utsode.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/utsode.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} utsode.spad ; \
	rm -f ${DOC}/utsode.spad.pamphlet ; \
	rm -f ${DOC}/utsode.spad.tex ; \
	rm -f ${DOC}/utsode.spad )

@
\subsection{variable.spad \cite{1}}
<<variable.spad (SPAD from IN)>>=
${MID}/variable.spad: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${MID}/variable.spad from ${IN}/variable.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/variable.spad.pamphlet >variable.spad )

@
<<ANON.o (O from NRLIB)>>=
${OUT}/ANON.o: ${MID}/ANON.NRLIB
	@ echo 0 making ${OUT}/ANON.o from ${MID}/ANON.NRLIB
	@ cp ${MID}/ANON.NRLIB/code.o ${OUT}/ANON.o

@
<<ANON.NRLIB (NRLIB from MID)>>=
${MID}/ANON.NRLIB: ${MID}/ANON.spad
	@ echo 0 making ${MID}/ANON.NRLIB from ${MID}/ANON.spad
	@ (cd ${MID} ; 	echo ')co ANON.spad' | ${INTERPSYS} )

@
<<ANON.spad (SPAD from IN)>>=
${MID}/ANON.spad: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${MID}/ANON.spad from ${IN}/variable.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf ANON.NRLIB ; \
	${SPADBIN}/notangle -R"domain ANON AnonymousFunction" ${IN}/variable.spad.pamphlet >ANON.spad )

@
<<FUNCTION.o (O from NRLIB)>>=
${OUT}/FUNCTION.o: ${MID}/FUNCTION.NRLIB
	@ echo 0 making ${OUT}/FUNCTION.o from ${MID}/FUNCTION.NRLIB
	@ cp ${MID}/FUNCTION.NRLIB/code.o ${OUT}/FUNCTION.o

@
<<FUNCTION.NRLIB (NRLIB from MID)>>=
${MID}/FUNCTION.NRLIB: ${MID}/FUNCTION.spad
	@ echo 0 making ${MID}/FUNCTION.NRLIB from ${MID}/FUNCTION.spad
	@ (cd ${MID} ; 	echo ')co FUNCTION.spad' | ${INTERPSYS} )

@
<<FUNCTION.spad (SPAD from IN)>>=
${MID}/FUNCTION.spad: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${MID}/FUNCTION.spad from ${IN}/variable.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FUNCTION.NRLIB ; \
	${SPADBIN}/notangle -R"domain FUNCTION FunctionCalled" ${IN}/variable.spad.pamphlet >FUNCTION.spad )

@
<<OVAR.o (O from NRLIB)>>=
${OUT}/OVAR.o: ${MID}/OVAR.NRLIB
	@ echo 0 making ${OUT}/OVAR.o from ${MID}/OVAR.NRLIB
	@ cp ${MID}/OVAR.NRLIB/code.o ${OUT}/OVAR.o

@
<<OVAR.NRLIB (NRLIB from MID)>>=
${MID}/OVAR.NRLIB: ${MID}/OVAR.spad
	@ echo 0 making ${MID}/OVAR.NRLIB from ${MID}/OVAR.spad
	@ (cd ${MID} ; 	echo ')co OVAR.spad' | ${INTERPSYS} )

@
<<OVAR.spad (SPAD from IN)>>=
${MID}/OVAR.spad: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${MID}/OVAR.spad from ${IN}/variable.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OVAR.NRLIB ; \
	${SPADBIN}/notangle -R"domain OVAR OrderedVariableList" ${IN}/variable.spad.pamphlet >OVAR.spad )

@
<<RULECOLD.o (O from NRLIB)>>=
${OUT}/RULECOLD.o: ${MID}/RULECOLD.NRLIB
	@ echo 0 making ${OUT}/RULECOLD.o from ${MID}/RULECOLD.NRLIB
	@ cp ${MID}/RULECOLD.NRLIB/code.o ${OUT}/RULECOLD.o

@
<<RULECOLD.NRLIB (NRLIB from MID)>>=
${MID}/RULECOLD.NRLIB: ${MID}/RULECOLD.spad
	@ echo 0 making ${MID}/RULECOLD.NRLIB from ${MID}/RULECOLD.spad
	@ (cd ${MID} ; 	echo ')co RULECOLD.spad' | ${INTERPSYS} )

@
<<RULECOLD.spad (SPAD from IN)>>=
${MID}/RULECOLD.spad: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${MID}/RULECOLD.spad from ${IN}/variable.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RULECOLD.NRLIB ; \
	${SPADBIN}/notangle -R"domain RULECOLD RuleCalled" ${IN}/variable.spad.pamphlet >RULECOLD.spad )

@
<<VARIABLE.o (O from NRLIB)>>=
${OUT}/VARIABLE.o: ${MID}/VARIABLE.NRLIB
	@ echo 0 making ${OUT}/VARIABLE.o from ${MID}/VARIABLE.NRLIB
	@ cp ${MID}/VARIABLE.NRLIB/code.o ${OUT}/VARIABLE.o

@
<<VARIABLE.NRLIB (NRLIB from MID)>>=
${MID}/VARIABLE.NRLIB: ${MID}/VARIABLE.spad
	@ echo 0 making ${MID}/VARIABLE.NRLIB from ${MID}/VARIABLE.spad
	@ (cd ${MID} ; 	echo ')co VARIABLE.spad' | ${INTERPSYS} )

@
<<VARIABLE.spad (SPAD from IN)>>=
${MID}/VARIABLE.spad: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${MID}/VARIABLE.spad from ${IN}/variable.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VARIABLE.NRLIB ; \
	${SPADBIN}/notangle -R"domain VARIABLE Variable" ${IN}/variable.spad.pamphlet >VARIABLE.spad )

@
<<variable.spad.dvi (DOC from IN)>>=
${DOC}/variable.spad.dvi: ${IN}/variable.spad.pamphlet
	@ echo 0 making ${DOC}/variable.spad.dvi from ${IN}/variable.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/variable.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} variable.spad ; \
	rm -f ${DOC}/variable.spad.pamphlet ; \
	rm -f ${DOC}/variable.spad.tex ; \
	rm -f ${DOC}/variable.spad )

@
\subsection{vector.spad \cite{1}}
<<vector.spad (SPAD from IN)>>=
${MID}/vector.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/vector.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/vector.spad.pamphlet >vector.spad )

@
<<DIRPCAT-.o (O from NRLIB)>>=
${OUT}/DIRPCAT-.o: ${MID}/DIRPCAT.NRLIB
	@ echo 0 making ${OUT}/DIRPCAT-.o from ${MID}/DIRPCAT-.NRLIB
	@ cp ${MID}/DIRPCAT-.NRLIB/code.o ${OUT}/DIRPCAT-.o

@
<<DIRPCAT-.NRLIB (NRLIB from MID)>>=
${MID}/DIRPCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/DIRPCAT.spad 
	@ echo 0 making ${MID}/DIRPCAT-.NRLIB from ${MID}/DIRPCAT.spad
	@ (cd ${MID} ; 	echo ')co DIRPCAT.spad' | ${INTERPSYS} )

@
<<DIRPCAT.o (O from NRLIB)>>=
${OUT}/DIRPCAT.o: ${MID}/DIRPCAT.NRLIB
	@ echo 0 making ${OUT}/DIRPCAT.o from ${MID}/DIRPCAT.NRLIB
	@ cp ${MID}/DIRPCAT.NRLIB/code.o ${OUT}/DIRPCAT.o

@
<<DIRPCAT.NRLIB (NRLIB from MID)>>=
${MID}/DIRPCAT.NRLIB: ${MID}/DIRPCAT.spad
	@ echo 0 making ${MID}/DIRPCAT.NRLIB from ${MID}/DIRPCAT.spad
	@ (cd ${MID} ; 	echo ')co DIRPCAT.spad' | ${INTERPSYS} )

@
<<DIRPCAT.spad (SPAD from IN)>>=
${MID}/DIRPCAT.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/DIRPCAT.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIRPCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category DIRPCAT DirectProductCategory" ${IN}/vector.spad.pamphlet >DIRPCAT.spad )

@
<<DIRPROD.o (O from NRLIB)>>=
${OUT}/DIRPROD.o: ${MID}/DIRPROD.NRLIB
	@ echo 0 making ${OUT}/DIRPROD.o from ${MID}/DIRPROD.NRLIB
	@ cp ${MID}/DIRPROD.NRLIB/code.o ${OUT}/DIRPROD.o

@
<<DIRPROD.NRLIB (NRLIB from MID)>>=
${MID}/DIRPROD.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/DIRPROD.spad
	@ echo 0 making ${MID}/DIRPROD.NRLIB from ${MID}/DIRPROD.spad
	@ (cd ${MID} ; 	echo ')co DIRPROD.spad' | ${INTERPSYS} )

@
<<DIRPROD.spad (SPAD from IN)>>=
${MID}/DIRPROD.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/DIRPROD.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIRPROD.NRLIB ; \
	${SPADBIN}/notangle -R"domain DIRPROD DirectProduct" ${IN}/vector.spad.pamphlet >DIRPROD.spad )

@
<<DIRPROD2.o (O from NRLIB)>>=
${OUT}/DIRPROD2.o: ${MID}/DIRPROD2.NRLIB
	@ echo 0 making ${OUT}/DIRPROD2.o from ${MID}/DIRPROD2.NRLIB
	@ cp ${MID}/DIRPROD2.NRLIB/code.o ${OUT}/DIRPROD2.o

@
<<DIRPROD2.NRLIB (NRLIB from MID)>>=
${MID}/DIRPROD2.NRLIB: ${MID}/DIRPROD2.spad
	@ echo 0 making ${MID}/DIRPROD2.NRLIB from ${MID}/DIRPROD2.spad
	@ (cd ${MID} ; 	echo ')co DIRPROD2.spad' | ${INTERPSYS} )

@
<<DIRPROD2.spad (SPAD from IN)>>=
${MID}/DIRPROD2.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/DIRPROD2.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf DIRPROD2.NRLIB ; \
	${SPADBIN}/notangle -R"package DIRPROD2 DirectProductFunctions2" ${IN}/vector.spad.pamphlet >DIRPROD2.spad )

@
<<IVECTOR.o (O from NRLIB)>>=
${OUT}/IVECTOR.o: ${MID}/IVECTOR.NRLIB
	@ echo 0 making ${OUT}/IVECTOR.o from ${MID}/IVECTOR.NRLIB
	@ cp ${MID}/IVECTOR.NRLIB/code.o ${OUT}/IVECTOR.o

@
<<IVECTOR.NRLIB (NRLIB from MID)>>=
${MID}/IVECTOR.NRLIB: ${MID}/IVECTOR.spad
	@ echo 0 making ${MID}/IVECTOR.NRLIB from ${MID}/IVECTOR.spad
	@ (cd ${MID} ; 	echo ')co IVECTOR.spad' | ${INTERPSYS} )

@
<<IVECTOR.spad (SPAD from IN)>>=
${MID}/IVECTOR.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/IVECTOR.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf IVECTOR.NRLIB ; \
	${SPADBIN}/notangle -R"domain IVECTOR IndexedVector" ${IN}/vector.spad.pamphlet >IVECTOR.spad )

@
<<VECTCAT-.o (O from NRLIB)>>=
${OUT}/VECTCAT-.o: ${MID}/VECTCAT.NRLIB
	@ echo 0 making ${OUT}/VECTCAT-.o from ${MID}/VECTCAT-.NRLIB
	@ cp ${MID}/VECTCAT-.NRLIB/code.o ${OUT}/VECTCAT-.o

@
<<VECTCAT-.NRLIB (NRLIB from MID)>>=
${MID}/VECTCAT-.NRLIB: ${OUT}/TYPE.o ${MID}/VECTCAT.spad 
	@ echo 0 making ${MID}/VECTCAT-.NRLIB from ${MID}/VECTCAT.spad
	@ (cd ${MID} ; 	echo ')co VECTCAT.spad' | ${INTERPSYS} )

@
<<VECTCAT.o (O from NRLIB)>>=
${OUT}/VECTCAT.o: ${MID}/VECTCAT.NRLIB
	@ echo 0 making ${OUT}/VECTCAT.o from ${MID}/VECTCAT.NRLIB
	@ cp ${MID}/VECTCAT.NRLIB/code.o ${OUT}/VECTCAT.o

@
<<VECTCAT.NRLIB (NRLIB from MID)>>=
${MID}/VECTCAT.NRLIB: ${MID}/VECTCAT.spad
	@ echo 0 making ${MID}/VECTCAT.NRLIB from ${MID}/VECTCAT.spad
	@ (cd ${MID} ; 	echo ')co VECTCAT.spad' | ${INTERPSYS} )

@
<<VECTCAT.spad (SPAD from IN)>>=
${MID}/VECTCAT.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/VECTCAT.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VECTCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category VECTCAT VectorCategory" ${IN}/vector.spad.pamphlet >VECTCAT.spad )

@
<<VECTOR.o (O from NRLIB)>>=
${OUT}/VECTOR.o: ${MID}/VECTOR.NRLIB
	@ echo 0 making ${OUT}/VECTOR.o from ${MID}/VECTOR.NRLIB
	@ cp ${MID}/VECTOR.NRLIB/code.o ${OUT}/VECTOR.o

@
<<VECTOR.NRLIB (NRLIB from MID)>>=
${MID}/VECTOR.NRLIB: ${MID}/VECTOR.spad
	@ echo 0 making ${MID}/VECTOR.NRLIB from ${MID}/VECTOR.spad
	@ (cd ${MID} ; 	echo ')co VECTOR.spad' | ${INTERPSYS} )

@
<<VECTOR.spad (SPAD from IN)>>=
${MID}/VECTOR.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/VECTOR.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VECTOR.NRLIB ; \
	${SPADBIN}/notangle -R"domain VECTOR Vector" ${IN}/boolean.spad.pamphlet >VECTOR.spad )

@
<<VECTOR.o (BOOTSTRAP from MID)>>=
${MID}/VECTOR.o: ${MID}/VECTOR.lsp
	@ echo 0 making ${MID}/VECTOR.o from ${MID}/VECTOR.lsp
	@ (cd ${MID} ; \
	echo '(progn (in-package (quote boot)) (compile-file "VECTOR.lsp" :output-file "VECTOR.o"))' | ${DEPSYS} )
	@ cp ${MID}/VECTOR.o ${OUT}/VECTOR.o

@
<<VECTOR.lsp (LISP from IN)>>=
${MID}/VECTOR.lsp: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/VECTOR.lsp from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VECTOR.NRLIB ; \
	rm -rf ${OUT}/VECTOR.o ; \
	${SPADBIN}/notangle -R"VECTOR.lsp BOOTSTRAP" ${IN}/vector.spad.pamphlet >VECTOR.lsp )

@
<<VECTOR2.o (O from NRLIB)>>=
${OUT}/VECTOR2.o: ${MID}/VECTOR2.NRLIB
	@ echo 0 making ${OUT}/VECTOR2.o from ${MID}/VECTOR2.NRLIB
	@ cp ${MID}/VECTOR2.NRLIB/code.o ${OUT}/VECTOR2.o

@
<<VECTOR2.NRLIB (NRLIB from MID)>>=
${MID}/VECTOR2.NRLIB: ${MID}/VECTOR2.spad
	@ echo 0 making ${MID}/VECTOR2.NRLIB from ${MID}/VECTOR2.spad
	@ (cd ${MID} ; 	echo ')co VECTOR2.spad' | ${INTERPSYS} )

@
<<VECTOR2.spad (SPAD from IN)>>=
${MID}/VECTOR2.spad: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${MID}/VECTOR2.spad from ${IN}/vector.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VECTOR2.NRLIB ; \
	${SPADBIN}/notangle -R"package VECTOR2 VectorFunctions2" ${IN}/vector.spad.pamphlet >VECTOR2.spad )

@
<<vector.spad.dvi (DOC from IN)>>=
${DOC}/vector.spad.dvi: ${IN}/vector.spad.pamphlet
	@ echo 0 making ${DOC}/vector.spad.dvi from ${IN}/vector.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/vector.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} vector.spad ; \
	rm -f ${DOC}/vector.spad.pamphlet ; \
	rm -f ${DOC}/vector.spad.tex ; \
	rm -f ${DOC}/vector.spad )

@
\subsection{view2D.spad \cite{1}}
<<view2D.spad (SPAD from IN)>>=
${MID}/view2D.spad: ${IN}/view2D.spad.pamphlet
	@ echo 0 making ${MID}/view2D.spad from ${IN}/view2D.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/view2D.spad.pamphlet >view2D.spad )

@
<<GRIMAGE.o (O from NRLIB)>>=
${OUT}/GRIMAGE.o: ${MID}/GRIMAGE.NRLIB
	@ echo 0 making ${OUT}/GRIMAGE.o from ${MID}/GRIMAGE.NRLIB
	@ cp ${MID}/GRIMAGE.NRLIB/code.o ${OUT}/GRIMAGE.o

@
<<GRIMAGE.NRLIB (NRLIB from MID)>>=
${MID}/GRIMAGE.NRLIB: ${MID}/GRIMAGE.spad
	@ echo 0 making ${MID}/GRIMAGE.NRLIB from ${MID}/GRIMAGE.spad
	@ (cd ${MID} ; 	echo ')co GRIMAGE.spad' | ${INTERPSYS} )

@
<<GRIMAGE.spad (SPAD from IN)>>=
${MID}/GRIMAGE.spad: ${IN}/view2D.spad.pamphlet
	@ echo 0 making ${MID}/GRIMAGE.spad from ${IN}/view2D.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf GRIMAGE.NRLIB ; \
	${SPADBIN}/notangle -R"domain GRIMAGE GraphImage" ${IN}/view2D.spad.pamphlet >GRIMAGE.spad )

@
<<VIEW2D.o (O from NRLIB)>>=
${OUT}/VIEW2D.o: ${MID}/VIEW2D.NRLIB
	@ echo 0 making ${OUT}/VIEW2D.o from ${MID}/VIEW2D.NRLIB
	@ cp ${MID}/VIEW2D.NRLIB/code.o ${OUT}/VIEW2D.o

@
<<VIEW2D.NRLIB (NRLIB from MID)>>=
${MID}/VIEW2D.NRLIB: ${MID}/VIEW2D.spad
	@ echo 0 making ${MID}/VIEW2D.NRLIB from ${MID}/VIEW2D.spad
	@ (cd ${MID} ; 	echo ')co VIEW2D.spad' | ${INTERPSYS} )

@
<<VIEW2D.spad (SPAD from IN)>>=
${MID}/VIEW2D.spad: ${IN}/view2D.spad.pamphlet
	@ echo 0 making ${MID}/VIEW2D.spad from ${IN}/view2D.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VIEW2D.NRLIB ; \
	${SPADBIN}/notangle -R"domain VIEW2D TwoDimensionalViewport" ${IN}/view2D.spad.pamphlet >VIEW2D.spad )

@
<<view2D.spad.dvi (DOC from IN)>>=
${DOC}/view2D.spad.dvi: ${IN}/view2D.spad.pamphlet
	@ echo 0 making ${DOC}/view2D.spad.dvi from ${IN}/view2D.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/view2D.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} view2D.spad ; \
	rm -f ${DOC}/view2D.spad.pamphlet ; \
	rm -f ${DOC}/view2D.spad.tex ; \
	rm -f ${DOC}/view2D.spad )

@
\subsection{view3D.spad \cite{1}}
<<view3D.spad (SPAD from IN)>>=
${MID}/view3D.spad: ${IN}/view3D.spad.pamphlet
	@ echo 0 making ${MID}/view3D.spad from ${IN}/view3D.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/view3D.spad.pamphlet >view3D.spad )

@
<<VIEW3D.o (O from NRLIB)>>=
${OUT}/VIEW3D.o: ${MID}/VIEW3D.NRLIB
	@ echo 0 making ${OUT}/VIEW3D.o from ${MID}/VIEW3D.NRLIB
	@ cp ${MID}/VIEW3D.NRLIB/code.o ${OUT}/VIEW3D.o

@
<<VIEW3D.NRLIB (NRLIB from MID)>>=
${MID}/VIEW3D.NRLIB: ${MID}/VIEW3D.spad
	@ echo 0 making ${MID}/VIEW3D.NRLIB from ${MID}/VIEW3D.spad
	@ (cd ${MID} ; 	echo ')co VIEW3D.spad' | ${INTERPSYS} )

@
<<VIEW3D.spad (SPAD from IN)>>=
${MID}/VIEW3D.spad: ${IN}/view3D.spad.pamphlet
	@ echo 0 making ${MID}/VIEW3D.spad from ${IN}/view3D.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VIEW3D.NRLIB ; \
	${SPADBIN}/notangle -R"domain VIEW3D ThreeDimensionalViewport" ${IN}/view3D.spad.pamphlet >VIEW3D.spad )

@
<<view3D.spad.dvi (DOC from IN)>>=
${DOC}/view3D.spad.dvi: ${IN}/view3D.spad.pamphlet
	@ echo 0 making ${DOC}/view3D.spad.dvi from ${IN}/view3D.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/view3D.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} view3D.spad ; \
	rm -f ${DOC}/view3D.spad.pamphlet ; \
	rm -f ${DOC}/view3D.spad.tex ; \
	rm -f ${DOC}/view3D.spad )

@
\subsection{viewDef.spad \cite{1}}
<<viewDef.spad (SPAD from IN)>>=
${MID}/viewDef.spad: ${IN}/viewDef.spad.pamphlet
	@ echo 0 making ${MID}/viewDef.spad from ${IN}/viewDef.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/viewDef.spad.pamphlet >viewDef.spad )

@
<<VIEWDEF.o (O from NRLIB)>>=
${OUT}/VIEWDEF.o: ${MID}/VIEWDEF.NRLIB
	@ echo 0 making ${OUT}/VIEWDEF.o from ${MID}/VIEWDEF.NRLIB
	@ cp ${MID}/VIEWDEF.NRLIB/code.o ${OUT}/VIEWDEF.o

@
<<VIEWDEF.NRLIB (NRLIB from MID)>>=
${MID}/VIEWDEF.NRLIB: ${MID}/VIEWDEF.spad
	@ echo 0 making ${MID}/VIEWDEF.NRLIB from ${MID}/VIEWDEF.spad
	@ (cd ${MID} ; 	echo ')co VIEWDEF.spad' | ${INTERPSYS} )

@
<<VIEWDEF.spad (SPAD from IN)>>=
${MID}/VIEWDEF.spad: ${IN}/viewDef.spad.pamphlet
	@ echo 0 making ${MID}/VIEWDEF.spad from ${IN}/viewDef.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VIEWDEF.NRLIB ; \
	${SPADBIN}/notangle -R"package VIEWDEF ViewDefaultsPackage" ${IN}/viewDef.spad.pamphlet >VIEWDEF.spad )

@
<<viewDef.spad.dvi (DOC from IN)>>=
${DOC}/viewDef.spad.dvi: ${IN}/viewDef.spad.pamphlet
	@ echo 0 making ${DOC}/viewDef.spad.dvi from ${IN}/viewDef.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/viewDef.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} viewDef.spad ; \
	rm -f ${DOC}/viewDef.spad.pamphlet ; \
	rm -f ${DOC}/viewDef.spad.tex ; \
	rm -f ${DOC}/viewDef.spad )

@
\subsection{viewpack.spad \cite{1}}
<<viewpack.spad (SPAD from IN)>>=
${MID}/viewpack.spad: ${IN}/viewpack.spad.pamphlet
	@ echo 0 making ${MID}/viewpack.spad from ${IN}/viewpack.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/viewpack.spad.pamphlet >viewpack.spad )

@
<<VIEW.o (O from NRLIB)>>=
${OUT}/VIEW.o: ${MID}/VIEW.NRLIB
	@ echo 0 making ${OUT}/VIEW.o from ${MID}/VIEW.NRLIB
	@ cp ${MID}/VIEW.NRLIB/code.o ${OUT}/VIEW.o

@
<<VIEW.NRLIB (NRLIB from MID)>>=
${MID}/VIEW.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/VIEW.spad
	@ echo 0 making ${MID}/VIEW.NRLIB from ${MID}/VIEW.spad
	@ (cd ${MID} ; 	echo ')co VIEW.spad' | ${INTERPSYS} )

@
<<VIEW.spad (SPAD from IN)>>=
${MID}/VIEW.spad: ${IN}/viewpack.spad.pamphlet
	@ echo 0 making ${MID}/VIEW.spad from ${IN}/viewpack.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VIEW.NRLIB ; \
	${SPADBIN}/notangle -R"package VIEW ViewportPackage" ${IN}/viewpack.spad.pamphlet >VIEW.spad )

@
<<viewpack.spad.dvi (DOC from IN)>>=
${DOC}/viewpack.spad.dvi: ${IN}/viewpack.spad.pamphlet
	@ echo 0 making ${DOC}/viewpack.spad.dvi from ${IN}/viewpack.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/viewpack.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} viewpack.spad ; \
	rm -f ${DOC}/viewpack.spad.pamphlet ; \
	rm -f ${DOC}/viewpack.spad.tex ; \
	rm -f ${DOC}/viewpack.spad )

@
\subsection{void.spad \cite{1}}
<<void.spad (SPAD from IN)>>=
${MID}/void.spad: ${IN}/void.spad.pamphlet
	@ echo 0 making ${MID}/void.spad from ${IN}/void.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/void.spad.pamphlet >void.spad )

@
<<EXIT.o (O from NRLIB)>>=
${OUT}/EXIT.o: ${MID}/EXIT.NRLIB
	@ echo 0 making ${OUT}/EXIT.o from ${MID}/EXIT.NRLIB
	@ cp ${MID}/EXIT.NRLIB/code.o ${OUT}/EXIT.o

@
<<EXIT.NRLIB (NRLIB from MID)>>=
${MID}/EXIT.NRLIB: ${MID}/EXIT.spad
	@ echo 0 making ${MID}/EXIT.NRLIB from ${MID}/EXIT.spad
	@ (cd ${MID} ; 	echo ')co EXIT.spad' | ${INTERPSYS} )

@
<<EXIT.spad (SPAD from IN)>>=
${MID}/EXIT.spad: ${IN}/void.spad.pamphlet
	@ echo 0 making ${MID}/EXIT.spad from ${IN}/void.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf EXIT.NRLIB ; \
	${SPADBIN}/notangle -R"domain EXIT Exit" ${IN}/void.spad.pamphlet >EXIT.spad )

@
<<RESLATC.o (O from NRLIB)>>=
${OUT}/RESLATC.o: ${MID}/RESLATC.NRLIB
	@ echo 0 making ${OUT}/RESLATC.o from ${MID}/RESLATC.NRLIB
	@ cp ${MID}/RESLATC.NRLIB/code.o ${OUT}/RESLATC.o

@
<<RESLATC.NRLIB (NRLIB from MID)>>=
${MID}/RESLATC.NRLIB: ${OUT}/TYPE.o ${MID}/RESLATC.spad
	@ echo 0 making ${MID}/RESLATC.NRLIB from ${MID}/RESLATC.spad
	@ (cd ${MID} ; 	echo ')co RESLATC.spad' | ${INTERPSYS} )

@
<<RESLATC.spad (SPAD from IN)>>=
${MID}/RESLATC.spad: ${IN}/void.spad.pamphlet
	@ echo 0 making ${MID}/RESLATC.spad from ${IN}/void.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf RESLATC.NRLIB ; \
	${SPADBIN}/notangle -R"package RESLATC ResolveLatticeCompletion" ${IN}/void.spad.pamphlet >RESLATC.spad )

@
<<VOID.o (O from NRLIB)>>=
${OUT}/VOID.o: ${MID}/VOID.NRLIB
	@ echo 0 making ${OUT}/VOID.o from ${MID}/VOID.NRLIB
	@ cp ${MID}/VOID.NRLIB/code.o ${OUT}/VOID.o

@
<<VOID.NRLIB (NRLIB from MID)>>=
${MID}/VOID.NRLIB: ${MID}/VOID.spad
	@ echo 0 making ${MID}/VOID.NRLIB from ${MID}/VOID.spad
	@ (cd ${MID} ; 	echo ')co VOID.spad' | ${INTERPSYS} )

@
<<VOID.spad (SPAD from IN)>>=
${MID}/VOID.spad: ${IN}/void.spad.pamphlet
	@ echo 0 making ${MID}/VOID.spad from ${IN}/void.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf VOID.NRLIB ; \
	${SPADBIN}/notangle -R"domain VOID Void" ${IN}/void.spad.pamphlet >VOID.spad )

@
<<void.spad.dvi (DOC from IN)>>=
${DOC}/void.spad.dvi: ${IN}/void.spad.pamphlet
	@ echo 0 making ${DOC}/void.spad.dvi from ${IN}/void.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/void.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} void.spad ; \
	rm -f ${DOC}/void.spad.pamphlet ; \
	rm -f ${DOC}/void.spad.tex ; \
	rm -f ${DOC}/void.spad )

@
\subsection{weier.spad \cite{1}}
<<weier.spad (SPAD from IN)>>=
${MID}/weier.spad: ${IN}/weier.spad.pamphlet
	@ echo 0 making ${MID}/weier.spad from ${IN}/weier.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/weier.spad.pamphlet >weier.spad )

@
<<WEIER.o (O from NRLIB)>>=
${OUT}/WEIER.o: ${MID}/WEIER.NRLIB
	@ echo 0 making ${OUT}/WEIER.o from ${MID}/WEIER.NRLIB
	@ cp ${MID}/WEIER.NRLIB/code.o ${OUT}/WEIER.o

@
<<WEIER.NRLIB (NRLIB from MID)>>=
${MID}/WEIER.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/WEIER.spad
	@ echo 0 making ${MID}/WEIER.NRLIB from ${MID}/WEIER.spad
	@ (cd ${MID} ; 	echo ')co WEIER.spad' | ${INTERPSYS} )

@
<<WEIER.spad (SPAD from IN)>>=
${MID}/WEIER.spad: ${IN}/weier.spad.pamphlet
	@ echo 0 making ${MID}/WEIER.spad from ${IN}/weier.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf WEIER.NRLIB ; \
	${SPADBIN}/notangle -R"package WEIER WeierstrassPreparation" ${IN}/weier.spad.pamphlet >WEIER.spad )

@
<<weier.spad.dvi (DOC from IN)>>=
${DOC}/weier.spad.dvi: ${IN}/weier.spad.pamphlet
	@ echo 0 making ${DOC}/weier.spad.dvi from ${IN}/weier.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/weier.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} weier.spad ; \
	rm -f ${DOC}/weier.spad.pamphlet ; \
	rm -f ${DOC}/weier.spad.tex ; \
	rm -f ${DOC}/weier.spad )

@
\subsection{wtpol.spad \cite{1}}
<<wtpol.spad (SPAD from IN)>>=
${MID}/wtpol.spad: ${IN}/wtpol.spad.pamphlet
	@ echo 0 making ${MID}/wtpol.spad from ${IN}/wtpol.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/wtpol.spad.pamphlet >wtpol.spad )

@
<<OWP.o (O from NRLIB)>>=
${OUT}/OWP.o: ${MID}/OWP.NRLIB
	@ echo 0 making ${OUT}/OWP.o from ${MID}/OWP.NRLIB
	@ cp ${MID}/OWP.NRLIB/code.o ${OUT}/OWP.o

@
<<OWP.NRLIB (NRLIB from MID)>>=
${MID}/OWP.NRLIB: ${MID}/OWP.spad
	@ echo 0 making ${MID}/OWP.NRLIB from ${MID}/OWP.spad
	@ (cd ${MID} ; 	echo ')co OWP.spad' | ${INTERPSYS} )

@
<<OWP.spad (SPAD from IN)>>=
${MID}/OWP.spad: ${IN}/wtpol.spad.pamphlet
	@ echo 0 making ${MID}/OWP.spad from ${IN}/wtpol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OWP.NRLIB ; \
	${SPADBIN}/notangle -R"domain OWP OrdinaryWeightedPolynomials" ${IN}/wtpol.spad.pamphlet >OWP.spad )

@
<<WP.o (O from NRLIB)>>=
${OUT}/WP.o: ${MID}/WP.NRLIB
	@ echo 0 making ${OUT}/WP.o from ${MID}/WP.NRLIB
	@ cp ${MID}/WP.NRLIB/code.o ${OUT}/WP.o

@
<<WP.NRLIB (NRLIB from MID)>>=
${MID}/WP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/WP.spad
	@ echo 0 making ${MID}/WP.NRLIB from ${MID}/WP.spad
	@ (cd ${MID} ; 	echo ')co WP.spad' | ${INTERPSYS} )

@
<<WP.spad (SPAD from IN)>>=
${MID}/WP.spad: ${IN}/wtpol.spad.pamphlet
	@ echo 0 making ${MID}/WP.spad from ${IN}/wtpol.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf WP.NRLIB ; \
	${SPADBIN}/notangle -R"domain WP WeightedPolynomials" ${IN}/wtpol.spad.pamphlet >WP.spad )

@
<<wtpol.spad.dvi (DOC from IN)>>=
${DOC}/wtpol.spad.dvi: ${IN}/wtpol.spad.pamphlet
	@ echo 0 making ${DOC}/wtpol.spad.dvi from ${IN}/wtpol.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/wtpol.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} wtpol.spad ; \
	rm -f ${DOC}/wtpol.spad.pamphlet ; \
	rm -f ${DOC}/wtpol.spad.tex ; \
	rm -f ${DOC}/wtpol.spad )

@
\subsection{xlpoly.spad \cite{1}}
<<xlpoly.spad (SPAD from IN)>>=
${MID}/xlpoly.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/xlpoly.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/xlpoly.spad.pamphlet >xlpoly.spad )

@
<<FLALG.o (O from NRLIB)>>=
${OUT}/FLALG.o: ${MID}/FLALG.NRLIB
	@ echo 0 making ${OUT}/FLALG.o from ${MID}/FLALG.NRLIB
	@ cp ${MID}/FLALG.NRLIB/code.o ${OUT}/FLALG.o

@
<<FLALG.NRLIB (NRLIB from MID)>>=
${MID}/FLALG.NRLIB: ${MID}/FLALG.spad
	@ echo 0 making ${MID}/FLALG.NRLIB from ${MID}/FLALG.spad
	@ (cd ${MID} ; 	echo ')co FLALG.spad' | ${INTERPSYS} )

@
<<FLALG.spad (SPAD from IN)>>=
${MID}/FLALG.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/FLALG.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FLALG.NRLIB ; \
	${SPADBIN}/notangle -R"category FLALG FreeLieAlgebra" ${IN}/xlpoly.spad.pamphlet >FLALG.spad )

@
<<LEXP.o (O from NRLIB)>>=
${OUT}/LEXP.o: ${MID}/LEXP.NRLIB
	@ echo 0 making ${OUT}/LEXP.o from ${MID}/LEXP.NRLIB
	@ cp ${MID}/LEXP.NRLIB/code.o ${OUT}/LEXP.o

@
<<LEXP.NRLIB (NRLIB from MID)>>=
${MID}/LEXP.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/LEXP.spad
	@ echo 0 making ${MID}/LEXP.NRLIB from ${MID}/LEXP.spad
	@ (cd ${MID} ; 	echo ')co LEXP.spad' | ${INTERPSYS} )

@
<<LEXP.spad (SPAD from IN)>>=
${MID}/LEXP.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/LEXP.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LEXP.NRLIB ; \
	${SPADBIN}/notangle -R"domain LEXP LieExponentials" ${IN}/xlpoly.spad.pamphlet >LEXP.spad )

@
<<LIECAT-.o (O from NRLIB)>>=
${OUT}/LIECAT-.o: ${MID}/LIECAT.NRLIB
	@ echo 0 making ${OUT}/LIECAT-.o from ${MID}/LIECAT-.NRLIB
	@ cp ${MID}/LIECAT-.NRLIB/code.o ${OUT}/LIECAT-.o

@
<<LIECAT-.NRLIB (NRLIB from MID)>>=
${MID}/LIECAT-.NRLIB: ${OUT}/TYPE.o ${MID}/LIECAT.spad 
	@ echo 0 making ${MID}/LIECAT-.NRLIB from ${MID}/LIECAT.spad
	@ (cd ${MID} ; 	echo ')co LIECAT.spad' | ${INTERPSYS} )

@
<<LIECAT.o (O from NRLIB)>>=
${OUT}/LIECAT.o: ${MID}/LIECAT.NRLIB
	@ echo 0 making ${OUT}/LIECAT.o from ${MID}/LIECAT.NRLIB
	@ cp ${MID}/LIECAT.NRLIB/code.o ${OUT}/LIECAT.o

@
<<LIECAT.NRLIB (NRLIB from MID)>>=
${MID}/LIECAT.NRLIB: ${MID}/LIECAT.spad
	@ echo 0 making ${MID}/LIECAT.NRLIB from ${MID}/LIECAT.spad
	@ (cd ${MID} ; 	echo ')co LIECAT.spad' | ${INTERPSYS} )

@
<<LIECAT.spad (SPAD from IN)>>=
${MID}/LIECAT.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/LIECAT.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LIECAT.NRLIB ; \
	${SPADBIN}/notangle -R"category LIECAT LieAlgebra" ${IN}/xlpoly.spad.pamphlet >LIECAT.spad )

@
<<LPOLY.o (O from NRLIB)>>=
${OUT}/LPOLY.o: ${MID}/LPOLY.NRLIB
	@ echo 0 making ${OUT}/LPOLY.o from ${MID}/LPOLY.NRLIB
	@ cp ${MID}/LPOLY.NRLIB/code.o ${OUT}/LPOLY.o

@
<<LPOLY.NRLIB (NRLIB from MID)>>=
${MID}/LPOLY.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/LPOLY.spad
	@ echo 0 making ${MID}/LPOLY.NRLIB from ${MID}/LPOLY.spad
	@ (cd ${MID} ; 	echo ')co LPOLY.spad' | ${INTERPSYS} )

@
<<LPOLY.spad (SPAD from IN)>>=
${MID}/LPOLY.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/LPOLY.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain LPOLY LiePolynomial" ${IN}/xlpoly.spad.pamphlet >LPOLY.spad )

@
<<LWORD.o (O from NRLIB)>>=
${OUT}/LWORD.o: ${MID}/LWORD.NRLIB
	@ echo 0 making ${OUT}/LWORD.o from ${MID}/LWORD.NRLIB
	@ cp ${MID}/LWORD.NRLIB/code.o ${OUT}/LWORD.o

@
<<LWORD.NRLIB (NRLIB from MID)>>=
${MID}/LWORD.NRLIB: ${MID}/LWORD.spad
	@ echo 0 making ${MID}/LWORD.NRLIB from ${MID}/LWORD.spad
	@ (cd ${MID} ; 	echo ')co LWORD.spad' | ${INTERPSYS} )

@
<<LWORD.spad (SPAD from IN)>>=
${MID}/LWORD.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/LWORD.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf LWORD.NRLIB ; \
	${SPADBIN}/notangle -R"domain LWORD LyndonWord" ${IN}/xlpoly.spad.pamphlet >LWORD.spad )

@
<<MAGMA.o (O from NRLIB)>>=
${OUT}/MAGMA.o: ${MID}/MAGMA.NRLIB
	@ echo 0 making ${OUT}/MAGMA.o from ${MID}/MAGMA.NRLIB
	@ cp ${MID}/MAGMA.NRLIB/code.o ${OUT}/MAGMA.o

@
<<MAGMA.NRLIB (NRLIB from MID)>>=
${MID}/MAGMA.NRLIB: ${MID}/MAGMA.spad
	@ echo 0 making ${MID}/MAGMA.NRLIB from ${MID}/MAGMA.spad
	@ (cd ${MID} ; 	echo ')co MAGMA.spad' | ${INTERPSYS} )

@
<<MAGMA.spad (SPAD from IN)>>=
${MID}/MAGMA.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/MAGMA.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf MAGMA.NRLIB ; \
	${SPADBIN}/notangle -R"domain MAGMA Magma" ${IN}/xlpoly.spad.pamphlet >MAGMA.spad )

@
<<PBWLB.o (O from NRLIB)>>=
${OUT}/PBWLB.o: ${MID}/PBWLB.NRLIB
	@ echo 0 making ${OUT}/PBWLB.o from ${MID}/PBWLB.NRLIB
	@ cp ${MID}/PBWLB.NRLIB/code.o ${OUT}/PBWLB.o

@
<<PBWLB.NRLIB (NRLIB from MID)>>=
${MID}/PBWLB.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/PBWLB.spad
	@ echo 0 making ${MID}/PBWLB.NRLIB from ${MID}/PBWLB.spad
	@ (cd ${MID} ; 	echo ')co PBWLB.spad' | ${INTERPSYS} )

@
<<PBWLB.spad (SPAD from IN)>>=
${MID}/PBWLB.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/PBWLB.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf PBWLB.NRLIB ; \
	${SPADBIN}/notangle -R"domain PBWLB PoincareBirkhoffWittLyndonBasis" ${IN}/xlpoly.spad.pamphlet >PBWLB.spad )

@
<<XEXPPKG.o (O from NRLIB)>>=
${OUT}/XEXPPKG.o: ${MID}/XEXPPKG.NRLIB
	@ echo 0 making ${OUT}/XEXPPKG.o from ${MID}/XEXPPKG.NRLIB
	@ cp ${MID}/XEXPPKG.NRLIB/code.o ${OUT}/XEXPPKG.o

@
<<XEXPPKG.NRLIB (NRLIB from MID)>>=
${MID}/XEXPPKG.NRLIB: ${MID}/XEXPPKG.spad
	@ echo 0 making ${MID}/XEXPPKG.NRLIB from ${MID}/XEXPPKG.spad
	@ (cd ${MID} ; 	echo ')co XEXPPKG.spad' | ${INTERPSYS} )

@
<<XEXPPKG.spad (SPAD from IN)>>=
${MID}/XEXPPKG.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/XEXPPKG.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XEXPPKG.NRLIB ; \
	${SPADBIN}/notangle -R"package XEXPPKG XExponentialPackage" ${IN}/xlpoly.spad.pamphlet >XEXPPKG.spad )

@
<<XPBWPOLY.o (O from NRLIB)>>=
${OUT}/XPBWPOLY.o: ${MID}/XPBWPOLY.NRLIB
	@ echo 0 making ${OUT}/XPBWPOLY.o from ${MID}/XPBWPOLY.NRLIB
	@ cp ${MID}/XPBWPOLY.NRLIB/code.o ${OUT}/XPBWPOLY.o

@
<<XPBWPOLY.NRLIB (NRLIB from MID)>>=
${MID}/XPBWPOLY.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/XPBWPOLY.spad
	@ echo 0 making ${MID}/XPBWPOLY.NRLIB from ${MID}/XPBWPOLY.spad
	@ (cd ${MID} ; 	echo ')co XPBWPOLY.spad' | ${INTERPSYS} )

@
<<XPBWPOLY.spad (SPAD from IN)>>=
${MID}/XPBWPOLY.spad: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${MID}/XPBWPOLY.spad from ${IN}/xlpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XPBWPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain XPBWPOLY XPBWPolynomial" ${IN}/xlpoly.spad.pamphlet >XPBWPOLY.spad )

@
<<xlpoly.spad.dvi (DOC from IN)>>=
${DOC}/xlpoly.spad.dvi: ${IN}/xlpoly.spad.pamphlet
	@ echo 0 making ${DOC}/xlpoly.spad.dvi from ${IN}/xlpoly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/xlpoly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} xlpoly.spad ; \
	rm -f ${DOC}/xlpoly.spad.pamphlet ; \
	rm -f ${DOC}/xlpoly.spad.tex ; \
	rm -f ${DOC}/xlpoly.spad )

@
\subsection{xpoly.spad \cite{1}}
<<xpoly.spad (SPAD from IN)>>=
${MID}/xpoly.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/xpoly.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/xpoly.spad.pamphlet >xpoly.spad )

@
<<FMCAT.o (O from NRLIB)>>=
${OUT}/FMCAT.o: ${MID}/FMCAT.NRLIB
	@ echo 0 making ${OUT}/FMCAT.o from ${MID}/FMCAT.NRLIB
	@ cp ${MID}/FMCAT.NRLIB/code.o ${OUT}/FMCAT.o

@
<<FMCAT.NRLIB (NRLIB from MID)>>=
${MID}/FMCAT.NRLIB: ${MID}/FMCAT.spad
	@ echo 0 making ${MID}/FMCAT.NRLIB from ${MID}/FMCAT.spad
	@ (cd ${MID} ; 	echo ')co FMCAT.spad' | ${INTERPSYS} )

@
<<FMCAT.spad (SPAD from IN)>>=
${MID}/FMCAT.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/FMCAT.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FMCAT.NRLIB ; \
	${SPADBIN}/notangle -R"category FMCAT FreeModuleCat" ${IN}/xpoly.spad.pamphlet >FMCAT.spad )

@
<<FM1.o (O from NRLIB)>>=
${OUT}/FM1.o: ${MID}/FM1.NRLIB
	@ echo 0 making ${OUT}/FM1.o from ${MID}/FM1.NRLIB
	@ cp ${MID}/FM1.NRLIB/code.o ${OUT}/FM1.o

@
<<FM1.NRLIB (NRLIB from MID)>>=
${MID}/FM1.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/FM1.spad
	@ echo 0 making ${MID}/FM1.NRLIB from ${MID}/FM1.spad
	@ (cd ${MID} ; 	echo ')co FM1.spad' | ${INTERPSYS} )

@
<<FM1.spad (SPAD from IN)>>=
${MID}/FM1.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/FM1.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FM1.NRLIB ; \
	${SPADBIN}/notangle -R"domain FM1 FreeModule1" ${IN}/xpoly.spad.pamphlet >FM1.spad )

@
<<OFMONOID.o (O from NRLIB)>>=
${OUT}/OFMONOID.o: ${MID}/OFMONOID.NRLIB
	@ echo 0 making ${OUT}/OFMONOID.o from ${MID}/OFMONOID.NRLIB
	@ cp ${MID}/OFMONOID.NRLIB/code.o ${OUT}/OFMONOID.o

@
<<OFMONOID.NRLIB (NRLIB from MID)>>=
${MID}/OFMONOID.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/OFMONOID.spad
	@ echo 0 making ${MID}/OFMONOID.NRLIB from ${MID}/OFMONOID.spad
	@ (cd ${MID} ; 	echo ')co OFMONOID.spad' | ${INTERPSYS} )

@
<<OFMONOID.spad (SPAD from IN)>>=
${MID}/OFMONOID.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/OFMONOID.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf OFMONOID.NRLIB ; \
	${SPADBIN}/notangle -R"domain OFMONOID OrderedFreeMonoid" ${IN}/xpoly.spad.pamphlet >OFMONOID.spad )

@
<<XALG.o (O from NRLIB)>>=
${OUT}/XALG.o: ${MID}/XALG.NRLIB
	@ echo 0 making ${OUT}/XALG.o from ${MID}/XALG.NRLIB
	@ cp ${MID}/XALG.NRLIB/code.o ${OUT}/XALG.o

@
<<XALG.NRLIB (NRLIB from MID)>>=
${MID}/XALG.NRLIB: ${MID}/XALG.spad
	@ echo 0 making ${MID}/XALG.NRLIB from ${MID}/XALG.spad
	@ (cd ${MID} ; 	echo ')co XALG.spad' | ${INTERPSYS} )

@
<<XALG.spad (SPAD from IN)>>=
${MID}/XALG.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XALG.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XALG.NRLIB ; \
	${SPADBIN}/notangle -R"category XALG XAlgebra" ${IN}/xpoly.spad.pamphlet >XALG.spad )

@
<<XDPOLY.o (O from NRLIB)>>=
${OUT}/XDPOLY.o: ${MID}/XDPOLY.NRLIB
	@ echo 0 making ${OUT}/XDPOLY.o from ${MID}/XDPOLY.NRLIB
	@ cp ${MID}/XDPOLY.NRLIB/code.o ${OUT}/XDPOLY.o

@
<<XDPOLY.NRLIB (NRLIB from MID)>>=
${MID}/XDPOLY.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/XDPOLY.spad
	@ echo 0 making ${MID}/XDPOLY.NRLIB from ${MID}/XDPOLY.spad
	@ (cd ${MID} ; 	echo ')co XDPOLY.spad' | ${INTERPSYS} )

@
<<XDPOLY.spad (SPAD from IN)>>=
${MID}/XDPOLY.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XDPOLY.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XDPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain XDPOLY XDistributedPolynomial" ${IN}/xpoly.spad.pamphlet >XDPOLY.spad )

@
<<XFALG.o (O from NRLIB)>>=
${OUT}/XFALG.o: ${MID}/XFALG.NRLIB
	@ echo 0 making ${OUT}/XFALG.o from ${MID}/XFALG.NRLIB
	@ cp ${MID}/XFALG.NRLIB/code.o ${OUT}/XFALG.o

@
<<XFALG.NRLIB (NRLIB from MID)>>=
${MID}/XFALG.NRLIB: ${MID}/XFALG.spad
	@ echo 0 making ${MID}/XFALG.NRLIB from ${MID}/XFALG.spad
	@ (cd ${MID} ; 	echo ')co XFALG.spad' | ${INTERPSYS} )

@
<<XFALG.spad (SPAD from IN)>>=
${MID}/XFALG.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XFALG.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XFALG.NRLIB ; \
	${SPADBIN}/notangle -R"category XFALG XFreeAlgebra" ${IN}/xpoly.spad.pamphlet >XFALG.spad )

@
<<XPOLY.o (O from NRLIB)>>=
${OUT}/XPOLY.o: ${MID}/XPOLY.NRLIB
	@ echo 0 making ${OUT}/XPOLY.o from ${MID}/XPOLY.NRLIB
	@ cp ${MID}/XPOLY.NRLIB/code.o ${OUT}/XPOLY.o

@
<<XPOLY.NRLIB (NRLIB from MID)>>=
${MID}/XPOLY.NRLIB: ${MID}/XPOLY.spad
	@ echo 0 making ${MID}/XPOLY.NRLIB from ${MID}/XPOLY.spad
	@ (cd ${MID} ; 	echo ')co XPOLY.spad' | ${INTERPSYS} )

@
<<XPOLY.spad (SPAD from IN)>>=
${MID}/XPOLY.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XPOLY.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain XPOLY XPolynomial" ${IN}/xpoly.spad.pamphlet >XPOLY.spad )

@
<<XPOLYC.o (O from NRLIB)>>=
${OUT}/XPOLYC.o: ${MID}/XPOLYC.NRLIB
	@ echo 0 making ${OUT}/XPOLYC.o from ${MID}/XPOLYC.NRLIB
	@ cp ${MID}/XPOLYC.NRLIB/code.o ${OUT}/XPOLYC.o

@
<<XPOLYC.NRLIB (NRLIB from MID)>>=
${MID}/XPOLYC.NRLIB: ${MID}/XPOLYC.spad
	@ echo 0 making ${MID}/XPOLYC.NRLIB from ${MID}/XPOLYC.spad
	@ (cd ${MID} ; 	echo ')co XPOLYC.spad' | ${INTERPSYS} )

@
<<XPOLYC.spad (SPAD from IN)>>=
${MID}/XPOLYC.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XPOLYC.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XPOLYC.NRLIB ; \
	${SPADBIN}/notangle -R"category XPOLYC XPolynomialsCat" ${IN}/xpoly.spad.pamphlet >XPOLYC.spad )

@
<<XPR.o (O from NRLIB)>>=
${OUT}/XPR.o: ${MID}/XPR.NRLIB
	@ echo 0 making ${OUT}/XPR.o from ${MID}/XPR.NRLIB
	@ cp ${MID}/XPR.NRLIB/code.o ${OUT}/XPR.o

@
<<XPR.NRLIB (NRLIB from MID)>>=
${MID}/XPR.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/XPR.spad
	@ echo 0 making ${MID}/XPR.NRLIB from ${MID}/XPR.spad
	@ (cd ${MID} ; 	echo ')co XPR.spad' | ${INTERPSYS} )

@
<<XPR.spad (SPAD from IN)>>=
${MID}/XPR.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XPR.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XPR.NRLIB ; \
	${SPADBIN}/notangle -R"domain XPR XPolynomialRing" ${IN}/xpoly.spad.pamphlet >XPR.spad )

@
<<XRPOLY.o (O from NRLIB)>>=
${OUT}/XRPOLY.o: ${MID}/XRPOLY.NRLIB
	@ echo 0 making ${OUT}/XRPOLY.o from ${MID}/XRPOLY.NRLIB
	@ cp ${MID}/XRPOLY.NRLIB/code.o ${OUT}/XRPOLY.o

@
<<XRPOLY.NRLIB (NRLIB from MID)>>=
${MID}/XRPOLY.NRLIB: ${OUT}/KONVERT.o ${OUT}/TYPE.o ${MID}/XRPOLY.spad
	@ echo 0 making ${MID}/XRPOLY.NRLIB from ${MID}/XRPOLY.spad
	@ (cd ${MID} ; 	echo ')co XRPOLY.spad' | ${INTERPSYS} )

@
<<XRPOLY.spad (SPAD from IN)>>=
${MID}/XRPOLY.spad: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${MID}/XRPOLY.spad from ${IN}/xpoly.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf XRPOLY.NRLIB ; \
	${SPADBIN}/notangle -R"domain XRPOLY XRecursivePolynomial" ${IN}/xpoly.spad.pamphlet >XRPOLY.spad )

@
<<xpoly.spad.dvi (DOC from IN)>>=
${DOC}/xpoly.spad.dvi: ${IN}/xpoly.spad.pamphlet
	@ echo 0 making ${DOC}/xpoly.spad.dvi from ${IN}/xpoly.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/xpoly.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} xpoly.spad ; \
	rm -f ${DOC}/xpoly.spad.pamphlet ; \
	rm -f ${DOC}/xpoly.spad.tex ; \
	rm -f ${DOC}/xpoly.spad )

@
\subsection{ystream.spad \cite{1}}
<<ystream.spad (SPAD from IN)>>=
${MID}/ystream.spad: ${IN}/ystream.spad.pamphlet
	@ echo 0 making ${MID}/ystream.spad from ${IN}/ystream.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/ystream.spad.pamphlet >ystream.spad )

@
<<YSTREAM.o (O from NRLIB)>>=
${OUT}/YSTREAM.o: ${MID}/YSTREAM.NRLIB
	@ echo 0 making ${OUT}/YSTREAM.o from ${MID}/YSTREAM.NRLIB
	@ cp ${MID}/YSTREAM.NRLIB/code.o ${OUT}/YSTREAM.o

@
<<YSTREAM.NRLIB (NRLIB from MID)>>=
${MID}/YSTREAM.NRLIB: ${MID}/YSTREAM.spad
	@ echo 0 making ${MID}/YSTREAM.NRLIB from ${MID}/YSTREAM.spad
	@ (cd ${MID} ; 	echo ')co YSTREAM.spad' | ${INTERPSYS} )

@
<<YSTREAM.spad (SPAD from IN)>>=
${MID}/YSTREAM.spad: ${IN}/ystream.spad.pamphlet
	@ echo 0 making ${MID}/YSTREAM.spad from ${IN}/ystream.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf YSTREAM.NRLIB ; \
	${SPADBIN}/notangle -R"package YSTREAM ParadoxicalCombinatorsForStreams" ${IN}/ystream.spad.pamphlet >YSTREAM.spad )

@
<<ystream.spad.dvi (DOC from IN)>>=
${DOC}/ystream.spad.dvi: ${IN}/ystream.spad.pamphlet
	@ echo 0 making ${DOC}/ystream.spad.dvi from ${IN}/ystream.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/ystream.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} ystream.spad ; \
	rm -f ${DOC}/ystream.spad.pamphlet ; \
	rm -f ${DOC}/ystream.spad.tex ; \
	rm -f ${DOC}/ystream.spad )

@
\subsection{zerodim.spad \cite{1}}
<<zerodim.spad (SPAD from IN)>>=
${MID}/zerodim.spad: ${IN}/zerodim.spad.pamphlet
	@ echo 0 making ${MID}/zerodim.spad from ${IN}/zerodim.spad.pamphlet
	@(cd ${MID} ; \
	${SPADBIN}/notangle ${IN}/zerodim.spad.pamphlet >zerodim.spad )

@
<<FGLMICPK.o (O from NRLIB)>>=
${OUT}/FGLMICPK.o: ${MID}/FGLMICPK.NRLIB
	@ echo 0 making ${OUT}/FGLMICPK.o from ${MID}/FGLMICPK.NRLIB
	@ cp ${MID}/FGLMICPK.NRLIB/code.o ${OUT}/FGLMICPK.o

@
<<FGLMICPK.NRLIB (NRLIB from MID)>>=
${MID}/FGLMICPK.NRLIB: ${MID}/FGLMICPK.spad
	@ echo 0 making ${MID}/FGLMICPK.NRLIB from ${MID}/FGLMICPK.spad
	@ (cd ${MID} ; 	echo ')co FGLMICPK.spad' | ${INTERPSYS} )

@
<<FGLMICPK.spad (SPAD from IN)>>=
${MID}/FGLMICPK.spad: ${IN}/zerodim.spad.pamphlet
	@ echo 0 making ${MID}/FGLMICPK.spad from ${IN}/zerodim.spad.pamphlet
	@(cd ${MID} ; \
	rm -rf FGLMICPK.NRLIB ; \
	${SPADBIN}/notangle -R"package FGLMICPK FGLMIfCanPackage" ${IN}/zerodim.spad.pamphlet >FGLMICPK.spad )

@
<<zerodim.spad.dvi (DOC from IN)>>=
${DOC}/zerodim.spad.dvi: ${IN}/zerodim.spad.pamphlet
	@ echo 0 making ${DOC}/zerodim.spad.dvi from ${IN}/zerodim.spad.pamphlet
	@ (cd ${DOC} ; \
	cp ${IN}/zerodim.spad.pamphlet ${DOC} ; \
	${SPADBIN}/document ${NOISE} zerodim.spad ; \
	rm -f ${DOC}/zerodim.spad.pamphlet ; \
	rm -f ${DOC}/zerodim.spad.tex ; \
	rm -f ${DOC}/zerodim.spad )

@

<<original Makefile>>=
## src/algebra Makeile
# subparts: 
# 	db 	--- make databases for the current machine
#	db-win32 --- make databases for PCs

IN=	${SRC}/algebra

MID=	${INT}/algebra
CENTER=      ${INT}/lib/unix
WIN32CENTER= ${INT}/lib/win32
MAIL=   ${MID}/libcheck

OUT=	${MNT}/${SYS}/algebra

WIN32OUT=${MNT}/win32/algebra

LIB=	${INT}/lib

DEPSYS=	${OBJ}/${SYS}/bin/depsys

INTERPSYS= ${MNT}/${SYS}/bin/AXIOMsys
WIN32INTERPSYS = ${MNT}/${SYS}/bin/AXIOMsys-win32
AS=	ibits.as 

cmd: ${CENTER} ${CENTER}/libdb.text 
	@ echo Building command.list
	@ (cat ${CENTER}/libdb.text |sed -n "s/^o//p" |sed s\/\`\.\*\/\/p |sort -u > ${CENTER}/command.list )
	@ (cat ${CENTER}/libdb.text |sed -n "s/^c//p" |sed s\/\`\.\*\/\/p |sort -u >> ${CENTER}/command.list )
	@ (cat ${CENTER}/libdb.text |sed -n "s/^d//p" |sed s\/\`\.\*\/\/p |sort -u >> ${CENTER}/command.list )
	@ (cat ${CENTER}/libdb.text |sed -n "s/^p//p" |sed s\/\`\.\*\/\/p |sort -u >> ${CENTER}/command.list )

lib: ${OBJ}/${SYS}/etc/helpmake.o
	@ echo checking libraries...
	@ echo comparing dates ...
	@ echo '(progn (let ((*package* (find-package "BOOT"))) (load "${OBJ}/${SYS}/etc/helpmake") (boot::makelib "${MID}" "${OUT}" "${LISP}" "${O}")) (${BYE}))' | ${DEPSYS}

${OBJ}/${SYS}/etc/helpmake.${O} : ${SRC}/etc/helpmake.${LISP}
	@ echo Rebuilding helpmake ...
	@ (cd ${OBJ}/${SYS} ; \
	   echo '(progn (let ((*package* (find-package "BOOT"))) (compile-file "${SRC}/etc/helpmake.${LISP}" :output-file "${OBJ}/${SYS}/etc/helpmake.${O}")))  (${BYE})' | ${DEPSYS} )

gloss: ${CENTER}
	@ echo rebuilding glossary...
	@ cp -p ${SRC}/doc/gloss.text ${CENTER}
#	buildGloss needs it in share/algebra 
	@ cp -p ${SRC}/doc/gloss.text ${SPD}/share/algebra 
	@ (cd ${MID} ; \
	   echo ')fin' >/tmp/tmp.input ; \
	   echo '(|oldCompilerAutoloadOnceTrigger|)' >>/tmp/tmp.input ; \
	   echo '(|browserAutoloadOnceTrigger|)' >>/tmp/tmp.input ; \
	   echo '(|buildGloss|)' >>/tmp/tmp.input ; \
	   echo '(bye)' >>/tmp/tmp.input ; \
	   cat /tmp/tmp.input | ${INTERPSYS} ; \
	   rm -f /tmp/tmp.input )
	@ echo installing glosskey.text
	@ mv ${MID}/glosskey.text ${CENTER}
	@ echo installing glossdef.text
	@ mv ${MID}/glossdef.text ${CENTER}
	@ echo installing gloss.ht
	@ cp -p ${MID}/gloss.ht ${SPD}/share/doc/hypertex/pages
	@ cp -p ${MID}/gloss.ht ${INT}/paste
	@ echo adding gloss.ht to ht database
	@ htadd -s gloss.ht

${CENTER} :
	mkdir ${CENTER}

${WIN32CENTER} :
	mkdir ${WIN32CENTER}


db: ${CENTER}
	@ echo rebuilding databases...
	@ cp -p ${SRC}/doc/gloss.text ${LIB}
	@ cp -p ${SRC}/doc/topics.data ${MID}
	@ echo rebuilding daase files
	@ (cd ${MID} ; \
	   echo ')set out le 200' >/tmp/tmp.input ; \
	   echo ')fin' >>/tmp/tmp.input ; \
	   echo '(make-databases "" (QUOTE ("unix")))' >>/tmp/tmp.input ; \
	   echo '(bye)' >>/tmp/tmp.input ; \
	   cat /tmp/tmp.input | ${INTERPSYS} ; \
	   rm -f /tmp/tmp.input )
	@ echo If all went well, go-ahead Mike and do a db-install as well !

db-install:
# 
#  Now move everything to int/lib/unix
#
	@ echo moving ${MID}/unix/compress.daase to ${CENTER}/
	@ mv ${MID}/unix/compress.daase ${CENTER}/
#
	@ echo moving ${MID}/unix/interp.daase to ${CENTER}/
	@ mv ${MID}/unix/interp.daase ${CENTER}/
#
	@ echo moving ${MID}/unix/browse.daase to ${CENTER}/
	@ mv ${MID}/unix/browse.daase ${CENTER}/
#
	@ echo moving ${MID}/unix/category.daase to ${CENTER}/
	@ mv ${MID}/unix/category.daase ${CENTER}/
#
	@ echo moving ${MID}/unix/operation.daase to ${CENTER}/
	@ mv ${MID}/unix/operation.daase ${CENTER}/
#
	@ echo moving ${MID}/unix/USERS.DAASE to ${CENTER}
	@ rm -rf ${CENTER}/USERS.DAASE
	@ mv ${MID}/unix/USERS.DAASE ${CENTER}
#
	@ echo moving ${MID}/unix/DEPENDENTS.DAASE to ${CENTER}
	@ rm -rf ${CENTER}/DEPENDENTS.DAASE
	@ mv ${MID}/unix/DEPENDENTS.DAASE ${CENTER}
#
	@ echo moving ${MID}/unix/libdb.text to ${CENTER}
	@ mv ${MID}/unix/libdb.text ${CENTER}
#
	@ echo moving ${MID}/unix/comdb.text to ${CENTER}
	@ mv ${MID}/unix/comdb.text ${CENTER}
#
	@ echo Now you need to promote the databases \(make PART=dbpromote\)
	@ echo Then remake and promote the *.img files
#	@ echo rebuilding interpsys with the new database
#	@ touch ${OBJ}/${SYS}/interp/database.date
#	@ (cd ${SPD} ; ${MAKE} PART=interp)

db-win32:
	echo rebuilding databases...
	cp -p ${IN}/INTERP.EXPOSED ${MID}
	cp -p ${IN}/INTERP.EXPOSED ${WIN32CENTER}
	cp -p ${SRC}/doc/gloss.text ${LIB}
	cp -p ${SRC}/doc/topics.data ${MID}
	echo rebuilding daase files
	(cd ${MID} ; \
	   echo ')fin' >/tmp/tmp.input ; \
	   echo '(make-databases "-win32" (QUOTE ("win32")))' >>/tmp/tmp.input ; \
	   echo '(bye)' >>/tmp/tmp.input ; \
	   cat /tmp/tmp.input | ${WIN32INTERPSYS} ; \
	   rm -f /tmp/tmp.input )

db-win32-install:
	@ echo moving ${MID}/compress.daase-win32 to ${WIN32CENTER}/compress.daase
	@ mv ${MID}/win32/compress.daase-win32 ${WIN32CENTER}/compress.daase
	@ echo moving ${MID}/interp.daase-win32 to ${WIN32CENTER}/interp.daase
	@ mv ${MID}/win32/interp.daase-win32 ${WIN32CENTER}/interp.daase
	@ echo moving ${MID}/browse.daase-win32 to ${WIN32CENTER}/browse.daase-
	@ mv ${MID}/win32/browse.daase-win32 ${WIN32CENTER}/browse.daase
	@ echo moving ${MID}/category.daase-win32 to ${WIN32CENTER}/category.daase
	@ mv ${MID}/win32/category.daase-win32 ${WIN32CENTER}/category.daase
	@ echo moving ${MID}/operation.daase-win32 to ${WIN32CENTER}/operation.daase
	@ mv ${MID}/win32/operation.daase-win32 ${WIN32CENTER}/operation.daase
	@ echo installing libdb.text
	@ mv ${MID}/win32/libdb.text ${WIN32CENTER}
	@ echo installing comdb.text
	@ mv ${MID}/win32/comdb.text ${WIN32CENTER}
#	@ echo installing glosskey.text
#	@ mv ${MID}/win32/glosskey.text ${WIN32CENTER}
#	@ echo installing glossdef.text
#	@ mv ${MID}/win32/glossdef.text ${WIN32CENTER}

ibits.as:	${MID}/ibits.nrlib/ibits.l
	@echo building ${MID}/ibits.o from ibits.as
	@( cd ${MID} ; \
	   rm -rf ibits.nrlib ; \
	   mkdir ibits.nrlib ; \
	   cd ibits.nrlib ; \
	   asharp -Fl -Fasy ${SRC}/ibits.as )

@
<<*>>=

<<layer0 bootstrap>>
<<layer0>> 
<<layer1>>
<<layer2>>
<<layer3>>
<<layer4>>
<<layer5>>
<<layer6>>
<<layer7>>
<<layer8>>
<<layer9>>
<<layer10>>
<<layer11>>
<<layer12>>
<<layer13>>
<<layer14>>
<<layer15>>
<<layer16>>
<<layer17>>
<<layer18>>
<<layer19>>
<<layer20>>
<<layer21>>
<<order>>

all: src db
#all:	${SUBPART}

everything: check lib db cmd gloss
	@ echo invoking make in `pwd` with parms:
	@ echo SYS= ${SYS} LSP= ${LSP} PART= ${PART} SUBPART= ${SUBPART}
	@ echo SPAD= ${SPAD} SRC= ${SRC} INT= ${INT}
	@ echo OBJ= ${OBJ} MNT= ${MNT} O=${O} LISP=${LISP} BYE=${BYE}

#src:	${AS}
src:	${SPADFILES} ${ORDER}
	@ echo Building NRLIBS from spad sources

#	@ (cd ${MID} ; \
#	   echo '(progn (let ((*package* (find-package "BOOT"))) (boot::makespad "${MID}" "${MID}" "${LISP}")) (${BYE}))' | ${DEPSYS} )

db: 
	@ echo rebuilding databases...
	@ cp ${SRC}/doc/gloss.text ${MID}
	@ cp ${SRC}/doc/topics.data ${MID}
	@ (cd ${MID} ; echo ')lisp (make-databases "" nil)' | ${INTERPSYS} )

check:
	@ echo Checking that INTERP.EXPOSED and NRLIBs are consistent
	@ (cd ${MID} ; \
           echo '(progn (let ((*package* (find-package "BOOT"))) (boot::libcheck "${IN}" "${MID}" "${OUT}" "${MAIL}")) (${BYE}))' | ${DEPSYS} )


document: ${DOCFILES}

<<ACPLOT.o (O from NRLIB)>>
<<ACPLOT.NRLIB (NRLIB from MID)>>
<<ACPLOT.spad (SPAD from IN)>>

<<REALSOLV.o (O from NRLIB)>>
<<REALSOLV.NRLIB (NRLIB from MID)>>
<<REALSOLV.spad (SPAD from IN)>>

<<acplot.spad (SPAD from IN)>>
<<acplot.spad.dvi (DOC from IN)>>

<<FLAGG2.o (O from NRLIB)>>
<<FLAGG2.NRLIB (NRLIB from MID)>>
<<FLAGG2.spad (SPAD from IN)>>

<<FSAGG2.o (O from NRLIB)>>
<<FSAGG2.NRLIB (NRLIB from MID)>>
<<FSAGG2.spad (SPAD from IN)>>

<<aggcat2.spad (SPAD from IN)>>
<<aggcat2.spad.dvi (DOC from IN)>>

<<ALAGG.o (O from NRLIB)>>
<<ALAGG.NRLIB (NRLIB from MID)>>
<<ALAGG.spad (SPAD from IN)>>
<<ALAGG.o (BOOTSTRAP from MID)>>
<<ALAGG.lsp (LISP from IN)>>

<<A1AGG-.o (O from NRLIB)>>
<<A1AGG-.NRLIB (NRLIB from MID)>>
<<A1AGG.o (O from NRLIB)>>
<<A1AGG.NRLIB (NRLIB from MID)>>
<<A1AGG.spad (SPAD from IN)>>

<<AGG-.o (O from NRLIB)>>
<<AGG-.NRLIB (NRLIB from MID)>>
<<AGG.o (O from NRLIB)>>
<<AGG.NRLIB (NRLIB from MID)>>
<<AGG.spad (SPAD from IN)>>

<<BGAGG-.o (O from NRLIB)>>
<<BGAGG-.NRLIB (NRLIB from MID)>>
<<BGAGG.o (O from NRLIB)>>
<<BGAGG.NRLIB (NRLIB from MID)>>
<<BGAGG.spad (SPAD from IN)>>

<<BTAGG-.o (O from NRLIB)>>
<<BTAGG-.NRLIB (NRLIB from MID)>>
<<BTAGG.o (O from NRLIB)>>
<<BTAGG.NRLIB (NRLIB from MID)>>
<<BTAGG.spad (SPAD from IN)>>

<<BRAGG-.o (O from NRLIB)>>
<<BRAGG-.NRLIB (NRLIB from MID)>>
<<BRAGG.o (O from NRLIB)>>
<<BRAGG.NRLIB (NRLIB from MID)>>
<<BRAGG.spad (SPAD from IN)>>

<<CLAGG-.o (O from NRLIB)>>
<<CLAGG-.NRLIB (NRLIB from MID)>>
<<CLAGG.o (O from NRLIB)>>
<<CLAGG.NRLIB (NRLIB from MID)>>
<<CLAGG.spad (SPAD from IN)>>
<<CLAGG-.o (BOOTSTRAP from MID)>>
<<CLAGG-.lsp (LISP from IN)>>
<<CLAGG.o (BOOTSTRAP from MID)>>
<<CLAGG.lsp (LISP from IN)>>

<<DIAGG-.o (O from NRLIB)>>
<<DIAGG-.NRLIB (NRLIB from MID)>>
<<DIAGG.o (O from NRLIB)>>
<<DIAGG.NRLIB (NRLIB from MID)>>
<<DIAGG.spad (SPAD from IN)>>

<<DIOPS-.o (O from NRLIB)>>
<<DIOPS-.NRLIB (NRLIB from MID)>>
<<DIOPS.o (O from NRLIB)>>
<<DIOPS.NRLIB (NRLIB from MID)>>
<<DIOPS.spad (SPAD from IN)>>

<<DLAGG.o (O from NRLIB)>>
<<DLAGG.NRLIB (NRLIB from MID)>>
<<DLAGG.spad (SPAD from IN)>>

<<DQAGG.o (O from NRLIB)>>
<<DQAGG.NRLIB (NRLIB from MID)>>
<<DQAGG.spad (SPAD from IN)>>

<<ELAGG-.o (O from NRLIB)>>
<<ELAGG-.NRLIB (NRLIB from MID)>>
<<ELAGG.o (O from NRLIB)>>
<<ELAGG.NRLIB (NRLIB from MID)>>
<<ELAGG.spad (SPAD from IN)>>

<<ELTAGG-.o (O from NRLIB)>>
<<ELTAGG-.NRLIB (NRLIB from MID)>>
<<ELTAGG.o (O from NRLIB)>>
<<ELTAGG.NRLIB (NRLIB from MID)>>
<<ELTAGG.spad (SPAD from IN)>>

<<ELTAB.o (O from NRLIB)>>
<<ELTAB.NRLIB (NRLIB from MID)>>
<<ELTAB.spad (SPAD from IN)>>

<<FLAGG-.o (O from NRLIB)>>
<<FLAGG-.NRLIB (NRLIB from MID)>>
<<FLAGG.o (O from NRLIB)>>
<<FLAGG.NRLIB (NRLIB from MID)>>
<<FLAGG.spad (SPAD from IN)>>

<<FSAGG-.o (O from NRLIB)>>
<<FSAGG-.NRLIB (NRLIB from MID)>>
<<FSAGG.o (O from NRLIB)>>
<<FSAGG.NRLIB (NRLIB from MID)>>
<<FSAGG.spad (SPAD from IN)>>

<<MSETAGG.o (O from NRLIB)>>
<<MSETAGG.NRLIB (NRLIB from MID)>>
<<MSETAGG.spad (SPAD from IN)>>

<<HOAGG-.o (O from NRLIB)>>
<<HOAGG-.NRLIB (NRLIB from MID)>>
<<HOAGG.o (O from NRLIB)>>
<<HOAGG.NRLIB (NRLIB from MID)>>
<<HOAGG.spad (SPAD from IN)>>
<<HOAGG-.o (BOOTSTRAP from MID)>>
<<HOAGG-.lsp (LISP from IN)>>
<<HOAGG.o (BOOTSTRAP from MID)>>
<<HOAGG.lsp (LISP from IN)>>

<<IXAGG-.o (O from NRLIB)>>
<<IXAGG-.NRLIB (NRLIB from MID)>>
<<IXAGG.o (O from NRLIB)>>
<<IXAGG.NRLIB (NRLIB from MID)>>
<<IXAGG.spad (SPAD from IN)>>

<<KDAGG-.o (O from NRLIB)>>
<<KDAGG-.NRLIB (NRLIB from MID)>>
<<KDAGG.o (O from NRLIB)>>
<<KDAGG.NRLIB (NRLIB from MID)>>
<<KDAGG.spad (SPAD from IN)>>

<<LNAGG-.o (O from NRLIB)>>
<<LNAGG-.NRLIB (NRLIB from MID)>>
<<LNAGG.o (O from NRLIB)>>
<<LNAGG.NRLIB (NRLIB from MID)>>
<<LNAGG.spad (SPAD from IN)>>
<<LNAGG-.o (BOOTSTRAP from MID)>>
<<LNAGG-.lsp (LISP from IN)>>
<<LNAGG.o (BOOTSTRAP from MID)>>
<<LNAGG.lsp (LISP from IN)>>

<<LSAGG-.o (O from NRLIB)>>
<<LSAGG-.NRLIB (NRLIB from MID)>>
<<LSAGG.o (O from NRLIB)>>
<<LSAGG.NRLIB (NRLIB from MID)>>
<<LSAGG.spad (SPAD from IN)>>
<<LSAGG-.o (BOOTSTRAP from MID)>>
<<LSAGG-.lsp (LISP from IN)>>
<<LSAGG.o (BOOTSTRAP from MID)>>
<<LSAGG.lsp (LISP from IN)>>

<<MDAGG.o (O from NRLIB)>>
<<MDAGG.NRLIB (NRLIB from MID)>>
<<MDAGG.spad (SPAD from IN)>>

<<OMSAGG.o (O from NRLIB)>>
<<OMSAGG.NRLIB (NRLIB from MID)>>
<<OMSAGG.spad (SPAD from IN)>>

<<PRQAGG.o (O from NRLIB)>>
<<PRQAGG.NRLIB (NRLIB from MID)>>
<<PRQAGG.spad (SPAD from IN)>>

<<QUAGG.o (O from NRLIB)>>
<<QUAGG.NRLIB (NRLIB from MID)>>
<<QUAGG.spad (SPAD from IN)>>

<<RCAGG-.o (O from NRLIB)>>
<<RCAGG-.NRLIB (NRLIB from MID)>>
<<RCAGG.o (O from NRLIB)>>
<<RCAGG.NRLIB (NRLIB from MID)>>
<<RCAGG.spad (SPAD from IN)>>
<<RCAGG-.o (BOOTSTRAP from MID)>>
<<RCAGG-.lsp (LISP from IN)>>
<<RCAGG.o (BOOTSTRAP from MID)>>
<<RCAGG.lsp (LISP from IN)>>

<<SETAGG-.o (O from NRLIB)>>
<<SETAGG-.NRLIB (NRLIB from MID)>>
<<SETAGG.o (O from NRLIB)>>
<<SETAGG.NRLIB (NRLIB from MID)>>
<<SETAGG.spad (SPAD from IN)>>
<<SETAGG-.o (BOOTSTRAP from MID)>>
<<SETAGG-.lsp (LISP from IN)>>
<<SETAGG.o (BOOTSTRAP from MID)>>
<<SETAGG.lsp (LISP from IN)>>

<<SKAGG.o (O from NRLIB)>>
<<SKAGG.NRLIB (NRLIB from MID)>>
<<SKAGG.spad (SPAD from IN)>>

<<SRAGG-.o (O from NRLIB)>>
<<SRAGG-.NRLIB (NRLIB from MID)>>
<<SRAGG.o (O from NRLIB)>>
<<SRAGG.NRLIB (NRLIB from MID)>>
<<SRAGG.spad (SPAD from IN)>>

<<STAGG-.o (O from NRLIB)>>
<<STAGG-.NRLIB (NRLIB from MID)>>
<<STAGG.o (O from NRLIB)>>
<<STAGG.NRLIB (NRLIB from MID)>>
<<STAGG.spad (SPAD from IN)>>
<<STAGG-.o (BOOTSTRAP from MID)>>
<<STAGG-.lsp (LISP from IN)>>
<<STAGG.o (BOOTSTRAP from MID)>>
<<STAGG.lsp (LISP from IN)>>

<<TBAGG-.o (O from NRLIB)>>
<<TBAGG-.NRLIB (NRLIB from MID)>>
<<TBAGG.o (O from NRLIB)>>
<<TBAGG.NRLIB (NRLIB from MID)>>
<<TBAGG.spad (SPAD from IN)>>

<<URAGG-.o (O from NRLIB)>>
<<URAGG-.NRLIB (NRLIB from MID)>>
<<URAGG.o (O from NRLIB)>>
<<URAGG.NRLIB (NRLIB from MID)>>
<<URAGG.spad (SPAD from IN)>>
<<URAGG-.o (BOOTSTRAP from MID)>>
<<URAGG-.lsp (LISP from IN)>>
<<URAGG.o (BOOTSTRAP from MID)>>
<<URAGG.lsp (LISP from IN)>>

<<aggcat.spad (SPAD from IN)>>
<<aggcat.spad.dvi (DOC from IN)>>

<<CPIMA.o (O from NRLIB)>>
<<CPIMA.NRLIB (NRLIB from MID)>>
<<CPIMA.spad (SPAD from IN)>>

<<FINRALG-.o (O from NRLIB)>>
<<FINRALG-.NRLIB (NRLIB from MID)>>
<<FINRALG.o (O from NRLIB)>>
<<FINRALG.NRLIB (NRLIB from MID)>>
<<FINRALG.spad (SPAD from IN)>>

<<FRAMALG-.o (O from NRLIB)>>
<<FRAMALG-.NRLIB (NRLIB from MID)>>
<<FRAMALG.o (O from NRLIB)>>
<<FRAMALG.NRLIB (NRLIB from MID)>>
<<FRAMALG.spad (SPAD from IN)>>

<<MONOGEN-.o (O from NRLIB)>>
<<MONOGEN-.NRLIB (NRLIB from MID)>>
<<MONOGEN.o (O from NRLIB)>>
<<MONOGEN.NRLIB (NRLIB from MID)>>
<<MONOGEN.spad (SPAD from IN)>>

<<NORMMA.o (O from NRLIB)>>
<<NORMMA.NRLIB (NRLIB from MID)>>
<<NORMMA.spad (SPAD from IN)>>

<<algcat.spad (SPAD from IN)>>
<<algcat.spad.dvi (DOC from IN)>>

<<SAE.o (O from NRLIB)>>
<<SAE.NRLIB (NRLIB from MID)>>
<<SAE.spad (SPAD from IN)>>

<<algext.spad (SPAD from IN)>>
<<algext.spad.dvi (DOC from IN)>>

<<ALGFACT.o (O from NRLIB)>>
<<ALGFACT.NRLIB (NRLIB from MID)>>
<<ALGFACT.spad (SPAD from IN)>>

<<IALGFACT.o (O from NRLIB)>>
<<IALGFACT.NRLIB (NRLIB from MID)>>
<<IALGFACT.spad (SPAD from IN)>>

<<RFFACT.o (O from NRLIB)>>
<<RFFACT.NRLIB (NRLIB from MID)>>
<<RFFACT.spad (SPAD from IN)>>

<<SAEFACT.o (O from NRLIB)>>
<<SAEFACT.NRLIB (NRLIB from MID)>>
<<SAEFACT.spad (SPAD from IN)>>

<<SAERFFC.o (O from NRLIB)>>
<<SAERFFC.NRLIB (NRLIB from MID)>>
<<SAERFFC.spad (SPAD from IN)>>

<<algfact.spad (SPAD from IN)>>
<<algfact.spad.dvi (DOC from IN)>>

<<ACF-.o (O from NRLIB)>>
<<ACF-.NRLIB (NRLIB from MID)>>
<<ACF.o (O from NRLIB)>>
<<ACF.NRLIB (NRLIB from MID)>>
<<ACF.spad (SPAD from IN)>>

<<ACFS-.o (O from NRLIB)>>
<<ACFS-.NRLIB (NRLIB from MID)>>
<<ACFS.o (O from NRLIB)>>
<<ACFS.NRLIB (NRLIB from MID)>>
<<ACFS.spad (SPAD from IN)>>

<<AF.o (O from NRLIB)>>
<<AF.NRLIB (NRLIB from MID)>>
<<AF.spad (SPAD from IN)>>

<<algfunc.spad (SPAD from IN)>>
<<algfunc.spad.dvi (DOC from IN)>>

<<GENMFACT.o (O from NRLIB)>>
<<GENMFACT.NRLIB (NRLIB from MID)>>
<<GENMFACT.spad (SPAD from IN)>>

<<MPCPF.o (O from NRLIB)>>
<<MPCPF.NRLIB (NRLIB from MID)>>
<<MPCPF.spad (SPAD from IN)>>

<<MPRFF.o (O from NRLIB)>>
<<MPRFF.NRLIB (NRLIB from MID)>>
<<MPRFF.spad (SPAD from IN)>>

<<MRATFAC.o (O from NRLIB)>>
<<MRATFAC.NRLIB (NRLIB from MID)>>
<<MRATFAC.spad (SPAD from IN)>>

<<RFFACTOR.o (O from NRLIB)>>
<<RFFACTOR.NRLIB (NRLIB from MID)>>
<<RFFACTOR.spad (SPAD from IN)>>

<<SUPFRACF.o (O from NRLIB)>>
<<SUPFRACF.NRLIB (NRLIB from MID)>>
<<SUPFRACF.spad (SPAD from IN)>>

<<allfact.spad (SPAD from IN)>>
<<allfact.spad.dvi (DOC from IN)>>

<<DBASE.o (O from NRLIB)>>
<<DBASE.NRLIB (NRLIB from MID)>>
<<DBASE.spad (SPAD from IN)>>

<<DLIST.o (O from NRLIB)>>
<<DLIST.NRLIB (NRLIB from MID)>>
<<DLIST.spad (SPAD from IN)>>

<<ICARD.o (O from NRLIB)>>
<<ICARD.NRLIB (NRLIB from MID)>>
<<ICARD.spad (SPAD from IN)>>

<<MTHING.o (O from NRLIB)>>
<<MTHING.NRLIB (NRLIB from MID)>>
<<MTHING.spad (SPAD from IN)>>

<<OPQUERY.o (O from NRLIB)>>
<<OPQUERY.NRLIB (NRLIB from MID)>>
<<OPQUERY.spad (SPAD from IN)>>

<<QEQUAT.o (O from NRLIB)>>
<<QEQUAT.NRLIB (NRLIB from MID)>>
<<QEQUAT.spad (SPAD from IN)>>

<<alql.spad (SPAD from IN)>>
<<alql.spad.dvi (DOC from IN)>>

<<NIPROB.o (O from NRLIB)>>
<<NIPROB.NRLIB (NRLIB from MID)>>
<<NIPROB.spad (SPAD from IN)>>

<<NUMINT.o (O from NRLIB)>>
<<NUMINT.NRLIB (NRLIB from MID)>>
<<NUMINT.spad (SPAD from IN)>>

<<ODECAT.o (O from NRLIB)>>
<<ODECAT.NRLIB (NRLIB from MID)>>
<<ODECAT.spad (SPAD from IN)>>

<<ODEPROB.o (O from NRLIB)>>
<<ODEPROB.NRLIB (NRLIB from MID)>>
<<ODEPROB.spad (SPAD from IN)>>

<<OPTPROB.o (O from NRLIB)>>
<<OPTPROB.NRLIB (NRLIB from MID)>>
<<OPTPROB.spad (SPAD from IN)>>

<<PDECAT.o (O from NRLIB)>>
<<PDECAT.NRLIB (NRLIB from MID)>>
<<PDECAT.spad (SPAD from IN)>>

<<PDEPROB.o (O from NRLIB)>>
<<PDEPROB.NRLIB (NRLIB from MID)>>
<<PDEPROB.spad (SPAD from IN)>>

<<OPTCAT.o (O from NRLIB)>>
<<OPTCAT.NRLIB (NRLIB from MID)>>
<<OPTCAT.spad (SPAD from IN)>>

<<annacat.spad (SPAD from IN)>>
<<annacat.spad.dvi (DOC from IN)>>

<<ANY.o (O from NRLIB)>>
<<ANY.NRLIB (NRLIB from MID)>>
<<ANY.spad (SPAD from IN)>>

<<ANY1.o (O from NRLIB)>>
<<ANY1.NRLIB (NRLIB from MID)>>
<<ANY1.spad (SPAD from IN)>>

<<NONE1.o (O from NRLIB)>>
<<NONE1.NRLIB (NRLIB from MID)>>
<<NONE1.spad (SPAD from IN)>>

<<NONE.o (O from NRLIB)>>
<<NONE.NRLIB (NRLIB from MID)>>
<<NONE.spad (SPAD from IN)>>

<<any.spad (SPAD from IN)>>
<<any.spad.dvi (DOC from IN)>>

<<ARRAY1.o (O from NRLIB)>>
<<ARRAY1.NRLIB (NRLIB from MID)>>
<<ARRAY1.spad (SPAD from IN)>>

<<ARRAY12.o (O from NRLIB)>>
<<ARRAY12.NRLIB (NRLIB from MID)>>
<<ARRAY12.spad (SPAD from IN)>>

<<FARRAY.o (O from NRLIB)>>
<<FARRAY.NRLIB (NRLIB from MID)>>
<<FARRAY.spad (SPAD from IN)>>

<<IARRAY1.o (O from NRLIB)>>
<<IARRAY1.NRLIB (NRLIB from MID)>>
<<IARRAY1.spad (SPAD from IN)>>

<<IFARRAY.o (O from NRLIB)>>
<<IFARRAY.NRLIB (NRLIB from MID)>>
<<IFARRAY.spad (SPAD from IN)>>

<<PRIMARR.o (O from NRLIB)>>
<<PRIMARR.NRLIB (NRLIB from MID)>>
<<PRIMARR.spad (SPAD from IN)>>
<<PRIMARR.o (BOOTSTRAP from MID)>>
<<PRIMARR.lsp (LISP from IN)>>

<<PRIMARR2.o (O from NRLIB)>>
<<PRIMARR2.NRLIB (NRLIB from MID)>>
<<PRIMARR2.spad (SPAD from IN)>>

<<TUPLE.o (O from NRLIB)>>
<<TUPLE.NRLIB (NRLIB from MID)>>
<<TUPLE.spad (SPAD from IN)>>

<<array1.spad (SPAD from IN)>>
<<array1.spad.dvi (DOC from IN)>>

<<ARRAY2.o (O from NRLIB)>>
<<ARRAY2.NRLIB (NRLIB from MID)>>
<<ARRAY2.spad (SPAD from IN)>>

<<ARR2CAT-.o (O from NRLIB)>>
<<ARR2CAT-.NRLIB (NRLIB from MID)>>
<<ARR2CAT.o (O from NRLIB)>>
<<ARR2CAT.NRLIB (NRLIB from MID)>>
<<ARR2CAT.spad (SPAD from IN)>>

<<IARRAY2.o (O from NRLIB)>>
<<IARRAY2.NRLIB (NRLIB from MID)>>
<<IARRAY2.spad (SPAD from IN)>>

<<IIARRAY2.o (O from NRLIB)>>
<<IIARRAY2.NRLIB (NRLIB from MID)>>
<<IIARRAY2.spad (SPAD from IN)>>

<<array2.spad (SPAD from IN)>>
<<array2.spad.dvi (DOC from IN)>>

<<ASP1.o (O from NRLIB)>>
<<ASP1.NRLIB (NRLIB from MID)>>
<<ASP1.spad (SPAD from IN)>>

<<ASP10.o (O from NRLIB)>>
<<ASP10.NRLIB (NRLIB from MID)>>
<<ASP10.spad (SPAD from IN)>>

<<ASP12.o (O from NRLIB)>>
<<ASP12.NRLIB (NRLIB from MID)>>
<<ASP12.spad (SPAD from IN)>>

<<ASP19.o (O from NRLIB)>>
<<ASP19.NRLIB (NRLIB from MID)>>
<<ASP19.spad (SPAD from IN)>>

<<ASP20.o (O from NRLIB)>>
<<ASP20.NRLIB (NRLIB from MID)>>
<<ASP20.spad (SPAD from IN)>>

<<ASP24.o (O from NRLIB)>>
<<ASP24.NRLIB (NRLIB from MID)>>
<<ASP24.spad (SPAD from IN)>>

<<ASP27.o (O from NRLIB)>>
<<ASP27.NRLIB (NRLIB from MID)>>
<<ASP27.spad (SPAD from IN)>>

<<ASP28.o (O from NRLIB)>>
<<ASP28.NRLIB (NRLIB from MID)>>
<<ASP28.spad (SPAD from IN)>>

<<ASP29.o (O from NRLIB)>>
<<ASP29.NRLIB (NRLIB from MID)>>
<<ASP29.spad (SPAD from IN)>>

<<ASP30.o (O from NRLIB)>>
<<ASP30.NRLIB (NRLIB from MID)>>
<<ASP30.spad (SPAD from IN)>>

<<ASP31.o (O from NRLIB)>>
<<ASP31.NRLIB (NRLIB from MID)>>
<<ASP31.spad (SPAD from IN)>>

<<ASP33.o (O from NRLIB)>>
<<ASP33.NRLIB (NRLIB from MID)>>
<<ASP33.spad (SPAD from IN)>>

<<ASP34.o (O from NRLIB)>>
<<ASP34.NRLIB (NRLIB from MID)>>
<<ASP34.spad (SPAD from IN)>>

<<ASP35.o (O from NRLIB)>>
<<ASP35.NRLIB (NRLIB from MID)>>
<<ASP35.spad (SPAD from IN)>>

<<ASP4.o (O from NRLIB)>>
<<ASP4.NRLIB (NRLIB from MID)>>
<<ASP4.spad (SPAD from IN)>>

<<ASP41.o (O from NRLIB)>>
<<ASP41.NRLIB (NRLIB from MID)>>
<<ASP41.spad (SPAD from IN)>>

<<ASP42.o (O from NRLIB)>>
<<ASP42.NRLIB (NRLIB from MID)>>
<<ASP42.spad (SPAD from IN)>>

<<ASP49.o (O from NRLIB)>>
<<ASP49.NRLIB (NRLIB from MID)>>
<<ASP49.spad (SPAD from IN)>>

<<ASP50.o (O from NRLIB)>>
<<ASP50.NRLIB (NRLIB from MID)>>
<<ASP50.spad (SPAD from IN)>>

<<ASP55.o (O from NRLIB)>>
<<ASP55.NRLIB (NRLIB from MID)>>
<<ASP55.spad (SPAD from IN)>>

<<ASP6.o (O from NRLIB)>>
<<ASP6.NRLIB (NRLIB from MID)>>
<<ASP6.spad (SPAD from IN)>>

<<ASP7.o (O from NRLIB)>>
<<ASP7.NRLIB (NRLIB from MID)>>
<<ASP7.spad (SPAD from IN)>>

<<ASP73.o (O from NRLIB)>>
<<ASP73.NRLIB (NRLIB from MID)>>
<<ASP73.spad (SPAD from IN)>>

<<ASP74.o (O from NRLIB)>>
<<ASP74.NRLIB (NRLIB from MID)>>
<<ASP74.spad (SPAD from IN)>>

<<ASP77.o (O from NRLIB)>>
<<ASP77.NRLIB (NRLIB from MID)>>
<<ASP77.spad (SPAD from IN)>>

<<ASP78.o (O from NRLIB)>>
<<ASP78.NRLIB (NRLIB from MID)>>
<<ASP78.spad (SPAD from IN)>>

<<ASP8.o (O from NRLIB)>>
<<ASP8.NRLIB (NRLIB from MID)>>
<<ASP8.spad (SPAD from IN)>>

<<ASP80.o (O from NRLIB)>>
<<ASP80.NRLIB (NRLIB from MID)>>
<<ASP80.spad (SPAD from IN)>>

<<ASP9.o (O from NRLIB)>>
<<ASP9.NRLIB (NRLIB from MID)>>
<<ASP9.spad (SPAD from IN)>>

<<asp.spad (SPAD from IN)>>
<<asp.spad.dvi (DOC from IN)>>

<<ATTREG.o (O from NRLIB)>>
<<ATTREG.NRLIB (NRLIB from MID)>>
<<ATTREG.spad (SPAD from IN)>>

<<attreg.spad (SPAD from IN)>>
<<attreg.spad.dvi (DOC from IN)>>

<<axtimer.as (SPAD from IN)>>
<<axtimer.as.dvi (DOC from IN)>>

<<ASTACK.o (O from NRLIB)>>
<<ASTACK.NRLIB (NRLIB from MID)>>
<<ASTACK.spad (SPAD from IN)>>

<<DEQUEUE.o (O from NRLIB)>>
<<DEQUEUE.NRLIB (NRLIB from MID)>>
<<DEQUEUE.spad (SPAD from IN)>>

<<HEAP.o (O from NRLIB)>>
<<HEAP.NRLIB (NRLIB from MID)>>
<<HEAP.spad (SPAD from IN)>>

<<QUEUE.o (O from NRLIB)>>
<<QUEUE.NRLIB (NRLIB from MID)>>
<<QUEUE.spad (SPAD from IN)>>

<<STACK.o (O from NRLIB)>>
<<STACK.NRLIB (NRLIB from MID)>>
<<STACK.spad (SPAD from IN)>>

<<bags.spad (SPAD from IN)>>
<<bags.spad.dvi (DOC from IN)>>

<<BEZOUT.o (O from NRLIB)>>
<<BEZOUT.NRLIB (NRLIB from MID)>>
<<BEZOUT.spad (SPAD from IN)>>

<<bezout.spad (SPAD from IN)>>
<<bezout.spad.dvi (DOC from IN)>>

<<BITS.o (O from NRLIB)>>
<<BITS.NRLIB (NRLIB from MID)>>
<<BITS.spad (SPAD from IN)>>

<<BOOLEAN.o (O from NRLIB)>>
<<BOOLEAN.NRLIB (NRLIB from MID)>>
<<BOOLEAN.spad (SPAD from IN)>>
<<BOOLEAN.o (BOOTSTRAP from MID)>>
<<BOOLEAN.lsp (LISP from IN)>>

<<IBITS.o (O from NRLIB)>>
<<IBITS.NRLIB (NRLIB from MID)>>
<<IBITS.spad (SPAD from IN)>>

<<LOGIC-.o (O from NRLIB)>>
<<LOGIC-.NRLIB (NRLIB from MID)>>
<<LOGIC.o (O from NRLIB)>>
<<LOGIC.NRLIB (NRLIB from MID)>>
<<LOGIC.spad (SPAD from IN)>>

<<REF.o (O from NRLIB)>>
<<REF.NRLIB (NRLIB from MID)>>
<<REF.spad (SPAD from IN)>>
<<REF.o (BOOTSTRAP from MID)>>
<<REF.lsp (LISP from IN)>>

<<boolean.spad (SPAD from IN)>>
<<boolean.spad.dvi (DOC from IN)>>

<<BRILL.o (O from NRLIB)>>
<<BRILL.NRLIB (NRLIB from MID)>>
<<BRILL.spad (SPAD from IN)>>

<<brill.spad (SPAD from IN)>>
<<brill.spad.dvi (DOC from IN)>>

<<NAGC02.o (O from NRLIB)>>
<<NAGC02.NRLIB (NRLIB from MID)>>
<<NAGC02.spad (SPAD from IN)>>

<<c02.spad (SPAD from IN)>>
<<c02.spad.dvi (DOC from IN)>>

<<NAGC05.o (O from NRLIB)>>
<<NAGC05.NRLIB (NRLIB from MID)>>
<<NAGC05.spad (SPAD from IN)>>

<<c05.spad (SPAD from IN)>>
<<c05.spad.dvi (DOC from IN)>>

<<NAGC06.o (O from NRLIB)>>
<<NAGC06.NRLIB (NRLIB from MID)>>
<<NAGC06.spad (SPAD from IN)>>

<<c06.spad (SPAD from IN)>>
<<c06.spad.dvi (DOC from IN)>>

<<CARD.o (O from NRLIB)>>
<<CARD.NRLIB (NRLIB from MID)>>
<<CARD.spad (SPAD from IN)>>

<<card.spad (SPAD from IN)>>
<<card.spad.dvi (DOC from IN)>>

<<CARTEN.o (O from NRLIB)>>
<<CARTEN.NRLIB (NRLIB from MID)>>
<<CARTEN.spad (SPAD from IN)>>

<<CARTEN2.o (O from NRLIB)>>
<<CARTEN2.NRLIB (NRLIB from MID)>>
<<CARTEN2.spad (SPAD from IN)>>

<<GRALG-.o (O from NRLIB)>>
<<GRALG-.NRLIB (NRLIB from MID)>>
<<GRALG.o (O from NRLIB)>>
<<GRALG.NRLIB (NRLIB from MID)>>
<<GRALG.spad (SPAD from IN)>>

<<GRMOD-.o (O from NRLIB)>>
<<GRMOD-.NRLIB (NRLIB from MID)>>
<<GRMOD.o (O from NRLIB)>>
<<GRMOD.NRLIB (NRLIB from MID)>>
<<GRMOD.spad (SPAD from IN)>>

<<carten.spad (SPAD from IN)>>
<<carten.spad.dvi (DOC from IN)>>

<<ABELGRP-.o (O from NRLIB)>>
<<ABELGRP-.NRLIB (NRLIB from MID)>>
<<ABELGRP.o (O from NRLIB)>>
<<ABELGRP.NRLIB (NRLIB from MID)>>
<<ABELGRP.spad (SPAD from IN)>>
<<ABELGRP-.o (BOOTSTRAP from MID)>>
<<ABELGRP-.lsp (LISP from IN)>>
<<ABELGRP.o (BOOTSTRAP from MID)>>
<<ABELGRP.lsp (LISP from IN)>>

<<ABELMON-.o (O from NRLIB)>>
<<ABELMON-.NRLIB (NRLIB from MID)>>
<<ABELMON.o (O from NRLIB)>>
<<ABELMON.NRLIB (NRLIB from MID)>>
<<ABELMON.spad (SPAD from IN)>>
<<ABELMON-.o (BOOTSTRAP from MID)>>
<<ABELMON-.lsp (LISP from IN)>>
<<ABELMON.o (BOOTSTRAP from MID)>>
<<ABELMON.lsp (LISP from IN)>>

<<ABELSG-.o (O from NRLIB)>>
<<ABELSG-.NRLIB (NRLIB from MID)>>
<<ABELSG.o (O from NRLIB)>>
<<ABELSG.NRLIB (NRLIB from MID)>>
<<ABELSG.spad (SPAD from IN)>>
<<ABELSG-.o (BOOTSTRAP from MID)>>
<<ABELSG-.lsp (LISP from IN)>>
<<ABELSG.o (BOOTSTRAP from MID)>>
<<ABELSG.lsp (LISP from IN)>>

<<ALGEBRA-.o (O from NRLIB)>>
<<ALGEBRA-.NRLIB (NRLIB from MID)>>
<<ALGEBRA.o (O from NRLIB)>>
<<ALGEBRA.NRLIB (NRLIB from MID)>>
<<ALGEBRA.spad (SPAD from IN)>>

<<BASTYPE-.o (O from NRLIB)>>
<<BASTYPE-.NRLIB (NRLIB from MID)>>
<<BASTYPE.o (O from NRLIB)>>
<<BASTYPE.NRLIB (NRLIB from MID)>>
<<BASTYPE.spad (SPAD from IN)>>

<<BMODULE.o (O from NRLIB)>>
<<BMODULE.NRLIB (NRLIB from MID)>>
<<BMODULE.spad (SPAD from IN)>>

<<CABMON.o (O from NRLIB)>>
<<CABMON.NRLIB (NRLIB from MID)>>
<<CABMON.spad (SPAD from IN)>>
<<CABMON.o (BOOTSTRAP from MID)>>
<<CABMON.lsp (LISP from IN)>>

<<CHARNZ.o (O from NRLIB)>>
<<CHARNZ.NRLIB (NRLIB from MID)>>
<<CHARNZ.spad (SPAD from IN)>>

<<CHARZ.o (O from NRLIB)>>
<<CHARZ.NRLIB (NRLIB from MID)>>
<<CHARZ.spad (SPAD from IN)>>

<<COMRING.o (O from NRLIB)>>
<<COMRING.NRLIB (NRLIB from MID)>>
<<COMRING.spad (SPAD from IN)>>
<<COMRING.o (BOOTSTRAP from MID)>>
<<COMRING.lsp (LISP from IN)>>

<<DIFEXT-.o (O from NRLIB)>>
<<DIFEXT-.NRLIB (NRLIB from MID)>>
<<DIFEXT.o (O from NRLIB)>>
<<DIFEXT.NRLIB (NRLIB from MID)>>
<<DIFEXT.spad (SPAD from IN)>>

<<DIFRING-.o (O from NRLIB)>>
<<DIFRING-.NRLIB (NRLIB from MID)>>
<<DIFRING.o (O from NRLIB)>>
<<DIFRING.NRLIB (NRLIB from MID)>>
<<DIFRING.spad (SPAD from IN)>>
<<DIFRING-.o (BOOTSTRAP from MID)>>
<<DIFRING-.lsp (LISP from IN)>>
<<DIFRING.o (BOOTSTRAP from MID)>>
<<DIFRING.lsp (LISP from IN)>>

<<DIVRING-.o (O from NRLIB)>>
<<DIVRING-.NRLIB (NRLIB from MID)>>
<<DIVRING.o (O from NRLIB)>>
<<DIVRING.NRLIB (NRLIB from MID)>>
<<DIVRING.spad (SPAD from IN)>>
<<DIVRING-.o (BOOTSTRAP from MID)>>
<<DIVRING-.lsp (LISP from IN)>>
<<DIVRING.o (BOOTSTRAP from MID)>>
<<DIVRING.lsp (LISP from IN)>>

<<ENTIRER.o (O from NRLIB)>>
<<ENTIRER.NRLIB (NRLIB from MID)>>
<<ENTIRER.spad (SPAD from IN)>>
<<ENTIRER.o (BOOTSTRAP from MID)>>
<<ENTIRER.lsp (LISP from IN)>>

<<EUCDOM-.o (O from NRLIB)>>
<<EUCDOM-.NRLIB (NRLIB from MID)>>
<<EUCDOM.o (O from NRLIB)>>
<<EUCDOM.NRLIB (NRLIB from MID)>>
<<EUCDOM.spad (SPAD from IN)>>
<<EUCDOM-.o (BOOTSTRAP from MID)>>
<<EUCDOM-.lsp (LISP from IN)>>
<<EUCDOM.o (BOOTSTRAP from MID)>>
<<EUCDOM.lsp (LISP from IN)>>

<<FIELD-.o (O from NRLIB)>>
<<FIELD-.NRLIB (NRLIB from MID)>>
<<FIELD.o (O from NRLIB)>>
<<FIELD.NRLIB (NRLIB from MID)>>
<<FIELD.spad (SPAD from IN)>>

<<FINITE.o (O from NRLIB)>>
<<FINITE.NRLIB (NRLIB from MID)>>
<<FINITE.spad (SPAD from IN)>>

<<FLINEXP-.o (O from NRLIB)>>
<<FLINEXP-.NRLIB (NRLIB from MID)>>
<<FLINEXP.o (O from NRLIB)>>
<<FLINEXP.NRLIB (NRLIB from MID)>>
<<FLINEXP.spad (SPAD from IN)>>

<<GCDDOM-.o (O from NRLIB)>>
<<GCDDOM-.NRLIB (NRLIB from MID)>>
<<GCDDOM.o (O from NRLIB)>>
<<GCDDOM.NRLIB (NRLIB from MID)>>
<<GCDDOM.spad (SPAD from IN)>>
<<GCDDOM-.o (BOOTSTRAP from MID)>>
<<GCDDOM-.lsp (LISP from IN)>>
<<GCDDOM.o (BOOTSTRAP from MID)>>
<<GCDDOM.lsp (LISP from IN)>>

<<GROUP-.o (O from NRLIB)>>
<<GROUP-.NRLIB (NRLIB from MID)>>
<<GROUP.o (O from NRLIB)>>
<<GROUP.NRLIB (NRLIB from MID)>>
<<GROUP.spad (SPAD from IN)>>

<<INTDOM-.o (O from NRLIB)>>
<<INTDOM-.NRLIB (NRLIB from MID)>>
<<INTDOM.o (O from NRLIB)>>
<<INTDOM.NRLIB (NRLIB from MID)>>
<<INTDOM.spad (SPAD from IN)>>
<<INTDOM-.o (BOOTSTRAP from MID)>>
<<INTDOM-.lsp (LISP from IN)>>
<<INTDOM.o (BOOTSTRAP from MID)>>
<<INTDOM.lsp (LISP from IN)>>

<<LINEXP.o (O from NRLIB)>>
<<LINEXP.NRLIB (NRLIB from MID)>>
<<LINEXP.spad (SPAD from IN)>>

<<LMODULE.o (O from NRLIB)>>
<<LMODULE.NRLIB (NRLIB from MID)>>
<<LMODULE.spad (SPAD from IN)>>

<<MONOID-.o (O from NRLIB)>>
<<MONOID-.NRLIB (NRLIB from MID)>>
<<MONOID.o (O from NRLIB)>>
<<MONOID.NRLIB (NRLIB from MID)>>
<<MONOID.spad (SPAD from IN)>>
<<MONOID-.o (BOOTSTRAP from MID)>>
<<MONOID-.lsp (LISP from IN)>>
<<MONOID.o (BOOTSTRAP from MID)>>
<<MONOID.lsp (LISP from IN)>>

<<MODULE-.o (O from NRLIB)>>
<<MODULE-.NRLIB (NRLIB from MID)>>
<<MODULE.o (O from NRLIB)>>
<<MODULE.NRLIB (NRLIB from MID)>>
<<MODULE.spad (SPAD from IN)>>

<<OCAMON.o (O from NRLIB)>>
<<OCAMON.NRLIB (NRLIB from MID)>>
<<OCAMON.spad (SPAD from IN)>>

<<OAGROUP.o (O from NRLIB)>>
<<OAGROUP.NRLIB (NRLIB from MID)>>
<<OAGROUP.spad (SPAD from IN)>>

<<OAMON.o (O from NRLIB)>>
<<OAMON.NRLIB (NRLIB from MID)>>
<<OAMON.spad (SPAD from IN)>>

<<OAMONS.o (O from NRLIB)>>
<<OAMONS.NRLIB (NRLIB from MID)>>
<<OAMONS.spad (SPAD from IN)>>

<<OASGP.o (O from NRLIB)>>
<<OASGP.NRLIB (NRLIB from MID)>>
<<OASGP.spad (SPAD from IN)>>

<<ORDFIN.o (O from NRLIB)>>
<<ORDFIN.NRLIB (NRLIB from MID)>>
<<ORDFIN.spad (SPAD from IN)>>

<<OINTDOM.o (O from NRLIB)>>
<<OINTDOM.NRLIB (NRLIB from MID)>>
<<OINTDOM.spad (SPAD from IN)>>
<<OINTDOM.o (BOOTSTRAP from MID)>>
<<OINTDOM.lsp (LISP from IN)>>

<<ORDMON.o (O from NRLIB)>>
<<ORDMON.NRLIB (NRLIB from MID)>>
<<ORDMON.spad (SPAD from IN)>>

<<ORDRING-.o (O from NRLIB)>>
<<ORDRING-.NRLIB (NRLIB from MID)>>
<<ORDRING.o (O from NRLIB)>>
<<ORDRING.NRLIB (NRLIB from MID)>>
<<ORDRING.spad (SPAD from IN)>>
<<ORDRING-.o (BOOTSTRAP from MID)>>
<<ORDRING-.lsp (LISP from IN)>>
<<ORDRING.o (BOOTSTRAP from MID)>>
<<ORDRING.lsp (LISP from IN)>>

<<ORDSET-.o (O from NRLIB)>>
<<ORDSET-.NRLIB (NRLIB from MID)>>
<<ORDSET.o (O from NRLIB)>>
<<ORDSET.NRLIB (NRLIB from MID)>>
<<ORDSET.spad (SPAD from IN)>>

<<PDRING-.o (O from NRLIB)>>
<<PDRING-.NRLIB (NRLIB from MID)>>
<<PDRING.o (O from NRLIB)>>
<<PDRING.NRLIB (NRLIB from MID)>>
<<PDRING.spad (SPAD from IN)>>

<<PFECAT-.o (O from NRLIB)>>
<<PFECAT-.NRLIB (NRLIB from MID)>>
<<PFECAT.o (O from NRLIB)>>
<<PFECAT.NRLIB (NRLIB from MID)>>
<<PFECAT.spad (SPAD from IN)>>

<<PID.o (O from NRLIB)>>
<<PID.NRLIB (NRLIB from MID)>>
<<PID.spad (SPAD from IN)>>

<<RMODULE.o (O from NRLIB)>>
<<RMODULE.NRLIB (NRLIB from MID)>>
<<RMODULE.spad (SPAD from IN)>>

<<RING-.o (O from NRLIB)>>
<<RING-.NRLIB (NRLIB from MID)>>
<<RING.o (O from NRLIB)>>
<<RING.NRLIB (NRLIB from MID)>>
<<RING.spad (SPAD from IN)>>
<<RING-.o (BOOTSTRAP from MID)>>
<<RING-.lsp (LISP from IN)>>
<<RING.o (BOOTSTRAP from MID)>>
<<RING.lsp (LISP from IN)>>

<<RNG.o (O from NRLIB)>>
<<RNG.NRLIB (NRLIB from MID)>>
<<RNG.spad (SPAD from IN)>>
<<RNG.o (BOOTSTRAP from MID)>>
<<RNG.lsp (LISP from IN)>>

<<SETCAT-.o (O from NRLIB)>>
<<SETCAT-.NRLIB (NRLIB from MID)>>
<<SETCAT-.o (BOOTSTRAP from MID)>>
<<SETCAT-.lsp (LISP from IN)>>

<<SETCAT.o (O from NRLIB)>>
<<SETCAT.NRLIB (NRLIB from MID)>>
<<SETCAT.spad (SPAD from IN)>>
<<SETCAT.o (BOOTSTRAP from MID)>>
<<SETCAT.lsp (LISP from IN)>>

<<SGROUP-.o (O from NRLIB)>>
<<SGROUP-.NRLIB (NRLIB from MID)>>
<<SGROUP.o (O from NRLIB)>>
<<SGROUP.NRLIB (NRLIB from MID)>>
<<SGROUP.spad (SPAD from IN)>>

<<STEP.o (O from NRLIB)>>
<<STEP.NRLIB (NRLIB from MID)>>
<<STEP.spad (SPAD from IN)>>

<<UFD-.o (O from NRLIB)>>
<<UFD-.NRLIB (NRLIB from MID)>>
<<UFD.o (O from NRLIB)>>
<<UFD.NRLIB (NRLIB from MID)>>
<<UFD.spad (SPAD from IN)>>
<<UFD-.o (BOOTSTRAP from MID)>>
<<UFD-.lsp (LISP from IN)>>
<<UFD.o (BOOTSTRAP from MID)>>
<<UFD.lsp (LISP from IN)>>

<<VSPACE-.o (O from NRLIB)>>
<<VSPACE-.NRLIB (NRLIB from MID)>>
<<VSPACE.o (O from NRLIB)>>
<<VSPACE.NRLIB (NRLIB from MID)>>
<<VSPACE.spad (SPAD from IN)>>

<<catdef.spad (SPAD from IN)>>
<<catdef.spad.dvi (DOC from IN)>>

<<CDEN.o (O from NRLIB)>>
<<CDEN.NRLIB (NRLIB from MID)>>
<<CDEN.spad (SPAD from IN)>>

<<ICDEN.o (O from NRLIB)>>
<<ICDEN.NRLIB (NRLIB from MID)>>
<<ICDEN.spad (SPAD from IN)>>

<<MCDEN.o (O from NRLIB)>>
<<MCDEN.NRLIB (NRLIB from MID)>>
<<MCDEN.spad (SPAD from IN)>>

<<UPCDEN.o (O from NRLIB)>>
<<UPCDEN.NRLIB (NRLIB from MID)>>
<<UPCDEN.spad (SPAD from IN)>>

<<cden.spad (SPAD from IN)>>
<<cden.spad.dvi (DOC from IN)>>

<<CLIF.o (O from NRLIB)>>
<<CLIF.NRLIB (NRLIB from MID)>>
<<CLIF.spad (SPAD from IN)>>

<<QFORM.o (O from NRLIB)>>
<<QFORM.NRLIB (NRLIB from MID)>>
<<QFORM.spad (SPAD from IN)>>

<<clifford.spad (SPAD from IN)>>
<<clifford.spad.dvi (DOC from IN)>>

<<CLIP.o (O from NRLIB)>>
<<CLIP.NRLIB (NRLIB from MID)>>
<<CLIP.spad (SPAD from IN)>>

<<clip.spad (SPAD from IN)>>
<<clip.spad.dvi (DOC from IN)>>

<<CMPLXRT.o (O from NRLIB)>>
<<CMPLXRT.NRLIB (NRLIB from MID)>>
<<CMPLXRT.spad (SPAD from IN)>>

<<cmplxrt.spad (SPAD from IN)>>
<<cmplxrt.spad.dvi (DOC from IN)>>

<<KOERCE.o (O from NRLIB)>>
<<KOERCE.NRLIB (NRLIB from MID)>>
<<KOERCE.spad (SPAD from IN)>>

<<KONVERT.o (O from NRLIB)>>
<<KONVERT.NRLIB (NRLIB from MID)>>
<<KONVERT.spad (SPAD from IN)>>

<<RETRACT-.o (O from NRLIB)>>
<<RETRACT-.NRLIB (NRLIB from MID)>>
<<RETRACT.o (O from NRLIB)>>
<<RETRACT.NRLIB (NRLIB from MID)>>
<<RETRACT.spad (SPAD from IN)>>

<<TYPE.o (O from NRLIB)>>
<<TYPE.NRLIB (NRLIB from MID)>>
<<TYPE.spad (SPAD from IN)>>

<<coerce.spad (SPAD from IN)>>
<<coerce.spad.dvi (DOC from IN)>>

<<COLOR.o (O from NRLIB)>>
<<COLOR.NRLIB (NRLIB from MID)>>
<<COLOR.spad (SPAD from IN)>>

<<PALETTE.o (O from NRLIB)>>
<<PALETTE.NRLIB (NRLIB from MID)>>
<<PALETTE.spad (SPAD from IN)>>

<<color.spad (SPAD from IN)>>
<<color.spad.dvi (DOC from IN)>>

<<COMBF.o (O from NRLIB)>>
<<COMBF.NRLIB (NRLIB from MID)>>
<<COMBF.spad (SPAD from IN)>>

<<COMBOPC.o (O from NRLIB)>>
<<COMBOPC.NRLIB (NRLIB from MID)>>
<<COMBOPC.spad (SPAD from IN)>>

<<FSPECF.o (O from NRLIB)>>
<<FSPECF.NRLIB (NRLIB from MID)>>
<<FSPECF.spad (SPAD from IN)>>

<<SUMFS.o (O from NRLIB)>>
<<SUMFS.NRLIB (NRLIB from MID)>>
<<SUMFS.spad (SPAD from IN)>>

<<combfunc.spad (SPAD from IN)>>
<<combfunc.spad.dvi (DOC from IN)>>

<<COMBINAT.o (O from NRLIB)>>
<<COMBINAT.NRLIB (NRLIB from MID)>>
<<COMBINAT.spad (SPAD from IN)>>

<<combinat.spad (SPAD from IN)>>
<<combinat.spad.dvi (DOC from IN)>>

<<INFINITY.o (O from NRLIB)>>
<<INFINITY.NRLIB (NRLIB from MID)>>
<<INFINITY.spad (SPAD from IN)>>

<<ONECOMP.o (O from NRLIB)>>
<<ONECOMP.NRLIB (NRLIB from MID)>>
<<ONECOMP.spad (SPAD from IN)>>

<<ONECOMP2.o (O from NRLIB)>>
<<ONECOMP2.NRLIB (NRLIB from MID)>>
<<ONECOMP2.spad (SPAD from IN)>>

<<ORDCOMP.o (O from NRLIB)>>
<<ORDCOMP.NRLIB (NRLIB from MID)>>
<<ORDCOMP.spad (SPAD from IN)>>

<<ORDCOMP2.o (O from NRLIB)>>
<<ORDCOMP2.NRLIB (NRLIB from MID)>>
<<ORDCOMP2.spad (SPAD from IN)>>

<<complet.spad (SPAD from IN)>>
<<complet.spad.dvi (DOC from IN)>>

<<AN.o (O from NRLIB)>>
<<AN.NRLIB (NRLIB from MID)>>
<<AN.spad (SPAD from IN)>>

<<IAN.o (O from NRLIB)>>
<<IAN.NRLIB (NRLIB from MID)>>
<<IAN.spad (SPAD from IN)>>

<<constant.spad (SPAD from IN)>>
<<constant.spad.dvi (DOC from IN)>>

<<CONTFRAC.o (O from NRLIB)>>
<<CONTFRAC.NRLIB (NRLIB from MID)>>
<<CONTFRAC.spad (SPAD from IN)>>

<<NCNTFRAC.o (O from NRLIB)>>
<<NCNTFRAC.NRLIB (NRLIB from MID)>>
<<NCNTFRAC.spad (SPAD from IN)>>

<<contfrac.spad (SPAD from IN)>>
<<contfrac.spad.dvi (DOC from IN)>>

<<ESCONT.o (O from NRLIB)>>
<<ESCONT.NRLIB (NRLIB from MID)>>
<<ESCONT.spad (SPAD from IN)>>

<<ESCONT1.o (O from NRLIB)>>
<<ESCONT1.NRLIB (NRLIB from MID)>>
<<ESCONT1.spad (SPAD from IN)>>

<<cont.spad (SPAD from IN)>>
<<cont.spad.dvi (DOC from IN)>>

<<COORDSYS.o (O from NRLIB)>>
<<COORDSYS.NRLIB (NRLIB from MID)>>
<<COORDSYS.spad (SPAD from IN)>>

<<coordsys.spad (SPAD from IN)>>
<<coordsys.spad.dvi (DOC from IN)>>

<<CRAPACK.o (O from NRLIB)>>
<<CRAPACK.NRLIB (NRLIB from MID)>>
<<CRAPACK.spad (SPAD from IN)>>

<<cra.spad (SPAD from IN)>>
<<cra.spad.dvi (DOC from IN)>>

<<CRFP.o (O from NRLIB)>>
<<CRFP.NRLIB (NRLIB from MID)>>
<<CRFP.spad (SPAD from IN)>>

<<crfp.spad (SPAD from IN)>>
<<crfp.spad.dvi (DOC from IN)>>

<<ALGFF.o (O from NRLIB)>>
<<ALGFF.NRLIB (NRLIB from MID)>>
<<ALGFF.spad (SPAD from IN)>>

<<CHVAR.o (O from NRLIB)>>
<<CHVAR.NRLIB (NRLIB from MID)>>
<<CHVAR.spad (SPAD from IN)>>

<<FAXF-.o (O from NRLIB)>>
<<FAXF-.NRLIB (NRLIB from MID)>>
<<FAXF.o (O from NRLIB)>>
<<FAXF.NRLIB (NRLIB from MID)>>
<<FAXF.spad (SPAD from IN)>>

<<FFCAT-.o (O from NRLIB)>>
<<FFCAT-.NRLIB (NRLIB from MID)>>
<<FFCAT.o (O from NRLIB)>>
<<FFCAT.NRLIB (NRLIB from MID)>>
<<FFCAT.spad (SPAD from IN)>>

<<FFCAT2.o (O from NRLIB)>>
<<FFCAT2.NRLIB (NRLIB from MID)>>
<<FFCAT2.spad (SPAD from IN)>>

<<MMAP.o (O from NRLIB)>>
<<MMAP.NRLIB (NRLIB from MID)>>
<<MMAP.spad (SPAD from IN)>>

<<RADFF.o (O from NRLIB)>>
<<RADFF.NRLIB (NRLIB from MID)>>
<<RADFF.spad (SPAD from IN)>>

<<curve.spad (SPAD from IN)>>
<<curve.spad.dvi (DOC from IN)>>

<<CYCLES.o (O from NRLIB)>>
<<CYCLES.NRLIB (NRLIB from MID)>>
<<CYCLES.spad (SPAD from IN)>>

<<EVALCYC.o (O from NRLIB)>>
<<EVALCYC.NRLIB (NRLIB from MID)>>
<<EVALCYC.spad (SPAD from IN)>>

<<cycles.spad (SPAD from IN)>>
<<cycles.spad.dvi (DOC from IN)>>

<<CYCLOTOM.o (O from NRLIB)>>
<<CYCLOTOM.NRLIB (NRLIB from MID)>>
<<CYCLOTOM.spad (SPAD from IN)>>

<<cyclotom.spad (SPAD from IN)>>
<<cyclotom.spad.dvi (DOC from IN)>>

<<INTFTBL.o (O from NRLIB)>>
<<INTFTBL.NRLIB (NRLIB from MID)>>
<<INTFTBL.spad (SPAD from IN)>>

<<d01agents.spad (SPAD from IN)>>
<<d01agents.spad.dvi (DOC from IN)>>

<<INTPACK.o (O from NRLIB)>>
<<INTPACK.NRLIB (NRLIB from MID)>>
<<INTPACK.spad (SPAD from IN)>>

<<d01Package.spad (SPAD from IN)>>
<<d01Package.spad.dvi (DOC from IN)>>

<<D01AJFA.o (O from NRLIB)>>
<<D01AJFA.NRLIB (NRLIB from MID)>>
<<D01AJFA.spad (SPAD from IN)>>

<<D01AKFA.o (O from NRLIB)>>
<<D01AKFA.NRLIB (NRLIB from MID)>>
<<D01AKFA.spad (SPAD from IN)>>

<<D01ALFA.o (O from NRLIB)>>
<<D01ALFA.NRLIB (NRLIB from MID)>>
<<D01ALFA.spad (SPAD from IN)>>

<<D01AMFA.o (O from NRLIB)>>
<<D01AMFA.NRLIB (NRLIB from MID)>>
<<D01AMFA.spad (SPAD from IN)>>

<<D01ANFA.o (O from NRLIB)>>
<<D01ANFA.NRLIB (NRLIB from MID)>>
<<D01ANFA.spad (SPAD from IN)>>

<<D01APFA.o (O from NRLIB)>>
<<D01APFA.NRLIB (NRLIB from MID)>>
<<D01APFA.spad (SPAD from IN)>>

<<D01AQFA.o (O from NRLIB)>>
<<D01AQFA.NRLIB (NRLIB from MID)>>
<<D01AQFA.spad (SPAD from IN)>>

<<D01ASFA.o (O from NRLIB)>>
<<D01ASFA.NRLIB (NRLIB from MID)>>
<<D01ASFA.spad (SPAD from IN)>>

<<D01FCFA.o (O from NRLIB)>>
<<D01FCFA.NRLIB (NRLIB from MID)>>
<<D01FCFA.spad (SPAD from IN)>>

<<D01GBFA.o (O from NRLIB)>>
<<D01GBFA.NRLIB (NRLIB from MID)>>
<<D01GBFA.spad (SPAD from IN)>>

<<d01routine.spad (SPAD from IN)>>
<<d01routine.spad.dvi (DOC from IN)>>

<<NAGD01.o (O from NRLIB)>>
<<NAGD01.NRLIB (NRLIB from MID)>>
<<NAGD01.spad (SPAD from IN)>>

<<d01.spad (SPAD from IN)>>
<<d01.spad.dvi (DOC from IN)>>

<<D01TRNS.o (O from NRLIB)>>
<<D01TRNS.NRLIB (NRLIB from MID)>>
<<D01TRNS.spad (SPAD from IN)>>

<<d01transform.spad (SPAD from IN)>>
<<d01transform.spad.dvi (DOC from IN)>>

<<d01weights.spad (SPAD from IN)>>
<<d01weights.spad.dvi (DOC from IN)>>

<<D02AGNT.o (O from NRLIB)>>
<<D02AGNT.NRLIB (NRLIB from MID)>>
<<D02AGNT.spad (SPAD from IN)>>

<<ODEIFTBL.o (O from NRLIB)>>
<<ODEIFTBL.NRLIB (NRLIB from MID)>>
<<ODEIFTBL.spad (SPAD from IN)>>

<<d02agents.spad (SPAD from IN)>>
<<d02agents.spad.dvi (DOC from IN)>>

<<ODEPACK.o (O from NRLIB)>>
<<ODEPACK.NRLIB (NRLIB from MID)>>
<<ODEPACK.spad (SPAD from IN)>>

<<d02Package.spad (SPAD from IN)>>
<<d02Package.spad.dvi (DOC from IN)>>

<<D02BBFA.o (O from NRLIB)>>
<<D02BBFA.NRLIB (NRLIB from MID)>>
<<D02BBFA.spad (SPAD from IN)>>

<<D02BHFA.o (O from NRLIB)>>
<<D02BHFA.NRLIB (NRLIB from MID)>>
<<D02BHFA.spad (SPAD from IN)>>

<<D02CJFA.o (O from NRLIB)>>
<<D02CJFA.NRLIB (NRLIB from MID)>>
<<D02CJFA.spad (SPAD from IN)>>

<<D02EJFA.o (O from NRLIB)>>
<<D02EJFA.NRLIB (NRLIB from MID)>>
<<D02EJFA.spad (SPAD from IN)>>

<<d02routine.spad (SPAD from IN)>>
<<d02routine.spad.dvi (DOC from IN)>>

<<NAGD02.o (O from NRLIB)>>
<<NAGD02.NRLIB (NRLIB from MID)>>
<<NAGD02.spad (SPAD from IN)>>

<<d02.spad (SPAD from IN)>>
<<d02.spad.dvi (DOC from IN)>>

<<D03AGNT.o (O from NRLIB)>>
<<D03AGNT.NRLIB (NRLIB from MID)>>
<<D03AGNT.spad (SPAD from IN)>>

<<d03agents.spad (SPAD from IN)>>
<<d03agents.spad.dvi (DOC from IN)>>

<<PDEPACK.o (O from NRLIB)>>
<<PDEPACK.NRLIB (NRLIB from MID)>>
<<PDEPACK.spad (SPAD from IN)>>

<<d03Package.spad (SPAD from IN)>>
<<d03Package.spad.dvi (DOC from IN)>>

<<D03EEFA.o (O from NRLIB)>>
<<D03EEFA.NRLIB (NRLIB from MID)>>
<<D03EEFA.spad (SPAD from IN)>>

<<D03FAFA.o (O from NRLIB)>>
<<D03FAFA.NRLIB (NRLIB from MID)>>
<<D03FAFA.spad (SPAD from IN)>>

<<d03routine.spad (SPAD from IN)>>
<<d03routine.spad.dvi (DOC from IN)>>

<<NAGD03.o (O from NRLIB)>>
<<NAGD03.NRLIB (NRLIB from MID)>>
<<NAGD03.spad (SPAD from IN)>>

<<d03.spad (SPAD from IN)>>
<<d03.spad.dvi (DOC from IN)>>

<<DDFACT.o (O from NRLIB)>>
<<DDFACT.NRLIB (NRLIB from MID)>>
<<DDFACT.spad (SPAD from IN)>>

<<ddfact.spad (SPAD from IN)>>
<<ddfact.spad.dvi (DOC from IN)>>

<<FLASORT.o (O from NRLIB)>>
<<FLASORT.NRLIB (NRLIB from MID)>>
<<FLASORT.spad (SPAD from IN)>>

<<REPDB.o (O from NRLIB)>>
<<REPDB.NRLIB (NRLIB from MID)>>
<<REPDB.spad (SPAD from IN)>>

<<REPSQ.o (O from NRLIB)>>
<<REPSQ.NRLIB (NRLIB from MID)>>
<<REPSQ.spad (SPAD from IN)>>

<<defaults.spad (SPAD from IN)>>
<<defaults.spad.dvi (DOC from IN)>>

<<DEFINTEF.o (O from NRLIB)>>
<<DEFINTEF.NRLIB (NRLIB from MID)>>
<<DEFINTEF.spad (SPAD from IN)>>

<<defintef.spad (SPAD from IN)>>
<<defintef.spad.dvi (DOC from IN)>>

<<DEFINTRF.o (O from NRLIB)>>
<<DEFINTRF.NRLIB (NRLIB from MID)>>
<<DEFINTRF.spad (SPAD from IN)>>

<<DFINTTLS.o (O from NRLIB)>>
<<DFINTTLS.NRLIB (NRLIB from MID)>>
<<DFINTTLS.spad (SPAD from IN)>>

<<defintrf.spad (SPAD from IN)>>
<<defintrf.spad.dvi (DOC from IN)>>

<<DEGRED.o (O from NRLIB)>>
<<DEGRED.NRLIB (NRLIB from MID)>>
<<DEGRED.spad (SPAD from IN)>>

<<degred.spad (SPAD from IN)>>
<<degred.spad.dvi (DOC from IN)>>

<<ANTISYM.o (O from NRLIB)>>
<<ANTISYM.NRLIB (NRLIB from MID)>>
<<ANTISYM.spad (SPAD from IN)>>

<<DERHAM.o (O from NRLIB)>>
<<DERHAM.NRLIB (NRLIB from MID)>>
<<DERHAM.spad (SPAD from IN)>>

<<EAB.o (O from NRLIB)>>
<<EAB.NRLIB (NRLIB from MID)>>
<<EAB.spad (SPAD from IN)>>

<<LALG-.o (O from NRLIB)>>
<<LALG-.NRLIB (NRLIB from MID)>>
<<LALG.o (O from NRLIB)>>
<<LALG.NRLIB (NRLIB from MID)>>
<<LALG.spad (SPAD from IN)>>

<<derham.spad (SPAD from IN)>>
<<derham.spad.dvi (DOC from IN)>>

<<DHMATRIX.o (O from NRLIB)>>
<<DHMATRIX.NRLIB (NRLIB from MID)>>
<<DHMATRIX.spad (SPAD from IN)>>

<<dhmatrix.spad (SPAD from IN)>>
<<dhmatrix.spad.dvi (DOC from IN)>>

<<FDIV.o (O from NRLIB)>>
<<FDIV.NRLIB (NRLIB from MID)>>
<<FDIV.spad (SPAD from IN)>>

<<FDIV2.o (O from NRLIB)>>
<<FDIV2.NRLIB (NRLIB from MID)>>
<<FDIV2.spad (SPAD from IN)>>

<<FDIVCAT-.o (O from NRLIB)>>
<<FDIVCAT-.NRLIB (NRLIB from MID)>>
<<FDIVCAT.o (O from NRLIB)>>
<<FDIVCAT.NRLIB (NRLIB from MID)>>
<<FDIVCAT.spad (SPAD from IN)>>

<<FRIDEAL.o (O from NRLIB)>>
<<FRIDEAL.NRLIB (NRLIB from MID)>>
<<FRIDEAL.spad (SPAD from IN)>>

<<FRIDEAL2.o (O from NRLIB)>>
<<FRIDEAL2.NRLIB (NRLIB from MID)>>
<<FRIDEAL2.spad (SPAD from IN)>>

<<FRMOD.o (O from NRLIB)>>
<<FRMOD.NRLIB (NRLIB from MID)>>
<<FRMOD.spad (SPAD from IN)>>

<<HELLFDIV.o (O from NRLIB)>>
<<HELLFDIV.NRLIB (NRLIB from MID)>>
<<HELLFDIV.spad (SPAD from IN)>>

<<MHROWRED.o (O from NRLIB)>>
<<MHROWRED.NRLIB (NRLIB from MID)>>
<<MHROWRED.spad (SPAD from IN)>>

<<divisor.spad (SPAD from IN)>>
<<divisor.spad.dvi (DOC from IN)>>

<<DSMP.o (O from NRLIB)>>
<<DSMP.NRLIB (NRLIB from MID)>>
<<DSMP.spad (SPAD from IN)>>

<<DPOLCAT-.o (O from NRLIB)>>
<<DPOLCAT-.NRLIB (NRLIB from MID)>>
<<DPOLCAT.o (O from NRLIB)>>
<<DPOLCAT.NRLIB (NRLIB from MID)>>
<<DPOLCAT.spad (SPAD from IN)>>

<<DVARCAT-.o (O from NRLIB)>>
<<DVARCAT-.NRLIB (NRLIB from MID)>>
<<DVARCAT.o (O from NRLIB)>>
<<DVARCAT.NRLIB (NRLIB from MID)>>
<<DVARCAT.spad (SPAD from IN)>>

<<ODPOL.o (O from NRLIB)>>
<<ODPOL.NRLIB (NRLIB from MID)>>
<<ODPOL.spad (SPAD from IN)>>

<<ODVAR.o (O from NRLIB)>>
<<ODVAR.NRLIB (NRLIB from MID)>>
<<ODVAR.spad (SPAD from IN)>>

<<SDPOL.o (O from NRLIB)>>
<<SDPOL.NRLIB (NRLIB from MID)>>
<<SDPOL.spad (SPAD from IN)>>

<<SDVAR.o (O from NRLIB)>>
<<SDVAR.NRLIB (NRLIB from MID)>>
<<SDVAR.spad (SPAD from IN)>>

<<dpolcat.spad (SPAD from IN)>>
<<dpolcat.spad.dvi (DOC from IN)>>

<<DROPT.o (O from NRLIB)>>
<<DROPT.NRLIB (NRLIB from MID)>>
<<DROPT.spad (SPAD from IN)>>

<<DROPT0.o (O from NRLIB)>>
<<DROPT0.NRLIB (NRLIB from MID)>>
<<DROPT0.spad (SPAD from IN)>>

<<DROPT1.o (O from NRLIB)>>
<<DROPT1.NRLIB (NRLIB from MID)>>
<<DROPT1.spad (SPAD from IN)>>

<<drawopt.spad (SPAD from IN)>>
<<drawopt.spad.dvi (DOC from IN)>>

<<DRAWCX.o (O from NRLIB)>>
<<DRAWCX.NRLIB (NRLIB from MID)>>
<<DRAWCX.spad (SPAD from IN)>>

<<drawpak.spad (SPAD from IN)>>
<<drawpak.spad.dvi (DOC from IN)>>

<<DRAW.o (O from NRLIB)>>
<<DRAW.NRLIB (NRLIB from MID)>>
<<DRAW.spad (SPAD from IN)>>

<<DRAWCFUN.o (O from NRLIB)>>
<<DRAWCFUN.NRLIB (NRLIB from MID)>>
<<DRAWCFUN.spad (SPAD from IN)>>

<<DRAWCURV.o (O from NRLIB)>>
<<DRAWCURV.NRLIB (NRLIB from MID)>>
<<DRAWCURV.spad (SPAD from IN)>>

<<DRAWPT.o (O from NRLIB)>>
<<DRAWPT.NRLIB (NRLIB from MID)>>
<<DRAWPT.spad (SPAD from IN)>>

<<draw.spad (SPAD from IN)>>
<<draw.spad.dvi (DOC from IN)>>

<<NAGE01.o (O from NRLIB)>>
<<NAGE01.NRLIB (NRLIB from MID)>>
<<NAGE01.spad (SPAD from IN)>>

<<e01.spad (SPAD from IN)>>
<<e01.spad.dvi (DOC from IN)>>

<<NAGE02.o (O from NRLIB)>>
<<NAGE02.NRLIB (NRLIB from MID)>>
<<NAGE02.spad (SPAD from IN)>>

<<e02.spad (SPAD from IN)>>
<<e02.spad.dvi (DOC from IN)>>

<<E04AGNT.o (O from NRLIB)>>
<<E04AGNT.NRLIB (NRLIB from MID)>>
<<E04AGNT.spad (SPAD from IN)>>

<<e04agents.spad (SPAD from IN)>>
<<e04agents.spad.dvi (DOC from IN)>>

<<OPTPACK.o (O from NRLIB)>>
<<OPTPACK.NRLIB (NRLIB from MID)>>
<<OPTPACK.spad (SPAD from IN)>>

<<e04Package.spad (SPAD from IN)>>
<<e04Package.spad.dvi (DOC from IN)>>

<<E04DGFA.o (O from NRLIB)>>
<<E04DGFA.NRLIB (NRLIB from MID)>>
<<E04DGFA.spad (SPAD from IN)>>

<<E04FDFA.o (O from NRLIB)>>
<<E04FDFA.NRLIB (NRLIB from MID)>>
<<E04FDFA.spad (SPAD from IN)>>

<<E04GCFA.o (O from NRLIB)>>
<<E04GCFA.NRLIB (NRLIB from MID)>>
<<E04GCFA.spad (SPAD from IN)>>

<<E04JAFA.o (O from NRLIB)>>
<<E04JAFA.NRLIB (NRLIB from MID)>>
<<E04JAFA.spad (SPAD from IN)>>

<<E04MBFA.o (O from NRLIB)>>
<<E04MBFA.NRLIB (NRLIB from MID)>>
<<E04MBFA.spad (SPAD from IN)>>

<<E04NAFA.o (O from NRLIB)>>
<<E04NAFA.NRLIB (NRLIB from MID)>>
<<E04NAFA.spad (SPAD from IN)>>

<<E04UCFA.o (O from NRLIB)>>
<<E04UCFA.NRLIB (NRLIB from MID)>>
<<E04UCFA.spad (SPAD from IN)>>

<<e04routine.spad (SPAD from IN)>>
<<e04routine.spad.dvi (DOC from IN)>>

<<NAGE04.o (O from NRLIB)>>
<<NAGE04.NRLIB (NRLIB from MID)>>
<<NAGE04.spad (SPAD from IN)>>

<<e04.spad (SPAD from IN)>>
<<e04.spad.dvi (DOC from IN)>>

<<CTRIGMNP.o (O from NRLIB)>>
<<CTRIGMNP.NRLIB (NRLIB from MID)>>
<<CTRIGMNP.spad (SPAD from IN)>>

<<EFSTRUC.o (O from NRLIB)>>
<<EFSTRUC.NRLIB (NRLIB from MID)>>
<<EFSTRUC.spad (SPAD from IN)>>

<<ITRIGMNP.o (O from NRLIB)>>
<<ITRIGMNP.NRLIB (NRLIB from MID)>>
<<ITRIGMNP.spad (SPAD from IN)>>

<<SYMFUNC.o (O from NRLIB)>>
<<SYMFUNC.NRLIB (NRLIB from MID)>>
<<SYMFUNC.spad (SPAD from IN)>>

<<TRIGMNIP.o (O from NRLIB)>>
<<TRIGMNIP.NRLIB (NRLIB from MID)>>
<<TRIGMNIP.spad (SPAD from IN)>>

<<TANEXP.o (O from NRLIB)>>
<<TANEXP.NRLIB (NRLIB from MID)>>
<<TANEXP.spad (SPAD from IN)>>

<<efstruc.spad (SPAD from IN)>>
<<efstruc.spad.dvi (DOC from IN)>>

<<EFULS.o (O from NRLIB)>>
<<EFULS.NRLIB (NRLIB from MID)>>
<<EFULS.spad (SPAD from IN)>>

<<efuls.spad (SPAD from IN)>>
<<efuls.spad.dvi (DOC from IN)>>

<<EFUPXS.o (O from NRLIB)>>
<<EFUPXS.NRLIB (NRLIB from MID)>>
<<EFUPXS.spad (SPAD from IN)>>

<<efupxs.spad (SPAD from IN)>>
<<efupxs.spad.dvi (DOC from IN)>>

<<CHARPOL.o (O from NRLIB)>>
<<CHARPOL.NRLIB (NRLIB from MID)>>
<<CHARPOL.spad (SPAD from IN)>>

<<EP.o (O from NRLIB)>>
<<EP.NRLIB (NRLIB from MID)>>
<<EP.spad (SPAD from IN)>>

<<eigen.spad (SPAD from IN)>>
<<eigen.spad.dvi (DOC from IN)>>

<<EF.o (O from NRLIB)>>
<<EF.NRLIB (NRLIB from MID)>>
<<EF.spad (SPAD from IN)>>

<<elemntry.spad (SPAD from IN)>>
<<elemntry.spad.dvi (DOC from IN)>>

<<ELFUTS.o (O from NRLIB)>>
<<ELFUTS.NRLIB (NRLIB from MID)>>
<<ELFUTS.spad (SPAD from IN)>>

<<elfuts.spad (SPAD from IN)>>
<<elfuts.spad.dvi (DOC from IN)>>

<<EVALAB-.o (O from NRLIB)>>
<<EVALAB-.NRLIB (NRLIB from MID)>>
<<EVALAB.o (O from NRLIB)>>
<<EVALAB.NRLIB (NRLIB from MID)>>
<<EVALAB.spad (SPAD from IN)>>

<<IEVALAB-.o (O from NRLIB)>>
<<IEVALAB-.NRLIB (NRLIB from MID)>>
<<IEVALAB.o (O from NRLIB)>>
<<IEVALAB.NRLIB (NRLIB from MID)>>
<<IEVALAB.spad (SPAD from IN)>>

<<equation1.spad (SPAD from IN)>>
<<equation1.spad.dvi (DOC from IN)>>

<<EQ.o (O from NRLIB)>>
<<EQ.NRLIB (NRLIB from MID)>>
<<EQ.spad (SPAD from IN)>>

<<EQ2.o (O from NRLIB)>>
<<EQ2.NRLIB (NRLIB from MID)>>
<<EQ2.spad (SPAD from IN)>>

<<FEVALAB-.o (O from NRLIB)>>
<<FEVALAB-.NRLIB (NRLIB from MID)>>
<<FEVALAB.o (O from NRLIB)>>
<<FEVALAB.NRLIB (NRLIB from MID)>>
<<FEVALAB.spad (SPAD from IN)>>

<<equation2.spad (SPAD from IN)>>
<<equation2.spad.dvi (DOC from IN)>>

<<ERROR.o (O from NRLIB)>>
<<ERROR.NRLIB (NRLIB from MID)>>
<<ERROR.spad (SPAD from IN)>>

<<error.spad (SPAD from IN)>>
<<error.spad.dvi (DOC from IN)>>

<<EXPEXPAN.o (O from NRLIB)>>
<<EXPEXPAN.NRLIB (NRLIB from MID)>>
<<EXPEXPAN.spad (SPAD from IN)>>

<<EXPUPXS.o (O from NRLIB)>>
<<EXPUPXS.NRLIB (NRLIB from MID)>>
<<EXPUPXS.spad (SPAD from IN)>>

<<UPXSSING.o (O from NRLIB)>>
<<UPXSSING.NRLIB (NRLIB from MID)>>
<<UPXSSING.spad (SPAD from IN)>>

<<expexpan.spad (SPAD from IN)>>
<<expexpan.spad.dvi (DOC from IN)>>

<<exposed.lsp (SPAD from IN)>>
<<exposed.lsp.dvi (DOC from IN)>>

<<EXPR2UPS.o (O from NRLIB)>>
<<EXPR2UPS.NRLIB (NRLIB from MID)>>
<<EXPR2UPS.spad (SPAD from IN)>>

<<expr2ups.spad (SPAD from IN)>>
<<expr2ups.spad.dvi (DOC from IN)>>

<<EXPRODE.o (O from NRLIB)>>
<<EXPRODE.NRLIB (NRLIB from MID)>>
<<EXPRODE.spad (SPAD from IN)>>

<<exprode.spad (SPAD from IN)>>
<<exprode.spad.dvi (DOC from IN)>>

<<EXPR.o (O from NRLIB)>>
<<EXPR.NRLIB (NRLIB from MID)>>
<<EXPR.spad (SPAD from IN)>>

<<EXPR2.o (O from NRLIB)>>
<<EXPR2.NRLIB (NRLIB from MID)>>
<<EXPR2.spad (SPAD from IN)>>

<<HACKPI.o (O from NRLIB)>>
<<HACKPI.NRLIB (NRLIB from MID)>>
<<HACKPI.spad (SPAD from IN)>>

<<PAN2EXPR.o (O from NRLIB)>>
<<PAN2EXPR.NRLIB (NRLIB from MID)>>
<<PAN2EXPR.spad (SPAD from IN)>>

<<PICOERCE.o (O from NRLIB)>>
<<PICOERCE.NRLIB (NRLIB from MID)>>
<<PICOERCE.spad (SPAD from IN)>>

<<PMASS.o (O from NRLIB)>>
<<PMASS.NRLIB (NRLIB from MID)>>
<<PMASS.spad (SPAD from IN)>>

<<PMASSFS.o (O from NRLIB)>>
<<PMASSFS.NRLIB (NRLIB from MID)>>
<<PMASSFS.spad (SPAD from IN)>>

<<PMPRED.o (O from NRLIB)>>
<<PMPRED.NRLIB (NRLIB from MID)>>
<<PMPRED.spad (SPAD from IN)>>

<<PMPREDFS.o (O from NRLIB)>>
<<PMPREDFS.NRLIB (NRLIB from MID)>>
<<PMPREDFS.spad (SPAD from IN)>>

<<expr.spad (SPAD from IN)>>
<<expr.spad.dvi (DOC from IN)>>

<<NAGF01.o (O from NRLIB)>>
<<NAGF01.NRLIB (NRLIB from MID)>>
<<NAGF01.spad (SPAD from IN)>>

<<f01.spad (SPAD from IN)>>
<<f01.spad.dvi (DOC from IN)>>

<<NAGF02.o (O from NRLIB)>>
<<NAGF02.NRLIB (NRLIB from MID)>>
<<NAGF02.spad (SPAD from IN)>>

<<f02.spad (SPAD from IN)>>
<<f02.spad.dvi (DOC from IN)>>

<<NAGF04.o (O from NRLIB)>>
<<NAGF04.NRLIB (NRLIB from MID)>>
<<NAGF04.spad (SPAD from IN)>>

<<f04.spad (SPAD from IN)>>
<<f04.spad.dvi (DOC from IN)>>

<<NAGF07.o (O from NRLIB)>>
<<NAGF07.NRLIB (NRLIB from MID)>>
<<NAGF07.spad (SPAD from IN)>>

<<f07.spad (SPAD from IN)>>
<<f07.spad.dvi (DOC from IN)>>

<<FACUTIL.o (O from NRLIB)>>
<<FACUTIL.NRLIB (NRLIB from MID)>>
<<FACUTIL.spad (SPAD from IN)>>

<<PUSHVAR.o (O from NRLIB)>>
<<PUSHVAR.NRLIB (NRLIB from MID)>>
<<PUSHVAR.spad (SPAD from IN)>>

<<facutil.spad (SPAD from IN)>>
<<facutil.spad.dvi (DOC from IN)>>

<<DLP.o (O from NRLIB)>>
<<DLP.NRLIB (NRLIB from MID)>>
<<DLP.spad (SPAD from IN)>>

<<FFIELDC-.o (O from NRLIB)>>
<<FFIELDC-.NRLIB (NRLIB from MID)>>
<<FFIELDC.o (O from NRLIB)>>
<<FFIELDC.NRLIB (NRLIB from MID)>>
<<FFIELDC.spad (SPAD from IN)>>
<<FFIELDC-.o (BOOTSTRAP from MID)>>
<<FFIELDC-.lsp (LISP from IN)>>
<<FFIELDC.o (BOOTSTRAP from MID)>>
<<FFIELDC.lsp (LISP from IN)>>

<<FFSLPE.o (O from NRLIB)>>
<<FFSLPE.NRLIB (NRLIB from MID)>>
<<FFSLPE.spad (SPAD from IN)>>

<<FPC-.o (O from NRLIB)>>
<<FPC-.NRLIB (NRLIB from MID)>>
<<FPC.o (O from NRLIB)>>
<<FPC.NRLIB (NRLIB from MID)>>
<<FPC.spad (SPAD from IN)>>

<<XF-.o (O from NRLIB)>>
<<XF-.NRLIB (NRLIB from MID)>>
<<XF.o (O from NRLIB)>>
<<XF.NRLIB (NRLIB from MID)>>
<<XF.spad (SPAD from IN)>>

<<ffcat.spad (SPAD from IN)>>
<<ffcat.spad.dvi (DOC from IN)>>

<<FFCG.o (O from NRLIB)>>
<<FFCG.NRLIB (NRLIB from MID)>>
<<FFCG.spad (SPAD from IN)>>

<<FFCGP.o (O from NRLIB)>>
<<FFCGP.NRLIB (NRLIB from MID)>>
<<FFCGP.spad (SPAD from IN)>>

<<FFCGX.o (O from NRLIB)>>
<<FFCGX.NRLIB (NRLIB from MID)>>
<<FFCGX.spad (SPAD from IN)>>

<<ffcg.spad (SPAD from IN)>>
<<ffcg.spad.dvi (DOC from IN)>>

<<FFF.o (O from NRLIB)>>
<<FFF.NRLIB (NRLIB from MID)>>
<<FFF.spad (SPAD from IN)>>

<<fff.spad (SPAD from IN)>>
<<fff.spad.dvi (DOC from IN)>>

<<FFHOM.o (O from NRLIB)>>
<<FFHOM.NRLIB (NRLIB from MID)>>
<<FFHOM.spad (SPAD from IN)>>

<<ffhom.spad (SPAD from IN)>>
<<ffhom.spad.dvi (DOC from IN)>>

<<FFNB.o (O from NRLIB)>>
<<FFNB.NRLIB (NRLIB from MID)>>
<<FFNB.spad (SPAD from IN)>>

<<FFNBX.o (O from NRLIB)>>
<<FFNBX.NRLIB (NRLIB from MID)>>
<<FFNBX.spad (SPAD from IN)>>

<<FFNBP.o (O from NRLIB)>>
<<FFNBP.NRLIB (NRLIB from MID)>>
<<FFNBP.spad (SPAD from IN)>>

<<ffnb.spad (SPAD from IN)>>
<<ffnb.spad.dvi (DOC from IN)>>

<<FFPOLY2.o (O from NRLIB)>>
<<FFPOLY2.NRLIB (NRLIB from MID)>>
<<FFPOLY2.spad (SPAD from IN)>>

<<ffpoly2.spad (SPAD from IN)>>
<<ffpoly2.spad.dvi (DOC from IN)>>

<<FFPOLY.o (O from NRLIB)>>
<<FFPOLY.NRLIB (NRLIB from MID)>>
<<FFPOLY.spad (SPAD from IN)>>

<<ffpoly.spad (SPAD from IN)>>
<<ffpoly.spad.dvi (DOC from IN)>>

<<IFF.o (O from NRLIB)>>
<<IFF.NRLIB (NRLIB from MID)>>
<<IFF.spad (SPAD from IN)>>

<<FF.o (O from NRLIB)>>
<<FF.NRLIB (NRLIB from MID)>>
<<FF.spad (SPAD from IN)>>

<<FFP.o (O from NRLIB)>>
<<FFP.NRLIB (NRLIB from MID)>>
<<FFP.spad (SPAD from IN)>>

<<FFX.o (O from NRLIB)>>
<<FFX.NRLIB (NRLIB from MID)>>
<<FFX.spad (SPAD from IN)>>

<<ffp.spad (SPAD from IN)>>
<<ffp.spad.dvi (DOC from IN)>>

<<ffrac.as (SPAD from IN)>>
<<ffrac.as.dvi (DOC from IN)>>

<<IRREDFFX.o (O from NRLIB)>>
<<IRREDFFX.NRLIB (NRLIB from MID)>>
<<IRREDFFX.spad (SPAD from IN)>>

<<ffx.spad (SPAD from IN)>>
<<ffx.spad.dvi (DOC from IN)>>

<<BINFILE.o (O from NRLIB)>>
<<BINFILE.NRLIB (NRLIB from MID)>>
<<BINFILE.spad (SPAD from IN)>>

<<FILE.o (O from NRLIB)>>
<<FILE.NRLIB (NRLIB from MID)>>
<<FILE.spad (SPAD from IN)>>

<<FILECAT.o (O from NRLIB)>>
<<FILECAT.NRLIB (NRLIB from MID)>>
<<FILECAT.spad (SPAD from IN)>>

<<KAFILE.o (O from NRLIB)>>
<<KAFILE.NRLIB (NRLIB from MID)>>
<<KAFILE.spad (SPAD from IN)>>

<<LIB.o (O from NRLIB)>>
<<LIB.NRLIB (NRLIB from MID)>>
<<LIB.spad (SPAD from IN)>>

<<TEXTFILE.o (O from NRLIB)>>
<<TEXTFILE.NRLIB (NRLIB from MID)>>
<<TEXTFILE.spad (SPAD from IN)>>

<<files.spad (SPAD from IN)>>
<<files.spad.dvi (DOC from IN)>>

<<FLOAT.o (O from NRLIB)>>
<<FLOAT.NRLIB (NRLIB from MID)>>
<<FLOAT.spad (SPAD from IN)>>

<<float.spad (SPAD from IN)>>
<<float.spad.dvi (DOC from IN)>>

<<ZMOD.o (O from NRLIB)>>
<<ZMOD.NRLIB (NRLIB from MID)>>
<<ZMOD.spad (SPAD from IN)>>

<<fmod.spad (SPAD from IN)>>
<<fmod.spad.dvi (DOC from IN)>>

<<FNAME.o (O from NRLIB)>>
<<FNAME.NRLIB (NRLIB from MID)>>
<<FNAME.spad (SPAD from IN)>>

<<FNCAT.o (O from NRLIB)>>
<<FNCAT.NRLIB (NRLIB from MID)>>
<<FNCAT.spad (SPAD from IN)>>

<<fname.spad (SPAD from IN)>>
<<fname.spad.dvi (DOC from IN)>>

<<COMM.o (O from NRLIB)>>
<<COMM.NRLIB (NRLIB from MID)>>
<<COMM.spad (SPAD from IN)>>

<<FNLA.o (O from NRLIB)>>
<<FNLA.NRLIB (NRLIB from MID)>>
<<FNLA.spad (SPAD from IN)>>

<<HB.o (O from NRLIB)>>
<<HB.NRLIB (NRLIB from MID)>>
<<HB.spad (SPAD from IN)>>

<<OSI.o (O from NRLIB)>>
<<OSI.NRLIB (NRLIB from MID)>>
<<OSI.spad (SPAD from IN)>>

<<fnla.spad (SPAD from IN)>>
<<fnla.spad.dvi (DOC from IN)>>

<<FORMULA.o (O from NRLIB)>>
<<FORMULA.NRLIB (NRLIB from MID)>>
<<FORMULA.spad (SPAD from IN)>>

<<FORMULA1.o (O from NRLIB)>>
<<FORMULA1.NRLIB (NRLIB from MID)>>
<<FORMULA1.spad (SPAD from IN)>>

<<formula.spad (SPAD from IN)>>
<<formula.spad.dvi (DOC from IN)>>

<<FMTC.o (O from NRLIB)>>
<<FMTC.NRLIB (NRLIB from MID)>>
<<FMTC.spad (SPAD from IN)>>

<<FORTCAT.o (O from NRLIB)>>
<<FORTCAT.NRLIB (NRLIB from MID)>>
<<FORTCAT.spad (SPAD from IN)>>

<<FORTFN.o (O from NRLIB)>>
<<FORTFN.NRLIB (NRLIB from MID)>>
<<FORTFN.spad (SPAD from IN)>>

<<FVC.o (O from NRLIB)>>
<<FVC.NRLIB (NRLIB from MID)>>
<<FVC.spad (SPAD from IN)>>

<<FVFUN.o (O from NRLIB)>>
<<FVFUN.NRLIB (NRLIB from MID)>>
<<FVFUN.spad (SPAD from IN)>>

<<FMC.o (O from NRLIB)>>
<<FMC.NRLIB (NRLIB from MID)>>
<<FMC.spad (SPAD from IN)>>

<<FMFUN.o (O from NRLIB)>>
<<FMFUN.NRLIB (NRLIB from MID)>>
<<FMFUN.spad (SPAD from IN)>>

<<fortcat.spad (SPAD from IN)>>
<<fortcat.spad.dvi (DOC from IN)>>

<<MCMPLX.o (O from NRLIB)>>
<<MCMPLX.NRLIB (NRLIB from MID)>>
<<MCMPLX.spad (SPAD from IN)>>

<<MFLOAT.o (O from NRLIB)>>
<<MFLOAT.NRLIB (NRLIB from MID)>>
<<MFLOAT.spad (SPAD from IN)>>

<<MINT.o (O from NRLIB)>>
<<MINT.NRLIB (NRLIB from MID)>>
<<MINT.spad (SPAD from IN)>>

<<fortmac.spad (SPAD from IN)>>
<<fortmac.spad.dvi (DOC from IN)>>

<<FCPAK1.o (O from NRLIB)>>
<<FCPAK1.NRLIB (NRLIB from MID)>>
<<FCPAK1.spad (SPAD from IN)>>

<<FOP.o (O from NRLIB)>>
<<FOP.NRLIB (NRLIB from MID)>>
<<FOP.spad (SPAD from IN)>>

<<FORT.o (O from NRLIB)>>
<<FORT.NRLIB (NRLIB from MID)>>
<<FORT.spad (SPAD from IN)>>

<<MCALCFN.o (O from NRLIB)>>
<<MCALCFN.NRLIB (NRLIB from MID)>>
<<MCALCFN.spad (SPAD from IN)>>

<<NAGSP.o (O from NRLIB)>>
<<NAGSP.NRLIB (NRLIB from MID)>>
<<NAGSP.spad (SPAD from IN)>>

<<TEMUTL.o (O from NRLIB)>>
<<TEMUTL.NRLIB (NRLIB from MID)>>
<<TEMUTL.spad (SPAD from IN)>>

<<fortpak.spad (SPAD from IN)>>
<<fortpak.spad.dvi (DOC from IN)>>

<<FC.o (O from NRLIB)>>
<<FC.NRLIB (NRLIB from MID)>>
<<FC.spad (SPAD from IN)>>

<<FEXPR.o (O from NRLIB)>>
<<FEXPR.NRLIB (NRLIB from MID)>>
<<FEXPR.spad (SPAD from IN)>>

<<FTEM.o (O from NRLIB)>>
<<FTEM.NRLIB (NRLIB from MID)>>
<<FTEM.spad (SPAD from IN)>>

<<FORTRAN.o (O from NRLIB)>>
<<FORTRAN.NRLIB (NRLIB from MID)>>
<<FORTRAN.spad (SPAD from IN)>>

<<M3D.o (O from NRLIB)>>
<<M3D.NRLIB (NRLIB from MID)>>
<<M3D.spad (SPAD from IN)>>

<<RESULT.o (O from NRLIB)>>
<<RESULT.NRLIB (NRLIB from MID)>>
<<RESULT.spad (SPAD from IN)>>

<<SWITCH.o (O from NRLIB)>>
<<SWITCH.NRLIB (NRLIB from MID)>>
<<SWITCH.spad (SPAD from IN)>>

<<SFORT.o (O from NRLIB)>>
<<SFORT.NRLIB (NRLIB from MID)>>
<<SFORT.spad (SPAD from IN)>>

<<fortran.spad (SPAD from IN)>>
<<fortran.spad.dvi (DOC from IN)>>

<<FST.o (O from NRLIB)>>
<<FST.NRLIB (NRLIB from MID)>>
<<FST.spad (SPAD from IN)>>

<<FT.o (O from NRLIB)>>
<<FT.NRLIB (NRLIB from MID)>>
<<FT.spad (SPAD from IN)>>

<<SYMS.o (O from NRLIB)>>
<<SYMS.NRLIB (NRLIB from MID)>>
<<SYMS.spad (SPAD from IN)>>

<<SYMTAB.o (O from NRLIB)>>
<<SYMTAB.NRLIB (NRLIB from MID)>>
<<SYMTAB.spad (SPAD from IN)>>

<<forttyp.spad (SPAD from IN)>>
<<forttyp.spad.dvi (DOC from IN)>>

<<FCOMP.o (O from NRLIB)>>
<<FCOMP.NRLIB (NRLIB from MID)>>
<<FCOMP.spad (SPAD from IN)>>

<<FSERIES.o (O from NRLIB)>>
<<FSERIES.NRLIB (NRLIB from MID)>>
<<FSERIES.spad (SPAD from IN)>>

<<fourier.spad (SPAD from IN)>>
<<fourier.spad.dvi (DOC from IN)>>

<<FPARFRAC.o (O from NRLIB)>>
<<FPARFRAC.NRLIB (NRLIB from MID)>>
<<FPARFRAC.spad (SPAD from IN)>>

<<fparfrac.spad (SPAD from IN)>>
<<fparfrac.spad.dvi (DOC from IN)>>

<<FRAC.o (O from NRLIB)>>
<<FRAC.NRLIB (NRLIB from MID)>>
<<FRAC.spad (SPAD from IN)>>

<<FRAC2.o (O from NRLIB)>>
<<FRAC2.NRLIB (NRLIB from MID)>>
<<FRAC2.spad (SPAD from IN)>>

<<LA.o (O from NRLIB)>>
<<LA.NRLIB (NRLIB from MID)>>
<<LA.spad (SPAD from IN)>>

<<LO.o (O from NRLIB)>>
<<LO.NRLIB (NRLIB from MID)>>
<<LO.spad (SPAD from IN)>>

<<LPEFRAC.o (O from NRLIB)>>
<<LPEFRAC.NRLIB (NRLIB from MID)>>
<<LPEFRAC.spad (SPAD from IN)>>

<<QFCAT-.o (O from NRLIB)>>
<<QFCAT-.NRLIB (NRLIB from MID)>>
<<QFCAT.o (O from NRLIB)>>
<<QFCAT.NRLIB (NRLIB from MID)>>
<<QFCAT.spad (SPAD from IN)>>
<<QFCAT-.o (BOOTSTRAP from MID)>>
<<QFCAT-.lsp (LISP from IN)>>
<<QFCAT.o (BOOTSTRAP from MID)>>
<<QFCAT.lsp (LISP from IN)>>

<<QFCAT2.o (O from NRLIB)>>
<<QFCAT2.NRLIB (NRLIB from MID)>>
<<QFCAT2.spad (SPAD from IN)>>

<<fraction.spad (SPAD from IN)>>
<<fraction.spad.dvi (DOC from IN)>>

<<FAGROUP.o (O from NRLIB)>>
<<FAGROUP.NRLIB (NRLIB from MID)>>
<<FAGROUP.spad (SPAD from IN)>>

<<FAMONC.o (O from NRLIB)>>
<<FAMONC.NRLIB (NRLIB from MID)>>
<<FAMONC.spad (SPAD from IN)>>

<<FAMONOID.o (O from NRLIB)>>
<<FAMONOID.NRLIB (NRLIB from MID)>>
<<FAMONOID.spad (SPAD from IN)>>

<<FGROUP.o (O from NRLIB)>>
<<FGROUP.NRLIB (NRLIB from MID)>>
<<FGROUP.spad (SPAD from IN)>>

<<FMONOID.o (O from NRLIB)>>
<<FMONOID.NRLIB (NRLIB from MID)>>
<<FMONOID.spad (SPAD from IN)>>

<<IFAMON.o (O from NRLIB)>>
<<IFAMON.NRLIB (NRLIB from MID)>>
<<IFAMON.spad (SPAD from IN)>>

<<LMOPS.o (O from NRLIB)>>
<<LMOPS.NRLIB (NRLIB from MID)>>
<<LMOPS.spad (SPAD from IN)>>

<<free.spad (SPAD from IN)>>
<<free.spad.dvi (DOC from IN)>>

<<FR.o (O from NRLIB)>>
<<FR.NRLIB (NRLIB from MID)>>
<<FR.spad (SPAD from IN)>>

<<FR2.o (O from NRLIB)>>
<<FR2.NRLIB (NRLIB from MID)>>
<<FR2.spad (SPAD from IN)>>

<<FRUTIL.o (O from NRLIB)>>
<<FRUTIL.NRLIB (NRLIB from MID)>>
<<FRUTIL.spad (SPAD from IN)>>

<<fr.spad (SPAD from IN)>>
<<fr.spad.dvi (DOC from IN)>>

<<FS2EXPXP.o (O from NRLIB)>>
<<FS2EXPXP.NRLIB (NRLIB from MID)>>
<<FS2EXPXP.spad (SPAD from IN)>>

<<fs2expxp.spad (SPAD from IN)>>
<<fs2expxp.spad.dvi (DOC from IN)>>

<<FS2UPS.o (O from NRLIB)>>
<<FS2UPS.NRLIB (NRLIB from MID)>>
<<FS2UPS.spad (SPAD from IN)>>

<<fs2ups.spad (SPAD from IN)>>
<<fs2ups.spad.dvi (DOC from IN)>>

<<ES-.o (O from NRLIB)>>
<<ES-.NRLIB (NRLIB from MID)>>
<<ES.o (O from NRLIB)>>
<<ES.NRLIB (NRLIB from MID)>>
<<ES.spad (SPAD from IN)>>
<<ES-.o (BOOTSTRAP from MID)>>
<<ES-.lsp (LISP from IN)>>
<<ES.o (BOOTSTRAP from MID)>>
<<ES.lsp (LISP from IN)>>

<<ES1.o (O from NRLIB)>>
<<ES1.NRLIB (NRLIB from MID)>>
<<ES1.spad (SPAD from IN)>>

<<ES2.o (O from NRLIB)>>
<<ES2.NRLIB (NRLIB from MID)>>
<<ES2.spad (SPAD from IN)>>

<<FS-.o (O from NRLIB)>>
<<FS-.NRLIB (NRLIB from MID)>>
<<FS.o (O from NRLIB)>>
<<FS.NRLIB (NRLIB from MID)>>
<<FS.spad (SPAD from IN)>>

<<FS2.o (O from NRLIB)>>
<<FS2.NRLIB (NRLIB from MID)>>
<<FS2.spad (SPAD from IN)>>

<<fspace.spad (SPAD from IN)>>
<<fspace.spad.dvi (DOC from IN)>>

<<FSUPFACT.o (O from NRLIB)>>
<<FSUPFACT.NRLIB (NRLIB from MID)>>
<<FSUPFACT.spad (SPAD from IN)>>

<<funcpkgs.spad (SPAD from IN)>>
<<funcpkgs.spad.dvi (DOC from IN)>>

<<BFUNCT.o (O from NRLIB)>>
<<BFUNCT.NRLIB (NRLIB from MID)>>
<<BFUNCT.spad (SPAD from IN)>>

<<functions.spad (SPAD from IN)>>
<<functions.spad.dvi (DOC from IN)>>

<<GALFACT.o (O from NRLIB)>>
<<GALFACT.NRLIB (NRLIB from MID)>>
<<GALFACT.spad (SPAD from IN)>>

<<galfact.spad (SPAD from IN)>>
<<galfact.spad.dvi (DOC from IN)>>

<<GALFACTU.o (O from NRLIB)>>
<<GALFACTU.NRLIB (NRLIB from MID)>>
<<GALFACTU.spad (SPAD from IN)>>

<<galfactu.spad (SPAD from IN)>>
<<galfactu.spad.dvi (DOC from IN)>>

<<GALPOLYU.o (O from NRLIB)>>
<<GALPOLYU.NRLIB (NRLIB from MID)>>
<<GALPOLYU.spad (SPAD from IN)>>

<<galpolyu.spad (SPAD from IN)>>
<<galpolyu.spad.dvi (DOC from IN)>>

<<GALUTIL.o (O from NRLIB)>>
<<GALUTIL.NRLIB (NRLIB from MID)>>
<<GALUTIL.spad (SPAD from IN)>>

<<galutil.spad (SPAD from IN)>>
<<galutil.spad.dvi (DOC from IN)>>

<<GAUSSFAC.o (O from NRLIB)>>
<<GAUSSFAC.NRLIB (NRLIB from MID)>>
<<GAUSSFAC.spad (SPAD from IN)>>

<<gaussfac.spad (SPAD from IN)>>
<<gaussfac.spad.dvi (DOC from IN)>>

<<CINTSLPE.o (O from NRLIB)>>
<<CINTSLPE.NRLIB (NRLIB from MID)>>
<<CINTSLPE.spad (SPAD from IN)>>

<<COMPCAT-.o (O from NRLIB)>>
<<COMPCAT-.NRLIB (NRLIB from MID)>>
<<COMPCAT.o (O from NRLIB)>>
<<COMPCAT.NRLIB (NRLIB from MID)>>
<<COMPCAT.spad (SPAD from IN)>>

<<COMPFACT.o (O from NRLIB)>>
<<COMPFACT.NRLIB (NRLIB from MID)>>
<<COMPFACT.spad (SPAD from IN)>>

<<COMPLEX.o (O from NRLIB)>>
<<COMPLEX.NRLIB (NRLIB from MID)>>
<<COMPLEX.spad (SPAD from IN)>>

<<COMPLEX2.o (O from NRLIB)>>
<<COMPLEX2.NRLIB (NRLIB from MID)>>
<<COMPLEX2.spad (SPAD from IN)>>

<<COMPLPAT.o (O from NRLIB)>>
<<COMPLPAT.NRLIB (NRLIB from MID)>>
<<COMPLPAT.spad (SPAD from IN)>>

<<CPMATCH.o (O from NRLIB)>>
<<CPMATCH.NRLIB (NRLIB from MID)>>
<<CPMATCH.spad (SPAD from IN)>>

<<gaussian.spad (SPAD from IN)>>
<<gaussian.spad.dvi (DOC from IN)>>

<<GBEUCLID.o (O from NRLIB)>>
<<GBEUCLID.NRLIB (NRLIB from MID)>>
<<GBEUCLID.spad (SPAD from IN)>>

<<gbeuclid.spad (SPAD from IN)>>
<<gbeuclid.spad.dvi (DOC from IN)>>

<<GBINTERN.o (O from NRLIB)>>
<<GBINTERN.NRLIB (NRLIB from MID)>>
<<GBINTERN.spad (SPAD from IN)>>

<<gbintern.spad (SPAD from IN)>>
<<gbintern.spad.dvi (DOC from IN)>>

<<GB.o (O from NRLIB)>>
<<GB.NRLIB (NRLIB from MID)>>
<<GB.spad (SPAD from IN)>>

<<gb.spad (SPAD from IN)>>
<<gb.spad.dvi (DOC from IN)>>

<<HDP.o (O from NRLIB)>>
<<HDP.NRLIB (NRLIB from MID)>>
<<HDP.spad (SPAD from IN)>>

<<ODP.o (O from NRLIB)>>
<<ODP.NRLIB (NRLIB from MID)>>
<<ODP.spad (SPAD from IN)>>

<<ORDFUNS.o (O from NRLIB)>>
<<ORDFUNS.NRLIB (NRLIB from MID)>>
<<ORDFUNS.spad (SPAD from IN)>>

<<SHDP.o (O from NRLIB)>>
<<SHDP.NRLIB (NRLIB from MID)>>
<<SHDP.spad (SPAD from IN)>>

<<gdirprod.spad (SPAD from IN)>>
<<gdirprod.spad.dvi (DOC from IN)>>

<<DMP.o (O from NRLIB)>>
<<DMP.NRLIB (NRLIB from MID)>>
<<DMP.spad (SPAD from IN)>>

<<GDMP.o (O from NRLIB)>>
<<GDMP.NRLIB (NRLIB from MID)>>
<<GDMP.spad (SPAD from IN)>>

<<HDMP.o (O from NRLIB)>>
<<HDMP.NRLIB (NRLIB from MID)>>
<<HDMP.spad (SPAD from IN)>>

<<gdpoly.spad (SPAD from IN)>>
<<gdpoly.spad.dvi (DOC from IN)>>

<<GENEEZ.o (O from NRLIB)>>
<<GENEEZ.NRLIB (NRLIB from MID)>>
<<GENEEZ.spad (SPAD from IN)>>

<<geneez.spad (SPAD from IN)>>
<<geneez.spad.dvi (DOC from IN)>>

<<CVMP.o (O from NRLIB)>>
<<CVMP.NRLIB (NRLIB from MID)>>
<<CVMP.spad (SPAD from IN)>>

<<GCNAALG.o (O from NRLIB)>>
<<GCNAALG.NRLIB (NRLIB from MID)>>
<<GCNAALG.spad (SPAD from IN)>>

<<generic.spad (SPAD from IN)>>
<<generic.spad.dvi (DOC from IN)>>

<<GENUFACT.o (O from NRLIB)>>
<<GENUFACT.NRLIB (NRLIB from MID)>>
<<GENUFACT.spad (SPAD from IN)>>

<<genufact.spad (SPAD from IN)>>
<<genufact.spad.dvi (DOC from IN)>>

<<GENUPS.o (O from NRLIB)>>
<<GENUPS.NRLIB (NRLIB from MID)>>
<<GENUPS.spad (SPAD from IN)>>

<<genups.spad (SPAD from IN)>>
<<genups.spad.dvi (DOC from IN)>>

<<GHENSEL.o (O from NRLIB)>>
<<GHENSEL.NRLIB (NRLIB from MID)>>
<<GHENSEL.spad (SPAD from IN)>>

<<ghensel.spad (SPAD from IN)>>
<<ghensel.spad.dvi (DOC from IN)>>

<<GENPGCD.o (O from NRLIB)>>
<<GENPGCD.NRLIB (NRLIB from MID)>>
<<GENPGCD.spad (SPAD from IN)>>

<<gpgcd.spad (SPAD from IN)>>
<<gpgcd.spad.dvi (DOC from IN)>>

<<LAUPOL.o (O from NRLIB)>>
<<LAUPOL.NRLIB (NRLIB from MID)>>
<<LAUPOL.spad (SPAD from IN)>>

<<gpol.spad (SPAD from IN)>>
<<gpol.spad.dvi (DOC from IN)>>

<<GRDEF.o (O from NRLIB)>>
<<GRDEF.NRLIB (NRLIB from MID)>>
<<GRDEF.spad (SPAD from IN)>>

<<grdef.spad (SPAD from IN)>>
<<grdef.spad.dvi (DOC from IN)>>

<<GBF.o (O from NRLIB)>>
<<GBF.NRLIB (NRLIB from MID)>>
<<GBF.spad (SPAD from IN)>>

<<groebf.spad (SPAD from IN)>>
<<groebf.spad.dvi (DOC from IN)>>

<<GROEBSOL.o (O from NRLIB)>>
<<GROEBSOL.NRLIB (NRLIB from MID)>>
<<GROEBSOL.spad (SPAD from IN)>>

<<groebsol.spad (SPAD from IN)>>
<<groebsol.spad.dvi (DOC from IN)>>

<<GSERIES.o (O from NRLIB)>>
<<GSERIES.NRLIB (NRLIB from MID)>>
<<GSERIES.spad (SPAD from IN)>>

<<gseries.spad (SPAD from IN)>>
<<gseries.spad.dvi (DOC from IN)>>

<<herm.as (SPAD from IN)>>
<<herm.as.dvi (DOC from IN)>>

<<IDEAL.o (O from NRLIB)>>
<<IDEAL.NRLIB (NRLIB from MID)>>
<<IDEAL.spad (SPAD from IN)>>

<<ideal.spad (SPAD from IN)>>
<<ideal.spad.dvi (DOC from IN)>>

<<IDECOMP.o (O from NRLIB)>>
<<IDECOMP.NRLIB (NRLIB from MID)>>
<<IDECOMP.spad (SPAD from IN)>>

<<idecomp.spad (SPAD from IN)>>
<<idecomp.spad.dvi (DOC from IN)>>

<<IDPAG.o (O from NRLIB)>>
<<IDPAG.NRLIB (NRLIB from MID)>>
<<IDPAG.spad (SPAD from IN)>>

<<IDPAM.o (O from NRLIB)>>
<<IDPAM.NRLIB (NRLIB from MID)>>
<<IDPAM.spad (SPAD from IN)>>

<<IDPC.o (O from NRLIB)>>
<<IDPC.NRLIB (NRLIB from MID)>>
<<IDPC.spad (SPAD from IN)>>

<<IDPO.o (O from NRLIB)>>
<<IDPO.NRLIB (NRLIB from MID)>>
<<IDPO.spad (SPAD from IN)>>

<<IDPOAM.o (O from NRLIB)>>
<<IDPOAM.NRLIB (NRLIB from MID)>>
<<IDPOAM.spad (SPAD from IN)>>

<<IDPOAMS.o (O from NRLIB)>>
<<IDPOAMS.NRLIB (NRLIB from MID)>>
<<IDPOAMS.spad (SPAD from IN)>>

<<indexedp.spad (SPAD from IN)>>
<<indexedp.spad.dvi (DOC from IN)>>

<<INFPROD0.o (O from NRLIB)>>
<<INFPROD0.NRLIB (NRLIB from MID)>>
<<INFPROD0.spad (SPAD from IN)>>

<<INPRODFF.o (O from NRLIB)>>
<<INPRODFF.NRLIB (NRLIB from MID)>>
<<INPRODFF.spad (SPAD from IN)>>

<<INPRODPF.o (O from NRLIB)>>
<<INPRODPF.NRLIB (NRLIB from MID)>>
<<INPRODPF.spad (SPAD from IN)>>

<<STINPROD.o (O from NRLIB)>>
<<STINPROD.NRLIB (NRLIB from MID)>>
<<STINPROD.spad (SPAD from IN)>>

<<infprod.spad (SPAD from IN)>>
<<infprod.spad.dvi (DOC from IN)>>

<<INTAF.o (O from NRLIB)>>
<<INTAF.NRLIB (NRLIB from MID)>>
<<INTAF.spad (SPAD from IN)>>

<<INTG0.o (O from NRLIB)>>
<<INTG0.NRLIB (NRLIB from MID)>>
<<INTG0.spad (SPAD from IN)>>

<<INTPAF.o (O from NRLIB)>>
<<INTPAF.NRLIB (NRLIB from MID)>>
<<INTPAF.spad (SPAD from IN)>>

<<intaf.spad (SPAD from IN)>>
<<intaf.spad.dvi (DOC from IN)>>

<<DBLRESP.o (O from NRLIB)>>
<<DBLRESP.NRLIB (NRLIB from MID)>>
<<DBLRESP.spad (SPAD from IN)>>

<<INTALG.o (O from NRLIB)>>
<<INTALG.NRLIB (NRLIB from MID)>>
<<INTALG.spad (SPAD from IN)>>

<<INTHERAL.o (O from NRLIB)>>
<<INTHERAL.NRLIB (NRLIB from MID)>>
<<INTHERAL.spad (SPAD from IN)>>

<<intalg.spad (SPAD from IN)>>
<<intalg.spad.dvi (DOC from IN)>>

<<IR.o (O from NRLIB)>>
<<IR.NRLIB (NRLIB from MID)>>
<<IR.spad (SPAD from IN)>>

<<IR2.o (O from NRLIB)>>
<<IR2.NRLIB (NRLIB from MID)>>
<<IR2.spad (SPAD from IN)>>

<<intaux.spad (SPAD from IN)>>
<<intaux.spad.dvi (DOC from IN)>>

<<IBATOOL.o (O from NRLIB)>>
<<IBATOOL.NRLIB (NRLIB from MID)>>
<<IBATOOL.spad (SPAD from IN)>>

<<FFINTBAS.o (O from NRLIB)>>
<<FFINTBAS.NRLIB (NRLIB from MID)>>
<<FFINTBAS.spad (SPAD from IN)>>

<<NFINTBAS.o (O from NRLIB)>>
<<NFINTBAS.NRLIB (NRLIB from MID)>>
<<NFINTBAS.spad (SPAD from IN)>>

<<TRIMAT.o (O from NRLIB)>>
<<TRIMAT.NRLIB (NRLIB from MID)>>
<<TRIMAT.spad (SPAD from IN)>>

<<WFFINTBS.o (O from NRLIB)>>
<<WFFINTBS.NRLIB (NRLIB from MID)>>
<<WFFINTBS.spad (SPAD from IN)>>

<<intclos.spad (SPAD from IN)>>
<<intclos.spad.dvi (DOC from IN)>>

<<INTEF.o (O from NRLIB)>>
<<INTEF.NRLIB (NRLIB from MID)>>
<<INTEF.spad (SPAD from IN)>>

<<intef.spad (SPAD from IN)>>
<<intef.spad.dvi (DOC from IN)>>

<<INT.o (O from NRLIB)>>
<<INT.NRLIB (NRLIB from MID)>>
<<INT.spad (SPAD from IN)>>
<<INT.o (BOOTSTRAP from MID)>>
<<INT.lsp (LISP from IN)>>

<<INTSLPE.o (O from NRLIB)>>
<<INTSLPE.NRLIB (NRLIB from MID)>>
<<INTSLPE.spad (SPAD from IN)>>

<<NNI.o (O from NRLIB)>>
<<NNI.NRLIB (NRLIB from MID)>>
<<NNI.spad (SPAD from IN)>>
<<NNI.o (BOOTSTRAP from MID)>>
<<NNI.lsp (LISP from IN)>>

<<PI.o (O from NRLIB)>>
<<PI.NRLIB (NRLIB from MID)>>
<<PI.spad (SPAD from IN)>>
<<PI.o (BOOTSTRAP from MID)>>
<<PI.lsp (LISP from IN)>>

<<ROMAN.o (O from NRLIB)>>
<<ROMAN.NRLIB (NRLIB from MID)>>
<<ROMAN.spad (SPAD from IN)>>

<<integer.spad (SPAD from IN)>>
<<integer.spad.dvi (DOC from IN)>>

<<FSCINT.o (O from NRLIB)>>
<<FSCINT.NRLIB (NRLIB from MID)>>
<<FSCINT.spad (SPAD from IN)>>

<<FSINT.o (O from NRLIB)>>
<<FSINT.NRLIB (NRLIB from MID)>>
<<FSINT.spad (SPAD from IN)>>

<<integrat.spad (SPAD from IN)>>
<<integrat.spad.dvi (DOC from IN)>>

<<INTERP.EXPOSED (SPAD from IN)>>
<<INTERP.EXPOSED.dvi (DOC from IN)>>

<<interval.as (SPAD from IN)>>
<<interval.as.dvi (DOC from IN)>>

<<INTCAT.o (O from NRLIB)>>
<<INTCAT.NRLIB (NRLIB from MID)>>
<<INTCAT.spad (SPAD from IN)>>

<<INTRVL.o (O from NRLIB)>>
<<INTRVL.NRLIB (NRLIB from MID)>>
<<INTRVL.spad (SPAD from IN)>>

<<interval.spad (SPAD from IN)>>
<<interval.spad.dvi (DOC from IN)>>

<<INTFACT.o (O from NRLIB)>>
<<INTFACT.NRLIB (NRLIB from MID)>>
<<INTFACT.spad (SPAD from IN)>>

<<IROOT.o (O from NRLIB)>>
<<IROOT.NRLIB (NRLIB from MID)>>
<<IROOT.spad (SPAD from IN)>>

<<PRIMES.o (O from NRLIB)>>
<<PRIMES.NRLIB (NRLIB from MID)>>
<<PRIMES.spad (SPAD from IN)>>

<<intfact.spad (SPAD from IN)>>
<<intfact.spad.dvi (DOC from IN)>>

<<INTPM.o (O from NRLIB)>>
<<INTPM.NRLIB (NRLIB from MID)>>
<<INTPM.spad (SPAD from IN)>>

<<intpm.spad (SPAD from IN)>>
<<intpm.spad.dvi (DOC from IN)>>

<<INTHERTR.o (O from NRLIB)>>
<<INTHERTR.NRLIB (NRLIB from MID)>>
<<INTHERTR.spad (SPAD from IN)>>

<<INTRAT.o (O from NRLIB)>>
<<INTRAT.NRLIB (NRLIB from MID)>>
<<INTRAT.spad (SPAD from IN)>>

<<INTRF.o (O from NRLIB)>>
<<INTRF.NRLIB (NRLIB from MID)>>
<<INTRF.spad (SPAD from IN)>>

<<INTTR.o (O from NRLIB)>>
<<INTTR.NRLIB (NRLIB from MID)>>
<<INTTR.spad (SPAD from IN)>>

<<MONOTOOL.o (O from NRLIB)>>
<<MONOTOOL.NRLIB (NRLIB from MID)>>
<<MONOTOOL.spad (SPAD from IN)>>

<<SUBRESP.o (O from NRLIB)>>
<<SUBRESP.NRLIB (NRLIB from MID)>>
<<SUBRESP.spad (SPAD from IN)>>

<<intrf.spad (SPAD from IN)>>
<<intrf.spad.dvi (DOC from IN)>>

<<invnode.as (SPAD from IN)>>
<<invnode.as.dvi (DOC from IN)>>

<<invrender.as (SPAD from IN)>>
<<invrender.as.dvi (DOC from IN)>>

<<invtypes.as (SPAD from IN)>>
<<invtypes.as.dvi (DOC from IN)>>

<<invutils.as (SPAD from IN)>>
<<invutils.as.dvi (DOC from IN)>>

<<IR2F.o (O from NRLIB)>>
<<IR2F.NRLIB (NRLIB from MID)>>
<<IR2F.spad (SPAD from IN)>>

<<IRRF2F.o (O from NRLIB)>>
<<IRRF2F.NRLIB (NRLIB from MID)>>
<<IRRF2F.spad (SPAD from IN)>>

<<irexpand.spad (SPAD from IN)>>
<<irexpand.spad.dvi (DOC from IN)>>

<<IRSN.o (O from NRLIB)>>
<<IRSN.NRLIB (NRLIB from MID)>>
<<IRSN.spad (SPAD from IN)>>

<<irsn.spad (SPAD from IN)>>
<<irsn.spad.dvi (DOC from IN)>>

<<ITFUN2.o (O from NRLIB)>>
<<ITFUN2.NRLIB (NRLIB from MID)>>
<<ITFUN2.spad (SPAD from IN)>>

<<ITFUN3.o (O from NRLIB)>>
<<ITFUN3.NRLIB (NRLIB from MID)>>
<<ITFUN3.spad (SPAD from IN)>>

<<ITUPLE.o (O from NRLIB)>>
<<ITUPLE.NRLIB (NRLIB from MID)>>
<<ITUPLE.spad (SPAD from IN)>>

<<ituple.spad (SPAD from IN)>>
<<ituple.spad.dvi (DOC from IN)>>

<<iviews.as (SPAD from IN)>>
<<iviews.as.dvi (DOC from IN)>>

<<CACHSET.o (O from NRLIB)>>
<<CACHSET.NRLIB (NRLIB from MID)>>
<<CACHSET.spad (SPAD from IN)>>

<<KERNEL.o (O from NRLIB)>>
<<KERNEL.NRLIB (NRLIB from MID)>>
<<KERNEL.spad (SPAD from IN)>>

<<KERNEL2.o (O from NRLIB)>>
<<KERNEL2.NRLIB (NRLIB from MID)>>
<<KERNEL2.spad (SPAD from IN)>>

<<MKCHSET.o (O from NRLIB)>>
<<MKCHSET.NRLIB (NRLIB from MID)>>
<<MKCHSET.spad (SPAD from IN)>>

<<SCACHE.o (O from NRLIB)>>
<<SCACHE.NRLIB (NRLIB from MID)>>
<<SCACHE.spad (SPAD from IN)>>

<<kl.spad (SPAD from IN)>>
<<kl.spad.dvi (DOC from IN)>>

<<KOVACIC.o (O from NRLIB)>>
<<KOVACIC.NRLIB (NRLIB from MID)>>
<<KOVACIC.spad (SPAD from IN)>>

<<kovacic.spad (SPAD from IN)>>
<<kovacic.spad.dvi (DOC from IN)>>

<<INVLAPLA.o (O from NRLIB)>>
<<INVLAPLA.NRLIB (NRLIB from MID)>>
<<INVLAPLA.spad (SPAD from IN)>>

<<LAPLACE.o (O from NRLIB)>>
<<LAPLACE.NRLIB (NRLIB from MID)>>
<<LAPLACE.spad (SPAD from IN)>>

<<laplace.spad (SPAD from IN)>>
<<laplace.spad.dvi (DOC from IN)>>

<<ULS.o (O from NRLIB)>>
<<ULS.NRLIB (NRLIB from MID)>>
<<ULS.spad (SPAD from IN)>>

<<ULSCCAT-.o (O from NRLIB)>>
<<ULSCCAT-.NRLIB (NRLIB from MID)>>
<<ULSCCAT.o (O from NRLIB)>>
<<ULSCCAT.NRLIB (NRLIB from MID)>>
<<ULSCCAT.spad (SPAD from IN)>>

<<ULSCONS.o (O from NRLIB)>>
<<ULSCONS.NRLIB (NRLIB from MID)>>
<<ULSCONS.spad (SPAD from IN)>>

<<ULS2.o (O from NRLIB)>>
<<ULS2.NRLIB (NRLIB from MID)>>
<<ULS2.spad (SPAD from IN)>>

<<laurent.spad (SPAD from IN)>>
<<laurent.spad.dvi (DOC from IN)>>

<<LEADCDET.o (O from NRLIB)>>
<<LEADCDET.NRLIB (NRLIB from MID)>>
<<LEADCDET.spad (SPAD from IN)>>

<<leadcdet.spad (SPAD from IN)>>
<<leadcdet.spad.dvi (DOC from IN)>>

<<JORDAN.o (O from NRLIB)>>
<<JORDAN.NRLIB (NRLIB from MID)>>
<<JORDAN.spad (SPAD from IN)>>

<<LIE.o (O from NRLIB)>>
<<LIE.NRLIB (NRLIB from MID)>>
<<LIE.spad (SPAD from IN)>>

<<LSQM.o (O from NRLIB)>>
<<LSQM.NRLIB (NRLIB from MID)>>
<<LSQM.spad (SPAD from IN)>>

<<lie.spad (SPAD from IN)>>
<<lie.spad.dvi (DOC from IN)>>

<<LIMITPS.o (O from NRLIB)>>
<<LIMITPS.NRLIB (NRLIB from MID)>>
<<LIMITPS.spad (SPAD from IN)>>

<<limitps.spad (SPAD from IN)>>
<<limitps.spad.dvi (DOC from IN)>>

<<LINDEP.o (O from NRLIB)>>
<<LINDEP.NRLIB (NRLIB from MID)>>
<<LINDEP.spad (SPAD from IN)>>

<<ZLINDEP.o (O from NRLIB)>>
<<ZLINDEP.NRLIB (NRLIB from MID)>>
<<ZLINDEP.spad (SPAD from IN)>>

<<lindep.spad (SPAD from IN)>>
<<lindep.spad.dvi (DOC from IN)>>

<<LGROBP.o (O from NRLIB)>>
<<LGROBP.NRLIB (NRLIB from MID)>>
<<LGROBP.spad (SPAD from IN)>>

<<lingrob.spad (SPAD from IN)>>
<<lingrob.spad.dvi (DOC from IN)>>

<<LF.o (O from NRLIB)>>
<<LF.NRLIB (NRLIB from MID)>>
<<LF.spad (SPAD from IN)>>

<<liouv.spad (SPAD from IN)>>
<<liouv.spad.dvi (DOC from IN)>>

<<HEUGCD.o (O from NRLIB)>>
<<HEUGCD.NRLIB (NRLIB from MID)>>
<<HEUGCD.spad (SPAD from IN)>>

<<listgcd.spad (SPAD from IN)>>
<<listgcd.spad.dvi (DOC from IN)>>

<<ILIST.o (O from NRLIB)>>
<<ILIST.NRLIB (NRLIB from MID)>>
<<ILIST.spad (SPAD from IN)>>
<<ILIST.o (BOOTSTRAP from MID)>>
<<ILIST.lsp (LISP from IN)>>

<<LIST.o (O from NRLIB)>>
<<LIST.NRLIB (NRLIB from MID)>>
<<LIST.spad (SPAD from IN)>>
<<LIST.o (BOOTSTRAP from MID)>>
<<LIST.lsp (LISP from IN)>>

<<ALIST.o (O from NRLIB)>>
<<ALIST.NRLIB (NRLIB from MID)>>
<<ALIST.spad (SPAD from IN)>>

<<LIST2.o (O from NRLIB)>>
<<LIST2.NRLIB (NRLIB from MID)>>
<<LIST2.spad (SPAD from IN)>>

<<LIST2MAP.o (O from NRLIB)>>
<<LIST2MAP.NRLIB (NRLIB from MID)>>
<<LIST2MAP.spad (SPAD from IN)>>

<<LIST3.o (O from NRLIB)>>
<<LIST3.NRLIB (NRLIB from MID)>>
<<LIST3.spad (SPAD from IN)>>

<<list.spad (SPAD from IN)>>
<<list.spad.dvi (DOC from IN)>>

<<LMDICT.o (O from NRLIB)>>
<<LMDICT.NRLIB (NRLIB from MID)>>
<<LMDICT.spad (SPAD from IN)>>

<<lmdict.spad (SPAD from IN)>>
<<lmdict.spad.dvi (DOC from IN)>>

<<ASSOCEQ.o (O from NRLIB)>>
<<ASSOCEQ.NRLIB (NRLIB from MID)>>
<<ASSOCEQ.spad (SPAD from IN)>>

<<LODOF.o (O from NRLIB)>>
<<LODOF.NRLIB (NRLIB from MID)>>
<<LODOF.spad (SPAD from IN)>>

<<PREASSOC.o (O from NRLIB)>>
<<PREASSOC.NRLIB (NRLIB from MID)>>
<<PREASSOC.spad (SPAD from IN)>>

<<SETMN.o (O from NRLIB)>>
<<SETMN.NRLIB (NRLIB from MID)>>
<<SETMN.spad (SPAD from IN)>>

<<lodof.spad (SPAD from IN)>>
<<lodof.spad.dvi (DOC from IN)>>

<<DPMO.o (O from NRLIB)>>
<<DPMO.NRLIB (NRLIB from MID)>>
<<DPMO.spad (SPAD from IN)>>

<<DPMM.o (O from NRLIB)>>
<<DPMM.NRLIB (NRLIB from MID)>>
<<DPMM.spad (SPAD from IN)>>

<<MLO.o (O from NRLIB)>>
<<MLO.NRLIB (NRLIB from MID)>>
<<MLO.spad (SPAD from IN)>>

<<NCODIV.o (O from NRLIB)>>
<<NCODIV.NRLIB (NRLIB from MID)>>
<<NCODIV.spad (SPAD from IN)>>

<<ODR.o (O from NRLIB)>>
<<ODR.NRLIB (NRLIB from MID)>>
<<ODR.spad (SPAD from IN)>>

<<OMLO.o (O from NRLIB)>>
<<OMLO.NRLIB (NRLIB from MID)>>
<<OMLO.spad (SPAD from IN)>>

<<lodop.spad (SPAD from IN)>>
<<lodop.spad.dvi (DOC from IN)>>

<<LODO1.o (O from NRLIB)>>
<<LODO1.NRLIB (NRLIB from MID)>>
<<LODO1.spad (SPAD from IN)>>

<<LODO2.o (O from NRLIB)>>
<<LODO2.NRLIB (NRLIB from MID)>>
<<LODO2.spad (SPAD from IN)>>

<<LODOCAT-.o (O from NRLIB)>>
<<LODOCAT-.NRLIB (NRLIB from MID)>>
<<LODOCAT.o (O from NRLIB)>>
<<LODOCAT.NRLIB (NRLIB from MID)>>
<<LODOCAT.spad (SPAD from IN)>>

<<LODOOPS.o (O from NRLIB)>>
<<LODOOPS.NRLIB (NRLIB from MID)>>
<<LODOOPS.spad (SPAD from IN)>>

<<lodo.spad (SPAD from IN)>>
<<lodo.spad.dvi (DOC from IN)>>

<<FACTFUNC.o (O from NRLIB)>>
<<FACTFUNC.NRLIB (NRLIB from MID)>>
<<FACTFUNC.spad (SPAD from IN)>>

<<ALGMANIP.o (O from NRLIB)>>
<<ALGMANIP.NRLIB (NRLIB from MID)>>
<<ALGMANIP.spad (SPAD from IN)>>

<<POLYROOT.o (O from NRLIB)>>
<<POLYROOT.NRLIB (NRLIB from MID)>>
<<POLYROOT.spad (SPAD from IN)>>

<<SIMPAN.o (O from NRLIB)>>
<<SIMPAN.NRLIB (NRLIB from MID)>>
<<SIMPAN.spad (SPAD from IN)>>

<<TRMANIP.o (O from NRLIB)>>
<<TRMANIP.NRLIB (NRLIB from MID)>>
<<TRMANIP.spad (SPAD from IN)>>

<<manip.spad (SPAD from IN)>>
<<manip.spad.dvi (DOC from IN)>>

<<MAPHACK1.o (O from NRLIB)>>
<<MAPHACK1.NRLIB (NRLIB from MID)>>
<<MAPHACK1.spad (SPAD from IN)>>

<<MAPHACK2.o (O from NRLIB)>>
<<MAPHACK2.NRLIB (NRLIB from MID)>>
<<MAPHACK2.spad (SPAD from IN)>>

<<MAPHACK3.o (O from NRLIB)>>
<<MAPHACK3.NRLIB (NRLIB from MID)>>
<<MAPHACK3.spad (SPAD from IN)>>

<<MAPPKG1.o (O from NRLIB)>>
<<MAPPKG1.NRLIB (NRLIB from MID)>>
<<MAPPKG1.spad (SPAD from IN)>>

<<MAPPKG2.o (O from NRLIB)>>
<<MAPPKG2.NRLIB (NRLIB from MID)>>
<<MAPPKG2.spad (SPAD from IN)>>

<<MAPPKG3.o (O from NRLIB)>>
<<MAPPKG3.NRLIB (NRLIB from MID)>>
<<MAPPKG3.spad (SPAD from IN)>>

<<mappkg.spad (SPAD from IN)>>
<<mappkg.spad.dvi (DOC from IN)>>

<<MATCAT-.o (O from NRLIB)>>
<<MATCAT-.NRLIB (NRLIB from MID)>>
<<MATCAT.o (O from NRLIB)>>
<<MATCAT.NRLIB (NRLIB from MID)>>
<<MATCAT.spad (SPAD from IN)>>

<<RMATCAT-.o (O from NRLIB)>>
<<RMATCAT-.NRLIB (NRLIB from MID)>>
<<RMATCAT.o (O from NRLIB)>>
<<RMATCAT.NRLIB (NRLIB from MID)>>
<<RMATCAT.spad (SPAD from IN)>>

<<SMATCAT-.o (O from NRLIB)>>
<<SMATCAT-.NRLIB (NRLIB from MID)>>
<<SMATCAT.o (O from NRLIB)>>
<<SMATCAT.NRLIB (NRLIB from MID)>>
<<SMATCAT.spad (SPAD from IN)>>

<<matcat.spad (SPAD from IN)>>
<<matcat.spad.dvi (DOC from IN)>>

<<IMATLIN.o (O from NRLIB)>>
<<IMATLIN.NRLIB (NRLIB from MID)>>
<<IMATLIN.spad (SPAD from IN)>>

<<IMATQF.o (O from NRLIB)>>
<<IMATQF.NRLIB (NRLIB from MID)>>
<<IMATQF.spad (SPAD from IN)>>

<<MATCAT2.o (O from NRLIB)>>
<<MATCAT2.NRLIB (NRLIB from MID)>>
<<MATCAT2.spad (SPAD from IN)>>

<<MATLIN.o (O from NRLIB)>>
<<MATLIN.NRLIB (NRLIB from MID)>>
<<MATLIN.spad (SPAD from IN)>>

<<RMCAT2.o (O from NRLIB)>>
<<RMCAT2.NRLIB (NRLIB from MID)>>
<<RMCAT2.spad (SPAD from IN)>>

<<matfuns.spad (SPAD from IN)>>
<<matfuns.spad.dvi (DOC from IN)>>

<<IMATRIX.o (O from NRLIB)>>
<<IMATRIX.NRLIB (NRLIB from MID)>>
<<IMATRIX.spad (SPAD from IN)>>

<<MATRIX.o (O from NRLIB)>>
<<MATRIX.NRLIB (NRLIB from MID)>>
<<MATRIX.spad (SPAD from IN)>>

<<RMATRIX.o (O from NRLIB)>>
<<RMATRIX.NRLIB (NRLIB from MID)>>
<<RMATRIX.spad (SPAD from IN)>>

<<SQMATRIX.o (O from NRLIB)>>
<<SQMATRIX.NRLIB (NRLIB from MID)>>
<<SQMATRIX.spad (SPAD from IN)>>

<<matrix.spad (SPAD from IN)>>
<<matrix.spad.dvi (DOC from IN)>>

<<MATSTOR.o (O from NRLIB)>>
<<MATSTOR.NRLIB (NRLIB from MID)>>
<<MATSTOR.spad (SPAD from IN)>>

<<matstor.spad (SPAD from IN)>>
<<matstor.spad.dvi (DOC from IN)>>

<<MESH.o (O from NRLIB)>>
<<MESH.NRLIB (NRLIB from MID)>>
<<MESH.spad (SPAD from IN)>>

<<mesh.spad (SPAD from IN)>>
<<mesh.spad.dvi (DOC from IN)>>

<<MFINFACT.o (O from NRLIB)>>
<<MFINFACT.NRLIB (NRLIB from MID)>>
<<MFINFACT.spad (SPAD from IN)>>

<<mfinfact.spad (SPAD from IN)>>
<<mfinfact.spad.dvi (DOC from IN)>>

<<SAOS.o (O from NRLIB)>>
<<SAOS.NRLIB (NRLIB from MID)>>
<<SAOS.spad (SPAD from IN)>>

<<misc.spad (SPAD from IN)>>
<<misc.spad.dvi (DOC from IN)>>

<<INFORM.o (O from NRLIB)>>
<<INFORM.NRLIB (NRLIB from MID)>>
<<INFORM.spad (SPAD from IN)>>

<<INFORM1.o (O from NRLIB)>>
<<INFORM1.NRLIB (NRLIB from MID)>>
<<INFORM1.spad (SPAD from IN)>>

<<MKFLCFN.o (O from NRLIB)>>
<<MKFLCFN.NRLIB (NRLIB from MID)>>
<<MKFLCFN.spad (SPAD from IN)>>

<<MKFUNC.o (O from NRLIB)>>
<<MKFUNC.NRLIB (NRLIB from MID)>>
<<MKFUNC.spad (SPAD from IN)>>

<<MKBCFUNC.o (O from NRLIB)>>
<<MKBCFUNC.NRLIB (NRLIB from MID)>>
<<MKBCFUNC.spad (SPAD from IN)>>

<<MKUCFUNC.o (O from NRLIB)>>
<<MKUCFUNC.NRLIB (NRLIB from MID)>>
<<MKUCFUNC.spad (SPAD from IN)>>

<<mkfunc.spad (SPAD from IN)>>
<<mkfunc.spad.dvi (DOC from IN)>>

<<MKRECORD.o (O from NRLIB)>>
<<MKRECORD.NRLIB (NRLIB from MID)>>
<<MKRECORD.spad (SPAD from IN)>>

<<mkrecord.spad (SPAD from IN)>>
<<mkrecord.spad.dvi (DOC from IN)>>

<<mlift.spad.jhd.dvi (DOC from IN)>>

<<MLIFT.o (O from NRLIB)>>
<<MLIFT.NRLIB (NRLIB from MID)>>
<<MLIFT.spad (SPAD from IN)>>

<<mlift.spad (SPAD from IN)>>
<<mlift.spad.dvi (DOC from IN)>>

<<MDDFACT.o (O from NRLIB)>>
<<MDDFACT.NRLIB (NRLIB from MID)>>
<<MDDFACT.spad (SPAD from IN)>>

<<moddfact.spad (SPAD from IN)>>
<<moddfact.spad.dvi (DOC from IN)>>

<<INMODGCD.o (O from NRLIB)>>
<<INMODGCD.NRLIB (NRLIB from MID)>>
<<INMODGCD.spad (SPAD from IN)>>

<<modgcd.spad (SPAD from IN)>>
<<modgcd.spad.dvi (DOC from IN)>>

<<GMODPOL.o (O from NRLIB)>>
<<GMODPOL.NRLIB (NRLIB from MID)>>
<<GMODPOL.spad (SPAD from IN)>>

<<MODMONOM.o (O from NRLIB)>>
<<MODMONOM.NRLIB (NRLIB from MID)>>
<<MODMONOM.spad (SPAD from IN)>>

<<modmonom.spad (SPAD from IN)>>
<<modmonom.spad.dvi (DOC from IN)>>

<<MODMON.o (O from NRLIB)>>
<<MODMON.NRLIB (NRLIB from MID)>>
<<MODMON.spad (SPAD from IN)>>

<<modmon.spad (SPAD from IN)>>
<<modmon.spad.dvi (DOC from IN)>>

<<EMR.o (O from NRLIB)>>
<<EMR.NRLIB (NRLIB from MID)>>
<<EMR.spad (SPAD from IN)>>

<<MODFIELD.o (O from NRLIB)>>
<<MODFIELD.NRLIB (NRLIB from MID)>>
<<MODFIELD.spad (SPAD from IN)>>

<<MODRING.o (O from NRLIB)>>
<<MODRING.NRLIB (NRLIB from MID)>>
<<MODRING.spad (SPAD from IN)>>

<<modring.spad (SPAD from IN)>>
<<modring.spad.dvi (DOC from IN)>>

<<MOEBIUS.o (O from NRLIB)>>
<<MOEBIUS.NRLIB (NRLIB from MID)>>
<<MOEBIUS.spad (SPAD from IN)>>

<<moebius.spad (SPAD from IN)>>
<<moebius.spad.dvi (DOC from IN)>>

<<MRF2.o (O from NRLIB)>>
<<MRF2.NRLIB (NRLIB from MID)>>
<<MRF2.spad (SPAD from IN)>>

<<MRING.o (O from NRLIB)>>
<<MRING.NRLIB (NRLIB from MID)>>
<<MRING.spad (SPAD from IN)>>

<<mring.spad (SPAD from IN)>>
<<mring.spad.dvi (DOC from IN)>>

<<MSET.o (O from NRLIB)>>
<<MSET.NRLIB (NRLIB from MID)>>
<<MSET.spad (SPAD from IN)>>

<<mset.spad (SPAD from IN)>>
<<mset.spad.dvi (DOC from IN)>>

<<SMTS.o (O from NRLIB)>>
<<SMTS.NRLIB (NRLIB from MID)>>
<<SMTS.spad (SPAD from IN)>>

<<TS.o (O from NRLIB)>>
<<TS.NRLIB (NRLIB from MID)>>
<<TS.spad (SPAD from IN)>>

<<mts.spad (SPAD from IN)>>
<<mts.spad.dvi (DOC from IN)>>

<<ALGMFACT.o (O from NRLIB)>>
<<ALGMFACT.NRLIB (NRLIB from MID)>>
<<ALGMFACT.spad (SPAD from IN)>>

<<INNMFACT.o (O from NRLIB)>>
<<INNMFACT.NRLIB (NRLIB from MID)>>
<<INNMFACT.spad (SPAD from IN)>>

<<MULTFACT.o (O from NRLIB)>>
<<MULTFACT.NRLIB (NRLIB from MID)>>
<<MULTFACT.spad (SPAD from IN)>>

<<multfact.spad (SPAD from IN)>>
<<multfact.spad.dvi (DOC from IN)>>

<<INDE.o (O from NRLIB)>>
<<INDE.NRLIB (NRLIB from MID)>>
<<INDE.spad (SPAD from IN)>>

<<MPOLY.o (O from NRLIB)>>
<<MPOLY.NRLIB (NRLIB from MID)>>
<<MPOLY.spad (SPAD from IN)>>

<<POLY.o (O from NRLIB)>>
<<POLY.NRLIB (NRLIB from MID)>>
<<POLY.spad (SPAD from IN)>>

<<POLY2.o (O from NRLIB)>>
<<POLY2.NRLIB (NRLIB from MID)>>
<<POLY2.spad (SPAD from IN)>>

<<SMP.o (O from NRLIB)>>
<<SMP.NRLIB (NRLIB from MID)>>
<<SMP.spad (SPAD from IN)>>

<<multpoly.spad (SPAD from IN)>>
<<multpoly.spad.dvi (DOC from IN)>>

<<MULTSQFR.o (O from NRLIB)>>
<<MULTSQFR.NRLIB (NRLIB from MID)>>
<<MULTSQFR.spad (SPAD from IN)>>

<<multsqfr.spad (SPAD from IN)>>
<<multsqfr.spad.dvi (DOC from IN)>>

<<FINAALG-.o (O from NRLIB)>>
<<FINAALG-.NRLIB (NRLIB from MID)>>
<<FINAALG.o (O from NRLIB)>>
<<FINAALG.NRLIB (NRLIB from MID)>>
<<FINAALG.spad (SPAD from IN)>>

<<FRNAALG-.o (O from NRLIB)>>
<<FRNAALG-.NRLIB (NRLIB from MID)>>
<<FRNAALG.o (O from NRLIB)>>
<<FRNAALG.NRLIB (NRLIB from MID)>>
<<FRNAALG.spad (SPAD from IN)>>

<<MONAD-.o (O from NRLIB)>>
<<MONAD-.NRLIB (NRLIB from MID)>>
<<MONAD.o (O from NRLIB)>>
<<MONAD.NRLIB (NRLIB from MID)>>
<<MONAD.spad (SPAD from IN)>>

<<MONADWU-.o (O from NRLIB)>>
<<MONADWU-.NRLIB (NRLIB from MID)>>
<<MONADWU.o (O from NRLIB)>>
<<MONADWU.NRLIB (NRLIB from MID)>>
<<MONADWU.spad (SPAD from IN)>>

<<NAALG-.o (O from NRLIB)>>
<<NAALG-.NRLIB (NRLIB from MID)>>
<<NAALG.o (O from NRLIB)>>
<<NAALG.NRLIB (NRLIB from MID)>>
<<NAALG.spad (SPAD from IN)>>

<<NARNG-.o (O from NRLIB)>>
<<NARNG-.NRLIB (NRLIB from MID)>>
<<NARNG.o (O from NRLIB)>>
<<NARNG.NRLIB (NRLIB from MID)>>
<<NARNG.spad (SPAD from IN)>>

<<NASRING-.o (O from NRLIB)>>
<<NASRING-.NRLIB (NRLIB from MID)>>
<<NASRING.o (O from NRLIB)>>
<<NASRING.NRLIB (NRLIB from MID)>>
<<NASRING.spad (SPAD from IN)>>

<<naalgc.spad (SPAD from IN)>>
<<naalgc.spad.dvi (DOC from IN)>>

<<ALGPKG.o (O from NRLIB)>>
<<ALGPKG.NRLIB (NRLIB from MID)>>
<<ALGPKG.spad (SPAD from IN)>>

<<ALGSC.o (O from NRLIB)>>
<<ALGSC.NRLIB (NRLIB from MID)>>
<<ALGSC.spad (SPAD from IN)>>

<<FRNAAF2.o (O from NRLIB)>>
<<FRNAAF2.NRLIB (NRLIB from MID)>>
<<FRNAAF2.spad (SPAD from IN)>>

<<SCPKG.o (O from NRLIB)>>
<<SCPKG.NRLIB (NRLIB from MID)>>
<<SCPKG.spad (SPAD from IN)>>

<<naalg.spad (SPAD from IN)>>
<<naalg.spad.dvi (DOC from IN)>>

<<ndftip.as (SPAD from IN)>>
<<ndftip.as.dvi (DOC from IN)>>

<<nepip.as (SPAD from IN)>>
<<nepip.as.dvi (DOC from IN)>>

<<IPRNTPK.o (O from NRLIB)>>
<<IPRNTPK.NRLIB (NRLIB from MID)>>
<<IPRNTPK.spad (SPAD from IN)>>

<<SPLNODE.o (O from NRLIB)>>
<<SPLNODE.NRLIB (NRLIB from MID)>>
<<SPLNODE.spad (SPAD from IN)>>

<<SPLTREE.o (O from NRLIB)>>
<<SPLTREE.NRLIB (NRLIB from MID)>>
<<SPLTREE.spad (SPAD from IN)>>

<<TBCMPPK.o (O from NRLIB)>>
<<TBCMPPK.NRLIB (NRLIB from MID)>>
<<TBCMPPK.spad (SPAD from IN)>>

<<newdata.spad (SPAD from IN)>>
<<newdata.spad.dvi (DOC from IN)>>

<<COMPPROP.o (O from NRLIB)>>
<<COMPPROP.NRLIB (NRLIB from MID)>>
<<COMPPROP.spad (SPAD from IN)>>

<<SUBSPACE.o (O from NRLIB)>>
<<SUBSPACE.NRLIB (NRLIB from MID)>>
<<SUBSPACE.spad (SPAD from IN)>>

<<POINT.o (O from NRLIB)>>
<<POINT.NRLIB (NRLIB from MID)>>
<<POINT.spad (SPAD from IN)>>

<<PTCAT.o (O from NRLIB)>>
<<PTCAT.NRLIB (NRLIB from MID)>>
<<PTCAT.spad (SPAD from IN)>>

<<PTFUNC2.o (O from NRLIB)>>
<<PTFUNC2.NRLIB (NRLIB from MID)>>
<<PTFUNC2.spad (SPAD from IN)>>

<<PTPACK.o (O from NRLIB)>>
<<PTPACK.NRLIB (NRLIB from MID)>>
<<PTPACK.spad (SPAD from IN)>>

<<newpoint.spad (SPAD from IN)>>
<<newpoint.spad.dvi (DOC from IN)>>

<<NSMP.o (O from NRLIB)>>
<<NSMP.NRLIB (NRLIB from MID)>>
<<NSMP.spad (SPAD from IN)>>

<<NSUP.o (O from NRLIB)>>
<<NSUP.NRLIB (NRLIB from MID)>>
<<NSUP.spad (SPAD from IN)>>

<<NSUP2.o (O from NRLIB)>>
<<NSUP2.NRLIB (NRLIB from MID)>>
<<NSUP2.spad (SPAD from IN)>>

<<RPOLCAT-.o (O from NRLIB)>>
<<RPOLCAT-.NRLIB (NRLIB from MID)>>
<<RPOLCAT.o (O from NRLIB)>>
<<RPOLCAT.NRLIB (NRLIB from MID)>>
<<RPOLCAT.spad (SPAD from IN)>>

<<newpoly.spad (SPAD from IN)>>
<<newpoly.spad.dvi (DOC from IN)>>

<<NLINSOL.o (O from NRLIB)>>
<<NLINSOL.NRLIB (NRLIB from MID)>>
<<NLINSOL.spad (SPAD from IN)>>

<<RETSOL.o (O from NRLIB)>>
<<RETSOL.NRLIB (NRLIB from MID)>>
<<RETSOL.spad (SPAD from IN)>>

<<nlinsol.spad (SPAD from IN)>>
<<nlinsol.spad.dvi (DOC from IN)>>

<<NODE1.o (O from NRLIB)>>
<<NODE1.NRLIB (NRLIB from MID)>>
<<NODE1.spad (SPAD from IN)>>

<<nlode.spad (SPAD from IN)>>
<<nlode.spad.dvi (DOC from IN)>>

<<noptip.as (SPAD from IN)>>
<<noptip.as.dvi (DOC from IN)>>

<<NPCOEF.o (O from NRLIB)>>
<<NPCOEF.NRLIB (NRLIB from MID)>>
<<NPCOEF.spad (SPAD from IN)>>

<<npcoef.spad (SPAD from IN)>>
<<npcoef.spad.dvi (DOC from IN)>>

<<nqip.as (SPAD from IN)>>
<<nqip.as.dvi (DOC from IN)>>

<<nrc.as (SPAD from IN)>>
<<nrc.as.dvi (DOC from IN)>>

<<nregset.spad (SPAD from IN)>>
<<nregset.spad.dvi (DOC from IN)>>

<<nsfip.as (SPAD from IN)>>
<<nsfip.as.dvi (DOC from IN)>>

<<nsregset.spad (SPAD from IN)>>
<<nsregset.spad.dvi (DOC from IN)>>

<<INEP.o (O from NRLIB)>>
<<INEP.NRLIB (NRLIB from MID)>>
<<INEP.spad (SPAD from IN)>>

<<NCEP.o (O from NRLIB)>>
<<NCEP.NRLIB (NRLIB from MID)>>
<<NCEP.spad (SPAD from IN)>>

<<NREP.o (O from NRLIB)>>
<<NREP.NRLIB (NRLIB from MID)>>
<<NREP.spad (SPAD from IN)>>

<<numeigen.spad (SPAD from IN)>>
<<numeigen.spad.dvi (DOC from IN)>>

<<DRAWHACK.o (O from NRLIB)>>
<<DRAWHACK.NRLIB (NRLIB from MID)>>
<<DRAWHACK.spad (SPAD from IN)>>

<<NUMERIC.o (O from NRLIB)>>
<<NUMERIC.NRLIB (NRLIB from MID)>>
<<NUMERIC.spad (SPAD from IN)>>

<<numeric.spad (SPAD from IN)>>
<<numeric.spad.dvi (DOC from IN)>>

<<NUMODE.o (O from NRLIB)>>
<<NUMODE.NRLIB (NRLIB from MID)>>
<<NUMODE.spad (SPAD from IN)>>

<<numode.spad (SPAD from IN)>>
<<numode.spad.dvi (DOC from IN)>>

<<NUMQUAD.o (O from NRLIB)>>
<<NUMQUAD.NRLIB (NRLIB from MID)>>
<<NUMQUAD.spad (SPAD from IN)>>

<<numquad.spad (SPAD from IN)>>
<<numquad.spad.dvi (DOC from IN)>>

<<FLOATCP.o (O from NRLIB)>>
<<FLOATCP.NRLIB (NRLIB from MID)>>
<<FLOATCP.spad (SPAD from IN)>>

<<FLOATRP.o (O from NRLIB)>>
<<FLOATRP.NRLIB (NRLIB from MID)>>
<<FLOATRP.spad (SPAD from IN)>>

<<INFSP.o (O from NRLIB)>>
<<INFSP.NRLIB (NRLIB from MID)>>
<<INFSP.spad (SPAD from IN)>>

<<numsolve.spad (SPAD from IN)>>
<<numsolve.spad.dvi (DOC from IN)>>

<<INTHEORY.o (O from NRLIB)>>
<<INTHEORY.NRLIB (NRLIB from MID)>>
<<INTHEORY.spad (SPAD from IN)>>

<<PNTHEORY.o (O from NRLIB)>>
<<PNTHEORY.NRLIB (NRLIB from MID)>>
<<PNTHEORY.spad (SPAD from IN)>>

<<numtheor.spad (SPAD from IN)>>
<<numtheor.spad.dvi (DOC from IN)>>

<<OC-.o (O from NRLIB)>>
<<OC-.NRLIB (NRLIB from MID)>>
<<OC.o (O from NRLIB)>>
<<OC.NRLIB (NRLIB from MID)>>
<<OC.spad (SPAD from IN)>>

<<OCT.o (O from NRLIB)>>
<<OCT.NRLIB (NRLIB from MID)>>
<<OCT.spad (SPAD from IN)>>

<<OCTCT2.o (O from NRLIB)>>
<<OCTCT2.NRLIB (NRLIB from MID)>>
<<OCTCT2.spad (SPAD from IN)>>

<<oct.spad (SPAD from IN)>>
<<oct.spad.dvi (DOC from IN)>>

<<ODEPAL.o (O from NRLIB)>>
<<ODEPAL.NRLIB (NRLIB from MID)>>
<<ODEPAL.spad (SPAD from IN)>>

<<ODERED.o (O from NRLIB)>>
<<ODERED.NRLIB (NRLIB from MID)>>
<<ODERED.spad (SPAD from IN)>>

<<ODESYS.o (O from NRLIB)>>
<<ODESYS.NRLIB (NRLIB from MID)>>
<<ODESYS.spad (SPAD from IN)>>

<<odealg.spad (SPAD from IN)>>
<<odealg.spad.dvi (DOC from IN)>>

<<LODEEF.o (O from NRLIB)>>
<<LODEEF.NRLIB (NRLIB from MID)>>
<<LODEEF.spad (SPAD from IN)>>

<<REDORDER.o (O from NRLIB)>>
<<REDORDER.NRLIB (NRLIB from MID)>>
<<REDORDER.spad (SPAD from IN)>>

<<odeef.spad (SPAD from IN)>>
<<odeef.spad.dvi (DOC from IN)>>

<<BALFACT.o (O from NRLIB)>>
<<BALFACT.NRLIB (NRLIB from MID)>>
<<BALFACT.spad (SPAD from IN)>>

<<BOUNDZRO.o (O from NRLIB)>>
<<BOUNDZRO.NRLIB (NRLIB from MID)>>
<<BOUNDZRO.spad (SPAD from IN)>>

<<ODECONST.o (O from NRLIB)>>
<<ODECONST.NRLIB (NRLIB from MID)>>
<<ODECONST.spad (SPAD from IN)>>

<<ODEINT.o (O from NRLIB)>>
<<ODEINT.NRLIB (NRLIB from MID)>>
<<ODEINT.spad (SPAD from IN)>>

<<ODEPRIM.o (O from NRLIB)>>
<<ODEPRIM.NRLIB (NRLIB from MID)>>
<<ODEPRIM.spad (SPAD from IN)>>

<<ODERAT.o (O from NRLIB)>>
<<ODERAT.NRLIB (NRLIB from MID)>>
<<ODERAT.spad (SPAD from IN)>>

<<ODETOOLS.o (O from NRLIB)>>
<<ODETOOLS.NRLIB (NRLIB from MID)>>
<<ODETOOLS.spad (SPAD from IN)>>

<<UTSODETL.o (O from NRLIB)>>
<<UTSODETL.NRLIB (NRLIB from MID)>>
<<UTSODETL.spad (SPAD from IN)>>

<<oderf.spad (SPAD from IN)>>
<<oderf.spad.dvi (DOC from IN)>>

<<OM.o (O from NRLIB)>>
<<OM.NRLIB (NRLIB from MID)>>
<<OM.spad (SPAD from IN)>>

<<omcat.spad (SPAD from IN)>>
<<omcat.spad.dvi (DOC from IN)>>

<<OMCONN.o (O from NRLIB)>>
<<OMCONN.NRLIB (NRLIB from MID)>>
<<OMCONN.spad (SPAD from IN)>>

<<OMDEV.o (O from NRLIB)>>
<<OMDEV.NRLIB (NRLIB from MID)>>
<<OMDEV.spad (SPAD from IN)>>

<<OMENC.o (O from NRLIB)>>
<<OMENC.NRLIB (NRLIB from MID)>>
<<OMENC.spad (SPAD from IN)>>

<<OMPKG.o (O from NRLIB)>>
<<OMPKG.NRLIB (NRLIB from MID)>>
<<OMPKG.spad (SPAD from IN)>>

<<omdev.spad (SPAD from IN)>>
<<omdev.spad.dvi (DOC from IN)>>

<<OMERR.o (O from NRLIB)>>
<<OMERR.NRLIB (NRLIB from MID)>>
<<OMERR.spad (SPAD from IN)>>

<<OMERRK.o (O from NRLIB)>>
<<OMERRK.NRLIB (NRLIB from MID)>>
<<OMERRK.spad (SPAD from IN)>>

<<omerror.spad (SPAD from IN)>>
<<omerror.spad.dvi (DOC from IN)>>

<<OMSERVER.o (O from NRLIB)>>
<<OMSERVER.NRLIB (NRLIB from MID)>>
<<OMSERVER.spad (SPAD from IN)>>

<<omserver.spad (SPAD from IN)>>
<<omserver.spad.dvi (DOC from IN)>>

<<MODOP.o (O from NRLIB)>>
<<MODOP.NRLIB (NRLIB from MID)>>
<<MODOP.spad (SPAD from IN)>>

<<OP.o (O from NRLIB)>>
<<OP.NRLIB (NRLIB from MID)>>
<<OP.spad (SPAD from IN)>>

<<opalg.spad (SPAD from IN)>>
<<opalg.spad.dvi (DOC from IN)>>

<<OMEXPR.o (O from NRLIB)>>
<<OMEXPR.NRLIB (NRLIB from MID)>>
<<OMEXPR.spad (SPAD from IN)>>

<<openmath.spad (SPAD from IN)>>
<<openmath.spad.dvi (DOC from IN)>>

<<BOP.o (O from NRLIB)>>
<<BOP.NRLIB (NRLIB from MID)>>
<<BOP.spad (SPAD from IN)>>

<<BOP1.o (O from NRLIB)>>
<<BOP1.NRLIB (NRLIB from MID)>>
<<BOP1.spad (SPAD from IN)>>

<<COMMONOP.o (O from NRLIB)>>
<<COMMONOP.NRLIB (NRLIB from MID)>>
<<COMMONOP.spad (SPAD from IN)>>

<<op.spad (SPAD from IN)>>
<<op.spad.dvi (DOC from IN)>>

<<APPLYORE.o (O from NRLIB)>>
<<APPLYORE.NRLIB (NRLIB from MID)>>
<<APPLYORE.spad (SPAD from IN)>>

<<AUTOMOR.o (O from NRLIB)>>
<<AUTOMOR.NRLIB (NRLIB from MID)>>
<<AUTOMOR.spad (SPAD from IN)>>

<<OREPCAT-.o (O from NRLIB)>>
<<OREPCAT-.NRLIB (NRLIB from MID)>>
<<OREPCAT.o (O from NRLIB)>>
<<OREPCAT.NRLIB (NRLIB from MID)>>
<<OREPCAT.spad (SPAD from IN)>>

<<OREPCTO.o (O from NRLIB)>>
<<OREPCTO.NRLIB (NRLIB from MID)>>
<<OREPCTO.spad (SPAD from IN)>>

<<ORESUP.o (O from NRLIB)>>
<<ORESUP.NRLIB (NRLIB from MID)>>
<<ORESUP.spad (SPAD from IN)>>

<<OREUP.o (O from NRLIB)>>
<<OREUP.NRLIB (NRLIB from MID)>>
<<OREUP.spad (SPAD from IN)>>

<<ore.spad (SPAD from IN)>>
<<ore.spad.dvi (DOC from IN)>>

<<NUMFMT.o (O from NRLIB)>>
<<NUMFMT.NRLIB (NRLIB from MID)>>
<<NUMFMT.spad (SPAD from IN)>>

<<OUTFORM.o (O from NRLIB)>>
<<OUTFORM.NRLIB (NRLIB from MID)>>
<<OUTFORM.spad (SPAD from IN)>>
<<OUTFORM.o (BOOTSTRAP from MID)>>
<<OUTFORM.lsp (LISP from IN)>>

<<outform.spad (SPAD from IN)>>
<<outform.spad.dvi (DOC from IN)>>

<<DISPLAY.o (O from NRLIB)>>
<<DISPLAY.NRLIB (NRLIB from MID)>>
<<DISPLAY.spad (SPAD from IN)>>

<<OUT.o (O from NRLIB)>>
<<OUT.NRLIB (NRLIB from MID)>>
<<OUT.spad (SPAD from IN)>>

<<SPECOUT.o (O from NRLIB)>>
<<SPECOUT.NRLIB (NRLIB from MID)>>
<<SPECOUT.spad (SPAD from IN)>>

<<out.spad (SPAD from IN)>>
<<out.spad.dvi (DOC from IN)>>

<<PADE.o (O from NRLIB)>>
<<PADE.NRLIB (NRLIB from MID)>>
<<PADE.spad (SPAD from IN)>>

<<PADEPAC.o (O from NRLIB)>>
<<PADEPAC.NRLIB (NRLIB from MID)>>
<<PADEPAC.spad (SPAD from IN)>>

<<pade.spad (SPAD from IN)>>
<<pade.spad.dvi (DOC from IN)>>

<<IBACHIN.o (O from NRLIB)>>
<<IBACHIN.NRLIB (NRLIB from MID)>>
<<IBACHIN.spad (SPAD from IN)>>

<<IBPTOOLS.o (O from NRLIB)>>
<<IBPTOOLS.NRLIB (NRLIB from MID)>>
<<IBPTOOLS.spad (SPAD from IN)>>

<<PWFFINTB.o (O from NRLIB)>>
<<PWFFINTB.NRLIB (NRLIB from MID)>>
<<PWFFINTB.spad (SPAD from IN)>>

<<padiclib.spad (SPAD from IN)>>
<<padiclib.spad.dvi (DOC from IN)>>

<<BPADIC.o (O from NRLIB)>>
<<BPADIC.NRLIB (NRLIB from MID)>>
<<BPADIC.spad (SPAD from IN)>>

<<BPADICRT.o (O from NRLIB)>>
<<BPADICRT.NRLIB (NRLIB from MID)>>
<<BPADICRT.spad (SPAD from IN)>>

<<IPADIC.o (O from NRLIB)>>
<<IPADIC.NRLIB (NRLIB from MID)>>
<<IPADIC.spad (SPAD from IN)>>

<<PADIC.o (O from NRLIB)>>
<<PADIC.NRLIB (NRLIB from MID)>>
<<PADIC.spad (SPAD from IN)>>

<<PADICCT.o (O from NRLIB)>>
<<PADICCT.NRLIB (NRLIB from MID)>>
<<PADICCT.spad (SPAD from IN)>>

<<PADICRAT.o (O from NRLIB)>>
<<PADICRAT.NRLIB (NRLIB from MID)>>
<<PADICRAT.spad (SPAD from IN)>>

<<PADICRC.o (O from NRLIB)>>
<<PADICRC.NRLIB (NRLIB from MID)>>
<<PADICRC.spad (SPAD from IN)>>

<<padic.spad (SPAD from IN)>>
<<padic.spad.dvi (DOC from IN)>>

<<PARPCURV.o (O from NRLIB)>>
<<PARPCURV.NRLIB (NRLIB from MID)>>
<<PARPCURV.spad (SPAD from IN)>>

<<PARPC2.o (O from NRLIB)>>
<<PARPC2.NRLIB (NRLIB from MID)>>
<<PARPC2.spad (SPAD from IN)>>

<<PARSCURV.o (O from NRLIB)>>
<<PARSCURV.NRLIB (NRLIB from MID)>>
<<PARSCURV.spad (SPAD from IN)>>

<<PARSC2.o (O from NRLIB)>>
<<PARSC2.NRLIB (NRLIB from MID)>>
<<PARSC2.spad (SPAD from IN)>>

<<PARSURF.o (O from NRLIB)>>
<<PARSURF.NRLIB (NRLIB from MID)>>
<<PARSURF.spad (SPAD from IN)>>

<<PARSU2.o (O from NRLIB)>>
<<PARSU2.NRLIB (NRLIB from MID)>>
<<PARSU2.spad (SPAD from IN)>>

<<paramete.spad (SPAD from IN)>>
<<paramete.spad.dvi (DOC from IN)>>

<<PARTPERM.o (O from NRLIB)>>
<<PARTPERM.NRLIB (NRLIB from MID)>>
<<PARTPERM.spad (SPAD from IN)>>

<<partperm.spad (SPAD from IN)>>
<<partperm.spad.dvi (DOC from IN)>>

<<FPATMAB.o (O from NRLIB)>>
<<FPATMAB.NRLIB (NRLIB from MID)>>
<<FPATMAB.spad (SPAD from IN)>>

<<PATLRES.o (O from NRLIB)>>
<<PATLRES.NRLIB (NRLIB from MID)>>
<<PATLRES.spad (SPAD from IN)>>

<<PATMAB.o (O from NRLIB)>>
<<PATMAB.NRLIB (NRLIB from MID)>>
<<PATMAB.spad (SPAD from IN)>>

<<PATRES.o (O from NRLIB)>>
<<PATRES.NRLIB (NRLIB from MID)>>
<<PATRES.spad (SPAD from IN)>>

<<PATRES2.o (O from NRLIB)>>
<<PATRES2.NRLIB (NRLIB from MID)>>
<<PATRES2.spad (SPAD from IN)>>

<<PMDOWN.o (O from NRLIB)>>
<<PMDOWN.NRLIB (NRLIB from MID)>>
<<PMDOWN.spad (SPAD from IN)>>

<<PMKERNEL.o (O from NRLIB)>>
<<PMKERNEL.NRLIB (NRLIB from MID)>>
<<PMKERNEL.spad (SPAD from IN)>>

<<PMLSAGG.o (O from NRLIB)>>
<<PMLSAGG.NRLIB (NRLIB from MID)>>
<<PMLSAGG.spad (SPAD from IN)>>

<<PMSYM.o (O from NRLIB)>>
<<PMSYM.NRLIB (NRLIB from MID)>>
<<PMSYM.spad (SPAD from IN)>>

<<PMTOOLS.o (O from NRLIB)>>
<<PMTOOLS.NRLIB (NRLIB from MID)>>
<<PMTOOLS.spad (SPAD from IN)>>

<<patmatch1.spad (SPAD from IN)>>
<<patmatch1.spad.dvi (DOC from IN)>>

<<PATMATCH.o (O from NRLIB)>>
<<PATMATCH.NRLIB (NRLIB from MID)>>
<<PATMATCH.spad (SPAD from IN)>>

<<PMFS.o (O from NRLIB)>>
<<PMFS.NRLIB (NRLIB from MID)>>
<<PMFS.spad (SPAD from IN)>>

<<PMINS.o (O from NRLIB)>>
<<PMINS.NRLIB (NRLIB from MID)>>
<<PMINS.spad (SPAD from IN)>>

<<PMPLCAT.o (O from NRLIB)>>
<<PMPLCAT.NRLIB (NRLIB from MID)>>
<<PMPLCAT.spad (SPAD from IN)>>

<<PMQFCAT.o (O from NRLIB)>>
<<PMQFCAT.NRLIB (NRLIB from MID)>>
<<PMQFCAT.spad (SPAD from IN)>>

<<patmatch2.spad (SPAD from IN)>>
<<patmatch2.spad.dvi (DOC from IN)>>

<<PATAB.o (O from NRLIB)>>
<<PATAB.NRLIB (NRLIB from MID)>>
<<PATAB.spad (SPAD from IN)>>

<<PATTERN.o (O from NRLIB)>>
<<PATTERN.NRLIB (NRLIB from MID)>>
<<PATTERN.spad (SPAD from IN)>>

<<PATTERN1.o (O from NRLIB)>>
<<PATTERN1.NRLIB (NRLIB from MID)>>
<<PATTERN1.spad (SPAD from IN)>>

<<PATTERN2.o (O from NRLIB)>>
<<PATTERN2.NRLIB (NRLIB from MID)>>
<<PATTERN2.spad (SPAD from IN)>>

<<pattern.spad (SPAD from IN)>>
<<pattern.spad.dvi (DOC from IN)>>

<<PPCURVE.o (O from NRLIB)>>
<<PPCURVE.NRLIB (NRLIB from MID)>>
<<PPCURVE.spad (SPAD from IN)>>

<<PSCURVE.o (O from NRLIB)>>
<<PSCURVE.NRLIB (NRLIB from MID)>>
<<PSCURVE.spad (SPAD from IN)>>

<<pcurve.spad (SPAD from IN)>>
<<pcurve.spad.dvi (DOC from IN)>>

<<PCOMP.o (O from NRLIB)>>
<<PCOMP.NRLIB (NRLIB from MID)>>
<<PCOMP.spad (SPAD from IN)>>

<<PDECOMP.o (O from NRLIB)>>
<<PDECOMP.NRLIB (NRLIB from MID)>>
<<PDECOMP.spad (SPAD from IN)>>

<<pdecomp.spad (SPAD from IN)>>
<<pdecomp.spad.dvi (DOC from IN)>>

<<GRAY.o (O from NRLIB)>>
<<GRAY.NRLIB (NRLIB from MID)>>
<<GRAY.spad (SPAD from IN)>>

<<PERMAN.o (O from NRLIB)>>
<<PERMAN.NRLIB (NRLIB from MID)>>
<<PERMAN.spad (SPAD from IN)>>

<<perman.spad (SPAD from IN)>>
<<perman.spad.dvi (DOC from IN)>>

<<PERMGRP.o (O from NRLIB)>>
<<PERMGRP.NRLIB (NRLIB from MID)>>
<<PERMGRP.spad (SPAD from IN)>>

<<PGE.o (O from NRLIB)>>
<<PGE.NRLIB (NRLIB from MID)>>
<<PGE.spad (SPAD from IN)>>

<<permgrps.spad (SPAD from IN)>>
<<permgrps.spad.dvi (DOC from IN)>>

<<PERM.o (O from NRLIB)>>
<<PERM.NRLIB (NRLIB from MID)>>
<<PERM.spad (SPAD from IN)>>

<<PERMCAT.o (O from NRLIB)>>
<<PERMCAT.NRLIB (NRLIB from MID)>>
<<PERMCAT.spad (SPAD from IN)>>

<<perm.spad (SPAD from IN)>>
<<perm.spad.dvi (DOC from IN)>>

<<PFBR.o (O from NRLIB)>>
<<PFBR.NRLIB (NRLIB from MID)>>
<<PFBR.spad (SPAD from IN)>>

<<PFBRU.o (O from NRLIB)>>
<<PFBRU.NRLIB (NRLIB from MID)>>
<<PFBRU.spad (SPAD from IN)>>

<<pfbr.spad (SPAD from IN)>>
<<pfbr.spad.dvi (DOC from IN)>>

<<FORDER.o (O from NRLIB)>>
<<FORDER.NRLIB (NRLIB from MID)>>
<<FORDER.spad (SPAD from IN)>>

<<FSRED.o (O from NRLIB)>>
<<FSRED.NRLIB (NRLIB from MID)>>
<<FSRED.spad (SPAD from IN)>>

<<PFO.o (O from NRLIB)>>
<<PFO.NRLIB (NRLIB from MID)>>
<<PFO.spad (SPAD from IN)>>

<<PFOQ.o (O from NRLIB)>>
<<PFOQ.NRLIB (NRLIB from MID)>>
<<PFOQ.spad (SPAD from IN)>>

<<PFOTOOLS.o (O from NRLIB)>>
<<PFOTOOLS.NRLIB (NRLIB from MID)>>
<<PFOTOOLS.spad (SPAD from IN)>>

<<RDIV.o (O from NRLIB)>>
<<RDIV.NRLIB (NRLIB from MID)>>
<<RDIV.spad (SPAD from IN)>>

<<pfo.spad (SPAD from IN)>>
<<pfo.spad.dvi (DOC from IN)>>

<<PFR.o (O from NRLIB)>>
<<PFR.NRLIB (NRLIB from MID)>>
<<PFR.spad (SPAD from IN)>>

<<PFRPAC.o (O from NRLIB)>>
<<PFRPAC.NRLIB (NRLIB from MID)>>
<<PFRPAC.spad (SPAD from IN)>>

<<pfr.spad (SPAD from IN)>>
<<pfr.spad.dvi (DOC from IN)>>

<<IPF.o (O from NRLIB)>>
<<IPF.NRLIB (NRLIB from MID)>>
<<IPF.spad (SPAD from IN)>>

<<PF.o (O from NRLIB)>>
<<PF.NRLIB (NRLIB from MID)>>
<<PF.spad (SPAD from IN)>>

<<pf.spad (SPAD from IN)>>
<<pf.spad.dvi (DOC from IN)>>

<<PGCD.o (O from NRLIB)>>
<<PGCD.NRLIB (NRLIB from MID)>>
<<PGCD.spad (SPAD from IN)>>

<<pgcd.spad (SPAD from IN)>>
<<pgcd.spad.dvi (DOC from IN)>>

<<PGROEB.o (O from NRLIB)>>
<<PGROEB.NRLIB (NRLIB from MID)>>
<<PGROEB.spad (SPAD from IN)>>

<<pgrobner.spad (SPAD from IN)>>
<<pgrobner.spad.dvi (DOC from IN)>>

<<PINTERP.o (O from NRLIB)>>
<<PINTERP.NRLIB (NRLIB from MID)>>
<<PINTERP.spad (SPAD from IN)>>

<<PINTERPA.o (O from NRLIB)>>
<<PINTERPA.NRLIB (NRLIB from MID)>>
<<PINTERPA.spad (SPAD from IN)>>

<<pinterp.spad (SPAD from IN)>>
<<pinterp.spad.dvi (DOC from IN)>>

<<PLEQN.o (O from NRLIB)>>
<<PLEQN.NRLIB (NRLIB from MID)>>
<<PLEQN.spad (SPAD from IN)>>

<<pleqn.spad (SPAD from IN)>>
<<pleqn.spad.dvi (DOC from IN)>>

<<PLOT3D.o (O from NRLIB)>>
<<PLOT3D.NRLIB (NRLIB from MID)>>
<<PLOT3D.spad (SPAD from IN)>>

<<plot3d.spad (SPAD from IN)>>
<<plot3d.spad.dvi (DOC from IN)>>

<<PLOT1.o (O from NRLIB)>>
<<PLOT1.NRLIB (NRLIB from MID)>>
<<PLOT1.spad (SPAD from IN)>>

<<PLOT.o (O from NRLIB)>>
<<PLOT.NRLIB (NRLIB from MID)>>
<<PLOT.spad (SPAD from IN)>>

<<plot.spad (SPAD from IN)>>
<<plot.spad.dvi (DOC from IN)>>

<<PLOTTOOL.o (O from NRLIB)>>
<<PLOTTOOL.NRLIB (NRLIB from MID)>>
<<PLOTTOOL.spad (SPAD from IN)>>

<<plottool.spad (SPAD from IN)>>
<<plottool.spad.dvi (DOC from IN)>>

<<GPOLSET.o (O from NRLIB)>>
<<GPOLSET.NRLIB (NRLIB from MID)>>
<<GPOLSET.spad (SPAD from IN)>>

<<PSETCAT-.o (O from NRLIB)>>
<<PSETCAT-.NRLIB (NRLIB from MID)>>
<<PSETCAT.o (O from NRLIB)>>
<<PSETCAT.NRLIB (NRLIB from MID)>>
<<PSETCAT.spad (SPAD from IN)>>
<<PSETCAT-.o (BOOTSTRAP from MID)>>
<<PSETCAT-.lsp (LISP from IN)>>
<<PSETCAT.o (BOOTSTRAP from MID)>>
<<PSETCAT.lsp (LISP from IN)>>

<<polset.spad (SPAD from IN)>>
<<polset.spad.dvi (DOC from IN)>>

<<MPC2.o (O from NRLIB)>>
<<MPC2.NRLIB (NRLIB from MID)>>
<<MPC2.spad (SPAD from IN)>>

<<MPC3.o (O from NRLIB)>>
<<MPC3.NRLIB (NRLIB from MID)>>
<<MPC3.spad (SPAD from IN)>>

<<POLTOPOL.o (O from NRLIB)>>
<<POLTOPOL.NRLIB (NRLIB from MID)>>
<<POLTOPOL.spad (SPAD from IN)>>

<<poltopol.spad (SPAD from IN)>>
<<poltopol.spad.dvi (DOC from IN)>>

<<AMR-.o (O from NRLIB)>>
<<AMR-.NRLIB (NRLIB from MID)>>
<<AMR.o (O from NRLIB)>>
<<AMR.NRLIB (NRLIB from MID)>>
<<AMR.spad (SPAD from IN)>>

<<COMMUPC.o (O from NRLIB)>>
<<COMMUPC.NRLIB (NRLIB from MID)>>
<<COMMUPC.spad (SPAD from IN)>>

<<FAMR-.o (O from NRLIB)>>
<<FAMR-.NRLIB (NRLIB from MID)>>
<<FAMR.o (O from NRLIB)>>
<<FAMR.NRLIB (NRLIB from MID)>>
<<FAMR.spad (SPAD from IN)>>

<<POLYCAT-.o (O from NRLIB)>>
<<POLYCAT-.NRLIB (NRLIB from MID)>>
<<POLYCAT.o (O from NRLIB)>>
<<POLYCAT.NRLIB (NRLIB from MID)>>
<<POLYCAT.spad (SPAD from IN)>>
<<POLYCAT-.o (BOOTSTRAP from MID)>>
<<POLYCAT-.lsp (LISP from IN)>>
<<POLYCAT.o (BOOTSTRAP from MID)>>
<<POLYCAT.lsp (LISP from IN)>>

<<POLYLIFT.o (O from NRLIB)>>
<<POLYLIFT.NRLIB (NRLIB from MID)>>
<<POLYLIFT.spad (SPAD from IN)>>

<<UPOLYC-.o (O from NRLIB)>>
<<UPOLYC-.NRLIB (NRLIB from MID)>>
<<UPOLYC.o (O from NRLIB)>>
<<UPOLYC.NRLIB (NRLIB from MID)>>
<<UPOLYC.spad (SPAD from IN)>>
<<UPOLYC-.o (BOOTSTRAP from MID)>>
<<UPOLYC-.lsp (LISP from IN)>>
<<UPOLYC.o (BOOTSTRAP from MID)>>
<<UPOLYC.lsp (LISP from IN)>>

<<polycat.spad (SPAD from IN)>>
<<polycat.spad.dvi (DOC from IN)>>

<<FM.o (O from NRLIB)>>
<<FM.NRLIB (NRLIB from MID)>>
<<FM.spad (SPAD from IN)>>

<<POLY2UP.o (O from NRLIB)>>
<<POLY2UP.NRLIB (NRLIB from MID)>>
<<POLY2UP.spad (SPAD from IN)>>

<<PR.o (O from NRLIB)>>
<<PR.NRLIB (NRLIB from MID)>>
<<PR.spad (SPAD from IN)>>

<<PSQFR.o (O from NRLIB)>>
<<PSQFR.NRLIB (NRLIB from MID)>>
<<PSQFR.spad (SPAD from IN)>>

<<SUP.o (O from NRLIB)>>
<<SUP.NRLIB (NRLIB from MID)>>
<<SUP.spad (SPAD from IN)>>

<<SUP2.o (O from NRLIB)>>
<<SUP2.NRLIB (NRLIB from MID)>>
<<SUP2.spad (SPAD from IN)>>

<<UPMP.o (O from NRLIB)>>
<<UPMP.NRLIB (NRLIB from MID)>>
<<UPMP.spad (SPAD from IN)>>

<<UPOLYC2.o (O from NRLIB)>>
<<UPOLYC2.NRLIB (NRLIB from MID)>>
<<UPOLYC2.spad (SPAD from IN)>>

<<UP.o (O from NRLIB)>>
<<UP.NRLIB (NRLIB from MID)>>
<<UP.spad (SPAD from IN)>>

<<UP2.o (O from NRLIB)>>
<<UP2.NRLIB (NRLIB from MID)>>
<<UP2.spad (SPAD from IN)>>

<<UPSQFREE.o (O from NRLIB)>>
<<UPSQFREE.NRLIB (NRLIB from MID)>>
<<UPSQFREE.spad (SPAD from IN)>>

<<poly.spad (SPAD from IN)>>
<<poly.spad.dvi (DOC from IN)>>

<<FSPRMELT.o (O from NRLIB)>>
<<FSPRMELT.NRLIB (NRLIB from MID)>>
<<FSPRMELT.spad (SPAD from IN)>>

<<PRIMELT.o (O from NRLIB)>>
<<PRIMELT.NRLIB (NRLIB from MID)>>
<<PRIMELT.spad (SPAD from IN)>>

<<primelt.spad (SPAD from IN)>>
<<primelt.spad.dvi (DOC from IN)>>

<<PRINT.o (O from NRLIB)>>
<<PRINT.NRLIB (NRLIB from MID)>>
<<PRINT.spad (SPAD from IN)>>

<<print.spad (SPAD from IN)>>
<<print.spad.dvi (DOC from IN)>>

<<PRODUCT.o (O from NRLIB)>>
<<PRODUCT.NRLIB (NRLIB from MID)>>
<<PRODUCT.spad (SPAD from IN)>>

<<product.spad (SPAD from IN)>>
<<product.spad.dvi (DOC from IN)>>

<<PRS.o (O from NRLIB)>>
<<PRS.NRLIB (NRLIB from MID)>>
<<PRS.spad (SPAD from IN)>>

<<prs.spad (SPAD from IN)>>
<<prs.spad.dvi (DOC from IN)>>

<<SYMPOLY.o (O from NRLIB)>>
<<SYMPOLY.NRLIB (NRLIB from MID)>>
<<SYMPOLY.spad (SPAD from IN)>>

<<PRTITION.o (O from NRLIB)>>
<<PRTITION.NRLIB (NRLIB from MID)>>
<<PRTITION.spad (SPAD from IN)>>

<<prtition.spad (SPAD from IN)>>
<<prtition.spad.dvi (DOC from IN)>>

<<MTSCAT.o (O from NRLIB)>>
<<MTSCAT.NRLIB (NRLIB from MID)>>
<<MTSCAT.spad (SPAD from IN)>>
<<MTSCAT.o (BOOTSTRAP from MID)>>
<<MTSCAT.lsp (LISP from IN)>>

<<PSCAT-.o (O from NRLIB)>>
<<PSCAT-.NRLIB (NRLIB from MID)>>
<<PSCAT.o (O from NRLIB)>>
<<PSCAT.NRLIB (NRLIB from MID)>>
<<PSCAT.spad (SPAD from IN)>>

<<ULSCAT.o (O from NRLIB)>>
<<ULSCAT.NRLIB (NRLIB from MID)>>
<<ULSCAT.spad (SPAD from IN)>>
<<ULSCAT.o (BOOTSTRAP from MID)>>
<<ULSCAT.lsp (LISP from IN)>>

<<UPSCAT-.o (O from NRLIB)>>
<<UPSCAT-.NRLIB (NRLIB from MID)>>
<<UPSCAT.o (O from NRLIB)>>
<<UPSCAT.NRLIB (NRLIB from MID)>>
<<UPSCAT.spad (SPAD from IN)>>

<<UPXSCAT.o (O from NRLIB)>>
<<UPXSCAT.NRLIB (NRLIB from MID)>>
<<UPXSCAT.spad (SPAD from IN)>>

<<UTSCAT-.o (O from NRLIB)>>
<<UTSCAT-.NRLIB (NRLIB from MID)>>
<<UTSCAT.o (O from NRLIB)>>
<<UTSCAT.NRLIB (NRLIB from MID)>>
<<UTSCAT.spad (SPAD from IN)>>

<<pscat.spad (SPAD from IN)>>
<<pscat.spad.dvi (DOC from IN)>>

<<PSEUDLIN.o (O from NRLIB)>>
<<PSEUDLIN.NRLIB (NRLIB from MID)>>
<<PSEUDLIN.spad (SPAD from IN)>>

<<pseudolin.spad (SPAD from IN)>>
<<pseudolin.spad.dvi (DOC from IN)>>

<<PTRANFN.o (O from NRLIB)>>
<<PTRANFN.NRLIB (NRLIB from MID)>>
<<PTRANFN.spad (SPAD from IN)>>

<<ptranfn.spad (SPAD from IN)>>
<<ptranfn.spad.dvi (DOC from IN)>>

<<UPXS.o (O from NRLIB)>>
<<UPXS.NRLIB (NRLIB from MID)>>
<<UPXS.spad (SPAD from IN)>>

<<UPXSCCA-.o (O from NRLIB)>>
<<UPXSCCA-.NRLIB (NRLIB from MID)>>
<<UPXSCCA.o (O from NRLIB)>>
<<UPXSCCA.NRLIB (NRLIB from MID)>>
<<UPXSCCA.spad (SPAD from IN)>>

<<UPXSCONS.o (O from NRLIB)>>
<<UPXSCONS.NRLIB (NRLIB from MID)>>
<<UPXSCONS.spad (SPAD from IN)>>

<<UPXS2.o (O from NRLIB)>>
<<UPXS2.NRLIB (NRLIB from MID)>>
<<UPXS2.spad (SPAD from IN)>>

<<puiseux.spad (SPAD from IN)>>
<<puiseux.spad.dvi (DOC from IN)>>

<<QALGSET.o (O from NRLIB)>>
<<QALGSET.NRLIB (NRLIB from MID)>>
<<QALGSET.spad (SPAD from IN)>>

<<QALGSET2.o (O from NRLIB)>>
<<QALGSET2.NRLIB (NRLIB from MID)>>
<<QALGSET2.spad (SPAD from IN)>>

<<qalgset.spad (SPAD from IN)>>
<<qalgset.spad.dvi (DOC from IN)>>

<<QUAT.o (O from NRLIB)>>
<<QUAT.NRLIB (NRLIB from MID)>>
<<QUAT.spad (SPAD from IN)>>

<<QUATCAT-.o (O from NRLIB)>>
<<QUATCAT-.NRLIB (NRLIB from MID)>>
<<QUATCAT.o (O from NRLIB)>>
<<QUATCAT.NRLIB (NRLIB from MID)>>
<<QUATCAT.spad (SPAD from IN)>>

<<QUATCT2.o (O from NRLIB)>>
<<QUATCT2.NRLIB (NRLIB from MID)>>
<<QUATCT2.spad (SPAD from IN)>>

<<quat.spad (SPAD from IN)>>
<<quat.spad.dvi (DOC from IN)>>

<<REP.o (O from NRLIB)>>
<<REP.NRLIB (NRLIB from MID)>>
<<REP.spad (SPAD from IN)>>

<<radeigen.spad (SPAD from IN)>>
<<radeigen.spad.dvi (DOC from IN)>>

<<BINARY.o (O from NRLIB)>>
<<BINARY.NRLIB (NRLIB from MID)>>
<<BINARY.spad (SPAD from IN)>>

<<DECIMAL.o (O from NRLIB)>>
<<DECIMAL.NRLIB (NRLIB from MID)>>
<<DECIMAL.spad (SPAD from IN)>>

<<HEXADEC.o (O from NRLIB)>>
<<HEXADEC.NRLIB (NRLIB from MID)>>
<<HEXADEC.spad (SPAD from IN)>>

<<RADIX.o (O from NRLIB)>>
<<RADIX.NRLIB (NRLIB from MID)>>
<<RADIX.spad (SPAD from IN)>>

<<RADUTIL.o (O from NRLIB)>>
<<RADUTIL.NRLIB (NRLIB from MID)>>
<<RADUTIL.spad (SPAD from IN)>>

<<radix.spad (SPAD from IN)>>
<<radix.spad.dvi (DOC from IN)>>

<<INTBIT.o (O from NRLIB)>>
<<INTBIT.NRLIB (NRLIB from MID)>>
<<INTBIT.spad (SPAD from IN)>>

<<RANDSRC.o (O from NRLIB)>>
<<RANDSRC.NRLIB (NRLIB from MID)>>
<<RANDSRC.spad (SPAD from IN)>>

<<RDIST.o (O from NRLIB)>>
<<RDIST.NRLIB (NRLIB from MID)>>
<<RDIST.spad (SPAD from IN)>>

<<RFDIST.o (O from NRLIB)>>
<<RFDIST.NRLIB (NRLIB from MID)>>
<<RFDIST.spad (SPAD from IN)>>

<<RIDIST.o (O from NRLIB)>>
<<RIDIST.NRLIB (NRLIB from MID)>>
<<RIDIST.spad (SPAD from IN)>>

<<random.spad (SPAD from IN)>>
<<random.spad.dvi (DOC from IN)>>

<<RATFACT.o (O from NRLIB)>>
<<RATFACT.NRLIB (NRLIB from MID)>>
<<RATFACT.spad (SPAD from IN)>>

<<ratfact.spad (SPAD from IN)>>
<<ratfact.spad.dvi (DOC from IN)>>

<<INTTOOLS.o (O from NRLIB)>>
<<INTTOOLS.NRLIB (NRLIB from MID)>>
<<INTTOOLS.spad (SPAD from IN)>>

<<RDEEF.o (O from NRLIB)>>
<<RDEEF.NRLIB (NRLIB from MID)>>
<<RDEEF.spad (SPAD from IN)>>

<<rdeef.spad (SPAD from IN)>>
<<rdeef.spad.dvi (DOC from IN)>>

<<RDETR.o (O from NRLIB)>>
<<RDETR.NRLIB (NRLIB from MID)>>
<<RDETR.spad (SPAD from IN)>>

<<rderf.spad (SPAD from IN)>>
<<rderf.spad.dvi (DOC from IN)>>

<<RDEEFS.o (O from NRLIB)>>
<<RDEEFS.NRLIB (NRLIB from MID)>>
<<RDEEFS.spad (SPAD from IN)>>

<<RDETRS.o (O from NRLIB)>>
<<RDETRS.NRLIB (NRLIB from MID)>>
<<RDETRS.spad (SPAD from IN)>>

<<rdesys.spad (SPAD from IN)>>
<<rdesys.spad.dvi (DOC from IN)>>

<<REAL0Q.o (O from NRLIB)>>
<<REAL0Q.NRLIB (NRLIB from MID)>>
<<REAL0Q.spad (SPAD from IN)>>

<<real0q.spad (SPAD from IN)>>
<<real0q.spad.dvi (DOC from IN)>>

<<REAL0.o (O from NRLIB)>>
<<REAL0.NRLIB (NRLIB from MID)>>
<<REAL0.spad (SPAD from IN)>>

<<realzero.spad (SPAD from IN)>>
<<realzero.spad.dvi (DOC from IN)>>

<<POLUTIL.o (O from NRLIB)>>
<<POLUTIL.NRLIB (NRLIB from MID)>>
<<POLUTIL.spad (SPAD from IN)>>

<<RCFIELD-.o (O from NRLIB)>>
<<RCFIELD-.NRLIB (NRLIB from MID)>>
<<RCFIELD.o (O from NRLIB)>>
<<RCFIELD.NRLIB (NRLIB from MID)>>
<<RCFIELD.spad (SPAD from IN)>>

<<RECLOS.o (O from NRLIB)>>
<<RECLOS.NRLIB (NRLIB from MID)>>
<<RECLOS.spad (SPAD from IN)>>

<<ROIRC.o (O from NRLIB)>>
<<ROIRC.NRLIB (NRLIB from MID)>>
<<ROIRC.spad (SPAD from IN)>>

<<RRCC-.o (O from NRLIB)>>
<<RRCC-.NRLIB (NRLIB from MID)>>
<<RRCC.o (O from NRLIB)>>
<<RRCC.NRLIB (NRLIB from MID)>>
<<RRCC.spad (SPAD from IN)>>

<<reclos.spad (SPAD from IN)>>
<<reclos.spad.dvi (DOC from IN)>>

<<RSETCAT-.o (O from NRLIB)>>
<<RSETCAT-.NRLIB (NRLIB from MID)>>
<<RSETCAT.o (O from NRLIB)>>
<<RSETCAT.NRLIB (NRLIB from MID)>>
<<RSETCAT.spad (SPAD from IN)>>

<<regset.spad (SPAD from IN)>>
<<regset.spad.dvi (DOC from IN)>>

<<REP1.o (O from NRLIB)>>
<<REP1.NRLIB (NRLIB from MID)>>
<<REP1.spad (SPAD from IN)>>

<<rep1.spad (SPAD from IN)>>
<<rep1.spad.dvi (DOC from IN)>>

<<REP2.o (O from NRLIB)>>
<<REP2.NRLIB (NRLIB from MID)>>
<<REP2.spad (SPAD from IN)>>

<<rep2.spad (SPAD from IN)>>
<<rep2.spad.dvi (DOC from IN)>>

<<RESRING.o (O from NRLIB)>>
<<RESRING.NRLIB (NRLIB from MID)>>
<<RESRING.spad (SPAD from IN)>>

<<resring.spad (SPAD from IN)>>
<<resring.spad.dvi (DOC from IN)>>

<<FRETRCT-.o (O from NRLIB)>>
<<FRETRCT-.NRLIB (NRLIB from MID)>>
<<FRETRCT.o (O from NRLIB)>>
<<FRETRCT.NRLIB (NRLIB from MID)>>
<<FRETRCT.spad (SPAD from IN)>>

<<INTRET.o (O from NRLIB)>>
<<INTRET.NRLIB (NRLIB from MID)>>
<<INTRET.spad (SPAD from IN)>>

<<RATRET.o (O from NRLIB)>>
<<RATRET.NRLIB (NRLIB from MID)>>
<<RATRET.spad (SPAD from IN)>>

<<retract.spad (SPAD from IN)>>
<<retract.spad.dvi (DOC from IN)>>

<<POLYCATQ.o (O from NRLIB)>>
<<POLYCATQ.NRLIB (NRLIB from MID)>>
<<POLYCATQ.spad (SPAD from IN)>>

<<RF.o (O from NRLIB)>>
<<RF.NRLIB (NRLIB from MID)>>
<<RF.spad (SPAD from IN)>>

<<rf.spad (SPAD from IN)>>
<<rf.spad.dvi (DOC from IN)>>

<<ODEPRRIC.o (O from NRLIB)>>
<<ODEPRRIC.NRLIB (NRLIB from MID)>>
<<ODEPRRIC.spad (SPAD from IN)>>

<<ODERTRIC.o (O from NRLIB)>>
<<ODERTRIC.NRLIB (NRLIB from MID)>>
<<ODERTRIC.spad (SPAD from IN)>>

<<riccati.spad (SPAD from IN)>>
<<riccati.spad.dvi (DOC from IN)>>

<<ATTRBUT.o (O from NRLIB)>>
<<ATTRBUT.NRLIB (NRLIB from MID)>>
<<ATTRBUT.spad (SPAD from IN)>>

<<ROUTINE.o (O from NRLIB)>>
<<ROUTINE.NRLIB (NRLIB from MID)>>
<<ROUTINE.spad (SPAD from IN)>>

<<routines.spad (SPAD from IN)>>
<<routines.spad.dvi (DOC from IN)>>

<<APPRULE.o (O from NRLIB)>>
<<APPRULE.NRLIB (NRLIB from MID)>>
<<APPRULE.spad (SPAD from IN)>>

<<RULE.o (O from NRLIB)>>
<<RULE.NRLIB (NRLIB from MID)>>
<<RULE.spad (SPAD from IN)>>

<<RULESET.o (O from NRLIB)>>
<<RULESET.NRLIB (NRLIB from MID)>>
<<RULESET.spad (SPAD from IN)>>

<<rule.spad (SPAD from IN)>>
<<rule.spad.dvi (DOC from IN)>>

<<INCRMAPS.o (O from NRLIB)>>
<<INCRMAPS.NRLIB (NRLIB from MID)>>
<<INCRMAPS.spad (SPAD from IN)>>

<<SEG.o (O from NRLIB)>>
<<SEG.NRLIB (NRLIB from MID)>>
<<SEG.spad (SPAD from IN)>>

<<SEG2.o (O from NRLIB)>>
<<SEG2.NRLIB (NRLIB from MID)>>
<<SEG2.spad (SPAD from IN)>>

<<SEGBIND.o (O from NRLIB)>>
<<SEGBIND.NRLIB (NRLIB from MID)>>
<<SEGBIND.spad (SPAD from IN)>>

<<SEGBIND2.o (O from NRLIB)>>
<<SEGBIND2.NRLIB (NRLIB from MID)>>
<<SEGBIND2.spad (SPAD from IN)>>

<<SEGCAT.o (O from NRLIB)>>
<<SEGCAT.NRLIB (NRLIB from MID)>>
<<SEGCAT.spad (SPAD from IN)>>

<<SEGXCAT.o (O from NRLIB)>>
<<SEGXCAT.NRLIB (NRLIB from MID)>>
<<SEGXCAT.spad (SPAD from IN)>>

<<UNISEG.o (O from NRLIB)>>
<<UNISEG.NRLIB (NRLIB from MID)>>
<<UNISEG.spad (SPAD from IN)>>

<<UNISEG2.o (O from NRLIB)>>
<<UNISEG2.NRLIB (NRLIB from MID)>>
<<UNISEG2.spad (SPAD from IN)>>

<<seg.spad (SPAD from IN)>>
<<seg.spad.dvi (DOC from IN)>>

<<UDPO.o (O from NRLIB)>>
<<UDPO.NRLIB (NRLIB from MID)>>
<<UDPO.spad (SPAD from IN)>>

<<UDVO.o (O from NRLIB)>>
<<UDVO.NRLIB (NRLIB from MID)>>
<<UDVO.spad (SPAD from IN)>>

<<setorder.spad (SPAD from IN)>>
<<setorder.spad.dvi (DOC from IN)>>

<<SET.o (O from NRLIB)>>
<<SET.NRLIB (NRLIB from MID)>>
<<SET.spad (SPAD from IN)>>

<<sets.spad (SPAD from IN)>>
<<sets.spad.dvi (DOC from IN)>>

<<SEX.o (O from NRLIB)>>
<<SEX.NRLIB (NRLIB from MID)>>
<<SEX.spad (SPAD from IN)>>

<<SEXCAT.o (O from NRLIB)>>
<<SEXCAT.NRLIB (NRLIB from MID)>>
<<SEXCAT.spad (SPAD from IN)>>

<<SEXOF.o (O from NRLIB)>>
<<SEXOF.NRLIB (NRLIB from MID)>>
<<SEXOF.spad (SPAD from IN)>>

<<sex.spad (SPAD from IN)>>
<<sex.spad.dvi (DOC from IN)>>

<<DFLOAT.o (O from NRLIB)>>
<<DFLOAT.NRLIB (NRLIB from MID)>>
<<DFLOAT.spad (SPAD from IN)>>
<<DFLOAT.o (BOOTSTRAP from MID)>>
<<DFLOAT.lsp (LISP from IN)>>

<<FPS-.o (O from NRLIB)>>
<<FPS-.NRLIB (NRLIB from MID)>>
<<FPS.o (O from NRLIB)>>
<<FPS.NRLIB (NRLIB from MID)>>
<<FPS.spad (SPAD from IN)>>
<<FPS-.o (BOOTSTRAP from MID)>>
<<FPS-.lsp (LISP from IN)>>
<<FPS.o (BOOTSTRAP from MID)>>
<<FPS.lsp (LISP from IN)>>

<<RADCAT-.o (O from NRLIB)>>
<<RADCAT-.NRLIB (NRLIB from MID)>>
<<RADCAT.o (O from NRLIB)>>
<<RADCAT.NRLIB (NRLIB from MID)>>
<<RADCAT.spad (SPAD from IN)>>

<<REAL.o (O from NRLIB)>>
<<REAL.NRLIB (NRLIB from MID)>>
<<REAL.spad (SPAD from IN)>>

<<RNS-.o (O from NRLIB)>>
<<RNS-.NRLIB (NRLIB from MID)>>
<<RNS.o (O from NRLIB)>>
<<RNS.NRLIB (NRLIB from MID)>>
<<RNS.spad (SPAD from IN)>>
<<RNS-.o (BOOTSTRAP from MID)>>
<<RNS-.lsp (LISP from IN)>>
<<RNS.o (BOOTSTRAP from MID)>>
<<RNS.lsp (LISP from IN)>>

<<sf.spad (SPAD from IN)>>
<<sf.spad.dvi (DOC from IN)>>

<<SGCF.o (O from NRLIB)>>
<<SGCF.NRLIB (NRLIB from MID)>>
<<SGCF.spad (SPAD from IN)>>

<<sgcf.spad (SPAD from IN)>>
<<sgcf.spad.dvi (DOC from IN)>>

<<INPSIGN.o (O from NRLIB)>>
<<INPSIGN.NRLIB (NRLIB from MID)>>
<<INPSIGN.spad (SPAD from IN)>>

<<LIMITRF.o (O from NRLIB)>>
<<LIMITRF.NRLIB (NRLIB from MID)>>
<<LIMITRF.spad (SPAD from IN)>>

<<SIGNRF.o (O from NRLIB)>>
<<SIGNRF.NRLIB (NRLIB from MID)>>
<<SIGNRF.spad (SPAD from IN)>>

<<TOOLSIGN.o (O from NRLIB)>>
<<TOOLSIGN.NRLIB (NRLIB from MID)>>
<<TOOLSIGN.spad (SPAD from IN)>>

<<sign.spad (SPAD from IN)>>
<<sign.spad.dvi (DOC from IN)>>

<<SINT.o (O from NRLIB)>>
<<SINT.NRLIB (NRLIB from MID)>>
<<SINT.spad (SPAD from IN)>>
<<SINT.o (BOOTSTRAP from MID)>>
<<SINT.lsp (LISP from IN)>>

<<INS-.o (O from NRLIB)>>
<<INS-.NRLIB (NRLIB from MID)>>
<<INS.o (O from NRLIB)>>
<<INS.NRLIB (NRLIB from MID)>>
<<INS.spad (SPAD from IN)>>
<<INS-.o (BOOTSTRAP from MID)>>
<<INS-.lsp (LISP from IN)>>
<<INS.o (BOOTSTRAP from MID)>>
<<INS.lsp (LISP from IN)>>

<<si.spad (SPAD from IN)>>
<<si.spad.dvi (DOC from IN)>>

<<SMITH.o (O from NRLIB)>>
<<SMITH.NRLIB (NRLIB from MID)>>
<<SMITH.spad (SPAD from IN)>>

<<smith.spad (SPAD from IN)>>
<<smith.spad.dvi (DOC from IN)>>

<<DIOSP.o (O from NRLIB)>>
<<DIOSP.NRLIB (NRLIB from MID)>>
<<DIOSP.spad (SPAD from IN)>>

<<solvedio.spad (SPAD from IN)>>
<<solvedio.spad.dvi (DOC from IN)>>

<<SOLVEFOR.o (O from NRLIB)>>
<<SOLVEFOR.NRLIB (NRLIB from MID)>>
<<SOLVEFOR.spad (SPAD from IN)>>

<<solvefor.spad (SPAD from IN)>>
<<solvefor.spad.dvi (DOC from IN)>>

<<LSMP.o (O from NRLIB)>>
<<LSMP.NRLIB (NRLIB from MID)>>
<<LSMP.spad (SPAD from IN)>>

<<LSMP1.o (O from NRLIB)>>
<<LSMP1.NRLIB (NRLIB from MID)>>
<<LSMP1.spad (SPAD from IN)>>

<<LSPP.o (O from NRLIB)>>
<<LSPP.NRLIB (NRLIB from MID)>>
<<LSPP.spad (SPAD from IN)>>

<<solvelin.spad (SPAD from IN)>>
<<solvelin.spad.dvi (DOC from IN)>>

<<SOLVERAD.o (O from NRLIB)>>
<<SOLVERAD.NRLIB (NRLIB from MID)>>
<<SOLVERAD.spad (SPAD from IN)>>

<<solverad.spad (SPAD from IN)>>
<<solverad.spad.dvi (DOC from IN)>>

<<SORTPAK.o (O from NRLIB)>>
<<SORTPAK.NRLIB (NRLIB from MID)>>
<<SORTPAK.spad (SPAD from IN)>>

<<sortpak.spad (SPAD from IN)>>
<<sortpak.spad.dvi (DOC from IN)>>

<<SPACEC.o (O from NRLIB)>>
<<SPACEC.NRLIB (NRLIB from MID)>>
<<SPACEC.spad (SPAD from IN)>>

<<SPACE3.o (O from NRLIB)>>
<<SPACE3.NRLIB (NRLIB from MID)>>
<<SPACE3.spad (SPAD from IN)>>

<<TOPSP.o (O from NRLIB)>>
<<TOPSP.NRLIB (NRLIB from MID)>>
<<TOPSP.spad (SPAD from IN)>>

<<space.spad (SPAD from IN)>>
<<space.spad.dvi (DOC from IN)>>

<<DFSFUN.o (O from NRLIB)>>
<<DFSFUN.NRLIB (NRLIB from MID)>>
<<DFSFUN.spad (SPAD from IN)>>

<<NTPOLFN.o (O from NRLIB)>>
<<NTPOLFN.NRLIB (NRLIB from MID)>>
<<NTPOLFN.spad (SPAD from IN)>>

<<ORTHPOL.o (O from NRLIB)>>
<<ORTHPOL.NRLIB (NRLIB from MID)>>
<<ORTHPOL.spad (SPAD from IN)>>

<<special.spad (SPAD from IN)>>
<<special.spad.dvi (DOC from IN)>>

<<sregset.spad (SPAD from IN)>>
<<sregset.spad.dvi (DOC from IN)>>

<<NAGS.o (O from NRLIB)>>
<<NAGS.NRLIB (NRLIB from MID)>>
<<NAGS.spad (SPAD from IN)>>

<<s.spad (SPAD from IN)>>
<<s.spad.dvi (DOC from IN)>>

<<CSTTOOLS.o (O from NRLIB)>>
<<CSTTOOLS.NRLIB (NRLIB from MID)>>
<<CSTTOOLS.spad (SPAD from IN)>>

<<LZSTAGG-.o (O from NRLIB)>>
<<LZSTAGG-.NRLIB (NRLIB from MID)>>
<<LZSTAGG.o (O from NRLIB)>>
<<LZSTAGG.NRLIB (NRLIB from MID)>>
<<LZSTAGG.spad (SPAD from IN)>>

<<STREAM.o (O from NRLIB)>>
<<STREAM.NRLIB (NRLIB from MID)>>
<<STREAM.spad (SPAD from IN)>>

<<STREAM1.o (O from NRLIB)>>
<<STREAM1.NRLIB (NRLIB from MID)>>
<<STREAM1.spad (SPAD from IN)>>

<<STREAM2.o (O from NRLIB)>>
<<STREAM2.NRLIB (NRLIB from MID)>>
<<STREAM2.spad (SPAD from IN)>>

<<STREAM3.o (O from NRLIB)>>
<<STREAM3.NRLIB (NRLIB from MID)>>
<<STREAM3.spad (SPAD from IN)>>

<<stream.spad (SPAD from IN)>>
<<stream.spad.dvi (DOC from IN)>>

<<CCLASS.o (O from NRLIB)>>
<<CCLASS.NRLIB (NRLIB from MID)>>
<<CCLASS.spad (SPAD from IN)>>

<<CHAR.o (O from NRLIB)>>
<<CHAR.NRLIB (NRLIB from MID)>>
<<CHAR.spad (SPAD from IN)>>
<<CHAR.o (BOOTSTRAP from MID)>>
<<CHAR.lsp (LISP from IN)>>

<<ISTRING.o (O from NRLIB)>>
<<ISTRING.NRLIB (NRLIB from MID)>>
<<ISTRING.spad (SPAD from IN)>>
<<ISTRING.o (BOOTSTRAP from MID)>>
<<ISTRING.lsp (LISP from IN)>>

<<STRICAT.o (O from NRLIB)>>
<<STRICAT.NRLIB (NRLIB from MID)>>
<<STRICAT.spad (SPAD from IN)>>

<<STRING.o (O from NRLIB)>>
<<STRING.NRLIB (NRLIB from MID)>>
<<STRING.spad (SPAD from IN)>>

<<string.spad (SPAD from IN)>>
<<string.spad.dvi (DOC from IN)>>

<<STTAYLOR.o (O from NRLIB)>>
<<STTAYLOR.NRLIB (NRLIB from MID)>>
<<STTAYLOR.spad (SPAD from IN)>>

<<sttaylor.spad (SPAD from IN)>>
<<sttaylor.spad.dvi (DOC from IN)>>

<<STTF.o (O from NRLIB)>>
<<STTF.NRLIB (NRLIB from MID)>>
<<STTF.spad (SPAD from IN)>>

<<STTFNC.o (O from NRLIB)>>
<<STTFNC.NRLIB (NRLIB from MID)>>
<<STTFNC.spad (SPAD from IN)>>

<<sttf.spad (SPAD from IN)>>
<<sttf.spad.dvi (DOC from IN)>>

<<SHP.o (O from NRLIB)>>
<<SHP.NRLIB (NRLIB from MID)>>
<<SHP.spad (SPAD from IN)>>

<<sturm.spad (SPAD from IN)>>
<<sturm.spad.dvi (DOC from IN)>>

<<SUCH.o (O from NRLIB)>>
<<SUCH.NRLIB (NRLIB from MID)>>
<<SUCH.spad (SPAD from IN)>>

<<suchthat.spad (SPAD from IN)>>
<<suchthat.spad.dvi (DOC from IN)>>

<<SULS.o (O from NRLIB)>>
<<SULS.NRLIB (NRLIB from MID)>>
<<SULS.spad (SPAD from IN)>>

<<suls.spad (SPAD from IN)>>
<<suls.spad.dvi (DOC from IN)>>

<<GOSPER.o (O from NRLIB)>>
<<GOSPER.NRLIB (NRLIB from MID)>>
<<GOSPER.spad (SPAD from IN)>>

<<ISUMP.o (O from NRLIB)>>
<<ISUMP.NRLIB (NRLIB from MID)>>
<<ISUMP.spad (SPAD from IN)>>

<<SUMRF.o (O from NRLIB)>>
<<SUMRF.NRLIB (NRLIB from MID)>>
<<SUMRF.spad (SPAD from IN)>>

<<sum.spad (SPAD from IN)>>
<<sum.spad.dvi (DOC from IN)>>

<<ISUPS.o (O from NRLIB)>>
<<ISUPS.NRLIB (NRLIB from MID)>>
<<ISUPS.spad (SPAD from IN)>>

<<sups.spad (SPAD from IN)>>
<<sups.spad.dvi (DOC from IN)>>

<<SUPXS.o (O from NRLIB)>>
<<SUPXS.NRLIB (NRLIB from MID)>>
<<SUPXS.spad (SPAD from IN)>>

<<supxs.spad (SPAD from IN)>>
<<supxs.spad.dvi (DOC from IN)>>

<<SUTS.o (O from NRLIB)>>
<<SUTS.NRLIB (NRLIB from MID)>>
<<SUTS.spad (SPAD from IN)>>

<<suts.spad (SPAD from IN)>>
<<suts.spad.dvi (DOC from IN)>>

<<SYMBOL.o (O from NRLIB)>>
<<SYMBOL.NRLIB (NRLIB from MID)>>
<<SYMBOL.spad (SPAD from IN)>>
<<SYMBOL.o (BOOTSTRAP from MID)>>
<<SYMBOL.lsp (LISP from IN)>>

<<symbol.spad (SPAD from IN)>>
<<symbol.spad.dvi (DOC from IN)>>

<<SYSSOLP.o (O from NRLIB)>>
<<SYSSOLP.NRLIB (NRLIB from MID)>>
<<SYSSOLP.spad (SPAD from IN)>>

<<syssolp.spad (SPAD from IN)>>
<<syssolp.spad.dvi (DOC from IN)>>

<<MSYSCMD.o (O from NRLIB)>>
<<MSYSCMD.NRLIB (NRLIB from MID)>>
<<MSYSCMD.spad (SPAD from IN)>>

<<system.spad (SPAD from IN)>>
<<system.spad.dvi (DOC from IN)>>

<<TABLBUMP.o (O from NRLIB)>>
<<TABLBUMP.NRLIB (NRLIB from MID)>>
<<TABLBUMP.spad (SPAD from IN)>>

<<TABLEAU.o (O from NRLIB)>>
<<TABLEAU.NRLIB (NRLIB from MID)>>
<<TABLEAU.spad (SPAD from IN)>>

<<tableau.spad (SPAD from IN)>>
<<tableau.spad.dvi (DOC from IN)>>

<<EQTBL.o (O from NRLIB)>>
<<EQTBL.NRLIB (NRLIB from MID)>>
<<EQTBL.spad (SPAD from IN)>>

<<GSTBL.o (O from NRLIB)>>
<<GSTBL.NRLIB (NRLIB from MID)>>
<<GSTBL.spad (SPAD from IN)>>

<<HASHTBL.o (O from NRLIB)>>
<<HASHTBL.NRLIB (NRLIB from MID)>>
<<HASHTBL.spad (SPAD from IN)>>

<<INTABL.o (O from NRLIB)>>
<<INTABL.NRLIB (NRLIB from MID)>>
<<INTABL.spad (SPAD from IN)>>

<<STBL.o (O from NRLIB)>>
<<STBL.NRLIB (NRLIB from MID)>>
<<STBL.spad (SPAD from IN)>>

<<STRTBL.o (O from NRLIB)>>
<<STRTBL.NRLIB (NRLIB from MID)>>
<<STRTBL.spad (SPAD from IN)>>

<<TABLE.o (O from NRLIB)>>
<<TABLE.NRLIB (NRLIB from MID)>>
<<TABLE.spad (SPAD from IN)>>

<<table.spad (SPAD from IN)>>
<<table.spad.dvi (DOC from IN)>>

<<ITAYLOR.o (O from NRLIB)>>
<<ITAYLOR.NRLIB (NRLIB from MID)>>
<<ITAYLOR.spad (SPAD from IN)>>

<<UTS.o (O from NRLIB)>>
<<UTS.NRLIB (NRLIB from MID)>>
<<UTS.spad (SPAD from IN)>>

<<UTS2.o (O from NRLIB)>>
<<UTS2.NRLIB (NRLIB from MID)>>
<<UTS2.spad (SPAD from IN)>>

<<taylor.spad (SPAD from IN)>>
<<taylor.spad.dvi (DOC from IN)>>

<<TEX.o (O from NRLIB)>>
<<TEX.NRLIB (NRLIB from MID)>>
<<TEX.spad (SPAD from IN)>>

<<TEX1.o (O from NRLIB)>>
<<TEX1.NRLIB (NRLIB from MID)>>
<<TEX1.spad (SPAD from IN)>>

<<tex.spad (SPAD from IN)>>
<<tex.spad.dvi (DOC from IN)>>

<<ESTOOLS.o (O from NRLIB)>>
<<ESTOOLS.NRLIB (NRLIB from MID)>>
<<ESTOOLS.spad (SPAD from IN)>>

<<ESTOOLS1.o (O from NRLIB)>>
<<ESTOOLS1.NRLIB (NRLIB from MID)>>
<<ESTOOLS1.spad (SPAD from IN)>>

<<ESTOOLS2.o (O from NRLIB)>>
<<ESTOOLS2.NRLIB (NRLIB from MID)>>
<<ESTOOLS2.spad (SPAD from IN)>>

<<tools.spad (SPAD from IN)>>
<<tools.spad.dvi (DOC from IN)>>

<<SOLVESER.o (O from NRLIB)>>
<<SOLVESER.NRLIB (NRLIB from MID)>>
<<SOLVESER.spad (SPAD from IN)>>

<<transsolve.spad (SPAD from IN)>>
<<transsolve.spad.dvi (DOC from IN)>>

<<BBTREE.o (O from NRLIB)>>
<<BBTREE.NRLIB (NRLIB from MID)>>
<<BBTREE.spad (SPAD from IN)>>

<<BSTREE.o (O from NRLIB)>>
<<BSTREE.NRLIB (NRLIB from MID)>>
<<BSTREE.spad (SPAD from IN)>>

<<BTCAT-.o (O from NRLIB)>>
<<BTCAT-.NRLIB (NRLIB from MID)>>
<<BTCAT.o (O from NRLIB)>>
<<BTCAT.NRLIB (NRLIB from MID)>>
<<BTCAT.spad (SPAD from IN)>>

<<BTOURN.o (O from NRLIB)>>
<<BTOURN.NRLIB (NRLIB from MID)>>
<<BTOURN.spad (SPAD from IN)>>

<<BTREE.o (O from NRLIB)>>
<<BTREE.NRLIB (NRLIB from MID)>>
<<BTREE.spad (SPAD from IN)>>

<<PENDTREE.o (O from NRLIB)>>
<<PENDTREE.NRLIB (NRLIB from MID)>>
<<PENDTREE.spad (SPAD from IN)>>

<<TREE.o (O from NRLIB)>>
<<TREE.NRLIB (NRLIB from MID)>>
<<TREE.spad (SPAD from IN)>>

<<tree.spad (SPAD from IN)>>
<<tree.spad.dvi (DOC from IN)>>

<<AHYP.o (O from NRLIB)>>
<<AHYP.NRLIB (NRLIB from MID)>>
<<AHYP.spad (SPAD from IN)>>

<<ATRIG-.o (O from NRLIB)>>
<<ATRIG-.NRLIB (NRLIB from MID)>>
<<ATRIG.o (O from NRLIB)>>
<<ATRIG.NRLIB (NRLIB from MID)>>
<<ATRIG.spad (SPAD from IN)>>

<<CFCAT.o (O from NRLIB)>>
<<CFCAT.NRLIB (NRLIB from MID)>>
<<CFCAT.spad (SPAD from IN)>>

<<ELEMFUN-.o (O from NRLIB)>>
<<ELEMFUN-.NRLIB (NRLIB from MID)>>
<<ELEMFUN.o (O from NRLIB)>>
<<ELEMFUN.NRLIB (NRLIB from MID)>>
<<ELEMFUN.spad (SPAD from IN)>>

<<LFCAT.o (O from NRLIB)>>
<<LFCAT.NRLIB (NRLIB from MID)>>
<<LFCAT.spad (SPAD from IN)>>

<<HYPCAT-.o (O from NRLIB)>>
<<HYPCAT-.NRLIB (NRLIB from MID)>>
<<HYPCAT.o (O from NRLIB)>>
<<HYPCAT.NRLIB (NRLIB from MID)>>
<<HYPCAT.spad (SPAD from IN)>>

<<PRIMCAT.o (O from NRLIB)>>
<<PRIMCAT.NRLIB (NRLIB from MID)>>
<<PRIMCAT.spad (SPAD from IN)>>

<<SPFCAT.o (O from NRLIB)>>
<<SPFCAT.NRLIB (NRLIB from MID)>>
<<SPFCAT.spad (SPAD from IN)>>

<<TRANFUN-.o (O from NRLIB)>>
<<TRANFUN-.NRLIB (NRLIB from MID)>>
<<TRANFUN.o (O from NRLIB)>>
<<TRANFUN.NRLIB (NRLIB from MID)>>
<<TRANFUN.spad (SPAD from IN)>>

<<TRIGCAT-.o (O from NRLIB)>>
<<TRIGCAT-.NRLIB (NRLIB from MID)>>
<<TRIGCAT.o (O from NRLIB)>>
<<TRIGCAT.NRLIB (NRLIB from MID)>>
<<TRIGCAT.spad (SPAD from IN)>>

<<trigcat.spad (SPAD from IN)>>
<<trigcat.spad.dvi (DOC from IN)>>

<<GTSET.o (O from NRLIB)>>
<<GTSET.NRLIB (NRLIB from MID)>>
<<GTSET.spad (SPAD from IN)>>

<<PSETPK.o (O from NRLIB)>>
<<PSETPK.NRLIB (NRLIB from MID)>>
<<PSETPK.spad (SPAD from IN)>>

<<TSETCAT-.o (O from NRLIB)>>
<<TSETCAT-.NRLIB (NRLIB from MID)>>
<<TSETCAT.o (O from NRLIB)>>
<<TSETCAT.NRLIB (NRLIB from MID)>>
<<TSETCAT.spad (SPAD from IN)>>
<<TSETCAT-.o (BOOTSTRAP from MID)>>
<<TSETCAT-.lsp (LISP from IN)>>
<<TSETCAT.o (BOOTSTRAP from MID)>>
<<TSETCAT.lsp (LISP from IN)>>

<<WUTSET.o (O from NRLIB)>>
<<WUTSET.NRLIB (NRLIB from MID)>>
<<WUTSET.spad (SPAD from IN)>>

<<triset.spad (SPAD from IN)>>
<<triset.spad.dvi (DOC from IN)>>

<<EXPRTUBE.o (O from NRLIB)>>
<<EXPRTUBE.NRLIB (NRLIB from MID)>>
<<EXPRTUBE.spad (SPAD from IN)>>

<<NUMTUBE.o (O from NRLIB)>>
<<NUMTUBE.NRLIB (NRLIB from MID)>>
<<NUMTUBE.spad (SPAD from IN)>>

<<TUBE.o (O from NRLIB)>>
<<TUBE.NRLIB (NRLIB from MID)>>
<<TUBE.spad (SPAD from IN)>>

<<TUBETOOL.o (O from NRLIB)>>
<<TUBETOOL.NRLIB (NRLIB from MID)>>
<<TUBETOOL.spad (SPAD from IN)>>

<<tube.spad (SPAD from IN)>>
<<tube.spad.dvi (DOC from IN)>>

<<NORMRETR.o (O from NRLIB)>>
<<NORMRETR.NRLIB (NRLIB from MID)>>
<<NORMRETR.spad (SPAD from IN)>>

<<TWOFACT.o (O from NRLIB)>>
<<TWOFACT.NRLIB (NRLIB from MID)>>
<<TWOFACT.spad (SPAD from IN)>>

<<twofact.spad (SPAD from IN)>>
<<twofact.spad.dvi (DOC from IN)>>

<<UNIFACT.o (O from NRLIB)>>
<<UNIFACT.NRLIB (NRLIB from MID)>>
<<UNIFACT.spad (SPAD from IN)>>

<<unifact.spad (SPAD from IN)>>
<<unifact.spad.dvi (DOC from IN)>>

<<UPDECOMP.o (O from NRLIB)>>
<<UPDECOMP.NRLIB (NRLIB from MID)>>
<<UPDECOMP.spad (SPAD from IN)>>

<<updecomp.spad (SPAD from IN)>>
<<updecomp.spad.dvi (DOC from IN)>>

<<UPDIVP.o (O from NRLIB)>>
<<UPDIVP.NRLIB (NRLIB from MID)>>
<<UPDIVP.spad (SPAD from IN)>>

<<updivp.spad (SPAD from IN)>>
<<updivp.spad.dvi (DOC from IN)>>

<<UTSODE.o (O from NRLIB)>>
<<UTSODE.NRLIB (NRLIB from MID)>>
<<UTSODE.spad (SPAD from IN)>>

<<utsode.spad (SPAD from IN)>>
<<utsode.spad.dvi (DOC from IN)>>

<<ANON.o (O from NRLIB)>>
<<ANON.NRLIB (NRLIB from MID)>>
<<ANON.spad (SPAD from IN)>>

<<FUNCTION.o (O from NRLIB)>>
<<FUNCTION.NRLIB (NRLIB from MID)>>
<<FUNCTION.spad (SPAD from IN)>>

<<OVAR.o (O from NRLIB)>>
<<OVAR.NRLIB (NRLIB from MID)>>
<<OVAR.spad (SPAD from IN)>>

<<RULECOLD.o (O from NRLIB)>>
<<RULECOLD.NRLIB (NRLIB from MID)>>
<<RULECOLD.spad (SPAD from IN)>>

<<VARIABLE.o (O from NRLIB)>>
<<VARIABLE.NRLIB (NRLIB from MID)>>
<<VARIABLE.spad (SPAD from IN)>>

<<variable.spad (SPAD from IN)>>
<<variable.spad.dvi (DOC from IN)>>

<<DIRPCAT-.o (O from NRLIB)>>
<<DIRPCAT-.NRLIB (NRLIB from MID)>>
<<DIRPCAT.o (O from NRLIB)>>
<<DIRPCAT.NRLIB (NRLIB from MID)>>
<<DIRPCAT.spad (SPAD from IN)>>

<<DIRPROD.o (O from NRLIB)>>
<<DIRPROD.NRLIB (NRLIB from MID)>>
<<DIRPROD.spad (SPAD from IN)>>

<<DIRPROD2.o (O from NRLIB)>>
<<DIRPROD2.NRLIB (NRLIB from MID)>>
<<DIRPROD2.spad (SPAD from IN)>>

<<IVECTOR.o (O from NRLIB)>>
<<IVECTOR.NRLIB (NRLIB from MID)>>
<<IVECTOR.spad (SPAD from IN)>>

<<VECTCAT-.o (O from NRLIB)>>
<<VECTCAT-.NRLIB (NRLIB from MID)>>
<<VECTCAT.o (O from NRLIB)>>
<<VECTCAT.NRLIB (NRLIB from MID)>>
<<VECTCAT.spad (SPAD from IN)>>

<<VECTOR.o (O from NRLIB)>>
<<VECTOR.NRLIB (NRLIB from MID)>>
<<VECTOR.spad (SPAD from IN)>>
<<VECTOR.o (BOOTSTRAP from MID)>>
<<VECTOR.lsp (LISP from IN)>>

<<VECTOR2.o (O from NRLIB)>>
<<VECTOR2.NRLIB (NRLIB from MID)>>
<<VECTOR2.spad (SPAD from IN)>>

<<vector.spad (SPAD from IN)>>
<<vector.spad.dvi (DOC from IN)>>

<<GRIMAGE.o (O from NRLIB)>>
<<GRIMAGE.NRLIB (NRLIB from MID)>>
<<GRIMAGE.spad (SPAD from IN)>>

<<VIEW2D.o (O from NRLIB)>>
<<VIEW2D.NRLIB (NRLIB from MID)>>
<<VIEW2D.spad (SPAD from IN)>>

<<view2D.spad (SPAD from IN)>>
<<view2D.spad.dvi (DOC from IN)>>

<<VIEW3D.o (O from NRLIB)>>
<<VIEW3D.NRLIB (NRLIB from MID)>>
<<VIEW3D.spad (SPAD from IN)>>

<<view3D.spad (SPAD from IN)>>
<<view3D.spad.dvi (DOC from IN)>>

<<VIEWDEF.o (O from NRLIB)>>
<<VIEWDEF.NRLIB (NRLIB from MID)>>
<<VIEWDEF.spad (SPAD from IN)>>

<<viewDef.spad (SPAD from IN)>>
<<viewDef.spad.dvi (DOC from IN)>>

<<VIEW.o (O from NRLIB)>>
<<VIEW.NRLIB (NRLIB from MID)>>
<<VIEW.spad (SPAD from IN)>>

<<viewpack.spad (SPAD from IN)>>
<<viewpack.spad.dvi (DOC from IN)>>

<<EXIT.o (O from NRLIB)>>
<<EXIT.NRLIB (NRLIB from MID)>>
<<EXIT.spad (SPAD from IN)>>

<<RESLATC.o (O from NRLIB)>>
<<RESLATC.NRLIB (NRLIB from MID)>>
<<RESLATC.spad (SPAD from IN)>>

<<VOID.o (O from NRLIB)>>
<<VOID.NRLIB (NRLIB from MID)>>
<<VOID.spad (SPAD from IN)>>

<<void.spad (SPAD from IN)>>
<<void.spad.dvi (DOC from IN)>>

<<WEIER.o (O from NRLIB)>>
<<WEIER.NRLIB (NRLIB from MID)>>
<<WEIER.spad (SPAD from IN)>>

<<weier.spad (SPAD from IN)>>
<<weier.spad.dvi (DOC from IN)>>

<<OWP.o (O from NRLIB)>>
<<OWP.NRLIB (NRLIB from MID)>>
<<OWP.spad (SPAD from IN)>>

<<WP.o (O from NRLIB)>>
<<WP.NRLIB (NRLIB from MID)>>
<<WP.spad (SPAD from IN)>>

<<wtpol.spad (SPAD from IN)>>
<<wtpol.spad.dvi (DOC from IN)>>

<<FLALG.o (O from NRLIB)>>
<<FLALG.NRLIB (NRLIB from MID)>>
<<FLALG.spad (SPAD from IN)>>

<<LEXP.o (O from NRLIB)>>
<<LEXP.NRLIB (NRLIB from MID)>>
<<LEXP.spad (SPAD from IN)>>

<<LIECAT-.o (O from NRLIB)>>
<<LIECAT-.NRLIB (NRLIB from MID)>>
<<LIECAT.o (O from NRLIB)>>
<<LIECAT.NRLIB (NRLIB from MID)>>
<<LIECAT.spad (SPAD from IN)>>

<<LPOLY.o (O from NRLIB)>>
<<LPOLY.NRLIB (NRLIB from MID)>>
<<LPOLY.spad (SPAD from IN)>>

<<LWORD.o (O from NRLIB)>>
<<LWORD.NRLIB (NRLIB from MID)>>
<<LWORD.spad (SPAD from IN)>>

<<MAGMA.o (O from NRLIB)>>
<<MAGMA.NRLIB (NRLIB from MID)>>
<<MAGMA.spad (SPAD from IN)>>

<<PBWLB.o (O from NRLIB)>>
<<PBWLB.NRLIB (NRLIB from MID)>>
<<PBWLB.spad (SPAD from IN)>>

<<XEXPPKG.o (O from NRLIB)>>
<<XEXPPKG.NRLIB (NRLIB from MID)>>
<<XEXPPKG.spad (SPAD from IN)>>

<<XPBWPOLY.o (O from NRLIB)>>
<<XPBWPOLY.NRLIB (NRLIB from MID)>>
<<XPBWPOLY.spad (SPAD from IN)>>

<<xlpoly.spad (SPAD from IN)>>
<<xlpoly.spad.dvi (DOC from IN)>>

<<FMCAT.o (O from NRLIB)>>
<<FMCAT.NRLIB (NRLIB from MID)>>
<<FMCAT.spad (SPAD from IN)>>

<<FM1.o (O from NRLIB)>>
<<FM1.NRLIB (NRLIB from MID)>>
<<FM1.spad (SPAD from IN)>>

<<OFMONOID.o (O from NRLIB)>>
<<OFMONOID.NRLIB (NRLIB from MID)>>
<<OFMONOID.spad (SPAD from IN)>>

<<XALG.o (O from NRLIB)>>
<<XALG.NRLIB (NRLIB from MID)>>
<<XALG.spad (SPAD from IN)>>

<<XDPOLY.o (O from NRLIB)>>
<<XDPOLY.NRLIB (NRLIB from MID)>>
<<XDPOLY.spad (SPAD from IN)>>

<<XFALG.o (O from NRLIB)>>
<<XFALG.NRLIB (NRLIB from MID)>>
<<XFALG.spad (SPAD from IN)>>

<<XPOLY.o (O from NRLIB)>>
<<XPOLY.NRLIB (NRLIB from MID)>>
<<XPOLY.spad (SPAD from IN)>>

<<XPOLYC.o (O from NRLIB)>>
<<XPOLYC.NRLIB (NRLIB from MID)>>
<<XPOLYC.spad (SPAD from IN)>>

<<XPR.o (O from NRLIB)>>
<<XPR.NRLIB (NRLIB from MID)>>
<<XPR.spad (SPAD from IN)>>

<<XRPOLY.o (O from NRLIB)>>
<<XRPOLY.NRLIB (NRLIB from MID)>>
<<XRPOLY.spad (SPAD from IN)>>

<<xpoly.spad (SPAD from IN)>>
<<xpoly.spad.dvi (DOC from IN)>>

<<YSTREAM.o (O from NRLIB)>>
<<YSTREAM.NRLIB (NRLIB from MID)>>
<<YSTREAM.spad (SPAD from IN)>>

<<ystream.spad (SPAD from IN)>>
<<ystream.spad.dvi (DOC from IN)>>

<<FGLMICPK.o (O from NRLIB)>>
<<FGLMICPK.NRLIB (NRLIB from MID)>>
<<FGLMICPK.spad (SPAD from IN)>>

<<zerodim.spad (SPAD from IN)>>
<<zerodim.spad.dvi (DOC from IN)>>


@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
