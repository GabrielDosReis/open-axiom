/*
 * module for manipulating CSS classes.  Thanks to David Flanagan, 'Javascript The
 * Definitive Guide' O'Reilly for these functions
 */

var CSSClass = {};

// Return true if element e is a member of the class c; false otherwise

CSSClass.is = function(e,c) {
    if (typeof e == "string") e = document.getElementById(e);
    //optimize common cases
    var classes = e.className;
    if (!classes) return false;  // Not a member of any classes
    if (classes == c) return true; // Member of just this one class
    return e.className.search("\\b" + c + "\\b") != -1;
}

// Add class c to the className of element e if it is not already there.

CSSClass.add = function(e,c) {
    if (typeof e == "string") e = document.getElementById(e);
    if (CSSClass.is(e,c)) return; // If already a member do nothing
    if (e.className) c = " " + c; // Whitespace separator if needed
    e.className += c;  // Append the new class to the end
}

// Remove all occurrences of class c from the className of element e

CSSClass.remove = function(e,c) {
    if (typeof e == "string") e = document.getElementById(e);
    e.className = e.className.replace(new RegExp("\\b" + c + "\\b\\s*","g"), "");
}

/* end CSSClass definitions */

function keyPressed(e) {
  var keynum, keychar, shift;
  //  var command = document.getElementById ('commreq').value
  // this works in Firefox, do we need something else in IE?
  if (e.target)
  {
    targ = e.target;
    command = targ.value;
  }
  if(window.event) // IE
  {
    keynum = e.keyCode
  }
  else if(e.which) // Netscape/Firefox/Opera
  {
    keynum = e.which
  }
  shift = e.shiftKey;
  if(shift && keynum == 13 && command != "") {
    makeRequest(targ);
  }
}


function makeRequestBak0() {
    http_request = new XMLHttpRequest();	 
    var command = document.getElementById("axcom").value;
    http_request.open('POST', 'http://127.0.0.1:8085', true);
    http_request.onreadystatechange = handleResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command="+command);
}

function makeRequest(targ) {
    http_request = new XMLHttpRequest();	 
    var command = targ.value;
    http_request.open('POST', 'http://127.0.0.1:8085', true);
    http_request.onreadystatechange = handleResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command="+command);
}


function handleResponseBak0() {
    if (http_request.readyState == 4) {
	if (http_request.status == 200) {

// stick response in vbox=mathBox
	    var mathString = http_request.responseText;
            makeCompCell(mathString);

            var mathRange = document.createRange();
	    var mathBox = document.createElement('vbox');
            mathRange.selectNodeContents(mathBox);
            var mathFragment = mathRange.createContextualFragment(mathString);
            mathBox.appendChild(mathFragment);
// set id on mathBox
	    var stepNum = mathBox.firstChild.firstChild.data;
	    mathBox.setAttribute('id', 'step'+stepNum);
	    // make 'stepnum' and 'command' boxes hidden
            mathBox.firstChild.style.display = 'none';
            mathBox.firstChild.nextSibling.style.display = 'none';
// get command and save it with an In label
// need to test for error, i.e. step number of -1 and do something different
	    if ( stepNum != "-1" )
	    {
		var commSave = document.createElement('description');
		var commSaveCont = document.createElement('hbox');
		var commSaveLabel = document.createElement('label');
		commSave.setAttribute('value',document.getElementById('axcom').value);
		commSaveLabel.setAttribute('value', ' In '+stepNum+':');
		commSaveCont.appendChild(commSaveLabel);
		commSaveCont.appendChild(commSave);
	    }
	    else
	    {
		var commError = document.createElement('description');
		var commSaveCont = document.createElement('hbox');
		commError.setAttribute('value', 'What sort of command is '+document.getElementById('axcom').value+'?');
		commSaveCont.appendChild(commError);
	    }
// add some space between the In and Out
	    var vspace = document.createElement('spacer');
	    vspace.setAttribute('height', '10');
	    vspace.setAttribute('flex', '1');
	    mathBox.insertBefore(vspace, mathBox.firstChild);
	    mathBox.insertBefore(commSaveCont, mathBox.firstChild);
	    var vspace1 = document.createElement('spacer');
	    vspace1.setAttribute('height', '15');
	    vspace1.setAttribute('flex', '1');
            mathBox.appendChild(vspace1);
// insert everything into the document
	    document.getElementById('mathAns').appendChild(mathBox);
//	    document.getElementById('main').insertBefore(mathBox,document.getElementById('combox'));
	    var tempElt = document.getElementById('mathAns').scrollBoxObject;
	    tempElt.ensureElementIsVisible(mathBox);
	} else {
	    alert('There was a problem with the request.'+ http_request.statusText);
	}
    }
}

/*
 * mathString delivered from panAxia has form:
 * <div class="stepnum">...</div>
 * <div class="command">...</div>
 * <div class="algebra">...</div>
 * <div class="mathml">...</div>
 * <div class="type">...</div>
 */

function handleResponseBak1() {
    if (http_request.readyState == 4) {
	if (http_request.status == 200) {
	    var mathString = http_request.responseText;
            var compCell = document.createElement('vbox');
            compCell.setAttribute('class','compCell');
            var resultBox = document.createElement('vbox');
            resultBox.setAttribute('class','result');
            var mathRange = document.createRange();
            mathRange.selectNodeContents(resultBox);
            var mathFragment = mathRange.createContextualFragment(mathString);
            resultBox.appendChild(mathFragment);
            compCell.appendChild(resultBox);
            var ansBox = document.getElementById('mathAns');
            ansBox.appendChild(compCell);

	}
    }
}

function handleResponse() {
    if (http_request.readyState == 4) {
	if (http_request.status == 200) {
	    var mathString = http_request.responseText;
            makeCompCell(mathString);
	}
    }
}


function makeCompCell(mathString) {
    var compCell = document.createElement('vbox');
    compCell.setAttribute('class','compCell');
    var resultBox = document.createElement('vbox');
    resultBox.setAttribute('class','result');
    var mathRange = document.createRange();
    mathRange.selectNodeContents(resultBox);
    var mathFragment = mathRange.createContextualFragment(mathString);
    resultBox.appendChild(mathFragment);
    compCell.appendChild(resultBox);
    // command and type come bare and need to be decorated, i.e.
    // the command has to have the input box constructed and
    // the type needs just the text "Type: " added.
    var stepNum = getStepBox(resultBox).firstChild.data;
    var typeBox = getTypeBox(resultBox);
    var commandBox = getCommandBox(resultBox);
    var command = commandBox.firstChild.data;
    compCell.setAttribute('id','step'+stepNum);
    var newCommBox = document.createElement('hbox');
    newCommBox.setAttribute('class','command');
    newCommBox.setAttribute('oncommand','makeRequest();');
    var button = document.createElement('button');
    button.setAttribute('label','Send command');
    var textBox = document.createElement('textbox');
    textBox.setAttribute('multiline','true');
    textBox.setAttribute('rows','2');
    textBox.setAttribute('cols','75');
    textBox.setAttribute('class','inComm');
    textBox.setAttribute('value',command);
    textBox.setAttribute('alt',command);
    newCommBox.appendChild(button);
    newCommBox.appendChild(textBox);
    resultBox.insertBefore(newCommBox,commandBox);
    resultBox.removeChild(commandBox);
    var ansBox = document.getElementById('mathAns');
    //ansBox.insertBefore(compCell,ansBox.firstChild);
    ansBox.appendChild(compCell);
}

function makeCompCellBak0(mathString) {
    var compCell = document.createElement('vbox');
    compCell.setAttribute('class','compCell');
    var resultBox = document.createElement('vbox');
    resultBox.setAttribute('class','result');
    var mathRange = document.createRange();
    mathRange.selectNodeContents(resultBox);
    var mathFragment = mathRange.createContextualFragment(mathString);
    resultBox.appendChild(mathFragment);
    compCell.appendChild(resultBox);
    // command and type come bare and need to be decorated, i.e.
    // the command has to have the input box constructed and
    // the type needs just the text "Type: " added.
    var stepNum = getStepBox(resultBox).firstChild.data;
    var typeBox = getTypeBox(resultBox);
    var commandBox = getCommandBox(resultBox);
    var command = commandBox.firstChild.data;
    compCell.setAttribute('id','step'+stepNum);
    var newCommBox = document.createElement('hbox');
    newCommBox.setAttribute('class','command');
    newCommBox.setAttribute('oncommand','makeRequest();');
    var button = document.createElement('button');
    button.setAttribute('label','Send command');
    var textBox = document.createElement('textbox');
    textBox.setAttribute('multiline','true');
    textBox.setAttribute('rows','2');
    textBox.setAttribute('cols','75');
    textBox.setAttribute('class','inComm');
    textBox.setAttribute('value',command);
    textBox.setAttribute('alt',command);
    newCommBox.appendChild(button);
    newCommBox.appendChild(textBox);
    resultBox.insertBefore(newCommBox,commandBox);
    resultBox.removeChild(commandBox);
    var ansBox = document.getElementById('mathAns');
    //ansBox.insertBefore(compCell,ansBox.firstChild);
    ansBox.appendChild(compCell);
}


/* Each compCell has a unique resultBox determined by its className
 */

function getResultBox(compCell) {
    var children = compCell.childNodes;
    for (var i = 0; i < children.length; i++) {
	if (CSSClass.is(children[i], 'result')) return children[i];
    }
}

/* I don't want to rely on the specific structure of the resultBox to access
 * it's children.  Rather I want to think of it as a bag containing, at present,
 * boxes for stepnum, command, algebra, mathml, and type which could be in any
 * order.  Also I may want to add something new, for instance a TeX box.  So I
 * define functions to retrieve these nodes for a given resultBox node.
 */

function getStepBox(resultBox) {
    // make sure argument is of right class
    if (!CSSClass.is(resultBox,'result')) {
	alert('getStepBox: argument not resultBox');
	return;
    }
    var children = resultBox.childNodes;
    for (var i = 0; i < children.length; i++) {
	if (CSSClass.is(children[i],'stepnum')) return children[i]
    }
}

function getCommandBox(resultBox) {
    // make sure argument is of right class
    if (!CSSClass.is(resultBox,'result')) {
	alert('getStepBox: argument not resultBox');
	return;
    }
    var children = resultBox.childNodes;
    for (var i = 0; i < children.length; i++) {
	if (CSSClass.is(children[i],'command')) return children[i]
    }
}

function getAlgebraBox(resultBox) {
    // make sure argument is of right class
    if (!CSSClass.is(resultBox,'result')) {
	alert('getStepBox: argument not resultBox');
	return;
    }
    var children = resultBox.childNodes;
    for (var i = 0; i < children.length; i++) {
	if (CSSClass.is(children[i],'algebra')) return children[i]
    }
}

function getMathmlBox(resultBox) {
    // make sure argument is of right class
    if (!CSSClass.is(resultBox,'result')) {
	alert('getStepBox: argument not resultBox');
	return;
    }
    var children = resultBox.childNodes;
    for (var i = 0; i < children.length; i++) {
	if (CSSClass.is(children[i],'mathml')) return children[i]
    }
}

function getTypeBox(resultBox) {
    // make sure argument is of right class
    if (!CSSClass.is(resultBox,'result')) {
	alert('getStepBox: argument not resultBox');
	return;
    }
    var children = resultBox.childNodes;
    for (var i = 0; i < children.length; i++) {
	if (CSSClass.is(children[i],'type')) return children[i]
    }
}


function saveWork() {
    var doc = document.getElementById('mathAns');
    var serializer = new XMLSerializer();
    var foStream = Components.classes["@mozilla.org/network/file-output-stream;1"]
	.createInstance(Components.interfaces.nsIFileOutputStream);
    var file = Components.classes["@mozilla.org/file/directory_service;1"]
	.getService(Components.interfaces.nsIProperties)
	.get("Home", Components.interfaces.nsIFile); // get home folder
    file.append("axiom_data");   // extensions sub-directory
    file.append("axSave.xml");   // filename
    foStream.init(file, 0x02 | 0x08 | 0x20, 0664, 0);   // write, create, truncate
    serializer.serializeToStream(doc, foStream, "");   // rememeber, doc is the DOM tree
    foStream.close();

}


function saveWork1(data) {
//    var data = "beauty";
    var foStream = Components.classes["@mozilla.org/network/file-output-stream;1"]
	.createInstance(Components.interfaces.nsIFileOutputStream);
    var file = Components.classes["@mozilla.org/file/local;1"]
	.createInstance(Components.interfaces.nsILocalFile);
    file.initWithPath("/home/arthur/test.txt");   // filename
    foStream.init(file, 0x02 | 0x08 | 0x20, 0664, 0);   // write, create, truncate
    foStream.write(data, data.length);
    foStream.close();
}

function restoreWork() {
/*
    var data = '<vbox xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\" id=\"shit\"><vbox id=\"box1\"><description>A</description></vbox><vbox><description>B</description></vbox><vbox><description>C</description></vbox></vbox>';
    var parser = new DOMParser();
    var dom = parser.parseFromString(data, "text/xml");
    var restoreNode = dom.getElementById('shit');
    var mathNode = document.getElementById('mathAns');
    var eltList = restoreNode.childNodes;
    while (eltList.length > 0)
    {
	mathNode.appendChild(eltList.item(0));
    }
*/

    var savData = "";
    var file = Components.classes["@mozilla.org/file/directory_service;1"]
	.getService(Components.interfaces.nsIProperties)
	.get("Home", Components.interfaces.nsIFile); // get home folder
    file.append("axiom_data");   // sub-directory
    file.append("axSave.xml");   // filename
    var fstream = Components.classes["@mozilla.org/network/file-input-stream;1"]
	.createInstance(Components.interfaces.nsIFileInputStream);
    var sstream = Components.classes["@mozilla.org/scriptableinputstream;1"]
	.createInstance(Components.interfaces.nsIScriptableInputStream);
    fstream.init(file, 1, 0, false);
    sstream.init(fstream); 

    var str = sstream.read(-1);
    while (str.length > 0) {
	savData += str;
	str = sstream.read(-1);
    }

    sstream.close();
    fstream.close();
    var parser = new DOMParser();
    var dom = parser.parseFromString(savData, "text/xml");
    var restoreNode = dom.getElementById('mathAns');
    var mathNode = document.getElementById('mathAns');
    var eltList = dom.getElementById('mathAns').childNodes;
    while ( eltList.length > 0)
    {
	mathNode.appendChild(eltList.item(0));
    }

}
